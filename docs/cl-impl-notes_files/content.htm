<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>cl-impl-notes</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14.5pt; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20.5pt; }
 .s2 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6.5pt; }
 .s5 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 15pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; margin:0pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s9 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11.5pt; }
 .s10 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 11.5pt; }
 .s11 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11.5pt; }
 .s12 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 .s13 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 5.5pt; }
 h4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 15.5pt; }
 .s14 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 15.5pt; }
 .s15 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s16 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 15.5pt; vertical-align: -6pt; }
 .s17 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 10pt; }
 .s18 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10.5pt; }
 .s19 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 .s20 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 10pt; }
 .s21 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 10.5pt; }
 .s22 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 .s23 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 .s24 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s25 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s26 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s27 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10.5pt; }
 .s28 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s29 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s30 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; }
 .s31 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9.5pt; }
 .s32 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9.5pt; }
 .s33 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s34 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 .s35 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s36 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 14.5pt; }
 .s37 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s38 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s39 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 11pt; }
 .s40 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s41 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s42 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s43 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 11pt; }
 .s44 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6.5pt; }
 .s45 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 12.5pt; }
 .s46 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12.5pt; }
 .s47 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s48 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 13pt; }
 .s49 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 8pt; }
 .s50 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s51 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12.5pt; }
 .s52 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 .s53 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 9.5pt; }
 .s54 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 7.5pt; }
 h2 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 18pt; }
 .s55 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s56 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s57 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 .s58 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s59 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 15.5pt; }
 .s60 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s61 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 .s62 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 15pt; }
 .s63 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 9pt; }
 .s64 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 18.5pt; }
 .h3, h3 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 16pt; }
 .s65 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 9pt; }
 .s66 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s67 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 11pt; }
 .s68 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 5.5pt; }
 .s69 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10.5pt; }
 .s71 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s72 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8.5pt; }
 .s73 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s74 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 12pt; }
 .s75 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s76 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11.5pt; }
 .s77 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s78 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; }
 .s79 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 4pt; }
 .s80 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 .s81 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9.5pt; }
 .s82 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 10.5pt; }
 .s83 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 18.5pt; vertical-align: -12pt; }
 .s84 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s85 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 17pt; }
 .s86 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s87 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s88 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s89 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s90 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 3.5pt; }
 .s91 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 23pt; }
 .s92 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 25pt; }
 .s93 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 18.5pt; }
 .s94 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 13.5pt; }
 .s95 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 20pt; }
 .s96 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; vertical-align: 5pt; }
 .s97 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 10pt; }
 .s98 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11.5pt; }
 .s99 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; vertical-align: -3pt; }
 .s100 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: -2pt; }
 .s101 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4.5pt; }
 .s102 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; vertical-align: -2pt; }
 .s103 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s104 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; vertical-align: -2pt; }
 .s105 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; vertical-align: -2pt; }
 .s106 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 8.5pt; }
 .s107 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; vertical-align: -3pt; }
 .s108 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: -3pt; }
 .s109 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; vertical-align: -2pt; }
 .s110 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: -2pt; }
 .s111 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 8.5pt; }
 .s112 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; vertical-align: -3pt; }
 .s113 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; vertical-align: -2pt; }
 .s114 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 3pt; }
 .s115 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 13.5pt; }
 .s116 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10.5pt; }
 .s117 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 20.5pt; }
 .s118 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 5pt; vertical-align: 3pt; }
 .s119 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; vertical-align: 3pt; }
 .s120 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s121 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 60pt; }
 .s123 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 15.5pt; }
 .s124 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12.5pt; }
 .s125 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8.5pt; vertical-align: -2pt; }
 .s126 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; vertical-align: -3pt; }
 .s127 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 5pt; }
 .s128 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; vertical-align: -2pt; }
 .s129 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s130 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 11.5pt; }
 .s131 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11.5pt; }
 .s132 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt; }
 .s133 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: -3pt; }
 .s134 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; vertical-align: -3pt; }
 .s135 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 9.5pt; }
 .s137 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s138 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; vertical-align: -3pt; }
 .s139 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 13.5pt; }
 .s140 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s141 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s142 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; vertical-align: -3pt; }
 .s143 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 9pt; }
 .s144 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 10.5pt; }
 .s145 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11.5pt; }
 .s146 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 15.5pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 2; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: e1 5; }
 #l3> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l3> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 #l4 {padding-left: 0pt;counter-reset: e2 3; }
 #l4> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l4> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l5 {padding-left: 0pt;counter-reset: e3 1; }
 #l5> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l5> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 li {display: block; }
 #l6 {padding-left: 0pt;counter-reset: f1 7; }
 #l6> li>*:first-child:before {counter-increment: f1; content: counter(f1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l6> li:first-child>*:first-child:before {counter-increment: f1 0;  }
 #l7 {padding-left: 0pt;counter-reset: f2 5; }
 #l7> li>*:first-child:before {counter-increment: f2; content: counter(f1, decimal)"."counter(f2, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: f2 0;  }
 li {display: block; }
 #l8 {padding-left: 0pt;counter-reset: g1 12; }
 #l8> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9.5pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l9 {padding-left: 0pt;counter-reset: g2 23; }
 #l9> li>*:first-child:before {counter-increment: g2; content: counter(g2, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l9> li:first-child>*:first-child:before {counter-increment: g2 0;  }
 li {display: block; }
 #l10 {padding-left: 0pt; }
 #l10> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; vertical-align: -6pt; }
 #l11 {padding-left: 0pt;counter-reset: h2 25; }
 #l11> li>*:first-child:before {counter-increment: h2; content: counter(h2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: h2 0;  }
 #l12 {padding-left: 0pt;counter-reset: h3 1; }
 #l12> li>*:first-child:before {counter-increment: h3; content: counter(h2, decimal)"."counter(h3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: h3 0;  }
 li {display: block; }
 #l13 {padding-left: 0pt;counter-reset: i1 25; }
 #l13> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l13> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l14 {padding-left: 0pt;counter-reset: i2 2; }
 #l14> li>*:first-child:before {counter-increment: i2; content: counter(i1, decimal)"."counter(i2, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: i2 0;  }
 li {display: block; }
 #l15 {padding-left: 0pt;counter-reset: j1 5; }
 #l15> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l15> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l16 {padding-left: 0pt;counter-reset: j2 3; }
 #l16> li>*:first-child:before {counter-increment: j2; content: counter(j1, decimal)"."counter(j2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l16> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l17 {padding-left: 0pt;counter-reset: j3 1; }
 #l17> li>*:first-child:before {counter-increment: j3; content: counter(j1, decimal)"."counter(j2, decimal)"."counter(j3, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l17> li:first-child>*:first-child:before {counter-increment: j3 0;  }
 li {display: block; }
 #l18 {padding-left: 0pt;counter-reset: k1 1; }
 #l18> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 li {display: block; }
 #l19 {padding-left: 0pt;counter-reset: l1 7; }
 #l19> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l19> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l20 {padding-left: 0pt;counter-reset: l2 5; }
 #l20> li>*:first-child:before {counter-increment: l2; content: counter(l1, decimal)"."counter(l2, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11.5pt; }
 #l20> li:first-child>*:first-child:before {counter-increment: l2 0;  }
 li {display: block; }
 #l21 {padding-left: 0pt;counter-reset: m1 1; }
 #l21> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 li {display: block; }
 #l22 {padding-left: 0pt;counter-reset: n1 9; }
 #l22> li>*:first-child:before {counter-increment: n1; content: counter(n1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l22> li:first-child>*:first-child:before {counter-increment: n1 0;  }
 #l23 {padding-left: 0pt;counter-reset: n2 1; }
 #l23> li>*:first-child:before {counter-increment: n2; content: counter(n1, decimal)"."counter(n2, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11.5pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: n2 0;  }
 li {display: block; }
 #l24 {padding-left: 0pt;counter-reset: o1 1; }
 #l24> li>*:first-child:before {counter-increment: o1; content: "("counter(o1, lower-latin)") "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: o1 0;  }
 li {display: block; }
 #l25 {padding-left: 0pt;counter-reset: p1 1; }
 #l25> li>*:first-child:before {counter-increment: p1; content: counter(p1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: p1 0;  }
 li {display: block; }
 #l26 {padding-left: 0pt;counter-reset: q1 13; }
 #l26> li>*:first-child:before {counter-increment: q1; content: counter(q1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l26> li:first-child>*:first-child:before {counter-increment: q1 0;  }
 #l27 {padding-left: 0pt;counter-reset: q2 1; }
 #l27> li>*:first-child:before {counter-increment: q2; content: counter(q1, decimal)"."counter(q2, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11.5pt; }
 #l27> li:first-child>*:first-child:before {counter-increment: q2 0;  }
 li {display: block; }
 #l28 {padding-left: 0pt;counter-reset: r1 13; }
 #l28> li>*:first-child:before {counter-increment: r1; content: counter(r1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l28> li:first-child>*:first-child:before {counter-increment: r1 0;  }
 #l29 {padding-left: 0pt;counter-reset: r2 4; }
 #l29> li>*:first-child:before {counter-increment: r2; content: counter(r1, decimal)"."counter(r2, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l29> li:first-child>*:first-child:before {counter-increment: r2 0;  }
 li {display: block; }
 #l30 {padding-left: 0pt;counter-reset: s1 15; }
 #l30> li>*:first-child:before {counter-increment: s1; content: counter(s1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l30> li:first-child>*:first-child:before {counter-increment: s1 0;  }
 #l31 {padding-left: 0pt;counter-reset: s2 1; }
 #l31> li>*:first-child:before {counter-increment: s2; content: counter(s1, decimal)"."counter(s2, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l31> li:first-child>*:first-child:before {counter-increment: s2 0;  }
 li {display: block; }
 #l32 {padding-left: 0pt;counter-reset: t1 17; }
 #l32> li>*:first-child:before {counter-increment: t1; content: counter(t1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l32> li:first-child>*:first-child:before {counter-increment: t1 0;  }
 #l33 {padding-left: 0pt;counter-reset: t2 1; }
 #l33> li>*:first-child:before {counter-increment: t2; content: counter(t1, decimal)"."counter(t2, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l33> li:first-child>*:first-child:before {counter-increment: t2 0;  }
 li {display: block; }
 #l34 {padding-left: 0pt; }
 #l34> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 li {display: block; }
 #l35 {padding-left: 0pt; }
 #l35> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 li {display: block; }
 #l36 {padding-left: 0pt; }
 #l36> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 li {display: block; }
 #l37 {padding-left: 0pt;counter-reset: x1 25; }
 #l37> li>*:first-child:before {counter-increment: x1; content: counter(x1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l37> li:first-child>*:first-child:before {counter-increment: x1 0;  }
 #l38 {padding-left: 0pt;counter-reset: x2 1; }
 #l38> li>*:first-child:before {counter-increment: x2; content: counter(x1, decimal)"."counter(x2, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l38> li:first-child>*:first-child:before {counter-increment: x2 0;  }
 #l39 {padding-left: 0pt; }
 #l39> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l40 {padding-left: 0pt; }
 #l40> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l41 {padding-left: 0pt;counter-reset: c1 1; }
 #l41> li>*:first-child:before {counter-increment: c1; content: counter(c1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l41> li:first-child>*:first-child:before {counter-increment: c1 0;  }
 #l42 {padding-left: 0pt;counter-reset: d1 1; }
 #l42> li>*:first-child:before {counter-increment: d1; content: counter(d1, lower-latin)" "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l42> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l43 {padding-left: 0pt; }
 #l43> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l44 {padding-left: 0pt;counter-reset: f1 1; }
 #l44> li>*:first-child:before {counter-increment: f1; content: counter(f1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l44> li:first-child>*:first-child:before {counter-increment: f1 0;  }
 #l45 {padding-left: 0pt;counter-reset: x3 1; }
 #l45> li>*:first-child:before {counter-increment: x3; content: counter(x1, decimal)"."counter(x2, decimal)"."counter(x3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 #l45> li:first-child>*:first-child:before {counter-increment: x3 0;  }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p class="s1" style="padding-top: 3pt;padding-left: 170pt;text-indent: 0pt;text-align: left;"><a name="bookmark0">IMPLEMENTATION NOTES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">XEROX</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-top: 4pt;padding-left: 221pt;text-indent: 0pt;line-height: 10pt;text-align: left;">3102464</p><p class="s3" style="padding-bottom: 3pt;padding-left: 220pt;text-indent: 0pt;line-height: 85%;text-align: left;">Lyric Release June <span class="s2">1987</span></p><p style="padding-left: 39pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="600" height="1" alt="image" src="Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 4pt;padding-left: 86pt;text-indent: 0pt;text-align: justify;">XEROX COMMON LISP IMPLEMENTATION NOTES</p><p class="s2" style="padding-top: 7pt;padding-left: 86pt;text-indent: 0pt;text-align: left;">3102464</p><p class="s3" style="padding-top: 8pt;padding-left: 86pt;text-indent: 0pt;line-height: 184%;text-align: justify;">Lyric Release June 1987</p><p class="s3" style="padding-left: 85pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The information in this document is subject to change without notice and should not be construed as a commitment by Xerox Corporation. While every effort has been made to ensure the accuracy of this document, Xerox Corporation assumes no responsibility for any errors that may appear_</p><p class="s3" style="padding-top: 8pt;padding-left: 86pt;text-indent: 0pt;line-height: 184%;text-align: justify;">Copyright <span class="s4">© </span>1987 by Xerox Corporation_ Xerox Common Lisp is a trademark_</p><p class="s3" style="padding-left: 86pt;text-indent: 0pt;text-align: justify;">All rights reserved_</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 86pt;text-indent: 0pt;line-height: 92%;text-align: justify;">&quot;Copyright protection claimed includes all forms and matters of copyrightable material and information now allowed by statutory or judicial law or hereinafter granted, including, without limitation, material generated from the software programs which are displayed on the screen, such as icons, screen display looks, etc.&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 86pt;text-indent: 0pt;line-height: 90%;text-align: justify;">This manual is set in Modern typeface with text written and formatted on Xerox Artificial Intelligence workstations. Xerox laser printers were used to produce text <span class="s5">masters.</span></p><p class="s6" style="padding-top: 3pt;text-indent: 0pt;text-align: right;"><a name="a0">PREFACE</a></p><p style="padding-left: 220pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="349" height="7" alt="image" src="Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 220pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Xerox Common Lisp Implementation Notes cover several aspects of the Lyric release. In these notes you will find:</p><ul id="l1"><li><p style="padding-top: 6pt;padding-left: 230pt;text-indent: -10pt;line-height: 107%;text-align: justify;">An explanation of how Xerox Common Lisp extends the Common Lisp standard. For example, in Xerox Common Lisp the Common Lisp array-constructing function <span class="s7">make-array </span>has additional keyword arguments that enhance its functionality.</p></li><li><p style="padding-top: 6pt;padding-left: 230pt;text-indent: -10pt;line-height: 107%;text-align: justify;">An explanation of how several ambiguities in Steele&#39;s Common <i>Lisp: the Language </i>were resolved.</p></li><li><p style="padding-top: 6pt;padding-left: 230pt;text-indent: -10pt;line-height: 107%;text-align: justify;">A description of additional features that provide far more than extensions to Common Lisp.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 44pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="584" height="2" alt="image" src="Image_003.png"/></span></p><p class="s9" style="padding-left: 44pt;text-indent: 0pt;text-align: justify;"><a name="a1">How the </a><u>Implementation</u> Notes are <u>Organized</u> <span class="s11">.</span></p><p style="padding-left: 44pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="590" height="1" alt="image" src="Image_004.png"/></span></p><p style="padding-top: 4pt;padding-left: 220pt;text-indent: 0pt;line-height: 107%;text-align: justify;">These notes are intended to accompany the Guy L. Steele book, <i>Common Lisp: the Language </i>which represents the current standard for Co mon Lisp.</p><p style="padding-top: 5pt;padding-left: 220pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The implementation notes are qrganized to coincide with the chapter and section arrangement of the Steele book.  Not every section in the book has a corresponding section in the implementation notes because most of <i>Common Lisp: the Language </i>is implemented as presented.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 45pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="582" height="2" alt="image" src="Image_005.png"/></span></p><p class="s9" style="padding-left: 44pt;text-indent: 0pt;text-align: justify;"><a name="a2">How to Use the </a><u>Implementation</u> Notes</p><p style="padding-left: 44pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="584" height="1" alt="image" src="Image_006.png"/></span></p><p style="padding-top: 4pt;padding-left: 221pt;text-indent: 0pt;line-height: 107%;text-align: justify;">We recommend that when you consult Guy Steele&#39;s book, you also use these implementation notes to see if any extensions have been added or  ambiguities resolved for that portion of the text.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 45pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="584" height="1" alt="image" src="Image_007.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: 0pt;text-align: justify;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE <span class="s13">Ill</span></p><p class="s3" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">TABLE OF CONTENTS</p><p style="padding-left: 25pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="566" height="0" alt="image" src="Image_008.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 5pt;padding-bottom: 1pt;padding-left: 308pt;text-indent: 0pt;text-align: left;"><a name="a3">TABLE OF CONTENTS</a></h4><p style="padding-left: 201pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="348" height="7" alt="image" src="Image_009.png"/></span></p><p style="padding-top: 5pt;padding-left: 201pt;text-indent: 0pt;line-height: 108%;text-align: justify;">Only those chapters with additions, ambiguities, or extensions to Steele&#39;s Common <i>Lisp: the Language </i>are provided in this document.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="2" alt="image" src="Image_010.png"/></span></p><p class="s14" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">··-</p><p class="s15" style="padding-top: 4pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">1, <span class="s16">,</span>In<span class="s16">-</span></p><p class="s15" style="padding-top: 4pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">troduction<u> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</u><span class="s16">---</span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">see the  S<span class="s16">-</span>teele chapter</p><ol id="l2"><li><p class="s18" style="padding-top: 1pt;padding-left: 40pt;text-indent: -15pt;text-align: left;">Data Types                                              <span class="p">see the Steele chapter</span></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_011.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_012.png"/></span></p></li><li><p class="s15" style="padding-top: 8pt;padding-left: 40pt;text-indent: -15pt;text-align: left;">Scope and Extent                                           <span class="p">see the Steele chapter</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_013.png"/></span></p></li><li><p class="s18" style="padding-top: 6pt;padding-left: 40pt;text-indent: -15pt;text-align: left;"><a name="a4">Type Specifiers                                                                </a><span class="s19">1</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="485" height="1" alt="image" src="Image_014.png"/></span></p><p style="padding-top: 6pt;padding-left: 97pt;text-indent: 0pt;text-align: left;">4.2. Type Specifier Lists                                                                                       <span class="s19">1</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="485" height="1" alt="image" src="Image_015.png"/></span></p><p style="padding-top: 4pt;padding-left: 97pt;text-indent: 0pt;text-align: left;">4.8. Type Conversion Function                                                                        <span class="s19">1</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_016.png"/></span></p></li><li><p class="s18" style="padding-top: 19pt;padding-left: 39pt;text-indent: -14pt;text-align: left;"><a name="a5">Program Structure</a></p><p style="padding-top: 6pt;padding-left: 200pt;text-indent: 0pt;text-align: left;">5.1.2.  Variables                                                            3</p><p style="padding-left: 200pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="346" height="1" alt="image" src="Image_017.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="483" height="1" alt="image" src="Image_018.png"/></span></p><p style="padding-top: 3pt;padding-left: 97pt;text-indent: 0pt;text-align: left;">5.2.  Functions                                                                                                  3</p><p style="text-indent: 0pt;text-align: left;"><span><img width="346" height="1" alt="image" src="Image_019.png"/></span></p><p style="padding-top: 5pt;padding-left: 200pt;text-indent: 0pt;text-align: left;">5.2.2.   Lambda-Expressions                                            3</p><p style="text-indent: 0pt;text-align: left;"><span><img width="346" height="1" alt="image" src="Image_020.png"/></span></p><ol id="l3"><ol id="l4"><ol id="l5"><li><p style="padding-top: 5pt;padding-left: 232pt;text-indent: -32pt;text-align: left;">D.efining Named Fun ions                              3</p><p style="text-indent: 0pt;text-align: left;"><span><img width="278" height="1" alt="image" src="Image_021.png"/></span></p></li><li><p class="s20" style="padding-top: 4pt;padding-left: 251pt;text-indent: -50pt;line-height: 146%;text-align: left;">Dedaring Global Variables and Named<span class="p"> Constants                                                    4</span></p></li></ol></ol></ol><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_022.png"/></span></p></li><li><p class="s18" style="padding-top: 1pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="a6">Predicates                                                                     </a><span class="p">5</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_023.png"/></span></p></li><li><p class="s18" style="padding-top: 8pt;padding-left: 39pt;text-indent: -15pt;text-align: left;">Control Structure                                                           <span class="p">7</span></p></li></ol><p style="text-indent: 0pt;text-align: left;"><span><img width="485" height="1" alt="image" src="Image_024.png"/></span></p><p style="padding-top: 6pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">7.3. Function Invocation                                                                             7</p><p style="text-indent: 0pt;text-align: left;"><span><img width="485" height="1" alt="image" src="Image_025.png"/></span></p><ol id="l6"><ol id="l7"><li><p style="padding-top: 5pt;padding-left: 120pt;text-indent: -24pt;text-align: left;">Establishing New Variable Bindings                                                        7</p><p style="text-indent: 0pt;text-align: left;"><span><img width="485" height="1" alt="image" src="Image_026.png"/></span></p></li><li><p style="padding-top: 5pt;padding-left: 120pt;text-indent: -24pt;text-align: left;">Conditionars                                                                                             7</p></li></ol></ol><p class="s20" style="padding-top: 5pt;padding-left: 200pt;text-indent: 0pt;text-align: left;">7.9.1. &nbsp;Constructs for &nbsp;Handling Multiple Values &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<span class="s21">8</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_027.png"/></span></p><p class="s22" style="padding-top: 3pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a name="a7">·s. </a><span class="s18">Macros                                                                        </span><span class="s23">9</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="346" height="1" alt="image" src="Image_028.png"/></span></p><p style="padding-top: 6pt;padding-left: 200pt;text-indent: 0pt;text-align: left;">Compatibility Note                                                   11</p><p class="s24" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a name="a8">9. </a><span class="s18">Declarations                                                              </span><span class="p">13</span></p><table style="border-collapse:collapse;margin-left:24.5732pt" cellspacing="0"><tr style="height:18pt"><td style="width:72pt;border-top-style:solid;border-top-width:1pt" rowspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">9.1.</p></td><td style="width:219pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 5pt;padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Declaration Syntax</p></td><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 5pt;text-indent: 0pt;line-height: 11pt;text-align: right;">13</p></td></tr><tr style="height:16pt"><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;">9.2.</p></td><td style="width:219pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Declaration Specifiers</p></td><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;text-indent: 0pt;line-height: 11pt;text-align: right;">13</p></td></tr><tr style="height:19pt"><td style="width:72pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s26" style="padding-top: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">10. <span class="s27">Symbols</span></p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:219pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 6pt;text-indent: 0pt;line-height: 11pt;text-align: right;">15</p></td></tr><tr style="height:21pt"><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s27" style="padding-top: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">11. Packages</p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:219pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 8pt;text-indent: 0pt;line-height: 11pt;text-align: right;">17</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><span><img width="484" height="1" alt="image" src="Image_029.png"/></span></p><p style="padding-top: 4pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">Standard Packages                                                                                              <span class="s28">17</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_030.png"/></span></p><p class="s29" style="padding-top: 29pt;padding-left: 25pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                        <span class="s30">V</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_031.png"/></span></p><p class="s12" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">TABLE OF CONTENTS</p><p class="s20" style="padding-top: 18pt;padding-left: 181pt;text-indent: 0pt;text-align: left;">Extensions to Standard Packages &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="p"> </span>17</p><p style="text-indent: 0pt;text-align: left;"><span><img width="483" height="1" alt="image" src="Image_032.png"/></span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Modules                                                                                                          20</p><p style="text-indent: 0pt;text-align: left;"><span><img width="482" height="1" alt="image" src="Image_033.png"/></span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Error Conditions Raised by the Package System                                               20</p><p style="text-indent: 0pt;text-align: left;"><span><img width="482" height="1" alt="image" src="Image_034.png"/></span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Koto Reader Compatibility Feature                                                               25</p><p style="text-indent: 0pt;text-align: left;"><span><img width="483" height="1" alt="image" src="Image_035.png"/></span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Moving Existing Code into a New Package                                                    29</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_036.png"/></span></p><ol id="l8"><li><p class="s31" style="padding-top: 7pt;padding-left: 26pt;text-indent: -21pt;text-align: left;">Numbers                                                                                                                                 <span class="p">37</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">12.10. Implementation Parameterf                                                           37</p><table style="border-collapse:collapse;margin-left:5.38159pt" cellspacing="0"><tr style="height:19pt"><td style="width:73pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s32" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">13. Characters</p></td><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 6pt;text-indent: 0pt;line-height: 11pt;text-align: right;">39</p></td></tr><tr style="height:18pt"><td style="width:73pt;border-top-style:solid;border-top-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">13.1.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Character Attributes</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 5pt;text-indent: 0pt;line-height: 11pt;text-align: right;">39</p></td></tr><tr style="height:17pt"><td style="width:73pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">13.2.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Predicates on Characters</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;text-indent: 0pt;line-height: 11pt;text-align: right;">40</p></td></tr><tr style="height:17pt"><td style="width:73pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;">13.4.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Character Conversions</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;text-indent: 0pt;line-height: 11pt;text-align: right;">40</p></td></tr><tr style="height:17pt"><td style="width:73pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;">13.5.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Character Control-Bit Functions</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;text-indent: 0pt;line-height: 11pt;text-align: right;">41</p></td></tr><tr style="height:19pt"><td style="width:73pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s32" style="padding-top: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">14. <span class="s25">Sequences</span></p></td><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 6pt;padding-right: 2pt;text-indent: 0pt;line-height: 11pt;text-align: right;">see the</p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 6pt;padding-right: 1pt;text-indent: 0pt;line-height: 11pt;text-align: right;">Steele chapter</p></td></tr><tr style="height:21pt"><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s32" style="padding-top: 8pt;text-indent: 0pt;line-height: 11pt;text-align: left;">15. <span class="s25">Lists</span></p></td><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 8pt;text-indent: 0pt;line-height: 11pt;text-align: right;">43</p></td></tr><tr style="height:18pt"><td style="width:73pt;border-top-style:solid;border-top-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">15.1</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 5pt;padding-left: 1pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Conses</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 5pt;text-indent: 0pt;line-height: 11pt;text-align: right;">43</p></td></tr><tr style="height:17pt"><td style="width:73pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">15.2</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: left;">lists</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;text-indent: 0pt;line-height: 11pt;text-align: right;">43</p></td></tr><tr style="height:17pt"><td style="width:73pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">15.5</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Using lists as Sets</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;text-indent: 0pt;line-height: 11pt;text-align: right;">43</p></td></tr><tr style="height:19pt"><td style="width:98pt;border-bottom-style:solid;border-bottom-width:1pt" colspan="2"><p class="s32" style="padding-top: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">16. <span class="s25">Hash Tables</span></p></td><td style="width:207pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:58pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 6pt;padding-right: 2pt;text-indent: 0pt;line-height: 11pt;text-align: right;">see the</p></td><td style="width:73pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 6pt;padding-right: 1pt;text-indent: 0pt;line-height: 11pt;text-align: right;">Steele chapter</p></td></tr><tr style="height:21pt"><td style="width:98pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" colspan="2"><p class="s32" style="padding-top: 8pt;text-indent: 0pt;line-height: 11pt;text-align: left;">17. Arrays</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 8pt;text-indent: 0pt;line-height: 11pt;text-align: right;">45</p></td></tr><tr style="height:19pt"><td style="width:98pt;border-top-style:solid;border-top-width:1pt" colspan="2"><p class="s25" style="padding-top: 5pt;padding-right: 1pt;text-indent: 0pt;line-height: 11pt;text-align: right;">17.1.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s33" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">make-array</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 5pt;text-indent: 0pt;line-height: 11pt;text-align: right;">45</p></td></tr><tr style="height:16pt"><td style="width:98pt" colspan="2"><p class="s25" style="padding-top: 4pt;padding-right: 2pt;text-indent: 0pt;line-height: 11pt;text-align: right;">17.2.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Array Access</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;text-indent: 0pt;line-height: 11pt;text-align: right;">47</p></td></tr><tr style="height:17pt"><td style="width:98pt" colspan="2"><p class="s25" style="padding-top: 3pt;padding-right: 2pt;text-indent: 0pt;line-height: 11pt;text-align: right;">17.3.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Array Information</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s33" style="padding-top: 4pt;text-indent: 0pt;line-height: 11pt;text-align: right;">48</p></td></tr><tr style="height:16pt"><td style="width:98pt" colspan="2"><p class="s25" style="padding-top: 4pt;padding-right: 1pt;text-indent: 0pt;line-height: 11pt;text-align: right;">17.4.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Functions on Arrays of Bits</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;text-indent: 0pt;line-height: 11pt;text-align: right;">48</p></td></tr><tr style="height:17pt"><td style="width:98pt" colspan="2"><p class="s25" style="padding-top: 4pt;padding-right: 1pt;text-indent: 0pt;line-height: 11pt;text-align: right;">17.5.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Fill Pointers</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s34" style="padding-top: 3pt;text-indent: 0pt;line-height: 11pt;text-align: right;">48</p></td></tr><tr style="height:17pt"><td style="width:98pt" colspan="2"><p class="s25" style="padding-top: 4pt;padding-right: 1pt;text-indent: 0pt;line-height: 11pt;text-align: right;">17.6.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Changing the Dimensions of an Array</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;text-indent: 0pt;line-height: 11pt;text-align: right;">48</p></td></tr></table><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">An Extension to Common lisp-the Array Inspector                                    50</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="487" height="0" alt="image" src="Image_037.png"/></span></p><p class="s20" style="padding-top: 3pt;padding-left: 176pt;text-indent: 0pt;text-align: left;"> &nbsp; Inspecting Arrays &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;50</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:5.38159pt" cellspacing="0"><tr style="height:12pt"><td style="width:73pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s32" style="text-indent: 0pt;line-height: 11pt;text-align: left;">18. Strings</p></td><td style="width:27pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:207pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:57pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: left;">see the</p></td><td style="width:72pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-right: 1pt;text-indent: 0pt;line-height: 11pt;text-align: right;">Steele chapter</p></td></tr><tr style="height:21pt"><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s32" style="padding-top: 8pt;text-indent: 0pt;line-height: 11pt;text-align: left;">19. Structures</p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 8pt;text-indent: 0pt;line-height: 11pt;text-align: right;">53</p></td></tr><tr style="height:19pt"><td style="width:73pt;border-top-style:solid;border-top-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s34" style="padding-top: 5pt;padding-right: 2pt;text-indent: 0pt;line-height: 12pt;text-align: center;">19.1.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 5pt;padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Introduction to Structures</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 6pt;text-indent: 0pt;line-height: 11pt;text-align: right;">53</p></td></tr><tr style="height:16pt"><td style="width:73pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;padding-right: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">19.4.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Defstruct Slot-Options</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;text-indent: 0pt;line-height: 11pt;text-align: right;">53</p></td></tr><tr style="height:17pt"><td style="width:73pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;padding-right: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">19.5.</p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Defstruct Options</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;text-indent: 0pt;line-height: 11pt;text-align: right;">53</p></td></tr><tr style="height:17pt"><td style="width:73pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:207pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Non-Standard Options</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">54</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_038.png"/></span></p><p class="s3" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">vi                                     <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><table style="border-collapse:collapse;margin-left:26.8215pt" cellspacing="0"><tr style="height:10pt"><td style="width:311pt;border-bottom-style:solid;border-bottom-width:1pt" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:123pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s35" style="text-indent: 0pt;line-height: 8pt;text-align: right;">TABLE OF CONTENTS</p></td></tr><tr style="height:30pt"><td style="width:175pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="text-indent: 0pt;line-height: 11pt;text-align: left;">20. The Evaluator</p></td><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s25" style="text-indent: 0pt;line-height: 11pt;text-align: right;">see the Steele chapter</p></td></tr><tr style="height:21pt"><td style="width:175pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s26" style="padding-top: 8pt;text-indent: 0pt;line-height: 11pt;text-align: left;">21. Streams</p></td><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s36" style="padding-top: 4pt;text-indent: 0pt;line-height: 15pt;text-align: right;">57</p></td></tr><tr style="height:18pt"><td style="width:175pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s32" style="padding-top: 5pt;padding-left: 72pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Xerox <span class="s25">Lisp Extensions</span></p></td><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s37" style="padding-top: 5pt;text-indent: 0pt;line-height: 12pt;text-align: right;">57</p></td></tr><tr style="height:17pt"><td style="width:175pt;border-top-style:solid;border-top-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Predicates</p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s37" style="padding-top: 3pt;text-indent: 0pt;line-height: 12pt;text-align: right;">57</p></td></tr><tr style="height:16pt"><td style="width:175pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Accessors</p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s37" style="padding-top: 3pt;text-indent: 0pt;line-height: 12pt;text-align: right;">57</p></td></tr><tr style="height:19pt"><td style="width:175pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s26" style="padding-top: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">22. lnput&#39;Output</p></td><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s38" style="padding-top: 5pt;text-indent: 0pt;line-height: 12pt;text-align: right;">59</p></td></tr><tr style="height:18pt"><td style="width:175pt;border-top-style:solid;border-top-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s25" style="padding-top: 5pt;text-indent: 0pt;text-align: left;">22.1.3 Macro Characters</p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s37" style="padding-top: 5pt;text-indent: 0pt;line-height: 12pt;text-align: right;">59</p></td></tr></table><p class="s20" style="padding-top: 4pt;padding-left: 202pt;text-indent: 0pt;text-align: left;">22.1.4 Standard Dispatching Macro</p><p class="s20" style="padding-top: 4pt;padding-left: 202pt;text-indent: 50pt;line-height: 131%;text-align: left;">Character Syntax &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<span class="s39">59</span><span class="s28"> </span>22.1.6 &nbsp;What the Print function Produces &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<span class="s39">60</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="345" height="1" alt="image" src="Image_039.png"/></span></p><p style="padding-left: 202pt;text-indent: 0pt;text-align: left;">22.3.<span class="s40">l   </span>Output to Character Streams                         <span class="s28">60</span></p><p class="s20" style="padding-top: 3pt;padding-left: 202pt;text-indent: 0pt;text-align: left;">22.3.3 &nbsp;Formatted Output to Character Streams &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<span class="s39">60</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_040.png"/></span></p><ol id="l9"><li><p style="padding-top: 7pt;padding-left: 47pt;text-indent: -20pt;text-align: left;">File <b>System </b>Interface                                                                                                            61</p><p style="text-indent: 0pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_041.png"/></span></p></li><li><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: -21pt;text-align: left;">Error System                                                                <span class="p">63</span></p></li></ol></li></ol><p style="text-indent: 0pt;text-align: left;"><span><img width="482" height="1" alt="image" src="Image_042.png"/></span></p><p style="padding-top: 6pt;padding-left: 98pt;text-indent: 0pt;text-align: left;">Introduction to Error System Terminology                                                    63</p><p style="text-indent: 0pt;text-align: left;"><span><img width="484" height="1" alt="image" src="Image_043.png"/></span></p><p style="padding-top: 3pt;padding-left: 98pt;text-indent: 0pt;text-align: left;">Program Interface to the Condition System                                                  <span class="s28">66.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="346" height="1" alt="image" src="Image_044.png"/></span></p><p style="padding-top: 5pt;padding-left: 202pt;text-indent: 0pt;text-align: left;">Defining and Creating Conditions                             <span class="s41">66</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="345" height="1" alt="image" src="Image_045.png"/></span></p><ul id="l10"><li><p style="padding-top: 4pt;padding-left: 202pt;text-indent: -197pt;line-height: 91%;text-align: left;">Signalling Condition                       70</p><p style="text-indent: 0pt;text-align: left;"><span><img width="345" height="1" alt="image" src="Image_046.png"/></span></p><p style="padding-left: 202pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Handling Conditions                                                   72</p><p style="text-indent: 0pt;text-align: left;"><span><img width="345" height="1" alt="image" src="Image_047.png"/></span></p><p style="padding-top: 4pt;padding-left: 202pt;text-indent: 0pt;text-align: left;">Proceed Cases                                  <span class="s28">75</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="345" height="1" alt="image" src="Image_048.png"/></span></p><p style="padding-top: 5pt;padding-left: 202pt;text-indent: 0pt;text-align: left;">Predefined Types                                                           83..</p><p style="text-indent: 0pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_049.png"/></span></p><ol id="l11"><li><p class="s15" style="padding-top: 7pt;padding-left: 44pt;text-indent: -18pt;text-align: left;">Miscellaneous <span class="p">Fea-tures                                                       </span><span class="s42">89</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="484" height="1" alt="image" src="Image_050.png"/></span></p><ol id="l12"><li><p style="padding-top: 4pt;padding-left: 125pt;text-indent: -26pt;text-align: left;">The CompHer                                                                                             <span class="s42">89</span></p></li></ol></li></ol></li></ul><p style="text-indent: 0pt;text-align: left;"><span><img width="484" height="1" alt="image" src="Image_051.png"/></span></p><p class="s20" style="padding-top: 3pt;padding-left: 98pt;text-indent: 103pt;line-height: 131%;text-align: left;">Xerox Common lisp Extensions to Section 25.1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<span class="s43">89</span><span class="s41"> </span><span class="p">Co_mpiler Optimizers-The XCL:Defoptimizer FacHity                                   92</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="484" height="1" alt="image" src="Image_052.png"/></span></p><ol id="l13"><ol id="l14"><li><p style="padding-top: 1pt;padding-left: 128pt;text-indent: -29pt;text-align: left;">Documentation                                                                                    <span class="s42">98</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="484" height="1" alt="image" src="Image_053.png"/></span></p></li><li><p class="s20" style="padding-top: 3pt;padding-left: 128pt;text-indent: -29pt;text-align: left;">Debugging<span class="p"> Tools                                                                                 </span><span class="s41">98</span></p><p class="s20" style="padding-top: 3pt;padding-left: 202pt;text-indent: 0pt;text-align: left;">Breaking, Tracing and Advising:</p><p class="s20" style="padding-top: 5pt;padding-left: 253pt;text-indent: 0pt;text-align: left;">the Wrappers Faci-lity &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="p">  </span><span class="s43">98</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="345" height="1" alt="image" src="Image_054.png"/></span></p><p style="padding-top: 3pt;padding-left: 202pt;text-indent: 0pt;text-align: left;">Xerox Common lisp Debugger                                 112</p></li><li><p style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 129pt;text-indent: -29pt;text-align: left;">Environmental Inquiries                                 122</p></li></ol></ol><p style="padding-left: 98pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="484" height="1" alt="image" src="Image_055.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 26pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_056.png"/></span></p><p class="s3" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                      <span class="s44">VII</span></p><p class="s12" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">TABLE OF CONTENTS</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_057.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 155pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_058.png"/></span></p><p class="s29" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">viii                                                                     <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s3" style="padding-top: 3pt;text-indent: 0pt;text-align: right;"><a name="bookmark1">TYPE SPECIFIERS</a></p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_059.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 5pt;padding-left: 203pt;text-indent: 0pt;text-align: left;"><a name="a9">CHAPTER4        TYPE SPECIFIERS</a></h4><p style="padding-left: 203pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="346" height="7" alt="image" src="Image_060.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="569" height="2" alt="image" src="Image_061.png"/></span></p><p class="s45" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><a name="a10">4.2. T</a><span class="s46">ype Specifier Lists</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 27pt;text-indent: 0pt;text-align: justify;">The special form &quot;the&quot; operates as an assertion in interpreted code, but has no effect on compiled code.</p><p class="s23" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;text-align: justify;">Although it is not an error to ask (typep x <span class="s47">&#39;foe) </span>when <span class="s47">foe </span>is not yet a defined type at compile time, the compiler wm produce much more efficient code if type <span class="s47">foe </span>is known at compile time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_062.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_063.png"/></span></p><p class="s48" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><a name="a11">4.8. </a><span class="s45">Type</span><span class="s46"> Conversion Function</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="text-indent: 0pt;text-align: left;">The function coerce operates only on the types explicitly listed in the book.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_064.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 28pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</p><p class="s49" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">TYPE SPECIFIERS &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 155pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_065.png"/></span></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">2                                                                                 <span class="s29">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s3" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">PROGRAM STRUCTURE</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_066.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 6pt;padding-left: 217pt;text-indent: 0pt;text-align: left;">CHAPTER 5 PROGRAM STRUCTURE</p><p style="padding-left: 217pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="345" height="7" alt="image" src="Image_067.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_068.png"/></span></p><p class="s15" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">5.1.2. Variables</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Unbound special variables have il: nobind in their value cell. If you try to access an unbound variable in interpreted code, an error is signaled. If you try to use one in compiled code, <span class="s19">il: </span>nob ind is returned as its value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_069.png"/></span></p><p class="s51" style="padding-left: 41pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><a name="a12">5.2. Functions</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="0" alt="image" src="Image_070.png"/></span></p><p class="s15" style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">5.2.2. Lambda-Expressions</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_071.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 216pt;text-indent: 0pt;line-height: 107%;text-align: justify;">In this release, argument number checking is performed in the interpreter, but not in all compiled code. For those compiled functions that do not check, if the function is called with fewer arguments than the function requires, the remaining required arguments will have value nil; if called with more arguments than the function permits -(required plus optionals), the extra arguments are ignored.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 217pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Compi!ed functions also do not check for unexpected keywords, or malformed keyword/value pairs, though the interpreter does.</p><p style="padding-top: 5pt;padding-left: 217pt;text-indent: 0pt;text-align: justify;">lambda-parameters-limit 512.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l15"><ol id="l16"><ol id="l17"><li><p class="s17" style="padding-top: 4pt;padding-left: 74pt;text-indent: -32pt;text-align: left;">Defining<span class="s15"> Named Functions</span></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="575" height="1" alt="image" src="Image_072.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 104pt;text-indent: 0pt;text-align: left;">xcl :definline <i>name arg-list </i>&amp;body <span class="s52">body                                    </span><span class="s28">[Macro]</span></p><p style="padding-top: 6pt;padding-left: 217pt;text-indent: 0pt;line-height: 107%;text-align: left;">xcl:definline is exactly like defun  except that it also arranges for  the compiler to expand inline any calls to the  named function.  In future releases, this will  be  accomplished   via  the   inline  declaration mechanism.         In          Lyric,         however,         the xcl :defoptimizer facility is used. As a result, users should take care not to use xcl:definline for recursive functions, as this will cause the compiler to loop indefinitely, expanding the recursive calls.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_073.png"/></span></p><p class="s12" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                               <span class="s3">3</span></p><p class="s12" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">PROGRAM STRUCTURE</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_074.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s53" style="padding-left: 38pt;text-indent: -32pt;text-align: left;">Declaring<span class="s31"> </span>Global Variables and Named Constants &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p></li></ol></ol></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl  :defglobal var <span class="s8">name </span>&amp;optional <span class="s8">initial-value doc-string           [Macro]</span></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s19">xcl :defglobalvar </span>is exactly like <span class="s19">defvar </span>except that it declares the variable name to be <i>global </i>instead of special. Note that if you change a variable from a <i>global </i>to a <i>special, </i>all functions using that variable must be recompiled. See section 9.1 for more information on global declarations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 7pt;padding-left: 68pt;text-indent: 0pt;line-height: 12pt;text-align: left;">xcl :defglobalparameter <span class="s8">name initial-value </span>&amp;optional <span class="s8">doc-string</span></p><p class="s28" style="padding-left: 396pt;text-indent: 0pt;line-height: 12pt;text-align: center;">[Macro]</p><p class="s19" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">xcl :defglobalparameter <span class="p">is analogous to </span>defparameter <span class="p">except that it declares the parameter as global instead of special.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_075.png"/></span></p><p class="s29" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">4                                                                             <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">PREDICATES</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_076.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 196pt;text-indent: 0pt;text-align: justify;"><a name="a13">CHAPTER6 PREDICATES</a></p><p style="padding-left: 196pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="345" height="7" alt="image" src="Image_077.png"/></span></p><p style="padding-top: 11pt;padding-left: 196pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Predicates are required to return nil for false and non-nil for true. There are some types such that typep for the type and the specific predicate for the type are equivalent in truth value only (some predicates return t, some return the object itself).</p><p style="padding-top: 6pt;padding-left: 196pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The function subtypep is defined to return two values. The first value is the value of the predicate, and the second is the certainty of the result. subtypep could always return (values nil nil) and be legal; however, that wouldn&#39;t be a very useful implementation of subtypep. Xerox Common Lisp&#39;s subtypep is guaranteed to handle the following cases:</p><ol id="l18"><li><p style="padding-top: 5pt;padding-left: 211pt;text-indent: -15pt;line-height: 107%;text-align: justify;">Any two datatypes (including structures defined with defstruct with no : type option) will return a definite answer.</p></li><li><p style="padding-top: 6pt;padding-left: 212pt;text-indent: -15pt;line-height: 107%;text-align: justify;">&quot;Built-in&quot; Common Lisp types will return a definite answer.</p></li><li><p style="padding-top: 6pt;padding-left: 214pt;text-indent: -17pt;text-align: left;">nil is subtypep of everything.</p></li><li><p style="padding-top: 7pt;padding-left: 212pt;text-indent: -15pt;text-align: left;">Everything is subtypep oft.</p></li><li><p style="padding-top: 7pt;padding-left: 212pt;text-indent: -15pt;text-align: left;">No non-nil type is subtypep of nil.</p></li><li><p style="padding-top: 7pt;padding-left: 212pt;text-indent: -15pt;text-align: justify;">and and or of any of the previous expressions are handled properly.</p></li></ol><p style="padding-top: 6pt;padding-left: 196pt;text-indent: 0pt;line-height: 106%;text-align: left;">Though equalp is required to work for objects &quot;with components&quot;, it is not specified if this includes structures. However, there is no other interesting way to test equality of structures. <span class="s19">So </span>our implementation defines equalp to mean all components are equalp. (This is analagous to Interlisp-D&#39;s <span class="s40">il: </span>equalall). Of course, this means equalp may not terminate if comparing circular structures, just as equal may not terminate given circular lists.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_078.png"/></span></p><p class="s12" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                               <span class="s50">5</span></p><p class="s54" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">PREDICATES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 156pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="582" height="1" alt="image" src="Image_079.png"/></span></p><p class="s3" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">6                                      <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s3" style="padding-top: 5pt;text-indent: 0pt;text-align: right;">CONTROL STRUCTURE</p><p style="padding-left: 13pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_080.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 188pt;text-indent: 0pt;text-align: left;">CHAPTER 7 CONTROL STRUCTURE</h2><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_081.png"/></span></p><p class="s9" style="padding-left: 12pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="a14">7.3. Function Invocation</a></p><p style="padding-left: 13pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_082.png"/></span></p><p class="s28" style="padding-top: 3pt;padding-left: 188pt;text-indent: 0pt;text-align: left;">Ca l l - a r gu me nt s - l i mi t   512.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_083.png"/></span></p><ol id="l19"><ol id="l20"><li><p class="s10" style="padding-left: 41pt;text-indent: -28pt;text-align: left;"><a name="a15">Establishing</a><span class="s9"> New Variable </span>Bindings</p><p style="padding-left: 13pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_084.png"/></span></p><p class="s28" style="padding-top: 7pt;padding-left: 75pt;text-indent: 0pt;text-align: justify;">xcl:destructur ing-bind <span class="s8">pattern form </span>&amp;body <i>body </i>[Macro]</p><p class="s28" style="padding-top: 5pt;padding-left: 188pt;text-indent: 0pt;text-align: justify;">Executes <i>body </i>with the variables in the s-expression <span class="s8">pattern </span>bound to elements of the list structure returned by <span class="s8">form. </span>It is analogous to multiple-value-bind. <span class="s8">pattern </span>can be any arglist acceptable to defmacro except that the &amp;environment keyword may not b used. For example:</p><p class="s28" style="padding-left: 170pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(xcl:destructuring-bind</p><p class="s28" style="padding-left: 213pt;text-indent: 0pt;line-height: 12pt;text-align: left;">((vl    v2) &amp;key ab)</p><p class="s56" style="padding-left: 218pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&#39;((l 2) :b 3 :a 4)</p><p class="s28" style="padding-left: 213pt;text-indent: 0pt;line-height: 12pt;text-align: left;">... body .•• )</p><p class="s28" style="padding-top: 5pt;padding-left: 170pt;text-indent: 19pt;line-height: 87%;text-align: left;">is equivalent to: (let ((vl l)</p><p class="s57" style="padding-top: 1pt;padding-left: 204pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(v2 2)</p><p class="s57" style="padding-left: 204pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">(a 4)</p><p class="s58" style="padding-left: 207pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">( b 3) )</p><p class="s28" style="padding-left: 188pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">... body ... )</p><p class="s28" style="padding-top: 4pt;padding-left: 220pt;text-indent: -30pt;text-align: justify;">Note: xcl:destructur ing-bind currently does no error checking for too many or too few elements being returned by <span class="s8">form.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="2" alt="image" src="Image_085.png"/></span></p></li><li><p class="s9" style="padding-left: 41pt;text-indent: -28pt;text-align: left;"><a name="a16">Conditionals</a></p></li></ol></ol><p style="padding-left: 14pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="574" height="1" alt="image" src="Image_086.png"/></span></p><p class="s28" style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;text-align: justify;">case <span class="s52">keyform </span>{({({key}*) <span class="s59">I </span>key} {form}*)}* <span class="s60">[Macro]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 189pt;text-indent: 0pt;text-align: left;">Be careful about using nil as a keylist in the case macro. nil is interpreted as the list of no keys, not as the single key nil. Thus, any clause whose car is nil will never be selected. To use nil as a key, use the keylist (nil) instead.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_087.png"/></span></p><p class="s12" style="padding-top: 43pt;padding-left: 15pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                               <span class="s61">7</span></p><p class="s54" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">CONTROL STRUCTURE &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 129pt;text-indent: 0pt;text-align: left;">Wrong:</p><p class="s41" style="padding-top: 1pt;padding-left: 146pt;text-indent: 0pt;text-align: left;">(case expression</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 147pt;text-indent: 0pt;text-align: left;">(nil ..• code for expression being nil...)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 129pt;text-indent: 0pt;text-align: left;">Right:</p><p class="s41" style="padding-left: 146pt;text-indent: 0pt;text-align: left;">(case expression</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 159pt;text-indent: 0pt;text-align: left;">((nil) ••. code for expression being nil... <span class="s50">j</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">7.9.1. Constructs for Handling<span class="s31"> </span>Multiple Values &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p class="s41" style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">multiple-values-limit 512.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_088.png"/></span></p><p class="s3" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">8                                                                     <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 6pt;text-indent: 0pt;text-align: right;">MACROS</p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_089.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 197pt;text-indent: 0pt;text-align: justify;">CHAPTERS MACROS</p><p style="padding-left: 198pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="347" height="7" alt="image" src="Image_090.png"/></span></p><p style="padding-top: 8pt;padding-left: 197pt;text-indent: 0pt;line-height: 107%;text-align: justify;">While the Common Lisp construct defmacro does remove any function definition the given symbol may have, it does not remove any Interlisp macro definition that might exist on the <span class="s40">il </span>:macro, <span class="s40">il: </span>bytemacro, or <span class="s40">il: </span>dmacro properties of the symbol. If a given symbol has both a Common Lisp and Interlisp macro definition, the one to be used depends upon the compiler or interpreter in use. The Common Lisp interpreter and the new XCL compiler will both use the Common Lisp macro. The Interlisp interpreter and compiler will use the Interlisp macro. Because of this potential for confusion, it is strongly recommended that, when providing a Common Lisp defmacro definition for a symbol, any existing Interlisp macro definition for that symbol should be removed.</p><p style="padding-top: 5pt;padding-left: 197pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Xerox Common Lisp diverges from <i>Common Lisp: the Language </i>on the issue of destructuring in &amp;body parameters. We implement an extension to that syntax to allow for easy parsing of the bodies of certain macros, such as defun and defmacro. Some uses of &amp;body are interpreted as implicit calls to  the XCL function parse-body:</p><p style="padding-top: 9pt;padding-left: 84pt;text-indent: 0pt;text-align: left;">parse-body  body <i>environment </i>&amp;optional <i>doc-string-allowed-p     [Macro]</i></p><p style="padding-top: 7pt;padding-left: 197pt;text-indent: 0pt;line-height: 108%;text-align: justify;">The given <i>body </i>should be a list of forms in the syntax of a standard Common Lisp lambda body, described in <i>Common Lisp: the Language </i>as</p><p class="s8" style="padding-top: 1pt;padding-left: 208pt;text-indent: 0pt;text-align: left;">{declaration <span class="s62">I </span>doc-string}* <span class="s23">{form}*</span></p><p style="padding-top: 5pt;padding-left: 198pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The <i>environment </i>should be a lexical environment such as those acquired through the use of the &amp;environment keyword. <i>doc-string-allowed-p </i>defaults tot. parse-body returns three values:</p><ol id="l21"><li><p style="padding-top: 6pt;padding-left: 229pt;text-indent: -15pt;text-align: justify;">A list of the non-declaration, non-doc-string</p><p class="s8" style="padding-left: 229pt;text-indent: 0pt;text-align: left;">form&#39;s <span class="p">found in the </span>body</p></li><li><p style="padding-top: 7pt;padding-left: 229pt;text-indent: -15pt;text-align: justify;">A list of the declare forms found in the <i>body</i></p></li><li><p style="padding-left: 198pt;text-indent: 15pt;line-height: 18pt;text-align: justify;">The documentation string found, if any, or nil. parse-body works by examining the forms in <i>body</i></p></li></ol><p style="padding-top: 1pt;padding-left: 198pt;text-indent: 0pt;line-height: 107%;text-align: justify;">one by one, macroexpanding them if necessary, trying to find the first non-declaration, non-string form. The tail of <i>body </i>beginning with that form is returned as the  first value, a list of all of the declarations found is</p><p style="text-indent: 0pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_091.png"/></span></p><p class="s12" style="padding-top: 33pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                              <span class="s3">9</span></p><p class="s63" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">MACROS &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">the second value and, if any documentation string is found, it is returned as the third value. If <i>doc-string-allowed-p </i>is nil, any strings found will be assumed to be the first form in the tail and the search will end. Note that Common Lisp allows macros to expand into either documentation strings or declarations. Because of this, <span class="s41">parse-body </span>will always have macroexpanded the first form in the tail. The original, unexpanded form is returned as the <span class="s41">car </span>of the first value, though.</p><p style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">Because of the usefulness of <span class="s41">parse-body, </span>and the frequency with which constructs like the following are <span class="s31">used:</span></p><p class="s41" style="padding-top: 6pt;padding-left: 86pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(defmacro define-foo (arg-list &amp;body body</p><p class="s41" style="padding-top: 1pt;padding-left: 153pt;text-indent: 112pt;line-height: 85%;text-align: left;">&amp;environment env) (multiple-value-bind (code decls doc)</p><p class="s64" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">... <span class="s2">) </span><span class="s50">)</span></p><p class="s41" style="padding-left: 72pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(parse-body body env)</p><p style="padding-top: 3pt;padding-left: 181pt;text-indent: 0pt;text-align: left;">the syntax of the <span class="s41">&amp;body </span>keyword was changed to allow the following code, with the same meaning:</p><p class="s41" style="padding-top: 7pt;padding-left: 64pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(defmacro define-foo (arg-list &amp;body (code decls doc))</p><p class="s64" style="padding-left: 123pt;text-indent: 0pt;line-height: 20pt;text-align: left;">... <span class="s50">)</span></p><p style="padding-top: 4pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">This frees the programmer from having to specify an <span class="s41">&amp;environment </span>parameter when it will only be used in a call to <span class="s41">parse-body.</span></p><p style="padding-top: 4pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;"><span class="s19">The full syntax of </span>the XCL <span class="s41">&amp;body </span>keyword is as follows:</p><p class="s41" style="padding-top: 7pt;padding-left: 190pt;text-indent: 0pt;text-align: justify;">&amp;body <span class="s8">symbol</span></p><p style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">This is treated exactly like <span class="s41">&amp;rest </span><i>symbol.</i></p><p class="s41" style="padding-top: 6pt;padding-left: 190pt;text-indent: 0pt;text-align: justify;">&amp;body <span class="s8">(symbol-or-list)</span></p><p style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">When <span class="s41">&amp;body </span>precedes a list of length one, it is treated exactly like <span class="s41">&amp;rest </span><i>symbol-or-list.</i></p><p class="s29" style="padding-top: 5pt;padding-left: 160pt;text-indent: 0pt;text-align: justify;">&amp; <span class="s41">body ( </span><span class="s8">symbol-or-list symbol-or-list [symbol-or-list])</span></p><p style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">When followed by a list of length two or three, it is treated as an implicit call to the function <span class="s41">parse-body, </span>described above. The <i>body </i>argument is the list that would have been bound  to a simple <span class="s41">&amp;rest </span>parameter, the <i>environment </i>argument is given by what would have been supplied to an <span class="s41">&amp;environment </span>parameter, and <i>doc-string-allowed-p </i>is passed as <span class="s28">t </span>if, and only if, the third element of the <span class="s41">&amp;body </span>list is provided. Each of the <i>symbol-or-list&#39;s </i>is matched against the corresponding returned value of</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_092.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">10                                                                            XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</p><p class="s5" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">MACROS</p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="572" height="1" alt="image" src="Image_093.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 204pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><span class="s7">parse-body. </span>This <b>allows </b>full destructuring on each of those three values, even though it is only likely to be useful at all for the first one.</p><p style="padding-top: 6pt;padding-left: 203pt;text-indent: 0pt;line-height: 107%;text-align: justify;">When this third, so-called &quot;parsing version&quot; of <span class="s7">&amp;body </span>is used, no <span class="s7">&amp;key </span>parameters are allowed. Also, as described in <i>Common Lisp: the Language, </i>only one of <span class="s7">&amp;body </span>and <span class="s7">&amp;rest </span>may be used in a single argument list. Note also that this extension to Common Lisp contradicts the statement on page 145 of <i>Common Lisp: the Language </i>that <span class="s7">&amp;body </span>&quot;is identical in function to <span class="s7">&amp;rest.&quot;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 4pt;padding-left: 27pt;text-indent: 0pt;text-align: justify;">Compatibility<span class="s15"> </span>Note &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="padding-top: 5pt;padding-left: 203pt;text-indent: 0pt;line-height: 107%;text-align: justify;">All Interlisp <span class="s7">nlambda </span>functions appear to be macros from the point of view of the Common Lisp function <span class="s7">macro-function. </span>Those Interlisp <span class="s7">nlambda </span>functions that actually evaluate some of their arguments have also been defined as real Common Lisp macros. Thus, all calls to Interlisp <span class="s7">nlambda </span>&#39;functions are treated properly by the Common Lisp interpreter&#39;and the new XCL compiler.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_094.png"/></span></p><p class="s29" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE 11</p><p class="s63" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">MACROS &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 155pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_095.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">12                                                                            XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_096.png"/></span></p><ol id="l22"><ol id="l23"><li><p class="s9" style="padding-top: 8pt;padding-left: 60pt;text-indent: -28pt;text-align: left;"><a name="a17">Declaration Syntax</a></p><p class="s29" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">DECLARATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_097.png"/></span></p><p class="s6" style="padding-top: 7pt;padding-left: 31pt;text-indent: 0pt;text-align: left;"><a name="a18">CHAPTER 9        DECLARATIONS</a></p><p style="padding-left: 32pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="343" height="6" alt="image" src="Image_098.png"/></span></p><p style="padding-left: 31pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_099.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 207pt;text-indent: 0pt;line-height: 106%;text-align: justify;">lnline declarations are ignored in this release. The macro xcl:definline creates a function, calls to which will be expanded inline.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 207pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Xerox Common Lisp supports an additional declaration xcl:global.</p><p style="padding-top: 5pt;padding-left: 207pt;text-indent: 1pt;line-height: 107%;text-align: justify;">( xcl:global <i>var1 var2 </i>••• ) specifies that all of the variables named are to be considered <i>global, </i>i.e., it is a declaration that the variables are never dynamically bound. All references to such a variable are compiled to fetch the top level binding directly. This declaration for global variables is analogous to the special declaration for special variables.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_100.png"/></span></p></li><li><p class="s9" style="padding-left: 60pt;text-indent: -28pt;text-align: left;"><a name="a19">Declaration Specifiers</a></p></li></ol></ol><p style="padding-left: 31pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_101.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 207pt;text-indent: 0pt;line-height: 109%;text-align: justify;">Xerox Common Lisp supports an additional declaration, xcl:global.</p><p style="padding-top: 5pt;padding-left: 207pt;text-indent: 1pt;line-height: 107%;text-align: justify;">( xcl:global <i>var1 var2 </i>••• ) specifies that all of the variables named are to be considered  <i>global. </i>This specifier pervasively affects variable references. The affected references refer directly to the top-level value of the variable, bypassing a search for any intermediate bindings. This can in some cases lead to a significant performance improvement, especially if the references are in deeply-nested, frequently-executed code. Variables declared xcl:global may not be bound. The declaration xcl:global is analogous to the special declaration for special variables.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 208pt;text-indent: 0pt;line-height: 107%;text-align: justify;">inline declarations are ignored in the Lyric release. lnline functions can be defined using the xcl:definline macro, described in Section 5.3.1 of Steele&#39;s <i>Common Lisp: the Language.</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 32pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_102.png"/></span></p><p class="s29" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">XEROX COMMON LiSP IMPLEMEN-:-ATION NOTES, LYRIC RELEASE                                       13</p><p class="s12" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">DECLARATIONS</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_103.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 155pt;text-indent: 0pt;text-align: center;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_104.png"/></span></p><p class="s29" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">14                                    <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">SYMBOLS</p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="582" height="1" alt="image" src="Image_105.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;text-align: justify;">CHAPTER 10 <span class="h3">SYMBOLS</span></p><p style="padding-left: 204pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="347" height="7" alt="image" src="Image_106.png"/></span></p><p style="padding-top: 11pt;padding-left: 204pt;text-indent: 0pt;text-align: justify;">Symbol print names are limited to 255 characters.</p><p class="s7" style="padding-top: 7pt;padding-left: 204pt;text-indent: 0pt;line-height: 107%;text-align: justify;">symbol-name <span class="p">returns a string displaced to the symbol pname. Strings returned from </span>symbol-name <span class="p">may be destructively modified without affecting the symbol pname.</span></p><p style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Interlisp users should note that <span class="s7">cl: gensym </span>and <span class="s40">il: </span><span class="s7">gensym </span>are not the same. <span class="s40">il: </span><span class="s7">gensym </span>always creates a symbol in the Interlisp package, while <span class="s7">cl: gensym </span>creates uninterned symbols.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="582" height="1" alt="image" src="Image_107.png"/></span></p><p class="s12" style="padding-left: 29pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s29">15</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s65" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">SYMBOLS &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 147pt;text-indent: 0pt;text-align: center;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_108.png"/></span></p><p class="s2" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">16                                                                      <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="2" alt="image" src="Image_109.png"/></span></p><p class="s66" style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><a name="bookmark2">Standard </a><u>Packages</u></p><p class="s2" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_110.png"/></span></p><p class="s6" style="padding-top: 5pt;padding-left: 34pt;text-indent: 0pt;text-align: left;"><a name="a20">CHAPTER 11           PACKAGES</a></p><p style="padding-left: 34pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="344" height="6" alt="image" src="Image_111.png"/></span></p><p style="padding-left: 34pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_112.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 210pt;text-indent: 0pt;line-height: 90%;text-align: justify;">The following standard packages are included in Xerox Lisp:</p><p style="padding-top: 5pt;padding-left: 210pt;text-indent: -28pt;line-height: 107%;text-align: justify;">LISP contains all symbols (other than keywords) defined in <i>Common Lisp: the Language. </i>Some of these symbols are shared with the Interlisp package (by importing them into INTERLISP), in the cases where the semantics of the symbols are identical (e.g., CAR).</p><p style="padding-top: 6pt;padding-left: 148pt;text-indent: 0pt;text-align: left;">KEYWORD contains all Common Lisp keywords.</p><p style="padding-top: 6pt;padding-left: 152pt;text-indent: 0pt;text-align: center;">SYSTEM contains system internals.</p><p style="padding-top: 7pt;padding-left: 210pt;text-indent: -34pt;line-height: 109%;text-align: justify;">USER is the default package in a standard Common Lisp Exec. It uses the LISP package.</p><p style="padding-top: 5pt;padding-left: 210pt;text-indent: -57pt;line-height: 108%;text-align: justify;">INTERLISP contains (or imports) all Interlisp symbols. All symbols in this package are external, reflecting Interlisp-D&#39;s flat symbol name space.</p><p style="padding-top: 6pt;padding-left: 209pt;text-indent: -27pt;text-align: justify;">XCL contains symbols of the Xerox Common Lisp extensions. Many symbols in this package are also shared with Interlisp. <span class="s68">;f</span></p><p style="padding-top: 7pt;padding-left: 210pt;text-indent: -56pt;line-height: 106%;text-align: justify;">XCL-USER is the default package in a Xerox Common Lisp Exec. It uses both LISP and XCL; thus, extensions to Common Lisp are accessible in, this package. Most users will prefer this package to USER.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-top: 4pt;padding-left: 35pt;text-indent: 0pt;text-align: left;"><a name="a21">Extensions to Standard </a><u>Packages</u></p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="582" height="1" alt="image" src="Image_113.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s56" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">*package*                                             <span class="s8">[Variable]</span></p><p style="padding-top: 6pt;padding-left: 210pt;text-indent: 0pt;text-align: justify;">This symbol is bound in each exec.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s56" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">xcl:*total-packages-limit*                           <span class="s8">[Constant]</span></p><p style="padding-top: 6pt;padding-left: 210pt;text-indent: 0pt;text-align: justify;">An inclusive limit to the total number of packages in the system. Currently this is 255 but will increase in the next release.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s56" style="padding-top: 5pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">do-symbols</p><p class="s56" style="padding-top: 4pt;padding-left: 96pt;text-indent: 0pt;line-height: 138%;text-align: left;">do-external-symbols do-all-symbols</p><p style="padding-top: 4pt;padding-left: 96pt;text-indent: 0pt;line-height: 137%;text-align: justify;">[Macro] <i>[Macro] </i>[Macro]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 34pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="582" height="1" alt="image" src="Image_114.png"/></span></p><p class="s29" style="padding-top: 1pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                       17</p><p class="s54" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">PACKAGES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 181pt;text-indent: 0pt;text-align: justify;">These macros are as specified in <span class="s8">Common Lisp: the Language, </span>except note that symbols may be iterated over more than once.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:do-internal-symbols                                                          [Macro]</p><p class="s28" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">Maps over only the internal symbols of a package, not those that are external (exported).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:do-local-symbols                                                               [Macro]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 181pt;text-indent: 0pt;text-align: justify;">Maps over the symbols interned in a package, internal and external (exported) symbols, not bothering to map those that are merely accessible in it (as by inheritance).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:delete-package    <span class="s8">package                                                     [Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 181pt;text-indent: 1pt;text-align: justify;">Uninterns all of the symbols interned in <span class="s8">package </span>and then removes the package structure itself. All of <span class="s8">package&#39;s </span>symbols become uninterned and.will then print out preceded by &quot;hash colon,&quot; e.g., <span class="s19">#: </span>foo. This should obviously be used with caution.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 67pt;text-indent: 0pt;line-height: 12pt;text-align: left;">make-package <span class="s8">name </span>&amp;key :prefix-name :internal-symbols</p><p class="s28" style="padding-left: 68pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:external-symbols   : external-only                                   <span class="s8">[Function]</span></p><p class="s28" style="padding-top: 8pt;padding-left: 182pt;text-indent: -1pt;line-height: 80%;text-align: justify;">There are several additional keywords for make-package:</p><p class="s71" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: center;">•</p><p class="s28" style="padding-top: 1pt;padding-left: 182pt;text-indent: 0pt;text-align: justify;">:prefix-name <span class="s8">name</span></p><p class="s28" style="padding-top: 6pt;padding-left: 182pt;text-indent: -1pt;text-align: justify;">The symbol printer uses <span class="s8">name </span>to  prefix symbols that need to be qualified, instead of the package&#39;s full name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 182pt;text-indent: 0pt;text-align: justify;">: internal-symbols <span class="s8">positive-integer</span></p><p class="s28" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The number of internal symbols this package should expect to accommodate.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 182pt;text-indent: 0pt;text-align: justify;">: external-symbols <span class="s8">positive-integer</span></p><p class="s28" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The number of external symbols this package should expect to accommodate.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 182pt;text-indent: 0pt;text-align: justify;">: external-only <span class="s8">truth-value</span></p><p class="s28" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">If this keyword is present the package will have only external symbols; i.e., interning a symbol in this package implicitly exports it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_115.png"/></span></p><p class="s29" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">18                                                                           <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">PACKAGES</p><p style="padding-left: 39pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_116.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">rename-package     <i>package      new-name     </i>&amp;optional</p><p class="s8" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">prefix-name</p><p class="s8" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">new-nicknames</p><p class="s8" style="text-indent: 0pt;text-align: right;">[Function]</p><p style="padding-top: 7pt;padding-left: 215pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The function rename-package has been extended with a second optional argument <i>prefix-name, </i>with is the name the symbol printer will use to qualify symbols of this package when needed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 101pt;text-indent: 0pt;text-align: left;">defpackage  <i>name  </i>&amp;rest  <i>option-clauses                      [NLambda Function]</i></p><p style="padding-top: 7pt;padding-left: 215pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Define a package named <i>name. </i>If no such package already exists, create it using <i>option-clauses. </i>If one does exist, try to make it match the description, or produce an error if that&#39;s not possible. Arguments are unevaluated (it is an Interlisp Nlambda). Each of <i>option-clauses </i>is a list whose car is a keyword from those described below.</p><p style="padding-top: 5pt;padding-left: 215pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This function can be used in a file&#39;s il :makefile-environment property to define the package in which the file is to be read and written. It is somewhat similar to the Symbolics defpackage.</p><p style="padding-top: 6pt;padding-left: 215pt;text-indent: 0pt;text-align: left;">The following option clauses are implemented:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 215pt;text-indent: 0pt;text-align: left;">(:use <i>name1 name2 </i>...)</p><p style="padding-top: 7pt;padding-left: 215pt;text-indent: 0pt;text-align: left;">Causes the package to use the named package(s).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 215pt;text-indent: 0pt;text-align: left;">(: nicknames <i>name1 name2 </i>...)</p><p style="padding-top: 7pt;padding-left: 216pt;text-indent: 0pt;text-align: left;">Adds the nickname(s) to the package.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 215pt;text-indent: 0pt;text-align: left;">(:prefix-name <i>name)</i></p><p style="padding-top: 7pt;padding-left: 215pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The symbol printer will use <i>name </i>to prefix symbols that need to be qualified, rather than the package&#39;s full name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 216pt;text-indent: 0pt;text-align: left;">(: internal-symbols <i>positive-integer)</i></p><p style="padding-top: 6pt;padding-left: 216pt;text-indent: 0pt;line-height: 108%;text-align: justify;">The number of internal symbols this package should expect to accommodate (only noticed if the package needs to be created).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 216pt;text-indent: 0pt;text-align: left;">(: external-symbols <i>positive-integer)</i></p><p style="padding-top: 7pt;padding-left: 216pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The number of external-symbols this package should expect to accommodate (only noticed if the package needs to be created).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 216pt;text-indent: 0pt;text-align: left;">(: external-only <i>truth-value)</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_117.png"/></span></p><p class="s12" style="padding-top: 45pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                             19</p><p class="s72" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="0" height="0" alt="image" src="Image_118.png"/></span></p><p style="padding-left: 182pt;text-indent: 0pt;line-height: 676pt;text-align: left;">If this keyword is present, the package will have only</p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="2" alt="image" src="Image_119.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="2" alt="image" src="Image_120.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_121.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_122.png"/></span></p><p style="padding-left: 182pt;text-indent: 0pt;line-height: 663pt;text-align: left;">external symbols.</p><p class="s19" style="padding-left: 181pt;text-indent: 0pt;line-height: 638pt;text-align: left;">{: shadow <span class="s8">symbo/1 symbo/2 </span><span class="p">...)</span></p><p style="padding-left: 182pt;text-indent: 0pt;line-height: 620pt;text-align: left;">Shadow the given symbol(s) in this package.</p><p class="s19" style="padding-left: 181pt;text-indent: 0pt;line-height: 595pt;text-align: left;">{:export <span class="s8">symbo/1 symbo/2 </span><span class="p">...)</span></p><p style="padding-left: 182pt;text-indent: 0pt;line-height: 577pt;text-align: left;">Export {make external) the given symbol {s) from this</p><p style="padding-left: 182pt;text-indent: 0pt;line-height: 565pt;text-align: left;">package. Note: This option can only be used in a</p><p class="s19" style="padding-left: 182pt;text-indent: 0pt;line-height: 552pt;text-align: left;">defpackage <span class="p">for an already-defined package, because</span></p><p style="padding-left: 182pt;text-indent: 0pt;line-height: 540pt;text-align: left;">otherwise the arguments to this option clause</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 528pt;text-align: left;">(internal symbols in the package) can&#39;t exist yet. (Of</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 516pt;text-align: left;">course, you can still export inherited symbols this way,</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 504pt;text-align: left;">but this is not a very interesting case.)</p><p class="s19" style="padding-left: 180pt;text-indent: 0pt;line-height: 479pt;text-align: left;">{: import <span class="s8">symbo/1 symbo/2 </span><span class="p">...)</span></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 461pt;text-align: left;">Import {make internal and accessible) the given</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 448pt;text-align: left;">symbol(s) in this package.</p><p class="s19" style="padding-left: 181pt;text-indent: 0pt;line-height: 424pt;text-align: left;">(:shadowing-import <span class="s8">symbo/1 symbo/2 </span><span class="p">...)</span></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 405pt;text-align: left;">Import (make internal and accessible} the given</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 393pt;text-align: left;">symbol(s) in this package, shadowing any conflicts.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_123.png"/></span></p><p class="s10" style="padding-left: 5pt;text-indent: 0pt;line-height: 9918pt;text-align: left;"><a name="a22">Modules</a></p><p class="s19" style="text-indent: 0pt;line-height: 19812pt;text-align: right;">require <span class="s8">module-name </span>&amp;optional <span class="s8">pathname                            </span>[Function]</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 19794pt;text-align: left;">The implementation-specific way in which Xerox Lisp</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 19781pt;text-align: left;">searches for a <i>module-name </i>when no pathname is</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 19769pt;text-align: left;">provided is to first merge <i>module-name </i>with</p><p class="s19" style="text-indent: 0pt;line-height: 19756pt;text-align: right;">*default-pathname-defaults* <span class="p">and then </span><span class="s18">with</span></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 19745pt;text-align: left;">each   of   the   contents      of      the      variable</p><p class="s19" style="padding-left: 182pt;text-indent: 0pt;line-height: 19732pt;text-align: left;">il:directories.</p><p class="s73" style="padding-left: 5pt;text-indent: 0pt;line-height: 158061pt;text-align: left;"><a name="a23">Error Conditions Raised </a><u>by</u> the <u>Package System</u></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 158042pt;text-align: left;">There are a number of situations in which the package</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 158029pt;text-align: left;">system will raise error conditions, which can be caught</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 158017pt;text-align: left;">and handled by the user from within the debugger.</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 158005pt;text-align: left;">These situations are described below. For details on</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 157992pt;text-align: left;">how to handle these conditions and invoke these</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 157943pt;text-align: left;">20                                                                          <span class="s12">XEROX COMMON L:S:-&#39; &#39;VIPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">PACKAGES</p><p style="padding-left: 34pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_124.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 210pt;text-indent: 0pt;text-align: justify;">proceed cases, see the error system documentation in Chapter 24 of this manual.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">While in the reader: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="padding-top: 6pt;padding-left: 210pt;text-indent: 0pt;text-align: justify;">The conditions listed in this section are all subtypes of the <span class="s41">xcl:read-error </span>condition.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">xcl:symbol-colon-error <span class="s8">name                            [Condition]</span></p><p style="padding-top: 5pt;padding-left: 209pt;text-indent: 0pt;line-height: 108%;text-align: justify;">Indicates that the reader has found a name with too many colons in it. <i>name </i>is a string containing all of the characters of the invalid symbol.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">xcl:escape-colons-proceed             <span class="s8">[Proceed case]</span></p><p style="padding-top: 5pt;padding-left: 210pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Returns a symbol made in the current package, with the colons quoted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">xcl:missing-external-symbol <span class="s8">name package             [Condition]</span></p><p style="padding-top: 5pt;padding-left: 210pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This indicates that a name, qualified as external in a package, has not been found in a package. <i>name </i><b>is a </b>string. <i>package </i>is a package.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-top: 5pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">xcl:make-external-proceed</p><p style="padding-top: 5pt;padding-left: 210pt;text-indent: 0pt;text-align: left;">Creates and returns an external symbol.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">xcl:make-irrternal-proceed</p><p style="padding-top: 5pt;padding-left: 210pt;text-indent: 0pt;text-align: left;">Creates and returns an internal symbol.</p><p class="s8" style="padding-top: 4pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">[Proceed case]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">[Proceed case]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-top: 4pt;padding-left: 96pt;text-indent: 0pt;text-align: justify;">xcl:missing-package <span class="s8">package-name symbol-name [Condition]</span></p><p style="padding-top: 5pt;padding-left: 210pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This indicates that a package named <i>package-name, </i>referred to in a qualified symbol name, has not been found. Both <i>package-name </i>and <i>symbol-name </i>are strings.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 96pt;text-indent: 0pt;text-align: justify;">xcl:new-package-proceed <span class="s8">[Proceed </span><span class="s28">case]</span></p><p style="padding-top: 5pt;padding-left: 210pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Creates a new package named <i>package-name </i>and interns the symbol there. The package is created with default attributes. If the symbol was qualified external it is exported from the new package.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 96pt;text-indent: 0pt;text-align: justify;">xcl:ugly-symbol-proceed <span class="s8">[Proceed case]</span></p><p style="padding-top: 5pt;padding-left: 210pt;text-indent: 0pt;line-height: 108%;text-align: justify;">Creates a new internal symbol, in the current package, with a name composed of the package name, an appropriate number of colons, and the symbol name.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_125.png"/></span></p><p class="s12" style="padding-top: 36pt;padding-left: 36pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s2">21</span></p><p class="s12" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">PACKAGES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_126.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">That is, it creates the symbol that would have resulted had the colon(s) in the name been escaped. This is handy when an old Interlisp symbol like <span class="s58">DECLARE: </span>has been typed, which should (in a Common Lisp readtable) be typed <span class="s58">DECLARE\:.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 63pt;text-indent: 0pt;text-align: center;">xcl: read-conflict <span class="s8">name  packages                                      [Condition]</span></p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: left;">Indicates that the reader compatibility feature has&#39; found a name whose package it cannot determine. This is described in detail below under &quot;Koto Reader Compatibility Feature&quot;.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Package System Supertype<span class="s31"> Conditions:</span></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_127.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 63pt;text-indent: 0pt;text-align: center;">xcl:package-error   <span class="s8">package                                                 [Condition]</span></p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">This indicates an error has occurred in a call to package code that attempts to alter <i>package. </i>It is a subtype of the <span class="s19">error </span>condition. All the conditions described in this chapter, except for the reader errors listed above, are a subtype of this one. This error will almost never be signaled directly; most package conditions are actually of the type or types described below. The slot <i>package </i>is inherited by all subtype conditions of <span class="s19">xcl :package-error.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 63pt;text-indent: 0pt;text-align: center;">xcl:symbol-conflict    <span class="s8">symbols                                              [Condition]</span></p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">This condition is a subtype of the <span class="s19">xcl :package-error </span>condition. It indicates that, during a package system operation, a set of symbol names has been found to conflict (the list of symbols in <i>symbols). </i>This error will almost never be signaled directly; most package system conditions are subtypes of this type, since it is the most common error. The slot <i>symbols </i>is inherited by all subtype conditions of <span class="s19">xcl:symbol-conflict.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">While <u>calling use-package:</u></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_128.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 64pt;text-indent: 0pt;text-align: center;">xcl:use-conflict <span class="s8">used-package                                            [Condition]</span></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">This is a subtype of the <span class="s19">xcl:symbol-conflict </span>condition. It indicates that during a <span class="s19">use-package </span>operation the conflicting <i>symbols </i>exported by  the <i>used-package </i>have names that conflict with symbols already accessible in the <i>package. symbols </i>(inherited from <span class="s19">xcl:symbol-conflict) </span>is a list of the symbols.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_129.png"/></span></p><p class="s75" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">22                <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">PACKAGES</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_130.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 83pt;text-indent: 0pt;text-align: left;">xcl:shadow-use-conflicts-proceed         <span class="s8">[Proceed case]</span></p><p style="padding-top: 5pt;padding-left: 197pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Shadow conflicting symbols in the &quot;using&quot; package <i>(package). </i>This is the the safest way to proceed from this condition, but remember that references to any of the shadowed names will now refer to a local symbol, not the one that you might have been expecting to inherit.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 83pt;text-indent: 0pt;text-align: left;">xcl:unintern-user-proceed             <span class="s8">[Proceed case]</span></p><p style="padding-top: 5pt;padding-left: 197pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Unintern conflicting symbols from the &quot;using&quot; package <i>(package). </i>This is useful if you have inadvertantly interned the conflicting symbols by typing them to an executive before calling <span class="s41">use-package. </span>However, unless you are very sure of the use of the symbols being uninterned this operation may make those symbols permanently unavailable. This is a dangerous option; use it with caution.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 83pt;text-indent: 0pt;text-align: left;">xcl:unintern-usee-proceed             <span class="s8">[Proceed case]</span></p><p style="padding-top: 5pt;padding-left: 196pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Unintern conflicting symbols fro·m the package being used <i>(used-package). </i>Unless you are very sure of the use of the symbols being uninterned this operation may make those symbols permanently unavailable. This is a dangerous option; use it with caution.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-top: 5pt;padding-left: 83pt;text-indent: 0pt;text-align: left;">xcl:abort</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">Abort the <span class="s41">use-package </span>operation.</p><p class="s8" style="padding-top: 5pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">[Proceed case]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 4pt;padding-left: 21pt;text-indent: 0pt;text-align: left;">While calling export:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 83pt;text-indent: 0pt;text-align: justify;">xcl:export-conflict <span class="s8">exported-symbols packages [Condition]</span></p><p style="padding-top: 5pt;padding-left: 196pt;text-indent: 0pt;text-align: justify;">A subtype of the <span class="s41">xcl:symbol-conflict </span>condition. This condition indicates that exporting <i>exported-symbols </i>from <i>package </i>results in name conflicts with <i>symbols </i>in <i>packages.</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 197pt;text-indent: -114pt;text-align: left;">xcl:unintern-proceed               <span class="s8">[Proceed case]</span></p><p style="padding-top: 5pt;padding-left: 197pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Unintern conflicting symbols in <i>package. </i>Unless you are very sure of the use of the symbols being uninterned this operation may make those symbols permanently unavailable.  This is a dangerous option; use it with caution.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_131.png"/></span></p><p class="s12" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LY IC RELEASE                                                                            <span class="s75">23</span></p><p class="s12" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">PACKAGES</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_132.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 63pt;text-indent: 0pt;text-align: center;">xcl:abort                                                                             [Proceed case]</p><p class="s28" style="padding-top: 5pt;padding-left: 63pt;text-indent: 0pt;text-align: center;">Abort exporting from <span class="s8">package.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 60pt;text-indent: 0pt;text-align: center;">xcl:export-missing     <span class="s8">symbols                                                  [Condition]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">A subtype of the xcl :package-error condition. This condition indicates that the <span class="s8">symbols </span>are not available in <span class="s8">package </span>to be exported.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:import-proceed</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:abort</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">While <u>calling import:</u></p><p class="s28" style="padding-top: 4pt;padding-left: 188pt;text-indent: 0pt;text-align: left;">[Proceed Case]</p><p class="s28" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">Import these symbols into <span class="s8">package </span>before exporting them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 188pt;text-indent: 0pt;text-align: left;">[Proceed Case]</p><p class="s28" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">Abort export from <span class="s8">package.</span></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_133.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:import-conflict                                                          <span class="s8">[Condition]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: left;">This is a subtype of the xcl:symbol-conflict condition. It indicates that importing the <span class="s8">symbols </span>into</p><p class="s8" style="padding-left: 181pt;text-indent: -5pt;text-align: left;"><span class="p">· </span>package <span class="s28">causes a name conflict with symbols already accessible in </span>package.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:shadowing-import-proceed                                                  [Proceed <span class="s8">case]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 182pt;text-indent: 0pt;text-align: left;">lmportsymbo/swith shadowing-import.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:abort</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 9pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">Abort import into <span class="s8">package.</span></p><p class="s28" style="padding-top: 4pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">[Proceed case]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">While <u>calling</u> unintern:</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_134.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 68pt;text-indent: 0pt;text-align: justify;">xcl:unintern-conflict <span class="s8">symbol [Condition]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">This is a subtype of the xcl:symbol-conflict condition. It indicates that uninterning <span class="s8">symbol </span>from <span class="s8">package </span>causes name conflicts among the symbols on <span class="s8">symbols.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="text-indent: 0pt;text-align: right;">xcl:shadowing-import-proceed                                                   <span class="s8">[Proceed case]</span></p><p class="s28" style="padding-top: 5pt;text-indent: 0pt;text-align: right;">Shadowing-import a new symbol into <span class="s8">package </span>to hide</p><p class="s8" style="padding-left: 63pt;text-indent: 0pt;text-align: center;">symbols.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_135.png"/></span></p><p class="s29" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">24                                    <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="text-indent: 0pt;text-align: right;">PACKAGES</p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_136.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;">xcl:abort                                                                         <i>[Proceed case]</i></p><p style="padding-top: 6pt;padding-left: 209pt;text-indent: 0pt;text-align: left;">Abort unintern of <i>symbol </i>from <i>package.</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_137.png"/></span></p><p class="s9" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a name="a24">Koto Reader </a><u>Compatibility</u> Feature</p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_138.png"/></span></p><p style="padding-top: 11pt;padding-left: 208pt;text-indent: 0pt;line-height: 107%;text-align: justify;">For the benefit of Koto users  of the CML Library module, the Lyric release contains a &quot;reader compatibility feature&quot; to aid in reading Kato CML files into Lyric. If you do not have any such files, you can ignore this section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 208pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Koto release did not have an implementation of packages, so the CML module used a syntactic convention in which symbols containing colons were used to denote keywords and those Common Lisp symbols whose names conflicted with Interlisp symbols. Of course, the vast majority of Common Lisp names do not conflict, and those symbols were written with no package prefix. Ordinarily, if you were to load such a file into Lyric, all the symbols would be read as Interlisp symbols, and the colons would be treated as any other alphabetic character, consistent with the syntactic conventions of Interlisp in releases prior to Lyric. For example, the character sequence &quot;CL:UNLESS&quot; would read as the symbol il:cl\:unless; the sequence &quot;FIND-PACKAGE&quot; would read as the symbol il: find-package.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 209pt;text-indent: 0pt;line-height: 107%;text-align: left;">Enabling the reader compatibility feature causes the reader to attempt to resolve all symbols into the appropriate package. The feature is enabled when</p><ol id="l24"><li><p style="padding-top: 9pt;padding-left: 229pt;text-indent: -20pt;line-height: 107%;text-align: left;">il:litatom-package-conversion-enabled (a special variable) is true, and</p></li><li><p style="padding-top: 9pt;padding-left: 230pt;text-indent: -20pt;text-align: left;">the read table being used (the value of</p></li></ol><p style="padding-top: 1pt;padding-left: 230pt;text-indent: 0pt;line-height: 107%;text-align: left;">*readtable*) is either il: filerdtbl or il: coderdtbl.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 209pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Condition (b) is met when loading files produced by the File Manager and the compiler prior to Lyric and is (usually) not true for files produced in Lyric. You should only enable the compatibility feature when loading Kato CML files, as it may cause other files to be read incorrectly.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_139.png"/></span></p><p class="s12" style="padding-top: 38pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s75">25</span></p><p class="s12" style="padding-top: 8pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">PACKAGES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_140.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The reader feature handles two cases: strings containing an explicit &quot;package prefix&quot;, and unqualified strings that name a symbol in the LISP package. When enabled, the reader follows the following procedure when it encounters a string of characters to be interpreted as a symbol:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l25"><li><p style="padding-left: 202pt;text-indent: -9pt;line-height: 107%;text-align: justify;">If the string contains an explicit package prefix, such as a leading colon, or &quot;CL:&quot;, the string is interned in the package indicated by the prefix.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 202pt;text-indent: -10pt;line-height: 107%;text-align: justify;">If the string does not name a symbol in the LISP package, then no conversion is needed-the string is interned in the INTERLISP package.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 202pt;text-indent: -10pt;line-height: 107%;text-align: justify;">If the string names a symbol in the LISP package and there is not already a symbol by the same name in the INTERLISP package, the reader returns the LISP symbol.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 201pt;text-indent: -9pt;line-height: 107%;text-align: justify;">At this point, the string names symbols in both LISP and INTERLISP. If the LISP symbol is not an external one, then the conflict is with a private LISP symbol and hence accidental; the reader returns the INTERLISP symbol.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 202pt;text-indent: -10pt;line-height: 107%;text-align: justify;">If exactly one of the symbols is on the preferred reading list (see below), the reader returns that symbol.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 201pt;text-indent: -9pt;line-height: 107%;text-align: justify;">Otherwise, there is a conflict that cannot be automatically resolved. This will in general happen for any symbol of Common Lisp for which there happens to already exist an Interlisp symbol that was not &quot;shadowed&quot; in CML.</p></li></ol><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">In case 6, a debugger window appears with the message</p><p class="s31" style="padding-top: 4pt;padding-left: 191pt;text-indent: 0pt;text-align: justify;">Symbols named <span class="s76">name </span>exist in packages Lisp and Interlisp.</p><p style="padding-top: 6pt;padding-left: 182pt;text-indent: 0pt;text-align: justify;">Several proceed cases are available under the &quot;PROCEED&quot; option in the debugger menu. These are:</p><p class="s31" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">Return Lisp symbol, make it preferred</p><p style="padding-top: 7pt;padding-left: 181pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This returns the symbol from the Lisp package and also puts it on the global list <span class="s40">xcl:*preferred-reading-symbols*, </span>removing the Interlisp symbol if it was there. This is useful in</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_141.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">26                                                                            XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</p><p class="s2" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">PACKAGES</p><p style="padding-left: 36pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="587" height="1" alt="image" src="Image_142.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 211pt;text-indent: 0pt;line-height: 107%;text-align: justify;">cases where you have accidentally interned an uninteresting symbol in Interlisp by typing a name without a CL: qualifier. This usually results in an error, such as undefined function, but in the meantime you have created the symbol in the Interlisp package, making it difficult for the compatibility feature to decide what to do. From the moment this symbol is made preferred, you will no longer receive warnings and it will <i>always </i>be read as a Lisp symbol.</p><p class="s31" style="padding-top: 6pt;padding-left: 211pt;text-indent: 0pt;text-align: left;">Just return Lisp symbol</p><p style="padding-top: 6pt;padding-left: 211pt;text-indent: 0pt;text-align: left;">This is a conservative version of the above choice.</p><p class="s31" style="padding-top: 7pt;padding-left: 211pt;text-indent: 0pt;text-align: left;">Return Interlisp symbol, make it preferred</p><p style="padding-top: 7pt;padding-left: 211pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In some cases you may want to prefer the reading of an Interlisp symbol to that of a similarly named Common Lisp one. The symbol is made preferred by placing it on the global list <span class="s19">xcl:*preferred-reading-symbols*, </span>removing the Lisp symbol if it was there. The next time it is encountered, the reader feature will use it instead of the Lisp symbol.</p><p class="s31" style="padding-top: 6pt;padding-left: 211pt;text-indent: 0pt;text-align: left;">Just return Interlisp symbol</p><p style="padding-top: 7pt;padding-left: 211pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Again, this is a conservative version of the above choice, one which does not make the Interlisp symbol preferred.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-top: 4pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">Reader Com<span class="s31">patibility Feature: </span>Making Symbols<span class="s31"> Preferred</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 98pt;text-indent: 0pt;text-align: left;">xcl:*preferred-reading-syrnbols*                                        <span class="s8">[Global variable]</span></p><p style="padding-top: 6pt;padding-left: 211pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This global list contains symbols (not namestrings) whose reading is preferred. If both Interlisp and Lisp symbols appear on the list the name will still be considered ambiguous. Be careful about placing symbols on this list. You should be very sure that they will never be referred to on a file in such a way that the other meaning is desired. When a symbol from one package is marked preferred (via a proceed option in the debugger), the other one is removed, if it was present. This list initially contains a set of Interlisp symbols corresponding to Lisp symbols &quot;shadowed&quot; in CML (by symbols beginning with &quot;CL:&quot;) or not implemented in CML.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 36pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_143.png"/></span></p><p class="s12" style="padding-left: 36pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                             <span class="s77">27</span></p><p class="s12" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">PACKAGES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_144.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Reader <u>Compatibility</u> Feature: <u>Enabling</u> and <u>Disabling</u></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_145.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s56" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">il:litatom-package-conversion-enabled                <span class="s60">[Variable]</span></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Set or bind this flag true to enable the compatibility feature. Note that reader performance drops considerably when the compatibility feature is enabled. This flag should only be turned on while reading files written using the Kato Common Lisp library module.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Reader <u>Compatibility</u> Feature: Format of the Conversion Table</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_146.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s56" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">il:litatom-package-conversion-table             <span class="s60">[Global variable]</span></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This table is a list of clauses specifying the &quot;package prefixes&quot; to check when reading a symbol while the compatibility feature is enabled. The clauses are searched linearly. Each clause has the form:</p><p class="s15" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">(prefix-string exception-list package-name where-keyword)</p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 108%;text-align: justify;">The initial contents of this table are suitable for converting files produced using the Kato CML library module. Such clauses are:</p><p class="s78" style="padding-top: 6pt;padding-left: 191pt;text-indent: 1pt;line-height: 161%;text-align: left;">(    <span class="s79">11 </span>:     <span class="s79">11   </span><span class="s56">NIL &quot;KEYWORD&quot; :external) (&quot;CL:&quot; (&quot;CL:FLG&quot;) &quot;LISP&quot; :external)</span></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">You need only alter the table if you are trying to</p><p style="padding-left: 182pt;text-indent: 0pt;text-align: justify;">convert files that contained additional user &quot;pseudo-packages.&quot;</p><p class="s15" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 106%;text-align: justify;">prefix-string <span class="p">is a string which is matched to the first characters of a name. If the name matches the </span>prefix-string <span class="p">this clause is &quot;activated.&quot;</span></p><p class="s15" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;line-height: 108%;text-align: justify;">exception-list <span class="p">is a list of strings. If the name, including its prefix, matches any of these strings it is not converted and the conversion is aborted.</span></p><p class="s15" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;line-height: 106%;text-align: justify;">package-name <span class="p">is a string containing the name of the package in which the symbol name (without its prefix) will be interned.</span></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><b>where-keyword </b>is one of the keywords : <span class="s56">internal </span>or</p><p class="s56" style="padding-left: 182pt;text-indent: 0pt;text-align: justify;">:external, <span class="p">indicating whether the symbol is to be interned or interned and immediately exported.</span></p><p style="padding-top: 6pt;padding-left: 182pt;text-indent: 0pt;text-align: justify;">Note that since the clauses are tested sequentially, longer prefixes must go earlier  in  the list. If, for</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_147.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">28                                                                            XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</p><p class="s12" style="padding-top: 6pt;text-indent: 0pt;text-align: right;">PACKAGES</p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_148.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 197pt;text-indent: 0pt;line-height: 107%;text-align: justify;">example, you wanted to convert &quot;CL::&quot; prefixed names to be internal in &quot;LISP&quot; then you would have to place a clause before the one starting &quot;CL:&quot;. This avoids the &quot;CL:&quot; clause being activated for symbols named &quot;CL::FOO&quot; and the like.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Reader <u>Compatibility</u> Feature: Conditions</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_149.png"/></span></p><p style="padding-top: 4pt;padding-left: 197pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The reader compatibility  feature uses the following condition and proceed cases in its interaction:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 84pt;text-indent: 0pt;text-align: justify;">xcl:read-conflict <span class="s8">name packages [Condition]</span></p><p style="padding-top: 5pt;padding-left: 197pt;text-indent: 0pt;text-align: justify;">This condition indicates that the reader compatibility feature (see below) has found a name whose package it cannot determine. It is a subtype of the <span class="s41">xcl:read-error </span>condition. <i>name </i>is a string. <i>packages </i>contains a list of the packages in which the name was found, and between whom the reader feature cannot decide.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-top: 5pt;padding-left: 84pt;text-indent: 0pt;text-align: left;">xcl:prefer-clsym-proceed</p><p style="padding-top: 5pt;padding-left: 197pt;text-indent: 0pt;text-align: left;">Return LISP symbol, make it preferred.</p><p class="s8" style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">[Proceed <span class="s47">case]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-top: 5pt;padding-left: 84pt;text-indent: 0pt;text-align: left;">xcl:return-clsyrn-proceed</p><p style="padding-top: 5pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">Just return LISP symbol.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 84pt;text-indent: 0pt;text-align: left;">xcl:prefer-ilsym-proceed</p><p class="s8" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">[Proceed <span class="s47">case]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">[Proceed <span class="s47">case]</span></p><p style="padding-top: 5pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">Return INTERLISP symbol, make it preferred.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-top: 5pt;padding-left: 84pt;text-indent: 0pt;text-align: left;">xcl:return-ilsyrn-proceed</p><p style="padding-top: 5pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">Just return INTERLISP symbol.</p><p class="s8" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">[Proceed <span class="s47">case]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_150.png"/></span></p><p class="s67" style="padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a name="a25">Moving Existing</a><span class="s66"> Code into a New </span>Package</p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="583" height="1" alt="image" src="Image_151.png"/></span></p><p style="padding-top: 4pt;padding-left: 198pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Now that Xerox Lisp supports Common Lisp packages, users may wish to take advantage of package modularity by moving existing code modules into their own packages. For Common Lisp code being maintained in purely text form, <i>Common Lisp: the Language </i>tells you much of what you need to know. However, there are several additional considerations for code maintained by the Xerox Lisp File Manager; this section addresses some of these considerations.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_152.png"/></span></p><p class="s12" style="padding-top: 32pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE <span class="s29">29</span></p><p class="s54" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">PACKAGES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="padding-top: 18pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Lyric release contains no tools for completely automating the conversion to another package, nor does it supply tools for supporting very complex packages. The discussion that follows points out some of the mechanisms that may help for creating relatively simply user packages. It assumes you have a file or set of files produced by the File Manager in Lyric. Files written with the Koto CML module should first be converted to Lyric as described above.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">How to specify<span class="s15"> </span>the makefile-environment &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="padding-top: 7pt;padding-left: 181pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In order to have a file written in your own package, it must have a makefile-environment property, which takes the form of a list ( : <span class="s19">read table </span><span class="s80">tbl </span><span class="s19">: package </span><i>package). </i>The Xerox <i>Lisp </i>Re/ease <i>Notes </i>on the File Manager discuss how this property is used. The discussion here is confined to the form in which the <i>package </i>is described.</p><p style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If you want to write a file in one of the standard packages, such as XCL-USER or INTERLISP, you need only specify the package name, preferably as a string (make sure it is upper-case). If you want to use your own package, you <i>must </i>supply an expression whose evaluation will return the package, creating it if necessary. The expression must not assume that any package, other than the standard ones, already exists; in particular, the expression cannot contain any symbols that are in your new package. It should also be self-contained; e.g., if it calls <span class="s19">in-package, </span>it must be sure to bind <span class="s19">*package*, </span>in order not to side-effect whatever code is loading or otherwise using the expression to produce a reader environment. And finally, it should not assume that the file it is on is actually being loaded; makefile environments are examined and evaluated by various system utilities that manipulate files (e.g., <span class="s19">il: loadfns), </span>not just the loader.</p><p style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">For most packages, the simplest expression to use is <span class="s19">defpackage. </span>It creates the package if it does not yet exist, and returns the package&#39;s name in any case, so it is well suited as a <i>package </i>expression. For example, to specify a package that inherits both LISP and XCL {as the pre-supplied XCL-USER package does) and imports the Interlisp window  system symbols <span class="s19">createw </span>and <span class="s19">windowprop, </span>you could write</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_153.png"/></span></p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">30                                                                       <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">PACKAGES</p><p style="padding-left: 43pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_154.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s56" style="padding-left: 198pt;text-indent: -31pt;line-height: 108%;text-align: left;">(defpackage &quot;MYHACK&quot; (:use &quot;LISP&quot; &quot;XCL&quot;)</p><p class="s56" style="padding-left: 198pt;text-indent: 0pt;text-align: left;">(:nicknames &quot;MH&quot;)</p><p class="s56" style="padding-top: 1pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">(:import il:createw il:windowprop))</p><p style="padding-top: 6pt;padding-left: 219pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The major complication arises if you want to export any symbols (any package that presents a programmer&#39;s interface surely does). You can&#39;t put the exported symbols in the <span class="s56">defpackage </span>expression, because the package doesn&#39;t yet exist in which to type them. There are two principal ways to do the exporting: export the symbols later (in the body of the file), or write a more complex expression.</p><p style="padding-top: 5pt;padding-left: 219pt;text-indent: 0pt;text-align: justify;">In the former case, you write a minimal <span class="s56">defpackage </span>expression for the makefile-environment, then write a more complete one in the body of the file (e.g., in a P command, or in an initialization function). The minimal <span class="s56">defpackage </span>is responsible for creating enough of the package so that expressions on the file can be read. This means it has to specify inheritance, imported symbols and any shadows. For example, you might write</p><p class="s56" style="padding-top: 7pt;padding-left: 14pt;text-indent: 0pt;text-align: center;">(defpackage <span class="s81">&quot;MYHACK&quot;</span></p><p class="s56" style="padding-left: 197pt;text-indent: 0pt;text-align: left;">(:use &quot;LISP&quot; &quot;XCL&quot;)</p><p class="s56" style="padding-top: 1pt;padding-left: 197pt;text-indent: 0pt;text-align: left;">(:import il:createw il:windowprop))</p><p style="padding-top: 5pt;padding-left: 219pt;text-indent: 0pt;line-height: 107%;text-align: justify;">as the minimal expression, then in the body of the file write the &quot;full&quot; expression, which can rely on the package already having been created:</p><p class="s56" style="padding-top: 7pt;padding-left: 198pt;text-indent: -31pt;line-height: 108%;text-align: left;">(defpackage &quot;MYHACK&quot; (:use &quot;LISP&quot; &quot;XCL&quot;)</p><p class="s56" style="padding-left: 198pt;text-indent: 0pt;text-align: left;">(:nicknames &quot;MH&quot;)</p><p class="s56" style="padding-left: 198pt;text-indent: 0pt;text-align: left;">(:export make-hack-window save-hack))</p><p style="padding-top: 6pt;padding-left: 219pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This method requires some discipline on the part of package users, since the package as created by the simple expression lacks external symbols. In this state, forms on the file can still be read correctly (though when printed from any other package context the not yet exported symbols will appear with two colons in their name). However, the package cannot be properly inherited by any other package, since references from such a package to the not yet exported symbols will instead create internal symbols in the other package, which will (a) be the wrong symbols and (b) create a package conflict when the full package definition is evaluated. Thus, users of the package <span class="s55">must </span>ensure that the file containing the full</p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_155.png"/></span></p><p class="s12" style="padding-top: 37pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s29">31</span></p><p class="s54" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">PACKAGES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 182pt;text-indent: 0pt;line-height: 107%;text-align: left;">package definition is loaded before attempting to use-package it or refer to its symbols.</p><p style="padding-top: 5pt;padding-left: 182pt;text-indent: 0pt;line-height: 109%;text-align: left;">The alternative is to write a single very careful expression to define the whole package, e.g.,</p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: 0pt;text-align: left;">(let (*package*)</p><p style="padding-left: 151pt;text-indent: 0pt;line-height: 12pt;text-align: left;">( in-package <span class="s56">&quot;MYHACK&quot; &quot;MH&quot; &#39;( &quot;LISP&quot; &quot;XCL&quot;))</span></p><p style="padding-left: 151pt;text-indent: 0pt;line-height: 109%;text-align: left;">(import &#39;(il:createw il:windowprop)) (export (mapcar #&#39;intern</p><p class="s56" style="padding-left: 199pt;text-indent: 0pt;text-align: left;">&#39;(&quot;MAKE-HACK-WINDOW&quot; &quot;SAVE-HACK&quot;))))</p><p style="padding-top: 5pt;padding-left: 182pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If you have a very complex package, or one that is used on many files, it may be preferable just to create a file whose sole purpose is to define the package, then require that file. For example, the package expression might simply be</p><p style="padding-top: 6pt;padding-left: 194pt;text-indent: 0pt;text-align: left;">(progn (require <span class="s56">&quot;MYHACKDEFS&quot;) &quot;MYHACK&quot;)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s82" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Changing<span class="s18"> </span><span class="s39">the </span>Package<span class="s18"> </span><span class="s39">of </span>Existing<span class="s18"> </span><span class="s39">Code &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span></p><p style="padding-top: 7pt;padding-left: 182pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Once you&#39;ve decided how to define the package, you still have to arrange for the symbols currently in some old package to be moved into your new package. Much of this task can be done by specifying an explicit package to the loader, either as the : package keyword to cl: load, or the fourth argument to il: load. The package you specify· overrides</p><p style="padding-left: 182pt;text-indent: -7pt;line-height: 109%;text-align: justify;">. whatever package is specified in the file&#39;s makefile environment.</p><p style="padding-top: 5pt;padding-left: 182pt;text-indent: 0pt;line-height: 107%;text-align: justify;">In order for this to work, the new package must have fundamentally the same inheritance structure as the package in which the file was written. For example, if the file was written in the XCL-USER package, your new package must inherit LISP and XCL. If the file was written in the INTERLISP package, your new package must inherit INTERLISP (but read the cautions below). When you load the file, the reader will then do the &quot;right&quot; thing whenever it encounters a symbol with no package qualifier-if the symbol was inherited by the old package, it will also be inherited by the new package, so the exact same symbol is read; if the symbol was local to the old package, it will not be inherited, but will be read as a local symbol in the new package.</p><p style="padding-top: 5pt;padding-left: 182pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After loading the file and doing whatever touchups seem appropriate (e.g., there may be local symbols in the old package that really should have been references to the old package), give the file a new</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_156.png"/></span></p><p class="s75" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">32                <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 6pt;text-indent: 0pt;text-align: right;">PACKAGES</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_157.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 200pt;text-indent: 0pt;line-height: 107%;text-align: left;">makefile-environment property as described above, then call <span class="s56">i1:makefile </span>to write out the new file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Changing Package<span class="s31"> Inheritance</span></p><p style="padding-top: 7pt;padding-left: 200pt;text-indent: 0pt;line-height: 107%;text-align: left;">It may be the case that you want your new package to have a different inheritance structure than the old. For example, you have a file written in the INTERLISP package that you want to move into a Common lisp package. In this case, you should temporarily define your new package to have the same inheritance as the old package, and load the file as above. At this point, all the important symbols have been read correctly. Then change the new package&#39;s inheritance structure to be as desired, for example:</p><p class="s56" style="padding-top: 7pt;padding-left: 209pt;text-indent: 0pt;line-height: 108%;text-align: left;">(cl:in-package &quot;RAPT&quot;) (cl:unuse-package &quot;INTERLISP&quot;) (cl:use-package &#39;(&quot;LISP&quot; &quot;XCL&quot;))</p><p style="padding-top: 5pt;padding-left: 200pt;text-indent: 0pt;line-height: 107%;text-align: justify;">At this point, your new package is defined the way you want, but you may still have unexpected references to other packages, typically in the form of lexical variables in functions. For example, in the case of moving from INTERLISP to a non-INTERLISP package, many of your module&#39;s lexical variables happened to coincide with symbols already extant in INTERLISP, so were still read as INTERLISP symbols. If you view the definition of a function in your new module, you may see such things as</p><p class="s56" style="padding-top: 7pt;padding-left: 199pt;text-indent: 0pt;text-align: justify;">(let ((il:x (car il:top))</p><p class="s50" style="text-indent: 0pt;line-height: 9pt;text-align: left;">)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s56" style="padding-left: 156pt;text-indent: 0pt;text-align: center;">i<span class="s83">..</span>l<span class="s83">.</span>:a il:b)</p><p style="padding-top: 4pt;padding-left: 201pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You&#39;ll likely want to rename those variables to be locals in your new package. It is fairly easy to write an SEdit mutator function that searches for symbols not accessible in the current package and replaces them (with user approval) with symbols of the same name interned in the current package.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-top: 4pt;padding-left: 25pt;text-indent: 0pt;text-align: left;">Caution about referring<span class="s31"> </span>to other packages</p><p style="padding-top: 7pt;padding-left: 201pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If you use symbols from other packages (other than the standard ones), you must, of course, make sure that the other package is defined. There are some subtleties here when the File Manager is involved.</p><p style="padding-top: 6pt;padding-left: 201pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If you want your package to inherit another non-standard package, you must ensure that the module defining the other package is loaded before</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_158.png"/></span></p><p class="s12" style="padding-top: 28pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s2">33</span></p><p class="s54" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">PACKAGES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 109%;text-align: justify;">defining your package. For example, your package expression might look like:</p><p class="s56" style="padding-top: 6pt;padding-left: 224pt;text-indent: -43pt;line-height: 110%;text-align: left;">(progn (require &quot;MYHACKDEFS&quot;) (defpackage &quot;MOREHAX&quot;</p><p class="s56" style="padding-left: 249pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(:use &quot;LISP&quot; &quot;MYHACK&quot;)))</p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Similarly, if you simply want to refer to symbols of another package, you must ensure that its module is loaded first. The same procedure is recommended, even if you are not defining your own package. For example, on an Interlisp file, you might give as package expression:</p><p class="s56" style="padding-top: 7pt;padding-left: 224pt;text-indent: -44pt;line-height: 106%;text-align: left;">(progn (require &quot;MYHACKDEFS&quot;) &quot;INTERLISP&quot;)</p><p style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">You might be tempted to do this instead by including one or more <span class="s56">files </span>commands in the file&#39;s corns, e.g., the command</p><p class="s56" style="padding-top: 7pt;padding-left: 190pt;text-indent: 0pt;text-align: left;">(il:files &#39;myhackdefs).</p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">However, there are two problems with this method. You can&#39;t refer to any of the variables in the corns, for example,</p><p class="s56" style="padding-top: 7pt;padding-left: 228pt;text-indent: -37pt;line-height: 108%;text-align: left;">(vars (myhack:default-size 37) (myhack:default-speed :fast))</p><p style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">because at the time the corns expression itself is read, the <span class="s56">files </span>command contained in it has <span class="s84">not </span>yet been executed, so you can get a missing package error when the reader encounters <span class="s56">myhack:default-size.</span></p><p style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">Even if you solve that problem, for example by hiding all the variable settings in an initialization function, system utilities that attempt to read only part of the file (e.g., <span class="s56">il:loadfns) </span>may fail when they encounter the other symbols. The utility will have read the makefile  environment (which is why the <span class="s56">require </span>works there), but will not necessarily have read, much less evaluated, the commands in the body of the file that cause the other file to be loaded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s82" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="a26">Special</a><span class="s18"> </span>considerations for the IL package</p><p style="padding-top: 7pt;padding-left: 182pt;text-indent: 0pt;line-height: 107%;text-align: justify;">It is perfectly permissible to define a package that inherits from the INTERLISP package. However, when you do so, you must keep in mind a couple of things that are special about it: INTERLISP is external only, and the INTERLISP package&#39;s external  symbols (i.e., the entire package) are not all defined in the standard</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_159.png"/></span></p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">34                                                                      <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s72" style="padding-top: 6pt;text-indent: 0pt;text-align: right;">PACKAGES</p><p style="padding-left: 43pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_160.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s85" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">...</p><p style="padding-top: 4pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">sysout-loading Library and LispUsers modules generally adds new symbols to the INTERLISP package. Following are some of the pitfalls to watch for.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">The File Manager currently requires that certain symbols be in the INTERLISP package, regardless of the package of the file&#39;s contents: the symbol naming the file&#39;s corns (whose value is a list describing the file&#39;s contents}, and the file&#39;s rootname (whose property list includes the file&#39;s makefile environment, file type and other File Manager properties}. However, INTERLISP is external only, so those symbols are automatically inherited by any package using INTERLISP. Thus, for example, when the File Manager writes the symbol <span class="s40">il: </span><span class="s19">foocoms </span>on the file <span class="s19">foo, </span>whose environment is the package  <span class="s19">bar </span>inheriting <span class="s40">il, </span>the printer does not qualify the symbol with its package name, printing simply <span class="s19">&quot;foocoms&quot;. </span>If you subsequently load <span class="s19">foo </span>into a standard sysout, the reader encounters the token <span class="s19">&quot;foocoms&quot; </span>and, since <span class="s40">il: </span><span class="s19">foocoms </span>does not exist, reads it as <span class="s19">bar:: foocoms.</span></p><p style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To avoid this problem,  you must ensure that the sy bols <span class="s40">il: </span><span class="s19">foocoms </span>and <span class="s40">il: </span><span class="s19">foo </span>exist when the file is loaded. The simplest way is to include them in the makefile environment&#39;s package expression:</p><p class="s19" style="padding-top: 5pt;padding-left: 226pt;text-indent: -43pt;text-align: left;">(progn &#39;(il:foocoms il:foo) (defpackage &quot;BAR&quot;</p><p class="s19" style="padding-left: 257pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(:use &quot;INTERLISP&quot;)))</p><p style="padding-top: 7pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">For essentially the same reason, you must be careful that your file loads in advance any modules that define INTERLISP symbols it needs to refer to. Otherwise, since those symbols are external in INTERLISP, references to them are not qualified, and thus will be read instead as new internal symbols in your package. See the discussion above about referring to symbols from other packages.</p><p style="padding-top: 5pt;padding-left: 182pt;text-indent: 0pt;line-height: 107%;text-align: justify;">When you follow the procedure outlined above for loading an Interlisp file into an Interlisp-inheriting package, be sure to load the file into a pristine sysout, or at least one in which your file has never been read. Otherwise, all the symbols on the file will already have been interned in INTERLISP, and thus would be read as the same INTERLISP symbols, rather than symbols of your new package.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_161.png"/></span></p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s2">35</span></p><p class="s54" style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">PACKAGES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 156pt;text-indent: 0pt;text-align: center;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="582" height="1" alt="image" src="Image_162.png"/></span></p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">36                                                                       <span class="s12">XEROX COMMON LISP !MPLEMENTAT!ON NOTES&#39;, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 4pt;text-indent: 0pt;text-align: right;"><a name="bookmark3">NUMBERS</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_163.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-top: 6pt;padding-left: 195pt;text-indent: 0pt;text-align: justify;">CHAPTER 12 NUMBERS</h3><p style="padding-left: 195pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="344" height="6" alt="image" src="Image_164.png"/></span></p><p style="padding-top: 8pt;padding-left: 195pt;text-indent: 0pt;line-height: 107%;text-align: justify;">As stated in <i>Common Lisp: the Language, </i>the values of named constants are implementation-dependent. The section that follows lists the limits for the Xerox Common Lisp implementation of the constants described by Steele.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="566" height="1" alt="image" src="Image_165.png"/></span></p><p class="s73" style="padding-left: 20pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="a27">12.10. </a><u>Implementation</u> Parameters</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_166.png"/></span></p><p class="s56" style="padding-top: 7pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">most-positive-fixnum <span class="s28">65535</span></p><p class="s56" style="padding-top: 6pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">most negative-fixnum -65536</p><p class="s56" style="padding-top: 7pt;padding-left: 123pt;text-indent: 0pt;line-height: 163%;text-align: left;">most-positive-short-float   3.4028235E+38 least-positive-short-float   l.40129847E-45 least-negative-short-float   -l.1754945E-38 most-negative-short-float    -3.4028235E+38 most-positive-single-float   3.4028235E+38 least-positive-single-float    l.40129847E-45 least-negative-single-float   -l.1754945E-38 most-negative-single-float  -3.4028235E+38 most-positive-double-float  3.4028235E+38 least-positive-double-float   l.40129847E-45 least-negative-double-float  -l.1754945E-38 most-negative-double-float   -3.4028235E+38 most-positive-long-float   3.4028235E+38 least-positive-long-float   l.40129847E-45 least-negative-long-float   -l.1754945E-38 most-negative-long-float   -3.4028235E+38 short-f loat-epsilon   l.1920929E-7</p><p class="s56" style="padding-left: 123pt;text-indent: 0pt;line-height: 162%;text-align: justify;">single-float-epsilon l.1920929E-7 double-float-epsilon l.1920929E-7 long-float-epsilon l.1920929E-7</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_167.png"/></span></p><p class="s12" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s75">37</span></p><p class="s54" style="padding-top: 3pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">NUMBERS &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s56" style="padding-left: 114pt;text-indent: 0pt;line-height: 163%;text-align: left;">short-float-negative-epsilon=} 5.9604645E-8 single-float-negative-epsilon=} 5.9604645E-8 double-float-negative-epsilon=} 5.9604645E-8 long-float-negative-epsilon=} 5.9604645E-8</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_168.png"/></span></p><p class="s5" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">38                                                                          <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 6pt;text-indent: 0pt;text-align: right;">CHARACTERS</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_169.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 217pt;text-indent: 0pt;text-align: left;"><a name="a28">CHAPTER 13         CHARACTERS</a></p><p style="padding-left: 217pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="344" height="6" alt="image" src="Image_170.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="2" alt="image" src="Image_171.png"/></span></p><ol id="l26"><ol id="l27"><li><p class="s9" style="padding-left: 74pt;text-indent: -32pt;line-height: 13pt;text-align: left;"><a name="a29">Character Attributes</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_172.png"/></span></p><p style="padding-top: 8pt;padding-left: 217pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Characters in Xerox Common Lisp follow the Xerox NS Character Code Standard. Character codes are 16-bit quantities, partitioned into 8 bits of character set and 8 bits of character within the set. The value of the constant <span class="s40">char-code-lirni t </span>is 65536. Characters are an immediate data type; i.e., they consume no storage.</p><p style="padding-top: 6pt;padding-left: 217pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Xerox Common Lisp supports neither font nor bits attributes. Hence, the values of the constants <span class="s40">char-font-lirni t </span>and <span class="s40">char-bi ts-lirni t </span>are both one . The functionality of font andbits attributes are achieved instead through graphics programming conventions and the use of a larger character space.</p><p style="padding-top: 6pt;padding-left: 216pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Characters do not themselves have &quot;font&quot; attributes; however, streams have a notion of a current font, and some programs attach fonts to larger entities, such as strings or subranges of a file. In addition, the Xerox Character Standard encodes in the character itself some information that other implementations associate with a font. For example, a lower-case beta</p><p class="s40" style="padding-left: 217pt;text-indent: 0pt;line-height: 106%;text-align: justify;">(13) <span class="p">is a distinct character (in the Greek character set), rather than being a lower-case b with a Greek font attribute. This distinct character can be rendered in an assortment of fonts.</span></p><p style="padding-top: 6pt;padding-left: 217pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The use for which &quot;bits&quot; attributes were originally intended was to represent different keyboard keystrokes (e.g., meta-hyper-A}. The equivalent functionality is achieved in Xerox Common Lisp by assigning codes from other character sets to keystrokes using the key action table. Xerox Common Lisp follows the convention that characters typed with the Meta key depressed are in character set 1. Most of</p><table style="border-collapse:collapse;margin-left:214.868pt" cellspacing="0"><tr style="height:12pt"><td style="width:101pt"><p class="s25" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: left;">the extra function</p></td><td style="width:162pt"><p class="s25" style="padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">keys on the keyboard are in</p></td></tr><tr style="height:18pt"><td style="width:101pt"><p class="s25" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">character set 2.</p></td><td style="width:162pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:21pt"><td style="width:101pt"><p class="s86" style="padding-top: 5pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">char-code-limit</p></td><td style="width:162pt"><p class="s86" style="padding-top: 5pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">65536</p></td></tr><tr style="height:19pt"><td style="width:101pt"><p class="s86" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">char-font-limit</p></td><td style="width:162pt"><p class="s86" style="padding-top: 3pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">1</p></td></tr><tr style="height:15pt"><td style="width:101pt"><p class="s86" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;">char-bits-limit</p></td><td style="width:162pt"><p class="s86" style="padding-top: 3pt;padding-left: 17pt;text-indent: 0pt;line-height: 11pt;text-align: left;">1</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_173.png"/></span></p><p class="s12" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s2">39</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_174.png"/></span></p><p class="s12" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">CHARACTERS</p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="2" alt="image" src="Image_175.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_176.png"/></span></p></li><li><p class="s9" style="padding-top: 21pt;padding-left: 41pt;text-indent: -34pt;text-align: left;"><a name="a30">Predicates on Characters</a></p></li></ol></ol><p style="padding-top: 40pt;padding-left: 1pt;text-indent: 0pt;text-align: justify;">XCL considers <span class="s19">graphic-char-p </span>to be true for exactly those characters in the space that the Xerox Character Code Standard calls &quot;graphic&quot; or &quot;rendering&quot;. This space consists of characters whose character set component is zero or in one of the octal ranges [<span class="s19">41, 176] </span>or <span class="s19">[241, 376]. </span>and whose character byte is in one of the octal ranges <span class="s19">[40, 176] </span>or <span class="s19">[241, 376]. </span>In particular, all of the normal ASCII printing characters are in the range <span class="s19">[40, 176] </span>in character set <span class="s19">0, </span>and hence are graphic. Not all graphic characters are necessarily defined or have a rendering in any particular font.</p><p style="padding-top: 5pt;padding-left: 1pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The character sets <span class="s19">1 </span>thru <span class="s19">40 </span>and <span class="s19">177 </span>thru <span class="s19">240 </span>(octal) are in the range that the Xerox Character Code Standard calls &quot;control characters&quot;. Of these character sets, only sets <span class="s3">1 </span>and 2 have any assigned meaning in this release of Xerox Common Lisp.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_177.png"/></span></p><ol id="l28"><ol id="l29"><li><p class="s9" style="padding-top: 46pt;padding-left: 38pt;text-indent: -32pt;text-align: left;"><a name="a31">Character Conversions</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_178.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: 0pt;text-align: justify;">The names of most non-graphic characters are of the form <i>cset-char, </i>where <i>cset </i>is a character set name (e.g., Greek) or its octal representation {Oto <span class="s19">376), </span>and <i>char </i>is the octal representation of the character within the set (0 to <span class="s19">376).  </span>The ASCII control characters (codes <span class="s40">1 </span>through <span class="s19">32 </span>octal) have names of  the form &quot;1&#39;1etter&quot;, e.g., <span class="s19">(cl:char-name (cl:code-char </span><span class="s3">2)) </span>&quot;1&#39;B&quot;. Some well-known characters, including those documented in <i>Common Lisp:  the Language, </i>have more interesting names, which are registered in the association list il <span class="s19">:characternames. </span>Users are free to add to this list, but should beware of reading characters with new names in a system that has only the default il <span class="s19">:characternames. </span>Names of well-known character sets are registered on the list <span class="s19">il:charactersetnames.</span></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">Graphic characters have no name <span class="s19">(char-name </span>returns nil) and print as themselves.</p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can input characters using the same syntax, or you can give the character within the character set a name. For example, <span class="s40">Jt\1-A </span>and <span class="s40">#\1-101 </span>are the same character (capital A in character set <span class="s40">1, </span>or the character obtained by typing Meta-A). Lowercase beta can be</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_179.png"/></span></p><p class="s75" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">40               <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s29" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">CHARACTERS</p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_180.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 205pt;text-indent: 0pt;text-align: justify;">typed <span class="s19">#\Greek-142 </span>or <span class="s19">:ft\46-142; </span>being a graphic character, it always prints as <span class="s19">:ft\13. </span>However, you cannot use the &quot;names&quot; of lowercase letters, because Common Lisp reads case-insensitively. Thus, it could not distinguish <span class="s19">#\Greek-B </span>from <span class="s19">:ft\Greek-b.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_181.png"/></span></p></li><li><p class="s66" style="padding-left: 61pt;text-indent: -32pt;text-align: justify;"><a name="a32">Character Control-Bit Functions</a></p></li></ol></ol><p style="padding-left: 29pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_182.png"/></span></p><p style="padding-top: 4pt;padding-left: 204pt;text-indent: 0pt;text-align: justify;">The constants <span class="s19">char-control-bit, char-meta-bit, char-super-bit, </span>and <span class="s19">char-hyper-bit </span>have the value zero {O), since non-zero bits attributes are not supported in XCL. In addition, the functions <span class="s19">char-bit </span>and <span class="s19">set-char-bit </span>exist but signal an error when called.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_183.png"/></span></p><p class="s29" style="padding-top: 1pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC Ee.EASE                                       41</p><p class="s54" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">CHARACTERS &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 155pt;text-indent: 0pt;text-align: center;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_184.png"/></span></p><p class="s29" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">42                                                                           <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">LISTS</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_185.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-bottom: 2pt;padding-left: 213pt;text-indent: 0pt;text-align: left;"><a name="a33">CHAPTER 15                 LISTS</a></p><p style="padding-left: 213pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="345" height="6" alt="image" src="Image_186.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="2" alt="image" src="Image_187.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_188.png"/></span></p><ol id="l30"><ol id="l31"><li><p class="s66" style="padding-left: 70pt;text-indent: -31pt;text-align: left;"><a name="a34">Conses</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 39pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Xerox Common Lisp assumes trees are non-circular. Therefore, passing circular lists to these functions results in undefined actions (likely to be stack overflows or infinite loops).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="2" alt="image" src="Image_189.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_190.png"/></span></p></li><li><p class="s66" style="padding-left: 73pt;text-indent: -34pt;text-align: left;"><a name="a35">Lists</a></p></li></ol></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 38pt;text-indent: 0pt;line-height: 109%;text-align: left;">pushnew <span class="p">uses the same keywords as </span>adjoin, <span class="p">notthe same ones as the standard sequence operands.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_191.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_192.png"/></span></p><p class="s66" style="padding-left: 39pt;text-indent: 0pt;text-align: left;"><a name="a36">1S.S. Using Lists as Sets</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 109%;text-align: left;">It is an error to hand these functions lists which are not true sets.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_193.png"/></span></p><p class="s12" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s2">43</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s54" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">LISTS &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: center;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_194.png"/></span></p><p class="s87" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">44              <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;text-indent: 0pt;text-align: right;"><a name="bookmark4">ARRAYS</a></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_195.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-bottom: 2pt;padding-left: 215pt;text-indent: 0pt;text-align: left;"><a name="a37">CHAPTER 17              ARRAYS</a></p><p style="padding-left: 215pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="345" height="6" alt="image" src="Image_196.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 39pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_197.png"/></span></p><ol id="l32"><ol id="l33"><li><p class="s74" style="padding-left: 74pt;text-indent: -35pt;text-align: left;"><a name="a38">make-array</a></p><p style="padding-left: 39pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="0" alt="image" src="Image_198.png"/></span></p><p class="s31" style="padding-top: 9pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Additional <u>&amp;key Arguments</u> to <span class="s39">make-array:</span></p><p style="padding-left: 39pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="589" height="1" alt="image" src="Image_199.png"/></span></p><p class="s28" style="padding-top: 7pt;padding-left: 215pt;text-indent: 0pt;text-align: left;">:fatp</p><p class="s28" style="padding-top: 6pt;padding-left: 214pt;text-indent: 0pt;text-align: justify;">(tor nil, defaults to nil). Affects storage allocation for arrays of element type string-char (strings). If t, storage is allocated to accomodate &quot;fat&quot; 16-bit <span class="s69">(NS) </span>characters. The default behavior is to allocate space for &quot;thin&quot; 8-bit characters. Fat characters can still be stored into a thin string (the string is automatically fattened), but it is more efficient to allocate it fat in the first place if it is known in advance that fat characters will be used.</p><p class="s28" style="padding-top: 9pt;padding-left: 215pt;text-indent: 0pt;text-align: left;">:extendable</p><p class="s28" style="padding-top: 6pt;padding-left: 214pt;text-indent: 0pt;text-align: justify;">(t or nil, defaults to nil) similar to :adjustable but the only aspect of the array you can change is its size. This restriction allows for a more speed efficient implementation of extendable arrays, which is especially useful for those who make frequent use of vector-push-extend. adjust-array may be passed an extendable array. The predicate extendable-ar ray-pis true for both adjustable and extendable arrays, but adjustable-array-pis true only for adjustable arrays.</p><p class="s28" style="padding-top: 9pt;padding-left: 215pt;text-indent: 0pt;text-align: left;">:read-only-p</p><p class="s28" style="padding-top: 6pt;padding-left: 215pt;text-indent: 0pt;text-align: justify;">(t or nil, defaults to nil). If t, defines the array to be read-only, which is especially useful for displaced and displaced-to-base arrays. Read-only arrays may not be adjustable or extendable. An attempt to write into a read-only array does not cause an error, rather the array&#39;s storage block is copied before the write operation, so that the original storage block is unchanged.</p><p class="s28" style="padding-top: 9pt;padding-left: 216pt;text-indent: 0pt;text-align: left;">:displaced-to-base <span class="s8">pointer</span></p><p class="s8" style="padding-top: 6pt;padding-left: 215pt;text-indent: 0pt;text-align: justify;">pointer <span class="s28">is a bare pointer or memory address. Allows you to displace an array directly to a memory storage block (like the screen bitmap). Should usually be used</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_200.png"/></span></p><p class="s12" style="padding-top: 40pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s2">45</span></p><p class="s12" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">ARRAYS</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_201.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: left;">with     : <span class="s19">read-only-p     t </span>to prevent unintended changes to the original storage block.</p><p style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: left;">In sum, Xerox Common Lisp <span class="s19">make-array </span>looks like (extensions are in bold}:</p><p class="s19" style="padding-top: 8pt;padding-left: 68pt;text-indent: 0pt;line-height: 12pt;text-align: left;">make-array <span class="s8">dimensions </span>&amp;key :element-type</p><p class="s19" style="padding-left: 223pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:initial-element</p><p class="s19" style="padding-left: 223pt;text-indent: 0pt;text-align: left;">:initial-contents</p><p class="s19" style="padding-left: 223pt;text-indent: 0pt;text-align: left;">:adjustable</p><p class="s19" style="padding-left: 223pt;text-indent: 0pt;text-align: left;">: fill-pointer</p><p class="s19" style="padding-left: 223pt;text-indent: 0pt;text-align: left;">:displaced-to</p><p class="s19" style="padding-left: 223pt;text-indent: 0pt;text-align: left;">:displaced-index-offset</p><p class="s88" style="padding-top: 1pt;padding-left: 222pt;text-indent: 0pt;text-align: left;">:fatp</p><p class="s88" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">:extendable</p><p class="s88" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">:read-only-p</p><p class="s88" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">:displaced-to-base</p><p class="s8" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_202.png"/></span></p><p class="s31" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Limitations</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 107%;text-align: left;">limits on rank and total size of arrays (i.e., values of the constants) are:</p><p class="s19" style="padding-top: 9pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">array-rank-limit =&gt; <span class="s58">128</span></p><p class="s19" style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">array-dimension-limit=&gt; 65534</p><p class="s19" style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">array-total-size-limit =&gt; 65534</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_203.png"/></span></p><p class="s31" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Xerox Common <u>Lisp Examples</u></p><p style="text-indent: 0pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_204.png"/></span></p><p class="s17" style="padding-top: 8pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Degenerate Arrays</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;line-height: 109%;text-align: left;">There are two &quot;degenerate&quot; cases in making arrays, exemplified by the two following uses of make-array</p><p class="s19" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">1.(setq a (make-array nil))</p><p style="padding-top: 6pt;padding-left: 16pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The variable a is now bound to a zero dimensional (non-empty} array. Others might call it a scalar. Note that dimensions is a required argument to make-array, so the Nil is given explicitly. The following relations hold:</p><p class="s19" style="padding-top: 5pt;padding-left: 18pt;text-indent: 0pt;line-height: 150%;text-align: left;">(array-dimensions a)   <span class="p">returns   </span>nil (array-total-size   a)   <span class="p">returns </span>1 (array-rank  a)   <span class="p">returns 0</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_205.png"/></span></p><p class="s50" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">46                                         <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_206.png"/></span></p><p class="s88" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">ARRAYS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 227pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The array a has storage for a single element (of the default element-type, t), which may be accessed by:</p><p style="padding-top: 5pt;padding-left: 228pt;text-indent: 0pt;text-align: justify;">(aref a)</p><p style="padding-top: 5pt;padding-left: 258pt;text-indent: -30pt;text-align: justify;">Note: There are <span class="s84">no </span>indices, since a is zero dimensional.</p><p style="padding-top: 6pt;padding-left: 217pt;text-indent: 0pt;text-align: justify;">2.(setq b (make-array <span class="s57">&#39;(0)))</span></p><p style="padding-top: 6pt;padding-left: 227pt;text-indent: 0pt;text-align: justify;">The variable b is now bound to a one dimensional array, which has <span class="s84">no </span>elements. Others might call it an empty vector. The following relations hold:</p><p style="padding-top: 7pt;padding-left: 244pt;text-indent: 0pt;line-height: 160%;text-align: left;">( array-dimensions  b)   returns  <span class="s40">&#39;(O) </span>(array-dimension b  0)   returns 0 (array-total-size b) returns 0 (array-rank  b) returns 1</p><p style="padding-left: 227pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Thearrayhasnoassociatedstorage. (aref b i) is always an error regardless of the value of i, not because b is not one dimensional, but because the index i is always out of bounds.</p><p style="padding-top: 6pt;padding-left: 217pt;text-indent: 0pt;line-height: 107%;text-align: justify;">It is possible to make empty arrays of · high.er dimensions as well; for example, ·</p><p style="padding-top: 6pt;padding-left: 218pt;text-indent: 0pt;text-align: justify;">( setq c (make-:array &#39; <span class="s80">(2 </span>3 <span class="s3">4 0)))</span></p><p style="padding-top: 6pt;padding-left: 217pt;text-indent: 0pt;line-height: 107%;text-align: justify;">also creates an emp y array, with - no associated storage. ·</p><p style="padding-top: 6pt;padding-left: 217pt;text-indent: 0pt;line-height: 107%;text-align: justify;">In summary, there are two sorts of degenerate arrays-zero dimensional or scalar arrays, for which aref is not an error, and empty arrays, arrays with at least one zero in their dimensions lists, for which aref is always an error, because there is no associated storage.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_207.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_208.png"/></span></p></li><li><p class="s67" style="padding-left: 77pt;text-indent: -35pt;text-align: left;"><a name="a39">Array</a><span class="s66"> Access</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_209.png"/></span></p><p class="s15" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Limitations</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 107%;text-align: justify;">On page 291 in <i>Common Lisp: the Language </i>it states: &quot;In some implementations of Common Lisp svref may be faster than aref in situations where it is applicable.&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_210.png"/></span></p><p class="s12" style="padding-left: 43pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s50">47</span></p><p class="s12" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">ARRAYS</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_211.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 181pt;text-indent: 0pt;text-align: left;">In Xerox Common Lisp there is no speed advantage in using svref.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="2" alt="image" src="Image_212.png"/></span></p></li><li><p class="s10" style="padding-left: 41pt;text-indent: -35pt;text-align: left;"><a name="a40">Array</a><span class="s9"> Information</span></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_213.png"/></span></p><p class="s28" style="padding-top: 7pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">There are two additional predicates:</p><p class="s28" style="padding-top: 5pt;padding-left: 131pt;text-indent: 0pt;line-height: 142%;text-align: left;">( xcl:extendable-array-p <span class="s8">array) </span>for <span class="p">&amp;key ; </span>extendable ( xcl: read-only-array-p <span class="s8">array) </span>for &amp;key : read-only-p</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="2" alt="image" src="Image_214.png"/></span></p></li><li><p class="s9" style="padding-left: 40pt;text-indent: -34pt;text-align: left;"><a name="a41">Functions on </a><u>Arrays</u> of Bits</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_215.png"/></span></p><p class="s28" style="padding-top: 7pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">On page 293 of <span class="s8">Common Lisp: the Language </span>it states: &quot;In some implementations of Common Lisp, bit may be faster than aref in situations where it is applicable, and sbi <span class="s19">t </span>may be similarly faster than bit.&quot;</p><p class="s28" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">In Xerox Common Lisp, there is no speed advantage in using bit or sbi t.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="2" alt="image" src="Image_216.png"/></span></p></li><li><p class="s9" style="padding-left: 40pt;text-indent: -34pt;text-align: left;"><a name="a42">Fill Pointers</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_217.png"/></span></p><p class="s28" style="padding-top: 7pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">The default value of extension is the value of the special variable</p><p class="s28" style="padding-left: 181pt;text-indent: 0pt;line-height: 146%;text-align: left;">xcl:*default-push-extension-size* which is initially 20.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="2" alt="image" src="Image_218.png"/></span></p></li><li><p class="s10" style="padding-left: 40pt;text-indent: -34pt;line-height: 13pt;text-align: left;"><a name="a43">Changing</a><span class="s9"> the Dimensions of an </span>Array</p></li></ol></ol><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_219.png"/></span></p><p class="s17" style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Adjust-array-Additional &amp;key Arguments</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="585" height="1" alt="image" src="Image_220.png"/></span></p><p class="s28" style="padding-top: 7pt;padding-left: 181pt;text-indent: 0pt;text-align: center;">:fatp</p><p class="s28" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">(tor nil, defaults to nil). Affects storage allocation for arrays of element type string-char (strings). If t, storage is allocated to accomodate &quot;fat&quot; 16-bit <span class="s69">(NS) </span>characters. The default behavior is to allocate space for &quot;thin&quot; 8-bit characters. Fat characters can still be</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_221.png"/></span></p><p class="s75" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">48               <span class="s12">XEROX COMMON L!SP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_222.png"/></span></p><p class="s88" style="padding-top: 6pt;text-indent: 0pt;text-align: right;">ARRAYS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 220pt;text-indent: 0pt;text-align: justify;">stored into a thin string (the string is automatically fattened}, but it is more efficient to allocate it fat in the first place if it is known in advance that fat characters will be used.</p><p class="s19" style="padding-top: 9pt;padding-left: 221pt;text-indent: 0pt;text-align: justify;">:displaced-to-base <span class="s8">pointer</span></p><p class="s23" style="padding-top: 6pt;padding-left: 219pt;text-indent: 0pt;text-align: justify;"><span class="s8">pointer </span>is a bare pointer or memory address. Allows you to displace an array directly to a memory storage block {like the screen bit map}. Should usually be used with : <span class="s19">read-only-p t </span>to prevent unintended changes to the original storage block.</p><p class="s19" style="padding-top: 6pt;padding-left: 220pt;text-indent: 0pt;text-align: justify;">adjust-array <span class="s23">looks like (XCL extensions are in bold}:</span></p><p class="s19" style="padding-top: 6pt;padding-left: 75pt;text-indent: 0pt;text-align: left;">adjust-array      <span class="s8">array new-dimensions </span>&amp;key :element-type</p><p class="s19" style="padding-top: 2pt;padding-left: 303pt;text-indent: 0pt;text-align: left;">:initial-element</p><p class="s19" style="padding-top: 2pt;padding-left: 303pt;text-indent: 0pt;text-align: left;">:initial-contents</p><p class="s19" style="padding-top: 1pt;padding-left: 303pt;text-indent: 0pt;text-align: left;">:fill-pointer</p><p class="s19" style="padding-top: 2pt;padding-left: 303pt;text-indent: 0pt;text-align: left;">:displaced-to</p><p class="s8" style="padding-top: 6pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">Interpretation<span class="s15"> </span>of adjust-array</p><p class="s19" style="padding-top: 1pt;padding-left: 116pt;text-indent: 0pt;text-align: left;">:displaced-index-offset</p><p class="s41" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">:fatp</p><p class="s41" style="padding-top: 1pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">:displaced-to-base</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 32pt;text-indent: 0pt;text-align: justify;"><span class="s8">Common lisp: the Language </span>is obscure on exactly what <span class="s19">adjust-array </span>does. Caref I readiAg and discussions with Common Lisp implementors outside Xerox has led to the following interpretation.</p><p class="s23" style="padding-top: 6pt;padding-left: 32pt;text-indent: 0pt;text-align: justify;">The <span class="s19">adjust-array </span>function encounters three basic cases. These are listed in order of precedence, highest to lowest:</p><ul id="l34"><li><p class="s23" style="padding-top: 6pt;padding-left: 43pt;text-indent: -10pt;text-align: justify;">Change size</p><p class="s23" style="padding-top: 5pt;padding-left: 43pt;text-indent: 0pt;text-align: justify;">The array&#39;s total number of elements grows or shrinks and is copied to a new block of storage that the array is :displaced-to.</p></li><li><p class="s23" style="padding-top: 6pt;padding-left: 43pt;text-indent: -10pt;text-align: justify;">New displacement</p><p class="s23" style="padding-top: 5pt;padding-left: 43pt;text-indent: 0pt;text-align: justify;">If a displacement is provided, none of the original array contents appear in the resulting array.</p></li><li><p class="s23" style="padding-top: 6pt;padding-left: 43pt;text-indent: -10pt;text-align: left;">Undisplace an array</p></li></ul><p class="s23" style="padding-top: 6pt;padding-left: 43pt;text-indent: 0pt;text-align: justify;">If the original array was displaced to another array, then the original contents of the array disappear (since they are owned by the other array), and new storage of the appropriate size is created.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 46pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_223.png"/></span></p><p class="s12" style="padding-left: 46pt;text-indent: 0pt;text-align: left;">XEROX COM.MON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s75">49</span></p><p class="s72" style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">ARRAYS</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_224.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="text-indent: 0pt;text-align: right;">Interpretation of Standard &amp;key <u>Arguments</u> to <span class="s89">adjust-array</span></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_225.png"/></span></p><p class="s19" style="padding-top: 8pt;text-indent: 0pt;text-align: right;">: element-type <span class="s8">type-specifier</span></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Does not change the type of elements in the array. Rather, it signals an error if the array could not hold elements of this type.</p><p class="s19" style="padding-top: 5pt;padding-left: 151pt;text-indent: 0pt;text-align: left;">: initial-element <span class="s8">object</span></p><p style="padding-top: 7pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Causes the newly adjusted array to have this element in all positions not otherwise filled.</p><p class="s19" style="padding-top: 5pt;padding-left: 151pt;text-indent: 0pt;text-align: left;">: fill-pointer <span class="s8">integer-or-t</span></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The array being adjusted must be one-dimensional and have a fill pointer. If the value is <span class="s19">t </span>the fill pointer is set to the length of the vector, otherwise it must be an integer between zero and the size of the vector, inclusive.</p><p class="s19" style="padding-top: 5pt;padding-left: 151pt;text-indent: 0pt;text-align: left;">: initial-contents <span class="s8">nested-sequences</span></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Causes the newly adjusted array to have this as its contents.</p><p class="s19" style="padding-top: 5pt;padding-left: 151pt;text-indent: 0pt;text-align: left;">:displaced-to array</p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 109%;text-align: justify;">Causes the adjusted array to be a displaced array, one whose storage is shared with the given array.</p><p class="s19" style="padding-top: 5pt;padding-left: 151pt;text-indent: 0pt;text-align: left;">:displaced-index-offset <span class="s8">integer</span></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Is a positive integer specifying the linear offset from the beginning of the &quot;displaced to&quot; array&#39;s elements, where this array will begin its addressing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_226.png"/></span></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="a44">An Extension to Common </a><u>Lisp-The Array Inspector</u></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_227.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Inspecting Arrays</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_228.png"/></span></p><p style="padding-top: 4pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: left;">Xerox Common Lisp provides you with a way to examine the contents of arrays-the Array Inspector.</p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: left;">For example if you define an array a as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_229.png"/></span></p><p class="s50" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">50                                                                          <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s88" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">ARRAYS</p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_230.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 110pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(setq a (make-array &#39;(4 2 3) :initial-contents</p><p class="s57" style="padding-left: 233pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&#39;(((ab c) (1 2 3))</p><p class="s57" style="padding-left: 232pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((def) (31 2))</p><p class="s57" style="padding-left: 234pt;text-indent: 0pt;line-height: 11pt;text-align: left;">((g hi) (2 3 1))</p><p class="s57" style="padding-left: 234pt;text-indent: 0pt;line-height: 11pt;text-align: left;">((j <span class="s56">k 1) (0 0 0))))</span></p><p class="s23" style="padding-top: 3pt;padding-left: 203pt;text-indent: 0pt;text-align: justify;">You can call the array inspector, with inspect a, to examine the contents of the array. The array inspector has two windows: a header information window and a content display window attached on the left. These two windows work in conjuction to display a slice of an array.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="332" height="153" alt="image" src="Image_231.png"/></span></p><p class="s64" style="text-indent: 0pt;line-height: 21pt;text-align: left;">t</p><p style="text-indent: 0pt;text-align: left;"/><p class="s90" style="text-indent: 0pt;line-height: 4pt;text-align: left;">I</p><p style="text-indent: 0pt;text-align: left;"/><p class="s90" style="text-indent: 0pt;line-height: 4pt;text-align: left;">. I</p><p style="text-indent: 0pt;text-align: left;"/><p class="s90" style="text-indent: 0pt;line-height: 4pt;text-align: left;">•</p><p style="text-indent: 0pt;text-align: left;"/><p class="s2" style="text-indent: 0pt;line-height: 28pt;text-align: left;">- <span class="s91">.  </span><span class="s92">.</span>- -</p><p style="text-indent: 0pt;text-align: left;"/><p class="s89" style="text-indent: 0pt;line-height: 11pt;text-align: left;">0-••</p><p style="text-indent: 0pt;text-align: left;"/><p class="s7" style="text-indent: 0pt;line-height: 11pt;text-align: left;">0 <span class="s40">1 </span>2</p><p style="text-indent: 0pt;text-align: left;"/><p class="s90" style="padding-left: 14pt;text-indent: 0pt;line-height: 3pt;text-align: left;">I          I      I</p><p class="s17" style="text-indent: 0pt;line-height: 20pt;text-align: left;">!SH0¥1 <span class="s93">iAPPLYI </span></p><p class="s47" style="padding-left: 1pt;text-indent: 0pt;line-height: 112%;text-align: left;">El ement-t Jpe: Rank.: Dimension: Levels:</p><p class="s19" style="padding-top: 2pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Shor.-m:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s15" style="padding-left: 1pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T</p><p class="s19" style="text-indent: 0pt;line-height: 11pt;text-align: left;">3</p><p class="s94" style="text-indent: 0pt;line-height: 14pt;text-align: left;">e</p><p class="s31" style="text-indent: 0pt;line-height: 10pt;text-align: left;">4</p><p class="s95" style="text-indent: 0pt;line-height: 22pt;text-align: left;">Li</p><p style="text-indent: 0pt;text-align: left;"/><p class="s89" style="text-indent: 0pt;line-height: 11pt;text-align: left;">1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s47" style="text-indent: 0pt;line-height: 11pt;text-align: left;">2</p><p style="text-indent: 0pt;text-align: left;"/><p class="s47" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">2      <span class="s19">3</span></p><p class="s93" style="text-indent: 0pt;line-height: 20pt;text-align: left;">IALL<span class="s64">I </span>iALL<span class="s64">I</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s7" style="padding-left: 7pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0</p><p class="s40" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s44" style="text-indent: 0pt;line-height: 7pt;text-align: left;">.:,</p><p style="text-indent: 0pt;text-align: left;"/><p class="s40" style="text-indent: 0pt;line-height: 16pt;text-align: left;">.<span class="s96">C</span>...</p><p style="text-indent: 0pt;text-align: left;"/><p class="s47" style="padding-left: 1pt;text-indent: 0pt;line-height: 11pt;text-align: left;">A <span class="p">B</span></p><p class="s40" style="text-indent: 0pt;line-height: 11pt;text-align: left;">1 2</p><p style="text-indent: 0pt;text-align: left;"/><p class="s2" style="padding-top: 8pt;padding-left: 180pt;text-indent: 0pt;text-align: center;">display contents window</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-top: 4pt;padding-left: 303pt;text-indent: 0pt;text-align: left;">header information window</p><p class="s23" style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;text-align: justify;">The header information window displays the element type, total size, rank, and dimensionality of the array and controls which slice of the array&#39;s contents is shown in the contents display window. An array slice is determined by a set of restrictions on all the dimensions of the array. Selecting SHOW will display, in the header information window, the set of restrictions that describe· the array slice being displayed in the contents window.</p><p class="s23" style="padding-top: 5pt;padding-left: 204pt;text-indent: 0pt;text-align: justify;">The restriction can be ALL {meaning &quot;show every element of that dimension&quot;), or some integer less than the value of that dimension of the array. If you want to change the slice being displayed you must change the restrictions that define which slice is displayed. To do this, move the cursor into one of the boxes on the line labeled &quot;Shown:&quot; and press the left mouse button. A small menu will pop up with the choices available for that dimension. For dimension 0</p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="71" alt="image" src="Image_232.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="75" alt="image" src="Image_233.png"/></span></p><p class="s42" style="padding-top: 1pt;padding-left: 435pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="a45">ALL</a></p><p class="s61" style="padding-left: 435pt;text-indent: 0pt;line-height: 8pt;text-align: left;">!)</p><p class="s40" style="padding-top: 1pt;padding-left: 435pt;text-indent: 0pt;text-align: left;">1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-top: 4pt;padding-left: 205pt;text-indent: 0pt;text-align: left;">In the example above this menu looks like: 3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_234.png"/></span></p><p class="s29" style="padding-top: 1pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                       51</p><p class="s97" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">ARRAYS &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 182pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Select the new value for that dimension then, if you wish, you may change the values for the other dimensions in the same way.</p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After you have changed the restrictions for the dimensions selecting APPLY will cause the newly defined array  slice to be displayed in the contents display window.</p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: left;">Imagining the three-dimensional array to be a series of  planes,  rows  and  columns,  the  above  inspector shows  a slice  of  the  array  created  in  the  example above.    To get this slice you would APPLY the restrictions:</p><p style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;line-height: 160%;text-align: left;">plane rows columns</p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 160%;text-align: left;">(dimension O)    set to 0 (dimension <span class="s47">1)    </span>set to ALL (dimension <span class="s7">2)  </span>set to ALL</p><p style="text-indent: 0pt;text-align: left;"><span><img width="104" height="59" alt="image" src="Image_235.png"/></span></p><p style="padding-left: 1pt;text-indent: 1pt;line-height: 92%;text-align: left;">ln5pect Set Indices</p><p class="s20" style="padding-left: 1pt;text-indent: 0pt;line-height: 11pt;text-align: left;">IT..- Selection</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The contents display window is capable of  showing either a two- or one- or zero-dimensional slice of an array. The window is scrollable. A particular datum in the contents display may be selected with the left mouse button. After you select the datum, pressing the middle button in the contents display will pop up a menu that looks like:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This menu allows you to Inspect the datum, display the indices of the datum (in the box attached to the bottom of the header information window), set this position&#39;s value, or bind <span class="s40">il: it </span>to the selected datum.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_236.png"/></span></p><p class="s50" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">52                                                                           <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s72" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">STRUCTURES</p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_237.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 6pt;padding-bottom: 2pt;padding-left: 203pt;text-indent: 0pt;text-align: justify;"><a name="a46">CHAPTER 19 STRUCTURES</a></p><p style="padding-left: 204pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="346" height="7" alt="image" src="Image_238.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_239.png"/></span></p><p class="s9" style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><a name="a47">19.1. Introduction to Structures</a></p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="586" height="1" alt="image" src="Image_240.png"/></span></p><p style="padding-top: 8pt;padding-left: 204pt;text-indent: 0pt;text-align: justify;">Empty structures {those with no slots} are supported.</p><p style="padding-top: 7pt;padding-left: 203pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><i>Common Lisp: the Language </i>explicitly states that accessors, constructors, etc. are added to the current package, not the package containing the name of the structure. Xerox Common Lisp follows this standard. Also, accessors, constructors, etc., are defined as inline functions. If you don&#39;t want this behavior, Xerox Common Lisp provides an extension to the language that allows ( : <span class="s41">inline nil) </span>in the argument list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="2" alt="image" src="Image_241.png"/></span></p><p class="s9" style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><a name="a48">19.4. Defstruct </a><u>Slot-Options</u></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_242.png"/></span></p><p class="s41" style="padding-top: 11pt;padding-left: 204pt;text-indent: 0pt;text-align: left;">:type</p><p style="padding-top: 5pt;padding-left: 204pt;text-indent: 0pt;line-height: 107%;text-align: left;">No type-checking is done on typed slots when the slots contents are replaced.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_243.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_244.png"/></span></p><p class="s9" style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><a name="a49">9.5. Defstruct </a><u>Options</u></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 108%;text-align: justify;">The default structure type is unspecified in <i>Common Lisp: the Language. </i>Xerox Common lisp uses the system datatype facilities and its microcode support.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 29pt;text-indent: 0pt;text-align: left;">:cone-name</p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 107%;text-align: justify;">While it is not made explicitly legal Common <i>Lisp: The Language </i>suggests that cone-names can be strings. Xerox Common Lisp supports that interpretation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 29pt;text-indent: 0pt;text-align: left;">:print-function</p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 109%;text-align: justify;">In Xerox Common Lisp print functions are inherited. You can override this by specifying a print-function of <span class="s41">nil </span>for the subtype.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">:include</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_245.png"/></span></p><p class="s12" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                                <span class="s75">53</span></p><p class="s54" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">STRUCTURES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Xerox <span class="p">Common Lisp does check for the incorrect use of access functions, by checking the type of the argument. Moreover, slot descriptions that are specified using : include are type-checked to ensure that the &quot;shadowed&quot; slot is a supertype of the new slot type. This is done in such a way that the resulting error is continuable, so that the user can disagree with subtypep.</span></p><p style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">An error is signaled if you &quot;shadow&quot; a slot name other than <span class="s28">by </span>using the include option. For instance,</p><p style="padding-top: 6pt;padding-left: 110pt;text-indent: 0pt;text-align: left;">(defstruct super a)</p><p style="padding-top: 7pt;padding-left: 181pt;text-indent: -70pt;line-height: 159%;text-align: left;">(defstruct (sub (:include super)) (a 3) b) is not legal, but the following is:</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">(defstruct (sub (:include super (a 3)) b)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Non-Standard Options</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 38pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Our version of defstruct accepts a non-standard option, the : inline option, with the following syntax:</p><p style="padding-top: 6pt;padding-left: 50pt;text-indent: 0pt;text-align: justify;">(: inline <i>categories)</i></p><p class="s8" style="padding-top: 7pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">categories <span class="p">can be any of the following:</span></p><p style="padding-top: 6pt;padding-left: 39pt;text-indent: -28pt;line-height: 107%;text-align: left;">nil     don&#39;t make optimizers for any defstruct-generated functions</p><p style="padding-top: 6pt;padding-left: 38pt;text-indent: -15pt;line-height: 107%;text-align: left;">t    make optimizers for the default set of categories, (:accessor :predicate)</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">a <span class="s28">list </span>should contain only items from the following:</p><p style="padding-top: 7pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">:accessor</p><p style="padding-top: 6pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">:copier</p><p style="padding-top: 6pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">:predicate</p><p style="padding-top: 7pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">:boa-constructor</p><p style="padding-top: 6pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">:constructor</p><p style="padding-top: 7pt;padding-left: 39pt;text-indent: 0pt;line-height: 106%;text-align: justify;">and means to make optimizers for just the set of defstruct-generated functions in the categories given.</p><p style="padding-top: 6pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">The    default     is  t,  or  the  list     ( :accessor</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">:predicate).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_246.png"/></span></p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">54                                                                      <span class="s12">XEROX COMMON LISP IMPLEMENT A TiON NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="text-indent: 0pt;text-align: right;">STRUCTURES</p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="586" height="1" alt="image" src="Image_247.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 7pt;text-indent: 0pt;text-align: right;">xcl:*print-structure*                                                             <span class="s52">[Variable]</span></p><p class="s28" style="padding-top: 5pt;text-indent: 0pt;line-height: 12pt;text-align: right;">Structures    of    types    without     a     user-specified</p><p class="s28" style="padding-left: 208pt;text-indent: 1pt;text-align: justify;">:print-function normally print using the JS syntax described in <span class="s52">Common Lisp, the Language. </span>For example, a structure of type foo with slots a and b would print as follows:</p><p class="s28" style="padding-top: 6pt;padding-left: 219pt;text-indent: 0pt;text-align: justify;">JS(foo a nil b nil)</p><p class="s28" style="padding-top: 5pt;padding-left: 207pt;text-indent: 0pt;text-align: justify;">It is sometimes desirable, especially for structures with a large number of slots or with slot names in another package, to be able to use a more concise printing syntax, such as the following:</p><p class="s28" style="padding-top: 5pt;padding-left: 219pt;text-indent: 0pt;text-align: justify;">#&lt;foo@ 52,14306&gt;</p><p class="s28" style="padding-top: 5pt;padding-left: 208pt;text-indent: 0pt;text-align: justify;">In Xerox Lisp, the variable xcl:_*pr int-structure* provi_des this flexibility. If xcl:*print-structure* is non-nil, structures of types without a user-specified :print-function will print using the JS syntax. Otherwise, those structures print using the more concise syntax shown above.</p><p class="s28" style="padding-top: 5pt;padding-left: 207pt;text-indent: 1pt;text-align: justify;">Note that xcl:*print-structure* is normally only examined by the default :pr int-function, though, of course, users writing their own</p><p class="s28" style="padding-left: 207pt;text-indent: 1pt;text-align: justify;">:print-functions may choose also to assign some similar semantics to it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_248.png"/></span></p><p class="s12" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s2">55</span></p><p class="s12" style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">STRUCTURES</p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_249.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 152pt;text-indent: 0pt;text-align: center;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_250.png"/></span></p><p class="s75" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">56                 <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s5" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">STREAMS</p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="584" height="1" alt="image" src="Image_251.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-bottom: 2pt;padding-left: 227pt;text-indent: 0pt;text-align: left;"><a name="a50">CHAPTER 21             STREAMS</a></p><p style="padding-left: 227pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="348" height="7" alt="image" src="Image_252.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="577" height="2" alt="image" src="Image_253.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_254.png"/></span></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="a51">Xerox </a><u>Lisp</u> Extensions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">The following functions have heen added to Xerox Common Lisp.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_255.png"/></span></p><p class="s18" style="padding-top: 4pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Predicates</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">xcl:synonym-stream-p stream</p><p class="s23" style="padding-top: 6pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">Returns <span class="s19">t </span>if <span class="s8">stream </span>is <span class="s8">a </span>synonym stream.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 15pt;text-indent: 0pt;text-align: left;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">xcl:broadcast-stream-p     <span class="s8">stream                                            [Function]</span></p><p class="s23" style="padding-top: 6pt;padding-left: 226pt;text-indent: 0pt;text-align: left;">Returns <span class="s19">t </span>if <span class="s8">stream </span>is <span class="s8">a </span>broadcast stream.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">xcl:concatenated-stream-p       <span class="s8">stream                                        [Function]</span></p><p class="s23" style="padding-top: 5pt;padding-left: 226pt;text-indent: 0pt;text-align: left;">Returns <span class="s28">t </span>if <span class="s8">stream </span>is a concatenated stream.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">xcl: two-way-stream-p <span class="s8">stream</span></p><p class="s23" style="padding-top: 5pt;padding-left: 226pt;text-indent: 0pt;text-align: left;">Returns <span class="s28">t </span>if <span class="s8">stream </span><span class="s98">is a </span>two-way stream.</p><p class="s28" style="padding-top: 11pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">xcl:echo-strearn-p <span class="s8">stream</span></p><p class="s23" style="padding-top: 6pt;padding-left: 226pt;text-indent: 0pt;text-align: left;">Returns t if <span class="s8">stream </span>is an echo stream.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">xcl :open-stream-p <span class="s8">stream</span></p><p class="s23" style="padding-top: 6pt;padding-left: 226pt;text-indent: 0pt;text-align: left;">Returns <span class="s28">t </span>if <span class="s8">stream </span>is an open stream.</p><p class="s8" style="padding-top: 5pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 6pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_256.png"/></span></p><p class="s18" style="padding-top: 4pt;padding-left: 51pt;text-indent: 0pt;text-align: left;"><a name="a52">Accessors</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">xcl:synonym-stream-symbol    <span class="s8">stream                                        </span>[Function]</p><p class="s23" style="padding-top: 6pt;padding-left: 127pt;text-indent: 0pt;text-align: left;">Returns the symbol for which <span class="s8">stream </span>is a synonym stream.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">xcl: broadcast-stream-streams <span class="s8">stream                                </span>[Function]</p><p class="s23" style="padding-top: 6pt;padding-left: 226pt;text-indent: 0pt;text-align: left;">Returns the streams <span class="s47">(if </span>any) that the broadcast stream</p><p class="s8" style="padding-left: 226pt;text-indent: 0pt;text-align: left;">stream <span class="s23">broadcasts to.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">xcl    :concatenated-stream-streams    <span class="s8">stream                             [Function]</span></p><p class="s23" style="padding-top: 6pt;padding-left: 226pt;text-indent: 0pt;text-align: left;">If <span class="s8">stream </span>is a concatenated stream, returns its remaining input streams.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_257.png"/></span></p><p class="s29" style="padding-top: 29pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                       <span class="s99">57</span></p><p class="s12" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">STREAMS</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_258.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 66pt;text-indent: 0pt;text-align: center;">xcl: two-way-stream-input-st ream  <span class="s76">stream                           </span><span class="s60">[Function]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 182pt;text-indent: 0pt;text-align: left;">Returns the two-way stream <span class="s76">stream&#39;s </span>input side.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 66pt;text-indent: 0pt;text-align: center;">xcl: two-way-stream-output-st ream  <span class="s76">stream                         </span><span class="s60">[Function]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 182pt;text-indent: 0pt;text-align: left;">Returns the two-way stream <span class="s76">stream&#39;s </span>output side.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:echo-stream-input-stream <span class="s76">stream</span></p><p class="s28" style="padding-top: 5pt;padding-left: 182pt;text-indent: 0pt;text-align: left;">Returns the echo stream <span class="s76">stream&#39;s </span>input side.</p><p class="s28" style="padding-top: 11pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:echo-stream-output-stream <span class="s76">stream</span></p><p class="s60" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s60" style="padding-top: 8pt;text-indent: 0pt;text-align: left;">[Function]</p><p class="s28" style="padding-top: 5pt;padding-left: 182pt;text-indent: 0pt;text-align: left;">Returns the echo stream <span class="s76">stream&#39;s </span>output side.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_259.png"/></span></p><p class="s17" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Ambiguities</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Cautions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">close specifies that the : abort option attempts to clean things up, to whatever extent is possible. In XCL, if the stream was open for output to a file, the file is deleted.</p><p class="s28" style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">close of a synonym or broadcast stream has no effect on the underlying stream(s).</p><p class="s28" style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">strearnp returns its argument rather than t.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_260.png"/></span></p><p class="s28" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If  you  pass a  string  containing  fat  NS characters  to make-string-input-stream,    the   value     of file-position for the stream will be wrong (off by a factor of 2). Similarly, if you read from a fat string using with-input-from-string with the : index option, the index variable will be off by a factor of 2.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_261.png"/></span></p><p class="s100" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">58                                                                      <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="text-indent: 0pt;text-align: right;">INPUT/OUTPUT</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_262.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: left;">CHAPTER 22               INPUT/OUTPUT</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="343" height="6" alt="image" src="Image_263.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_264.png"/></span></p><p class="s69" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="a53">Ambiguities</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The reader. interprets the &quot;potential number&quot; of the form &lt;octal digits&gt;Q as an octal integer (same as #o&lt;octal digits&gt;), for compatibility with Interlisp. A potential number that is entirely numeric digits but illegal (e.g., &quot;89&quot; when <span class="s19">*read-base* </span>is 8) signals an error. All other potential numbers are taken to be symbols, without signalling an error.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="a54">Section 22.1.3. Macro Characters</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_265.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The back-quote facility does not go to any trouble to create fresh list-structures unless it is necessary to do so. Thus, for example,</p><p class="s56" style="padding-top: 4pt;padding-left: 180pt;text-indent: 0pt;text-align: center;">&#39;(l 2 3)</p><p style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">is equivalent to</p><p class="s101" style="padding-top: 4pt;padding-left: 180pt;text-indent: 0pt;text-align: center;">I      ( <span class="s58">1   2 3)</span></p><p style="padding-top: 5pt;padding-left: 84pt;text-indent: 0pt;text-align: center;">not</p><p class="s19" style="padding-top: 3pt;padding-left: 180pt;text-indent: 0pt;text-align: center;">(list 1 2 3)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="a55">Cautions</a></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Users needing to avoid sharing structure should use explicit calls to <span class="s19">list </span>or<span class="s19">copy-tree.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_266.png"/></span></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 109%;text-align: left;">In this release, comma does not signal an error if used outside a backquote expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="a56">Section 22.1.4. Standard </a><u>Dispatching</u> Macro Character Syntax</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_267.png"/></span></p><p style="padding-top: 3pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">In <span class="s23">f+ </span>and <span class="s28">#- </span>reader macros, the default package of symbols in the features expression is <span class="s19">keyword. </span>You can, of course, override the default by explicitly specifying package prefixes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_268.png"/></span></p><p class="s29" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                          <span class="s102">59</span></p><p class="s3" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">INPUT/OUTPUT</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_269.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_270.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_271.png"/></span></p><p class="s31" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;line-height: 183%;text-align: left;">Section 22.1.6. What the Print Function Produces Cautions</p><p class="s19" style="padding-top: 3pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">*print-circle*                                                                     <span class="s60">[Variable]</span></p><p class="s19" style="padding-top: 9pt;padding-left: 215pt;text-indent: 0pt;text-align: left;">*pr int-circle* <span class="s23">cannot be used to print large data structures containing more than 32K pointers.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Section 22.3.1. <u>Output</u> to Character Streams</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_272.png"/></span></p><p class="s19" style="padding-top: 4pt;padding-left: 214pt;text-indent: 0pt;text-align: left;">finish-output <span class="s23">is equivalent to </span>force-output <span class="s23">for some kinds of network stream (it merely empties the stream&#39;s buffers, without assuring secure arrival at its destination).</span></p><p class="s19" style="padding-top: 6pt;padding-left: 215pt;text-indent: 0pt;text-align: left;">clear-output <span class="s23">is a no-op.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Section 22.3.3 <span class="s47">. </span>Formatted <u>Output</u> to Character Streams</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_273.png"/></span></p><p class="s31" style="padding-top: 8pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">Cautions</p><p style="padding-left: 39pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_274.png"/></span></p><p class="s23" style="padding-top: 4pt;padding-left: 214pt;text-indent: 0pt;text-align: justify;">The method to be used to distribute justification pad characters in the <span class="p">&lt; </span>format directive is not defined. <span class="s15">XCL </span><span class="s103">uses </span>a random distribution function. Note that this makes text look good, but any tables that happen to be justified will not line up.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 39pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_275.png"/></span></p><p class="s104" style="padding-top: 1pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">60               <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 6pt;text-indent: 0pt;text-align: right;">FILE SYSTEM INTERFACE</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_276.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 5pt;text-indent: 0pt;text-align: center;"><a name="a57">CHAPTER 23</a></p><p class="s1" style="padding-left: 259pt;text-indent: 0pt;text-align: center;">FILE SYSTEM INTERFACE</p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="344" height="6" alt="image" src="Image_277.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_278.png"/></span></p><p class="s53" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Ambiguities</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_279.png"/></span></p><p class="s31" style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Additional Features/Improvements</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Limitations</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 107%;text-align: justify;">load and compile-file require that Common Lisp plain text files, which must begin with a semi-colon to distinguish themselves from Interlisp source files. Plain text files are to be read in the package user (but see</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">: package keyword below).</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Namestring is defined to be of the form:</p><p class="s56" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">{HOST}DEVICE:&lt;DIR&gt;SUBDIR&gt;SUBDIR&gt;NAME.EXT; VERSION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The default value of *load-verbose* <b>is </b>t, meaning the file name and possibly other information is printed when the file is loaded.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;line-height: 107%;text-align: justify;">load accepts an additional keyword, : package, whose value must be a package. load binds</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 106%;text-align: justify;">*package* to this value while reading the file. In the case of files produced by the Xerox Lisp File Manager, the value overrides the package specified in the file&#39;s makefile environment.</p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 1pt;text-align: justify;">:wild is defined to be the same as a <span class="s71">* </span>in a namestring.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_280.png"/></span></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The following optional values have been implemented for version numbers: :oldest. No other keywords are allowed out of the list shown in Steele&#39;s Common <i>Lisp: the Language.</i></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;line-height: 107%;text-align: justify;">load makes no attempt to fill indefault extensions on files.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 106%;text-align: left;">XCL only supports 8-bit files.  open accepts as values for  the  : element-type keyword only the following values   :string-char, character, :default, and unsigned-byte.  The first three are all  equivalent and    produce     files     of     type     &quot;text&quot;,    while unsigned-byte produces a file of type &quot;binary&quot;.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_281.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">XEROX COMMON L!SP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                           <span class="s105">61</span></p><p class="s54" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">FILE <span class="s106">SYSTEM INTERFACE &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-top: 5pt;padding-left: 158pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_282.png"/></span></p><p class="s107" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">62                                                                          <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 4pt;text-indent: 0pt;text-align: right;"><a name="bookmark5">ERROR SYSTEM</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_283.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-bottom: 2pt;padding-left: 196pt;text-indent: 0pt;text-align: justify;"><a name="a58">CHAPTER 24 ERROR SYSTEM</a></p><p style="padding-left: 196pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="344" height="6" alt="image" src="Image_284.png"/></span></p><p style="padding-top: 11pt;padding-left: 196pt;text-indent: 0pt;text-align: justify;">This chapter replaces most of Chapter 24, Errors, of</p><p class="s8" style="padding-left: 196pt;text-indent: 0pt;text-align: justify;">Common Lisp, the Language.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 196pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Xerox Common Lisp error system  is based on proposal number 8 for the Common Lisp error system. Deviations from this proposal are noted. In particular, proceeding and proceed functions are more like those in an earlier proposal. Since the Common Lisp error system has not yet been standardized, this system may change in future releases to accommodate the final version of the Common Lisp error system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="2" alt="image" src="Image_285.png"/></span></p><p class="s9" style="padding-left: 20pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="a59">Introduction to Error </a><u>System Terminology</u></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_286.png"/></span></p><p class="s8" style="padding-top: 8pt;padding-left: 196pt;text-indent: -55pt;line-height: 107%;text-align: justify;">condition <span class="p">A </span>condition <span class="p">is a kind of object which is created when an exceptional situation arises in order to represent the relevant features of that situation.</span></p><p class="s8" style="padding-top: 9pt;padding-left: 196pt;text-indent: -85pt;line-height: 107%;text-align: justify;">signal, handlers <span class="p">Once a condition is created, it is common to </span>signal <span class="p">it. When a condition is signaled, a set of </span>handlers <span class="p">are tried in some pre-defined order until one decides to </span>handle <span class="p">the condition or until no more handlers are found. A condition is said to have been handled if a handler performs a non-local transfer of control to exit the signalling process.</span></p><p style="padding-top: 9pt;padding-left: 196pt;text-indent: -48pt;text-align: justify;"><i>proceed </i>Although such transfers of control may be done directly using traditional Lisp mechanisms such as <span class="s19">catch </span>and <span class="s19">throw, block </span>and <span class="s19">return, </span>or <span class="s19">tagbody </span>and <span class="s19">go, </span>the condition system also provides a more structured way to <i>proceed </i>from a condition. Among other things, the use of these structured primitives for proceeding allow a better and more integrated relationship between the user program and the interactive debugger.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 197pt;text-indent: -96pt;line-height: 106%;text-align: justify;">serious conditions <span class="p">It is not necessary that all conditions be handled. Some conditions are trivial enough that a failure to handle them may be disregarded. Others, which we</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_287.png"/></span></p><p class="s12" style="padding-top: 33pt;padding-left: 21pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s108">63</span></p><p class="s49" style="padding-top: 3pt;padding-left: 14pt;text-indent: 0pt;text-align: left;">ERROR SYSTEM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-top: 6pt;padding-left: 189pt;text-indent: 0pt;text-align: justify;">will call <i>serious conditions </i>must be handled in order to assure correct program behavior. If a serious condition is signalled but no handler is found, the debugger will be entered so that the user may interactively specify how to proceed.</p><p class="s52" style="padding-top: 9pt;padding-left: 189pt;text-indent: -37pt;text-align: justify;">errors <span class="s23">Serious conditions which result from incorrect programs or data are called </span>errors. <span class="s23">Not all serious conditions are errors, however. Storage conditions are examples of serious conditions that are not errors. For example, the control stack may legitimately overflow without a program being in error. Even though a stack overflow is not necessarily a program error, it is serious enough to warrant entry to the debugger if the condition goes unhandled.</span></p><p class="s23" style="padding-top: 9pt;padding-left: 189pt;text-indent: 0pt;text-align: justify;">Some types of conditions are predefined by the system. All types of conditions are subtypes of <span class="s19">xcl:condition. </span>That is,</p><p class="s19" style="padding-top: 3pt;padding-left: 201pt;text-indent: 0pt;text-align: left;">(typep c &#39;xcl:condition)</p><p class="s23" style="padding-top: 6pt;padding-left: 189pt;text-indent: 0pt;text-align: justify;">is true if c is a condition.</p><p class="s23" style="padding-top: 9pt;padding-left: 189pt;text-indent: -101pt;text-align: justify;"><i>creating conditions </i>The only standard way to define a new condition type is <span class="s19">xcl :define-condition. </span>The only standard way to instantiate a condition is <span class="s19">xcl :rnake-condi tion.</span></p><p class="s23" style="padding-top: 9pt;padding-left: 189pt;text-indent: 0pt;text-align: justify;">When a condition object is created, the most common operation to be performed upon it is to <i>signal </i>it (although there may be applications in which this does not happen, or does not happen immediately}.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 189pt;text-indent: 0pt;text-align: justify;">When a condition is signaled, the system tries to locate the most appropriate handler for the condition and invoke that handler. Handlers are located according to the following rules:</p><p class="s52" style="padding-top: 9pt;padding-left: 148pt;text-indent: 0pt;text-align: left;">bound <span class="s23">• Check for locally defined (ie, </span>bound) <span class="s23">handlers.</span></p><ul id="l35"><li><p class="s23" style="padding-top: 8pt;padding-left: 200pt;text-indent: -10pt;text-align: justify;">If no appropriate bound handler is found, check first for the default handler of the signalled type and then of each of its superiors.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s52" style="padding-left: 190pt;text-indent: -44pt;text-align: justify;">decline <span class="s23">If an appropriate handler is found, the handler may </span>decline <span class="s23">by simply returning without performing a non-local transfer of control. In such cases, the search for an appropriate ha.ndler is picked up where it left off, as if the called handler had never been present. When a handler is running, the &quot;handler binding stack&quot; is popped back to just below the binding that caused that handler to be invoked. This is done to</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 15pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_288.png"/></span></p><p class="s29" style="padding-left: 15pt;text-indent: 0pt;text-align: left;">64                                                                                XEROX COMON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</p><p class="s12" style="padding-top: 5pt;text-indent: 0pt;text-align: right;">ERROR SYSTEM</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_289.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: left;">avoid infinite recursion in the case that a handler also signals a condition.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 181pt;text-indent: -109pt;line-height: 90%;text-align: justify;">xcl:handler-bind <span class="p">When a condition is signaled, handlers are searched for in the dynamic environment of the signaller. Handlers can be established within a dynamic context by use of </span>xcl: handler-bind.</p><p class="s8" style="padding-top: 8pt;padding-left: 180pt;text-indent: -47pt;line-height: 107%;text-align: justify;">handler <span class="p">A </span>handler <span class="p">is a function of one argument, the condition to be handled. The handler may inspect the object (using primitives described in another section} to be sure it is interested in handling the condition. After inspecting the condition, the handler must take one of the following actions:</span></p><ul id="l36"><li><p style="padding-top: 9pt;padding-left: 191pt;text-indent: -10pt;line-height: 106%;text-align: left;">It may decline to handle the condition, by simply returning. When this happened, the returned values are ignored and the effect is the same as if the handler had been invisible to the mechanism seeking to find a handler. The next handler in line will be tried, or if no such handler exists, the default action for the given condition will be taken. A default handler may also decline, in which case the condition will go unhandled. What happens then depends on which function was used to signal the condition <span class="s19">(xcl: signal, error, cerror, warn).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 191pt;text-indent: -10pt;text-align: justify;">It may perform some non-local transfer of control using <span class="s19">go, return, throw, abort, </span>or <span class="s19">xcl:invoke-proceed-case.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 191pt;text-indent: -10pt;text-align: left;">It may signal another condition.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 191pt;text-indent: -10pt;text-align: left;">It may invoke the interactive debugger.</p></li></ul><p style="padding-top: 9pt;padding-left: 181pt;text-indent: -109pt;text-align: justify;"><span class="s19">xcl: proceed-case </span>When a condition is signaled, a facility is available for use by handlers to non-locally transfer control to an outer dynamic contour of the program. The form which creates contours that may be returned to is called <span class="s19">xcl: proceed-case. </span>Each contour is set up by an <span class="s19">xcl:proceed-case </span>clause, and is called a <i>proceed case. </i>The function that transfers control to a proceed case is called <span class="s19">xcl: invoke-proceed-case.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: -92pt;text-align: justify;"><i>proceed function </i>Also, control may be transferred along with parameters to a named <span class="s19">xcl: proceed-case </span>clause by invoking a <i>proceed function </i>of that name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 181pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Proceed functions <span class="p">are created with the macro</span></p><p class="s19" style="padding-left: 181pt;text-indent: 0pt;line-height: 11pt;text-align: left;">xcl:define-proceed-function.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_290.png"/></span></p><p class="s12" style="padding-top: 46pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s100">65</span></p><p class="s72" style="padding-top: 4pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">ERROR <span class="s12">SYSTEM</span></p><p style="padding-left: 57pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="0" height="0" alt="image" src="Image_291.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 4pt;padding-left: 232pt;text-indent: -72pt;line-height: 107%;text-align: justify;">proceed type <span class="p">A proceed case with a particular name, or a particular set of proceed cases that share an interface defined by a </span>proceed function, <span class="p">are sometimes called a </span>proceed type.</p><p class="s8" style="padding-top: 9pt;padding-left: 232pt;text-indent: -40pt;line-height: 107%;text-align: justify;">report    <span class="p">In some cases, it  may be useful to  </span>report <span class="p">a condition or a  proceed  case  to   a  user  or  a  log  file  of  some  sort. When the printer is invoked on a condition or proceed case and *print-escape* is nil,thereport function for  that  object  is  invoked.  In  particular,  this  means that an expression like</span></p><p style="padding-top: 5pt;padding-left: 244pt;text-indent: 0pt;text-align: justify;">{princ condition)</p><p style="padding-top: 7pt;padding-left: 232pt;text-indent: 0pt;line-height: 108%;text-align: justify;">will invoke condition&#39;s report function. Because of this, no special function is provided for invoking the report function of a condition or a proceed case.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_292.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_293.png"/></span></p><p class="s10" style="padding-left: 56pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="a60">Program</a><span class="s9"> Interface to the Condition </span>System</p><p style="text-indent: 0pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_294.png"/></span></p><p class="s82" style="padding-top: 8pt;padding-left: 57pt;text-indent: 0pt;text-align: left;"><a name="a61">Defining</a><span class="s18"> and </span>Creating<span class="s18"> Conditions</span></p><p style="padding-top: 9pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">xcl:define-condition <i>name parent-type</i></p><p class="s8" style="padding-left: 261pt;text-indent: 0pt;text-align: left;">{keyword value}*</p><p class="s8" style="padding-left: 261pt;text-indent: 0pt;text-align: left;">{slots}*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 56pt;text-indent: 0pt;text-align: left;">[Macro]</p><p style="padding-top: 7pt;padding-left: 232pt;text-indent: 0pt;text-align: justify;">Defines a new condition type with the given <i>name,</i></p><p style="padding-left: 232pt;text-indent: 0pt;text-align: justify;">making it a subtype of the given <i>parent-type.</i></p><p style="padding-top: 6pt;padding-left: 232pt;text-indent: 0pt;line-height: 109%;text-align: justify;">Except as otherwise noted, the arguments are not evaluated.</p><p style="padding-top: 5pt;padding-left: 232pt;text-indent: 0pt;text-align: justify;">The valid <i>keyword/value </i>pairs are:</p><p style="padding-top: 6pt;padding-left: 233pt;text-indent: 0pt;text-align: justify;">: cone-name <i>symbol-or-string</i></p><p style="padding-top: 5pt;padding-left: 253pt;text-indent: 0pt;line-height: 107%;text-align: justify;">As in defstruct, this sets up automatic prefixing of the names of slot accessors. Also as in defstruct if no prefix is specified the default behavior for automatic prefixing is to use the name of the new type followed by a hyphen.</p><p style="padding-top: 6pt;padding-left: 233pt;text-indent: 0pt;text-align: justify;">: report-function <i>expression</i></p><p class="s8" style="padding-top: 5pt;padding-left: 253pt;text-indent: 0pt;line-height: 107%;text-align: justify;">expression <span class="p">should be a suitable argument to the function special form, e.g., a symbol or a lambda expression. It designates a function of two arguments, a condition and a stream, which prints the condition to the stream when</span></p><p style="padding-left: 254pt;text-indent: 0pt;text-align: justify;">*pr int-escape* is nil.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_295.png"/></span></p><p class="s109" style="padding-top: 1pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">66                 <span class="s12">XEROX COMON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">ERROR SYSTEM</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_296.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 202pt;text-indent: 0pt;text-align: left;">The : <span class="s19">report-function </span>describes the condition in a human-sensible form. This item is somewhat different than a structure&#39;s <span class="s19">:pr int-function </span>in that it is only used if <span class="s19">*pr int-escape* </span>is <span class="s19">nil.</span></p><p class="s19" style="padding-top: 5pt;padding-left: 174pt;text-indent: 0pt;text-align: center;">:report <span class="s8">form</span></p><p style="padding-top: 4pt;padding-left: 202pt;text-indent: 0pt;text-align: left;">A short form of: <span class="s19">report-function </span>to cover two common cases.</p><p style="padding-top: 6pt;padding-left: 202pt;text-indent: 0pt;text-align: left;">If <i>form </i>is a constant string, this is the same as</p><p class="s19" style="padding-top: 8pt;padding-left: 217pt;text-indent: 0pt;line-height: 11pt;text-align: left;">:report-function</p><p class="s19" style="padding-left: 236pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(lambda (ignore stream)</p><p class="s19" style="padding-left: 254pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(write-string <span class="s8">form </span>stream))</p><p style="padding-top: 5pt;padding-left: 202pt;text-indent: 0pt;text-align: left;">Otherwise, this is the same as</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 236pt;text-indent: -19pt;line-height: 86%;text-align: left;">:report-function (lambda (condition</p><p class="s19" style="padding-left: 290pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*standard-output*)</p><p class="s8" style="padding-left: 253pt;text-indent: 0pt;line-height: 11pt;text-align: left;">form)</p><p style="padding-top: 5pt;padding-left: 202pt;text-indent: 0pt;line-height: 106%;text-align: left;">In the latter case, the form describes how to print objects of the type being defined. The form should do output to standard output. The condition being printed will be the value of the variable <span class="s19">condition </span>(the symbol <span class="s19">condition </span>in this usage is in the same package as the name of the new condition type). The condition&#39;s slots are accessible as simple variables within the report form.</p><p class="s19" style="padding-top: 5pt;padding-left: 183pt;text-indent: 0pt;text-align: left;">: handler-function <span class="s8">expression</span></p><p style="padding-top: 4pt;padding-left: 202pt;text-indent: 0pt;text-align: justify;"><i>expression </i>should be a suitable argument to the <span class="s19">function </span>special form. It designates a function of one argument, a condition, which may handle that condition if no dynamically-bound handler did.</p><p class="s19" style="padding-top: 5pt;padding-left: 183pt;text-indent: 0pt;text-align: left;">: handle <span class="s8">form</span></p><p style="padding-top: 4pt;padding-left: 202pt;text-indent: 0pt;text-align: justify;">An expression to be used as the body of a default handler for this condition type. While executing <i>form, </i>the variable <span class="s19">condition </span>will be bound to the condition being handled (as with : <span class="s19">report </span>above, the symbol <span class="s19">condition </span>in this usage is in the same package as the name of the new condition type). That is, this defines a function</p><p class="s19" style="padding-top: 8pt;padding-left: 218pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(lambda (condition)</p><p class="s8" style="padding-left: 183pt;text-indent: 0pt;line-height: 11pt;text-align: center;">form)</p><p style="padding-top: 5pt;padding-left: 202pt;text-indent: 0pt;text-align: left;">as the default handler for that type.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_297.png"/></span></p><p class="s12" style="padding-top: 45pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s110">67</span></p><p class="s111" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">ERROR SYSTEM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-top: 7pt;padding-left: 184pt;text-indent: 0pt;text-align: justify;">It is an error to specify both : <span class="s19">report-function </span>and</p><p class="s19" style="padding-left: 184pt;text-indent: 1pt;text-align: justify;">: report <span class="s23">inthesame </span>xcl :define-condition <span class="s23">form. It is also an error to specify both</span></p><p class="s19" style="padding-left: 186pt;text-indent: 0pt;text-align: justify;">: handler-function <span class="s23">and : </span>handle. <span class="s23">If neither</span></p><p class="s19" style="padding-left: 184pt;text-indent: 1pt;text-align: justify;">: report-function <span class="s23">nor : </span>report <span class="s23">is specified, information about how to print this type of condition will be inherited from the </span>parent-type. <span class="s23">If neither</span></p><p class="s19" style="padding-left: 184pt;text-indent: 1pt;text-align: justify;">:handler-function <span class="s23">nor </span>:handle <span class="s23">was specified, there will be no default handler for the new condition type.</span></p><p class="s23" style="padding-top: 5pt;padding-left: 184pt;text-indent: 0pt;text-align: justify;"><span class="s76">slots </span>is a list of <span class="s76">slot-descriptions, </span>and specifies slots to be used by the given type. In addition to those specified, the slots of the <span class="s76">parent-type </span>are also available. A <span class="s76">slot-description </span>is exactly the same as for <span class="s19">defstruct </span>except that no slot-options are allowed, only an optional default-value expression. Condition objects are immutable, i.e., all of their slots are declared to be : <span class="s19">read-only.</span></p><p class="s19" style="padding-top: 6pt;padding-left: 184pt;text-indent: 0pt;text-align: justify;">xcl:make-condition <span class="s23">will accept keywords with the same name as any of the slots, and will initialize the corresponding slots in conditions it creates.</span></p><p class="s23" style="padding-top: 6pt;padding-left: 184pt;text-indent: 0pt;text-align: justify;">Accessors are created according to the same rules as used by <span class="s19">defstruct. </span>For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 134pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(xcl:define-condition bad-food-color food-lossage</p><p class="s19" style="padding-left: 171pt;text-indent: 0pt;line-height: 10pt;text-align: left;">:report (format t .&quot;The food -A was -A&quot;</p><p class="s19" style="padding-left: 282pt;text-indent: 0pt;line-height: 10pt;text-align: left;">food color)</p><p class="s19" style="padding-left: 152pt;text-indent: 0pt;line-height: 88%;text-align: left;">food color)</p><p class="s23" style="padding-top: 4pt;padding-left: 184pt;text-indent: 0pt;text-align: justify;">defines an error of type <span class="s19">bad-food-color </span>which inherits from the <span class="s19">food-lossage </span>condition type. The new type has slots <span class="s19">food </span>and <span class="s19">color </span>so that <span class="s19">xcl :make-condition </span>will accept : <span class="s19">food </span>and</p><p class="s19" style="padding-left: 185pt;text-indent: 1pt;text-align: justify;">: color <span class="s23">keywords and accessors </span>bad-food-color-food <span class="s23">and </span>bad-food-color-color <span class="s23">will apply to objects of this type.</span></p><p class="s23" style="padding-top: 5pt;padding-left: 185pt;text-indent: 0pt;text-align: justify;">The report function for a condition will be implicitly called any time a condition is printed with</p><p class="s19" style="padding-left: 185pt;text-indent: 0pt;text-align: justify;">*print-escape*<span class="s23">being </span>nil. <span class="s23">Hence,</span></p><p class="s19" style="padding-left: 211pt;text-indent: 0pt;text-align: left;">(princ condition)</p><p class="s23" style="padding-left: 185pt;text-indent: 0pt;text-align: justify;">is a way to invoke the condition&#39;s report function.</p><p class="s23" style="padding-top: 6pt;padding-left: 185pt;text-indent: 0pt;text-align: justify;">Here are some examples of defining condition types. This form defines a condition called <span class="s19">machine-error </span>which inherits from <span class="s19">error:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 10pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_298.png"/></span></p><p class="s110" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">68                                 <span class="s3">XEROX COMON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 6pt;text-indent: 0pt;text-align: right;">ERROR SYSTEM</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_299.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 131pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(xcl:define-condition machine-error error</p><p class="s28" style="padding-left: 168pt;text-indent: 0pt;line-height: 11pt;text-align: left;">:report (format <span class="s57">t</span></p><p class="s28" style="padding-left: 248pt;text-indent: 0pt;line-height: 82%;text-align: left;">&quot;There is a problem with -A.&quot; machine-name)</p><p class="s28" style="padding-left: 148pt;text-indent: 0pt;line-height: 11pt;text-align: left;">machine-name)</p><p class="s28" style="padding-top: 4pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">The following defines a new error condition (a subtype of machine-error) for use when machines are not available:</p><p class="s28" style="padding-left: 131pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(xcl:define-condition machine-not-available-error</p><p class="s28" style="padding-left: 266pt;text-indent: 0pt;line-height: 10pt;text-align: left;">machine-error</p><p class="s28" style="padding-left: 155pt;text-indent: 0pt;line-height: 11pt;text-align: left;">:report (format t</p><p class="s28" style="padding-left: 222pt;text-indent: 0pt;line-height: 82%;text-align: left;">&quot;The machine -A is not available.&quot; machine-name)</p><p class="s28" style="padding-left: 148pt;text-indent: 0pt;line-height: 11pt;text-align: left;">machine-name)</p><p class="s28" style="padding-top: 4pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The following defines a still more specific condition, built upon machine-not-available-error, which provides a default for machine-name but which does not provide any new slots:</p><p class="s28" style="padding-left: 131pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(xcl:define-condition</p><p class="s28" style="padding-left: 191pt;text-indent: 0pt;line-height: 84%;text-align: left;">my-favorite-machine-not-available-error machine-not-available-error</p><p class="s28" style="padding-left: 149pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(machine-name &quot;Tesuji:AISDev:Xerox&quot;))</p><p class="s28" style="padding-top: 4pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">This gives the machine-name slot a default initialization. Since no : report clause was given, the information supplied in the definition of machine-not-available-error will be used if a condition of this type is printed while</p><p class="s28" style="padding-left: 181pt;text-indent: 0pt;line-height: 12pt;text-align: left;">*print-escape*isnil.</p><p class="s28" style="padding-top: 8pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:condition-reporter       <span class="s8">type                                                   </span>[Macro]</p><p class="s28" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: left;">Returns the  object  used  to  report conditions of  the given <span class="s8">type. </span>This will  be either a string, a function of two  arguments (condition and stream) or nil   if the report function  is inherited. setf  may be used with this  form  to  change  the   report     function  for a condition type.</p><p class="s28" style="padding-top: 8pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">xcl:condition-handler <span class="s8">type </span>[Macro]</p><p class="s28" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">Returns the default handler for conditions of the given <span class="s8">type. </span>This will be a function of one argument or nil if the default handler for that type is inherited. setf may be used with this form to change the default handler for a condition type.</p><p class="s28" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">xcl:make-condition <span class="s8">type </span><span class="s12">&amp; </span>rest <span class="s8">slot-initializations [Function]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: left;">Calls the appropriate constructor function for the given type, passing along the given slot initializations</p><p style="text-indent: 0pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_300.png"/></span></p><p class="s12" style="padding-top: 46pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON L!SP IMPLEMENTATION NOTES, LYR!C RELEASE                                                                            <span class="s109">69</span></p><p class="s54" style="padding-top: 3pt;padding-left: 8pt;text-indent: 0pt;text-align: left;">ERROR SYSTEM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 183pt;text-indent: 0pt;text-align: justify;">to the constructor, and returning an instantiated condition.</p><p class="s28" style="padding-top: 5pt;padding-left: 183pt;text-indent: -1pt;text-align: justify;">The <span class="s8">slot-initializations </span>are given in alternating keyword/value pairs. eg,</p><p class="s28" style="padding-left: 201pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(xcl:make-condition &#39;bad-food-color</p><p class="s28" style="padding-left: 219pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">:food my-food</p><p class="s28" style="padding-left: 219pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">:color my-color)</p><p class="s28" style="padding-top: 4pt;padding-left: 182pt;text-indent: 0pt;text-align: justify;">This function is provided mainly for writing subroutines that manufacture a condition to be signaled. Since all of the condition-signalling functions can take a <span class="s8">type </span>and <span class="s8">slot-initializations, </span>it is usually easier to call them directly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s82" style="padding-top: 4pt;padding-left: 8pt;text-indent: 0pt;text-align: left;"><a name="a62">Signalling</a><span class="s18"> Conditions</span></p><p class="s28" style="padding-top: 8pt;padding-left: 70pt;text-indent: 0pt;text-align: justify;">xcl:*current-condition* <span class="s8">[Variable]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 183pt;text-indent: 0pt;text-align: justify;">This variable is bound by condition-signalling forms (xcl:signal, error, cerror, and warn) to the condition being signaled. This is especially useful in proceed case filters. The top-level value of xcl:*current-condition*isnil.</p><p class="s28" style="padding-top: 9pt;padding-left: 70pt;text-indent: 0pt;text-align: justify;">xcl:signal <span class="s8">datum </span>&amp;rest <span class="s8">arguments [Function]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 183pt;text-indent: 0pt;text-align: left;">Invokes the signal facility on a condition. If the condition is  not handled, xcl:signal returns the condition object that was signaled.</p><p class="s28" style="padding-top: 6pt;padding-left: 183pt;text-indent: 0pt;text-align: justify;">If <span class="s8">datum </span>is a condition then that condition is used directly. In this case, it is an error for xcl :arguments to be non-nil.</p><p class="s28" style="padding-top: 5pt;padding-left: 183pt;text-indent: 0pt;text-align: justify;">If <span class="s8">datum </span>is a condition type, then the condition used is the result of doing</p><p class="s28" style="padding-left: 202pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(apply f&#39;xcl:make-condition</p><p class="s8" style="padding-left: 243pt;text-indent: 0pt;line-height: 11pt;text-align: left;">datum arguments)</p><p class="s28" style="padding-top: 4pt;padding-left: 184pt;text-indent: 0pt;text-align: left;">If <span class="s8">datum </span>is a string, then  the condition used is the result of doing</p><p class="s28" style="padding-top: 2pt;padding-left: 221pt;text-indent: -19pt;line-height: 84%;text-align: left;">(xcl:make-condition &#39;xcl:simple-condition</p><p class="s28" style="padding-left: 218pt;text-indent: 0pt;line-height: 11pt;text-align: left;">: format-string <span class="s8">datum</span></p><p class="s28" style="padding-left: 218pt;text-indent: 0pt;line-height: 12pt;text-align: left;">: format-arguments <span class="s8">arguments).</span></p><p class="s28" style="padding-top: 4pt;padding-left: 183pt;text-indent: 0pt;text-align: justify;">If the condition is of type xcl:serious-condition, then xcl:signal will behave exactly like error, i.e., it will call xcl:debug if the condition isn&#39;t handled, and will never return to its caller.</p><p class="s28" style="padding-top: 9pt;padding-left: 70pt;text-indent: 0pt;text-align: justify;">error <span class="s8">datum </span>&amp;rest <span class="s8">arguments [Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_301.png"/></span></p><p class="s99" style="padding-top: 1pt;padding-left: 8pt;text-indent: 0pt;text-align: left;">70                  <span class="s12">XEROX COMON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="text-indent: 0pt;text-align: right;">ERROR SYSTEM</p><p style="padding-left: 12pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="586" height="1" alt="image" src="Image_302.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 187pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Like xcl: signal except if the condition is not handled, the debugger is called with the given condition, and error never returns.</p><p class="s8" style="padding-top: 6pt;padding-left: 187pt;text-indent: 0pt;line-height: 106%;text-align: justify;">datum <span class="p">is treated as in xcl: signal. If </span>datum <span class="p">is a string, a conditon of type xcl: simple-error is made. This form is compatible with that described in Steele&#39;s </span>Common Lisp, the Language.</p><p style="padding-top: 9pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">cerror  <i>proceed-format-string  datum  </i>&amp;rest  <i>arguments            [Function]</i></p><p style="padding-top: 7pt;padding-left: 187pt;text-indent: 0pt;line-height: 106%;text-align: left;">Like  error, if the condition is not  handled  the debugger  is  called  with  the  given  condition. However,    cerror    enables    the     proceed    type xcl:proceed, which will simply return the condition being signalled from cerror.</p><p style="padding-top: 6pt;padding-left: 187pt;text-indent: 0pt;line-height: 107%;text-align: justify;">cerror is used to signal continuable errors. like error, it signals an error and enters the debugger. However, cerror allows the program to be continued from the debugger after resolving the error.</p><p class="s8" style="padding-top: 5pt;padding-left: 187pt;text-indent: 0pt;line-height: 106%;text-align: left;">datum <span class="p">is treated as in  error. If </span>datum <span class="s18">is a </span><span class="p">condition, then  that  condition  is  used  directly.  In  this  case, </span>arguments     <span class="p">will      be  used     only     with      the </span>proceed-format-string <span class="p">and will not be used to initialize </span>datum.</p><p style="padding-top: 6pt;padding-left: 187pt;text-indent: -6pt;line-height: 106%;text-align: justify;">· The <i>proceed-format-string </i>must be a string. Note that if <i>datum </i>is not a string, then the format arguments used by the <i>proceed-format-string </i>will still be the <i>arguments </i>(in the keyword format as specified). In this case, some care may be necessary to set up the <i>proceed-format-string </i>correctly. The format directive</p><p style="padding-left: 188pt;text-indent: 0pt;text-align: justify;">-*maybe particularly useful in this situation.</p><p style="padding-top: 6pt;padding-left: 187pt;text-indent: 0pt;line-height: 107%;text-align: left;">The value returned by cerror is the condition which was signaled.</p><p style="padding-top: 6pt;padding-left: 187pt;text-indent: 0pt;text-align: left;">See Steele&#39;s <i>Common Lisp, the Language, </i>page 430 for examples of the use of cerror.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">warn <i>datum  </i>&amp;rest <i>arguments                                                    [Function]</i></p><p style="padding-top: 7pt;padding-left: 187pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Invokes the signal facility on a condition. If the condition is not handled, then the text of the warning is output to *error-output*. If the variable</p><p style="padding-left: 187pt;text-indent: 1pt;line-height: 107%;text-align: justify;">*break-on-warnings* is true, then in addition to printing the warning, the debugger is entered using the function break. The value returned by warn is the condition that was signaled.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_303.png"/></span></p><p class="s12" style="padding-top: 42pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s112">71</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s54" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">ERROR SYSTEM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 183pt;text-indent: 0pt;text-align: justify;">datum <span class="s28">the same as for signal except that if </span>datum <span class="s28">is a string, a condition of type xcl:simple-warning is made.</span></p><p class="s28" style="padding-top: 5pt;padding-left: 183pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The eventual condition type resulting from <span class="s8">datum</span></p><p class="s28" style="padding-left: 184pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">must be a subtype of xcl :warning.</p><p class="s28" style="padding-top: 9pt;padding-left: 71pt;text-indent: 0pt;line-height: 125%;text-align: left;">*break-on-warnings* check-type</p><p class="s28" style="padding-left: 70pt;text-indent: 0pt;line-height: 125%;text-align: left;">ecase cease etypecase ctypecase assert</p><p class="s8" style="padding-top: 10pt;padding-left: 79pt;text-indent: -9pt;line-height: 126%;text-align: justify;">[Variable] <span class="s28">[Macro] [Macro] [Macro] [Macro] [Macro] [Macro]</span></p><p class="s28" style="padding-top: 2pt;padding-left: 183pt;text-indent: 0pt;text-align: justify;">All of the above behave as described in <span class="s8">Common Lisp: the Language. </span>The default clauses of ecase and cease forms signal xcl:simple-error conditions. The default clauses of etypecase and ctypecase forms signal xcl: type-mismatch conditions. assert signals the xcl:assertion-failed condition. cease and ctypecase set up a xcl:store-value proceed case.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-bottom: 1pt;padding-left: 8pt;text-indent: 0pt;text-align: left;"><a name="a63">Handling Conditions</a></p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_304.png"/></span></p><p class="s28" style="padding-top: 7pt;padding-left: 71pt;text-indent: 0pt;text-align: justify;">xcl:handler-bind <span class="s8">bindings </span>&amp;rest <span class="s8">forms </span>[Macro]</p><p class="s28" style="padding-top: 6pt;padding-left: 184pt;text-indent: 0pt;text-align: justify;">Executes the forms in a dynamic context where the given local handler <span class="s8">bindings </span>are in effect. The <span class="s8">bindings </span>must take the form ( <span class="s8">type handler). </span>The handlers are bound in the order they are given, i.e., when searching for a handler, the error system will consider the leftmost binding in a particular xcl: handler-bind form first.</p><p class="s8" style="padding-top: 6pt;padding-left: 184pt;text-indent: 0pt;text-align: justify;">type <span class="s28">may be the name of a condition type or a list of condition types.</span></p><p class="s8" style="padding-top: 6pt;padding-left: 184pt;text-indent: 0pt;text-align: justify;">handler <span class="s28">should evaluate to a function of one argument, a condition, to be used to handle a signalled condition during execution of the </span>forms.</p><p class="s28" style="padding-top: 6pt;padding-left: 184pt;text-indent: 0pt;text-align: justify;">An example of the use of xcl: handler-bind appears at the end of the xcl:proceed-case macro description.</p><p class="s28" style="padding-top: 9pt;padding-left: 71pt;text-indent: 0pt;text-align: justify;">xcl:condition-case <span class="s8">form </span>&amp;rest <span class="s8">cases </span>[Macro]</p><p class="s28" style="padding-top: 5pt;padding-left: 185pt;text-indent: 0pt;text-align: justify;">Executes the given <span class="s8">form. </span>Each <span class="s8">case </span>has the form</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 10pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_305.png"/></span></p><p class="s113" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">72                                       <span class="s12">XEROX COMON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 6pt;text-indent: 0pt;text-align: right;">ERROR SYSTEM</p><p style="padding-left: 13pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_306.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s60" style="padding-left: 209pt;text-indent: 0pt;text-align: left;"><span class="s47">{ </span>type   <span class="p">{[var])  •    </span>body)</p><p class="s28" style="padding-top: 6pt;padding-left: 189pt;text-indent: 0pt;text-align: justify;">If a condition is signalled (and not handled by an intervening handler) during the execution of the form, and there is an appropriate clause-i.e., one for which</p><p class="s28" style="padding-top: 5pt;padding-left: 209pt;text-indent: 0pt;text-align: left;">( typep <span class="s60">condition &#39;type)</span></p><p class="s28" style="padding-top: 6pt;padding-left: 189pt;text-indent: 0pt;text-align: left;">is true-then control is transferred to the body of the relevant   clause,   binding   <span class="s60">var,   </span>if   present,   to   the condition   that   was  signaled.   If   no   condition   is signaled, then the values resulting from the form are returned    by   the    xcl:condition-case. If the condition is not needed, var may be omitted.</p><p class="s28" style="padding-top: 9pt;padding-left: 189pt;text-indent: 0pt;text-align: left;">Earlier clauses will be considered first by the error system. I.e.,</p><p class="s28" style="padding-left: 207pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(xcl:condition-case <span class="s60">form</span></p><p class="s47" style="padding-left: 226pt;text-indent: 0pt;line-height: 10pt;text-align: left;">( <i>cond1 </i>••• )</p><p class="s47" style="padding-left: 226pt;text-indent: 0pt;line-height: 11pt;text-align: left;">( <i>cond2 </i>••• ) )</p><p class="s28" style="padding-top: 6pt;padding-left: 207pt;text-indent: -17pt;text-align: left;">is equivalent to (xcl:condition-case</p><p class="s28" style="padding-left: 257pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(xcl:condition-case <span class="s60">form</span></p><p class="s60" style="padding-left: 226pt;text-indent: 49pt;text-align: left;">(cond1 <span class="s47">••• ) ) ( </span>cond2 <span class="s47">••• ) )</span></p><p class="s60" style="padding-top: 7pt;padding-left: 189pt;text-indent: 0pt;text-align: left;">type <span class="s28">may also be a list of types, in which case it will catch conditions of any of the specified types.</span></p><p class="s28" style="padding-left: 139pt;text-indent: 50pt;line-height: 23pt;text-align: left;">Examples: (xcl:condition-case (/ x y)</p><p class="s28" style="padding-left: 33pt;text-indent: 0pt;line-height: 8pt;text-align: center;">(division-by-zero () nil))</p><p class="s28" style="padding-top: 10pt;padding-left: 139pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(xcl:condition-case (open *the-file*</p><p class="s28" style="padding-left: 300pt;text-indent: 0pt;line-height: 10pt;text-align: left;">:direction :input)</p><p class="s28" style="padding-left: 14pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(file-error (condition)</p><p class="s28" style="padding-left: 158pt;text-indent: 0pt;line-height: 12pt;text-align: center;">(format t <span class="s114">11 </span>~&amp;ope n failed: <span class="s56">-A-%&quot; </span>condition)))</p><p class="s28" style="padding-top: 11pt;padding-left: 158pt;text-indent: -20pt;line-height: 83%;text-align: left;">{xcl:condition-case (some-user-function) (file-error {condition) condition) (division-by-zero () 0)</p><p class="s28" style="padding-left: 177pt;text-indent: -19pt;line-height: 84%;text-align: left;">((xcl:unbound-variable xcl:undefined-function) () &#39;unbound))</p><p class="s28" style="padding-top: 6pt;padding-left: 189pt;text-indent: 0pt;text-align: left;">Note  the   difference   between   xcl:condition-case  and     xcl:handler-bind.   In   xcl:handler-bind, you are  specifying  functions that will  be called  in the dynamic context  of  the  condition-signalling  form. In xcl:condition-case,      you       are    specifying continuations to be used instead of the original form if a condition of a particular type is signaled. These</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_307.png"/></span></p><p class="s12" style="padding-top: 32pt;padding-left: 14pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYR!C RELEASE                                                                                <span class="s109">73</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s54" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">ERROR SYSTEM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 181pt;text-indent: 0pt;text-align: justify;">continuations will be executed in the same dynamic context as the original form.</p><p class="s28" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:ignore-errors  &amp;body   <span class="s8">forms                                                 </span>[Macro]</p><p class="s28" style="padding-top: 8pt;padding-left: 180pt;text-indent: 1pt;text-align: justify;">Executes the forms in a context that handles errors of type error by returning control to this form. If no error is signaled, all values returned by the last form are returned by xcl: ignore-errors. Otherwise, the form returns nil and the condition that was signaled. Synonym for</p><p class="s28" style="padding-left: 200pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">(xcl:condition-case (progn. <span class="s8">forms)</span></p><p class="s28" style="padding-left: 218pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">(error (condition)</p><p class="s28" style="padding-left: 236pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(values nil condition)).</p><p class="s28" style="padding-top: 7pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:debug &amp;optional <span class="s8">datum </span>&amp;rest <span class="s8">arguments                      [Function]</span></p><p class="s28" style="padding-top: 8pt;padding-left: 180pt;text-indent: 1pt;text-align: justify;">Enters the debugger with a given condition without signalling that condition. When the debugger is entered, it will announce the condition by invoking the condition&#39;s report function.</p><p class="s8" style="padding-top: 8pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">datum <span class="s28">is treated the same as for xcl :signal except if </span>datum <span class="s28">is not specified, it defaults to &quot;Call to DEBUG&quot;.</span></p><p class="s28" style="padding-top: 8pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">This function will never directly return to its caller. Return can occur only by a spetial transfer of control, such as to a catch, block, tagbody, xcl :proceed-case or xcl:catch-abort.</p><p class="s28" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">break  &amp;optional  <span class="s8">datum  </span>&amp;rest  <span class="s8">arguments                              [Function]</span></p><p class="s28" style="padding-top: 8pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">Like xcl :debug except sets up a proceed case like cerror.</p><p class="s28" style="padding-top: 8pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">If <span class="s8">datum </span>is not specified, it defaults to &quot;Break <span class="s114">11 </span><span class="s78">•</span></p><p class="s28" style="padding-top: 8pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">If the break is proceeded, the  value returned is the condition that was used.</p><p class="s28" style="padding-top: 8pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">break is approximately:</p><p class="s28" style="padding-top: 10pt;padding-left: 131pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(defun break (&amp;optional (datum &quot;Break&quot;)</p><p class="s28" style="padding-left: 216pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&amp;rest arguments)</p><p class="s28" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(xcl:proceed-case (apply f&#39;xcl:debug datum</p><p class="s28" style="padding-left: 378pt;text-indent: 0pt;line-height: 10pt;text-align: left;">arguments)</p><p class="s28" style="padding-left: 168pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(xcl:proceed (condition)</p><p class="s28" style="padding-left: 185pt;text-indent: -5pt;line-height: 84%;text-align: left;">·     :report &quot;Return from BREAK.&quot; condition)))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_308.png"/></span></p><p class="s102" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">74                                                                                <span class="s12">XEROX COMON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">ERROR SYSTEM</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_309.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s82" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="a64">Proceed Cases &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</a></p><p class="s28" style="padding-top: 8pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl   :proceed-case   <span class="s8">form  </span>&amp;rest   <span class="s8">clauses                                          </span><span class="p">[Macro]</span></p><p class="s28" style="padding-top: 9pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The <span class="s8">form </span>is evaluated in a dynamic context where the clauses have special meanings as points to which control may be transferred. If <span class="s8">form </span>runs to completion, all values returned by the form are simply returned by the xcl :proceed-case form. On the other hand, the computation of forms may choose to transfer control to one of the proceed case clauses. If a transfer to a clause occurs, the forms in the body of that clause will be evaluated in the same dynamic context as the xcl:proceed-case form, and any values returned by the last such form will be returned bythexcl:proceed-case form.</p><p class="s28" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">A proceed case clause has the form:</p><p style="padding-top: 4pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">( <i>proceed-function-name arglist {keyword value}* </i>{body-form}*)</p><p class="s28" style="padding-top: 7pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The <span class="s8">proceed-function-name </span>may be nil or any symbol, usually the name of a defined proceed function. xcl :define-proceed-function will be described later.</p><p class="s28" style="padding-top: 8pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The <span class="s8">arglist </span>is a list of optional argument specifications that will be bound and ,evaluated in the dynamic context of the xcl:proceed-case form. They will use whatever values were provided by xcl:invoke-proceed-case.</p><p class="s28" style="padding-top: 8pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The valid <span class="s8">keyword/value </span>pairs are:</p><p class="s28" style="padding-top: 8pt;padding-left: 182pt;text-indent: 0pt;text-align: justify;">:filter-function <span class="s8">expression</span></p><p class="s8" style="padding-top: 7pt;padding-left: 192pt;text-indent: 0pt;text-align: justify;">expression <span class="s28">should be suitable as an argument to the function special form. It defines a predicate of no arguments that determines if this clause is visible to xcl:find-proceed-function.</span></p><p class="s28" style="padding-top: 8pt;padding-left: 183pt;text-indent: 0pt;text-align: justify;">: filter <span class="s8">form</span></p><p class="s28" style="padding-top: 7pt;padding-left: 192pt;text-indent: 0pt;text-align: justify;">A shorthand form of :filter-function that is equivalent to</p><p class="s28" style="padding-top: 5pt;padding-left: 200pt;text-indent: 0pt;text-align: left;">:filter-function (lambda(} <span class="p">form}</span></p><p class="s28" style="padding-top: 6pt;padding-left: 183pt;text-indent: 0pt;text-align: justify;">:condition <span class="s8">type</span></p><p class="s28" style="padding-top: 7pt;padding-left: 192pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Shorthand for the common special case of</p><p class="s28" style="padding-left: 192pt;text-indent: 1pt;text-align: justify;">: filter. The following two <span class="s8">key/value </span>pairs are equivalent:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_310.png"/></span></p><p class="s12" style="padding-top: 40pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s109">75</span></p><p class="s49" style="padding-top: 3pt;padding-left: 28pt;text-indent: 0pt;text-align: left;">ERROR SYSTEM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 7pt;padding-left: 222pt;text-indent: 0pt;text-align: left;">:condition foo</p><p class="s19" style="padding-top: 4pt;padding-left: 222pt;text-indent: 0pt;line-height: 11pt;text-align: left;">:filter</p><p class="s19" style="padding-left: 241pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(lambda()</p><p class="s19" style="padding-left: 303pt;text-indent: -43pt;line-height: 86%;text-align: left;">(typep xcl:*current-condition* &#39;foo))</p><p class="s19" style="padding-top: 7pt;padding-left: 205pt;text-indent: 0pt;text-align: left;">: report-function <span class="s8">expression</span></p><p style="padding-top: 8pt;padding-left: 213pt;text-indent: 0pt;text-align: justify;">The <i>expression </i>must be an appropriate argument to the <span class="s19">function </span>special form, and should designate a function of two arguments, a proceed case and a stream, that writes to the stream a summary of the action that this proceed case will take if invoked..</p><p class="s19" style="padding-top: 8pt;padding-left: 204pt;text-indent: 0pt;text-align: left;">: report <span class="s8">form</span></p><p style="padding-top: 8pt;padding-left: 213pt;text-indent: 0pt;text-align: justify;">This is a shorthand for two important special cases of : <span class="s19">report-function. </span>If <i>form </i>is a constant string, then this is the same as:</p><p class="s19" style="padding-left: 238pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:report-function</p><p class="s19" style="padding-left: 257pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(lambda (ignore stream)</p><p class="s19" style="padding-left: 276pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(write-string <span class="s8">form </span>stream))</p><p style="padding-top: 8pt;padding-left: 213pt;text-indent: 0pt;text-align: justify;">Otherwise, this is the same as</p><p class="s19" style="padding-left: 238pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:report-function</p><p class="s19" style="padding-left: 257pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(lambda (xcl:proceed-case</p><p class="s19" style="padding-left: 312pt;text-indent: 0pt;line-height: 11pt;text-align: left;">*standard-output*)</p><p class="s19" style="padding-left: 128pt;text-indent: 0pt;line-height: 12pt;text-align: center;">form)</p><p style="padding-top: 8pt;padding-left: 213pt;text-indent: 0pt;text-align: justify;">In the latter case, form must do output to</p><p class="s19" style="padding-left: 213pt;text-indent: 0pt;text-align: justify;">*standard-output*, <span class="p">summarizing the action that this proceed case will take if invoked. The proceed-case will be bound to the variable </span>xcl:proceed-case.</p><p style="padding-top: 8pt;padding-left: 203pt;text-indent: 0pt;text-align: justify;">Only one of <span class="s19">:condition, :filter </span>or</p><p class="s19" style="padding-left: 204pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">:filter-function <span class="p">may be specified. Only one of</span></p><p class="s19" style="padding-left: 204pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">: report <span class="p">or : </span>report-function <span class="p">may be specified.</span></p><p style="padding-top: 9pt;padding-left: 203pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If a named proceed function has a default filter and the proceed case specifies a filter, then the information supplied in the proceed case takes precedence. Similarly, if : <span class="s19">report </span>or</p><p class="s19" style="padding-left: 203pt;text-indent: 1pt;text-align: justify;">: report-function <span class="p">is specified in the proceed case, then only that information is considered, and any</span></p><p class="s19" style="padding-left: 203pt;text-indent: 1pt;text-align: justify;">: report <span class="p">or : </span>report-function <span class="p">specified as a default for the named proceed function is not used.</span></p><p style="padding-top: 8pt;padding-left: 203pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If a named proceed function is used but no report information is supplied, the name of the proceed function is used to generate the default help information. It is an error if no named proceed case is</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_311.png"/></span></p><p class="s109" style="padding-top: 1pt;padding-left: 27pt;text-indent: 0pt;text-align: left;">76                 <span class="s29">XEROX COMON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 7pt;text-indent: 0pt;text-align: right;">ERROR SYSTEM</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_312.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 180pt;text-indent: 0pt;text-align: justify;">used and no report information is provided; this means <span class="s41">that </span>you must always have a way of describing <span class="s41">to the </span>user how <span class="s41">to proceed. If you don&#39;t </span>specify report <span class="s41">methods, </span>make sure <span class="s41">that the name of the </span>proceed type is something <span class="s41">sensible.</span></p><p class="s31" style="padding-top: 8pt;padding-left: 181pt;text-indent: 0pt;line-height: 12pt;text-align: left;">When <span class="s41">*print-escape* </span>is <span class="s41">nil, the </span>printer will use</p><p class="s41" style="padding-left: 181pt;text-indent: 0pt;line-height: 149%;text-align: left;">the <span class="s31">report </span>information for a proceed <span class="s31">case. Examples:</span></p><p class="s41" style="padding-top: 5pt;padding-left: 147pt;text-indent: -19pt;line-height: 85%;text-align: left;">(xcl:proceed-case (a-random-computation) (new-function (new-function)</p><p class="s41" style="padding-left: 166pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(setq function new-function)))</p><p class="s41" style="padding-top: 9pt;padding-left: 147pt;text-indent: -18pt;line-height: 85%;text-align: left;">(xcl:proceed-case (a-random-computation) (nil ((new-function (read-typed-object</p><p class="s41" style="padding-left: 334pt;text-indent: 0pt;line-height: 83%;text-align: left;">&#39;function &quot;Function: &quot;)))</p><p class="s41" style="padding-left: 184pt;text-indent: 0pt;line-height: 10pt;text-align: left;">:report &quot;Use a different function.&quot;</p><p class="s41" style="padding-left: 165pt;text-indent: 19pt;line-height: 83%;text-align: left;">:condition undefined-function (setq function new-function)))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 128pt;text-indent: 0pt;line-height: 83%;text-align: center;">(xcl:proceed-case (a-command-loop) (return-from-command-level ()</p><p class="s41" style="padding-left: 71pt;text-indent: 0pt;line-height: 10pt;text-align: center;">:report</p><p class="s41" style="padding-left: 121pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(format t</p><p class="s41" style="padding-left: 235pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&quot;Return from command level <span class="s115">-o.&quot;</span></p><p class="s41" style="padding-left: 235pt;text-indent: 0pt;line-height: 9pt;text-align: left;">level)</p><p class="s41" style="padding-left: 23pt;text-indent: 0pt;text-align: center;">nil))</p><p class="s41" style="padding-top: 8pt;padding-left: 128pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(loop</p><p class="s41" style="padding-top: 1pt;padding-left: 165pt;text-indent: -18pt;line-height: 85%;text-align: left;">(xcl:proceed-case (another-computation) (xcl:proceed ())))</p><p class="s41" style="padding-top: 7pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">Assuming that new-function is defined as a proceed</p><p class="s31" style="padding-left: 181pt;text-indent: 0pt;text-align: justify;">function with defaults:</p><p class="s41" style="padding-left: 197pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">:report &quot;Use a different function.&quot;</p><p class="s116" style="padding-left: 198pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">:condition xcl:undefined-function</p><p class="s41" style="padding-left: 180pt;text-indent: 0pt;text-align: justify;">then the first and second examples are equivalent from the point of <span class="s31">view </span>of someone using the interactive debugger, but differ in one important aspect for non-interactive handling. If a handler &quot;knows aboutn proceed function names,as in:</p><p class="s41" style="padding-left: 149pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(when (xcl:find-proceed-case &#39;new-function</p><p class="s41" style="padding-left: 330pt;text-indent: 0pt;line-height: 11pt;text-align: left;">condition)</p><p class="s41" style="padding-left: 180pt;text-indent: -12pt;text-align: left;">(new-function condition the-replacement)) then only the first example, and not the second, will have control transferred to its correction clause.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_313.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s100">77</span></p><p class="s54" style="padding-top: 5pt;padding-left: 69pt;text-indent: 0pt;text-align: left;">ERROR SYSTEM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 192pt;text-indent: 53pt;line-height: 21pt;text-align: left;">Here&#39;s a more complete example: (let ((my-food &#39;milk)</p><p class="s41" style="padding-left: 210pt;text-indent: 18pt;line-height: 85%;text-align: left;">(my-color &#39;greenish-blue)) (do ()</p><p class="s41" style="padding-left: 235pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((not (bad-food-color-p food</p><p class="s41" style="padding-left: 223pt;text-indent: 162pt;line-height: 85%;text-align: left;">color))) (xcl:proceed-case (error &#39;bad-food-color</p><p class="s41" style="padding-left: 379pt;text-indent: 0pt;line-height: 10pt;text-align: left;">:food my-food</p><p class="s41" style="padding-left: 379pt;text-indent: 0pt;line-height: 10pt;text-align: left;">:color my-color)</p><p class="s41" style="padding-left: 241pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(use-food (new-food)</p><p class="s41" style="padding-left: 241pt;text-indent: 18pt;line-height: 83%;text-align: left;">(setf my-food new-food)) (use-color (new-color)</p><p class="s41" style="padding-left: 260pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(setf my-color new-color))))</p><p class="s41" style="padding-left: 212pt;text-indent: 0pt;line-height: 10pt;text-align: left;">,, We won&#39;t get to here until my-food</p><p class="s41" style="padding-left: 210pt;text-indent: 1pt;line-height: 85%;text-align: left;">,, and my-color are compatible. (list my-food my-color))</p><p class="s41" style="padding-top: 8pt;padding-left: 244pt;text-indent: 0pt;text-align: justify;">A handler can then proceed the error in either of two ways. It may correct the color or correct the food. For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 262pt;text-indent: 0pt;line-height: 12pt;text-align: left;">#&#39;(lambda (condition) •..</p><p class="s41" style="padding-left: 293pt;text-indent: 0pt;line-height: 11pt;text-align: left;">;; Corrects color</p><p class="s41" style="padding-left: 291pt;text-indent: 0pt;line-height: 12pt;text-align: left;">( use-color &#39;white) •..)</p><p class="s41" style="padding-top: 8pt;padding-left: 244pt;text-indent: 0pt;text-align: left;">or</p><p class="s41" style="padding-left: 262pt;text-indent: 0pt;line-height: 12pt;text-align: left;">#&#39;(lambda (condition) ••.</p><p class="s41" style="padding-left: 293pt;text-indent: 0pt;line-height: 11pt;text-align: left;">;; Corrects food</p><p class="s41" style="padding-left: 291pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(use-food &#39;cheese) .•.)</p><p class="s41" style="padding-top: 6pt;padding-left: 244pt;text-indent: 0pt;line-height: 83%;text-align: left;">Here is an example using xcl:handler-bind and xcl:proceed-case.</p><p class="s41" style="padding-top: 9pt;padding-left: 191pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(xcl:handler-bind ((foo-error</p><p class="s41" style="padding-left: 365pt;text-indent: -23pt;line-height: 85%;text-align: left;">#&#39;(lambda (condition) (xcl:use-value 7))))</p><p class="s41" style="padding-left: 229pt;text-indent: -18pt;line-height: 87%;text-align: left;">(xcl:proceed-case (error &#39;foo-error) (xcl:use-value (x) (*xx))))</p><p class="s41" style="padding-top: 4pt;padding-left: 243pt;text-indent: 0pt;text-align: left;">The above form returns 49.</p><p class="s41" style="padding-top: 6pt;padding-left: 131pt;text-indent: 0pt;line-height: 13pt;text-align: left;">xcl:define-proceed-function <span class="s52">name</span></p><p class="s52" style="padding-left: 305pt;text-indent: 0pt;line-height: 12pt;text-align: left;">{keyword value}*</p><p class="s23" style="padding-left: 306pt;text-indent: 0pt;text-align: left;">{ <i>variable}*</i></p><p class="s28" style="padding-top: 6pt;padding-left: 69pt;text-indent: 0pt;text-align: left;">[Macro]</p><p class="s41" style="padding-top: 9pt;padding-left: 244pt;text-indent: 0pt;text-align: justify;">Valid <span class="s52">keyword/value </span>pairs are the same as those which are defined for the xcl:proceed-case special form. That is, :filter, :filter-function, :condition,</p><p class="s41" style="padding-left: 244pt;text-indent: 0pt;text-align: justify;">:report, and :report-function. The filter and report functions specified in a xcl:define-proceed-function form will be used for xcl:proceed-case clauses with the same name that do not specify their own filter or report functions, respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 69pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_314.png"/></span></p><p class="s109" style="padding-top: 1pt;padding-left: 69pt;text-indent: 0pt;text-align: left;">78                 <span class="s12">XEROX COMON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">ERROR SYSTEM</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_315.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 7pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">This form defines a function called name which will invoke a proceed case with the same name. The proceed function takes optional arguments which are given by the <span class="s8">variables </span>specification. The parameter list for the proceed function will look like</p><p class="s28" style="padding-top: 8pt;padding-left: 136pt;text-indent: 0pt;text-align: center;">( &amp;optional . <span class="s8">variables)</span></p><p class="s28" style="padding-top: 8pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The only thing that a proceed function really does is collect values to be passed on to a proceed case clause.</p><p class="s28" style="padding-top: 8pt;padding-left: 181pt;text-indent: 1pt;text-align: justify;">Each element of <span class="s8">variables </span>has the form <span class="s8">variable-name </span>or ( <span class="s8">variable-name initial-value). </span>If <span class="s8">initial-value </span>is not supplied, it defaults to nil.</p><p class="s28" style="padding-top: 8pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">For example, here are some possible proceed functions which might be useful in conjunction with the bad-food-color error we used as an example earlier:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 131pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(xcl:define-proceed-function use-food</p><p class="s28" style="padding-left: 150pt;text-indent: 18pt;line-height: 82%;text-align: left;">:report &quot;Use another food.&quot; (food (read-typed-object &#39;food</p><p class="s28" style="padding-left: 260pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;Food to use instead: &quot;)))</p><p class="s28" style="padding-top: 8pt;padding-left: 131pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(xcl:define-proceed-function use-color</p><p class="s28" style="padding-left: 150pt;text-indent: 18pt;line-height: 82%;text-align: left;">:report &quot;Change the food&#39;s color.&quot; (color</p><p class="s28" style="padding-left: 168pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(read-typed-object &#39;food</p><p class="s28" style="padding-left: 199pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&quot;Color to make the food: &quot;)))</p><p class="s28" style="padding-top: 8pt;padding-left: 131pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(defun maybe-use-water (condition)</p><p class="s28" style="padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;">;; A sample handler</p><p class="s28" style="padding-left: 212pt;text-indent: -62pt;line-height: 84%;text-align: left;">(when (eq (bad-food-color-food condition) &#39;milk)</p><p class="s28" style="padding-left: 168pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(use-food &#39;water)))</p><p class="s28" style="padding-top: 8pt;padding-left: 131pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(xcl:handler-bind ((bad-food-color</p><p class="s117" style="text-indent: 0pt;text-align: right;">... <span class="s50">)</span></p><p class="s28" style="padding-left: 130pt;text-indent: 0pt;line-height: 12pt;text-align: left;">#&#39;maybe-use-water))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 7pt;text-indent: 0pt;text-align: justify;">If a named proceed function is invoked in a context in which there is no active proceed case by that name, the proceed function simply returns nil. So, for example, in each of the following pairs of handlers, the first is equivalent to the second but less efficient:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 162pt;text-indent: -31pt;line-height: 82%;text-align: left;">#&#39; (lambda   (condition)                     ; OK, but slow (when (xcl:find-proceed-case &#39;use-food)</p><p class="s28" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(use-food &#39;milk)))</p><p class="s75" style="padding-top: 1pt;padding-left: 162pt;text-indent: -32pt;line-height: 79%;text-align: left;">#&#39; <span class="s28">(lambda   (condition)                         Preferred (use-food &#39;milk))</span></p><p class="s28" style="padding-top: 8pt;padding-left: 130pt;text-indent: 0pt;text-align: left;">#&#39; (lambda (condition)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_316.png"/></span></p><p class="s12" style="padding-top: 30pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                                <span class="s99">79</span></p><p class="s63" style="padding-top: 3pt;padding-left: 139pt;text-indent: 0pt;text-align: center;">ERROR SYSTEM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-top: 8pt;padding-left: 276pt;text-indent: -55pt;line-height: 85%;text-align: left;">(cond ((xcl:find-proceed-case &#39;use-food) (use-food &#39;chocolate))</p><p class="s41" style="padding-left: 276pt;text-indent: -18pt;line-height: 83%;text-align: left;">((xcl:find-proceed-case &#39;use-color) (use-color &#39;orange))))</p><p class="s41" style="padding-left: 220pt;text-indent: -30pt;line-height: 85%;text-align: left;">#&#39;(lambda (condition) (use-food &#39;chocolate) (use-color &#39;orange))</p><p class="s41" style="padding-top: 7pt;padding-left: 129pt;text-indent: 0pt;text-align: left;">xcl:compute-proceed-cases             <span class="s8">[Function]</span></p><p style="padding-top: 8pt;padding-left: 241pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Uses the dynamic state of the program to compute a Iist of <i>proceed cases.</i></p><p style="padding-top: 8pt;padding-left: 241pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Each proceed case object represents a point in the current dynamic state of the program to which control may be transferred. The only operations that Xerox Lisp defines for such objects are</p><p class="s41" style="padding-left: 260pt;text-indent: 0pt;text-align: left;">xcl:proceed-case-name, xcl:find-proceed-case, xcl:invoke-proceed-case, princ, <span class="p">and</span></p><p class="s41" style="padding-left: 260pt;text-indent: 0pt;line-height: 12pt;text-align: left;">print,</p><p class="s41" style="padding-left: 240pt;text-indent: 1pt;text-align: justify;"><span class="p">the identification of an object as a proceed case using </span>(typep <span class="s8">x </span>&#39;proceed-case), <span class="p">and standard Lisp operations that work for all objects, such as </span>eq, eql, describe, <span class="p">etc.</span></p><p style="padding-top: 8pt;padding-left: 241pt;text-indent: 0pt;text-align: justify;">The list which results from a call to <span class="s41">xcl:compute-proceed-cases </span>is ordered so that the innermost (ie, more-recently established) proceed cases are nearer the head of the list.</p><p style="padding-top: 9pt;padding-left: 241pt;text-indent: 0pt;text-align: justify;">Note also that <span class="s41">xcl:compute-proceed-cases </span>returns <span class="s52">all </span>valid proceed cases, even if some of them have the same name as others and therefore would not be found by <span class="s41">xcl:find-proceed-case.</span></p><p class="s41" style="padding-top: 8pt;padding-left: 128pt;text-indent: 0pt;text-align: left;">xcl:proceed-case-name <span class="s8">proceed-case</span></p><p class="s8" style="padding-top: 8pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">[Function]</p><p style="padding-top: 8pt;padding-left: 242pt;text-indent: 0pt;line-height: 107%;text-align: left;">Returns the name of the given <i>proceed-case, </i>or nil if it is not named.</p><p class="s41" style="padding-top: 8pt;padding-left: 128pt;text-indent: 0pt;text-align: left;">xcl:default-proceed-tes t <span class="s8">proceed-case-name                </span><span class="s28">[Macro]</span></p><p style="padding-top: 8pt;padding-left: 241pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Returns the default filter function for proceed cases with the given <i>proceed-case-name. </i>May be used with <span class="s41">setf </span>to change it.</p><p class="s41" style="padding-top: 7pt;padding-left: 128pt;text-indent: 0pt;text-align: left;">xcl:default-proceed-report <span class="s8">proceed-case-name             </span><span class="s28">[Macro]</span></p><p style="padding-top: 8pt;padding-left: 242pt;text-indent: 0pt;line-height: 107%;text-align: left;">Returns the default report function for proceed cases with the given <i>proceed-case-name. </i>This may be a</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_317.png"/></span></p><p class="s109" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">80                 <span class="s12">XEROX COM ON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 6pt;text-indent: 0pt;text-align: right;">ERROR SYSTEM</p><p style="padding-left: 44pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_318.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 221pt;text-indent: -1pt;text-align: justify;">string or a function just as for condition types. May be used with setf tochange it.</p><p class="s28" style="padding-top: 9pt;padding-left: 107pt;text-indent: 0pt;text-align: left;">xcl:find-proceed-case     <span class="s8">name                                                [Function]</span></p><p class="s28" style="padding-top: 8pt;padding-left: 221pt;text-indent: 0pt;text-align: justify;">Searches for a proceed case by the given <span class="s8">name </span>which is in the current dynamic contour. This is determined by calling the proceed case&#39;s filter function.</p><p class="s28" style="padding-top: 8pt;padding-left: 220pt;text-indent: 0pt;text-align: left;">If <span class="s8">name </span>is a proceed function name, then the innermost {ie, most recently established) proceed case with that function name that is active is returned. nil is returned if no such proceed case is found.</p><p class="s28" style="padding-top: 8pt;padding-left: 220pt;text-indent: 0pt;text-align: justify;">If name is a proceed case object, then it is simply returned unless it is not currently valid for use. In that case,nilisreturned.</p><p class="s28" style="padding-top: 8pt;padding-left: 107pt;text-indent: 0pt;text-align: left;">xcl: invoke-proceed-case  <span class="s8">proceed-case  </span>&amp;rest  <span class="s8">values            [Function]</span></p><p class="s28" style="padding-top: 8pt;padding-left: 220pt;text-indent: 0pt;text-align: justify;">Transfers control to the given <span class="s8">proceed-case, </span>passing it the given <span class="s8">values. </span>The <span class="s8">proceed-case </span>must be a proceed case object or the name of a proceed case which is valid in the current dynamic context. If the argument is not valid, the error xcl: bad-proceed-case <span class="s15">will </span>be signaled. If the argument is a named proceed case that has a corresponding proceed function, xcl: invoke-proceed-case will do the optional argument resolution specified by that function before transferring control to the proceed case.</p><p class="s28" style="padding-top: 9pt;padding-left: 158pt;text-indent: 0pt;text-align: center;">xcl:catch-abort <span class="s8">print-form </span>&amp;body <span class="s8">forms</span></p><p class="s28" style="padding-top: 8pt;padding-left: 220pt;text-indent: 0pt;text-align: left;">Sets up a proceed case named xcl:abort.</p><p style="padding-top: 9pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">[Macro]</p><p class="s28" style="padding-top: 8pt;padding-left: 221pt;text-indent: 0pt;text-align: justify;">If no call to the proceed function xcl:abort is made while executing <span class="s8">forms </span>and they return normally, all values returned by the last form in <span class="s8">forms </span>are returned. If an xcl:abort transfers control to this xcl:catch-abort, twovalues are returned: nil and the condition that was given to xcl:abort (or nil if none was given).</p><p class="s28" style="padding-top: 8pt;padding-left: 222pt;text-indent: 0pt;text-align: justify;">xcl :catch-abort could be defined by:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 171pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(defmacro xcl:catch-abort (print-form</p><p class="s28" style="padding-left: 190pt;text-indent: 147pt;line-height: 84%;text-align: left;">&amp;body forms) &#39;(xcl:proceed-case (progn ,@forms)</p><p class="s28" style="padding-left: 215pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(xcl:abort (condition)</p><p class="s28" style="padding-left: 233pt;text-indent: 18pt;line-height: 82%;text-align: left;">:report ,print-form (values nil condition))))</p><p style="text-indent: 0pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_319.png"/></span></p><p class="s12" style="padding-top: 43pt;padding-left: 46pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s113">81</span></p><p class="s63" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">ERROR SYSTEM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">Example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 146pt;text-indent: -18pt;line-height: 85%;text-align: left;">(defun read-eval-print-loop (level) (xcl:catch-abort</p><p class="s41" style="padding-left: 183pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(format t &quot;Exit command level <span class="s75">-0. </span><span class="s118">11</span></p><p class="s41" style="padding-left: 247pt;text-indent: 0pt;line-height: 10pt;text-align: left;">level)</p><p class="s41" style="padding-left: 164pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(loop</p><p class="s41" style="padding-left: 183pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(xcl:catch-abort</p><p class="s41" style="padding-left: 220pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(format t</p><p class="s41" style="padding-left: 253pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;Return to command level<span class="s2">- 0 . </span><span class="s119">11</span></p><p class="s41" style="padding-left: 253pt;text-indent: 0pt;line-height: 11pt;text-align: left;">level)</p><p class="s41" style="padding-left: 202pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(print (eval (read)))))))</p><p class="s41" style="padding-top: 7pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">xcl:abort &amp;optional <span class="s8">condition                                                       [Function]</span></p><p style="padding-top: 8pt;padding-left: 180pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This is a predefined proceed function that transfers control to the innermost (dynamic) visible proceed case named <span class="s41">xc1:abort•</span></p><p class="s41" style="padding-top: 7pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">xcl:abort <span class="p">could be defined by:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 196pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(define-proceed-function xcl:abort</p><p class="s41" style="padding-left: 215pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:report &quot;Abort&quot;)</p><p class="s41" style="padding-top: 8pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">xcl:proceed &amp;optional <span class="s8">condition                          [Function]</span></p><p style="padding-top: 8pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This is a predefined proceed function. It is used by such functions as <span class="s41">break,cerror, </span>etc.</p><p class="s41" style="padding-top: 8pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">xcl:use-value &amp;optional <span class="s8">new-value                       [Function]</span></p><p style="padding-top: 8pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This is a predefined proceed function. It is intended to be used for supplying an alternate value to be used in a computation. If <i>new-value </i>is not provided, <span class="s41">xcl:use-value </span>will prompt the user for one.</p><p class="s41" style="padding-top: 8pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">xcl:store-value &amp;optional <span class="s8">new-value                      [Function]</span></p><p style="padding-top: 8pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">This is a predefined proceed function. It is intended to be used for supplying an alternate value to store in some location as a way of proceeding from an error. The proceed function <span class="s41">xcl:store-value </span>does not actually store the new value anywhere: it is up to proceed case to take care of that. If <i>new-value </i>is not provided, <span class="s41">xcl:store-value </span>will prompt the user for one. <span class="s41">xcl:store-value </span>is used by such forms as <span class="s41">check-type </span>and <span class="s41">cerror.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_320.png"/></span></p><p class="s109" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">82                 <span class="s12">XEROX COM ON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">ERROR SYSTEM</p><p style="padding-left: 31pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="296" height="0" alt="image" src="Image_321.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-top: 4pt;padding-left: 31pt;text-indent: 0pt;text-align: left;">Predefined Types</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 93pt;text-indent: 0pt;text-align: left;">xcl:proceed-case                   <span class="s60">[Type]</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="193" height="68" alt="image" src="Image_322.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="484" height="299" alt="image" src="Image_323.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="134" alt="image" src="Image_324.png"/></span></p><p class="s120" style="text-indent: 0pt;text-align: left;">CONDITION</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">SERIOUS-CONDITION</p><p style="text-indent: 0pt;text-align: left;"/><p class="s121" style="text-indent: 0pt;line-height: 67pt;text-align: left;">\</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="padding-left: 99pt;text-indent: 0pt;line-height: 9pt;text-align: center;">-----</p><p class="s120" style="padding-left: 141pt;text-indent: 0pt;line-height: 9pt;text-align: left;">SIMPLE-WARNING</p><p class="s120" style="padding-top: 1pt;padding-left: 25pt;text-indent: 0pt;text-align: left;">DEVICE-ERROR</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s120" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">STORAGE-CONDITI<u>ON &nbsp;&nbsp;&nbsp;&nbsp; </u>  SIMPLE-DEVICE-ERROR</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">CL:ERROR</p><p style="text-indent: 0pt;text-align: left;"/><p class="s123" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">1,,s,,c,-0,c,,,o,</p><p class="s120" style="padding-top: 8pt;text-indent: 0pt;text-align: left;">CRITICAL-STORAGE-CONDITION ATA-TYPES-EXHAUSTED</p><p class="s120" style="padding-top: 3pt;padding-left: 140pt;text-indent: -4pt;line-height: 132%;text-align: left;">ARRAY-SPACE-FULL YMBOL-HT-FULL</p><p class="s120" style="padding-top: 1pt;padding-left: 135pt;text-indent: 0pt;text-align: left;">STORAGE-EXHAUSTED</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 8pt;padding-bottom: 1pt;padding-left: 207pt;text-indent: 0pt;line-height: 159%;text-align: left;">This is the data type used to represent a proceed case. The condition type hierarchy looks like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 207pt;text-indent: 0pt;line-height: 91%;text-align: justify;">All condition types shown in the graph above, and in the one that foiiows, are in the XCL package, unless otherwise qualified.</p><p style="padding-top: 5pt;padding-left: 207pt;text-indent: 0pt;text-align: justify;">The hierarchy continues on the next page.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_325.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 31pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s100">83</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="483" height="625" alt="image" src="Image_326.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="556" height="680" alt="image" src="Image_327.png"/></span></p><p class="s120" style="text-indent: 0pt;text-align: left;">CL:ERROR</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">IL:FORMAT-ERROR</p><p class="s120" style="padding-top: 7pt;text-indent: 0pt;line-height: 147%;text-align: left;">IL:NO-SUCH-DEFINITION IL:INTERLISP-ERROR</p><p class="s120" style="text-indent: 0pt;line-height: 12pt;text-align: left;">PATHNAME-ERROR <span class="s124">--=-- </span>INVALID-PATHNAME</p><p class="s120" style="padding-left: 73pt;text-indent: 0pt;line-height: 8pt;text-align: left;">---.._ FILE-NOT-FOUND</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">ARITHMETIC-ERROR-.:::::-- FLOATING-UNDERFLOW</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">........_ FLOATING-OVERFLOW</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">IL:CALL-ERROR</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">IL:TOO-FEW-ARGUMENTS</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">IL:INVALID-ARGUMENT-LIST</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">IL:TOO-MANY-ARGUMENTS</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">CONTROL-ERROR</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="padding-top: 1pt;text-indent: 0pt;line-height: 74%;text-align: left;">IL:ILLEGAL-STACK-ARG IL:UNDEFINED-CAR-OF-FORM BAO-PROCEEO-CASE</p><p class="s120" style="text-indent: 0pt;line-height: 72%;text-align: left;">ILLEGAL-THROW ILLEGAL-RETURN ILLEGAL-GO</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;line-height: 9pt;text-align: left;">TYPE-ERROR_- TYPE-MISMATCH</p><p class="s120" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: left;">---- SIMPLE-TYPE-ERROR</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">CELL-ERROR</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">IL:INDEX-BOUNDS-ERROR</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="padding-top: 1pt;text-indent: 0pt;line-height: 82%;text-align: left;">IL:STACK-PO!NTER-RELEASEO ATTEMPT-TO-CHANGE-CONSTANT</p><p class="s120" style="padding-top: 5pt;text-indent: 0pt;line-height: 9pt;text-align: left;">UNBOUND-VARIABLE</p><p class="s120" style="text-indent: 0pt;line-height: 9pt;text-align: left;">UNOEFINED-FUNCTION ATTEMPT-TO-RPLAC-NIL</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">HASH-TABLE-FULL</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">IL:UNDEFINED-FUNCTION-IN-APPLY</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">SIMPLE-ERROR</p><p style="text-indent: 0pt;text-align: left;"/><p class="s120" style="text-indent: 0pt;text-align: left;">------ ASSERTION-FAILED</p><p style="text-indent: 0pt;text-align: left;"/><p class="s63" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">ERROR SYSTEM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_328.png"/></span></p><p class="s125" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">84                <span class="s12">XEROX COMON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">ERROR SYSTEM</p><p style="padding-left: 34pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="295" height="0" alt="image" src="Image_329.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">xcl:condition</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">xcl:warning</p><p class="s28" style="padding-top: 4pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">The types that are non-terminals in the above tree: xcl:condition,</p><p class="s28" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">xcl:warning, xcl:serious-condition, xcl:storage-condition, error,</p><p class="s28" style="padding-left: 41pt;text-indent: 0pt;line-height: 12pt;text-align: left;">xcl:control-error, etc.</p><p class="s28" style="padding-left: 32pt;text-indent: -1pt;text-align: justify;">are provided primarily for type inclusion purposes. Normally, they would not be directly instantiated.</p><p class="s28" style="padding-top: 5pt;padding-left: 31pt;text-indent: 0pt;text-align: justify;">!n the descriptions of condition types be!ow, the names in italics on the first line of each description are the names of the slots defined for that condition type.</p><p class="s8" style="padding-top: 10pt;padding-left: 31pt;text-indent: 203pt;text-align: left;">[Condition]</p><p class="s28" style="padding-top: 6pt;padding-left: 32pt;text-indent: 0pt;text-align: justify;">All types of conditions, whether error or non-error, must inherit from this type.</p><p class="s8" style="padding-top: 10pt;padding-left: 31pt;text-indent: 203pt;text-align: left;">[Condition]</p><p class="s28" style="padding-top: 6pt;padding-left: 31pt;text-indent: 0pt;text-align: justify;">All types of warnings should  inherit from this type. This is a subtype of condition.</p><p class="s28" style="padding-top: 9pt;padding-left: 96pt;text-indent: 0pt;text-align: justify;">xcl:serious-condition <span class="s8">[Condition]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 209pt;text-indent: 0pt;text-align: justify;">Any condition, whether error or non-error, which should enter the debugger when signalled but not handled should inherit from this type. This is a subtype of xcl:condition.</p><p class="s28" style="padding-top: 5pt;padding-left: 240pt;text-indent: -29pt;text-align: justify;">Note: ignore-errors will ignore conditions of type error, notof type xcl:serious-condition. Conditions which are serious conditions but not errors are typically those that may require more sophisticated handling than simply being ignored. For example, xcl: ignore-errors will not ignore an xcl:storage-condition, which is a serious condition but is not generally a program error.</p><p class="s28" style="padding-top: 6pt;padding-left: 209pt;text-indent: 0pt;text-align: justify;">Compatibility Note: serious-condition is similar to Zetalisp&#39;s dbg:debugger-condition.</p><p class="s28" style="padding-top: 9pt;text-indent: 0pt;text-align: right;">error</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 81pt;text-indent: 204pt;text-align: left;">[Condition]</p><p class="s28" style="padding-top: 6pt;padding-left: 81pt;text-indent: 0pt;text-align: justify;">All types of error conditions inherit from this condition. This is a subtype of xcl:serious-condition.</p><p class="s28" style="padding-top: 9pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">xcl:simple-condition  <i>format-string   format-arguments         </i><span class="s8">[Condition]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_330.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s100">85</span></p><p class="s65" style="padding-top: 4pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">ERROR SYSTEM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 201pt;text-indent: 0pt;text-align: justify;">Conditions signalled by xcl:signal when given a format string as a first argument are of this type. This is a subtype of xcl:condition.</p><p class="s28" style="padding-top: 9pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">xcl:simple-warning <span class="s8">format-string format-arguments [Condition]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 201pt;text-indent: 0pt;text-align: justify;">Conditions signalled by warn when given a format string as a first argument are of this type. This is a subtype of xcl :warning.</p><p class="s28" style="padding-top: 9pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">xcl:simple-error <span class="s8">format-string format-arguments [Condition]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 201pt;text-indent: 0pt;text-align: justify;">Conditions signalled by error and cerror when given a format string as a first argument are of this type. This is a subtype of error.</p><p class="s28" style="padding-top: 9pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">xcl:storage-condition <span class="s8">[Condition]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 201pt;text-indent: 0pt;text-align: justify;">Conditions which relate to memory overflow conditions should inherit from this type. This is a subtype of xcl:serious-condition.</p><p class="s28" style="padding-top: 9pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">xcl:stack-overflow</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">xcl:control-erro.,.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="text-indent: 203pt;text-align: left;">[Condition]</p><p class="s28" style="padding-top: 6pt;text-indent: 0pt;text-align: justify;">Conditions which relate to stack overflow should inherit from this type. This is a subtype of xcl:storage-condition.</p><p class="s8" style="padding-top: 10pt;text-indent: 203pt;text-align: left;">[Condition]</p><p class="s28" style="padding-top: 6pt;text-indent: 0pt;text-align: justify;">Errors in the transfer of control in a program should inherit from this type. This is a subtype of error.</p><p class="s28" style="padding-top: 9pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">xcl:illegal-throw <span class="s8">tag [Condition]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 201pt;text-indent: 0pt;text-align: justify;">The error which results when throw is given a tag which is not active should inherit from this. This is a subtype of xcl: control-error. <span class="s8">tag </span>is the offending tag.</p><p class="s28" style="padding-top: 9pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">xcl:illegal-go    <span class="s8">tag                                                      [Condition]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 201pt;text-indent: 0pt;text-align: left;">The error which results when go is given a tag which is no longer available should  inherit from this. This is a subtype    of    xcl:control-error.     <span class="s8">tag </span>is the offending tag.</p><p class="s28" style="padding-top: 9pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">xcl:illegal-return <span class="s8">tag [Condition]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 202pt;text-indent: 0pt;text-align: justify;">The error which results when return-from is given a block name which is no longer accessible should inherit from this. This is a subtype of xcl:control-error. <span class="s8">tag </span>is the offending block <span class="p">name.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_331.png"/></span></p><p class="s99" style="padding-top: 1pt;padding-left: 25pt;text-indent: 0pt;text-align: left;">86                 <span class="s12">XEROX COMON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">::RROR SYSTEM</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="574" height="1" alt="image" src="Image_332.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">xcl:stream-error stream <span class="s8">[Condition]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 181pt;text-indent: 1pt;text-align: justify;">Errors which occur during input from or output to a stream should inherit from this type. This is a subtype of error. The function stream-error-stream will access the offending stream.</p><p class="s28" style="padding-top: 8pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:read-error</p><p class="s8" style="padding-top: 9pt;padding-left: 25pt;text-indent: 203pt;text-align: left;">[Condition]</p><p class="s28" style="padding-top: 6pt;padding-left: 24pt;text-indent: 1pt;text-align: justify;">Errors which occur during an input operation on  a stream should inherit from this type. This is a subtype ofxcl:stream-error.</p><p class="s28" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">xcl:end-of-file <span class="s8">[Condition]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The error which results when a read operation is done on a stream which has no more tokens should inherit from this type. This is a subtype of read-error.</p><p class="s28" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">xcl:cell-error name <span class="s8">[Condition]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">Errors which occur while accessing a location should inherit from this type. This is a subtype of error. name is the name of the offending cell.</p><p class="s28" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">xcl:unbound-variable <span class="p">[</span><span class="s8">Condition]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The error which results from trying to access the value of an unbound variable should inherit from this type. This is a subtype of xcl:cell-error.</p><p class="s28" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">xcl:undefined-function <span class="s8">[Condition]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The error which results from trying to access the value of an undefined function should inherit from this type. This is a subtype of xcl:cell-error.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_333.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s109">87</span></p><p class="s54" style="padding-top: 3pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">ERROR SYSTEM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 162pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_334.png"/></span></p><p class="s126" style="padding-top: 1pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">88                                                                        <span class="s12">XEROX COMON LISP IMPLEMENTATION NOTE, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 6pt;text-indent: 0pt;text-align: right;"><a name="bookmark6">MISCELLANEOUS FEATURES</a></p><p style="padding-left: 16pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_335.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 16pt;text-indent: 0pt;line-height: 16pt;text-align: center;"><a name="a65">CHAPTER 25</a></p><p class="s1" style="padding-left: 243pt;text-indent: 0pt;line-height: 16pt;text-align: center;">MISCELLANEOUS FEATURES</p><p style="padding-left: 191pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="344" height="6" alt="image" src="Image_336.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 16pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_337.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_338.png"/></span></p><ol id="l37"><ol id="l38"><li><p class="s71" style="padding-left: 48pt;text-indent: -31pt;line-height: 14pt;text-align: left;"><a name="a66">The Compiler</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 17pt;text-indent: 0pt;text-align: justify;">There are two entry points to the XCL Compiler, one for compiling a single function already in memory, and one for compiling a file full of code.</p><p class="s28" style="padding-top: 9pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">compile  <span class="s8">name </span>&amp;optional definition  &amp;key : lap                          <span class="s8">[Function]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 192pt;text-indent: 0pt;text-align: left;">Works precisely  as defined  in  <span class="s8">Common  Lisp:  the Language.       </span>Xerox   Common    Lisp provides an additional &amp;key parameter : lap which, if non-nil, causes the compiler to pretty-print the Lisp Assembly Program input to *standard-output*. This is the Xerox Lisp equivalent of the assembly-language code produced by compilers for other languages. This code is primarily only of use when debugging the compiler, but users may find it interesting on occasion.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_339.png"/></span></p><p class="s31" style="padding-top: 4pt;padding-left: 17pt;text-indent: 0pt;text-align: left;">Xerox Common <u>Lisp</u> Extensions to Section 25.1</p><p class="s28" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">compile-file <span class="s8">input-file </span>&amp;key :output-file</p><p class="s28" style="padding-left: 234pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:error-file</p><p class="s28" style="padding-left: 234pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:errors-to-terminal</p><p class="s28" style="padding-left: 234pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:lap-file</p><p class="s28" style="padding-left: 234pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:load</p><p class="s28" style="padding-left: 234pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:file-manager-format</p><p class="s28" style="padding-left: 234pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:process-entire-file</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">[Function]</p><p class="s28" style="padding-top: 5pt;padding-left: 193pt;text-indent: 0pt;text-align: justify;">Compiles the forms on <span class="s8">input-file </span>and produces a DFASL file containing the compiled code. The keyword arguments are as follows:</p><p class="s28" style="padding-top: 5pt;padding-left: 173pt;text-indent: 0pt;text-align: left;">:output-file</p><p class="s28" style="padding-top: 4pt;padding-left: 192pt;text-indent: 0pt;text-align: justify;">The  name  of  the   file  on  which  the   DFASL  output should  be written.  Defaults to  <span class="s8">input-file  </span>but with the extension  <span class="s127">II  </span>dfasl.<span class="s127">11</span></p><p class="s28" style="padding-top: 5pt;padding-left: 173pt;text-indent: 0pt;text-align: left;">:error-file</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 17pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_340.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s100">89</span></p><p class="s54" style="padding-top: 5pt;padding-left: 43pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 218pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The  name  of  the  file  on  which  warnings  and  error messages from the compiler should be printed.  If the value is nil,themessages will not be saved on  a file. If the value is t,  the  file name is <i>input-file </i>but with the extension &quot;log.&quot;  The default value is nil.</p><p style="padding-top: 6pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">:errors-to-terminal</p><p style="padding-top: 5pt;padding-left: 218pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If non-nil, warnings and error messages from the compiler will, in addition to being saved on any error file, be printed on *error-output*, usually bound to a display stream. Defaults to t.</p><p style="padding-top: 6pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">:lap-file</p><p style="padding-top: 5pt;padding-left: 217pt;text-indent: 0pt;text-align: justify;">If an explicit file name is given as the value for</p><p style="padding-left: 217pt;text-indent: 1pt;line-height: 107%;text-align: justify;">: lap-file, thecompiler will pretty-print all Lisp Assembly Program (LAP) input to that file before sending the LAP input to the assembler. If the value is t, the file name is <i>input-file </i>but with the extension &quot;dlap.&quot; If the value is nil, noLAP code will be printed. The default value is nil.</p><p style="padding-top: 6pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">:load</p><p style="padding-top: 5pt;padding-left: 218pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If non-nil, all code will be loaded into the environment after it is compiled. If the value is</p><p style="padding-left: 217pt;text-indent: 1pt;line-height: 107%;text-align: justify;">: save, then any previous contents of changed function definition cells will be saved on the il: expr property of the symbol. This saving will not be done if the symbol has a File Manager functions definition.</p><p style="padding-top: 5pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">:file-manager-format</p><p style="padding-top: 5pt;padding-left: 218pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If non-nil, thecompiler will assume that <i>input-file </i>is produced by the File Manager and will process it accordingly. The default value is t if (and only if) the first non-blank character on the <i>input-file </i>is&quot;(&quot; (a left parenthesis).</p><p style="padding-top: 6pt;padding-left: 217pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If nil, thecompiler will assume that the file is a standard Common Lisp source file produced by a text editor, either in Xerox Lisp or in another implementation.</p><p style="padding-top: 6pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">:process-entire-file</p><p style="padding-top: 4pt;padding-left: 218pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If non-nil, thecompiler will read through the entire file, looking for implicitly or explicitly ( eval-when (compile) ••• ) forms, evaluating them as it finds them. Afterwards, the forms on the file will be compiled. This behavior allows the user to put macros, proclamations, and other compile-time forms anywhere on the file, not necessarily before any uses</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 43pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_341.png"/></span></p><p class="s99" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">90                <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 5pt;text-indent: 0pt;text-align: right;">MISCELLANEOUS FEATURES</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_342.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 12pt;text-align: left;">of them. This option defaults to the value of the</p><p class="s28" style="padding-left: 182pt;text-indent: 0pt;line-height: 12pt;text-align: left;">: file-manager-format option.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Supported<span class="s28"> Features of the </span>Interlisp Compiler</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="586" height="1" alt="image" src="Image_343.png"/></span></p><p class="s28" style="padding-top: 4pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The XCL Compiler will  compile programs written in Common Lisp, Interlisp, or a combination of the two. In particular, the following features of the old Interlisp Compiler are supported by the XCL Compiler (refer to the <span class="s8">Inter/ isp Reference Manual </span>for details on their use):</p><ul id="l39"><li><p class="s28" style="padding-top: 6pt;padding-left: 192pt;text-indent: -11pt;text-align: left;">il:localvars,il:globalvars,and il: specvars declarations</p></li><li><p class="s28" style="padding-top: 6pt;padding-left: 192pt;text-indent: -11pt;text-align: left;">The           special            forms il:deferredconstant il:loadtimeconstant</p></li><li><p class="s28" style="padding-top: 6pt;padding-left: 192pt;text-indent: -11pt;text-align: left;">The        lists    i 1: nlama, il:dontcompilefns</p></li><li><p class="s28" style="padding-top: 6pt;padding-left: 192pt;text-indent: -11pt;text-align: left;">Block compilation</p><p class="s28" style="padding-top: 5pt;text-indent: 0pt;line-height: 12pt;text-align: right;">il: constant,</p><p class="s28" style="text-indent: 0pt;line-height: 12pt;text-align: right;">and</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">il:nlaml      and</p></li><li><p class="s28" style="padding-top: 6pt;padding-left: 191pt;text-indent: -10pt;text-align: left;">Macros defined on the il :macro property of a symbol</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Unsupported<span class="s31"> Features of the </span>Interlisp Byte Compiler</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_344.png"/></span></p><p class="s28" style="padding-top: 4pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">The XCL Compiler does not support the following features of the old Interlisp Compiler:</p></li><li><p class="s28" style="padding-top: 6pt;padding-left: 191pt;text-indent: -10pt;text-align: justify;">The XCL Compiler will not ask the user any of the questions asked by the Interlisp Compiler. The function il: compset is never called.</p></li><li><p class="s28" style="padding-top: 5pt;padding-left: 191pt;text-indent: -10pt;line-height: 12pt;text-align: justify;">The function il :dassem. savelocalvars <span class="s31">is never</span></p><p class="s28" style="padding-left: 64pt;text-indent: 0pt;line-height: 12pt;text-align: center;">called.</p></li><li><p class="s28" style="padding-top: 6pt;padding-left: 191pt;text-indent: -10pt;text-align: justify;">The variable il:compileuserfn is never examined. The compilation of Interlisp&#39;s iterative statements and IF-THEN-ELSE statements is achieved through the normal macro-expansion process.</p></li><li><p class="s28" style="padding-top: 6pt;padding-left: 191pt;text-indent: -10pt;text-align: justify;">Macros defined on the il: dmacro or il: bytemacro properties of symbols are ignored by the XCL Compiler. The new xcl :defoptimizer facility should be used instead (see below).</p></li><li><p class="s28" style="padding-top: 6pt;padding-left: 191pt;text-indent: -10pt;text-align: justify;">The list il: compiletypelst is not consulted. Non-list, non-symbol data encountered during compilation are treated as though they had been quoted; that is, such data are considered self-evaluating.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_345.png"/></span></p><p class="s12" style="padding-top: 40pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP !MPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s128">91</span></p><p class="s29" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_346.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l40"><li><p style="padding-top: 4pt;padding-left: 190pt;text-indent: -10pt;line-height: 107%;text-align: justify;">The variable <span class="s40">il: dwimifycompf lg  </span>is not consulted. The XCL Compiler does not call the <span class="s40">il: dwimify </span>function and thus does not properly treat code that requires such treatment.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="568" height="2" alt="image" src="Image_347.png"/></span></p><p class="s74" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="a67">Compiler Optimizers:</a><span class="s73"> The XCL:Defoptimizer Facility</span></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="582" height="1" alt="image" src="Image_348.png"/></span></p><p style="padding-top: 8pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Xerox Lisp provides a facility that allows you to advise the compiler about efficient compilation of certain functions and macros. This facility works both with the old Interlisp Compiler and with the new XCL Compiler.</p><p style="padding-top: 4pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">An <span class="s76">optimizer </span>is, to a rough approximation, a macro that is only invoked at compile-time and which takes precedence over any normal macro definition that might <span class="s24">exist </span>for the form. Unlike normal macros, optimizers should not  be used for the definition of new language features; they are only understood by the compiler and thus will not be recognized in interpreted code. The usual paradigm involves the use of <span class="s40">defun </span>or <span class="s40">defmacro </span>to define the general case of a new form and the definition of optimizers to take advantage of common special cases.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">Optimizers have access to the lexical environment and <span class="s76">compilation-context </span>of the form. The latter is a representation of certain information about the use to which the value of the form will be put; for example, whether or not the value will be used and, if so, how many values are expected.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The compiler uses optimizers to encode many of the source-to-source transformations it employs; you can add to this store of knowledge to achieve improved performance of both built-in Xerox Common Lisp constructs and new, user-written ones.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The compilers also provide a set of facilities for accessing the information carried in the lexical environment objects passed to macros and optimizers via the &amp;environment lambda-list keyword. It is possible both to make queries on that object and to create new ones which only differ on a given set of names.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_349.png"/></span></p><p class="s113" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">92                                                                           <span class="s29">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 4pt;padding-left: 328pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_350.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Defining optimizers</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 109%;text-align: left;">New optimizers are defined using the following macro:</p><p class="s8" style="padding-top: 3pt;padding-left: 75pt;text-indent: 0pt;line-height: 17pt;text-align: center;"><span class="s19">xcl:defoptimizer </span>form-name [opt-name] [arg-list [decl <span class="s59">I </span>doc-string]* body]</p><p class="s28" style="text-indent: 0pt;line-height: 12pt;text-align: right;">[Macro]</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;"><i>form-name </i>is an optional symbol which is the <span class="s19">car </span>of forms to which this optimizer should be applied.</p><p class="s60" style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 108%;text-align: justify;">opt-name <span class="p">is a symbol used as the name of the function created to perform the optimization (for purposes of breaking, advising, etc.).</span></p><p class="s8" style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;line-height: 106%;text-align: justify;">arg-list <span class="p">is a standard defmacro argument list, allowing the usual &amp;environment keyword and one more: </span><span class="s19">&amp;context </span>ctxt. ctxt <span class="p">is a variable to be bound to a value that can be queried for information about the evaluation context of  the form. For example, it is possible to determine whether or not the given form is being evaluated for effect or value. Some optimizers produce different expansions under different conditions.</span></p><p style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The <i>arg-list </i>and <i>body </i>may be simultaneously omitted, in which case <i>opt-name </i>should name a previously-defined  function of three arguments: a form, an environment object, and a compilation context. Previously-defined optimizers may be used for this purpose, allowing the user to specify a single optimizer for a large number of kinds of forms.</p><p style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;line-height: 106%;text-align: justify;">It is possible for more than one optimizer to be defined for the same <i>form-name; </i>new ones are added to a list and do not replace any previous ones. The only exception to this is when a new optimizer is defined for the same <i>form-name </i>and <i>opt-name </i>as an earlier one; in this case, the old optimizer is replaced by the new one. Note that no guarantees are made about the order of the optimizers in the list; optimizations should not depend upon whether or not other optimizations have been performed.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">The <span class="s19">xcl:defoptimizer </span>form produces a File Manager definition of type optimizers. The name of the definition is the list <i>(form-name </i><span class="s19">:optimized-by </span><i>opt-name) </i>unless no <i>opt-name </i>was given, in which case the definition is named simply <i>form-name.</i></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">The compiler, in considering a new form, first looks to see if  any optimizers are defined for the <span class="s19">car </span>of the</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_351.png"/></span></p><p class="s12" style="padding-top: 38pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s100">93</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_352.png"/></span></p><p class="s12" style="padding-top: 3pt;padding-left: 80pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s82" style="padding-left: 79pt;text-indent: 0pt;text-align: left;"><a name="a68">Examples</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 127pt;text-indent: 0pt;text-align: justify;">form. <span class="s129">If </span>so, they are each applied in turn. An optimizer may refuse to change the form by returning any one of the following three values:</p><ol id="l41"><li><p style="padding-top: 6pt;padding-left: 137pt;text-indent: -9pt;text-align: left;">The symbol compiler:pass.</p></li><li><p style="padding-top: 7pt;padding-left: 137pt;text-indent: -10pt;line-height: 107%;text-align: justify;">A form eq to the given one. To do this, the argument-list of the optimizer must have specified the &amp;whole keyword.</p></li><li><p style="padding-top: 6pt;padding-left: 137pt;text-indent: -10pt;line-height: 106%;text-align: justify;">The symbol il: ignoremacro. This is provided purely for backward compatibility with lnterlisp-D macros.</p></li></ol><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If an optimizer returns one of these values, the compiler will move on to the next one on the list. Whenever an optimizer does not return one of these (that is, it actually performs an optimization), the compiler begins the whole process anew, starting with the first optimizer on the list for the new car of the returned form. This allows optimizers to produce forms which themselves have optimizers.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If all of the optimizers on the list have refused to change the form, the compiler will finally check for an ordinary macro definition, as produced by defmacro. This priority of optimizers over macros allows you to put optimizers on macros.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 127pt;text-indent: 0pt;line-height: 109%;text-align: justify;">The following simple optimizer changes (eq <i>form </i>nil) into (not form}:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: -22pt;line-height: 90%;text-align: left;">(xcl:defoptimizer  eq eq-nil-check  (&amp;whole  form) (cond  ((eq nil   (second form))</p><p style="padding-left: 98pt;text-indent: 30pt;line-height: 92%;text-align: left;">&#39;(not  ,(third form))) ((eq nil   (third form))</p><p style="padding-left: 128pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&#39;(not ,(second form)))</p><p class="s19" style="padding-left: 98pt;text-indent: 0pt;line-height: 11pt;text-align: left;">( t <span class="s3">form)))</span></p><p style="padding-top: 4pt;padding-left: 127pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Note the return of the input form as a refusal to apply the optimization. A slightly more complex optimizer, actually in use in the system, open codes calls to the function nth when given a small integer argument:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 61pt;text-indent: -24pt;line-height: 90%;text-align: left;">(xcl:defoptimizer nth (n-form list-form) (if (and (typep n-form &#39;fixnum)</p><p style="padding-left: 116pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(&lt;=On-form <span class="s57">10))</span></p><p style="padding-left: 85pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&#39;(car ,(let ((cdr-form list-form))</p><p style="padding-left: 148pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(dotimes (i ,n-form cdr-form)</p><p style="padding-left: 86pt;text-indent: 80pt;line-height: 92%;text-align: left;">(setq cdr-form  &#39;(cdr ,cdr-form))))) &#39;compiler:pass))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 80pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_353.png"/></span></p><p class="s109" style="padding-top: 1pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">94                             <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">MISCELLANEOUS FEATURES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_354.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="577" height="1" alt="image" src="Image_355.png"/></span></p><p class="s130" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Operations<span class="s131"> on </span>Compilation<span class="s131"> Contexts</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;line-height: 107%;text-align: justify;">Optimizers can arrange to be passed a <i>compilation-context </i>argument. This value encodes information about the position of the given form in the code around it. The following functions can access that information (all of these functions are in the compiler package). For brevity in what follows, we will refer to &quot;the form&quot;, meaning the form that was passed to the optimizer along with the given context.</p><p style="padding-top: 8pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">compiler:   context-top-level-p  <i>ctxt                                     [Function]</i></p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Returns true if and only if the form appears at &quot;top level&quot; in the file being compiled.</p><p style="padding-top: 9pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">compiler: context-values-used <i>ctxt                                     [Function]</i></p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Returns the number of values the surrounding code expects from the form. This is <span class="s47">O </span>if the form will be evaluated for effect, a positive integer if a specific number of values are expected, and : unknown if the compiler is unable to tell how many will be used. Forms providing the returned value of a function or occurring in the arguments to the multiple-value-call special form can cause this latter condition.</p><p style="padding-top: 8pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">compiler:  context-predicate-p  <i>ctxt                                     [Function]</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Returns true if and only if the form appears in a context in which only the nil-ness of the value is used, as in the predicate position of an <span class="s40">if. </span>In general, context-predicate-p will only be true of contexts for which context-values-used returns 1.</p><p style="padding-top: 9pt;padding-left: 67pt;text-indent: 0pt;line-height: 11pt;text-align: left;">make-context &amp;key (top-level-p nil)</p><p style="padding-left: 179pt;text-indent: 0pt;line-height: 90%;text-align: left;">(values-used :unknown) (predicate-p nil)</p><p class="s8" style="padding-top: 8pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Examples</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;line-height: 109%;text-align: justify;">Creates a new context object with the given properties.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_356.png"/></span></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Information about the context of a form can come in handy for functions that return multiple values. For example, the following might be a worthwhile optimizer on the floor function, which normally returns two values: the result of the rounding and the remainder. This code checks for the (frequent) case in</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_357.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s100">95</span></p><p class="s54" style="padding-top: 3pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 213pt;text-indent: 0pt;text-align: justify;">which the remainder is unused and translates the call to <span class="s41">floor </span>into a call on a (hypothetical) lower-level function which does not compute it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 124pt;text-indent: -24pt;line-height: 85%;text-align: left;">(xcl:defoptimizer floor (&amp;whole form &amp;context ctxt) (if <span class="s3">(=  </span>(context-values-used ctxt) 1) &#39;(lisp::%div-floor ,@(cdr form))   &#39;compiler: pass))</p><p style="padding-top: 7pt;padding-left: 212pt;text-indent: 0pt;text-align: justify;">Another example uses the context of a call to <span class="s41">intersection </span>to decide whether or not it is really necessary to cons together the result; if the call is being used as a predicate, a faster and more storage-efficient version can be substituted instead:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 173pt;text-indent: -73pt;line-height: 87%;text-align: left;">(xcl:defoptimizer intersection intersection-predicate (&amp;whole form &amp;context ctxt)</p><p class="s41" style="padding-left: 124pt;text-indent: 0pt;line-height: 84%;text-align: left;">(if (context-predicate-p ctxt) &#39;(lisp::%share-a-member-p ,@(cdr form)) form))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">Operations<span class="s31"> </span>on Lexical Environment Objects</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 213pt;text-indent: 0pt;text-align: justify;">The <span class="s41">&amp;environment </span>values optionally passed to macros and optimizers are entirely unspecified in Common Lisp. No operations exist on them and it is not possible for the user to create or change one. It is frequently the case that an optimizer can produce better expansions given· access _to the lexical</p><p style="padding-left: 213pt;text-indent: 0pt;line-height: 107%;text-align: justify;">environment information contained in such values. The following functions implement that access:</p><p class="s41" style="padding-top: 9pt;padding-left: 100pt;text-indent: 0pt;text-align: left;">compiler:env-boundp <span class="s8">env var                               </span><span class="s60">[Function]</span></p><p style="padding-top: 9pt;padding-left: 213pt;text-indent: 0pt;text-align: justify;">Returns : <span class="s41">global, :special </span>or : <span class="s41">lexical, </span>as appropriate, if the symbol <i>var </i>is either bound or declared as a variable in the environment <i>env. </i>If <i>var </i>is not bound or declared in a lexically-apparent place, <span class="s41">env-boundp </span>returns <span class="s41">nil.</span></p><p class="s41" style="padding-top: 8pt;padding-left: 100pt;text-indent: 0pt;text-align: left;">compiler: env-fboundp <span class="s8">env fn                                 </span><span class="s60">[Function]</span></p><p style="padding-top: 9pt;padding-left: 213pt;text-indent: 0pt;text-align: left;">Returns either : <span class="s41">function </span>or <span class="s41">:macro, </span>as appropriate, if and only if the symbol <i>fn </i>is bound as a function (in <span class="s41">flet </span>or <span class="s41">labels) </span>or macro (in <span class="s41">macrolet} </span>in the environment <i>env. </i>If <span class="s41">:macro </span>is returned, then a second value is also returned, the expansion function for the macro definition. If <i>fn </i>is not bound in a lexically-apparent place, <span class="s41">env-fboundp </span>returns nil.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 39pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_358.png"/></span></p><p class="s108" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">96                                                                      <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 5pt;text-indent: 0pt;text-align: right;">MISCELLANEOUS FEATURES</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="573" height="1" alt="image" src="Image_359.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 69pt;text-indent: 0pt;text-align: left;">compiler:make-empty-env                                                           <span class="s8">[Function]</span></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns an environment on which <span class="s19">env-boundp </span>and</p><p class="s19" style="padding-left: 182pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">env-fboundp <span class="p">always return </span>nil.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">compiler: copy-env-wi th-var <span class="s8">env var </span>&amp;optional <span class="s8">(kind: </span>lexical)</p><p class="s8" style="text-indent: 0pt;text-align: right;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: 0pt;text-align: justify;">Returns a copy of <i>env </i>in which the symbol <i>var </i>is bound as a variable of kind <i>kind. </i>It is an error for <i>kind </i>to be <span class="s19">nil </span>or a value not returnable by <span class="s19">env-boundp. </span>The <i>env </i>may  be given as <span class="s19">nil, </span>in which case it is equivalent to passing the result of calling <span class="s19">rnake-empty-env.</span></p><p class="s19" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">compiler: copy-env-wi th-fn <span class="s8">env fn </span>&amp;optional <span class="s8">(kind: </span>function)</p><p class="s8" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">exp-fn</p><p class="s8" style="text-indent: 0pt;text-align: right;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: 0pt;text-align: justify;">Returns a copy of <i>env </i>in which the symbol <i>fn </i>is bound as a function or macro, depending upon the value of <i>kind. </i>It is an error for <i>kind </i>to be <span class="s19">nil </span>or a value not returnable by <span class="s19">env-fboundp. </span>If <i>kind </i>is <span class="s19">:macro, </span>then <i>exp-fn, </i>an expansion function taking a form and an environment and returning a new form, must be provided. The <i>env </i>may be given as <span class="s19">nil, </span>inwhich case it is equivalent to passing the result of calling <span class="s19">make-ernpty-env.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s82" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="a69">Expanding Compiler Optimizers</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The following two functions are available for use in expanding compiler optimizers under program control.</p><p class="s19" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">cornpi ler:optirni ze-and-macroexpand <span class="s8">form env ctxt</span></p><p class="s19" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">cornpiler:optimize-and-rnacroexpand-1 <span class="s8">form env ctxt</span></p><p class="s8" style="padding-top: 9pt;padding-left: 34pt;text-indent: 0pt;line-height: 190%;text-align: left;">[Function] [Function]</p><p style="padding-left: 181pt;text-indent: 0pt;text-align: justify;">Analagous to the functions <span class="s19">rnacroexpand </span>and <span class="s19">rnacroexpand-1 </span>of Common Lisp, these entries into the compiler perform expansion of compiler optimizers and normal macros on the given form. The first function will apply such expansions until none are possible while the second will expand the form at most once. Both functions return two values: the new form (or the old one if nothing was done) and either <span class="s19">t </span>or <span class="s19">nil, </span>depending upon whether or not any expansions actually took place.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_360.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s110">97</span></p><p class="s12" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_361.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="567" height="1" alt="image" src="Image_362.png"/></span></p></li><li><p class="s71" style="padding-left: 72pt;text-indent: -31pt;text-align: left;"><a name="a70">Documentation</a></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_363.png"/></span></p><p style="padding-top: 7pt;padding-left: 214pt;text-indent: 0pt;text-align: left;">Anything          that          was          created          with</p><p class="s19" style="padding-left: 215pt;text-indent: 0pt;text-align: left;">xcl :def-define-type <span class="p">can have documentation.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="2" alt="image" src="Image_364.png"/></span></p></li><li><p class="s132" style="padding-left: 71pt;text-indent: -31pt;line-height: 14pt;text-align: justify;"><a name="a71">Debu</a><span class="s71">gging Tools</span></p><p class="s21" style="padding-top: 11pt;padding-left: 39pt;text-indent: 0pt;text-align: justify;">Breaking, Tracing<span class="s23"> and </span>Advising:<span class="s23"> the </span>Wrappers Facility</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="585" height="1" alt="image" src="Image_365.png"/></span></p><p style="padding-top: 4pt;padding-left: 214pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Xerox Common Lisp greatly extends the trace facility described in <i>Common Lisp: the Language </i>and adds two more extremely useful tools for debugging: setting breakpoints and advising existing functions. Collectively, these three tools are known as the <i>Wrappers </i>faciIity.</p><p class="s82" style="padding-top: 8pt;padding-left: 39pt;text-indent: 0pt;text-align: justify;"><a name="a72">Concepts</a><span class="s18"> Common to </span>Breaking, Tracing<span class="s18"> and </span>Advising</p><p style="padding-left: 39pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="583" height="0" alt="image" src="Image_366.png"/></span></p><p style="padding-top: 4pt;padding-left: 214pt;text-indent: 0pt;line-height: 107%;text-align: justify;">As might be guessed from the name, the Wrappers facility works by encapsulating a named function definition in a new function. The new function can control when and how the original function is called and can specify other actions to occur around that call. The different aspects of the Wrappers facility (breaking, tracing and advising) specify different sets of actions, depending upon their individual semantics. For example,1:he tracing facility simply arranges to print out certain information before and after calling the original function. All encapsulating code, including any provided by the user, is compiled before installation. Thus, little or no performance penalty is paid for use of the Wrappers facility. Note that, if the original function is running interpreted, it will remain so; only the encapsulation will be compiled.</p><p style="padding-top: 5pt;padding-left: 214pt;text-indent: 0pt;line-height: 106%;text-align: justify;">There are two ways to specify the function upon which the Wrappers facility will operate. In the simpler of the two, the user passes a symbol naming the function. All calls to this function, from anywhere in the system, will be affected by the encapsulation. For cases in which such a widespread effect would be either unsafe or otherwise undesirable, the user may specify the precise set of functions whose calls should be affected. The <span class="s23">:in </span>argument to the Wrappers functions is used for specifying this list. For example, to have tracing output printed every time the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_367.png"/></span></p><p class="s133" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">98                              <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="text-indent: 0pt;text-align: right;">MISCELLANEOUS FEATURES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="595" height="0" alt="image" src="Image_368.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">function <b>foo </b>is called from any of the functions <b>bar, baz, </b>and <b>bax, </b>the following call should be used:</p><p class="s41" style="padding-top: 4pt;padding-left: 159pt;text-indent: 0pt;text-align: left;">(xcl:trace-function &#39;foo :in &#39;(bar baz bax))</p><p style="padding-top: 3pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The :in argument may be given as a symbol if only one function is to be specified.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The breaking and advising aspects of the Wrappers facility allow for the specification of arbitrary expressions to be evaluated under certain conditions. Such expresions are evaluated in a lexical environment that depends upon the kind of function being wrapped. The following lays out the rules for determining what variables are lexically available:</p><p class="s17" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Interlisp<span class="s15"> </span>functions: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p class="s20" style="padding-top: 6pt;padding-left: 129pt;text-indent: 0pt;text-align: justify;">lambda spread functions (ARGTYPE O<span class="p">)</span></p><p style="padding-top: 2pt;padding-left: 180pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Expressions in wrapped lambda spread functions may refer to and set any of the arguments to the original function by the names given in the original function&#39;s definition.</p><p class="s20" style="padding-top: 6pt;padding-left: 129pt;text-indent: 0pt;text-align: justify;">NLambda spread functions (ARGTYPE 1<span class="p">)</span></p><p style="padding-top: 2pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">As with lambda spread functions, expressions in wrapped nlambda spread functions may refer to and set any of the arguments to the original function by the names given in the original function&#39;s definition.</p><p class="s20" style="padding-top: 5pt;padding-left: 129pt;text-indent: 0pt;text-align: justify;">lambda no-spread functions {ARGTYPE 2)</p><p style="padding-top: 2pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Because compiling a lambda no-spread loses information, the lexical environment of expressions in  wrapped lambda no-spread functions is different for the interpreted and compiled cases.</p><p style="padding-top: 1pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: left;">When the original function is interpreted, expressions may refer to the named parameter specified in the function definition. The Interlisp functions <b>il:arg </b>and <b>il:setarg </b>may be used with that parameter to examine and change the arguments that were passed to the wrapped function and will be passed to the original function.</p><p style="padding-top: 1pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">When the original function is compiled, the name of the original parameter has, in general, been lost. As a result, expressions must use the name <b>il:u </b>instead of the one used in the original function&#39;s definition. As in the interpreted case, this variable may be passed to <b>il:arg </b>and <b>il:setarg </b>to access and change the arguments.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_369.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                            <span class="s134">99</span></p><p class="s54" style="padding-top: 4pt;padding-left: 17pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p class="s20" style="padding-top: 18pt;padding-left: 140pt;text-indent: 0pt;text-align: justify;">Nlambda<span class="p"> </span>no-spread functions (ARGTYPE 3)</p><p style="padding-top: 2pt;padding-left: 192pt;text-indent: 0pt;line-height: 108%;text-align: justify;">Expressions in wrapped nlambda no-spread functions may refer to and set the argument using the name given in the original function&#39;s definition.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Common Lisp<span class="s15"> </span>functions: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="padding-top: 6pt;padding-left: 191pt;text-indent: 0pt;text-align: justify;">Because of semantic difficulties involving the treatment of <span class="s56">&amp;optional </span>and <span class="s56">&amp;key </span>parameters with default values and associated supplied-p parameters, expressions in wrapped Common Lisp functions have access to the arguments via the single <span class="s56">&amp;rest </span>parameter <span class="s56">xcl:arglist. </span>The elements of this list may be examined and the value of <span class="s56">xcl:arglist </span>changed in order to modify the arguments that will be passed to the original function. In the Lyric release of <b>Xerox </b>Lisp, it is safe to destructively modify the list in <span class="s56">xcl:arglist; </span>it is guaranteed to be freshly-consed and thus not to share structure with any other list.</p><p style="padding-top: 7pt;padding-left: 191pt;text-indent: 0pt;line-height: 107%;text-align: justify;">As an example, consider a function with the following parameter list:</p><p class="s56" style="padding-top: 5pt;padding-left: 201pt;text-indent: 0pt;text-align: left;">{a &amp;optional b &amp;rest c &amp;key de)</p><p style="padding-top: 4pt;padding-left: 191pt;text-indent: 0pt;line-height: 107%;text-align: justify;">An expression in a wrapped version of  this function could use the following expressions to discover the values of the five different parameters:</p><ol id="l42"><li><p class="s56" style="padding-top: 7pt;padding-left: 234pt;text-indent: -42pt;text-align: left;">(first xcl:arglist)</p></li><li><p class="s56" style="padding-left: 295pt;text-indent: -103pt;line-height: 106%;text-align: left;">(if (null (cdr xcl:arglist)) nil</p><p class="s56" style="padding-left: 293pt;text-indent: 0pt;text-align: left;">(second xcl:arglist))</p></li><li><p class="s56" style="padding-top: 6pt;padding-left: 234pt;text-indent: -42pt;text-align: left;">(cddr xcl:arglist)</p></li><li><p class="s56" style="padding-left: 191pt;text-indent: 0pt;line-height: 110%;text-align: left;">(getf (cddr xcl:arglist) :d) e     (getf (cddr xcl:arglist) :e)</p></li></ol><p style="padding-top: 4pt;padding-left: 191pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The following expression could be used to provide the value 17 for <span class="s58">b </span>in the case where no value was supplied:</p><p class="s56" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;line-height: 93%;text-align: left;">(if (null (cdr xcl:arglist))        ; b was not supplied</p><p class="s56" style="padding-left: 127pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(setq xcl:arglist (list (first xcl:arglist)</p><p class="s3" style="padding-left: 277pt;text-indent: 0pt;line-height: 10pt;text-align: left;">17)))</p><p style="padding-top: 5pt;padding-left: 191pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Finally, the following expression could be used after the one above to either provide the value O for the : <span class="s58">d </span>keyword if none was supplied or to increase by 1 the value that was supplied:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 16pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_370.png"/></span></p><p class="s100" style="padding-top: 1pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">100                                                                    <span class="s12">XEROX COMMON LiSP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 6pt;padding-left: 329pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="584" height="1" alt="image" src="Image_371.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 104pt;text-indent: -55pt;line-height: 94%;text-align: left;">(cond  ((null  (cddr   xcl:arglist))     ; No keywords were supplied (setq xcl:arglist (nconc xcl:arglist (list :d <span class="s57">0))))</span></p><p style="padding-left: 86pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((null (getf (cddr xcl:arglist) :d))</p><p style="padding-left: 272pt;text-indent: 0pt;line-height: 11pt;text-align: left;">; There are keywords, but</p><p style="padding-left: 104pt;text-indent: 167pt;line-height: 90%;text-align: left;">; not :d. (setf (getf (cddr xcl:arglist) :d)</p><p class="s3" style="padding-left: 141pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0))</p><p style="padding-left: 85pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(t                                                 ; The keyword :d was</p><p style="padding-left: 104pt;text-indent: 167pt;line-height: 88%;text-align: left;">; supplied. (incf (getf (cddr xcl:arglist) :d))))</p><p style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The mechanism for accessing arguments to wrapped Common Lisp functions may be revised in a future release.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Breaking: Setting Debugger<span class="s31"> </span>Breakpoints &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Common Lisp provides only one way for a user to intentionally and cleanly enter the debugger, the function break. While it is possible for users to insert calls to this function at desired locations in their code,</p><p style="padding-left: 180pt;text-indent: -12pt;line-height: 106%;text-align: justify;">· this is not generally convenient, especially when the code to contain the breakpoint is compiled or was written by others, such as Xerox Lisp system code. The breakpoint facility allows the user to specify a function as described above and arranges for calls to that function to enter the debugger before actually making the call. The user can then  examine the arguments passed to the function and the general state of the computation. Afterwards, the debugger&#39;s ok command can be used to continue the computation by executing the originally-intended function-call. Alternatively, the user could choose to abort the computation using the <span class="s28">j </span>command or other means. This style of setting breakpoints is known as <i>breaking </i>the designated function.</p><p style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;line-height: 106%;text-align: justify;">It is sometimes desirable to exert some control over whether or not a particular breakpoint activates (i.e., actually enters the debugger) before calling the function. The breaking facility allows for the specification of an arbitrary expression to be evaluated to determine whether or not the debugger entry should occur. If the given expression returns a non-nil value, the debugger is entered as usual. Otherwise, the program behaves as if no,breakpoint were set and calls the broken function. Such conditionalizing expressions are known as <i>break-when </i>expressions. The lexical environment</p><p style="padding-left: 181pt;text-indent: -16pt;line-height: 107%;text-align: justify;">. available to break-when expressions is as described in the general discussion of Wrappers above.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_372.png"/></span></p><p class="s12" style="padding-top: 29pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYR!C RELEASE                                                                          <span class="s113">101</span></p><p class="s54" style="padding-top: 5pt;padding-left: 71pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 245pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The breaking facility allows the specification of a special kind of breakpoint, the <i>one-shot </i>breakpoint. Such breakpoints are guaranteed to activate exactly once, the first time they are encountered. This feature can be extremely useful when setting breakpoints in functions used by the debugger, such as those that open windows, compute backtraces, etc. If a normal breakpoint was used, an infinite recursion would result, with the debugger repeatedly calling itself in order to respond to the breakpoint. One-shot breakpoints avoid this problem.</p><p style="padding-top: 9pt;padding-left: 133pt;text-indent: 0pt;text-align: left;">xcl :break-function <i>fn-to-break  </i>&amp;key  : in   ( :when  t)           <i>[Function]</i></p><p style="padding-top: 7pt;padding-left: 245pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Breaks the designated <i>fn-to-break </i>as described earlier, unbreaking it first if it was already broken. The : in argument may be used as specified in the general Wrappers description above. The : when argument is used for specifying a break-when expression; the expression defaults to <span class="s19">t. </span>If the</p><p style="padding-left: 245pt;text-indent: 1pt;line-height: 107%;text-align: justify;">: when argument is given as : once, a one-shot breakpoint is installed.</p><p style="padding-top: 9pt;padding-left: 132pt;text-indent: 0pt;text-align: left;">xcl:unbreak-function <i>fn-to-unbreak </i>&amp;key : in : no-error <i>[Function]</i></p><p style="padding-top: 7pt;padding-left: 245pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Restores the designated <i>fn-to-unbreak </i>to its original, unbroken state. The : in argument may be used as specified in the general Wrappers description above. If the designated function is not broken, an error message is printed, unless the : no-error argument is specified and non-nil.</p><p style="padding-top: 9pt;padding-left: 132pt;text-indent: 0pt;text-align: left;">xcl:rebreak-function  <i>fn-to-rebreak   </i>&amp;key   : in                     <i>[Function]</i></p><p style="padding-top: 6pt;padding-left: 245pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Breaks the designated <i>fn-to-rebreak </i>using the same break-when expression as was used the last time it was broken. The function is unbroken first if it was already broken. The : in argument may be used as specified in the general Wrappers description above.</p><p style="padding-top: 6pt;padding-left: 245pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The following functions comprise the original lnterlisp-D interface to the breaking facility. They are provided in the Lyric release for backward compatibility. Existing user programs employing the breaking facility should be changed to use the new functions, described above. The old interface may be eliminated in a future release.</p><p style="padding-top: 9pt;padding-left: 133pt;text-indent: 0pt;text-align: left;">il:break0 <i>fn </i>&amp;optional <i>(when </i>t)</p><p style="padding-top: 4pt;padding-left: 216pt;text-indent: 29pt;line-height: 141%;text-align: left;">If <i>fn </i>is a symbol, this is equivalent to (xcl:break-function <span class="s19">fu </span>:when <i>when)</i></p><p class="s8" style="padding-top: 9pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 71pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_373.png"/></span></p><p class="s102" style="padding-top: 1pt;padding-left: 71pt;text-indent: 0pt;text-align: left;">102                                                                        <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 4pt;padding-left: 328pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="382" height="0" alt="image" src="Image_374.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">il:break <span class="s60">x</span></p><p class="s8" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;line-height: 111%;text-align: left;"><span class="p">If </span>fn <span class="p">is a list of the form </span>(fn <span class="s135">1 </span><b>in </b>fn2}, <span class="p">this is equivalent to</span></p><p class="s8" style="padding-top: 3pt;padding-left: 50pt;text-indent: -29pt;line-height: 113%;text-align: left;"><span class="s40">(xcl:break-function </span>fn1 <span class="s40">:in </span>fn2 <span class="s40">:when </span>when) <span class="p">Otherwise, </span>fn <span class="p">should be a list and </span><span class="s40">il: breakO </span><span class="p">is called recursively on each member of </span>fn, <span class="p">all with the given</span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 11pt;text-align: left;">value of <i>when.</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 49pt;text-indent: 109pt;text-align: left;">[Nlambda No-Spread Function]</p><p style="padding-top: 6pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">For each argument that is either a symbol or a list in the form (fn <i>1 </i><b>in </b><i>fn2), </i>the call ( <span class="s40">il: break </span><span class="s71">o </span><i>arg </i><span class="s40">t) </span>is performed. Each other list argument is used as the arguments in a call to <span class="s40">il: breakO; </span>that is, the call</p><p class="s40" style="padding-left: 50pt;text-indent: 1pt;line-height: 108%;text-align: left;">(apply    &#39;il:breakO       <span class="s8">arg) </span><span class="p">is performed.    For example,</span></p><p class="s40" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">(il:break foo (bax <span class="s57">(&gt; </span>n 2)))</p><p style="padding-top: 3pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">is equivalent to</p><p class="s40" style="padding-top: 4pt;padding-left: 105pt;text-indent: -43pt;line-height: 107%;text-align: left;">(progn (il:breakO &#39;foot) (il:breakO &#39;bax <span class="s57">&#39;(&gt; </span>n 2)))</p><p class="s40" style="padding-top: 8pt;padding-left: 62pt;text-indent: 0pt;text-align: center;">il: unbreakO  <span class="s8">fn                                                                    [Function]</span></p><p class="s23" style="padding-top: 4pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">If <span class="s8">fn </span><span class="p">is a symbol, this is equivalent to</span></p><p class="s40" style="padding-top: 4pt;padding-left: 192pt;text-indent: 0pt;text-align: left;">(xcl:unbreak-function <span class="s8">fn)</span></p><p style="padding-top: 4pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: left;">Otherwise, <i>fn </i>should a list in the form (fn<i>1 </i>in fn2} in which case this is equivalent to</p><p class="s40" style="padding-top: 3pt;padding-left: 192pt;text-indent: 0pt;text-align: left;">(xcl:unbreak-function <span class="s8">fn1 </span>:in <span class="p">fn2)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">il:unbreak <span class="s8">fns</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">il: rebreak <span class="s8">fns</span></p><p class="s8" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">[Nlambda No-Spread Functionj</p><p style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: justify;"><span class="s28">All </span>of the arguments should be either symbols or lists in the form <i>(fn 1 </i>in <i>fn2). </i>This is equivalent to calling <span class="s40">il: unbreak </span><span class="s71">o </span>on each of the arguments. If no arguments are given, this is equivalent to calling</p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s40">xcl :unbreak-function </span>on all functions currently broken, in reverse order of their breaking. If exactly one argument, <span class="s31">t, </span>is given, the most-recently broken function is unbroken.</p><p class="s8" style="padding-top: 9pt;text-indent: 0pt;text-align: right;">[Nlambda No-Spread Function]</p><p style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;line-height: 109%;text-align: justify;">For each argument that is a symbol, this is equivalent to</p><p class="s40" style="padding-top: 2pt;padding-left: 192pt;text-indent: 0pt;text-align: left;">(xcl:rebreak-function <span class="s8">arg)</span></p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">For each argument that is a list in the form <i>(fn </i><i><b>1 </b></i><b>in</b></p><p class="s8" style="padding-left: 181pt;text-indent: 0pt;text-align: left;">fn2), <span class="p">this is equivalent to</span></p><p class="s40" style="padding-top: 4pt;padding-left: 192pt;text-indent: 0pt;text-align: left;">(xcl:rebreak-function <span class="s8">fn1 </span>:in <span class="s8">fn2)</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_375.png"/></span></p><p class="s12" style="padding-top: 48pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                          <span class="s105">103</span></p><p class="s54" style="padding-top: 4pt;padding-left: 73pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="padding-top: 18pt;padding-left: 247pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If no arguments are given, all functions that have ever been unbroken are rebroken, in reverse order of being unbroken. If exactly one argument, <span class="s40">t, </span>is given, the most-recently unbroken function is rebroken.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s82" style="padding-left: 72pt;text-indent: 0pt;text-align: justify;"><a name="a73">Tracing: Recording</a><span class="s18"> </span>Function Calls and Returns &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="padding-top: 5pt;padding-left: 247pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The tracing aspect of Wrappers provides for recording, in a human-readable fashion, all of the calls to and returns from a given set of functions. On entry to the affected functions, information is printed giving the name of the function and the names and values of all of the arguments. On exit, more is printed, including, again, the name of the function and the value {or values) returned. The information from nested calls to traced functions is printed indented under the entry information for the outer calls.</p><p class="s19" style="padding-top: 5pt;padding-left: 247pt;text-indent: 0pt;text-align: justify;"><span class="p">For backward compatibility with lnterlisp-0, tracing is treated in some ways as a special case of breaking. In particular, the functions </span>il: unbreak, il:unbreakO, <span class="p">and </span>xcl:unbreak-function <span class="p">will serve to turn off tracing on a given function. Also, the functions </span>xcl: rebreak-function and <span class="s40">il: </span>rebr-eak <span class="s23">and </span>xcl: rebreak-function <span class="p">will restore a function to its traced state. This special-casing behavior is likely to change in future releases.</span></p><p class="s19" style="padding-top: 9pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">xcl: trace-function <span class="s8">fn-to-trace  </span>&amp;key  : in                                <span class="s8">[Function]</span></p><p style="padding-top: 6pt;padding-left: 247pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Traces the designated <i>fn-to-trace. </i>The :in argument may  be used as specified in the general Wrappers description above. If the function was broken, it is first unbroken.</p><p class="s19" style="padding-top: 9pt;text-indent: 0pt;text-align: right;">trace <span class="s8">{fn}*</span></p><p class="s19" style="padding-top: 8pt;padding-left: 48pt;text-indent: 220pt;text-align: left;">[Macro]</p><p style="padding-top: 7pt;padding-left: 49pt;text-indent: 0pt;line-height: 107%;text-align: left;">For each argument given, if <i>fn </i>is a symbol naming a function, this is equivalent to</p><p class="s19" style="padding-left: 61pt;text-indent: 0pt;text-align: left;">(xcl:trace-function <span class="s8">fn)</span></p><p style="padding-top: 6pt;padding-left: 48pt;text-indent: 0pt;line-height: 111%;text-align: left;">If <i>fn</i>is a list in the form <i>(fn1 </i>:in <i>fn2), </i>this is equivalent to</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 135pt;text-indent: 0pt;text-align: left;">untrace <span class="s8">{fn}*</span></p><p class="s19" style="padding-left: 48pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(xcl: trace-function <span class="s8">fn</span><span class="s137">1</span><span class="s60"> </span><span class="s47">: </span>in <span class="s8">fn2)</span></p><p style="padding-top: 6pt;padding-left: 37pt;text-indent: 0pt;line-height: 109%;text-align: left;">If no arguments are given, this returns a list of all functions currently traced.</p><p class="s19" style="padding-top: 7pt;text-indent: 0pt;text-align: right;">[Macro]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 73pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_376.png"/></span></p><p class="s138" style="padding-top: 1pt;padding-left: 73pt;text-indent: 0pt;text-align: left;">104                                   <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LY RIC RELEASE</span></p><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">MISCELLANEOUS FEATURES</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_377.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: left;">For each argument given, if <span class="s8">fn </span>is a symbol naming a function, this is equivalent to</p><p class="s28" style="padding-left: 193pt;text-indent: 0pt;text-align: left;">(xcl:unbreak-function <span class="s8">fn)</span></p><p class="s8" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: left;"><span class="s28">If </span>fn <span class="s28">is a list in the form </span>{fn 1 <b>:in </b>fn2), <span class="s28">this is equivalent to</span></p><p class="s28" style="padding-left: 193pt;text-indent: 0pt;text-align: justify;">(xcl:unbreak-function <span class="s8">fn1 </span>:in <span class="s8">fn2)</span></p><p class="s28" style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">If no arguments are given, all functions currently traced are untraced.</p><p class="s28" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">All trncing information is printed to the stream that is the current value of *trace-output*. Initially,</p><p class="s28" style="padding-left: 180pt;text-indent: 0pt;text-align: justify;">*trace-output* is bound to a window named &quot;*Trace-Output*&quot;. This window will pop up whenever tracing output is printed; it can be closed whenever it is not needed.  Should users have a need to create a new tracing window, the function xcl:create-trace-window is provided.</p><p class="s28" style="padding-top: 8pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">xcl:create-trace-window &amp;key</p><p class="s8" style="padding-left: 69pt;text-indent: 0pt;text-align: left;">[Function]</p><p class="s28" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(:regionil:traceregion)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">xcl:*trace-length* xcl:*trace-level*</p><p class="s28" style="padding-left: 56pt;text-indent: 0pt;line-height: 13pt;text-align: justify;">( :open?  nil)</p><p class="s28" style="padding-left: 56pt;text-indent: 0pt;line-height: 13pt;text-align: justify;">(:title &quot;*Trace-Output*&quot;)</p><p class="s28" style="padding-top: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Creates and returns a window suitable for the value of</p><p class="s28" style="text-indent: 0pt;text-align: justify;">*trace-output*. The : region argument is used for the location and size of the window; it defaults to the value of the variable <span class="s40">il: </span>traceregion, initially an area in the lower left corner of the  display. If the</p><p class="s28" style="text-indent: 0pt;text-align: justify;">:open? argument is non-nil, the window is opened immediately; otherwise, it will stay closed until the first time tracing information is printed to it. The</p><p class="s28" style="text-indent: 0pt;line-height: 12pt;text-align: justify;">: title argument provides the title for the window.</p><p class="s28" style="padding-top: 5pt;text-indent: 0pt;text-align: justify;">Three variables are provided to allow the user to customize the format of the tracing information.</p><p class="s8" style="padding-top: 10pt;text-indent: 0pt;text-align: right;">[Variable] [Variable]</p><p class="s28" style="padding-top: 6pt;text-indent: 0pt;text-align: justify;">During the printing of the values of arguments and the returned values of traced functions the printing-control variables *print-length* and</p><p class="s28" style="text-indent: 0pt;text-align: justify;">*print-level* are bound to the values of these variables. Both are initially setto nil.</p><p class="s28" style="padding-top: 9pt;padding-left: 67pt;text-indent: 0pt;text-align: justify;">xcl:*trace-verbose* <span class="s8">[Variable]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">Certain non-essential parts of the tracing information are printed only when the value of xcl:*trace-verbose* is non-nil. In the lyric</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_378.png"/></span></p><p class="s12" style="padding-top: 38pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                          <span class="s100">105</span></p><p class="s12" style="padding-top: 4pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES</p><p style="padding-left: 72pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_379.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 247pt;text-indent: 0pt;line-height: 107%;text-align: left;">release of Xerox Lisp, the following pieces of information are so controlled:</p><ul id="l43"><li><p style="padding-top: 9pt;padding-left: 257pt;text-indent: -10pt;line-height: 107%;text-align: left;">The lambda-list keywords &amp;optional, &amp;rest, and &amp;key, normally printed as separators between the various kinds of arguments.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 257pt;text-indent: -10pt;text-align: left;">Trailing  unsupplied     &amp;optional       arguments, normally printed as&quot; <span class="s76">name </span>unsupplied&quot;.</p><p style="padding-top: 10pt;padding-left: 246pt;text-indent: 0pt;text-align: left;">Initially, xcl: *trace-verbose* is set tot.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-top: 4pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">Advisin<span class="s31">g: Modifying the Behavior of Functions</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 246pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The most powerful aspect of the Wrappers facility is advice. The advising aspect is sufficiently expressive to be able to subsume the other two, breaking and tracing. With it, the user can specify arbitrary expressions to be evaluated before, after or around the body of the original function. Here are some ways in which advice has been used to advantage:</p></li><li><p style="padding-top: 6pt;padding-left: 256pt;text-indent: -10pt;line-height: 106%;text-align: justify;">Changing the effective default value of an argument or even overriding supplied values when they are in some way unsatisfactory.</p></li><li><p style="padding-top: 6pt;padding-left: 257pt;text-indent: -10pt;line-height: 107%;text-align: justify;">Binding certain special variables around all calls to a given function.</p></li><li><p style="padding-top: 6pt;padding-left: 257pt;text-indent: -10pt;line-height: 107%;text-align: justify;">Customizing the behavior of certain system functions for individual users.</p></li><li><p style="padding-top: 6pt;padding-left: 257pt;text-indent: -10pt;line-height: 108%;text-align: justify;">Building breaking or tracing interfaces that go beyond the facilities described above, suited specially to local circumstances.</p></li></ul><p style="padding-top: 9pt;padding-left: 246pt;text-indent: 0pt;line-height: 107%;text-align: justify;">It is possible for a given function to have more than one piece of advice attached to it simultaneously. If xcl :advise-function is called when the designated function is already advised, the new advice is added to that already existing. The relative ordering of multiple pieces of advice is controlled by the :priority attributes  of  the pieces of advice involved, described below. Multiply-advised functions have but one &quot;layer&quot; of wrapping around them; all of the advice has been merged into a single whole.</p><p style="padding-top: 9pt;padding-left: 247pt;text-indent: 0pt;line-height: 108%;text-align: justify;">There are three important attributes for a given piece of advice, :when, :priority, and the advice-expression itself.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 72pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_380.png"/></span></p><p class="s105" style="padding-top: 1pt;padding-left: 73pt;text-indent: 0pt;text-align: left;">106                                                                          <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 3pt;padding-left: 329pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_381.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 182pt;text-indent: 0pt;text-align: justify;">:when <span class="p">can be one of </span>:before, :after, <span class="p">or </span>:around</p><p style="padding-left: 181pt;text-indent: 0pt;text-align: justify;">as described below:</p><p class="s19" style="padding-top: 6pt;padding-left: 181pt;text-indent: -51pt;line-height: 107%;text-align: justify;">:before <span class="p">advice is executed before the original function is called. It may examine and/or change the values of arguments passed to the function and can even avoid the call to the original function, specifying the values to be returned. More simply, it can also specify independent actions to be performed before calling the original function. When more than one piece of</span></p><p class="s19" style="padding-left: 182pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">: before <span class="p">is present, they are executed one after</span></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">another in order. Thus, later advice can be affected by the workings of earlier.</p><p class="s19" style="padding-top: 5pt;padding-left: 181pt;text-indent: -51pt;line-height: 106%;text-align: justify;">:after <span class="p">advice is executed after the original function has been called. It may examine and/or change the value (or values) to be returned by the function. More simply, it can also specify independent actions to be performed after calling the original function. As with the previous case, when more than one piece of : </span>after <span class="p">advice is present, they are executed one after another in order.</span></p><p class="s19" style="padding-top: 5pt;padding-left: 181pt;text-indent: -51pt;text-align: justify;">: around <span class="p">advice is literally wrapped around the call to the original function. The advice-expression can contain one or more calls to the macro </span>xcl: inner; <span class="p">these specify the locations of calls to the  original function. Thus, : </span>around <span class="p">advice can be used, for example, to bind special variables around the original call, or to conditionally avoid calling the original function. When multiple pieces of </span>:around <span class="p">advice are present, earlier ones are nested inside later ones.</span></p><p style="padding-top: 7pt;padding-left: 181pt;text-indent: 0pt;line-height: 89%;text-align: justify;">For backward compatibility with lnterlisp-D, the symbol <span class="s40">il: </span><span class="s139">* </span>may be used instead of a call to <span class="s19">xcl: inner </span>to specify where calls to the original</p><p style="padding-top: 1pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">function should be placed. This convention may be desupported in future releases.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_382.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                          <span class="s102">107</span></p><p class="s54" style="padding-top: 3pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 80pt;text-indent: 0pt;text-align: left;">(block nil</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 72pt;text-indent: 0pt;text-align: justify;">The following code template illustrates the positioning of the three kinds of advice and the lexical environment available to them.</p><p class="s28" style="padding-left: 105pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(xcl:destructuring-bind (il:!value &amp;rest il:!other-values)</p><p class="s28" style="padding-left: 278pt;text-indent: -24pt;text-align: left;">(multiple-value-list (block nil</p><p class="s8" style="padding-left: 302pt;text-indent: 0pt;text-align: left;">before-advice</p><p class="s8" style="padding-left: 301pt;text-indent: 0pt;text-align: left;">around-advice-and-original-call) <span class="p">)</span></p><p class="s8" style="padding-left: 128pt;text-indent: 0pt;text-align: left;">after-advice</p><p class="s28" style="padding-left: 130pt;text-indent: 0pt;text-align: left;">(apply #&#39;values il:!value il:!other-values)))</p><p class="s28" style="padding-top: 9pt;padding-left: 212pt;text-indent: 0pt;text-align: justify;">Note that, in addition to  the lexical entities shown here, some representation of the arguments to the function is available as well, depending upon the kind of function. See the general information on Wrappers, above, for complete details.</p><p class="s28" style="padding-top: 9pt;padding-left: 212pt;text-indent: 0pt;text-align: left;">The variables  <span class="s40">il:  </span>!value and <span class="s40">il: </span>!other-values are used for backward compatibility with lnterlisp-D. However, the code above does not properly handle original  functions  that  return  no  values  at  all. Advising  such  functions  in  the   Lyric  release  will change their behavior, causing them to return a single value, nil. In the  next release, the mechanism will be changed slightly so that a single variable, values, will hold a list of all of the  values returned by the function.    At that time,  :after advice  using  the variables  il:  !value  and il: !other-values may have to be changed.  A particularly common example of   functions   that   return   no   values   at   all   is reader-macro  functions.    Beware of advising such functions in the Lyric release.</p><p class="s28" style="padding-top: 9pt;padding-left: 212pt;text-indent: 0pt;text-align: justify;">:priority can be one of : first or :last, meaning that the given piece of advice should be placed at the beginning or end, respectively, of the list of pieces of advice with the same : when attribute.</p><p class="s28" style="padding-top: 9pt;padding-left: 212pt;text-indent: 0pt;text-align: justify;">For backward compatibility with lnterlisp-D, a list in the form ( il: before . <span class="s47">corns) </span>or ( il: after . <span class="s47">corns) </span>is also acceptable as the :priority attribute. In this case, <span class="s60">corns </span>should be a list of commands to the lnterlisp-D list-structure editor. These commands will be applied to the list of pieces of advice with the same</p><p class="s28" style="padding-left: 212pt;text-indent: 1pt;text-align: justify;">: when attribute; when they complete, the given advice will be inserted either before or after the selected piece, as specified. This compatibility feature</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_383.png"/></span></p><p class="s138" style="padding-top: 1pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">108                                                                        <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">MISCELLANEOUS FEATURES</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_384.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">may be removed in a future release, possibly to be replaced by another facility with similar functionality.</p><p style="padding-top: 9pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Xerox Lisp interface to advising consists of the following three functions:</p><p style="padding-top: 9pt;padding-left: 69pt;text-indent: 0pt;text-align: left;">xcl:advise-function <i>fn-to-advise  form  </i>&amp;key  : in                 <i>[Function]</i></p><p style="padding-top: 1pt;padding-left: 316pt;text-indent: 0pt;line-height: 107%;text-align: left;">( : when : before) (:priority :last)</p><p style="padding-top: 9pt;padding-left: 180pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Advises the designated <i>fn-to-advise </i>using the given <i>form </i>as the advice-expression and the given : when and : priority attributes. The : in argument may be used as specified in the general Wrappers description above. If the designated <i>fn-to-advise </i>is already advised, the new advice is added that already existing and the new, merged advice is applied to the original function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl:unadvise-function <i>fn-to-unadvise </i>&amp;key : in : no-error</p><p class="s8" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Removes the advice from the designated <i>fn-to-unadvise. </i>The : in argument may be used as specified in the general Wrappers description above. If the designated function is not advised, an error message is printed, unless the : no-error argument is supplied and non-nil.</p><p style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">xcl: readvise-function <i>fn-to-readvise </i>&amp;key  : in                   <i>[Function]</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Advises the designated <i>fn-to-readvise </i>using the advice that was present the last time the function was unadvised. The : in argument may be used as specified in the general Wrappers description above.</p><p style="padding-top: 9pt;padding-left: 180pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The following three functions comprise the original lnterlisp-D interface to the advising facility. They are provided in the Lyric release for backward compatibility. Existing user programs employing the advising facility should be changed to use the new functions, described above. The old interface may be eliminated in a future release.</p><p style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">il:advise  who  <i>when  where  what                                           </i><span class="s19">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;line-height: 108%;text-align: left;">Advises the function named by who, using <i>what </i>as the advice-expression. The : when attribute is taken from the <i>when </i>argument and the :priority argument.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="581" height="1" alt="image" src="Image_385.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                          <span class="s112">109</span></p><p class="s54" style="padding-top: 4pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 209pt;text-indent: 0pt;text-align: justify;">The <span class="s8">when </span>and <span class="s8">where </span>arguments are optional. If only two arguments are  given to <span class="s40">il: </span>advise, they are interpreted as <span class="s8">who </span>and <span class="s8">what, </span>respectively. If three are given, they are <span class="s8">who, when, </span>and <span class="s8">what.</span></p><p class="s8" style="padding-top: 9pt;padding-left: 209pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s23">If </span>when <span class="s28">is not supplied, :before is used. The </span>when</p><p class="s28" style="padding-left: 209pt;text-indent: 0pt;line-height: 12pt;text-align: left;">argument il: before is treated as a synonym for</p><p class="s28" style="padding-left: 210pt;text-indent: 0pt;text-align: left;">: before,   as    il:   after   is  for      :after and il:aroundfor :around.</p><p class="s28" style="padding-top: 9pt;padding-left: 209pt;text-indent: 0pt;text-align: left;">If where is not supplied, : last is used. The where arguments il:last, il:bottom and il:end are treated as synonyms for : last, as i <span class="s58">1: </span>first and il:top arefor :first.</p><p class="s28" style="padding-top: 9pt;padding-left: 221pt;text-indent: -11pt;text-align: left;">If <span class="s8">who </span>is a symbol, this is equivalent to (xcl:advise-function <span class="s8">who what</span></p><p class="s28" style="padding-left: 370pt;text-indent: 0pt;line-height: 11pt;text-align: left;">:when <span class="s8">when</span></p><p class="s28" style="padding-left: 370pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:priority</p><p class="s8" style="padding-left: 220pt;text-indent: 0pt;line-height: 11pt;text-align: left;">where)</p><p class="s8" style="padding-top: 9pt;padding-left: 209pt;text-indent: 0pt;text-align: left;"><span class="s28">If </span>who   <span class="s28">is a list in the form </span>{fn 1 <b>in </b>fn2), <span class="s28">this is equivalent to</span></p><p class="s8" style="padding-left: 221pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s28">( xcl :advise-function </span>fn<b>1 </b>what</p><p class="s28" style="padding-left: 370pt;text-indent: 0pt;line-height: 11pt;text-align: left;">: in <span class="s8">fn2</span></p><p class="s28" style="padding-left: 370pt;text-indent: 0pt;line-height: 11pt;text-align: left;">:when <span class="s8">when</span></p><p class="s28" style="padding-left: 370pt;text-indent: 0pt;line-height: 11pt;text-align: left;">:priority</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 97pt;text-indent: 0pt;text-align: left;">il :unadvise <span class="s8">fns</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 98pt;text-indent: 0pt;text-align: left;">il: <span class="s28">readvise </span><span class="s8">fns</span></p><p class="s28" style="padding-left: 32pt;text-indent: 0pt;line-height: 12pt;text-align: left;">where)</p><p class="s8" style="padding-top: 8pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;"><span class="s28">Otherwise, </span>who <span class="s28">should be a list of symbols and/or sublists in the form </span>(fn 1 <b>in </b>fn2). <span class="s28">Each of the elements of the list is treated in turn, as shown above.</span></p><p class="s8" style="padding-top: 10pt;text-indent: 0pt;text-align: right;">[NLambda No-Spread Function]</p><p class="s28" style="padding-top: 9pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">For each argument given, if it is a symbol this is equivalent to</p><p class="s28" style="padding-top: 2pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">(xcl:unadvise-function <span class="s8">arg)</span></p><p class="s28" style="padding-top: 9pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">If the argument is a list in the form <span class="s8">{fn 1 </span>in <span class="s8">fn2), </span>this is equivalent to</p><p class="s28" style="padding-top: 5pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">(xcl:unadvise-function <span class="s8">fn1 </span>:in <span class="s8">fn2)</span></p><p class="s28" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">If no arguments are given, then all currently-advised functions are unadvised. If a single argument of t is given, the most-recently advised function is unadvised.</p><p class="s8" style="padding-top: 9pt;text-indent: 0pt;text-align: right;">[NLambda No-Spread Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_386.png"/></span></p><p class="s112" style="padding-top: 1pt;padding-left: 36pt;text-indent: 0pt;text-align: left;">110                                                                          <span class="s12">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">MISCELLANEOUS FEATURES</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="589" height="1" alt="image" src="Image_387.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">For each argument given, if it is a symbol this is equivalent to</p><p class="s19" style="padding-top: 5pt;padding-left: 192pt;text-indent: 0pt;text-align: left;">(xcl:readvise-function <span class="s8">arg)</span></p><p class="s8" style="padding-top: 9pt;padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><span class="p">If the argument is a list in the form </span>(fn <span class="s135">1 </span><b>in </b>fn2), <span class="p">this is equivalent to</span></p><p class="s19" style="padding-top: 5pt;padding-left: 192pt;text-indent: 0pt;text-align: left;">(xcl:readvise-function <span class="s8">fn1 </span>:in <span class="s8">fn2)</span></p><p style="padding-top: 9pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">If no arguments are given, then all functions that have ever been unadvised are readvised. If a single argument of <span class="s28">t </span>is given, the most-recently unadvised function is readvised.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Alone of the three aspects of the Wrappers facility, advising has some interaction with the File Manager. It is possible to save advice on a file and to optionally arrange for that advice to be re-applied when the file is loaded. The File Manager notices every time a function is advised or readvised and two File Manager commands exist for the saving of that advice:</p><p class="s19" style="padding-top: 8pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">il:advice <span class="s8">{advice-name}*</span></p><p class="s19" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">il: advise <span class="s8">{advice-name}*</span></p><p class="s8" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">[File Manager command] [Fife Manager command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;"><i>advice-name </i>should be either a symbol or a list in the form <i>(fn </i><span class="s135">1 </span><b>:in </b><i>fn2), </i>where <i>fn 1 </i>and <i>fn2 </i>are symbols. The advice on the indicated function is saved on the file. The <span class="s19">il :advice </span>command only arranges for the advice to be stored away when the file is loaded. The <span class="s19">il :advise </span>command additionally arranges for that advice to be installed on the indicated functions. If the <span class="s19">il :advice </span>command is used, the  user can call the function <span class="s19">xcl: readvise-function </span>to install the stored away advice.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;line-height: 106%;text-align: justify;">For backward compatibility with lnterlisp-D, an <i>advice-name </i>that is an INTERLISP symbol in the form <i>fn1-in-fn2 </i>is interpreted as if it were {fn <i>1 </i>:in <i>fn2), </i>with <i>fn1 </i>and <i>fn2 </i>interned in the INTERLISP package. This compatibility feature may be removed in a  future release.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Stepping</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Single stepping is a way of observing the evaluation of a form. At each point where the <span class="s19">eval </span>function is called execution is halted and the form about to be evaluated, along with any arguments, is printed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_388.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                          <span class="s102">111</span></p><p class="s3" style="padding-top: 3pt;padding-left: 25pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES</p><p style="padding-left: 25pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="0" height="0" alt="image" src="Image_389.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><a name="a74">To </a><u>Begin Stepping</u></p><p style="padding-top: 4pt;padding-left: 25pt;text-indent: 0pt;line-height: 107%;text-align: justify;">When a computation is completed the result is also printed. In a sense, single stepping is like performing a stop and go trace of all the functions in an evaluation.</p><p style="padding-top: 6pt;padding-left: 25pt;text-indent: 0pt;text-align: justify;">Only interpreted code can be stepped.</p><p style="padding-left: 25pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="584" height="1" alt="image" src="Image_390.png"/></span></p><p style="padding-top: 8pt;padding-left: 87pt;text-indent: 0pt;text-align: left;">step <i>form                                                                                    </i>[Macro]</p><p style="padding-top: 6pt;padding-left: 200pt;text-indent: 0pt;line-height: 109%;text-align: left;">Single-steps the execution of form. Returns the result of executing <i>form.</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_391.png"/></span></p><p class="s18" style="padding-top: 7pt;padding-left: 25pt;text-indent: 0pt;text-align: left;"><a name="a75">What&#39;s </a><u>Displayed</u></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_392.png"/></span></p><p class="s18" style="padding-left: 25pt;text-indent: 0pt;text-align: left;">The Next <u>Step</u></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Each step has an indentation level, initially 0, which increases every time eval is called in a subform. At the start of each step, the form is printed at the current indentation level, then a space and the prompt &quot;: &quot;. When a subform&#39;s evaluation is completed its result is printed at the start of a new line. Variable and constant evaluation is shown by printing the variable or constant, an equal sign, and its value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 107%;text-align: justify;">When execution is halted and the &quot;:&quot; prompt reappears, you have several options for the next step. Display a list of these options by pressing the ? key. They are:</p><p class="s18" style="padding-top: 5pt;padding-left: 26pt;text-indent: 0pt;text-align: justify;">&lt;space&gt; <span class="p">evaluate until eval is called again.</span></p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: -37pt;line-height: 107%;text-align: left;">Next     evaluate the current form without stepping its subforms, halt on the next form after this one</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: -42pt;line-height: 107%;text-align: left;">Finish     finish   evaluation    without stepping any more subforms.</p><p style="padding-top: 5pt;padding-left: 25pt;text-indent: 0pt;text-align: left;">Debugger     enter the debugger.</p><p class="s28" style="padding-top: 6pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">j      <span class="p">abort all stepping, returning to top level.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-top: 4pt;padding-left: 26pt;text-indent: 0pt;text-align: justify;"><a name="a76">Xerox Common </a><u>Lisp Debugger</u></p><p style="padding-left: 25pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="582" height="1" alt="image" src="Image_393.png"/></span></p><p style="padding-top: 4pt;padding-left: 200pt;text-indent: 0pt;line-height: 107%;text-align: justify;">In Xerox Common Lisp, errors, interrupts and breakpoints wind up calling the Debugger. The debugger is an interactive Exec which can run under a Lisp computation, and display useful information about the state of the computation. This allows the user to interrogate the state of the world and affect the course of the computation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_394.png"/></span></p><p class="s113" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">112                                                                        <span class="s3">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="text-indent: 0pt;text-align: right;">MISCELLANEOUS FEATURES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="583" height="1" alt="image" src="Image_395.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 107%;text-align: justify;">When the debugger is entered, a separate &quot;debugger window&quot; is brought up. All interaction within the debugger occurs inside this separate debugger window. The default prompt for debugger windows is the character &quot;: &quot;. Input to the debugger is evaluated within the dynamic context where the error occurred.</p><p style="padding-top: 9pt;padding-left: 211pt;text-indent: -30pt;line-height: 107%;text-align: justify;">Note: In the Lyric release, forms typed to the debugger do not have access to the lexical context where the error occurred, even in interpreted code. This lack will be addressed in a future release.</p><p style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: justify;">In addition, the debugger recognizes a number of useful commands in addition to the normal Exec commands. These provide an easy way to interrogate the state of the computation.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The debugger may be entered in several different ways. Some interrupt characters invoke the debugger when they are typed. Errors may invoke the debugger. Finally, the user can add breakpoints, either around entire functions (using <span class="s19">xcl: break-function) </span>or around individual expressions.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 107%;text-align: left;">Within the debugger the user has access to all the power of Lisp; any operations available at the Exec are also available within a debugger window, including all of the Exec commands, e.g., to  redo or undo previously executed events.</p><p style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">Once in the  debugger, the user is in complete control of the flow of the computation, and the computation will not proceed without specific  instruction. That is, the  debugger  will itself catch  aborts, errors and the like.    The     debugger     catches     the      <span class="s40">il:    </span><span class="s19">error </span>(CONTROL-E)  interrupt  but does not  &quot;turn off&quot; the <span class="s40">il:  </span><span class="s19">reset   </span>interrupt, so a CONTROL-D interrupt character will force an immediate return back to the top level.</p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When the debugger is invoked, a new window is brought up. The title of the debugger window indicates the type of condition that invoked the debugger. If the debugger is invoked under another call to the debugger, a new window is created. The initial placement of the debugger is relative to the placement of  the typescript window of the process being invoked.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="580" height="1" alt="image" src="Image_396.png"/></span></p><p class="s12" style="padding-top: 47pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYR!C RELEASE                                                                          <span class="s113">113</span></p><p class="s111" style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">eval</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">ub</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;">value</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 115pt;text-indent: -35pt;line-height: 107%;text-align: justify;">Note: Storage errors (running out of storage) will not try to open a new window, since this might cause the error to occur repeatedly.</p><p style="padding-top: 6pt;padding-left: 115pt;text-indent: -35pt;line-height: 107%;text-align: justify;">Note: The debugger can also operate in a mode where a new window is not created. If the variable il :wbreak is nil, debugging interactions occur within the same window as the primary typescript window.</p><p style="padding-top: 6pt;padding-left: 79pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Debugger commands can be invoked either by typing them in, or, for those debugger commands in xcl: *debugger-menu-iterns*, by invoking them directly from the middle-button pop-up menu in a debugger window. The operation of interactive commands differs depending on how they are invoked: for those invoked by typing the command, the interaction happens in the typescript window, while those invoked by mouse action cause a mouse/menu interaction instead.</p><p class="s8" style="padding-top: 9pt;text-indent: 0pt;text-align: right;">[Debugger command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 79pt;text-indent: 0pt;line-height: 107%;text-align: justify;">For breakpoints, this command evaluates the breakpointed function/expression, and prints the values it returns. A subsequent value command will (re)print these values. <span class="s47">A </span>subsequent ok command will merely return the values already computed. However, a subsequent eval command will perform the computation again.</p><p style="padding-top: 6pt;padding-left: 79pt;text-indent: 0pt;line-height: 107%;text-align: justify;">For error calls to the debugger, this command attempts  to back up the stack to the last &quot;user&quot; function and reapply it to its arguments, presuming that somehow the user has modified the computation. If successful, this value will be returned by a subsequent ok command from the user function. The &quot;user&quot; function is determined by looking back on the stack to the last stack frame which is not part of the interpreter.</p><p class="s8" style="padding-top: 9pt;text-indent: 0pt;text-align: right;">[Debugger command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 80pt;text-indent: 0pt;line-height: 159%;text-align: left;">Removes the current breakpoint, if there is one. Not available from the menu.</p><p class="s8" style="padding-top: 3pt;padding-left: 234pt;text-indent: 0pt;text-align: left;">[Debugger command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 80pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Prints the result of the last eval command executed in this debugger instance. If no eval has been done yet, simply prints &quot;Not yet evaluated.&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_397.png"/></span></p><p class="s138" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">114                                                                        <span class="s3">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">MISCELLANEOUS FEATURES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="585" height="1" alt="image" src="Image_398.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s75" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">t  , <span class="s131">stop                                                                 </span><span class="s52">[Debugger commands]</span></p><p class="s131" style="padding-top: 9pt;padding-left: 181pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Abort the Debugger, making it &quot;go away&quot; without returning a value. This <span class="s18">is a </span>useful way to unwind to a higher level debugger or Exec.</p><p class="s131" style="padding-top: 8pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">return &amp;optional <span class="s52">expression                                     [Debugger command]</span></p><p class="s52" style="padding-top: 9pt;padding-left: 180pt;text-indent: 0pt;line-height: 93%;text-align: justify;">expression <span class="s131">is evaluated, and returned as the value the debugger call. For example, one could use the eval command and follow this with return ( reverse value).</span></p><p class="s131" style="padding-top: 3pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">Not available from the menu.</p><p class="s131" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">proceed,   pr                                                            <span class="s52">[Debugger command]</span></p><p class="s131" style="padding-top: 9pt;padding-left: 180pt;text-indent: 0pt;line-height: 93%;text-align: left;">It constructs a list of currently enabled proceed cases, then prompts the user to select one to invoke. If this command is invoked from the debugger exec, <span class="s19">il: </span>ask user is used to select a proceed case. If this command was invoked from the debugger&#39;s menu, a menu of proceed cases to select from is presented. In either case, the proceed cases will be described by the results of invoking their report methods.</p><p class="s131" style="padding-left: 89pt;text-indent: 91pt;line-height: 18pt;text-align: left;">For example, if you evaluated (xcl:proceed-case (break}</p><p class="s131" style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(xcl:use-value (x)</p><p class="s131" style="padding-left: 145pt;text-indent: 0pt;line-height: 13pt;text-align: left;">:report &quot;Provide a value to use as the result&quot;</p><p class="s2" style="padding-top: 1pt;padding-left: 125pt;text-indent: 0pt;line-height: 10pt;text-align: left;">X)</p><p class="s131" style="padding-left: 107pt;text-indent: 0pt;line-height: 13pt;text-align: center;">( nil   ( )</p><p class="s131" style="padding-left: 2pt;text-indent: 0pt;line-height: 13pt;text-align: center;">:report &quot;Just return NIL&quot;</p><p class="s2" style="padding-top: 1pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">nil))</p><p class="s131" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;line-height: 93%;text-align: justify;">and then executed the <span class="s15">PR </span>command in the debugger, you would <span class="s140">see:</span></p><ol id="l44"><li><p class="s41" style="padding-top: 5pt;padding-left: 193pt;text-indent: -12pt;line-height: 13pt;text-align: justify;">- <span class="s131">Return from BREAK</span></p></li><li><p class="s3" style="padding-left: 194pt;text-indent: -12pt;line-height: 12pt;text-align: left;">- <span class="s131">Provide a value to use as the result</span></p></li><li><p class="s3" style="padding-left: 193pt;text-indent: -12pt;line-height: 12pt;text-align: left;">- <span class="s131">Just return NIL</span></p></li><li><p class="s41" style="padding-left: 181pt;text-indent: 0pt;line-height: 90%;text-align: left;">- <span class="s131">Unwind to </span>ERRORSET <span class="s131">No - don&#39;t proceed Proceed how?</span></p></li></ol><p class="s131" style="padding-top: 3pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">Selecting No will abort the command.</p><p class="s131" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">ok                                                                                        <span class="s52">[Debugger command]</span></p><p class="s131" style="padding-top: 5pt;padding-left: 181pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If the debugger was entered through a breakpoint, the debugger first executes an eval if the user has not done so already. These values are then returned as the values of the breakpointed function/expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_399.png"/></span></p><p class="s3" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                      <span class="s113">115</span></p><p class="s111" style="padding-top: 12pt;padding-left: 25pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 86pt;text-indent: 0pt;text-align: left;">pb <span class="s52">variable</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 54pt;text-indent: 0pt;text-align: justify;">If the debugger was entered through an error, the <span class="s28">ok </span>command first calls the function <span class="s28">xcl :proceed. </span>For many errors, there is a proceed case by that name enabted that <span class="s129">will </span>reapply the •ast &quot;user&quot;function</p><p class="s23" style="padding-left: 53pt;text-indent: 0pt;text-align: justify;">{before the error) to its arguments. If this call to <span class="s28">xcl :proceed </span>returns, this means that there was no proceed case with the name <span class="s28">xcl:proceed </span>enabled, so the debugger will ask the user to select a proceed case to invoke, just as the <span class="s28">pr </span>command would.</p><p class="s52" style="padding-top: 9pt;text-indent: 0pt;text-align: right;">{Exec command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 54pt;text-indent: 0pt;text-align: justify;">Prints the bindings of the special variable <i>variable. </i>This command is available in top-level Execs as well as in the Debugger, but is most useful in the Debug.ger.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 87pt;text-indent: 0pt;text-align: left;">il:lastpos                                                                        <span class="s52">[Variable]</span></p><p class="s23" style="padding-top: 9pt;padding-left: 200pt;text-indent: 0pt;text-align: justify;">Some debugger commands manipulate the stack. The special variable <span class="s19">il : </span><span class="s28">las tpos </span>contains a stack pointer to the ..focus&quot; for stack commands. When the debugger is entered, <span class="s19">il: </span><span class="s28">lastpos </span>is bound to a stack pointer to the user frame before whatever called the the debugger, e.g., the frame before the call- to <span class="s28">error, il :errorx, </span>etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-top: 5pt;padding-left: 87pt;text-indent: 0pt;text-align: left;">?=</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">il:breakdelimiter</p><p class="s52" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">[Debugger command]</p><p class="s23" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This command is used is to interrogate the values of the arguments at <span class="s19">il: </span><span class="s28">lastpos. </span>For example, if <span class="s28">foo </span>has three arguments (x <span class="s141">y </span>z), then typing.?= when at <span class="s28">foo </span><span class="s129">wilt </span>produce:</p><p class="s23" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">12:?=</p><p class="s52" style="padding-left: 6pt;text-indent: 0pt;line-height: 84%;text-align: justify;"><span class="s47">X = </span>valueofX <span class="s47">Y </span><span class="p">= </span>valueofY <span class="s124">z </span><span class="p">= </span>valueofZ <span class="s57">13:</span></p><p class="s23" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">?= is a universal- mnemonic for displaying argument names and their corresponding values. Additional frame information can be obtained using the debugger frame menu, but a typed ?= is often a quick way of getting information.</p><p class="s52" style="padding-top: 9pt;text-indent: 0pt;text-align: right;">[Variable}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">For output to the typescript window, the value of <span class="s28">il: breakdelimi ter, </span>initially a string with a new-line character in it, is printed to delimit the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 26pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_400.png"/></span></p><p class="s142" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">116                                                                    <span class="s3">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p class="s3" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">MISCELLANEOUS FEATURES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="416" height="0" alt="image" src="Image_401.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 181pt;text-indent: 0pt;text-align: justify;">output of <span class="s7">?= </span>and backtrace commands. Resetting it to &quot;,&quot; would produce more compact output.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">bt                     <span class="s8">[Debugger command]</span></p><p style="padding-top: 9pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">Shows a backtrace of &quot;interesting&quot; function names starting at <span class="s40">il: </span><span class="s19">lastpos. </span>Whether or not a function is interesting is determined by the predicate in the variable <span class="s19">il: *short-backtrace-f il ter*.</span></p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">When invoked from the debugger menu with the mouse, causes a menu of frames to <span class="s19">be </span>attached to the Debugger window.</p><p class="s19" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">il:*short-backtrace-filter*                                                 <span class="s8">[Variable]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Contains a predicate used by the <span class="s19">bt </span>command  to determine if a frame is interesting. The initial definition of &quot;interesting&quot; is that a frame is interesting if it corresponds to a &quot;user&quot; function, currently defined as any symbol whose name does not begin with the character backslash (\).</p><p class="s19" style="padding-top: 8pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">dbt</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">bt <span class="s50">!, </span>dbt <span class="s58">!</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">btv</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">btv!</p><p class="s8" style="padding-top: 9pt;padding-left: 64pt;text-indent: 153pt;text-align: left;">[Debugger command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 64pt;text-indent: 0pt;text-align: justify;">Same as invoking <span class="s19">bt </span>from the debugger menu, i.e., causes a menu of frames that <span class="s19">bt </span>would have listed to be attached to the debugger window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 64pt;text-indent: 153pt;text-align: left;">[Debugger command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">Like <span class="s19">bt </span>and <span class="s19">dbt, </span>respectively, but show all frames, not just interesting ones.</p><p class="s8" style="padding-top: 9pt;padding-left: 64pt;text-indent: 153pt;text-align: left;">[Debugger command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">Shows not only all frames, but also all special bindings on the stack, beginning at <span class="s40">il: </span><span class="s19">lastpos.</span></p><p style="padding-top: 6pt;padding-left: 64pt;text-indent: 0pt;text-align: justify;">Notavailable from the menu.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 64pt;text-indent: 153pt;text-align: left;">[Debugger command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 64pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Prints <i>everything </i>on the stack, including binary stack locations, etc. Normally for system debugging only.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_402.png"/></span></p><p class="s3" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                      <span class="s113">117</span></p><p class="s143" style="padding-top: 3pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS <span class="s111">FEATURES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 87pt;text-indent: 0pt;text-align: left;">@ &amp;rest <span class="s52">frame-specification                                         [Debugger command]</span></p><p style="padding-top: 9pt;padding-left: 200pt;text-indent: 0pt;text-align: justify;">Resets the variable <span class="s19">il: </span>las tpos, according to <span class="s52">frame-specification; </span>the position is set first according to the initial debugger entry position, and then, for each element in frame-specification, the frame is changed.·</p><p style="padding-top: 6pt;padding-left: 200pt;text-indent: 0pt;line-height: 106%;text-align: left;">Note that @ on  a line by itself resets <span class="s19">il: </span>lastpos to itsinitial value. Normally, symbols witin a@ command refer to the next frame with the given symbol as the frame-name,  e.g.,  &quot;@ +&quot;   sets <span class="s19">il: </span>lastpos to a pointer to the last+ frame. The following tokens are looked for (using string-equal, i.e., package does not matter) and treated specially:</p><p style="padding-top: 5pt;padding-left: 200pt;text-indent: -21pt;text-align: left;"><span class="s77">@     </span>This effectively means to leave <span class="s19">il: </span>lastpos alone, i.e., not reset it before processing the rest of the line.</p><p style="padding-top: 4pt;padding-left: 200pt;text-indent: -71pt;text-align: justify;">a number <span class="s84">n </span>Move <span class="s19">il: </span>lastpos down the stack <span class="s84">n </span>frames back. E.g., <span class="s50">&quot;@ </span><span class="s40">3&quot; </span>means <span class="s40">3 </span>frames before the initial call, and &quot;@ @ <span class="s40">3&quot; </span>means <span class="s40">3 </span>more frames.</p><p style="padding-top: 6pt;padding-left: 199pt;text-indent: -20pt;text-align: justify;">/ The next element on the line (which should be a positive integer) specifies that the <span class="s52">previous </span>symbol should <span class="s23">be </span>searched for that many times. For example, <span class="s50">&quot;@ </span>foo / <span class="s40">3&quot; </span>is equivalent to &quot;@ foo foo foo.&quot;</p><p style="padding-top: 5pt;padding-left: 200pt;text-indent: -21pt;line-height: 106%;text-align: justify;"><span class="s7">= </span>Resets <span class="s19">il: </span>lastpos to the <span class="s52">value </span>of the next expression, e.g., if the value of foo is a stack pointer, &quot;@ = foo fie&quot; will search for fie in the environment specified by (the value of) foo.</p><p style="padding-top: 6pt;padding-left: 199pt;text-indent: 0pt;text-align: left;">For example, if the stack looks like:</p><p class="s52" style="padding-top: 1pt;padding-left: 200pt;text-indent: 0pt;text-align: left;">[91 <span class="p">debugger</span></p><p class="s144" style="padding-left: 200pt;text-indent: 0pt;text-align: left;">[BJ <span class="p">foo</span></p><p class="s60" style="padding-left: 200pt;text-indent: 0pt;text-align: left;">[7/ <span class="p">cond</span></p><p class="s52" style="padding-left: 200pt;text-indent: 0pt;line-height: 12pt;text-align: left;">[61 <span class="p">fie</span></p><p class="s145" style="padding-left: 200pt;text-indent: 0pt;line-height: 13pt;text-align: left;">[5/ <span class="p">cond</span></p><p class="s144" style="padding-left: 200pt;text-indent: 0pt;line-height: 12pt;text-align: left;">[4/ <span class="p">fie</span></p><p class="s60" style="padding-left: 200pt;text-indent: 0pt;text-align: left;">[3/ <span class="p">cond</span></p><p class="s52" style="padding-left: 200pt;text-indent: 0pt;text-align: left;">/2} <span class="p">fie</span></p><p class="s60" style="padding-left: 200pt;text-indent: 0pt;text-align: left;">[1} <span class="p">fum</span></p><p style="padding-top: 5pt;padding-left: 200pt;text-indent: 0pt;text-align: justify;">then <span class="s61">&quot;@ </span>fie cond&quot; will set <span class="s19">il: </span>lastpos to the position corresponding to <span class="s52">[SJ; </span><span class="s77">&quot;@ </span>@ cond&quot; will then set il:lastposto/3/;and&quot;@fie/ <span class="s7">3 </span><i>l&quot;to[t].</i></p><p style="padding-top: 6pt;padding-left: 200pt;text-indent: 0pt;text-align: justify;">If thesearch is still unsuccessful, <span class="s77">@ </span>aborts. When @ finishes, <span class="s23">it </span>returns the name of the frame at <span class="s19">il: </span>lastpos, i.e., <span class="s40">(il:</span>stkname <span class="s40">il: </span>lastpos).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 26pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_403.png"/></span></p><p class="s128" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">118                                    <span class="s3">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">MISCELLANEOUS FEATURES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_404.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 211pt;text-indent: -30pt;text-align: left;">Note: il: lastpos is also reset by selecting a frame in an attached backtrace menu.</p><p class="s28" style="padding-top: 9pt;padding-left: 61pt;text-indent: 0pt;text-align: center;">revert <span class="s12">&amp; </span>rest frame-specification                               [Debugger <span class="s8">command]</span></p><p class="s28" style="padding-top: 9pt;padding-left: 179pt;text-indent: 0pt;text-align: justify;">Goes back to a stack frame and reenters the function called at that point with the arguments found on the stack.</p><p class="s28" style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">If no argument is given to revert, it reverts to the frame selected by <span class="s40">il: </span>lastpos. Otherwise, the revert command processes the rest of the line similarly to the@ command, e.g., &quot;revert foo l&quot; is equivalent to&quot;@ foo l&quot; followed by revert.</p><p class="s28" style="padding-top: 5pt;padding-left: 179pt;text-indent: 1pt;text-align: left;">revert is useful for restarting a computation in the situation where a bug is discovered at some point <span class="s8">below </span>where the problem actually occurred. revert essentially says &quot;go back there and start over.&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Controlling<span class="s31"> When to Enter the </span>Debugger</p><p class="s28" style="padding-top: 8pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">For simple errors which occur as the result of user type-in, it is sometimes more convenient to merely use the fix command to correct the input or to retype it than to  enter the debugger, proceed, or the like. Thus, in Xerox Common Lisp, the error system employs a simple heuristic in the function xcl :enter-debugger-p. The actual algorithm is described in detail below; however, the parameters affecting the decision have been adjusted empirically so that trivial type-in errors do not cause breaks, but deep errors do.</p><p class="s28" style="padding-top: 9pt;padding-left: 61pt;text-indent: 0pt;text-align: center;">xcl:enter-debugger-p  <span class="s8">pos   condition                                         [Function]</span></p><p class="s28" style="padding-top: 9pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">xcl:enter-debugger-p   is    called    by    the    error routines to decide whether or not to actually enter the debugger when an error occurs. <span class="s8">pos </span>is the stack position at which the error occurred; <span class="s8">condition </span>is the error condition. Returns t if the debugger should occur; nil if the computation should simply abort.</p><p class="s28" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">il: helpflag</p><p class="s8" style="padding-top: 9pt;padding-left: 44pt;text-indent: 211pt;text-align: left;">[Variable]</p><p class="s28" style="padding-top: 9pt;padding-left: 44pt;text-indent: 0pt;text-align: justify;">If <span class="s40">il: </span>helpflag is nil, xcl:enter-debugger-p will return nil. <span class="s23">If </span>il:helpflag is break!, then xcl:enter-debugger-p will return t. Otherwise, xcl:enter-debugger-p will look at the stack depth, using <span class="s40">il: </span>helpdepth.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_405.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE                                                                          <span class="s113">119</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s63" style="padding-left: 46pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS <span class="s49">FEATURES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 6pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">il:helpdepth                                                                           <span class="s8">[Variable]</span></p><p class="s19" style="padding-top: 9pt;padding-left: 220pt;text-indent: 0pt;text-align: justify;"><span class="s23">If more than </span><span class="s40">il </span>:helpdepth <span class="s23">&quot;interesting&quot; function frames occur between the error call and the type-in form that eventually caused it, </span>xcl:enter-debugger-p <span class="s23">will return </span>t. <span class="s15">Otherwise, </span>xcl:enter-debugger-p <span class="s23">will look at the amount of time elapsed since execution was started for the expression that invoked this exec.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 4pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">il:helpclock</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 107pt;text-indent: 0pt;text-align: left;">il:helptime</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s67" style="padding-top: 6pt;padding-left: 44pt;text-indent: 0pt;text-align: left;"><a name="a77">Interface to·the Debugger</a></p><p class="s8" style="padding-top: 5pt;text-indent: 0pt;text-align: right;">[Variable]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 37pt;text-indent: 0pt;text-align: justify;">At each Exec command (inctuding inside the debugger) the variable <span class="s19">i1 :helpclock is </span>rebound to the current value of <span class="s19">(get-internal-real-time).</span></p><p class="s8" style="padding-top: 10pt;text-indent: 0pt;text-align: right;">[Variable)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 37pt;text-indent: 0pt;text-align: justify;">If more than <span class="s40">il </span><span class="s19">:he-lptime </span>milliseconds of runtime stnce <span class="s19">il :helpclock </span>have elapsed, then <span class="s19">xcl:enter-debugger-p </span>will be true. The time criterion for breaking can be suppressed by setting <span class="s40">il </span><span class="s19">:helptime </span>to <span class="s19">nil.</span></p><p class="s19" style="padding-top: 4pt;padding-left: 107pt;text-indent: 0pt;text-align: left;">il <span class="s146">:I </span>MaxBkMenuWidthl</p><p class="s40" style="padding-top: 8pt;padding-left: 107pt;text-indent: 0pt;text-align: left;">i1: <span class="s19">jMaxBkMenuHeightl</span></p><p class="s8" style="padding-top: 9pt;padding-left: 107pt;text-indent: 0pt;line-height: 190%;text-align: right;">[Variable] [Variable]</p><p class="s23" style="padding-left: 219pt;text-indent: 0pt;text-align: justify;">The variables <span class="s28">il : </span><span class="s19">IMaxBkMe nuWid  t hi </span>(defauit 125) and <span class="s19">il:jMaxBkMenuHeightl </span>{default 300)controtthe maximum size <span class="s129">of </span>the backtrace menu. If this.menu is too small to contain an of the frames in the backtrace, it is made scroHable in both vertical and horizontal directions.</p><p class="s19" style="padding-top: 9pt;padding-left: 107pt;text-indent: 0pt;text-align: left;">il:autobacktraceflg                                                                <span class="s8">[Variable]</span></p><p class="s23" style="padding-top: 9pt;padding-left: 219pt;text-indent: 0pt;text-align: justify;">This variable controls when and what kind of backtrace menu is automatically brought up. The value of <span class="s19">il :autohacktraceflg </span>can be one of the following:</p><p class="s23" style="padding-top: 5pt;padding-left: 220pt;text-indent: -28pt;text-align: justify;"><span class="s19">ni 1 </span>The backtrace menu <span class="s28">is </span>not automatically brought up (the default).</p><p class="s7" style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;text-align: left;">t    <span class="s23">On- error breaks the </span>bt <span class="s23">menu is brought up.</span></p><p class="s23" style="padding-top: 6pt;padding-left: 173pt;text-indent: 0pt;text-align: left;"><span class="s19">i </span><span class="s40">1: </span>bt <span class="s2">!    </span>On error breaks the bt <span class="s40">! </span>menu is brought up.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 45pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_406.png"/></span></p><p class="s29" style="padding-top: 1pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">120                                                                        XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</p><p class="s3" style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS FEATURES</p><p style="padding-left: 17pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="0" height="0" alt="image" src="Image_407.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 191pt;text-indent: 0pt;line-height: 107%;text-align: justify;">loop in which only eval expressions can be typed. If the recursive debugger entry was because of a breakpoint, the second debugger invocation is ignored.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 17pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="566" height="2" alt="image" src="Image_408.png"/></span></p></li><li><p class="s71" style="padding-left: 51pt;text-indent: -34pt;line-height: 13pt;text-align: left;"><a name="a78">Environmental </a><u>Inquiries</u></p><p style="padding-left: 17pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_409.png"/></span></p><ol id="l45"><li><p style="padding-top: 10pt;padding-left: 47pt;text-indent: -30pt;text-align: left;">Time Functions and Commands</p></li></ol></li></ol></ol><p style="padding-left: 17pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="578" height="1" alt="image" src="Image_410.png"/></span></p><p style="padding-top: 8pt;padding-left: 191pt;text-indent: 0pt;line-height: 108%;text-align: left;">In addition to the time functions explained in· <i>Common Lisp: the Language, </i>Xerox Common Lisp provides the following function:</p><p style="padding-top: 9pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">time  <i>form  </i>&amp;key  : repeat  :output  :datatypes                     <i>[Function]</i></p><p style="padding-top: 6pt;padding-left: 191pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Reports the time required to evaluate <i>form, </i>and returns the value of <i>form. </i>By default, timing information is sent to *trace-output*, which is usually a window with the same title. If the : repeat argument is provided, it should be an integer which indicates the number of times to repeat the evaluation of form. If the : output argument is provided, it should be a valid stream argument (like</p><p style="padding-left: 191pt;text-indent: 0pt;line-height: 107%;text-align: justify;">*terminal-io*). If :datatypes is provided, it should be a list of data type names; time will then only report storage allocations for the listed datatypes.</p><p style="padding-top: 6pt;padding-left: 191pt;text-indent: 0pt;line-height: 107%;text-align: justify;">time does not  use global state, so it may be nested, etc.</p><p style="padding-top: 6pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">There&#39;s also an Exec command:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: center;">time <i>expression  </i>&amp;key :repeat  :datatypes                           <i>[Command]</i></p><p style="padding-top: 6pt;padding-left: 191pt;text-indent: 0pt;text-align: justify;">The time command sends its output to</p><p style="padding-left: 192pt;text-indent: 0pt;text-align: justify;">*terminal-io* by default.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">room &amp;optional <span class="s141">x</span></p><p class="s8" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">[Function]</p><p style="padding-top: 7pt;padding-left: 13pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The function room is implemented as ( <span class="s40">il: </span>storage); the optional argument is currently ignored. Documentation for <span class="s40">il: </span>storage may be found in the Lisp Library module GCHAX.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 18pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="579" height="1" alt="image" src="Image_411.png"/></span></p><p class="s108" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">122                                     <span class="s3">XEROX COMMON LISP IMPLEMENTATION NOTES, LYRIC RELEASE</span></p></body></html>
