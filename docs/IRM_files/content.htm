<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>IRM</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 .s1 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 24pt; }
 .s2 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 18pt; }
 .s3 { color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s4 { color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s5 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 h3 { color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .p, p { color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s8 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 .s9 { color: black; font-family:"Palatino Linotype", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 h4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 10pt; }
 .s10 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s11 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s12 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s13 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s14 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s15 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s16 { color: black; font-family:"Courier New", monospace; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s17 { color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s18 { color: black; font-family:"Courier New", monospace; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: -2pt; }
 .s19 { color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s20 { color: black; font-family:"Courier New", monospace; font-style: italic; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s21 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s22 { color: black; font-family:"MS UI Gothic", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s23 { color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: -3pt; }
 .s24 { color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; vertical-align: 2pt; }
 .s25 { color: black; font-family:"Courier New", monospace; font-style: italic; font-weight: normal; text-decoration: none; font-size: 6pt; vertical-align: -1pt; }
 .s26 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s27 { color: black; font-family:"Courier New", monospace; font-style: italic; font-weight: normal; text-decoration: none; font-size: 6pt; vertical-align: 3pt; }
 .s28 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; }
 .s29 { color: black; font-family:"Courier New", monospace; font-style: italic; font-weight: normal; text-decoration: none; font-size: 6pt; vertical-align: -3pt; }
 .s30 { color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; }
 .s31 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; }
 .s32 { color: black; font-family:"Courier New", monospace; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: -3pt; }
 .s33 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s34 { color: black; font-family:"Courier New", monospace; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: 3pt; }
 .s35 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; vertical-align: -1pt; }
 .s36 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; vertical-align: -2pt; }
 .s37 { color: black; font-family:"Courier New", monospace; font-style: italic; font-weight: normal; text-decoration: none; font-size: 6pt; vertical-align: -2pt; }
 .s38 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s39 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s41 { color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s42 { color: black; font-family:"Courier New", monospace; font-style: italic; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s43 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 12pt; }
 .s44 { color: black; font-family:"Palatino Linotype", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: -3pt; }
 .s45 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: -3pt; }
 .s46 { color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 18pt; }
 h2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 14pt; }
 .s47 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s48 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s49 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 10pt; vertical-align: -3pt; }
 .s50 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s51 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s52 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: -2pt; }
 .s53 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; vertical-align: 3pt; }
 .s54 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; vertical-align: -2pt; }
 .s55 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s56 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s57 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: -3pt; }
 .s58 { color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; vertical-align: 2pt; }
 li {display: block; }
 #l1 {padding-left: 0pt;counter-reset: c1 1; }
 #l1> li>*:first-child:before {counter-increment: c1; content: counter(c1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 #l1> li:first-child>*:first-child:before {counter-increment: c1 0;  }
 #l2 {padding-left: 0pt;counter-reset: c2 20; }
 #l2> li>*:first-child:before {counter-increment: c2; content: counter(c2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: c2 0;  }
 li {display: block; }
 #l3 {padding-left: 0pt;counter-reset: d1 1; }
 #l3> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 li {display: block; }
 #l4 {padding-left: 0pt; }
 #l4> li>*:first-child:before {content: "• "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l5 {padding-left: 0pt; }
 #l5> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 li {display: block; }
 #l6 {padding-left: 0pt;counter-reset: g1 2; }
 #l6> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l6> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 li {display: block; }
 #l7 {padding-left: 0pt;counter-reset: h1 1; }
 #l7> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 #l8 {padding-left: 0pt;counter-reset: h2 1; }
 #l8> li>*:first-child:before {counter-increment: h2; content: counter(h2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: h2 0;  }
 li {display: block; }
 #l9 {padding-left: 0pt;counter-reset: i1 1; }
 #l9> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l10 {padding-left: 0pt;counter-reset: j1 2; }
 #l10> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)" "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l11 {padding-left: 0pt;counter-reset: i2 10; }
 #l11> li>*:first-child:before {counter-increment: i2; content: counter(i2, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l11> li:first-child>*:first-child:before {counter-increment: i2 0;  }
 li {display: block; }
 #l12 {padding-left: 0pt;counter-reset: k1 1; }
 #l12> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 li {display: block; }
 #l13 {padding-left: 0pt; }
 #l13> li>*:first-child:before {content: "• "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l14 {padding-left: 0pt;counter-reset: m1 1; }
 #l14> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 li {display: block; }
 #l15 {padding-left: 0pt;counter-reset: n1 1; }
 #l15> li>*:first-child:before {counter-increment: n1; content: counter(n1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: n1 0;  }
 li {display: block; }
 #l16 {padding-left: 0pt;counter-reset: o1 1; }
 #l16> li>*:first-child:before {counter-increment: o1; content: counter(o1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: o1 0;  }
 li {display: block; }
 #l17 {padding-left: 0pt;counter-reset: p1 1; }
 #l17> li>*:first-child:before {counter-increment: p1; content: counter(p1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: p1 0;  }
 li {display: block; }
 #l18 {padding-left: 0pt;counter-reset: q1 1; }
 #l18> li>*:first-child:before {counter-increment: q1; content: counter(q1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: q1 0;  }
 #l19 {padding-left: 0pt;counter-reset: q2 52; }
 #l19> li>*:first-child:before {counter-increment: q2; content: counter(q2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l19> li:first-child>*:first-child:before {counter-increment: q2 0;  }
 #l20 {padding-left: 0pt; }
 #l20> li>*:first-child:before {content: "• "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l21 {padding-left: 0pt; }
 #l21> li>*:first-child:before {content: "• "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l22 {padding-left: 0pt;counter-reset: s1 0; }
 #l22> li>*:first-child:before {counter-increment: s1; content: counter(s1, decimal)" "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l22> li:first-child>*:first-child:before {counter-increment: s1 0;  }
 #l23 {padding-left: 0pt;counter-reset: q3 15; }
 #l23> li>*:first-child:before {counter-increment: q3; content: counter(q3, decimal)". "; color: black; font-style: normal; font-weight: bold; text-decoration: none; }
 #l23> li:first-child>*:first-child:before {counter-increment: q3 0;  }
 #l24 {padding-left: 0pt;counter-reset: s1 0; }
 #l24> li>*:first-child:before {counter-increment: s1; content: counter(s1, decimal)" "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: s1 0;  }
 #l25 {padding-left: 0pt;counter-reset: s2 1; }
 #l25> li>*:first-child:before {counter-increment: s2; content: counter(s2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: s2 0;  }
 #l26 {padding-left: 0pt;counter-reset: t1 1; }
 #l26> li>*:first-child:before {counter-increment: t1; content: counter(t1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l26> li:first-child>*:first-child:before {counter-increment: t1 0;  }
 #l27 {padding-left: 0pt;counter-reset: u1 1; }
 #l27> li>*:first-child:before {counter-increment: u1; content: "("counter(u1, upper-latin)") "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l27> li:first-child>*:first-child:before {counter-increment: u1 0;  }
 #l28 {padding-left: 0pt;counter-reset: v1 16; }
 #l28> li>*:first-child:before {counter-increment: v1; content: counter(v1, upper-latin)" "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28> li:first-child>*:first-child:before {counter-increment: v1 0;  }
 #l29 {padding-left: 0pt;counter-reset: w1 1; }
 #l29> li>*:first-child:before {counter-increment: w1; content: counter(w1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l29> li:first-child>*:first-child:before {counter-increment: w1 0;  }
 #l30 {padding-left: 0pt;counter-reset: x1 1; }
 #l30> li>*:first-child:before {counter-increment: x1; content: counter(x1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l30> li:first-child>*:first-child:before {counter-increment: x1 0;  }
 #l31 {padding-left: 0pt;counter-reset: y1 4; }
 #l31> li>*:first-child:before {counter-increment: y1; content: counter(y1, upper-latin)" "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l31> li:first-child>*:first-child:before {counter-increment: y1 0;  }
 #l32 {padding-left: 0pt;counter-reset: z1 5; }
 #l32> li>*:first-child:before {counter-increment: z1; content: counter(z1, lower-latin)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l32> li:first-child>*:first-child:before {counter-increment: z1 0;  }
 #l33 {padding-left: 0pt;counter-reset: z2 1; }
 #l33> li>*:first-child:before {counter-increment: z2; content: counter(z2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l33> li:first-child>*:first-child:before {counter-increment: z2 0;  }
 #l34 {padding-left: 0pt;counter-reset: q3 17; }
 #l34> li>*:first-child:before {counter-increment: q3; content: counter(q3, decimal)". "; color: black; font-style: normal; font-weight: bold; text-decoration: none; }
 #l34> li:first-child>*:first-child:before {counter-increment: q3 0;  }
 #l35 {padding-left: 0pt;counter-reset: q4 1; }
 #l35> li>*:first-child:before {counter-increment: q4; content: counter(q4, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l35> li:first-child>*:first-child:before {counter-increment: q4 0;  }
 #l36 {padding-left: 0pt;counter-reset: y2 1; }
 #l36> li>*:first-child:before {counter-increment: y2; content: counter(y2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l36> li:first-child>*:first-child:before {counter-increment: y2 0;  }
 #l37 {padding-left: 0pt;counter-reset: c1 5; }
 #l37> li>*:first-child:before {counter-increment: c1; content: counter(c1, lower-latin)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l37> li:first-child>*:first-child:before {counter-increment: c1 0;  }
 #l38 {padding-left: 0pt;counter-reset: c2 1; }
 #l38> li>*:first-child:before {counter-increment: c2; content: counter(c2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l38> li:first-child>*:first-child:before {counter-increment: c2 0;  }
 #l39 {padding-left: 0pt; }
 #l39> li>*:first-child:before {content: "• "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l40 {padding-left: 0pt;counter-reset: q3 18; }
 #l40> li>*:first-child:before {counter-increment: q3; content: counter(q3, decimal)". "; color: black; font-style: normal; font-weight: bold; text-decoration: none; }
 #l40> li:first-child>*:first-child:before {counter-increment: q3 0;  }
 #l41 {padding-left: 0pt;counter-reset: e1 1; }
 #l41> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)" "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l41> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 #l42 {padding-left: 0pt;counter-reset: q4 1; }
 #l42> li>*:first-child:before {counter-increment: q4; content: counter(q4, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l42> li:first-child>*:first-child:before {counter-increment: q4 0;  }
 #l43 {padding-left: 0pt;counter-reset: f1 5; }
 #l43> li>*:first-child:before {counter-increment: f1; content: counter(f1, lower-latin)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l43> li:first-child>*:first-child:before {counter-increment: f1 0;  }
 #l44 {padding-left: 0pt;counter-reset: f2 1; }
 #l44> li>*:first-child:before {counter-increment: f2; content: counter(f2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l44> li:first-child>*:first-child:before {counter-increment: f2 0;  }
 #l45 {padding-left: 0pt;counter-reset: g1 1; }
 #l45> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l45> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l46 {padding-left: 0pt;counter-reset: g2 1; }
 #l46> li>*:first-child:before {counter-increment: g2; content: counter(g2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l46> li:first-child>*:first-child:before {counter-increment: g2 0;  }
 #l47 {padding-left: 0pt;counter-reset: h1 1; }
 #l47> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l47> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 #l48 {padding-left: 0pt;counter-reset: q4 1; }
 #l48> li>*:first-child:before {counter-increment: q4; content: counter(q4, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l48> li:first-child>*:first-child:before {counter-increment: q4 0;  }
 #l49 {padding-left: 0pt;counter-reset: i1 1; }
 #l49> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l49> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l50 {padding-left: 0pt;counter-reset: j1 1; }
 #l50> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l50> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l51 {padding-left: 0pt;counter-reset: k1 1; }
 #l51> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l51> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 #l52 {padding-left: 0pt;counter-reset: l1 1; }
 #l52> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l52> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l53 {padding-left: 0pt;counter-reset: e1 1; }
 #l53> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)" "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l53> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 #l54 {padding-left: 0pt;counter-reset: e2 0; }
 #l54> li>*:first-child:before {counter-increment: e2; content: counter(e2, decimal)" "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l54> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l55 {padding-left: 0pt;counter-reset: q4 1; }
 #l55> li>*:first-child:before {counter-increment: q4; content: counter(q4, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l55> li:first-child>*:first-child:before {counter-increment: q4 0;  }
 #l56 {padding-left: 0pt;counter-reset: m1 1; }
 #l56> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l56> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 li {display: block; }
 #l57 {padding-left: 0pt;counter-reset: n1 22; }
 #l57> li>*:first-child:before {counter-increment: n1; content: counter(n1, decimal)". "; color: black; font-style: normal; font-weight: bold; text-decoration: none; }
 #l57> li:first-child>*:first-child:before {counter-increment: n1 0;  }
 #l58 {padding-left: 0pt; }
 #l58> li>*:first-child:before {content: "• "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l59 {padding-left: 0pt; }
 #l59> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 li {display: block; }
 #l60 {padding-left: 0pt;counter-reset: q1 23; }
 #l60> li>*:first-child:before {counter-increment: q1; content: counter(q1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 #l60> li:first-child>*:first-child:before {counter-increment: q1 0;  }
 #l61 {padding-left: 0pt;counter-reset: q2 1; }
 #l61> li>*:first-child:before {counter-increment: q2; content: counter(q2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l61> li:first-child>*:first-child:before {counter-increment: q2 0;  }
 li {display: block; }
 #l62 {padding-left: 0pt;counter-reset: r1 23; }
 #l62> li>*:first-child:before {counter-increment: r1; content: counter(r1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 #l62> li:first-child>*:first-child:before {counter-increment: r1 0;  }
 #l63 {padding-left: 0pt;counter-reset: r2 1; }
 #l63> li>*:first-child:before {counter-increment: r2; content: counter(r2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l63> li:first-child>*:first-child:before {counter-increment: r2 0;  }
 #l64 {padding-left: 0pt; }
 #l64> li>*:first-child:before {content: "• "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l65 {padding-left: 0pt;counter-reset: t1 1; }
 #l65> li>*:first-child:before {counter-increment: t1; content: counter(t1, lower-roman)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l65> li:first-child>*:first-child:before {counter-increment: t1 0;  }
 #l66 {padding-left: 0pt;counter-reset: t2 1; }
 #l66> li>*:first-child:before {counter-increment: t2; content: counter(t2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l66> li:first-child>*:first-child:before {counter-increment: t2 0;  }
 #l67 {padding-left: 0pt;counter-reset: r2 1; }
 #l67> li>*:first-child:before {counter-increment: r2; content: counter(r2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l67> li:first-child>*:first-child:before {counter-increment: r2 0;  }
 #l68 {padding-left: 0pt;counter-reset: u1 1; }
 #l68> li>*:first-child:before {counter-increment: u1; content: counter(u1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l68> li:first-child>*:first-child:before {counter-increment: u1 0;  }
 #l69 {padding-left: 0pt; }
 #l69> li>*:first-child:before {content: "• "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l70 {padding-left: 0pt;counter-reset: r2 1; }
 #l70> li>*:first-child:before {counter-increment: r2; content: counter(r2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l70> li:first-child>*:first-child:before {counter-increment: r2 0;  }
 #l71 {padding-left: 0pt;counter-reset: w1 1; }
 #l71> li>*:first-child:before {counter-increment: w1; content: counter(w1, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l71> li:first-child>*:first-child:before {counter-increment: w1 0;  }
 #l72 {padding-left: 0pt;counter-reset: r2 1; }
 #l72> li>*:first-child:before {counter-increment: r2; content: counter(r2, decimal)". "; color: black; font-family:"Palatino Linotype", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l72> li:first-child>*:first-child:before {counter-increment: r2 0;  }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;"><span><img width="137" height="18" alt="image" src="Image_001.png"/></span></p><p class="s1" style="padding-bottom: 3pt;padding-left: 45pt;text-indent: 0pt;line-height: 27pt;text-align: left;"><a name="bookmark0">Venue </a><span class="s2">MEDLEY LANGUAGE REFERENCE</span></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="133" height="17" alt="image" src="Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 11pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Address comments to:</p><p class="s3" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Venue</p><p class="s3" style="padding-bottom: 1pt;padding-left: 126pt;text-indent: 0pt;line-height: 82%;text-align: left;">User Documentation 1549 Industrial Road San Carlos, CA 94070 415-508-9672</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="414" height="3" alt="image" src="Image_003.png"/></span></p><p class="s3" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 148%;text-align: left;">MEDLEY REFERENCE MANUAL VOLUME I: LANGUAGE</p><p class="s3" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">April, 1993</p><p class="s3" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 148%;text-align: left;">Copyright <span class="s4"></span><span class="s5"> </span>1985, 1991, 1993 by Venue. All rights reserved.</p><p class="s3" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">Medley is a trademark of Venue.</p><p class="s3" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">InterPress is a trademark of Xerox Corporation.</p><p class="s3" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">PostScript is a registered trademark of Adobe Systems Inc.</p><p class="s3" style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;line-height: 74%;text-align: left;">Copyright protection includes material generated from the software programs displayed on the screen, such as icons, screen display looks, and the like.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="412" height="3" alt="image" src="Image_004.png"/></span></p><p class="s3" style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;line-height: 74%;text-align: left;">The information in this document is subject to change without notice and should not be construed as a commitment by Venue. While every effort has been made to ensure the accuracy of this document, Venue assumes no responsibility for any errors that may appear.</p><p class="s3" style="padding-top: 10pt;padding-left: 126pt;text-indent: 0pt;line-height: 74%;text-align: justify;">Text was written and produced with Venue text formatting tools; PostScript printers were used to produce masters. The typeface is Palatino.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark1">TABLE of CONTENTS</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 6pt;text-align: left;"><span><img width="608" height="8" alt="image" src="Image_005.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 6pt;padding-left: 156pt;text-indent: 0pt;text-align: left;">Volume 1 - Lanuage Reference</p><ol id="l1"><li><h3 style="padding-top: 7pt;padding-left: 21pt;text-indent: -15pt;text-align: left;">Introduction 1</h3></li><li><h3 style="padding-top: 6pt;padding-left: 21pt;text-indent: -15pt;line-height: 16pt;text-align: left;">Litatoms (Symbols) 2-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Using Symbols as Variables 2-1</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Function Definition Cells 2-3</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Property Lists 2-4</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Print Names 2-5</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Characters and Character Codes 2-9</p></li><li><h3 style="padding-top: 6pt;padding-left: 21pt;text-indent: -15pt;line-height: 16pt;text-align: left;">Lists 3-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Creating Lists. 3-3</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Building Lists from Left to Right 3-4</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Copying Lists 3-6</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Extracting Tails of Lists 3-6</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Counting List Cells 3-8</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Logical Operations 3-9</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Searching Lists 3-10</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Substitution Functions 3-10</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Association Lists and Property Lists 3-11</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Sorting Lists 3-13</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Other List Functions 3-15</p></li><li><h3 style="padding-top: 6pt;padding-left: 21pt;text-indent: -15pt;text-align: left;">Strings 4-1</h3></li><li><h3 style="padding-top: 6pt;padding-left: 21pt;text-indent: -15pt;text-align: left;">Arrays 5-1</h3></li><li><h3 style="padding-top: 6pt;padding-left: 21pt;text-indent: -15pt;line-height: 16pt;text-align: left;">Hash Arrays 6-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Hash Overflow 6-3</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">User-Specified Hashing Functions 6-3</p></li><li><h3 style="padding-top: 6pt;padding-left: 21pt;text-indent: -15pt;line-height: 16pt;text-align: left;">Numbers and Arithmetic Functions 7-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Generic Arithmetic 7-2</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Integer Arithmetic 7-3</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Logical Arithmetic Functions 7-6</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Floating-Point Arithmetic 7-8</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Other Arithmetic Functions 7-10</p></li><li><h3 style="padding-top: 6pt;padding-left: 21pt;text-indent: -15pt;line-height: 16pt;text-align: left;">Record Package 8-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FETCH and REPLACE 8-1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CREATE 8-2</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">TYPE? 8-3</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">WITH 8-4</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Record Declarations 8-4</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Record Types 8-5</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Optional Record Specifications 8-10</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Defining New Record Types 8-12</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Record Manipulation Functions 8-12</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Changetran 8-13</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Built-in and User Data Types 8-15</p></li><li><h3 style="padding-top: 6pt;padding-left: 69pt;text-indent: -15pt;line-height: 16pt;text-align: left;">Conditionals and Iterative Statements 9-1</h3><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Data Type Predicates 9-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Equality Predicates 9-2</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Logical Predicates 9-3</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">COND Conditional Function 9-3</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The IF Statement 9-4</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Selection Functions 9-5</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PROG and Associated Control Functions 9-6</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The Iterative Statement 9-7</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">I.s. Types 9-8</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Iterative Variable I.s.oprs 9-9</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Condition I.s.oprs 9-12</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Other I.s.oprs 9-13</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Miscellaneous Hints on I.s.oprs 9-13</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Errors in Iterative Statements 9-15</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Defining New Iterative Statement Operators 9-15</p></li><li><h3 style="padding-top: 6pt;padding-left: 75pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Function Definition, Manipulation, and Evaluation 10-1</h3><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Function Types 10-2</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Lambda-Spread Functions 10-2</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Nlambda-Spread Functions 10-3</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Lambda-Nospread Functions 10-4</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Nlambda-Nospread Functions 10-4</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Compiled Functions 10-5</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Function Type Functions 10-5</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Defining Functions 10-7</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Function Evaluation 10-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Iterating and Mapping Functions 10-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Function Arguments 10-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Macros 10-1</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DEFMACRO 10-15</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Interpreting Macros 10-15</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h3 style="padding-left: 27pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Variable Binds and the Interlisp Stack 11-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Spaghetti Stack 11-2</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Stack Functions 11-3</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Searching the Stack 11-4</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Variable Binds in Stack Frames 11-5</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Evaluating Expressions in Stack Frames 11-6</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Altering Flow of Control 11-6</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Releasing and Reusing Stack Pointers 11-7</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Backtrace Functions 11-8</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Other Stack Functions 11-10</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The Stack and the Interpreter 11-10</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Generators 11-12</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Coroutines 11-14</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Possibilities Lists 11-15</p></li><li><h3 style="padding-top: 6pt;padding-left: 27pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Miscellaneous 12-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Greeting and Initialization Files 12-1</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Idle Mode 12-3</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Saving Virtual Memory State 12-5</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">System Version Information 12-9</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Date and Time Functions 12-11</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Timers and Duration Functions 12-13</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Resources 12-15</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">A Simple Example 12-16</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Trade-offs in More Complicated Cases 12-18</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Macros for Accessing Resources 12-18</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Saving Resources in a File 12-19</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Pattern Matching 12-19</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Pattern Elements 12-20</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Element Patterns 12-20</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Segment Patterns 12-21</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Assignments 12-23</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Place-Markers 12-23</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Replacements 12-24</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Reconstruction 12-24</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Examples 12-25</p><p class="s7" style="padding-top: 31pt;padding-left: 142pt;text-indent: 0pt;text-align: left;">Volume 2 - Environment Reference</p></li><li><h3 style="padding-top: 7pt;padding-left: 27pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Interlisp Executive 13-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Input Formats 13-3</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Programmer’s Assistant Commands 13-4</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Event Specification 13-4</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Commands 13-6</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">P.A. Commands Applied to P.A. Commands 13-15</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Changing the Programmer’s Assistant 13-16</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Undoing 13-19</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Undoing Out of Order 13-20</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">SAVESET 13-21</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">UNDONLSETQ and RESETUNDO 13-22</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Format and Use of the History List 13-23</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Programmer’s Assistant Functions 13-26</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The Editor and the Programmer’s Assistant 13-32</p></li><li><h3 style="padding-top: 6pt;padding-left: 75pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Errors and Breaks 14-1</h3><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Breaks 14-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Break Windows. 14-2</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Break Commands 14-3</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Controlling When to Break 14-10</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Break Window Variables 14-11</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Creating Breaks with BREAK1 14-12</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Signalling Errors 14-14</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Catching Errors 14-16</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Changing and Restoring System State 14-18</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Error List 14-20</p></li><li><h3 style="padding-top: 6pt;padding-left: 75pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Breaking, Tracing, and Advising 15-1</h3><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Breaking Functions and Debugging 15-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Advising 15-7</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Implementation of Advising. 15-7</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Advise Functions 15-8</p></li><li><h3 style="padding-top: 6pt;padding-left: 75pt;text-indent: -21pt;line-height: 16pt;text-align: left;">List Structure Editor 16-1</h3><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">SEdit 16-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Local Attention-Changing Commands 16-10</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Commands That Search 16-14</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Search Algorithm 16-15</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Search Commands 16-16</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Location Specification 16-18</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Commands That Save and Restore the Edit Chain 16-21</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Commands That Modify Structure 16-22</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Implementation 16-23</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The A, B, and : Commands 16-24</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Form Oriented Editing and the Role of UP 16-26</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Extract and Embed 16-26</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The MOVE Command 16-28</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Commands That Move Parentheses 16-30</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">TO and THRU 16-31</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The R Command 16-34</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Commands That Print 16-35</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Commands for Leaving the Editor. 16-37</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Nested Calls to Editor 16-39</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Manipulating the Characters of an Atom or String 16-39</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Manipulating Predicates and Conditional Expressions 16-40</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">History Commands in the Editor 16-41</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Miscellaneous Commands 16-41</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Commands That Evaluate 16-43</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Commands That Test 16-45</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Edit Macros 16-46</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Undo 16-48</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">EDITDEFAULT 16-50</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Editor Functions 16-51</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Time Stamps 16-57</p></li><li><h3 style="padding-top: 6pt;padding-left: 27pt;text-indent: -21pt;line-height: 16pt;text-align: left;">File Package 17-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Loading Files 17-3</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Storing Files 17-8</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Remaking a Symbolic File 17-12</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Loading Files in a Distributed Environment 17-13</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Marking Changes 17-13</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Noticing Files 17-15</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Distributing Change Information 17-16</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">File Package Types 17-16</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Functions for Manipulating Typed Definitions 17-19</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Defining New File Package Types 17-23</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">File Package Commands 17-25</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Functions and Macros 17-26</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Variables 17-27</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Litatom Properties 17-29</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Miscellaneous File Package Commands 17-30</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DECLARE: 17-31</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Exporting Definitions 17-33</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FileVars 17-34</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Defining New File Package Commands 17-35</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Functions for Manipulating File Command Lists 17-37</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Symbolic File Format. 17-38</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Copyright Notices 17-40</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Functions Used Within Source Files 17-42</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">File Maps 17-42</p></li><li><h3 style="padding-top: 6pt;padding-left: 27pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Compiler 18-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Compiler Printout 18-2</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Global Variables 18-3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Local Variables and Special Variables 18-4</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Constants 18-5</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Compiling Function Calls 18-6</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FUNCTION and Functional Arguments 18-7</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Open Functions 18-8</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">COMPILETYPELST 18-8</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Compiling CLISP 18-9</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Compiler Functions 18-9</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Block Compiling 18-12</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Block Declarations 18-13</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Block Compiling Functions 18-15</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Compiler Error Messages 18-16</p><p class="s8" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">19. DWIM 20-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Spelling Correction Protocol 20-3</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Parentheses Errors Protocol 20-4</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Undefined Function T Errors 20-4</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DWIM Operation 20-5</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DWIM Correction: Unbound Atoms 20-6</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Undefined CAR of Form 20-7</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Undefined Function in APPLY 20-8</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DWIMUSERFORMS 20-8</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DWIM Functions and Variables 20-10</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Spelling Correction. 20-11</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Synonyms 20-12</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Spelling Lists 20-12</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Generators for Spelling Correction 20-14</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Spelling Corrector Algorithm 20-14</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Spelling Corrector Functions and Variables 20-15</p><ol id="l2"><li><h3 style="padding-top: 6pt;padding-left: 75pt;text-indent: -21pt;line-height: 16pt;text-align: left;">CLISP 21-1</h3><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CLISP Interaction with User 21-4</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CLISP Character Operators 21-5</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Declarations 21-9</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CLISP Operation 21-10</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CLISP Translations 21-12</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DWIMIFY 21-13</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CLISPIFY 21-16</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Miscellaneous Functions and Variables 21-18</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CLISP Internal Conventions 21-20</p></li><li><h3 style="padding-top: 6pt;padding-left: 75pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Performance Issues 22-1</h3><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Storage Allocation and Garbage Collection 22-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Variable Bindings 22-4</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Performance Measuring 22-5</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">BREAKDOWN 22-7</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">GAINSPACE 22-9</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Using Data Types Instead of Records 22-9</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Using Incomplete File Names 22-10</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Using &quot;Fast&quot; and &quot;Destructive&quot; Functions 22-10</p></li><li><h3 style="padding-top: 6pt;padding-left: 27pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Processes 23-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Creating and Destroying Processes 23-1</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Process Control Constructs 23-4</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Events 23-5</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Monitors 23-7</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Global Resources 23-8</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Typein and the TTY Process 23-9</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Switing the TTY Process 23-9</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Handling of Interrupts 23-11</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Keeping the Mouse Alive 23-12</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Process Status Window 23-12</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Non-Process Compatibility 23-14</p><p class="s7" style="padding-top: 27pt;padding-left: 175pt;text-indent: 0pt;text-align: left;">Volume 3 - I/O Reference</p></li><li><h3 style="padding-top: 7pt;padding-left: 27pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Streams and Files 24-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Opening and Closing File Streams 24-1</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">File Names 24-4</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Incomplete File Names 24-7</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Version Recognition 24-9</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Using File Names Instead of Streams 24-10</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">File Name Efficiency Considerations 24-11</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Obsolete File Opening Functions 24-11</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Converting Old Programs 24-11</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Using Files with Processes 24-12</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">File Attributes 24-12</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Closing and Reopening Files 24-15</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Local Hard Disk Device 24-16</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Floppy Disk Device 24-18</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">I / O Operations To and From Strings 24-22</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Temporary Files and the CORE Device 24-23</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">NULL Device 24-24</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Deleting, Copying, and Renaming Files 24-24</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Searching File Directories 24-24</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Listing File Directories 24-25</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">File Servers 24-28</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PUP File Server Protocols 24-28</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Xerox NS File Server Protocols 24-28</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Operating System Designations 24-29</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Logging In 24-30</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Abnormal Conditions 24-31</p></li><li><h3 style="padding-top: 6pt;padding-left: 75pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Input/Output Functions 25-1</h3><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Specifying Streams for Input / Output Functions 25-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Input Functions 25-2</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Output Functions 25-6</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PRINTLEVEL 25-8</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Printing Numbers 25-10</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">User Defined Printing 25-12</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Printing Unusual Data Structures 25-13</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Random Access File Operations. 25-14</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Input / Output Operations with Characters and Bytes 25-17</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PRINTOUT 25-17</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Horizontal Spacing Commands 25-19</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Vertical Spacing Commands 25-20</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Special Formatting Controls 25-20</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Printing Specifications 25-20</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Paragraph Format 25-21</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Right-Flushing 25-21</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Centering 25-22</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Numbering 25-22</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Escaping to Lisp 25-23</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">User-Defined Commands 25-23</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Special Printing Functions 25-24</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">READFILE and WRITEFILE 25-25</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Read Tables 25-25</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Read Table Functions 25-26</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Syntax Classes 25-26</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Read Macros 25-29</p></li><li><h3 style="padding-top: 6pt;padding-left: 75pt;text-indent: -21pt;line-height: 16pt;text-align: left;">User Input/Output Packages 26-1</h3><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Inspector 26-1</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Calling the Inspector 26-1</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Multiple Ways of Inspecting 26-2</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Inspect Windows 26-3</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Inspect Window Commands 26-3</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Interaction with Break Windows 26-4</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Controlling the Amount Displayed During Inspection 26-4</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Inspect Macros 26-4</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">INSPECTWs 26-5</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PROMPTFORWORD 26-7</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">ASKUSER 26-9</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Format of KEYLST 26-10</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Options 26-12</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Operation 26-13</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Completing a Key 26-14</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Special Keys 26-15</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Startup Protocol and Typeahead 26-16</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">TTYIN Typein Editor 26-17</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Entering Input with TTYIN 26-17</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Mouse Commands (Interlisp-D Only) 26-19</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Display Editing Commands 26-19</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Using TTYIN for Lisp Input 26-22</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Useful Macros. 26-23</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Programming with TTYIN 26-23</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Using TTYIN as a General Editor 26-25</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">?= Handler 26-26</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Read Macros 26-27</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Assorted Flags 26-28</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Special Responses 26-29</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Display Types 26-30</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Prettyprint 26-31</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Comment Feature 26-33</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Comment Pointers 26-34</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Converting Comments to Lowercase 26-35</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Special Prettyprint Controls 26-36</p></li><li><h3 style="padding-top: 6pt;padding-left: 27pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Graphics Output Operations 27-1</h3><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Primitive Graphics Concepts 27-1</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Positions 27-1</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Regions 27-1</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Bitmaps 27-2</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Textures 27-5</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Opening Image Streams. 27-6</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Accessing Image Stream Fields 27-8</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Current Position of an Image Stream 27-10</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Moving Bits Between Bitmaps with BITBLT 27-11</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Drawing Lines 27-13</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Drawing Curves 27-14</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Miscellaneous Drawing and Printing Operations 27-15</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Drawing and Shading Grids 27-17</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Display Streams 27-18</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Fonts 27-19</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Font Files and Font Directories 27-24</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Font Profiles 27-24</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Image Objects 27-27</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">IMAGEFNS Methods 27-28</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Registering Image Objects 27-30</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Reading and Writing Image Objects on Files 27-31</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Copying Image Objects Between Windows 27-31</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Implementation of Image Streams 27-32</p></li><li><h3 style="padding-top: 6pt;padding-left: 75pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Windows and Menus 28-1</h3><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Using the Window System 28-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Changing the Window System 28-6</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Interactive Display Functions 28-7</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Windows 28-9</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Window Properties 28-10</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Creating Windows 28-10</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Opening and Closing Windows 28-11</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Redisplaying Windows 28-12</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Reshaping Windows 28-13</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Moving Windows 28-14</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Exposing and Burying Windows 28-16</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Shrinking Windows into Icons 28-16</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Coordinate Systems, Extents, and Scrolling 28-18</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Mouse Activity in Windows 28-21</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Terminal I / O and Page Holding 28-22</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">TTY Process and the Caret 28-23</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Miscellaneous Window Functions 28-24</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Miscellaneous Window Properties 28-25</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Example: A Scrollable Window 28-26</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Menus 28-28</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Menu Fields 28-29</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Miscellaneous Menu Functions 28-32</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Examples of Menu Use 28-32</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Attached Windows 28-34</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Attaching Menus to Windows. 28-37</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Attached Prompt Windows 28-38</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Window Operations and Attached Windows 28-39</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Window Properties of Attached Windows 28-41</p></li><li><h3 style="padding-top: 6pt;padding-left: 75pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Hardcopy Facilities 29-1</h3><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Hardcopy Functions 29-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Low-Level Hardcopy Variables 29-4</p></li><li><h3 style="padding-top: 6pt;padding-left: 75pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Terminal Input/Output 30-1</h3><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Interrupt Characters 30-1</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Terminal Tables 30-4</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Terminal Syntax Classes 30-4</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Terminal Control Functions 30-5</p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Line-Buffering 30-7</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Dribble Files 30-10</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Cursor and Mouse 30-10</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Changing the Cursor Image 30-11</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Flashing Bars on the Cursor 30-13</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Cursor Position 30-13</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Mouse Button Testing 30-14</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Low-Level Mouse Functions 30-15</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Keyboard Interpretation 30-15</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Display Screen 30-18</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Miscellaneous Terminal I / O 30-19</p></li><li><h3 style="padding-top: 6pt;padding-left: 27pt;text-indent: -21pt;line-height: 16pt;text-align: left;">Ethernet 31-1</h3></li></ol></li></ol><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Ethernet Protocols 31-1</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Protocol Layering 31-1</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Level Zero Protocols 31-2</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Level One Protocols 31-2</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Higher Level Protocols 31-3</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Connecting Networks: Routers and Gateways 31-3</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Addressing Conflicts with Level Zero Mediums 31-3</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">References 31-4</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Higher-Level PUP Protocol Functions 31-4</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Higher-Level NS Protocol Functions 31-5</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Name and Address Conventions 31-5</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Clearinghouse Functions 31-7</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">NS Printing 31-9</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">SPP Stream Interface 31-9</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Courier Remote Procedure Call Protocol 31-11</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Defining Courier Programs 31-11</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Courier Type Definitions 31-12</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Pre-defined Types 31-13</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Constructed Types 31-13</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">User Extensions to the Type Language 31-15</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Performing Courier Transactions 31-16</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Expedited Procedure Call 31-17</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Expanding Ring Broadcast 31-18</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Using Bulk Data Transfer 31-18</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Courier Subfunctions for Data Transfer 31-19</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Level One Ether Packet Format 31-20</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PUP Level One Functions 31-21</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Creating and Managing Pups 31-21</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Sockets 31-22</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Sending and Receiving Pups 31-23</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Pup Routing Information 31-23</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Miscellaneous PUP Utilities 31-24</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PUP Debugging Aids 31-24</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">NS Level One Functions 31-28</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Creating and Managing XIPs 31-28</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">NS Sockets 31-28</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Sending and Receiving XIPs 31-29</p><p style="padding-left: 155pt;text-indent: 0pt;line-height: 12pt;text-align: left;">NS Debugging Aids 31-29</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Support for Other Level One Protocols. 31-29</p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The SYSQUEUE Mechanism 31-31</p><h3 style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Glossary ...........................................................................................GLOSSARY-1</h3><h3 style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Index ..........................................................................................................INDEX-1</h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l3"><li><p class="s6" style="padding-top: 4pt;padding-bottom: 4pt;padding-left: 19pt;text-indent: -13pt;text-align: left;"><a name="bookmark2">INTRODUCTION</a></p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="602" height="3" alt="image" src="Image_006.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley is a <i>programming system </i>that consists of a programming <i>language</i>, a large number of predefined programs (or <i>functions</i>) that you can use directly or as subroutines, and an <i>environment </i>that supports you with a variety of specialized programming tools. The language and predefined functions of Lisp are rich, but similar to those of other modern programming languages. The Medley programming environment, on the other hand, is very distinctive. Its main feature is an integrated set of programming tools that know enough about Interlisp and Common Lisp to act as semi-autonomous, intelligent &quot;assistants&quot; to you. This environment provides a completely self-contained world for creating, debugging and maintaining Lisp programs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This manual describes all three parts of Medley. There are discussions of the language, about the pieces of the system that can be incorporated into your programs, and about the environment. The line between your code and the environment is thin and changing. Most users extend the environment with some special features of their own. Because Medley is so easily extended, the system has grown over time to incorporate many different ideas about effective and useful ways to program. This gradual accumulation over many years has resulted in a rich and diverse system. It is also the reason this manual is so large.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The rest of this manual describes the individual pieces of Medley; this chapter describes system as a whole—including the otherwise-unstated philosophies that tie it all together. It will give you a global view of Medley.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Lisp as a Programming Language                                                                                                          </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This manual is not an introduction to programming in Lisp. This section highlights a few key points about lisp that will make the rest of the manual clear.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In Lisp, large programs (or functions) are built up by composing the results of smaller ones. Although Medley, like most modern Lisps, lets you program in almost any style you can imagine, the natural style of Lisp is functional and recursive—each function computes its result by calling lower-level “building-block” functions, then passing that result back to its caller (rather than by producing “side- effects” on external data structures, for example).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Lisp is also a list-manipulation language. Like other languages, Lisp can process characters and numbers. But you get more power if you program at a higher level. The primitive data objects of Lisp are “atoms” (symbols or identifiers) and “lists” (sequences of atoms or lists), which you use to represent information and relationships. Each Lisp dialect has a set of operations that act on atoms and lists, and these operations comprise the core of the language.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Invisible in the programs, but essential to the Lisp style of programming, is an automatic memory management system (an “allocator” and a “garbage collector”). New storage is allocated automatically whenever a you create a new data object. And that storage is automatically reclaimed for reuse when no other object refers to it. Automated memory management is essential for rapid,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">large-scale program development because it frees you from the task of maintaining the details of memory administration, which change constantly during rapid program evolution.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A key property of Lisp is that Lisp function definitions are just pieces of Lisp list data. Each subfunction &quot;call&quot; (or <i>function application</i>) is written as a list with the function first, followed by its arguments. Thus, <span class="s11">(PLUS 1 2) </span>represents the expression <span class="s11">1+2</span>. A function’s definition, then, is just a list of such function applications, to be evaluated in order. This representation of program as data lets you use the same operations on programs that you use on data—making it very easy to write Lisp programs that look at and change <i>other Lisp programs</i>. This, in turn, makes it easy to develop programming tools and translators, which was essential to the development of the Medley environment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The most important benefit of this is that you can extend the Lisp programming language itself. Do you miss some favorite programming idiom? Just define a function that translates the desired expression into simpler Lisp. Now your idiom is <i>part of the language</i>. Medley has extensive facilities for making this type of language extension. Using this ability to extend itself, Interlisp has incorporated many of the constructs that have been developed in other modern programming languages (e.g. if-then-else, do loops, etc.).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Medley as an Interactive Environment                                                                                                    </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley programs should not be thought of as simple files of source code. All Medley programming takes place within the Medley environment, which is a completely self-sufficient environment for developing and using Medley programs. Beyond the obvious programming facilities (e.g., program editors, compilers, debuggers, etc.), the envionrment also contains a variety of tools that &quot;keep track&quot; of what happens. For example, the Medley File Manager notices when programs or data have been changed, so the system will know what needs to be saved at the end of a session. The &quot;residential&quot; style, where you stay inside the environment throughout the development, is essential for these tools to operate. Furthermore, this same environment is available to support the final production version, some parts providing run time support and other parts being ignored until the need arises for further debugging or development.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For terminal interaction, Medley provides a top level &quot;Read-Eval-Print&quot; executive, which reads whatever you type in, evaluates it, and prints the result. (This interaction is also recorded, so you can ask to do an action again, or even to undo the effects of a previous action.) Although Executives understand some specialized commands, most of the interaction will consist of simple Lisp expressions. So rather than special commands for operations like manipulating your files, you just type the same expressions that you would use to accomplish them in a Lisp program. This creates a very rich, simple, and uniform set of interactive commands, since any Lisp expression can be typed at an executive and evaluated immediately.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">In normal use, you write a program (or rather, &quot;define a function&quot;) by typing in an expression that invokes the &quot;function defining&quot; function <span class="s11">(DEFINEQ)</span>, giving it the name of the function being defined and its new definition. The newly-defined function can be executed immediately, simply by using it in a Lisp expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">INTRODUCTION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">In addition to these basic programming tools, Medley also provides a wide variety of programming support mechanisms:</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: -85pt;line-height: 91%;text-align: justify;">List structure editor Since Lisp programs are represented as list structure, Medley provides an editor which allows one to change the list structure of a function’s definition directly. See Chapter 16.</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: -60pt;line-height: 91%;text-align: justify;">Pretty-printer The pretty printer is a function that prints Lisp function definitions so that their syntactic structure is displayed by the indentation and fonts used. See page Chapter 26.</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: -45pt;line-height: 91%;text-align: justify;">Debugger When errors occur, the debugger is called, allowing you to examine and modify the context at the point of the error. Often, this lets you continue execution without starting from the beginning. Within a break, the full power of Interlisp is available to you. Thus, the broken function can be edited, data structures can be inspected and changed, other computations carried out, and so on. All of this occurs in the context of the suspended computation, which remains available to be resumed. See Chapter 14.</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: -33pt;line-height: 91%;text-align: left;">DWIM The &quot;Do What I Mean&quot; package automatically fixes misspellings and errors in typing. See Chapter 20.</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: -102pt;line-height: 91%;text-align: left;">Programmer’s Assistant Medley keeps track of your actions during a session and allows each one to be replayed, undone, or altered. See Chapter 13.</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: -56pt;line-height: 93%;text-align: justify;">Masterscope Masterscope is a program analysis and management tool which can analyze users’ functions and build (and automatically maintain) a data base of the results. This allows you to ask questions like &quot;<span class="s11">WHO CALLS ARCTAN</span>&quot; or &quot;<span class="s11">WHO USES COEF1 FREELY</span>&quot; or to request systematic changes like &quot;<span class="s11">EDIT WHERE ANY </span>[function] <span class="s11">FETCHES ANY FIELD OF </span>[the data structure] <span class="s11">FOO</span>&quot;. See Chapter 19.</p><p style="padding-top: 7pt;padding-left: 149pt;text-indent: -111pt;line-height: 91%;text-align: justify;">Record / Datatype Package Medley allows you to define new data structures. This enables one to separate the issues of data access from the details of how the data is actually stored. See Chapter 8.</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: -58pt;line-height: 91%;text-align: justify;">File Manager Source code files in Medley are managed by the system, removing the problem of ensuring timely file updates from the user. The file manager can be modified and extended to accomodate new types of data. See Chapter 17.</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: -93pt;line-height: 91%;text-align: left;">Performance Analysis These tools allow statistics on program operation to be collected and analyzed.  See Chapter 22.</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: -80pt;line-height: 91%;text-align: justify;">Multiple Processes Multiple and independent processes simplify problems which require logically separate pieces of code to operate in parallel. See Chapter 23.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 198pt;text-indent: -44pt;line-height: 91%;text-align: justify;">Windows The ability to have multiple, independent windows on the display allows many different processes or activities to be active on the screen at once. See Chapter 28.</p><p style="padding-top: 6pt;padding-left: 198pt;text-indent: -43pt;line-height: 91%;text-align: justify;">Inspector The inspector is a display tool for examining complex data structures encountered during debugging.  See Chapter 26.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">These facilities are tightly integrated, so they know about and use each other, just as they can be used by user programs. For example, Masterscope uses the structural editor to make systematic changes. By combining the program analysis features of Masterscope with the features of the structural editor, large scale system changes can be made with a single command. For example, when the lowest-level interface of the Medley I / O system was changed to a new format, the entire edit was made by a single call to Masterscope of the form <span class="s11">EDIT WHERE ANY CALLS ’(BIN BOUT ...)</span>. [Burton et al., 1980] This caused Masterscope to invoke the editor at each point in the system where any of the functions in the list <span class="s11">’(BIN BOUT ...) </span>were called. This ensured that no functions used in input or output were overlooked during the modification.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Philosophy                                                                                                                                                 </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley’s extensive environmental support has developed over the years to support a particular style of programming called &quot;exploratory programming&quot; [Sheil, 1983]. For many complex programming problems, the task of program creation is <i>not </i>simply one of writing a program to fulfill specifications. Instead, it is a matter of exploring the problem (trying out various solutions expressed as partial programs) until one finds a good solution (or sometimes, any solution at all!). Such programs are by nature evolutionary; they are transformed over time from one realization to another in response to a growing understanding of the problem. This point of view has lead to an emphasis on having the tools available to analyze, alter, and test programs easily. One important aspect of this is that the tools be designed to work together in an integrated fashion, so that knowledge about the user’s programs, once gained, is available throughout the environment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The development of programming tools to support exploratory programming is itself an exploration. No one knows all the tools that will eventually be found useful, and not all programmers want all of the tools to behave the same way. In response to this diversity, Interlisp has been shaped, by its implementors and by its users, to be easily extensible in several different ways. First, there are many places in the system where its behavior can be adjusted by the user. One way that this can be done is by changing the value of various &quot;flags&quot; or variables whose values are examined by system code to enable or suppress certain behavior. The other is where the user can provide functions or other behavioral specifications of what is to happen in certain contexts. For example, the format used for each type of list structure when it is printed by the pretty-printer is determined by specifications that are found on the list <span class="s11">PRETTYPRINTMACROS</span>. Thus, this format can be changed for a given type simply by putting a printing specification for it on that list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Another way in which users can affect Medley’s behavior is by redefining or changing system functions. The &quot;Advise&quot; capability, for instance, lets you modify the operation of virtually any function in the system by wrapping code &quot;around&quot; the selected function. (This same philosophy extends to breaking and tracing, so almost any function in the system can be broken or traced.) Since</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">INTRODUCTION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">the entire system is implemented in Lisp, there are few places where the system’s behavior depends on anything that you can’t modify (such as a low level system implementation language).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">While these techniques provide a fair amount of tailorability, there’s a price: Medley is complex. There are many flags, parameters, and controls that affect its behavior. Because of this complexity, Interlisp tends to be more comfortable for experts, rather than casual users. Beginning users of Interlisp should depend on the default settings of parameters until they learn what dimensions of flexibility are available.  At that point, they can begin to &quot;tune&quot; the system to their preferences.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Appropriately enough, even Medley’s underlying philosophy was itself discovered during Medley’s development, rather than laid out beforehand. The Medley environment and its interactive style were first analyzed in Sandewall’s excellent paper [Sandewall, 1978]. The notion of &quot;exploratory programming&quot; and the genesis of the Interlisp programming tools in terms of the characteristic demands of this style of programming was developed in [Sheil, 1983]. The evolution and structure of the Interlisp programming environment are discussed in greater depth in [Teitelman &amp; Masinter, 1981].</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">How to Use this Manual                                                                                                                            </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This document is a reference manual, not a primer. We have tried to provide a manual that is complete, and that lets you find particular items as easily as possible. Sometimes, these goals have been achieved at the expense of simplicity. For example, many functions have a number of arguments that are rarely used. In the interest of providing a complete reference, these arguments are fully explained, even though you will normally let them default. There is a lot of information in this manual that is of interest only to experts.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Do not try to read straight through this manual, like a novel. In general, the chapters are organized with overview explanations and the most useful functions at the beginning of the chapter, and implementation details towards the end. If you are interested in becoming acquainted with Medley, we urge you to work through <i>An Introduction to Medley </i>before attempting this manual.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">A few comments about the notational conventions used in this manual:</p><p class="s11" style="padding-top: 6pt;padding-left: 149pt;text-indent: -86pt;text-align: justify;"><span class="p">Lisp object notation: All Interlisp objects in this manual are printed in the same font: Functions </span><span class="s12">(</span><span class="s13">AND</span><span class="s12">, </span>PLUS<span class="s14">, </span>DEFINEQ<span class="s14">, </span>LOAD<span class="s14">)</span><span class="p">; Variables </span><span class="s12">(</span><span class="s13">MAX</span><span class="s12">.</span><span class="s13">INTEGER</span><span class="s12">, </span>FILELST<span class="s14">, </span>DFNFLG<span class="s14">)</span><span class="p">; and arbitrary Interlisp expressions: </span>(PLUS 2 3)<span class="s14">, </span>(PROG ((A 1)) ...)<span class="p">, etc.</span></p><p style="padding-top: 7pt;padding-left: 150pt;text-indent: -79pt;line-height: 93%;text-align: justify;">Case is significant: <i>In Interlisp, upper and lower case is significant. </i>The variable <span class="s11">FOO </span>is not the same as the variable <span class="s11">foo </span>or the variable <span class="s11">Foo</span>. By convention, most Interlisp system functions and variables are all uppercase, but users are free to use upper and lower case for their own functions and variables as they wish.</p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: 0pt;line-height: 91%;text-align: justify;">One exception to the case-significance rule is provided by the CLISP facility, which lets you type iterative statements and record operations in either all uppercase or all lowercase letters: <span class="s11">(for X</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">from 1 to 5 ...) <span class="p">is the same as </span>(FOR X FROM 1 TO 5</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 93%;text-align: justify;">...)<span class="p">. The few situations where this is the case are explicitly mentioned in the manual. Generally, assume that case is significant.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">This manual contains a large number of descriptions of functions, variables, commands, etc, which are printed in the following standard format:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">FOO </span><span class="s16">BAR BAZ</span>)                                                                                                             [Function]</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="474" height="1" alt="image" src="Image_007.png"/></span></p><p style="padding-top: 4pt;padding-left: 137pt;text-indent: 0pt;line-height: 94%;text-align: justify;">This is a description for the function named <span class="s11">FOO</span>. <span class="s11">FOO </span>has two arguments, <span class="s16">BAR </span>and <span class="s16">BAZ</span>. Some system functions have extra optional arguments that are not documented and should not be used. These extra arguments are indicated by &quot;—&quot;.</p><p style="padding-top: 6pt;padding-left: 137pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The descriptor [Function] indicates that this is a function, rather than a [Variable], [Macro], etc. For function definitions only, this can also indicate whether the function takes a fixed or variable number of arguments, and whether the arguments are evaluated or not.  [Function] indicates a lambda spread function (fixed number of arguments, evaluated), the most common type.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 47pt;text-indent: 0pt;text-align: center;">References                                                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 228pt;text-indent: -97pt;line-height: 74%;text-align: justify;">[Burton, et al., 1980] Burton, R. R., L. M. Masinter, A. Bell, D. G. Bobrow, W. S. Haugeland, R.M. Kaplan and B.A. Sheil, &quot;Interlisp-D: Overview and Status&quot; — in [Sheil &amp; Masinter, 1983].</p><p style="padding-top: 5pt;padding-left: 228pt;text-indent: -88pt;line-height: 74%;text-align: justify;">[Sandewall, 1978] Sandewall, Erik, &quot;Programming in the Interactive Environmnet: The LISP Experience&quot; — <i>ACM Computing Surveys</i>, vol 10, no 1, pp 35-72, (March 1978).</p><p style="padding-top: 2pt;padding-left: 161pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">[Sheil, 1983] Sheil, B.A., &quot;Environments for Exploratory Programming&quot; —</p><p class="s9" style="padding-left: 228pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Datamation<span class="p">, (February, 1983) — also in [Sheil &amp; Masinter, 1983].</span></p><p style="padding-top: 1pt;padding-left: 115pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">[Sheil &amp; Masinter, 1983] Sheil, B.A. and L. M. Masinter, &quot;Papers on Interlisp-D&quot;, Xerox</p><p style="padding-left: 228pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">PARC Technical Report CIS-5 (Revised), (January, 1983).</p><p style="padding-top: 1pt;padding-left: 94pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">[Teitelman &amp; Masinter, 1981] Teitelman, W. and L. M. Masinter, &quot;The Interlisp Programming</p><p style="padding-left: 228pt;text-indent: 0pt;line-height: 74%;text-align: justify;">Environment&quot; — <i>Computer</i>, vol 14, no 4, pp 25-34, (April 1981) — also in [Sheil &amp; Masinter, 1983].</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 4pt;padding-left: 352pt;text-indent: -13pt;text-align: left;"><a name="bookmark3">SYMBOLS (LITATOMS)</a></p></li></ol><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_008.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A litatom (for “literal atom”) is an object that conceptually consists of a print name, a value, a function definition, and a property list. Litatoms are also known as “symbols” in Common Lisp. For clarity, we will use the term “symbol”.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">A symbol is read as any string of non-delimiting characters that cannot be interpreted as a number. The syntactic characters that delimit symbols are called “separator” or “break” characters (see Chapter 25) and normally are space, end-of-line, line-feed, left parenthesis <span class="s11">(</span>, right parenthesis <span class="s11">)</span>, double quote <span class="s11">&quot;</span>, left square bracket <span class="s11">[</span>, and right square bracket <span class="s11">]</span>. However, any character may be included in a symbol by preceding it with the character <span class="s11">%</span>. Here are some examples of symbols:</p><p class="s11" style="padding-top: 8pt;padding-left: 107pt;text-indent: 0pt;text-align: left;">A wxyz 23SKIDDOO %]</p><p class="s11" style="padding-left: 107pt;text-indent: 0pt;text-align: left;">Long% Litatom% With% Embedded% Spaces</p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LITATOM </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">T </span>if <span class="s16">X </span>is a symbol, <span class="s11">NIL </span>otherwise.  Note that a number is not a symbol.</p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(LITATOM NIL) = T</p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">ATOM </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">T </span>if <span class="s16">X </span>is an atom (i.e., a symbol or a number) or <span class="s11">NIL </span>(e.g. <span class="s11">(ATOM NIL) = T)</span>; otherwise returns <span class="s11">NIL.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s17">Warning: </span>(ATOM X) <span class="p">is </span>NIL <span class="p">if </span>X <span class="p">is an array, string, etc. In Common Lisp, the function</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CL:ATOM <span class="p">is defined equivalent to the Interlisp function </span>NLISTP<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Each symbol has a print name, a string of characters that uniquely identifies that symbol: Those characters that are output when the symbol is printed using <span class="s11">PRIN1</span>, e.g., the print name of the symbol <span class="s11">ABC%(D </span>consists of the five characters <span class="s11">ABC(D</span>.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Symbols are unique: If two symbols print the same, they will always be <span class="s11">EQ</span>. Note that this is not true for strings, large integers, floating-point numbers, etc.; they all can print the same without being <span class="s11">EQ</span>. Thus, if <span class="s11">PACK </span>or <span class="s11">MKATOM </span>is given a list of characters corresponding to a symbol that already exists, they return a pointer to that symbol, and do not make a new symbol. Similarly, if the read program is given as input a sequence of characters for which a symbol already exists, it returns a pointer to that symbol.</p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Symbol names are limited to 255 characters. Attempting to create a larger symbol will cause an error:</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Atom too long<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Sometimes we’ll refer to a <span class="s11">“PRIN2</span>-name”. The <span class="s11">PRIN2</span>-name of a symbol is those characters output when it is printed using <span class="s11">PRIN2</span>. So the <span class="s11">PRIN2</span>-name of the symbol <span class="s11">ABC%(D </span>is the six characters <span class="s11">ABC%(D</span>. The <span class="s11">PRIN2</span>-name depends on what readtable is being used (see Chapter 25), since this determines where <span class="s11">%</span>s will be inserted. Many of the functions below allow either print names or <span class="s11">PRIN2</span>-names to be used, as specified by <span class="s11">FLG </span>and <span class="s11">RDTBL </span>arguments. If <span class="s11">FLG </span>is <span class="s11">NIL</span>, print names are used. Otherwise, <span class="s11">PRIN2</span>-names are used, computed with respect to the readtable <span class="s11">RDTBL </span>(or the current readtable, if <span class="s11">RDTBL = NIL</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MKATOM </span><span class="s16">X</span>)                                               <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Creates and returns a symbol whose print name is the name as that of the string <span class="s16">X </span>or, if <span class="s16">X</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">is not a string, the same as that of <span class="s11">(MKSTRING X)</span>. Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 173pt;text-indent: 0pt;line-height: 88%;text-align: left;">(MKATOM ’(A B C)) =&gt; %(A% B% C%) (MKATOM &quot;1.5&quot;) =&gt; 1.5</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note that the last example returns a number, not a symbol. It is a deeply-ingrained feature of Interlisp that no symbol can have the print name of a number.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SUBATOM </span><span class="s16">X N M</span>)                                           <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns a symbol made from the <span class="s16">N</span>th through <span class="s16">M</span>th characters of the print name of <span class="s16">X</span>. If <span class="s16">N </span>or <span class="s16">M </span>are negative, they specify positions counting backwards from the end of the print name. Equivalent to <span class="s11">(MKATOM (SUBSTRING X N M))</span>. Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 173pt;text-indent: 0pt;line-height: 88%;text-align: left;">(SUBATOM &quot;FOO1.5BAR&quot; 4 6) =&gt; 1.5 (SUBATOM ’(A B C) 2 -2) =&gt; A% B% C</p><p class="s12" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">PACK </span><span class="s16">X</span>)                                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is a list of symbols, <span class="s11">PACK </span>returns a single symbol whose print name is the concatenation of the print names of the symbols in <span class="s16">X</span>. If the concatenated print name is the same as that of a number, <span class="s11">PACK </span>returns that number. For example:</p><p class="s11" style="padding-top: 5pt;padding-left: 174pt;text-indent: 0pt;line-height: 88%;text-align: left;">(PACK ’(A BC DEF G)) =&gt; ABCDEFG (PACK ’(1 3.4)) =&gt; 13.4</p><p class="s11" style="padding-left: 174pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(PACK ’(1 E -2)) =&gt; .01</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Although <span class="s11">X </span>is usually a list of symbols, it can be a list of arbitrary objects. The value of <span class="s11">PACK </span>is still a single symbol whose print name is the concatenation of the print names of all the elements of <span class="s16">X</span>, e.g.,</p><p class="s11" style="padding-top: 5pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">(PACK ’((A B) &quot;CD&quot;)) =&gt; %(A% B%)CD</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is not a list or <span class="s11">NIL</span>, <span class="s11">PACK </span>generates the error <span class="s11">Illegal arg</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s12">(</span><b>PACK* </b>X<span class="s18">1 </span>X<span class="s18">2</span>... X<span class="s18">N </span><span class="s12">)                                </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Version of <span class="s11">PACK </span>that takes an arbitrary number of arguments, instead of a list. Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 174pt;text-indent: 0pt;line-height: 88%;text-align: left;">(PACK* ’A ’BC ’DEF ’G =&gt; ABCDEFG (PACK* 1 3.4)) =&gt; 13.4</p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GENSYM </span><span class="s16">PREFIX </span><span class="s11">— — — — </span>)                                   <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Returns a symbol of the form <span class="s11">Xnnnn</span>, where <span class="s11">X </span>= <span class="s16">PREFIX </span>(or <span class="s11">A </span>if <span class="s16">PREFIX </span>is <span class="s11">NIL</span>) and <span class="s11">nnnn </span>is an integer. Thus, the first one generated is <span class="s11">A0001</span>, the second <span class="s11">A0002</span>, etc. The integer suffix is always at least four characters long, but it can grow beyond that. For example, the next symbol produced after <span class="s11">A9999 </span>would be <span class="s11">A10000</span>. <span class="s11">GENSYM </span>provides a way of generating symbols for various uses within the system .</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Note: The Common Lisp function <span class="s11">CL:GENSYM </span>is not the same as Interlisp’s <span class="s11">GENSYM</span>. Interlisp always creates interned symbols whereas <span class="s11">CL:GENSYM </span>creates uninterned symbols.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 354pt;text-indent: 0pt;text-align: left;">SYMBOLS (LITATOMS)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">GENNUM                                                         <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The value of <span class="s11">GENNUM</span>, initially <span class="s11">0</span>, determines the next <span class="s11">GENSYM</span>, e.g., if <span class="s11">GENNUM </span>is set to <span class="s11">23</span>, <span class="s11">(GENSYM) </span>= <span class="s11">A0024</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The term “gensym” is used to indicate a symbol that was produced by the function <span class="s11">GENSYM</span>. Symbols generated by <span class="s11">GENSYM </span>are the same as any other symbols: they have property lists, and can be given function definitions. The symbols are not guaranteed to be new. For example, if the user has previously created <span class="s11">A0012</span>, either by typing it in, or via <span class="s11">PACK </span>or <span class="s11">GENSYM </span>itself, then if <span class="s11">GENNUM </span>is set to <span class="s11">11</span>, the next symbol returned by <span class="s11">GENSYM </span>will be the <span class="s11">A0012 </span>already in existence.</p><p class="s12" style="padding-top: 8pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">(<span class="s15">MAPATOMS </span><span class="s16">FN</span>)                                             <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Applies <span class="s16">FN </span>(a function or lambda expression) to every symbol in the system. Returns</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">NIL<span class="p">. For example:</span></p><p class="s11" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: center;">(MAPATOMS (FUNCTION (LAMBDA(X) (if (GETD X) then (PRINTX)]</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">will print every symbol with a function definition.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><b>Warning</b>: Be careful if <span class="s16">FN </span>is a lambda expression or an interpreted function: since <span class="s11">NOBIND </span>is a symbol, it will eventually be passed as an argument. The first reference to that argument within the function will signal an error.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A way around this problem is to use a Common Lisp function, so that the Common Lisp interpreter will be invoked. It will treat the argument as local, not special and no error will be signaled. An alternative solution is to include the argument to the Interlisp function in a <span class="s11">LOCALVARS </span>declaration and then compile the function before passing it to <span class="s11">MAPATOMS</span>. This will significantly speed up <span class="s11">MAPATOMS</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">(<span class="s15">APROPOS </span><span class="s16">STRING ALLFLG QUITFLG OUTPUT</span>)                      <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s11">APROPOS </span>scans all symbols in the system for those which have <span class="s16">STRING </span>as a substring and prints them on the terminal along with a line for each relevant item defined for each selected symbol. Relevant items are:</p><ul id="l4"><li><p style="padding-top: 3pt;padding-left: 114pt;text-indent: -12pt;text-align: left;">function definitions, for which only the arglist is printed</p></li><li><p style="padding-top: 2pt;padding-left: 114pt;text-indent: -12pt;text-align: left;">dynamic variable values</p></li><li><p style="padding-top: 2pt;padding-left: 114pt;text-indent: -12pt;text-align: left;">non-null property lists</p></li></ul><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">PRINTLEVEL <span class="p">(see Chapter 25) is set to </span>(3 . 5) <span class="p">when </span>APROPOS <span class="p">is printing.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">ALLFLG </span>is <span class="s11">NIL</span>, then symbols with no relevant items and “internal” symbols are omitted (“internal” currently means those symbols whose print name begins with a \ or those symbols produced by <span class="s11">GENSYM</span>). If <span class="s16">ALLFLG </span>is a function, it is used as a predicate on symbols selected by the substring match, with value <span class="s11">NIL </span>meaning to omit the symbol. If <span class="s16">ALLFLG </span>is any other non-<span class="s11">NIL </span>value, then no symbols are omitted.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Note: Unlike <span class="s11">CL:APROPOS </span>which lets you designate the package to search, <span class="s11">APROPOS</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">searches <i>all </i>packages.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">Using Symbols as Variables                                                                                                                    </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Symbols are commonly used as variable names. Each symbol has a “top level” value, which can be an arbitrary object. Symbols may also be given special variable bindings within <span class="s11">PROG</span>s or functions, which only exist for the duration of the function. When a symbol is evaluated, the “current” variable binding is returned. This is the most recent special variable binding, or the top-level binding if the symbol hasn’t been rebound. <span class="s11">SETQ </span>is used to change the current binding. For more information on variable bindings in Interlisp, see Chapter 11.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">A symbol whose top-level value is the symbol <span class="s11">NOBIND </span>is considered to have no value. If a symbol has no local bindings, and its top-level value is <span class="s11">NOBIND</span>, trying to evaluate it will cause an unbound-atom error. In addition, if a symbol’s local binding is to <span class="s11">NOBIND</span>, trying to evaluate it will cause an error.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The symbols <span class="s11">T </span>and <span class="s11">NIL </span>always evaluate to themselves. Attempting to change the value of <span class="s11">T </span>or <span class="s11">NIL</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">with the functions below will generate the error; <span class="s11">Attempt to set T </span>or <span class="s11">Attempt to set NIL</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The following functions (except <span class="s11">BOUNDP</span>) will also generate the error <span class="s11">Arg not litatom</span>, if not given a symbol.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">BOUNDP </span><span class="s16">VAR</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns <span class="s11">T </span>if <span class="s16">VAR </span>has a special variable binding, or if <span class="s16">VAR </span>has a top-level value other than <span class="s11">NOBIND</span>; otherwise <span class="s11">NIL</span>. That is, if <span class="s11">X </span>is a symbol, <span class="s11">(EVAL X) </span>will cause an <span class="s11">Unbound atom </span>error if and only if <span class="s11">(BOUNDP X) </span>returns <span class="s11">NIL</span><span class="s5">.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Note: The Interlisp interpreter has been modified so that it will generate an <span class="s11">Unbound Variable </span>error when it encounters any symbol bound to <span class="s11">NOBIND</span>. This is a change from previous releases that only signaled an error when a symbol had a top-level binding of <span class="s11">NOBIND </span>in addition to no dynamic binding.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SET </span><span class="s16">VAR VALUE</span>)                                    <span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Sets the “current” value of <span class="s16">VAR </span>to <span class="s16">VALUE</span>, and returns <span class="s16">VALUE</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">SET </span>is a normal function, so both <span class="s16">VAR </span>and <span class="s16">VALUE </span>are evaluated before it is called. Thus, if the value of <span class="s11">X </span>is <span class="s11">B</span>, and value of <span class="s11">Y </span>is <span class="s11">C</span>, then <span class="s11">(SET X Y) </span>would result in <span class="s11">B </span>being set to <span class="s11">C</span>, and <span class="s11">C </span>being returned as the value of <span class="s11">SET</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SETQ </span><span class="s16">VAR VALUE</span>)                                   <span class="p">[NoSpread  Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Like <span class="s11">SET</span>, but <span class="s16">VAR </span>is not evaluated, <span class="s16">VALUE </span>is. Thus, if the value of <span class="s11">X </span>is <span class="s11">B </span>and the value of</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Y <span class="p">is </span>C<span class="p">, </span>(SETQ X Y) <span class="p">would result in </span>X <span class="p">(not </span>B<span class="p">) being set to </span>C<span class="p">, and </span>C <span class="p">being returned.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Actually, neither argument is evaluated during the calling process. However, <span class="s11">SETQ </span>itself calls <span class="s11">EVAL </span>on its second argument. As a result, typing <span class="s11">(SETQ VAR FORM) </span>and <span class="s11">SETQ (VAR FORM) </span>to the Interlisp Executive are equivalent: in both cases <span class="s11">VAR </span>is not evaluated, and <span class="s11">FORM </span>is.</p><p class="s12" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SETQQ </span><span class="s16">VAR VALUE</span>)                                  <span class="p">[NoSpread  Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">SETQ</span>, but neither argument is evaluated, e.g., <span class="s11">(SETQQ X (A B C)) </span>sets <span class="s11">X </span>to <span class="s11">(A B C)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 354pt;text-indent: 0pt;text-align: left;">SYMBOLS (LITATOMS)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s12">(</span><b>PSETQ </b>VAR<span class="s18">1 </span>VALUE<span class="s18">1 </span>... VAR<span class="s18">N </span>VALUE<span class="s18">N</span><span class="s12">) </span><span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Does a <span class="s11">SETQ </span>in parallel of <span class="s16">VAR</span><span class="s18">1 </span>(unevaluated) to <span class="s16">VALUE</span><span class="s18">1</span>, <span class="s16">VAR</span><span class="s18">2 </span>to <span class="s16">VALUE</span><span class="s18">2</span>, etc. All of the <span class="s16">VALUE</span><span class="s18">i </span>terms are evaluated before any of the assignments. Therefore, <span class="s11">(PSETQ A B B A) </span>can be used to swap the values of the variables <span class="s11">A </span>and <span class="s11">B</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETTOPVAL </span><span class="s16">VAR</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the top level value of <span class="s16">VAR </span>(even if <span class="s11">NOBIND</span>), regardless of any intervening local bindings.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SETTOPVAL </span><span class="s16">VAR VALUE</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Sets the top level value of <span class="s16">VAR </span>to <span class="s16">VALUE</span>, regardless of any intervening bindings, and returns <span class="s16">VALUE</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETATOMVAL </span><span class="s16">VAR</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">(GETTOPVAL VAR)</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SETATOMVAL </span><span class="s16">VAR VALUE</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">SETTOPVAL</span>.</p><p style="padding-top: 7pt;padding-left: 65pt;text-indent: -36pt;line-height: 91%;text-align: justify;">Note: The compiler (see Chapter 18) treats variables somewhat differently from the interpreter, and you need to be aware of these differences when writing functions that will be compiled. For example, variable references in compiled code are not checked for <span class="s11">NOBIND</span>, so compiled code will not generate unbound-atom errors. In general, it is better to debug interpreted code, before compiling it for speed. The compiler offers some facilities to increase the efficiency of variable use in compiled functions: Global variables can be defined so that the entire stack is not searched at each variable reference. Local variables have bindings that are not visible outside the function, which reduces variable conflicts and makes variable lookup faster.</p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Function Definition Cells                                                                                                                          </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Each symbol has a function-definition cell, which is accessed when that symbol is used as a function. This is described in detail in Chapter 10.</p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Property Lists                                                                                                                                            </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Each symbol has an associated property list, which allows a set of named objects to be associated with the symbol. A property list associates a name (known as a “property name” or “property”) with an arbitrary object (the “property value” or “value”). Sometimes the phrase “to store on the property X” is used, meaning to place the indicated information on a property list under the property name X.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Property names are usually symbols or numbers, although no checks are made. However, the standard property list functions all use <span class="s11">EQ </span>to search for property names, so they may not work with non-atomic property names. The same object can be used as both a property name and a property value.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Many symbols in the system already have property lists, with properties used by the compiler, the break package, DWIM, etc. Be careful not to clobber such system properties. The variable <span class="s11">SYSPROPS </span>is a list of property names used by the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">The functions below are used to manipulate the property lists of symbols. Except when indicated, they generate the error <span class="s16">ATM </span><span class="s11">is not a SYMBOL</span>, if given an object that is not a symbol.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GETPROP </span><span class="s16">ATM PROP</span>)                                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the property value for <span class="s16">PROP </span>from the property list of <span class="s16">ATM</span>. Returns <span class="s11">NIL </span>if <span class="s16">ATM </span>is not a symbol, or <span class="s16">PROP </span>is not found. <span class="s11">GETPROP </span>also returns <span class="s11">NIL </span>if there is an occurrence of <span class="s16">PROP </span>but the corresponding property value is <span class="s11">NIL</span>. This can be a source of program errors.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Note: <span class="s11">GETPROP </span>used to be called <span class="s11">GETP</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">PUTPROP </span><span class="s16">ATM PROP VAL</span>)                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Puts the property <span class="s16">PROP </span>with value <span class="s16">VAL </span>on the property list of <span class="s16">ATM</span>. <span class="s16">VAL </span>replaces any previous value for the property <span class="s16">PROP </span>on this property list. Returns <span class="s16">VAL</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ADDPROP </span><span class="s16">ATM PROP NEW FLG</span>)                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Adds the value <span class="s16">NEW </span>to the list which is the value of property <span class="s16">PROP </span>on the property list of the <span class="s16">ATM</span>. If <span class="s16">FLG </span>is <span class="s12">T</span>, <span class="s16">NEW </span>is <span class="s11">CONS</span>ed onto the front of the property value of <span class="s16">PROP</span>; otherweise, it is <span class="s11">NCONC</span>ed on the end (using <span class="s11">NCONC1</span>). If <span class="s16">ATM </span>does not have a property <span class="s16">PROP</span>, or the value is not a list, then the effect is the same as <span class="s11">(PUTPROP ATM PROP (LIST NEW))</span>. <span class="s11">ADDPROP </span>returns the (new) property value. Example:</p><p class="s19" style="padding-top: 4pt;padding-left: 180pt;text-indent: -6pt;line-height: 88%;text-align: left;"><span class="s11">(PUTPROP ’POCKET ’CONTENTS NIL) (NIL)</span></p><p class="s19" style="padding-left: 174pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s11">(ADDPROP ’POCKET ’CONTENTS ’COMB)</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COMB)</p><p class="s19" style="padding-left: 174pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(ADDPROP ’POCKET ’CONTENTS ’WALLET)</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;text-align: left;">(COMB WALLET)</p><p class="s12" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">REMPROP </span><span class="s16">ATM PROP</span>)                                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Removes all occurrences of the property <span class="s16">PROP </span>(and its value) from the property list of</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">ATM</span>. Returns <span class="s16">PROP </span>if any were found (<span class="s11">T </span>if <span class="s16">PROP </span>is <span class="s11">NIL</span>), otherwise <span class="s11">NIL</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CHANGEPROP </span><span class="s16">X PROP1 PROP2</span>)                                 <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Changes the property name of property <span class="s16">PROP1 </span>to <span class="s16">PROP2 </span>on the property list of <span class="s16">X </span>(but does not affect the value of the property). Returns <span class="s16">X</span>, unless <span class="s16">PROP1 </span>is not found, in which case it returns <span class="s11">NIL</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">PROPNAMES </span><span class="s16">ATM</span>)                                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns a list of the property names on the property list of <span class="s16">ATM</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DEFLIST </span><span class="s16">L PROP</span>)                                          <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Used to put values under the same property name on the property lists of several symbols. <span class="s16">L </span>is a list of two-element lists. The first element of each is a symbol, and the second element is the property vqalue of the property <span class="s16">PROP</span>.  Returns <span class="s11">NIL</span>.  For example:</p><p class="s11" style="padding-top: 5pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">(DEFLIST ’((FOO MA)(BAR CA)(BAZ RI)) ’STATE)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 354pt;text-indent: 0pt;text-align: left;">SYMBOLS (LITATOMS)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">puts <span class="s11">MA </span>on <span class="s11">FOO</span>’s <span class="s11">STATE </span>property, <span class="s11">CA </span>on <span class="s11">BAR</span>’s <span class="s11">STATE </span>property, and <span class="s11">RI </span>on <span class="s11">BAZ</span>’s <span class="s11">STATE</span></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">property.</p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">Property lists are conventionally implemented as lists of the form</p><p class="s16" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="s12">(</span>NAME<span class="s18">1 </span>VALUE<span class="s18">1 </span>NAME<span class="s18">2 </span>VALUE<span class="s18">2</span>...<span class="s12">)</span></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">although the user can store anything as the property list of a symbol. However, thge functions which manipulate property lists observe this convention by searching down the property lists two <span class="s11">CDR</span>s at a time. Most of these functions also generate the error <span class="s11">Arg not litatom </span>if given an argument which is not a symbol, so they cannot be used directly on lists. (<span class="s11">LISTPUT</span>, <span class="s11">LISTPUT1</span>, <span class="s11">LISTGET</span>, and <span class="s11">LISTGET1 </span>are functions similar to <span class="s11">PUTPROP </span>and <span class="s11">GETPROP </span>that work directly on lists (see Chapter 3) . The property lists of symbols can be directly accessed with the following functions.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETPROPLIST </span><span class="s16">ATM</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the property list of <span class="s16">ATM</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SETPROPLIST </span><span class="s16">ATM LST</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If <span class="s16">ATM </span>is a symbol, sets the property list of <span class="s16">ATM </span>to be <span class="s16">LST</span>, and returns <span class="s16">LST </span>as its value.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETLIS </span><span class="s16">X PROPS</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Searches the property list of <span class="s20">X</span>, and returns the property list as of the first property on</p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PROPS <span class="p">that it finds. For example:</span></p><p class="s19" style="padding-top: 4pt;padding-left: 131pt;text-indent: -6pt;line-height: 88%;text-align: left;"><span class="s11">(GETPROPLIST ’X) (PROP1 A PROP3 B A C)</span></p><p class="s19" style="padding-left: 125pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s11">(GETLIS ’X ’(PROP2 PROP3))</span></p><p class="s11" style="padding-left: 131pt;text-indent: 0pt;text-align: left;">(PROP3 B A C)</p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">NIL </span>if no element on props is found. <span class="s16">X </span>can also be a list itself, in which case it is searched as described above. If <span class="s16">X </span>is not a symbol or a list, returns <span class="s11">NIL</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">REMPROPLIST </span><span class="s16">ATM PROPS</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Removes all occurrences of all properties on the list <span class="s16">PROPS </span>(and their corresponding property values) from the property list of <span class="s16">ATM</span>. Returns <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 30pt;text-indent: -24pt;text-align: left;">Print Names                                                                                                                                               </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The term “print name” has an extended meaning: The characters that are output when <i>any object </i>is printed. In Medley, all objects have print names, although only symbols and strings have their print names explicitly stored. Symbol print names are limited to 255 characters.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This section describes a set of functions that can be used to access and manipulate the print names of any object, though they are primarily used with the print names of symbols. In Medley, print functions qualify symbol names with a package prefix if the symbol is not accessible in the current package. The exception is Interlisp’s <span class="s11">PRIN1, </span>which does not include a package prefix.</p><p style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">The print name of an object is those characters that are output when the object is printed using <span class="s11">PRIN1</span>, e.g., the print name of the list <span class="s11">(A B &quot;C&quot;) </span>consists of the seven characters <span class="s11">(A B C) </span>(two of the characters are spaces).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">The <span class="s11">PRIN2</span>-name of an object is those characters output when the object is printed using <span class="s11">PRIN2</span>. Thus the <span class="s11">PRIN2</span>-name of the list <span class="s11">(A B &quot;C&quot;) </span>is the 9 characters <span class="s11">(A B &quot;C&quot;) </span>(including the two spaces). The <span class="s11">PRIN2</span>-name depends on what readtable is being used (see Chapter 25), since this determines where %s will be inserted. Many of the functions below allow either print names of <span class="s11">PRIN2</span>-names to be used, as specified by <span class="s11">FLG </span>and <span class="s11">RDTBL </span>arguments. If <span class="s11">FLG </span>is <span class="s11">NIL</span>, print names are used. Otherwise, <span class="s11">PRIN2</span>-names are used, computed with respect to the readtable <span class="s11">RDTBL </span>(or the current readtable, if <span class="s11">RDTBL = NIL</span>).</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The print name of an integer depends on the setting of <span class="s11">RADIX </span>(see Chapter 25). The functions described in this section (<span class="s11">UNPACK</span>, <span class="s11">NCHARS</span>, etc.) define the print name of an integer as though the radix was <span class="s11">10</span>, so that <span class="s11">(PACK (UNPACK ’X9)) </span>will always be <span class="s11">X9 </span>(and not <span class="s11">X11</span>, if <span class="s11">RADIX </span>is set to <span class="s11">8</span>). However, integers will still be printed by <span class="s11">PRIN1 </span>using the current radix. The user can force these functions to use print names in the current radix by changing the setting of the variable <span class="s11">PRXFLG </span>(see Chapter 25).</p><p class="s12" style="padding-top: 6pt;padding-left: 125pt;text-indent: -24pt;text-align: left;">(<span class="s15">CL:SYMBOL-NAME </span><span class="s16">SYM</span>) <span class="p">[Common Lisp Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns a string displaced to the <span class="s20">SYM </span>print name. Strings returned from <span class="s11">CL:SYMBOL- NAME </span>may be destructively modified without affecting <span class="s16">SYM</span>’s print name.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">NCHARS </span><span class="s16">X FLG RDTBL</span>)                                      <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the number of characters in the print name of <span class="s16">X</span>. If <span class="s16">FLG </span>= <span class="s11">T</span>, the <span class="s11">PRIN2</span>-name is used.  Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 173pt;text-indent: 0pt;line-height: 88%;text-align: left;">(NCHARS ’ABC) =&gt; 3 (NCHARS &quot;ABC&quot; T) =&gt; 5</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">NCHARS <span class="p">works most efficiently on symbols and strings, but can be given any object.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">NTHCHAR </span><span class="s16">X N FLG RDTBL</span>)                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns <span class="s16">X</span>, if <span class="s16">X </span>is a tail of the list <span class="s11">Y</span>; otherwise <span class="s11">NIL</span>. <span class="s16">X </span>is a tail of <span class="s11">Y </span>if it is <span class="s11">EQ </span>to <span class="s11">0 </span>or more</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CDR<span class="p">s of </span>Y<span class="p">.</span></p><p class="s11" style="padding-top: 5pt;padding-left: 173pt;text-indent: 0pt;line-height: 88%;text-align: left;">(NTHCHAR ’ABC 2) =&gt; B (NTHCHAR 15.6 2) =&gt; 5 (NTHCHAR ’ABC%(D -3 T) =&gt; %% (NTHCHAR &quot;ABC&quot; 2) =&gt; B (NTHCHAR &quot;ABC&quot; 2 T) =&gt; A</p><p class="s11" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">NTHCAR <span class="p">and </span>NCHARS <span class="p">work much faster on objects that actually have an internal representation of their print name, i.e., symbols and strings, than they do on numbers and lists, since they don’t have to simulate printing.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">L-CASE </span><span class="s16">X FLG</span>)                                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns a lowercase version of <span class="s16">X</span>. If <span class="s16">FLG </span>is <span class="s11">T</span>, the first letter is capitalized. If <span class="s16">X </span>is a string, the value of <span class="s11">L-CASE </span>is also a string. If <span class="s16">X </span>is a list, <span class="s11">L-CASE </span>returns a new list in which <span class="s11">L- CASE </span>is computed for each corresponding element and non-<span class="s11">NIL </span>tail of the original list. Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 173pt;text-indent: 0pt;line-height: 88%;text-align: left;">(L-CASE ’FOO) =&gt; foo (L-CASE ’FOO T) =&gt; Foo</p><p class="s11" style="padding-left: 173pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(L-CASE &quot;FILE NOT FOUND&quot; T) =&gt; &quot;File not found&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 354pt;text-indent: 0pt;text-align: left;">SYMBOLS (LITATOMS)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(L-CASE ’(JANUARY FEBRUARY (MARCH &quot;APRIL&quot;)) T) =&gt;</p><p class="s11" style="padding-left: 144pt;text-indent: 0pt;line-height: 10pt;text-align: left;">’(January February (March &quot;April&quot;))</p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">U-CASE </span><span class="s16">X </span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Like <span class="s11">L-CASE</span>, but returns the uppercase version of <span class="s16">X</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">U-CASEP </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">T </span>if <span class="s16">X </span>contains no lowercase letters; <span class="s11">NIL </span>otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Characters and Character Codes                                                                                                            </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Characters are represented 3 different ways in Medley. In Interlisp they are single-character symbols or integer character codes. In Common Lisp they are instances of the <span class="s11">CHARACTER </span>datatype. In general Interlisp character functions don’t accept Common Lisp characters and vice versa. The only exceptions are Interlisp string-manipulation functions that accept “string or symbol” types as arguments.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">You can convert between Interlisp and Common Lisp characaters by using the functions <span class="s11">CL:CODE- CHAR</span>, <span class="s11">CL:CHAR-CODE</span>, and <span class="s11">CHARCODE </span>(see below).</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley uses the 16-bit NS character set, described in the document Character Code Standard (Xerox System Integration Standards, XSIS 058404, April 1984). Legal character codes range from 0 to 65535. The NS (Network Systems) character encoding encompasses a much wider set of available characters than the 8-bit character standards (such as ASCII), including characters comprising many foreign alphabets and special symbols. For instance, Medley supports the display and printing of the following:</p><ul id="l5"><li><p style="padding-top: 4pt;padding-left: 42pt;text-indent: -10pt;text-align: left;">Le système d’information Medley est remarqueablement polyglotte</p></li><li><p style="padding-top: 4pt;padding-left: 42pt;text-indent: -10pt;text-align: left;">Das Medley Kommunikationssystem bietet merkwürdige multilinguale Nutzmöglichkeiten</p></li><li><p class="s19" style="padding-top: 4pt;padding-left: 42pt;text-indent: -10pt;text-align: left;"><span class="p">M </span><span class="s21"> </span><span class="s22">❑ </span><span class="p">[w] </span><span class="s21"> </span><span class="s21"> </span><span class="p">v with Rwv: M </span><span class="s21"> </span><span class="p">[v]</span></p></li></ul><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">These characters can be used in strings, symbol print names, symbolic files, or anywhere else 8-bit characters could be used. All of the standard string and print name functions (<span class="s11">RPLSTRING</span>, <span class="s11">GNC</span>, <span class="s11">NCHARS</span>, <span class="s11">STRPOS</span>, etc.) accept symbols and strings containing NS characters.  For example:</p><p class="s19" style="padding-top: 3pt;padding-left: 96pt;text-indent: -18pt;line-height: 107%;text-align: left;"><span class="s11">(STRPOS &quot;char&quot;&quot;this is an 8-bit character string&quot;) 18</span></p><p class="s19" style="padding-left: 96pt;text-indent: -18pt;line-height: 107%;text-align: left;"><span class="s11">(STRPOS &quot;char&quot;&quot;celui-ci comports des characteres NS&quot;) 23</span></p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In almost all cases, a program does not have to distinguish between NS characters or 8-bit characters. The exception to this rule is the handling of input / output operations (see Chapter 25).</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The function <span class="s11">CHARCODE </span>(see below) provides a simple way to create individual NS character codes. The VirtualKeyboards library module provides a set of virtual keyboards that allows keyboard or mouse entry of NS characters.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">PACKC </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Like <span class="s11">PACK </span>except <span class="s16">X </span>is a list of character codes.  For example,</p><p class="s11" style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">(PACKC ’(70 79 79)) =&gt; FOO</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<span class="s15">CHCON </span><span class="s16">X FLG RDTBL</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Like <span class="s11">UNPACK</span>, but returns the print name o<span class="s20">f </span><span class="s16">X </span>as a list of character codes. If <span class="s16">FLG </span>= <span class="s12">T</span>, the</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PRIN2<span class="p">-name is used. For example:</span></p><p class="s11" style="padding-top: 4pt;padding-left: 173pt;text-indent: 0pt;text-align: left;">(CHCON ’FOO) =&gt; (70 79 79)</p><p class="s12" style="padding-top: 5pt;padding-left: 126pt;text-indent: -24pt;line-height: 136%;text-align: left;">(<span class="s15">DCHCON </span><span class="s16">X SCRATCHLIST FLG RDTBL</span>) <span class="p">[Function] Like </span><span class="s11">DUNPACK</span><span class="p">.</span></p><p class="s12" style="padding-top: 3pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<span class="s15">NTHCHARCODE </span><span class="s16">X N FLG RDTBL</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">NTHCHAR</span>, but returns the character code of the <span class="s16">N</span>th character of the print name of <span class="s16">X</span>. If <span class="s16">N </span>is negative, it is interpreted as a count backwards from the end of <span class="s16">X</span>. If the absolute value of <span class="s16">N </span>is greater than the number of characters in <span class="s16">X</span>, or <span class="s11">0</span>, then the value of <span class="s11">NTHCHARCODE </span>is <span class="s11">NIL</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s16">FLG </span>is <span class="s11">T</span>, then the <span class="s11">PRIN2</span>-name of <span class="s16">X </span>is used, computed with respect to the readtable.</p><p class="s12" style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<span class="s15">CHCON1 </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns the character code of the first character of the print name of <span class="s16">X</span>; equal to</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(NTHCHARCODE X 1)<span class="p">.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<span class="s15">CHARACTER </span><span class="s16">N</span>) <span class="p">[Function]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">N <span class="p">is a character code. Returns the symbol having the corresponding single character as its print name.</span></p><p class="s11" style="padding-top: 4pt;padding-left: 179pt;text-indent: 0pt;text-align: left;">(CHARACTER 70) =&gt; F</p><p class="s12" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">FCHARACTER </span><span class="s16">N</span>)                                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Fast version of <span class="s11">CHARACTER </span>that compiles open.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">The following function makes it possible to gain the efficiency that comes from dealinig with character codes without losing the symbolic advantages of character symbols.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CHARCODE </span><span class="s16">CHAR</span>)                                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the character code specified by <span class="s16">CHAR </span>(unevaluated). If <span class="s16">CHAR </span>is a one-character symbol or string, the corresponding character code is simply returned. Thus, <span class="s11">(CHARCODE A) </span>is <span class="s11">65</span>, <span class="s11">(CHARCODE 0) </span>is <span class="s11">48</span>. If <span class="s16">CHAR </span>is a multi-character symbol or string, it specifies a character code as described below. If <span class="s16">CHAR </span>is <span class="s11">NIL</span>, <span class="s11">CHARCODE </span>simply returns <span class="s11">NIL</span>. Finally, if <span class="s16">CHAR </span>is a list structure, the value is a copy of <span class="s16">CHAR </span>with all the leaves replaced by the corresponding character codes. For instance, <span class="s11">(CHARCODE (A (B C))) =&gt; (65 (66 67))</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If a character is specified by a multi-character symbol or string, <span class="s11">CHARCODE </span>interprets it as follows:</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">CR<span class="p">, </span>SPACE<span class="p">, etc.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 354pt;text-indent: 0pt;text-align: left;">SYMBOLS (LITATOMS)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 102pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The variable <span class="s11">CHARACTERNAMES </span>contains an association list mapping special symbols to character codes. Among the characters defined this way are CR (<span class="s12">13</span>), LF (10), SPACE or SP (32), ESCAPE or ESC (27), BELL (7), BS (8), TAB</p><p style="padding-left: 101pt;text-indent: 0pt;line-height: 91%;text-align: justify;">(9), NULL (0), and DEL (127). The symbol EOL maps into the appropriate end-of-line character code in the different Interlisp implementations (31 in Interlisp-10, 13 in Interlisp-D, 10 in Interlisp-VAX). Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 88%;text-align: left;">(CHARCODE SPACE) =&gt; 32 (CHARCODE CR) =&gt; 13</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">CHARSET<span class="s14">, </span>CHARNUM<span class="s14">, </span>CHARSET-CHARNUM</p><p style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">If the character specification is a symbol or string of the form <span class="s11">CHARSET</span>, <span class="s11">CHARNUM</span>, or <span class="s11">CHARSET-CHARNUM</span>, the character code for the character number <span class="s11">CHARNUM </span>in the character set <span class="s11">CHARSET </span>is returned.</p><p style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">The 16-bit NS character encoding is divided into a large number of “character <span class="s5">s</span>ets”. Each 16-bit character can be decoded into a character set (an integer from 0 to 254 inclusive) and a character number (also an integer from 0 to 254 inclusive). <span class="s11">CHARSET </span>is either an octal number, or a symbol in the association list <span class="s11">CHARACTERSETNAMES </span>(which defines the character sets for <span class="s11">GREEK</span>, <span class="s11">CYRILLIC</span>, etc.).</p><p class="s11" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">CHARNUM <span class="p">is either an octal number, a single-character symbol, or a symbol from the association list </span>CHARACTERNAMES<span class="p">. If </span>CHARNUM <span class="p">is a single-digit number, it is interpreted as the character “2”, rather than as the octal number</span></p><ol id="l6"><li><p style="padding-left: 113pt;text-indent: -11pt;line-height: 11pt;text-align: justify;">Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 88%;text-align: left;">(CHARCODE 12,6) =&gt; 2566 (CHARCODE 12,SPACE) =&gt; 2592 (CHARCODE GREEK,A) =&gt; 9793</p><p class="s19" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s11">CHARSPEC (control chars)</span></p><p style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the character specification is a symbol or string of one of the forms above, preceded by the character <span class="s19"></span>, this indicates a “control character,” derived from the normal character code by clearing the seventh bit of the character code (normally set). Examples:</p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 77%;text-align: left;">(CHARCODE <span class="s19"></span>A) =&gt; 1 (CHARCODE <span class="s19"></span>GREEK,A) =&gt; 9729</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">#CHARSPEC (meta chars)</p><p style="padding-top: 7pt;padding-left: 101pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If the character specification is a symbol or string of one of the forms above, preceded by the charactger <span class="s11">#</span>, this indicates a meta character, derived from the normal character code by setting the eighth bit of the character code (normally cleared). <span class="s19"></span><span class="s21"> </span>and <span class="s11"># </span>can both  be set at once.  Examples:</p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 77%;text-align: left;">(CHARCODE #A) =&gt; 193 (CHARCODE #<span class="s19"></span>GREEK,A) =&gt; 9857</p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">A <span class="s11">CHARCODE </span>form can be used wherever a structure of character codes would be appropriate. For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: center;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;line-height: 88%;text-align: left;">(FMEMB (NTHCHARCODE X 1)(CHARCODE (CR LF SPACE <span class="s19"></span>A))) (EQ (READCCODE FOO)(CHARCODE GREEK,A))</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">There is a macro for <span class="s11">CHARCODE </span>which causes the character-code structure to be constructed at compile-time. Thus, the compiled code for these examples is exactly as efficient as the less readable:</p><p class="s11" style="padding-top: 5pt;padding-left: 174pt;text-indent: 0pt;line-height: 88%;text-align: left;">(FMEMB (NTHCHARCODE X 1)(QUOTE (13 10 32 1))) (EQ (READCCODE FOO)9793)</p><p style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">CL:CHAR-CODE </span><span class="s16">CHAR </span>) [Common Lisp Function]</p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns the Interlisp character code of <span class="s16">CHAR</span>. Use to convert a Common Lisp character to an Interlisp character code.</p><p style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">CL:CODE-CHAR </span><span class="s16">N </span>) [Common Lisp Function]</p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns a character with the given non-negative integer <span class="s16">N </span>code. Returns <span class="s11">NIL </span>if no character is possible with <span class="s16">N</span>. Use to convert an Interlisp character code to a Common Lisp character.</p><p class="s16" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="p">(</span><b>SELCHARQ </b>E CLAUSE<span class="s18">1</span>... CLAUSE<span class="s18">N </span>DEFAULT<span class="p">)                                                         </span><span class="s5">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Lets you branch one of several ways, based on the character code <span class="s16">E</span>. The first item in each <span class="s16">CLAUSE</span><span class="s18">N </span>is a character code or list of character codes, given in the form <span class="s11">CHARCODE </span>would accept. If the value of <span class="s16">E </span>is a character code or <span class="s11">NIL</span>, and it is <span class="s11">EQ </span>or <span class="s11">MEMB </span>to the result of applying <span class="s11">CHARCODE </span>to the first element of a clause, the remaining forms of that clause are evaluated. Otherwise, the default is evaluated.</p><p style="padding-top: 5pt;padding-left: 10pt;text-indent: 0pt;text-align: center;">Thus</p><p class="s11" style="padding-top: 5pt;padding-left: 198pt;text-indent: -24pt;line-height: 88%;text-align: left;">(SELCHARQ (BIN FOO)) ((SPACE TAB)(FUM))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((<span class="s19"></span>D NIL)(BAR))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(a (BAZ))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(ZIP)))</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">is exactly equivalent to</p><p class="s11" style="padding-top: 5pt;padding-left: 198pt;text-indent: -24pt;line-height: 88%;text-align: left;">(SELECTQ (BIN FOO)) ((32 9)(FUM))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((4 NIL)(BAR))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(97 (BAZ))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(ZIP)))</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s11">(BIN FOO) </span>returned <span class="s11">32 </span>(the <span class="s11">SPACE </span>character), the function <span class="s11">FUM </span>would be called.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 4pt;padding-left: 433pt;text-indent: -433pt;text-align: right;"><a name="bookmark4">LISTS</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_009.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">One of the most useful datatypes in Lisp is the list cell, a data structure that contains pointers to two other objects, called the <span class="s11">CAR </span>and the <span class="s11">CDR </span>of the list cell. You can build very complicated structures out of list cells, including lattices and trees, but most often they’re used to represent simple linear lists of objects.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The following functions are used to manipulate individual list cells:</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">CONS </span><span class="s16">X Y</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">CONS </span>is the primary list construction function. It creates and returns a new list cell containing pointers to <span class="s16">X </span>and <span class="s16">Y</span>. If <span class="s16">Y </span>is a list, this returns a list with <span class="s16">X </span>added at the beginning of <span class="s16">Y</span>.</p><p class="s12" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LISTP </span><span class="s16">X</span><span class="p">) [Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a list cell, e.g., something created by <span class="s11">CONS</span>; <span class="s11">NIL </span>otherwise.</p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(LISTP NIL) = NIL</p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">NLISTP </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The same as <span class="s11">(NOT (LISTP </span><span class="s16">X</span><span class="s11">))</span><span class="s5">. </span>Returns <span class="s11">T </span>if <span class="s16">X </span>is not a list cell, <span class="s11">NIL </span>otherwise.</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">However, <span class="s11">(NLISTP NIL) = T</span></p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">CAR </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the first element of the list <span class="s16">X</span>. <span class="s11">CAR </span>of <span class="s11">NIL </span>is always <span class="s11">NIL</span>. For all other nonlists (e.g., symbols, numbers, etc.), the value returned is controlled by <span class="s11">CAR/CDRERR </span>(below).</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">CDR </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns all but the first element of the list <span class="s16">X</span>. <span class="s11">CDR </span>of <span class="s11">NIL </span>is always <span class="s11">NIL</span>. The value of <span class="s11">CDR</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">for other nonlists is controlled by <span class="s11">CAR/CDRERR </span>(below).</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">CAR/CDRERR <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The variable <span class="s11">CAR/CDRERR </span>controls the behavior of <span class="s11">CAR </span>and <span class="s11">CDR </span>when they are passed non-lists (other than <span class="s11">NIL</span>).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s11">CAR/CDRERR = NIL </span>(the current default), then <span class="s11">CAR </span>or <span class="s11">CDR </span>of a non-list (other than <span class="s11">NIL</span>) return the string <span class="s11">&quot;{car of non-list}&quot; </span>or <span class="s11">&quot;{cdr of non-list}&quot;</span><span class="s5">. </span>If <span class="s11">CAR/CDRERR = T</span>, then <span class="s11">CAR </span>and <span class="s11">CDR </span>of a non-list (other than <span class="s11">NIL</span>) causes an error.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>CAR/CDRERR = ONCE<span class="p">, then </span>CAR <span class="p">or </span>CDR <span class="p">of a string causes an error, but </span>CAR <span class="p">or </span>CDR <span class="p">of anything else returns the string </span>&quot;{car of non-list}&quot; <span class="s5">or </span>&quot;{cdr of non-list}&quot; <span class="p">as above. This catches loops which repeatedly take </span>CAR <span class="p">or </span>CDR <span class="p">of an object, but it allows one-time errors to pass undetected.</span></p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s11">CAR/CDRERR = CDR</span>, then <span class="s11">CAR </span>of a non-list returns <span class="s11">&quot;{car of non-list}&quot; </span>as above, but <span class="s11">CDR </span>of a non-list causes an error. This setting is based on the observation that</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">nearly all infinite loops involving non-lists occur from taking <span class="s11">CDR</span>s, but a fair amount of careless code takes <span class="s11">CAR </span>of something it has not tested to be a list.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CAAR </span><span class="s16">X</span>) (<span class="s15">CADR </span><span class="s16">X</span>) (<span class="s15">CDDR </span><span class="s16">X</span>) <span class="s5">etc.                                                             </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Often, combinations of <span class="s11">CAR </span>and <span class="s11">CDR </span>are used to extract parts of complex list structures. Functions of the form <span class="s11">C...R </span>may be used for some of these combinations:</p><p class="s11" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">(CAAR X) ==&gt; (CAR (CAR X)) (CADR X) ==&gt; (CAR (CDR X))</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(CDDDDR X) ==&gt; (CDR (CDR (CDR (CDR X))))</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">All 30 combinations of nested <span class="s11">CAR</span>s and <span class="s11">CDR</span>s up to 4 deep are included in the system.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">RPLACD </span><span class="s16">X Y</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Replaces the <span class="s11">CDR </span>of the list cell <span class="s16">X </span>with <span class="s16">Y</span>. This physically changes the internal structure of <span class="s16">X</span>, as opposed to <span class="s11">CONS</span>, which creates a new list cell. You can make a circular list by using <span class="s11">RPLACD </span>to place a pointer to the beginning of a list at the end of the list.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The value of <span class="s11">RPLACD </span>is <span class="s16">X</span>. An attempt to <span class="s11">RPLACD NIL </span>will cause an error, <span class="s11">Attempt to RPLACD NIL </span>(except for <span class="s11">(RPLACD NIL NIL)</span>). An attempt to <span class="s11">RPLACD </span>any other non- list will cause an error, <span class="s11">Arg not list</span><span class="s5">.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">RPLACA </span><span class="s16">X Y</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Like <span class="s11">RPLACD</span>, but replaces the <span class="s11">CAR </span>of <span class="s16">X </span>with <span class="s16">Y</span>. The value of <span class="s11">RPLACA </span>is <span class="s16">X</span>. An attempt to <span class="s11">RPLACA NIL </span>will cause an error<span class="s5">, </span><span class="s11">Attempt to RPLACA NIL</span><span class="s5">, </span>(except for <span class="s11">(RPLACA NIL NIL)</span>).  An attempt to <span class="s11">RPLACA </span>any other non-list will cause an error<span class="s5">, </span><span class="s11">Arg not list</span><span class="s5">.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">RPLNODE </span><span class="s16">X A D</span>)                                           <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">Performs </span>(RPLACA <i>X A</i>)<span class="p">, </span>(RPLACD <i>X D</i>)<span class="p">, and returns </span><i>X</i><span class="p">.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">RPLNODE2 </span><span class="s16">X Y</span>)                                            <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="p">Performs   </span>(RPLACA <i>X </i>(CAR <i>Y</i>))<span class="p">, </span>(RPLACD <i>X </i>(CDR <i>Y</i>)) <span class="p">and returns </span><i>X</i><span class="p">.</span></p><p class="s12" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">(<span class="s15">FRPLACD </span><span class="s16">X Y</span>)                                             <span class="p">[Function]</span></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(<span class="s15">FRPLACA </span><span class="s16">X Y</span>)                                             <span class="p">[Function]</span></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(<span class="s15">FRPLNODE </span><span class="s16">X A D</span>)                                          <span class="p">[Function]</span></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">(<span class="s15">FRPLNODE2 </span><span class="s16">X Y</span>)                                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Faster versions of <span class="s11">RPLACD</span>, etc.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Usually, you don’t use list cells alone, but in structures called “lists”. A list is represented by a list cell whose <span class="s11">CAR </span>is the first element of the list, and whose <span class="s11">CDR </span>is the rest of the list. That’s normally another list cell (with another element of the list) or the “empty list,” <span class="s11">NIL</span>, marking the list’s end. List elements may be any Lisp objects, including other lists.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You type in a list as a sequence of Lisp data objects (symbols, numbers, other lists, etc.) enclosed in parentheses or brackets. Note that <span class="s11">() </span>is read as the symbol <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">LISTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">Sometimes, you won’t want your list to end in <span class="s11">NIL</span>, but just with the final element. To indicate that, type a period (with spaces on both sides) in front of the final element. This makes <span class="s11">CDR </span>of the list’s final cell be the element immediately following the period, e.g. <span class="s11">(A . B) </span>or <span class="s11">(A B C . D)</span>. Note that a list needn’t end in <span class="s11">NIL</span>. It is simply a structure composed of one or more list cells. The input sequence <span class="s11">(A B C . NIL) </span>is equivalent to <span class="s11">(A B C)</span>, and <span class="s11">(A B . (C D)) </span>is equivalent to <span class="s11">(A B C D)</span>. Note, however, that <span class="s11">(A B . C D) </span>will create a list containing the five symbols <span class="s11">A</span>, <span class="s11">B</span>, <span class="s11">%.</span>, <span class="s11">C</span>, and <span class="s11">D</span>.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Lists are printed by printing a left parenthesis, and then printing the first element of the list, a space, the second element, etc., until the final list cell is reached. The individual elements of a list are printed by <span class="s11">PRIN1</span>, if the list is being printed by <span class="s11">PRIN1</span>, and by <span class="s11">PRIN2 </span>if the list is being printed by <span class="s11">PRINT </span>or <span class="s11">PRIN2</span>. Lists are considered to terminate when <span class="s11">CDR </span>of some node is not a list. If <span class="s11">CDR </span>of this terminal node is <span class="s11">NIL </span>(the usual case), <span class="s11">CAR </span>of the last node is printed followed by a right parenthesis. If <span class="s11">CDR </span>of the terminal node is <i>not </i><span class="s11">NIL</span>, <span class="s11">CAR </span>of the last node is printed, followed by a space, a period, another space, <span class="s11">CDR </span>of the last node, and the right parenthesis. A list input as <span class="s11">(A B C . NIL) </span>will print as <span class="s11">(A B C)</span>, and a list input as <span class="s11">(A B . (C D)) </span>will print as <span class="s11">(A B C D)</span>. <span class="s11">PRINTLEVEL </span>affects the printing of lists (see the <span class="s11">PRINTLEVEL </span>section of Chapter 25), and that carriage returns may be inserted where dictated by <span class="s11">LINELENGTH </span>(see the Output Functions section of Chapter 25).</p><p style="padding-top: 7pt;padding-left: 96pt;text-indent: -36pt;text-align: left;">Note: Be careful when testing the equality of list structures. <span class="s11">EQ </span>will be true only when the two lists are the <i>exact </i>same list. For example,</p><p class="s19" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s21"> </span><span class="s11">(SETQ A ’(1 2))</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(1 2)</p><p class="s19" style="padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s21"> </span><span class="s11">(SETQ B A) (1 2)</span></p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s21"> </span><span class="s11">(EQ A B)</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 9pt;text-align: left;">T</p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(SETQ C ’(1 2))</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(1 2)</p><p class="s19" style="padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(EQ A C) NIL</span></p><p class="s19" style="padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(EQUAL A C) T</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">In the example above, the values of <span class="s11">A </span>and <span class="s11">B </span>are the exact same list, so they are <span class="s11">EQ</span>. However, the value of <span class="s11">C </span>is a totally different list, although it happens to have the same elements. <span class="s11">EQUAL </span>should be used to compare the elements of two lists. In general, one should notice whether list manipulation functions use <span class="s11">EQ </span>or <span class="s11">EQUAL </span>for comparing lists. This is a frequent source of errors.</p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Creating Lists                                                                                                                                            </h4><p class="s16" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s12">(</span><b>LIST </b>X<span class="s18">1 </span>X<span class="s18">2 </span>... X<span class="s18">N</span><span class="s12">) </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns a list of its arguments, e.g.</p><p class="s11" style="padding-top: 4pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">(LIST ’A ’B ’(C D)) =&gt; (A B (C D))</p><p class="s16" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s12">(</span><b>LIST* </b>X<span class="s18">1 </span>X<span class="s18">2 </span>... X<span class="s18">N</span><span class="s12">) </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns a list of its arguments, using the last argument for the tail of the list. This is like an iterated <span class="s11">CONS</span>: <span class="s11">(LIST* A B C) == (CONS A (CONS B C))</span>. For example,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LIST* ’A ’B ’C) =&gt; (A B . C)</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LIST* ’A ’B ’(C D)) =&gt; (A B C D)</p><p class="s16" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s12">(</span><b>APPEND </b>X<span class="s18">1 </span>X<span class="s18">2 </span>... X<span class="s18">N</span><span class="s12">)                              </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Copies the top level of the list <span class="s16">X</span><span class="s18">1 </span>and appends this to a copy of the top level of the list <span class="s16">X</span><span class="s18">2</span></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">appended to <span class="s11">... </span>appended to <span class="s16">X</span><span class="s18">N</span>, e.g.,</p><p class="s11" style="padding-top: 4pt;padding-left: 161pt;text-indent: 0pt;text-align: left;">(APPEND ’(A B) ’(C D E) ’(F G)) =&gt; (A B C D E F G)</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Only the first <span class="s16">N</span><span class="s11">-1 </span>lists are copied. However <span class="s16">N </span><span class="s11">= 1 </span>is treated specially; <span class="s11">(APPEND X)</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 153%;text-align: left;">copies the top level of a single list. To copy a list to all levels, use <span class="s11">COPY</span>. The following examples illustrate the treatment of non-lists:</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 7pt;text-align: left;">(APPEND ’(A B C) ’D) =&gt; (A B C . D)</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(APPEND ’A ’(B C D)) =&gt; (B C D)</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(APPEND ’(A B C . D) ’(E F G)) =&gt; (A B C E F G)</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(APPEND ’(A B C . D)) =&gt; (A B C . D)</p><p class="s16" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s12">(</span><b>NCONC </b>X<span class="s18">1 </span>X<span class="s18">2 </span>... X<span class="s18">N</span><span class="s12">)                             </span><span class="s5">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the same value as <span class="s11">APPEND</span>, but modifies the list structure of <span class="s16">X</span><span class="s18">1 </span><span class="s11">... </span><span class="s16">X</span><span class="s18">n-1</span><span class="s5">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">NCONC <span class="p">cannot change </span>NIL <span class="p">to a list:</span></p><p class="s19" style="padding-top: 4pt;padding-left: 179pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(SETQ FOO NIL) NIL</span></p><p class="s19" style="padding-left: 179pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(NCONC FOO ’(A B C)) (A B C)</span></p><p class="s19" style="padding-left: 161pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">FOO</span></p><p class="s11" style="padding-left: 179pt;text-indent: 0pt;line-height: 10pt;text-align: left;">NIL</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Although the value of the <span class="s11">NCONC </span>is <span class="s11">(A B C)</span>, <span class="s11">FOO </span>has <i>not </i>been changed. The “problem” is that while it is possible to alter list structure with <span class="s11">RPLACA </span>and <span class="s11">RPLACD</span>, there is no way to change the non-list <span class="s11">NIL </span>to a list.</p><p class="s12" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">NCONC1 </span><span class="s16">LST X</span>)                                            <span class="p">[Function]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">Adds </span>X <span class="p">to the end of </span>LST<span class="p">: </span><span class="s11">(NCONC </span>LST <span class="s11">(LIST </span>X<span class="s11">))</span></p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ATTACH </span><span class="s16">X L</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">“Attaches” <span class="s16">X </span>to the front of <span class="s16">L </span>by doing a <span class="s11">RPLACA </span>and <span class="s11">RPLACD</span>. The value is <span class="s11">EQUAL </span>to <span class="s11">(CONS </span><span class="s16">X L</span><span class="s11">)</span>, but <span class="s11">EQ </span>to <span class="s16">L</span>, which it physically changes (except if <span class="s16">L </span>is <span class="s11">NIL</span>). <span class="s11">(ATTACH X NIL) </span>is the same as <span class="s11">(CONS X NIL)</span>. Otherwise, if <span class="s16">L </span>is not a list, an error is generated, <span class="s11">Arg not list</span><span class="s5">.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MKLIST </span><span class="s16">X</span>)                                               <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">“Make List.” If <span class="s16">X </span>is a list or <span class="s11">NIL</span>, returns <span class="s16">X</span>; Otherwise, returns <span class="s11">(LIST </span><span class="s16">X</span><span class="s11">).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">LISTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Building Lists From Left to Right                                                                                                            </h4><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">TCONC </span><span class="s16">PTR X</span>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">TCONC <span class="p">is similar to </span>NCONC1<span class="p">; it is useful for building a list by adding elements one at a time at the end. Unlike </span>NCONC1<span class="p">, </span>TCONC <span class="p">does not have to search to the end of the list each time it is called. Instead, it keeps a pointer to the end of the list being assembled, and updates this pointer after each call. This can be considerably faster for long lists. The cost is an extra list cell, </span><i>PTR</i><span class="p">. </span>(CAR <i>PTR</i>) <span class="p">is the list being assembled, </span>(CDR <i>PTR</i>) <span class="p">is </span>(LAST (CAR <i>PTR</i>))<span class="p">. </span>TCONC <span class="p">returns </span><i>PTR</i><span class="p">, with its </span>CAR <span class="p">and </span>CDR <span class="p">appropriately modified.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">PTR </span>can be initialized in two ways. If <span class="s16">PTR </span>is <span class="s11">NIL</span>, <span class="s11">TCONC </span>will create and return a <span class="s16">PTR</span>. In this case, the program must set some variable to the value of the first call to <span class="s11">TCONC</span>. After that, it is unnecessary to reset the variable, since <span class="s11">TCONC </span>physically changes its value. Example:</p><p class="s19" style="padding-top: 2pt;padding-left: 132pt;text-indent: -18pt;line-height: 107%;text-align: left;"><span class="s11">(SETQ FOO (TCONC NIL 1)) ((1) 1)</span></p><p class="s19" style="padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(for I from 2 to 5 do (TCONC FOO I)) NIL</span></p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">FOO</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((1 2 3 4 5) 5)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">PTR </span>is initially <span class="s11">(NIL)</span>, the value of <span class="s11">TCONC </span>is the same as for <span class="s16">PTR </span><span class="s11">= NIL</span>. but <span class="s11">TCONC </span>changes <span class="s16">PTR</span>. This method allows the program to initialize the <span class="s11">TCONC </span>variable before adding any elements to the list. Example:</p><p class="s19" style="padding-top: 2pt;padding-left: 132pt;text-indent: -18pt;line-height: 107%;text-align: left;"><span class="s11">(SETQ FOO (CONS)) (NIL)</span></p><p class="s19" style="padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(for I from 1 to 5 do (TCONC FOO I)) NIL</span></p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">FOO</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((1 2 3 4 5) 5)</p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LCONC </span><span class="s16">PTR X</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Where <span class="s11">TCONC </span>is used to add <i>elements </i>at the end of a list, <span class="s11">LCONC </span>is used for building a list by adding <i>lists </i>at the end, i.e., it is similar to <span class="s11">NCONC </span>instead of <span class="s11">NCONC1</span>. Example:</p><p class="s19" style="padding-top: 3pt;padding-left: 132pt;text-indent: -18pt;line-height: 107%;text-align: left;"><span class="s11">(SETQ FOO (CONS)) (NIL)</span></p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(LCONC FOO ’(1 2))</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((1 2) 2)</p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(LCONC FOO ’(3 4 5))</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((1 2 3 4 5) 5)</p><p class="s19" style="padding-left: 132pt;text-indent: -18pt;line-height: 107%;text-align: left;"><span class="s11">(LCONC FOO NIL) ((1 2 3 4 5) 5)</span></p><p class="s11" style="padding-top: 3pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">LCONC <span class="p">uses the same pointer conventions as </span>TCONC <span class="p">for eliminating searching to the end of the list, so that the same pointer can be given to </span>TCONC <span class="p">and </span>LCONC <span class="p">interchangeably. Therefore, continuing from above,</span></p><p class="s19" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s11">(TCONC FOO NIL)</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;text-align: left;">((1 2 3 4 5 NIL) NIL)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 162pt;text-indent: 0pt;text-align: left;"><span class="s11">(TCONC FOO ’(3 4 5))</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;text-align: left;">((1 2 3 4 5 NIL (3 4 5)) (3 4 5))</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The functions <span class="s11">DOCOLLECT </span>and <span class="s11">ENDCOLLECT </span>also let you build lists from left-to-right like <span class="s11">TCONC</span>, but without the overhead of an extra list cell. The listis kept as a circular list. <span class="s11">DOCOLLECT </span>adds items; <span class="s11">ENDCOLLECT </span>replaces the tail with its second argument, and returns the full list.</p><p class="s12" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">DOCOLLECT </span><span class="s16">ITEM LST</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">“Adds” <span class="s16">ITEM </span>to the end of <span class="s16">LST</span>. Returns the new circular list. Note that <span class="s16">LST </span>is modified, but it is not <span class="s11">EQ </span>to the new list. The new list should be stored and used as <span class="s16">LST </span>to the next call to <span class="s11">DOCOLLECT</span>.</p><p class="s12" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">ENDCOLLECT </span><span class="s16">LST TAIL</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Takes <span class="s16">LST</span>, a list returned by <span class="s11">DOCOLLECT</span>, and returns it as a non-circular list, adding</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">TAIL </span>as the terminating <span class="s11">CDR</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Here is an example using <span class="s11">DOCOLLECT </span>and <span class="s11">ENDCOLLECT</span>. <span class="s11">HPRINT </span>is used to print the results because they are circular lists. Notice that <span class="s11">FOO </span>has to be set to the value of <span class="s11">DOCOLLECT </span>as each element is added.</p><p class="s19" style="padding-top: 4pt;padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(SETQ FOO NIL] NIL</span></p><p class="s19" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(HPRINT (SETQ FOO (DOCOLLECT 1 FOO]</span></p><p class="s19" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(1 . {1})</span></p><p class="s19" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(HPRINT (SETQ FOO (DOCOLLECT 2 FOO]</span></p><p class="s19" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(2 1 . {1})</span></p><p class="s19" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(HPRINT (SETQ FOO (DOCOLLECT 3 FOO]</span></p><p class="s19" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(3 1 2 . {1})</span></p><p class="s19" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(HPRINT (SETQ FOO (DOCOLLECT 4 FOO]</span></p><p class="s19" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(4 1 2 3 . {1})</span></p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(SETQ FOO (ENDCOLLECT FOO 5] (1 2 3 4 . 5)</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following two functions are useful when writing programs that reuse a scratch list to collect together some result(s) (both of these compile open):</p><p class="s16" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s12">(</span><b>SCRATCHLIST </b>LST X<span class="s18">1 </span>X<span class="s18">2 </span>... X<span class="s18">N</span><span class="s12">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">SCRATCHLIST </span>sets up a context in which the value of <span class="s16">LST </span>is used as a “scratch” list. The expressions <span class="s16">X</span><span class="s18">1</span>, <span class="s16">X</span><span class="s18">2</span>, <span class="s11">... </span><span class="s16">X</span><span class="s18">N </span>are evaluated in turn. During the course of evaluation, any value passed to <span class="s11">ADDTOSCRATCHLIST </span>will be saved, reusing <span class="s11">CONS </span>cells from the value of <span class="s16">LST</span>. If the value of <span class="s16">LST </span>is not long enough, new <span class="s11">CONS </span>cells will be added onto its end. If the value of <span class="s16">LST </span>is <span class="s11">NIL</span>, the entire value of <span class="s11">SCRATCHLIST </span>will be “new” (i.e., no <span class="s11">CONS </span>cells will be reused).</p><p class="s12" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">ADDTOSCRATCHLIST </span><span class="s16">VALUE</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For use under calls to <span class="s11">SCRATCHLIST</span>. <span class="s16">VALUE </span>is added on to the end of the list of things being collected by <span class="s11">SCRATCHLIST</span>. When <span class="s11">SCRATCHLIST </span>returns, its value is a list containing all of the things added by <span class="s11">ADDTOSCRATCHLIST</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">LISTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Copying Lists                                                                                                                                            </h4><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">COPY </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Creates and returns a copy of the list <span class="s16">X</span>. All levels of <span class="s16">X </span>are copied down to non-lists, so that if <span class="s16">X </span>contains arrays and strings, the copy of <span class="s16">X </span>will contain the same arrays and strings, not copies. <span class="s11">COPY </span>is recursive in the <span class="s11">CAR </span>direction only, so very long lists can be copied.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">To copy just the <i>top level </i>of <span class="s16">X</span>, do <span class="s11">(APPEND </span><span class="s16">X</span><span class="s11">)</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">COPYALL </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Like <span class="s11">COPY</span>, but it copies down to atoms. Arrays, hash-arrays, strings, user data types, etc., are all copied. Analagous to <span class="s11">EQUALALL </span>(see the Equality Predicates section of Chapter 9). This will not work if given a data structure with circular pointers; in this case, use <span class="s11">HCOPYALL</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">HCOPYALL </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Like <span class="s11">COPYALL</span>, but it will work even if the data structure contains circular pointers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Extracting Tails of Lists                                                                                                                            </h4><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">NTH </span><span class="s16">X N</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns the tail of <span class="s16">X </span>beginning with the <span class="s16">N</span>th element. Returns <span class="s11">NIL </span>if <span class="s16">X </span>has fewer than <span class="s16">N</span></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">elements. This is different from Common Lisp’s <span class="s11">NTH</span>. Examples:</p><p class="s11" style="padding-top: 4pt;padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(NTH ’(A B C D) 1) =&gt; (A B C D)</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 88%;text-align: left;">(NTH ’(A B C D) 3) =&gt; (C D) (NTH ’(A B C D) 9) =&gt; NIL (NTH ’(A . B) 2) =&gt; B</p><p class="s11" style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">For consistency, if </span><i>N </i>= 0<span class="p">, </span>NTH <span class="p">returns </span>(CONS NIL <i>X</i>)<span class="p">:</span></p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(NTH ’(A B) 0) =&gt; (NIL A B)</p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FNTH </span><span class="s16">X N</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Faster version of <span class="s11">NTH </span>that terminates on a null-check.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LAST </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the last list cell in the list <span class="s16">X</span>.  Returns <span class="s11">NIL </span>if <span class="s16">X </span>is not a list.  Examples:</p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LAST ’(A B C)) =&gt; (C)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(LAST ’(A B . C)) =&gt; (B . C) (LAST ’A) =&gt; NIL</p><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FLAST </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Faster version of <span class="s11">LAST </span>that terminates on a null-check.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">NLEFT </span><span class="s16">L N TAIL</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s11">NLEFT </span>returns the tail of <span class="s16">L </span>that contains <span class="s16">N </span>more elements than <span class="s16">TAIL</span>. If <span class="s16">L </span>does not contain</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><i>N </i>more elements than <span class="s16">TAIL</span>, <span class="s11">NLEFT </span>returns <span class="s11">NIL</span>. If <span class="s16">TAIL </span>is <span class="s11">NIL </span>or not a tail of <span class="s16">L</span>, <span class="s11">NLEFT</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;">returns the last <span class="s16">N </span>list cells in <span class="s16">L</span>. <span class="s11">NLEFT </span>can be used to work backwards through a list. Example:</p><p class="s19" style="padding-top: 3pt;padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(SETQ FOO ’(A B C D E)) (A B C D E)</span></p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(NLEFT FOO 2) (D E)</span></p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(NLEFT FOO 1 (CDDR FOO)) (B C D E)</span></p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(NLEFT FOO 3 (CDDR FOO)) NIL</span></p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">LASTN </span><span class="s16">L N</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">(CONS X Y)</span>, where <span class="s11">Y </span>is the last <span class="s16">N </span>elements of <span class="s16">L</span>, and <span class="s11">X </span>is the initial segment, e.g.,</p><p class="s11" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LASTN ’(A B C D E) 2) =&gt; ((A B C) D E)</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LASTN ’(A B) 2) =&gt; (NIL A B)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">NIL </span>if <span class="s16">L </span>is not a list containing at least <span class="s16">N </span>elements.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">TAILP </span><span class="s16">X Y</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns <span class="s16">X</span>, if <span class="s16">X </span>is a <i>tail </i>of the list <span class="s16">Y</span>; otherwise <span class="s11">NIL</span>. <span class="s16">X </span>is a tail of <span class="s16">Y </span>if it is <span class="s11">EQ </span>to 0 or more</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s11">CDR</span>s of <span class="s16">Y</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Note: If <span class="s16">X </span>is <span class="s11">EQ </span>to 1 or more <span class="s11">CDR</span>s of <span class="s16">Y</span>, <span class="s16">X </span>is called a “proper tail.”</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Counting List Cells                                                                                                                                   </h4><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">LENGTH </span><span class="s16">X</span>)                                               <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns the length of the list <span class="s16">X</span>, where “length” is defined as the number of <span class="s11">CDR</span>s required to reach a non-list. Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 161pt;text-indent: 0pt;line-height: 88%;text-align: left;">(LENGTH ’(A B C)) =&gt; 3 (LENGTH ’(A B C . D)) =&gt; 3 (LENGTH ’A) =&gt; 0</p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">FLENGTH </span><span class="s16">X</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Faster version of <span class="s11">LENGTH </span>that terminates on a null-check.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">EQLENGTH </span><span class="s16">X N</span>)                                            <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Equivalent to <span class="s11">(EQUAL (LENGTH </span><span class="s16">X</span><span class="s11">) </span><span class="s16">N</span><span class="s11">)</span>, but more efficient, because <span class="s11">EQLENGTH </span>stops as soon as it knows that <span class="s16">X </span>is longer than <span class="s16">N</span>. <span class="s11">EQLENGTH </span>is safe to use on (possibly) circular lists, since it is “bounded” by <span class="s16">N</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">COUNT </span><span class="s16">X</span>)                                                <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the number of list cells in the list <span class="s16">X</span>. Thus, <span class="s11">COUNT </span>is like a <span class="s11">LENGTH </span>that goes to all levels. <span class="s11">COUNT </span>of a non-list is 0. Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(COUNT ’(A)) =&gt; 1</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COUNT ’(A . B)) =&gt; 1</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(COUNT ’(A (B) C)) =&gt; 4</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">LISTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">In this last example, the value is 4 because the list <span class="s11">(A </span><span class="s16">X </span><span class="s11">C) </span>uses three list cells for any object <span class="s16">X</span>, and <span class="s11">(B) </span>uses another list cell.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">COUNTDOWN </span><span class="s16">X N</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Counts the number of list cells in <span class="s16">X</span>, decrementing <span class="s16">N </span>for each one. Stops and returns <span class="s16">N </span>when it finishes counting, or when <span class="s16">N </span>reaches 0. <span class="s11">COUNTDOWN </span>can be used on circular structures since it is “bounded” by <span class="s16">N</span>. Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;line-height: 88%;text-align: left;">(COUNTDOWN ’(A) 100) =&gt; 99 (COUNTDOWN ’(A . B) 100) =&gt; 99 (COUNTDOWN ’(A (B) C) 100) =&gt; 96</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COUNTDOWN (DOCOLLECT 1 NIL) 100) =&gt; 0</p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">EQUALN </span><span class="s16">X Y DEPTH</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">EQUAL</span>, for use with (possibly) circular structures. Whenever the depth of <span class="s11">CAR </span>recursion plus the depth of <span class="s11">CDR </span>recursion exceeds <span class="s16">DEPTH</span>, <span class="s11">EQUALN </span>does not search further along that chain, and returns the symbol <span class="s11">?</span>. If recursion never exceeds <span class="s16">DEPTH</span>, <span class="s11">EQUALN </span>returns <span class="s11">T </span>if the expressions <span class="s16">X </span>and <span class="s16">Y </span>are <span class="s11">EQUAL</span>; otherwise <span class="s11">NIL</span>.</p><p class="s11" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(EQUALN ’(((A)) B) ’(((Z)) B) 2) =&gt; ?</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(EQUALN ’(((A)) B) ’(((Z)) B) 3) =&gt; NIL</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(EQUALN ’(((A)) B) ’(((A)) B) 3) =&gt; T</p><h4 style="padding-top: 8pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Set Operations                                                                                                                                           </h4><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">INTERSECTION </span><span class="s16">X Y</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns a list whose elements are members of both lists <span class="s16">X </span>and <span class="s16">Y </span>(using <span class="s11">EQUAL </span>to do compares).</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Note that <span class="s11">(INTERSECTION X X) </span>gives a list of all members of <span class="s11">X </span>without duplicates.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">UNION </span><span class="s16">X Y</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns a (new) list consisting of all elements included on either of the two original lists (using <span class="s11">EQUAL </span>to compare elements). It is more efficient for <span class="s16">X </span>to be the shorter list.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The value of <span class="s11">UNION </span>is <span class="s16">Y </span>with all elements of <span class="s16">X </span>not in <span class="s16">Y </span><span class="s11">CONS</span>ed on the front of it. Therefore, if an element appears twice in <span class="s16">Y</span>, it will appear twice in <span class="s11">(UNION </span><span class="s16">X Y</span><span class="s11">)</span>. Since <span class="s11">(UNION ’(A) ’(A A)) = (A A)</span>, while <span class="s11">(UNION ’(A A) ’(A)) = (A)</span>, <span class="s11">UNION </span>is</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">non-commutative.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LDIFFERENCE </span><span class="s16">X Y</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">“List Difference.” Returns a list of the elements in <span class="s16">X </span>that are not members of <span class="s16">Y </span>(using</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">EQUAL <span class="p">to compare elements).</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Note: If <span class="s16">X </span>and <span class="s16">Y </span>share no elements, <span class="s11">LDIFFERENCE </span>returns a copy of <span class="s16">X</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LDIFF </span><span class="s16">LST TAIL ADD</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s16">TAIL </span>must be a tail of <span class="s16">LST</span>, i.e., <span class="s11">EQ </span>to the result of applying some number of <span class="s11">CDR</span>s to <span class="s16">LST</span>.</p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s11">(LDIFF </span>LST TAIL<span class="s11">) </span><span class="p">returns a list of all elements in </span>LST <span class="p">up to </span>TAIL<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s16">ADD </span>is not <span class="s11">NIL</span>, the value of <span class="s11">LDIFF </span>is effectively <span class="s11">(NCONC </span><span class="s16">ADD </span><span class="s11">(LDIFF </span><span class="s16">LST TAIL</span><span class="s11">))</span>, i.e., the list difference is added at the end of <span class="s16">ADD</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TAIL </span>is not a tail of <span class="s16">LST</span>, <span class="s11">LDIFF </span>generates an error, <span class="s11">LDIFF: not a tail</span>. <span class="s11">LDIFF </span>terminates on a null-check, so it will go into an infinite loop if <span class="s16">LST </span>is a circular list and <span class="s16">TAIL </span>is not a tail.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Example:</p><p class="s19" style="padding-top: 3pt;padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(SETQ FOO ’(A B C D E F)) (A B C D E F)</span></p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(CDDR FOO) (C D E F)</span></p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(LDIFF FOO (CDDR FOO)) (A B)</span></p><p class="s19" style="padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(LDIFF FOO (CDDR FOO) ’(1 2))</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(1 2 A B)</p><p class="s19" style="padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(LDIFF FOO ’(C D E F))</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 88%;text-align: left;">LDIFF: not a tail (C D E F)</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Note that the value of <span class="s11">LDIFF </span>is always new list structure unless <span class="s16">TAIL </span><span class="s11">= NIL</span>, in which case the value is <span class="s16">LST </span>itself.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Searching Lists                                                                                                                                         </h4><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MEMB </span><span class="s16">X Y</span>)                                               <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Determines if <span class="s16">X </span>is a member of the list <span class="s16">Y</span>. If there is an element of <span class="s16">Y </span><span class="s11">EQ </span>to <span class="s16">X</span>, returns the tail of <span class="s16">Y </span>starting with that element. Otherwise, returns <span class="s11">NIL</span>. Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(MEMB ’A ’(A (W) C D)) =&gt; (A (W) C D)</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(MEMB ’C ’(A (W) C D)) =&gt; (C D)</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(MEMB ’W ’(A (W) C D)) =&gt; NIL</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(MEMB ’(W) ’(A (W) C D)) =&gt; NIL</p><p class="s12" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">FMEMB </span><span class="s16">X Y</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Faster version of <span class="s11">MEMB </span>that terminates on a null-check.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MEMBER </span><span class="s16">X Y</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Identical to <span class="s11">MEMB </span>except that it uses <span class="s11">EQUAL </span>instead of <span class="s11">EQ </span>to check membership of <span class="s16">X </span>in <span class="s16">Y</span>. Examples:</p><p class="s11" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(MEMBER ’C ’(A (W) C D)) =&gt; (C D)</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(MEMBER ’W ’(A (W) C D)) =&gt; NIL</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(MEMBER ’(W) ’(A (W) C D)) =&gt; ((W) C D)</p><p class="s12" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">EQMEMB </span><span class="s16">X Y</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">T </span>if either <span class="s16">X </span>is <span class="s11">EQ </span>to <span class="s16">Y</span>, or else <span class="s16">Y </span>is a list and <span class="s16">X </span>is an <span class="s11">FMEMB </span>of <span class="s16">Y</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">LISTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Substitution Functions                                                                                                                             </h4><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SUBST </span><span class="s16">NEW OLD EXPR</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the result of substituting <span class="s16">NEW </span>for all occurrences of <span class="s16">OLD </span>in the expression <span class="s16">EXPR</span>. Substitution occurs whenever <span class="s16">OLD </span>is <span class="s11">EQUAL </span>to <span class="s11">CAR </span>of some subexpression of <span class="s16">EXPR</span>, or when <span class="s16">OLD </span>is atomic and <span class="s11">EQ </span>to a non-<span class="s11">NIL CDR </span>of some subexpression of <span class="s16">EXPR</span>. For example:</p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(SUBST ’A ’B ’(C B (X . B))) =&gt; (C A (X . A))</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(SUBST ’A ’(B C) ’((B C) D B C)) =&gt; (A D B C) <i>not </i>(A D . A)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s11">SUBST </span>returns a copy of <span class="s16">EXPR </span>with the appropriate changes. Furthermore, if <span class="s16">NEW </span>is a list, it is copied at each substitution.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DSUBST </span><span class="s16">NEW OLD EXPR</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Like <span class="s11">SUBST</span>, but it does not copy <span class="s16">EXPR</span>, but changes the list structure <span class="s16">EXPR </span>itself. Like</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s11">SUBST</span>, <span class="s11">DSUBST </span>substitutes with a copy of <span class="s16">NEW</span>. More efficient than <span class="s11">SUBST</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LSUBST </span><span class="s16">NEW OLD EXPR</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Like <span class="s11">SUBST, </span>but <span class="s16">NEW </span>is substituted as a segment of the list <span class="s16">EXPR </span>rather than as an element. For instance,</p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(LSUBST ’(A B) ’Y ’(X Y Z)) =&gt; (X A B Z)</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If <span class="s16">NEW </span>is not a list, <span class="s11">LSUBST </span>returns a copy of <span class="s16">EXPR </span>with all <span class="s16">OLD</span>’s deleted:</p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(LSUBST NIL ’Y ’(X Y Z)) =&gt; (X Z)</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SUBLIS </span><span class="s16">ALST EXPR FLG</span>) <span class="p">[Function]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">ALST <span class="p">is a list of pairs:</span></p><p class="s16" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s11">((</span>OLD<span class="s18">1 </span><b>. </b>NEW<span class="s18">1</span><span class="s11">) (</span>OLD<span class="s18">2 </span><b>. </b>NEW<span class="s18">2</span><span class="s11">) ... (</span>OLD<span class="s18">N </span><b>. </b>NEW<span class="s18">N</span><span class="s11">))</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Each <span class="s16">OLD</span><span class="s18">i </span>is an atom. <span class="s11">SUBLIS </span>returns the result of substituting each <span class="s16">NEW</span><span class="s18">i </span>for the corresponding <span class="s16">OLD</span><span class="s18">i </span>in <span class="s16">EXPR</span>, e.g.,</p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(SUBLIS ’((A . X) (C . Y)) ’(A B C D)) =&gt; (X B Y D)</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If <span class="s16">FLG </span><span class="s11">= NIL</span>, new structure is created only if needed, so if there are no substitutions, the value is <span class="s11">EQ </span>to <span class="s16">EXPR</span>. If <span class="s16">FLG </span><span class="s11">= T</span>, the value is always a copy of <span class="s16">EXPR</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DSUBLIS </span><span class="s16">ALST EXPR FLG</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Like <span class="s11">SUBLIS</span>, but it changes the list structure <span class="s16">EXPR </span>itself instead of copying it.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SUBPAIR </span><span class="s16">OLD NEW EXPR FLG</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Like <span class="s11">SUBLIS</span>, but elements of <span class="s16">NEW </span>are substituted for corresponding atoms of <span class="s16">OLD </span>in</p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">EXPR<span class="p">, e.g.,</span></p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(SUBPAIR ’(A C) ’(X Y) ’(A B C D)) =&gt; (X B Y D)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">As with <span class="s11">SUBLIS</span>, new structure is created only if needed, or if <span class="s16">FLG </span><span class="s11">= T</span>, e.g., if <span class="s16">FLG </span><span class="s11">= NIL </span>and there are no substitutions, the value is <span class="s11">EQ </span>to <span class="s16">EXPR</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">OLD </span>ends in an atom other than <span class="s11">NIL</span>, the rest of the elements on <span class="s16">NEW </span>are substituted for that atom. For example, if <span class="s16">OLD </span><span class="s11">= (A B . C) </span>and <span class="s16">NEW </span><span class="s11">= (U V X Y Z)</span>, <span class="s11">U </span>is substituted for <span class="s11">A</span>, <span class="s11">V </span>for <span class="s11">B</span>, and <span class="s11">(X Y Z) </span>for <span class="s11">C</span>. Similarly, if <span class="s16">OLD </span>itself is an atom (other than <span class="s11">NIL</span>), the entire list <span class="s16">NEW </span>is substituted for it.  Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 108%;text-align: left;">(SUBPAIR ’(A B . C) ’(W X Y Z) ’(C A B B Y)) =&gt; ((Y Z) W X X Y)</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">SUBST<span class="p">, </span>DSUBST<span class="p">, and </span>LSUBST <span class="p">all substitute copies of the appropriate expression, whereas </span>SUBLIS<span class="p">, and </span>DSUBLIS<span class="p">, and </span>SUBPAIR <span class="p">substitute the identical structure (unless </span><i>FLG </i>= T<span class="p">). For example:</span></p><p class="s19" style="padding-top: 4pt;padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s21"> </span><span class="s11">(SETQ FOO ’(A B)) (A B)</span></p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s21"> </span><span class="s11">(SETQ BAR ’(X Y Z)) (X Y Z)</span></p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s21"> </span><span class="s11">(DSUBLIS (LIST (CONS ’X FOO)) BAR) ((A B) Y Z)</span></p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s21"> </span><span class="s11">(DSUBLIS (LIST (CONS ’Y FOO)) BAR T) ((A B) (A B) Z)</span></p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s21"> </span><span class="s11">(EQ (CAR BAR) FOO) T</span></p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s21"> </span><span class="s11">(EQ (CADR BAR) FOO) NIL</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 78pt;text-indent: -24pt;text-align: left;">Association Lists and Property Lists                                                                                                      </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">It is often useful to associate a set of property names (<span class="s16">NAME1</span>, <span class="s16">NAME2</span>, etc.), with a set of property values (<span class="s16">VALUE1</span>, <span class="s16">VALUE2</span>, etc.). Two list structures commonly used to store such associations are called “property lists” and “association lists.” A list in “association list” format is a list where each element is a call whose <span class="s11">CAR </span>is a property name, and whose <span class="s11">CDR </span>is the value:</p><p class="s11" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">( (<i>NAME1 </i>. <i>VALUE1</i>) (<i>NAME2 </i>. <i>VALUE2</i>) ...)</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A list in “property list” format is a list where the first, third, etc. elements are the property names, and the second, forth, etc. elements are the associated values:</p><p class="s11" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">( <i>NAME1 VALUE1 NAME2 VALUE2 </i>...)</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Another data structure that offers some of the advantages of association lists and property lists is the hash array (see the first page of Chapter 6).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The functions below provide facilities for searching and changing lists in property list or association list format.</p><p class="s17" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note: <span class="p">Property lists are used in many Medley system datatypes. There are special functions that can be used to set and retrieve values from the property lists of symbols (see the Property Lists section of Chapter 2), from properties of windows (see the Window Properties section of Chapter 28), etc.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ASSOC </span><span class="s16">KEY ALST</span>)                                          <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">ALST </span>is a list of lists. <span class="s11">ASSOC </span>returns the first sublist of <span class="s16">ALST </span>whose <span class="s11">CAR </span>is <span class="s11">EQ </span>to <span class="s16">KEY</span>. If such a list is not found, <span class="s11">ASSOC </span>returns <span class="s11">NIL</span>. Example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">LISTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(ASSOC ’B ’((A . 1) (B . 2) (C . 3))) =&gt; (B . 2)</p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FASSOC </span><span class="s16">KEY ALST</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Faster version of <span class="s11">ASSOC </span>that terminates on a null-check.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SASSOC </span><span class="s16">KEY ALST</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Same as <span class="s11">ASSOC, </span>but uses <span class="s11">EQUAL </span>instead of <span class="s11">EQ </span>when searching for <span class="s16">KEY</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">PUTASSOC </span><span class="s16">KEY VAL ALST</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Searches <span class="s16">ALST </span>for a sublist <span class="s11">CAR </span>of which is <span class="s11">EQ </span>to <span class="s16">KEY</span>. If one is found, the <span class="s11">CDR </span>is replaced (using <span class="s11">RPLACD</span>) with <span class="s16">VAL</span>. If no such sublist is found, <span class="s11">(CONS </span><span class="s16">KEY VAL</span><span class="s11">) </span>is added at the end of <span class="s16">ALST</span>.  Returns <span class="s16">VAL</span>.  If <span class="s16">ALST </span>is not a list, generates an error, <span class="s11">Arg not list.</span></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">The argument order for <span class="s11">ASSOC</span>, <span class="s11">PUTASSOC</span>, etc. is different from that of <span class="s11">LISTGET</span>, <span class="s11">LISTPUT</span>, etc.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LISTGET </span><span class="s16">LST PROP</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Searches <span class="s16">LST </span>two elements at a time, by <span class="s11">CDDR</span>, looking for an element <span class="s11">EQ </span>to <span class="s16">PROP</span>. If one is found, returns the next element of <span class="s16">LST</span>, otherwise <span class="s11">NIL</span>. Returns <span class="s11">NIL </span>if <span class="s16">LST </span>is not a list. Example:</p><p class="s11" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(LISTGET ’(A 1 B 2 C 3) ’B) =&gt; 2 (LISTGET ’(A 1 B 2 C 3) ’W) =&gt; NIL</p><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LISTPUT </span><span class="s16">LST PROP VAL</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Searches <span class="s16">LST </span>two elements at a time, by <span class="s11">CDDR</span>, looking for an element <span class="s11">EQ </span>to <span class="s16">PROP</span>. If <span class="s16">PROP </span>is found, replaces the next element of <span class="s16">LST </span>with <span class="s16">VAL</span>. Otherwise, <span class="s16">PROP </span>and <span class="s16">VAL </span>are added to the end of <span class="s16">LST</span>. If <span class="s16">LST </span>is a list with an odd number of elements, or ends in a non-list other than <span class="s11">NIL</span>, <span class="s16">PROP </span>and <span class="s16">VAL </span>are added at its beginning. Returns <span class="s16">VAL</span>. If <span class="s16">LST </span>is not a list, generates an error, <span class="s11">Arg not list</span><span class="s5">.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<span class="s15">LISTGET1 </span><span class="s16">LST PROP</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">LISTGET</span>, but searches <span class="s16">LST </span>one <span class="s11">CDR </span>at a time, i.e., looks at each element. Returns the next element after <span class="s16">PROP</span>.  Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LISTGET1 ’(A 1 B 2 C 3) ’B) =&gt; 2</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(LISTGET1 ’(A 1 B 2 C 3) ’1) =&gt; B (LISTGET1 ’(A 1 B 2 C 3) ’W) =&gt; NIL</p><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LISTPUT1 </span><span class="s16">LST PROP VAL</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Like <span class="s11">LISTPUT</span>, but searches <span class="s16">LST </span>one <span class="s11">CDR </span>at a time. Returns the modified <span class="s16">LST</span>. Example:</p><p class="s19" style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s11">(SETQ FOO ’(A 1 B 2))</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(A 1 B 2)</p><p class="s19" style="padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(LISTPUT1 FOO ’B 3) (A 1 B 3)</span></p><p class="s19" style="padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(LISTPUT1 FOO ’C 4) (A 1 B 3 C 4)</span></p><p class="s19" style="padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(LISTPUT1 FOO 1 ’W) (A 1 W 3 C 4)</span></p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">FOO</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">(A 1 W 3 C 4)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">LST </span>is not a list, no error is generated. However, since a non-list cannot be changed into a list, <span class="s16">LST </span>is not modified. In this case, the value of <span class="s11">LISTPUT1 </span>should be saved. Example:</p><p class="s19" style="padding-top: 5pt;padding-left: 180pt;text-indent: -18pt;line-height: 107%;text-align: left;"><span class="s11">(SETQ FOO NIL) NIL</span></p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(LISTPUT1 FOO ’A 5) (A 5)</span></p><p class="s19" style="padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">FOO</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">NIL</p><h4 style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Sorting Lists                                                                                                                                              </h4><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SORT </span><span class="s16">DATA COMPAREFN</span>)                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">DATA </span>is a list of items to be sorted using <span class="s16">COMPAREFN</span>, a predicate function of two arguments which can compare any two items on <span class="s16">DATA </span>and return <span class="s11">T </span>if the first one belongs before the second. If <span class="s16">COMPAREFN </span>is <span class="s11">NIL</span>, <span class="s11">ALPHORDER </span>is used; thus <span class="s11">(SORT </span><span class="s16">DATA</span><span class="s11">) </span>will alphabetize a list. If <span class="s16">COMPAREFN </span>is <span class="s11">T</span>, <span class="s11">CAR</span>’s of items that are lists are given to <span class="s11">ALPHORDER</span>, otherwise the items themselves; thus <span class="s11">(SORT A-LIST T) </span>will alphabetize an assoc list by the <span class="s11">CAR </span>of each item. <span class="s11">(SORT X ’ILESSP) </span>will sort a list of integers.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The value of <span class="s11">SORT </span>is the sorted list. The sort is destructive and uses no extra storage. The value returned is <span class="s11">EQ </span>to <span class="s16">DATA </span>but elements have been switched around. There is no safe way to interrupt <span class="s11">SORT</span>. If you abort a call to <span class="s11">SORT </span>by any means, you may loose elements from the list beeing sorted. The algorithm used by <span class="s11">SORT </span>is such that the maximum number of compares is <i>N</i>*log<span class="s23">2</span><i>N</i>, where <i>N </i>is (<span class="s11">LENGTH </span><span class="s16">DATA</span><span class="s11">)</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 149pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="p">Note: If </span>(<i>COMPAREFN </i>A B) = <i>(COMPAREFN </i>B A)<span class="p">, then the ordering of </span>A <span class="p">and </span>B</p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: left;">may or may not be preserved.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For example, if <span class="s11">(FOO . FIE) </span>appears before <span class="s11">(FOO . FUM) </span>in <span class="s11">X</span>, <span class="s11">(SORT X T) </span>may or may not reverse the order of these two elements.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MERGE </span><span class="s16">A B COMPAREFN</span>)                                     <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s16">A </span>and <span class="s16">B </span>are lists which have previously been sorted using <span class="s11">SORT </span>and <span class="s16">COMPAREFN</span>. Value is a destructive merging of the two lists. It does not matter which list is longer. After merging both <span class="s16">A </span>and <span class="s16">B </span>are equal to the merged list. (In fact, <span class="s11">(CDR </span><span class="s16">A</span><span class="s11">) </span>is <span class="s11">EQ </span>to <span class="s11">(CDR </span><span class="s16">B</span><span class="s11">)</span>).</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ALPHORDER </span><span class="s16">A B CASEARRAY</span>)                                  <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A predicate function of two arguments, for alphabetizing. Returns a non-<span class="s11">NIL </span>value if its arguments are in lexicographic order, i.e., if <span class="s16">B </span>does not belong before <span class="s16">A</span>. Numbers come before literal atoms, and are ordered by magnitude (using <span class="s11">GREATERP</span>). Literal atoms and strings are ordered by comparing the character codes in their print names. Thus <span class="s11">(ALPHORDER 23 123) </span>is <span class="s11">T</span>, whereas <span class="s11">(ALPHORDER ’A23 ’A123) </span>is <span class="s11">NIL</span>, because the character code for the digit 2 is greater than the code for 1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">LISTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Atoms and strings are ordered before all other data types. If neither <span class="s16">A </span>nor <span class="s16">B </span>are atoms or strings, the value of <span class="s11">ALPHORDER </span>is always <span class="s11">T</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">CASEARRAY </span>is non-<span class="s11">NIL</span>, it is a casearray (see the Random Access File Operations section of Chapter 25) that the characters of <span class="s16">A </span>and <span class="s16">B </span>are translated through before being compared. Numbers are not passed through <span class="s16">CASEARRAY</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><b>Note: </b>If either <span class="s16">A </span>or <span class="s16">B </span>is a number, the value returned in the “true” case is <span class="s11">T</span>. Otherwise, <span class="s11">ALPHORDER </span>returns either <span class="s11">EQUAL </span>or <span class="s11">LESSP </span>to discriminate the cases of <span class="s16">A </span>and <span class="s16">B </span>being equal or unequal strings / atoms.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s17">Note: </span>ALPHORDER <span class="p">does no </span>UNPACK<span class="p">s, </span>CHCON<span class="p">s, </span>CONS<span class="p">es or </span>NTHCHAR<span class="p">s. It is several times faster for alphabetizing than anything that can be written using these other functions.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">UALPHORDER </span><span class="s16">A B</span>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;"><span class="p">Defined as </span>(ALPHORDER <i>A B </i>UPPERCASEARRAY)<span class="p">. </span>UPPERCASEARRAY <span class="p">maps every</span></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 11pt;text-align: left;">lowercase character into the corresponding uppercase character. For more information on</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">UPPERCASEARRAY <span class="p">see Chapter 25.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">MERGEINSERT </span><span class="s16">NEW LST ONEFLG</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s16">LST </span>is <span class="s11">NIL </span>or a list of partially sorted items. <span class="s11">MERGEINSERT </span>tries to find the “best” place to (destructively) insert <span class="s16">NEW</span>, e.g.,</p><p class="s11" style="padding-top: 5pt;padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;">(MERGEINSERT ’FIE2 ’(FOO FOO1 FIE FUM)) =&gt; (FOO FOO1 FIE FIE2 FUM)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">LST</span>. <span class="s11">MERGEINSERT </span>is undoable.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If <span class="s16">ONEFLG </span><span class="s11">= T </span>and <span class="s16">NEW </span>is already a member of <span class="s16">LST</span>, <span class="s11">MERGEINSERT </span>does nothing and returns <span class="s16">LST</span>.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="s11">MERGEINSERT </span>is used by <span class="s11">ADDTOFILE </span>(see the Functions for Manipulating File Command Lists section of Chapter 17) to insert the name of a new function into a list of functions. The algorithm is essentially to look for the item with the longest common leading sequence of characters with respect to <span class="s16">NEW</span>, and then merge <span class="s16">NEW </span>in starting at that point.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Other List Functions                                                                                                                                 </h4><p class="s12" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">REMOVE </span><span class="s16">X L</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Removes all top-level occurrences of <span class="s16">X </span>from list <span class="s16">L</span>, returning a copy of <span class="s16">L </span>with all elements</p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s11">EQUAL </span>to <span class="s16">X </span>removed. Example:</p><p class="s11" style="padding-top: 4pt;padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(REMOVE ’A ’(A B C (A) A)) =&gt; (B C (A))</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(REMOVE ’(A) ’(A B C (A) A)) =&gt; (A B C A)</p><p class="s12" style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">DREMOVE </span><span class="s16">X L</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Like <span class="s11">REMOVE</span>, but uses <span class="s11">EQ </span>instead of <span class="s11">EQUAL</span>, and actually modifies the list <span class="s16">L </span>when removing <span class="s16">X</span>, and thus does not use any additional storage. More efficient than <span class="s11">REMOVE</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s11">DREMOVE </span>cannot <i>change </i>a list to <span class="s11">NIL</span>:</p><p class="s19" style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s11">(SETQ FOO ’(A))</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(A)</p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(DREMOVE ’A FOO) NIL</span></p><p class="s19" style="padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">FOO</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(A)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The <span class="s11">DREMOVE </span>above returns <span class="s11">NIL</span>, and does not perform any <span class="s11">CONS</span>es, but the value of <span class="s11">FOO</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">is <i>still </i><span class="s11">(A)</span>, because there is no way to change a list to a non-list. See <span class="s11">NCONC</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">REVERSE </span><span class="s16">L</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Reverses (and copies) the top level of a list, e.g.,</p><p class="s11" style="padding-top: 4pt;padding-left: 161pt;text-indent: 0pt;text-align: left;">(REVERSE ’(A B (C D))) =&gt; ((C D) B A)</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">L </span>is not a list, <span class="s11">REVERSE </span>just returns <span class="s16">L</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DREVERSE </span><span class="s16">L</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Value is the same as that of <span class="s11">REVERSE</span>, but <span class="s11">DREVERSE </span>destroys the original list <span class="s16">L </span>and thus does not use any additional storage. More efficient than <span class="s11">REVERSE</span>.</p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">COMPARELISTS </span><span class="s16">X Y</span>)                                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Compares the list structures <span class="s16">X </span>and <span class="s16">Y </span>and prints a description of any differences to the terminal. If <span class="s16">X </span>and <span class="s16">Y </span>are <span class="s11">EQUAL </span>lists, <span class="s11">COMPARELISTS </span>simply prints out <span class="s11">SAME</span>. Returns <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">COMPARELISTS </span>prints a terse description of the differences between the two list structures, highlighting the items that have changed. This printout is not a complete and perfect comparison. If <span class="s16">X </span>and <span class="s16">Y </span>are radically different list structures, the printout will not be very useful. <span class="s11">COMPARELISTS </span>is meant to be used as a tool to help users isolate differences between similar structures.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">When a single element has been changed for another, </span>COMPARELISTS <span class="p">prints out items such as </span>(<i>A </i>-&gt; <i>B</i>)<span class="p">, for example:</span></p><p class="s19" style="padding-top: 4pt;padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(COMPARELISTS ’(A B C D) ’(X B E D)) (A -&gt; X) (C -&gt; E)</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 9pt;text-align: left;">NIL</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">When there are more complex differences between the two lists, <span class="s11">COMPARELISTS </span>prints <span class="s16">X </span>and <span class="s16">Y</span>, highlighting differences and abbreviating similar elements as much as possible. <span class="s11">“&amp;</span>” is used to signal a single element that is present in the same place in the two lists; <span class="s11">“-- </span>” signals an arbitrary number of elements in one list but not in the other; <span class="s11">“-2-</span>,” <span class="s11">“-3-</span>”, etc. signal a sequence of two, three, etc. elements that are the same in both lists. Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;">(COMPARELISTS ’(A B C D) ’(A D)) (A B C --)</p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(A D)</p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(COMPARELISTS ’(A B C D E F G H) ’(A B C D X)) (A -3- E F --)</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(A -3- X)</p><p class="s19" style="padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(COMPARELISTS ’(A B C (D E F (G) H) I) ’(A B (G) C (D E F H) I))</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(A &amp; &amp; (D -2- (G) &amp;) &amp;)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">LISTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 132pt;text-indent: 0pt;text-align: left;">(A &amp; (G) &amp; (D -2- &amp;) &amp;)</p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">NEGATE </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">For a form <span class="s16">X</span>, returns a form which computes the negation of <span class="s16">X </span>. For example:</p><p class="s11" style="padding-top: 8pt;padding-left: 113pt;text-indent: 0pt;line-height: 88%;text-align: left;">(NEGATE ’(MEMBER X Y)) =&gt; (NOT (MEMBER X Y)) (NEGATE ’(EQ X Y)) =&gt; (NEQ X Y)</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 88%;text-align: left;">(NEGATE ’(AND X (NLISTP X))) =&gt; (OR (NULL X) (LISTP X)) (NEGATE NIL) =&gt; T</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 4pt;padding-left: 417pt;text-indent: -417pt;text-align: right;"><a name="bookmark5">STRINGS</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_010.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A string represents a sequence of characters. Interlisp strings are a subtype of Common Lisp strings. Medley provides functions for creating strings, concatenating strings, and creating sub-strings of a string; all accepting or producing Common Lisp-acceptable strings.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">A string is typed as a double quote (<span class="s11">&quot;</span>), followed by a sequence of any characters except double quote and <span class="s11">%</span>, terminated by a double quote. To include <span class="s11">% </span>or <span class="s11">&quot; </span>in a string, type <span class="s11">% </span>in front of them:</p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">&quot;A string&quot;</p><p class="s11" style="padding-top: 1pt;padding-left: 78pt;text-indent: 0pt;line-height: 79%;text-align: justify;">&quot;A string with %&quot; in it, and a %%.&quot; &quot;&quot; <span class="s9">; an empty string</span></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Strings are printed by <span class="s11">PRINT </span>and <span class="s11">PRIN2 </span>with initial and final double quotes, and <span class="s11">%</span>s inserted where necessary for it to read back in properly. Strings are printed by <span class="s11">PRIN1 </span>without the double quotes and extra <span class="s11">%</span>s. The null string is printed by <span class="s11">PRINT </span>and <span class="s11">PRIN2 </span>as <span class="s11">&quot;&quot;</span>. <span class="s11">(PRIN1 &quot;&quot;) </span>doesn’t print anything.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Internally, a string is stored in two parts: a “string header” and the sequence of characters. Several string headers may refer to the the same character sequence, so a substring can be made by creating a new string header, without copying any characters. Functions that refer to “strings” actually manipulate string headers. Some functions take an “old string” argument, and re-use the string pointer.</p><p class="s12" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">STRINGP </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a string, <span class="s11">NIL </span>otherwise.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">STREQUAL </span><span class="s16">X Y</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns <span class="s11">T </span>if <span class="s16">X </span>and <span class="s16">Y </span>are both strings and they contain the same sequence of characters, otherwise <span class="s11">NIL</span>. <span class="s11">EQUAL </span>uses <span class="s11">STREQUAL</span>. Note that strings may be <span class="s11">STREQUAL </span>without being <span class="s11">EQ</span>. For instance,</p><p class="s11" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(STREQUAL &quot;ABC&quot; &quot;ABC&quot;) =&gt; T (EQ &quot;ABC&quot; &quot;ABC&quot;) =&gt; NIL</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="s11">STREQUAL </span>returns <span class="s11">T </span>if <span class="s16">X </span>and <span class="s16">Y </span>are the same string pointer, or two different string pointers which point to the same character sequence, or two string pointers which point to different character sequences which contain the same characters. Only in the first case would <span class="s16">X </span>and <span class="s16">Y </span>be <span class="s11">EQ</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">STRING-EQUAL </span><span class="s16">X Y</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns <span class="s11">T </span>if <span class="s16">X </span>and <span class="s16">Y </span>are either strings or symbols, and they contain the same sequence of characters, ignoring case. For instance,</p><p class="s11" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(STRING-EQUAL &quot;FOO&quot; &quot;Foo&quot;) =&gt; T (STRING-EQUAL &quot;FOO&quot; ’Foo) =&gt; T</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This is useful for comparing things that might want to be considered “equal” even though they’re not both symbols in a consistent case, such as file names and user names.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">STRING.EQUAL </span><span class="s16">X Y</span>)                                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns <span class="s11">T </span>if the print names of <span class="s16">X </span>and <span class="s16">Y </span>contain the same sequence of characters, ignoring case. For instance,</p><p class="s11" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">(STRING-EQUAL &quot;320&quot; 320) =&gt; T (STRING-EQUAL &quot;FOO&quot; ’Foo) =&gt; T</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">This is like <span class="s11">STRING-EQUAL</span>, but handles numbers, etc., where <span class="s11">STRING-EQUAL </span>doesn’t.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ALLOCSTRING  </span><span class="s16">N INITCHAR OLD FATFLG</span>)                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Creates a string of length <span class="s16">N </span>characters of <span class="s16">INITCHAR </span>(which can be either a character code or something coercible to a character). If <span class="s16">INITCHAR </span>is <span class="s11">NIL</span>, it defaults to character code 0. if <span class="s16">OLD </span>is supplied, it must be a string pointer, which is modified and returned.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If <span class="s16">FATFLG </span>is non-<span class="s11">NIL</span>, the string is allocated using full 16-bit NS characters (see Chapter 2) instead of 8-bit characters. This can speed up some string operations if NS characters are later inserted into the string. This has no other effect on the operation of the string functions.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MKSTRING </span><span class="s16">X FLG RDTBL</span>)                                     <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is a string, returns <span class="s16">X</span>. Otherwise, creates and returns a string containing the print name of <span class="s16">X</span>. Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">(MKSTRING &quot;ABC&quot;) =&gt; &quot;ABC&quot; (MKSTRING ’(A B C)) =&gt; &quot;(A B C)&quot; (MKSTRING NIL) =&gt; &quot;NIL&quot;</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Note that the last example returns the string <span class="s11">&quot;NIL&quot;</span>, not the symbol <span class="s11">NIL</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If <span class="s16">FLG </span>is <span class="s11">T</span>, then the <span class="s11">PRIN2</span>-name of <span class="s16">X </span>is used, computed with respect to the readtable</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">RDTBL<span class="p">. For example,</span></p><p class="s11" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">(MKSTRING &quot;ABC&quot; T) =&gt; &quot;%&quot;ABC%&quot;&quot;</p><p class="s12" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">NCHARS </span><span class="s16">X FLG RDTBL</span>)                                      <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the number of characters in the print name of <span class="s16">X</span>. If <span class="s16">FLG</span><span class="s11">=T</span>, the <span class="s11">PRIN2</span>-name is used.  For example,</p><p class="s11" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">(NCHARS ’ABC) =&gt; 3 (NCHARS &quot;ABC&quot; T) =&gt; 5</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: <span class="s11">NCHARS </span>works most efficiently on symbols and strings, but can be given any object.</p><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SUBSTRING </span><span class="s16">X N M OLDPTR</span>)                                   <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Returns the substring of <span class="s16">X </span>consisting of the <span class="s16">N</span>th through <span class="s16">M</span>th characters of <span class="s16">X</span>. If <span class="s16">M </span>is <span class="s11">NIL</span>, the substring contains the <span class="s16">N</span>th character thru the end of <span class="s16">X</span>. <span class="s16">N </span>and <span class="s16">M </span>can be negative numbers, which are interpreted as counts back from the end of the string, as with <span class="s11">NTHCHAR </span>(Chapter 2). <span class="s11">SUBSTRING </span>returns <span class="s11">NIL </span>if the substring is not well defined, (e.g., <span class="s16">N </span>or <span class="s16">M </span>specify character positions outside of <span class="s16">X</span>, or <span class="s16">N </span>corresponds to a character in <span class="s16">X </span>to the right of the character indicated by <span class="s16">M</span>). Examples:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">STRINGS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(SUBSTRING &quot;ABCDEFG&quot; 4 6) =&gt; &quot;DEF&quot;</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(SUBSTRING &quot;ABCDEFG&quot; 3 3) =&gt; &quot;C&quot; (SUBSTRING &quot;ABCDEFG&quot; 3 NIL) =&gt; &quot;CDEFG&quot; (SUBSTRING &quot;ABCDEFG&quot; 4 -2) =&gt; &quot;DEF&quot;</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(SUBSTRING &quot;ABCDEFG&quot; 6 4) =&gt; NIL</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(SUBSTRING &quot;ABCDEFG&quot; 4 9) =&gt; NIL</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is not a string, it is converted to one. For example,</p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(SUBSTRING ’(A B C) 4 6) =&gt; &quot;B C&quot;</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">SUBSTRING </span>does not actually copy any characters, but simply creates a new string pointer to the characters in <span class="s16">X</span>. If <span class="s16">OLDPTR </span>is a string pointer, it is modified and returned.</p><p class="s12" style="padding-top: 9pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">GNC </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">“Get Next Character.” Returns the next character of the string <span class="s16">X </span>(as a symbol); also removes the character from the string, by changing the string pointer. Returns <span class="s11">NIL </span>if <span class="s16">X </span>is the null string. If <span class="s16">X </span>isn’t a string, a string is made. Used for sequential access to characters of a string. Example:</p><p class="s19" style="padding-top: 3pt;padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(SETQ FOO &quot;ABCDEFG&quot;) &quot;ABCDEFG&quot;</span></p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(GNC FOO)</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 9pt;text-align: left;">A</p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(GNC FOO)</span></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: right;">B</p><p class="s19" style="padding-left: 28pt;text-indent: 0pt;line-height: 11pt;text-align: right;"><span class="s11">FOO</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;CDEFG&quot;</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note that if <span class="s16">A </span>is a substring of <span class="s11">B</span>, <span class="s11">(GNC A) </span>does not remove the character from <span class="s11">B</span>.</p><p class="s12" style="padding-top: 9pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">GLC </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">“Get Last Character.” Returns the last character of the string <span class="s16">X </span>(as a symbol); also removes the character from the string. Similar to <span class="s11">GNC</span>. Example:</p><p class="s19" style="padding-top: 4pt;padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(SETQ FOO &quot;ABCDEFG&quot;) &quot;ABCDEFG&quot;</span></p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(GLC FOO)</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 9pt;text-align: left;">G</p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(GLC FOO)</span></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: right;">F</p><p class="s19" style="padding-left: 28pt;text-indent: 0pt;line-height: 11pt;text-align: right;"><span class="s11">FOO</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;ABCDE&quot;</p><p class="s16" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s12">(</span><b>CONCAT </b>X<span class="s18">1 </span>X<span class="s18">2 </span>... X<span class="s18">N</span><span class="s12">) </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns a new string which is the concatenation of (copies of) its arguments. Any arguments which are not strings are transformed to strings. Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(CONCAT &quot;ABC&quot; ’DEF &quot;GHI&quot;) =&gt; &quot;ABCDEFGHI&quot; (CONCAT ’(A B C) &quot;ABC&quot;) =&gt; &quot;(A B C)ABC&quot;</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(CONCAT) <span class="p">returns the null string, </span>&quot;&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CONCATLIST </span><span class="s16">L</span>)                                            <span class="p">[Function]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">L <span class="p">is a list of strings and / or other objects. The objects are transformed to strings if they aren’t strings. Returns a new string which is the concatenation of the strings. Example:</span></p><p class="s11" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">(CONCATLIST ’(A B (C D) &quot;EF&quot;)) =&gt; &quot;AB(C D)EF&quot;</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">RPLSTRING </span><span class="s16">X N Y</span>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Replaces the characters of string <span class="s16">X </span>beginning at character position <span class="s16">N </span>with string <span class="s16">Y</span>. <span class="s16">X </span>and <span class="s16">Y </span>are converted to strings if they aren’t already. <span class="s16">N </span>may be positive or negative, as with <span class="s11">SUBSTRING</span>.  Characters are smashed into (converted) <span class="s16">X</span>.  Returns the string <span class="s16">X</span>.  Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(RPLSTRING &quot;ABCDEF&quot; -3 &quot;END&quot;) =&gt; &quot;ABCEND&quot;</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(RPLSTRING &quot;ABCDEFGHIJK&quot; 4 ’(A B C)) =&gt; &quot;ABC(A B C)K&quot;</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Generates an error if there is not enough room in <span class="s16">X </span>for <span class="s16">Y</span>, i.e., the new string would be longer than the original. If <span class="s16">Y </span>was not a string, <span class="s16">X </span>will already have been modified since <span class="s11">RPLSTRING </span>does not know whether <span class="s16">Y </span>will “fit” without actually attempting the transfer.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><b>Warning</b>: In some implementations of Interlisp, if <span class="s16">X </span>is a substring of <span class="s11">Z</span>, <span class="s11">Z </span>will also be modified by the action of <span class="s11">RPLSTRING </span>or <span class="s11">RPLCHARCODE</span>. However, this is not guaranteed to be true in all cases, so programmers should not rely on <span class="s11">RPLSTRING </span>or <span class="s11">RPLCHARCODE </span>altering the characters of any string other than the one directly passed as argument to those functions.</p><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">RPLCHARCODE </span><span class="s16">X N CHAR</span>)                                     <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Replaces the <span class="s16">N</span>th character of the string <span class="s16">X </span>with the character code <span class="s16">CHAR</span>. <span class="s16">N </span>may be positive or negative. Returns the new <span class="s16">X</span>. Similar to <span class="s11">RPLSTRING</span>. Example:</p><p class="s11" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">(RPLCHARCODE &quot;ABCDE&quot; 3 (CHARCODE F)) =&gt; &quot;ABFDE&quot;</p><p style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">STRPOS </span><span class="s16">PAT STRING START SKIP ANCHOR TAIL CASEARRAY BACKWARDSFLG</span>)         [Function]</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">STRPOS </span>is a function for searching one string looking for another. <span class="s16">PAT </span>and <span class="s16">STRING </span>are both strings (or else they are converted automatically). <span class="s11">STRPOS </span>searches <span class="s16">STRING </span>beginning at character number <span class="s16">START</span>, (or 1 if <span class="s16">START </span>is <span class="s11">NIL</span>) and looks for a sequence of characters equal to <span class="s16">PAT</span>. If a match is found, the character position of the first matching character in <span class="s16">STRING </span>is returned, otherwise <span class="s11">NIL</span>. Examples:</p><p class="s11" style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">(STRPOS &quot;ABC&quot; &quot;XYZABCDEF&quot;) =&gt; 4 (STRPOS &quot;ABC&quot; &quot;XYZABCDEF&quot; 5) =&gt; NIL (STRPOS &quot;ABC&quot; &quot;XYZABCDEFABC&quot; 5) =&gt; 10</p><p class="s16" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">SKIP <span class="p">can be used to specify a character in </span>PAT <span class="p">that matches any character in </span>STRING<span class="p">. Examples:</span></p><p class="s11" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">(STRPOS &quot;A&amp;C&amp;&quot; &quot;XYZABCDEF&quot; NIL ’&amp;) =&gt; 4 (STRPOS &quot;DEF&amp;&quot; &quot;XYZABCDEF&quot; NIL ’&amp;) =&gt; NIL</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">ANCHOR </span>is <span class="s11">T</span>, <span class="s11">STRPOS </span>compares <span class="s16">PAT </span>with the characters beginning at position <span class="s16">START </span>(or 1 if <span class="s16">START </span>is <span class="s11">NIL</span>). If that comparison fails, <span class="s11">STRPOS </span>returns <span class="s11">NIL </span>without searching any further down <span class="s16">STRING</span>. Thus it can be used to compare one string with some <i>portion </i>of another string.  Examples:</p><p class="s11" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">(STRPOS &quot;ABC&quot; &quot;XYZABCDEF&quot; NIL NIL T) =&gt; NIL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">STRINGS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(STRPOS &quot;ABC&quot; &quot;XYZABCDEF&quot; 4 NIL T) =&gt; 4</p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TAIL </span>is <span class="s11">T</span>, the value returned by <span class="s11">STRPOS </span>if successful is not the starting position of the sequence of characters corresponding to <span class="s16">PAT</span>, but the position of the first character after that, i.e., the starting position plus <span class="s11">(NCHARS </span><span class="s16">PAT</span><span class="s11">)</span>.  Examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(STRPOS &quot;ABC&quot; &quot;XYZABCDEFABC&quot; NIL NIL NIL T) =&gt; 7 (STRPOS &quot;A&quot; &quot;A&quot; NIL NIL NIL T) =&gt; 2</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TAIL </span><span class="s11">= NIL</span>, <span class="s11">STRPOS </span>returns <span class="s11">NIL</span>, or a character position within <span class="s16">STRING </span>which can be passed to <span class="s11">SUBSTRING</span>. In particular, <span class="s11">(STRPOS &quot;&quot; &quot;&quot;) =&gt; NIL</span>. However, if <span class="s16">TAIL</span></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">= T</span>, <span class="s11">STRPOS </span>may return a character position outside of <span class="s16">STRING</span>. For instance, note that the second example above returns 2, even though <span class="s11">“A</span>” has only one character.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s16">CASEARRAY </span>is non-<span class="s11">NIL</span>, this should be a casearray like that given to <span class="s11">FILEPOS </span>(Chapter 25). The casearray is used to map the string characters before comparing them to the search string.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">BACKWARDSFLG </span>is non-<span class="s11">NIL</span>, the search is done backwards from the end of the string.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">STRPOSL </span><span class="s16">A STRING START NEG BACKWARDSFLG</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">STRING </span>is a string (or is converted automatically to a string), <span class="s16">A </span>is a list of characters or character codes. <span class="s11">STRPOSL </span>searches <span class="s16">STRING </span>beginning at character number <span class="s16">START </span>(or 1 if <span class="s16">START </span><span class="s11">= NIL</span>) for one of the characters in <span class="s16">A</span>. If one is found, <span class="s11">STRPOSL </span>returns as its value the corresponding character position, otherwise <span class="s11">NIL</span>. Example:</p><p class="s11" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(STRPOSL ’(A B C) &quot;XYZBCD&quot;) =&gt; 4</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NEG </span><span class="s11">= T</span>, <span class="s11">STRPOSL </span>searches for a character <i>not </i>on <span class="s16">A</span>. Example:</p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(STRPOSL ’(A B C) &quot;ABCDEF&quot; NIL T) =&gt; 4</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If any element of <span class="s16">A </span>is a number, it is assumed to be a character code. Otherwise, it is converted to a character code via <span class="s11">CHCON1</span>. Therefore, it is more efficient to call <span class="s11">STRPOSL </span>with <i>A </i>a list of character <i>codes.</i></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">A </span>is a bit table, it is used to specify the characters (see <span class="s11">MAKEBITTABLE </span>below)</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">BACKWARDSFLG </span>is non-<span class="s11">NIL</span>, the search is done backwards from the end of the string.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">STRPOSL </span>uses a “bit table” data structure to search efficiently. If <span class="s16">A </span>is not a bit table, it is converted to a bit table using <span class="s11">MAKEBITTABLE</span>. If <span class="s11">STRPOSL </span>is to be called frequently with the same list of characters, a considerable savings can be achieved by converting the list to a bit table <i>once</i>, and then passing the bit table to <span class="s11">STRPOSL </span>as its first argument.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">MAKEBITTABLE </span><span class="s16">L NEG A</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns a bit table suitable for use by <span class="s11">STRPOSL</span>. <span class="s16">L </span>is a list of characters or character codes, <span class="s16">NEG </span>is the same as described for <span class="s11">STRPOSL</span>. If <span class="s16">A </span>is a bit table, <span class="s11">MAKEBITTABLE </span>modifies and returns it. Otherwise, it will create a new bit table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: If <span class="s16">NEG </span><span class="s11">= T</span>, <span class="s11">STRPOSL </span>must call <span class="s11">MAKEBITTABLE </span>whether <span class="s16">A </span>is a list <i>or </i>a bit table. To obtain bit table efficiency with <span class="s16">NEG</span><span class="s11">=T</span>, <span class="s11">MAKEBITTABLE </span>should be called with <span class="s16">NEG</span><span class="s11">=T</span>, and the resulting “inverted” bit table should be given to <span class="s11">STRPOSL </span>with <span class="s16">NEG</span><span class="s11">=NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 4pt;padding-left: 419pt;text-indent: -419pt;text-align: right;"><a name="bookmark6">ARRAYS</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_011.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">An Interlisp array is a one-dimensional vector of objects. Arrays are generally created by the function</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">ARRAY<span class="p">. By contrast, Common Lisp arrays can be multi-dimensional.</span></p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">Note: Interlisp arrays and Common Lisp arrays are <i>not </i>the same types. Interlisp functions only accept Interlisp arrays and vice versa.  There are no functions to convert between the two types.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">ARRAY </span><span class="s16">SIZE TYPE INIT ORIG —</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Creates and returns a new array that holds <span class="s16">SIZE </span>objects of type <span class="s16">TYPE</span>. If <span class="s16">TYPE </span>is <span class="s11">NIL</span>, the array can contain any arbitrary Lisp datum. In general, <span class="s16">TYPE </span>may be any of the various field specifications that are legal in <span class="s11">DATATYPE </span>declarations (see Chapter 8): <span class="s11">POINTER</span>, <span class="s11">FIXP</span>, <span class="s11">FLOATP</span>, <span class="s11">(BITS </span><span class="s16">N</span><span class="s11">)</span>, etc. Medley will, if necessary, choose an “enclosing” type if the given one is not supported; for example, an array of <span class="s11">(BITS 3) </span>may be represented by an array of <span class="s11">(BITS 8)</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">INIT </span>is the initial value for each element of the new array. If not specified, the array elements will be initialized with 0 (for number arrays) or <span class="s11">NIL </span>(all other types).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Arrays can have either 0-origin or 1-origin indexing, as specified by the <span class="s16">ORIG </span>argument; if</p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">ORIG <span class="p">is not specified, the default is 1.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Arrays of type <span class="s11">FLOATP </span>are stored unboxed. This increases the space and time efficiency of <span class="s11">FLOATP </span>arrays. If you want to use boxed floating point numbers, use an array of type <span class="s11">POINTER </span>instead of <span class="s11">FLOATP</span>.</p><p class="s12" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">ARRAYP </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">X </span>if <span class="s16">X </span>is an array, <span class="s11">NIL </span>otherwise.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">ELT </span><span class="s16">ARRAY N</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the <span class="s16">N</span>th element of the array <span class="s16">ARRAY</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Causes the error, <span class="s11">Arg not array</span>, if <span class="s16">ARRAY </span>is not an array. Causes the error, <span class="s11">Illegal Arg</span>, if <span class="s16">N </span>is out of bounds.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SETA </span><span class="s16">ARRAY N VAL</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Sets the <span class="s16">N</span>th element of <span class="s16">ARRAY </span>to <span class="s16">VAL</span>, and returns <span class="s16">VAL</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Causes the error, <span class="s11">Arg not array</span>, if <span class="s16">ARRAY </span>is not an array. the error, <span class="s11">Illegal Arg</span>, if <span class="s16">N </span>is out of bounds. Can cause the error, <span class="s11">Non-numeric arg</span>, if <span class="s16">ARRAY </span>is an array whose <span class="s11">ARRAYTYP </span>is <span class="s11">FIXP </span>or <span class="s11">FLOATP </span>and <span class="s16">VAL </span>is non-numeric.</p><p class="s12" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">ARRAYTYP </span><span class="s16">ARRAY</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the type of the elements in <span class="s16">ARRAY</span>, a value corresponding to the second argument to <span class="s11">ARRAY</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s11">ARRAY </span>coerced the array type as described above, <span class="s11">ARRAYTYP </span>returns the <i>new </i>type. For example, <span class="s11">(ARRAYTYP (ARRAY 10 ’(BITS 3))) </span>returns <span class="s11">BYTE</span>.</p><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ARRAYSIZE </span><span class="s16">ARRAY</span>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the size of <span class="s16">ARRAY</span>. Generates the error, <span class="s11">Arg not array</span>, if <span class="s16">ARRAY </span>is not an array.</p><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ARRAYORIG </span><span class="s16">ARRAY</span>)                                         <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the origin of <span class="s16">ARRAY</span>, which may be 0 or 1. Generates an error, <span class="s11">Arg not array</span>, if <span class="s16">ARRAY </span>is not an array.</p><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">COPYARRAY </span><span class="s16">ARRAY</span>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns a new array of the same size and type as <span class="s16">ARRAY</span>, and with the same contents as</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s16">ARRAY</span>. Generates an error, <span class="s11">Arg not array</span>, if <span class="s16">ARRAY </span>is not an array.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 4pt;padding-left: 391pt;text-indent: -391pt;text-align: right;"><a name="bookmark7">HASHARRAYS</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_012.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Hash arrays let you associate arbitrary Lisp objects (“hash keys”) with other objects (“hash values”), so you can get from key to value quickly. There are functions for creating hash arrays, putting a hash key / value pair in a hash array, and quickly retrieving the hash value associated with a given hash key.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">By default, the hash array functions use <span class="s11">EQ </span>for comparing hash keys. This means that if non-symbols are used as hash keys, the exact same object (not a copy) must be used to retrieve the hash value. However, you can specify the function used to compare hash keys and to “hash” a hash key to a number. You can, for example, create hash arrays where <span class="s11">EQUAL </span>but non-<span class="s11">EQ </span>strings will hash to the same value.  Specifying alternative hashing algorithms is described below.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">In the description of the functions below, the argument <span class="s16">HARRAY </span>should be a hasharray created by <span class="s11">HASHARRAY</span>. For convenience in interactive program development, it may also be <span class="s11">NIL</span>, in which case a hash array <span class="s11">(SYSHASHARRAY) </span>provided by the system is used; you must watch out for confusions if this form is used to associate more than one kind of value with the same key.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: For backwards compatibility, the hash array functions will accept a list whose <span class="s11">CAR </span>is a hash array, and whose <span class="s11">CDR </span>is the “overflow method” for the hash array (see below). However, hash array functions are guaranteed to perform with maximum efficiency only if a direct value of <span class="s11">HASHARRAY </span>is given.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><b>Note</b>: Interlisp hash arrays and Common Lisp hash tables are the same data type, so functions from both may be intermixed. The only difference between the functions may be argument order, as in <span class="s11">MAPHASH </span>and <span class="s11">CL:MAPHASH </span>(see below).</p><p class="s12" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(<span class="s15">HASHARRAY </span><span class="s16">MINKEYS OVERFLOW HASHBITSFN EQUIVFN RECLAIMABLE REHASH-</span></p><p class="s16" style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;">THRESHOLD<span class="s12">) </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Creates a hash array with space for at least <span class="s16">MINKEYS </span>hash keys, with overflow method</p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">OVERFLOW<span class="p">. See discussion of overflow behavior below.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">HASHBITSFN </span>and <span class="s16">EQUIVFN </span>are non-<span class="s11">NIL</span>, they specify the hashing function and comparison function used to interpret hash keys. This is described in the section on user- specified hashing functions below. If <span class="s16">HASHBITSFN </span>and <span class="s16">EQUIVFN </span>are <span class="s11">NIL</span>, the default is to hash <span class="s11">EQ </span>hash keys to the same value.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s16">RECLAIMABLE </span>is <span class="s16">T </span>the entries in the hash table will be removed if the key has a reference count of one and the table is about to be rehashed. This allows the system, in some cases, to reuse keys instead of expanding the table.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: <span class="s11">CL:MAKE-HASH-TABLE </span>does not allow you to specify your own hashing functions but does provide three built-in types specified by <i>Common Lisp, the Language</i>.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">HARRAY </span><span class="s16">MINKEYS</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Provided for backward compatibility, this is equivalent to <span class="s11">(HASHARRAY MINKEYS ’ERROR), </span>i.e. if the resulting hasarray gets full, an error occurs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">HARRAYP </span><span class="s16">X</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">X </span>if it is a hash array; otherwise <span class="s11">NIL</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">HARRAYP </span>returns <span class="s11">NIL </span>if <span class="s16">X </span>is a list whose <span class="s11">CAR </span>is an <span class="s11">HARRAYP</span>, even though this is accepted by the hash array functions (see below).</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">PUTHASH </span><span class="s16">KEY VAL HARRAY</span>)                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Associates the hash value <span class="s16">VAL </span>with the hash key <span class="s16">KEY </span>in <span class="s16">HARRAY</span>. Replaces the previous hash value, if any. If <span class="s16">VAL </span>is <span class="s11">NIL</span>, any old association is removed (hence a hash value of <span class="s11">NIL </span>is not allowed). If <span class="s16">HARRAY </span>is full when <span class="s11">PUTHASH </span>is called with a key not already in the hash array, the function <span class="s11">HASHOVERFLOW </span>is called, and the <span class="s11">PUTHASH </span>is applied to the value returned (see below).  Returns <span class="s16">VAL</span>.</p><p class="s12" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GETHASH </span><span class="s16">KEY HARRAY</span>)                                      <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns the hash value associated with the hash key <span class="s16">KEY </span>in <span class="s16">HARRAY</span>. Returns <span class="s11">NIL</span>, if <span class="s16">KEY</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">is not found.</p><p class="s12" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CLRHASH </span><span class="s16">HARRAY</span>)                                          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Clears all hash keys / values from <span class="s16">HARRAY</span>. Returns <span class="s16">HARRAY</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">HARRAYPROP </span><span class="s16">HARRAY PROP NEWVALUE</span>)                    <span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns the property <span class="s16">PROP </span>of <span class="s16">HARRAY</span>; <span class="s16">PROP </span>can have the system-defined values <span class="s11">SIZE </span>(the maximum occupancy of <span class="s16">HARRAY</span>), <span class="s11">NUMKEYS </span>(number of occupied slots), <span class="s11">OVERFLOW </span>(overflow method), <span class="s11">HASHBITSFN </span>(hashing function) and <span class="s11">EQUIVFN </span>(comparison function). Except for <span class="s11">SIZE </span>and <span class="s11">NUMKEYS</span>, a new value may be specified as <span class="s16">NEWVALUE</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">By using other values for <span class="s16">PROP</span>, the user may also set and get arbitrary property values, to associate additional information with a hash array.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">The <span class="s11">HASHBITSFN </span>or <span class="s11">EQUIVFN </span>properties can only be changed if the hash array is empty.</p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">HARRAYSIZE </span><span class="s16">HARRAY</span>)                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the number of slots in <span class="s16">HARRAY</span>. It’s equivalent to <span class="s11">(HARRAYPROP HARRAY ’SIZE)</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">REHASH </span><span class="s16">OLDHARRAY NEWHARRAY</span>)                               <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Hashes all hash keys and values in <span class="s16">OLDHARRAY </span>into <span class="s16">NEWHARRAY</span>. The two hash arrays do not have to be (and usually aren’t) the same size. Returns <span class="s16">NEWHARRAY</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MAPHASH </span><span class="s16">HARRAY MAPHFN</span>)                                    <span class="p">[Function]</span></p><p class="s16" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">MAPHFN <span class="p">is a function of two arguments. For each hash key in </span>HARRAY<span class="p">, </span>MAPHFN <span class="p">will be applied to the hash value, and the hash key.  For example:</span></p><p class="s11" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">[MAPHASH A</p><p class="s11" style="padding-left: 38pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(FUNCTION (LAMBDA (VAL KEY)</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">(if (LISTP KEY) then (PRINT VAL)]</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">will print the hash value for all hash keys that are lists. <span class="s11">MAPHASH </span>returns <span class="s16">HARRAY</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">HASHARRAYS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: the argument order for <span class="s11">CL:MAPHASH </span>is <span class="s16">MAPHFN HARRAY</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 78pt;text-indent: -24pt;text-align: left;"><span class="s12">(</span><b>DMPHASH </b>HARRAY<span class="s18">1 </span>HARRAY<span class="s18">2 </span>... HARRAY<span class="s18">N</span><span class="s12">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Prints on the primary output file <span class="s11">LOAD</span>able forms which will restore the hash-arrays contained as the values of the atoms <span class="s16">HARRAY</span><span class="s18">1</span>, <span class="s16">HARRAY</span><span class="s18">2</span>, <span class="s11">... </span><span class="s16">HARRAY</span><span class="s18">N</span>. Example: <span class="s11">(DMPHASH SYSHASHARRAY) </span>will dump the system hash-array.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">All <span class="s11">EQ </span>identities except symbols and small integers are lost by dumping and loading because <span class="s11">READ </span>will create new structure for each item. Thus if two lists contain an <span class="s11">EQ </span>substructure, when they are dumped and loaded back in, the corresponding substructures while <span class="s11">EQUAL </span>are no longer <span class="s11">EQ</span>. The <span class="s11">HORRIBLEVARS </span>file package command (Chapter 17) provides a way of dumping hash tables such that these identities are preserved.</p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Hash Overflow                                                                                                                                           </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">When a hash array becomes full, trying to add another hash key will cause the function <span class="s11">HASHOVERFLOW </span>to be called. This either enlarges the hash array, or causes the error <span class="s11">Hash table full</span>. How hash overflow is handled is determined by the value of the <span class="s11">OVERFLOW </span>property of the hash array (which can be accessed by <span class="s11">HARRAYPROP</span>).  The possibilities for the overflow method are:</p><p style="padding-top: 7pt;padding-left: 192pt;text-indent: -85pt;line-height: 93%;text-align: justify;">the symbol <span class="s11">ERROR </span>The error <span class="s11">Hash array full </span>is generated when the hash array overflows. This is the default overflow behavior for hash arrays returned by <span class="s11">HARRAY</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 192pt;text-indent: -28pt;line-height: 93%;text-align: justify;">NIL <span class="p">The array is automatically enlarged by at least a factor 1.5 every time it overflows. This is the default overflow behavior for hash arrays returned by </span>HASHARRAY<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 191pt;text-indent: -88pt;text-align: justify;">a positive integer <span class="s16">N </span>The array is enlarged to include at least <span class="s16">N </span>more slots than it currently has.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">a floating point number <span class="s16">F </span>The array is changed to include <span class="s16">F </span>times the number of</p><p style="padding-left: 191pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">current slots.</p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">a function or lambda expression <span class="s16">FN </span>Upon hash overflow, <span class="s16">FN </span>is called with the hash array as its</p><p style="padding-left: 191pt;text-indent: 0pt;line-height: 94%;text-align: justify;">argument. If <span class="s16">FN </span>returns a number, that will become the size of the array. Otherwise, the new size defaults to 1.5 times its previous size. <span class="s16">FN </span>could be used to print a message, or perform some monitor function.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><b>Note</b>: For backwards compatibility, the hash array functions accept a list whose <span class="s11">CAR </span>is the hash array, and whose <span class="s11">CDR </span>is the overflow method. In this case, the overflow method specified in the list overrides the overflow method set in the hash array. Hash array functions perform with maximum efficiency only if a direct value of <span class="s11">HASHARRAY </span>is given.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Specifying Your Own Hashing Functions                                                                                               </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In general terms, when a key is looked up in a hash array, it is converted to an integer, which is used to index into a linear array. If the key is not the same as the one found at that index, other indices are</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">tried until it the desired key is found. The value stored with that key is then returned (from <span class="s11">GETHASH</span>) or replaced (from <span class="s11">PUTHASH</span>).</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">To customize hash arrays, you’ll need to supply the “hashing function” used to convert a key to an integer and the comparison function used to compare the key found in the array with the key being looked up. For hash arrays to work correctly, any two objects which are equal according to the comparison function must “hash” to equal integers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">By default, Medley uses a hashing function that computes an integer from the internal address of a key, and use <span class="s11">EQ </span>for comparing keys. This means that if non-atoms are used as hash keys, <i>the exact same object </i>(not a copy) must be used to retrieve the hash value.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">There are some applications for which the <span class="s11">EQ </span>constraint is too restrictive. For example, it may be useful to use strings as hash keys, without the restriction that <span class="s11">EQUAL </span>but not <span class="s11">EQ </span>strings are considered to be different hash keys.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The user can override this default behavior for any hash array by specifying the functions used to compare keys and to “hash” a key to a number. This can be done by giving the <span class="s16">HASHBITSFN </span>and <span class="s16">EQUIVFN </span>arguments to <span class="s11">HASHARRAY </span>(see above).</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s16">EQUIVFN </span>argument is a function of two arguments that returns non-<span class="s11">NIL </span>when its arguments are considered equal. The <span class="s16">HASHBITSFN </span>argument is a function of one argument that produces a positive small integer (in the range [0..2<span class="s24">16 </span>- 1]) with the property that objects that are considered equal by the <span class="s16">EQUIVFN </span>produce the same hash bits.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">For an existing hash array, the function <span class="s11">HARRAYPROP </span>(see above) can be used to examine the hashing and equivalence functions as the <span class="s11">HASHBITSFN </span>and <span class="s11">EQUIVFN </span>hash array properties. These properties are read-only for non-empty hash arrays, as it makes no sense to change the equivalence relationship once some keys have been hashed.</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The following function is useful for creating hash arrays that take strings as hash keys:</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">STRINGHASHBITS </span><span class="s16">STRING</span>)                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Hashes the string <span class="s16">STRING </span>into an integer that can be used as a <span class="s11">HASHBITSFN </span>for a hash array. Strings which are <span class="s11">STREQUAL </span>hash to the same integer.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Example:</p><p class="s11" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(HASHARRAY <i>MINKEYS OVERFLOW </i>’STRINGHASHBITS ’STREQUAL)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">creates a hash array where you can use strings as hash keys.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 4pt;padding-left: 261pt;text-indent: -13pt;text-align: left;"><a name="bookmark8">NUMBERS AND ARITHMETIC FUNCTIONS</a></p></li></ol><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_013.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are four different types of numbers in Interlisp: small integers, large integers, bignums (arbitrary-size integers), and floating-point numbers. Small integers are in the range -65536 to 65535. Large integers and floating-point numbers are 32-bit quantities that are stored by “boxing” the number (see below).  Bignums are “boxed” as a series of words.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Large integers and floating-point numbers can be any full word quantity. To distinguish among the various kinds of numbers, and other Interlisp pointers, these numbers are “boxed” When a large integer or floating-point number is created (by an arithmetic operation or by <span class="s11">READ</span>), Interlisp gets a new word from “number storage” and puts the number into that word. Interlisp then passes around the pointer to that word, i.e., the “boxed number”, rather than the actual quantity itself. When a numeric function needs the actual numeric quantity, it performs the extra level of addressing to obtain the “value” of the number. This latter process is called “unboxing”. Unboxing does not use any storage, but each boxing operation uses one new word of number storage. If a computation creates many large integers or floating-point numbers, i.e., does lots of boxes, it may cause a garbage collection of large integer space, or of floating-point number space.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The following functions can be used to distinguish the different types of numbers:</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>SMALLP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">X</span>, if <span class="s16">X </span>is a small integer; <span class="s11">NIL </span>otherwise. Does not generate an error if <span class="s16">X </span>is not a number.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>FIXP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">X</span>, if <span class="s16">X </span>is an integer; <span class="s11">NIL </span>otherwise. Note that <span class="s11">FIXP </span>is true for small integers, large integers, and bignums.  Does not generate an error if <span class="s16">X </span>is not a number.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>FLOATP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a floating-point number; <span class="s11">NIL </span>otherwise. Does not give an error if <span class="s16">X </span>is not a number.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>NUMBERP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">X</span>, if <span class="s16">X </span>is a number of any type; <span class="s11">NIL </span>otherwise. Does not generate an error if <span class="s16">X </span>is not a number.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: In previous releases, <span class="s11">NUMBERP </span>was true only if (<span class="s11">FLOATP </span><span class="s16">X</span>) or (<span class="s11">FIXP </span><span class="s16">X</span>) were true. With the additon of Common Lisp ratios and complex numbers, <span class="s11">NUMBERP </span>now returns <span class="s11">T </span>for <i>all </i>number types . Code relying on the &quot;old&quot; behavior should be modified.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Each small integer has a unique representation, so <span class="s11">EQ </span>may be used to check equality. <span class="s11">EQ </span>should not be used for large integers, bignums, or floating-point numbers, <span class="s11">EQP</span>, <span class="s11">IEQP</span>, or <span class="s11">EQUAL </span>must be used instead.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>EQP </b><i>X Y</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns <span class="s11">T</span>, if <span class="s16">X </span>and <span class="s16">Y </span>are equal numbers; <span class="s11">NIL </span>otherwise. <span class="s11">EQ </span>may be used if <span class="s16">X </span>and <span class="s16">Y </span>are known to be small integers. <span class="s11">EQP </span>does not convert <span class="s16">X </span>and <span class="s16">Y </span>to integers, e.g., <span class="s11">(EQP 2000</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s11">2000.3) =&gt; NIL</span>, but it can be used to compare an integer and a floating-point number, e.g., <span class="s11">(EQP 2000 2000.0) =&gt; T</span>. <span class="s11">EQP </span>does not generate an error if <span class="s16">X </span>or <span class="s16">Y </span>are not numbers.</p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">EQP <span class="p">can also be used to compare stack pointers (see Chapter 11) and compiled code objects (see Chapter 10).</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The action taken on division by zero and floating-point overflow is determined with the following function:</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>OVERFLOW </b><i>FLG</i>)                                                 <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Sets a flag that determines the system response to arithmetic overflow (for floating-point arithmetic) and division by zero; returns the previous setting.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For integer arithmetic: If <span class="s16">FLG </span><span class="s11">= T</span>, an error occurs on division by zero. If <span class="s16">FLG </span><span class="s11">= NIL </span>or <span class="s11">0</span>, integer division by zero returns zero. Integer overflow cannot occur, because small integers are converted to bignums (see the beginning of this chapter).</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">For floating-point arithmetic: If <span class="s16">FLG </span><span class="s11">= T</span>, an error occurs on floating overflow or floating division by zero. If <span class="s16">FLG </span><span class="s11">= NIL </span>or <span class="s11">0</span>, the largest (or smallest) floating-point number is returned as the result of the overflowed computation or floating division by zero.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The default value for <span class="s11">OVERFLOW </span>is <span class="s11">T</span>, meaning an error is generated on division by zero or floating overflow.</p><h4 style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Generic Arithmetic                                                                                                                                    </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The functions in this section are “generic” arithmetic functions. If any of the arguments are floating- point numbers (see the Floating-Point Arithmetic section below), they act exactly like floating-point functions, floating all arguments and returning a floating-point number as their value. Otherwise, they act like the integer functions (see the Integer Arithmetic section below). If given a non-numeric argument, they generate an error, <span class="s11">Non-numeric arg</span>. The results of division by zero and floating- point overflow is determined by the function <span class="s11">OVERFLOW </span>(see the section above).</p><p class="s16" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>PLUS </b>X<span class="s25">1</span> X<span class="s25">2</span> ... X<span class="s25">N</span><span class="s11">)                                     </span><span class="p">[NoSpread  Function]</span></p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">X<span class="s25">1</span> <span class="s11">+ </span>X<span class="s25">2</span> <span class="s11">+ ... + </span>X<span class="s25">N</span><span class="s5">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>MINUS </b><i>X</i>)                                                      <span class="p">[Function]</span></p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">- <i>X</i></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>DIFFERENCE </b><i>X Y</i>)                                               <span class="p">[Function]</span></p><p class="s16" style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">X - Y</p><p class="s16" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>TIMES </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">)                                    </span><span class="p">[NoSpread  Function]</span></p><p class="s16" style="padding-top: 8pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">X<span class="s25">1</span> <span class="s11">* </span>X<span class="s25">2</span> <span class="s11">* ... * </span>X<span class="s25">N</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 257pt;text-indent: 0pt;text-align: left;">NUMBERS AND ARITHMETIC FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>QUOTIENT </b><i>X Y</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If <span class="s16">X </span>and <span class="s16">Y </span>are both integers, returns the integer division of <span class="s16">X </span>and <span class="s16">Y</span>. Otherwise, converts both <span class="s16">X </span>and <span class="s16">Y </span>to floating-point numbers, and does a floating-point division.</p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>REMAINDER </b><i>X Y</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">If <span class="s16">X </span>and <span class="s16">Y </span>are both integers, returns <span class="s11">(IREMAINDER </span><span class="s16">X Y</span><span class="s11">)</span>, otherwise <span class="s11">(FREMAINDER </span><span class="s16">X Y</span><span class="s11">)</span><span class="s5">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>GREATERP </b><i>X Y</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">T<span class="p">, if </span><i>X </i>&gt; <i>Y</i><span class="p">, </span>NIL <span class="p">otherwise.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>LESSP </b><i>X Y</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">T <span class="p">if </span><i>X </i>&lt; <i>Y</i><span class="p">, </span>NIL <span class="p">otherwise.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>GEQ </b><i>X Y</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">T<span class="p">, if </span><i>X </i>&gt;= <i>Y</i><span class="p">, </span>NIL <span class="p">otherwise.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>LEQ </b><i>X Y</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">T<span class="p">, if </span><i>X </i>&lt;= <i>Y</i><span class="p">, </span>NIL <span class="p">otherwise.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>ZEROP </b><i>X</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="p">The same as </span>(EQP <i>X </i>0)<span class="s5">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>MINUSP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s11">T</span>, if <span class="s16">X </span>is negative; <span class="s11">NIL </span>otherwise. Works for both integers and floating-point numbers<span class="s5">.</span></p><p class="s16" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>MIN </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">) </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the minimum of <span class="s16">X</span><span class="s25">1</span>, <span class="s16">X</span><span class="s25">2</span>, <span class="s11">..., </span><span class="s16">X</span><span class="s25">N</span>. <span class="s11">(MIN) </span>returns the value of <span class="s11">MAX.INTEGER </span>(see the Integer Arithmetic section below).</p><p class="s16" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>MAX </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">) </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the maximum of <span class="s16">X</span><span class="s25">1</span>, <span class="s16">X</span><span class="s25">2</span>, ..., <span class="s16">X</span><span class="s25">N</span>. <span class="s11">(MAX) </span>returns the value of <span class="s11">MIN.INTEGER </span>(see the Integer Arithmetic section below).</p><p class="s11" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>ABS </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s16">X </span>if <span class="s16">X </span><span class="s11">&gt; 0</span>, otherwise <span class="s11">-</span><span class="s16">X</span>.  <span class="s11">ABS </span>uses <span class="s11">GREATERP </span>and <span class="s11">MINUS </span>(not <span class="s11">IGREATERP </span>and <span class="s11">IMINUS</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Integer Arithmetic                                                                                                                                     </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The input syntax for an integer is an optional sign (+ or -) followed by a sequence of decimal digits, and terminated by a delimiting character. Integers entered with this syntax are interpreted as decimal integers. Integers in other radices can be entered as follows:</p><p class="s11" style="padding-top: 9pt;padding-left: 50pt;text-indent: 0pt;line-height: 10pt;text-align: left;">123Q</p><p class="s11" style="padding-left: 78pt;text-indent: -33pt;text-align: left;">#o123 <span class="p">If an integer is followed by the letter </span>Q<span class="p">, or preceeded by a pound sign and the letter “</span>o<span class="p">”, the digits are interpreted as an octal (base 8) integer.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 126pt;text-indent: -43pt;text-align: justify;">#b10101 <span class="p">If an integer is preceeded by a pound sign and the letter “</span>b<span class="p">”, the digits are interpreted as a binary (base 2) integer.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -38pt;text-align: justify;">#x1A90 <span class="p">If an integer is preceeded by a pound sign and the letter “</span>x<span class="p">”, the digits are interpreted as a hexadecimal (base 16) integer.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -43pt;line-height: 94%;text-align: justify;">#5r1243 <span class="p">If an integer is preceeded by a pound sign, a positive decimal integer </span>BASE<span class="p">, and the letter “</span>r<span class="p">”, the digits are interpreted as an integer in the base </span>BASE<span class="p">. For example, </span>#8r123 = 123Q<span class="p">, and </span>#16r12A3 = #x12A3<span class="p">. When typing a number in a radix above ten, the uppercase letters A through Z can be used as the digits after 9 (but there is no digit above Z, so it is not possible to type all base-99 digits).</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Medley keeps no record of how you typed a number, so <span class="s11">77Q </span>and <span class="s11">63 </span>both correspond to the same integer, and are indistinguishable internally. The function <span class="s11">RADIX </span>(see Chapter 25), sets the radix used to print integers.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">PACK <span class="p">and </span>MKATOM <span class="p">create numbers when given a sequence of characters observing the above syntax,</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">e.g. <span class="s11">(PACK ’(1 2 Q)) =&gt; 10</span>. Integers are also created as a result of arithmetic operations.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The range of integers of various types is implementation-dependent. This information is accessible to you through the following variables:</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">MIN.SMALLP                                                     <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">MAX.SMALLP                                                     <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">The smallest / largest possible small integer.</p><p class="s15" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">MIN.FIXP                                                       <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">MAX.FIXP                                                       <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">The smallest / largest possible large integer.</p><p class="s15" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">MIN.INTEGER                                                    <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">MAX.INTEGER                                                    <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The value of <span class="s11">MAX.INTEGER </span>and <span class="s11">MIN.INTEGER </span>are two special system datatypes. For some algorithms, it is useful to have an integer that is larger than any other integer. Therefore, the values of <span class="s11">MAX.INTEGER </span>and <span class="s11">MIN.INTEGER </span>are two special data types; the value of <span class="s11">MAX.INTEGER </span>is <span class="s11">GREATERP </span>than any other integer, and the value of <span class="s11">MIN.INTEGER </span>is <span class="s11">LESSP </span>than any other integer. Trying to do arithmetic using these special bignums, other than comparison, will cause an error.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">All of the functions described below work on integers. Unless specified otherwise, if given a floating- point number, they first convert the number to an integer by truncating the fractional bits, e.g., <span class="s11">(IPLUS 2.3 3.8) = 5</span>; if given a non-numeric argument, they generate an error, <span class="s11">Non-numeric arg</span>.</p><p class="s16" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>IPLUS </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">)                                    </span><span class="p">[NoSpread Function]</span></p><p class="s16" style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: left;"><span class="p">Returns the sum </span>X<span class="s25">1</span> <span class="s11">+ </span>X<span class="s25">2</span> <span class="s11">+ ... + </span>X<span class="s25">N.</span> <span class="s11">(IPLUS) = 0</span><span class="p">.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>IMINUS </b><i>X</i>)                                                     <span class="p">[Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">-<i>X</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 257pt;text-indent: 0pt;text-align: left;">NUMBERS AND ARITHMETIC FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>IDIFFERENCE </b><i>X Y</i>) <span class="p">[Function]</span></p><p class="s16" style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">X <span class="s11">- </span>Y</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ADD1 </b><i>X</i>) <span class="p">[Function]</span></p><p class="s16" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">X <span class="s11">+ 1</span></p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>SUB1 </b><i>X</i>) <span class="p">[Function]</span></p><p class="s16" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">X <span class="s11">- 1</span></p><p class="s16" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s11">(</span><b>ITIMES </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">) </span><span class="p">[NoSpread Function]</span></p><p class="s16" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: left;"><span class="p">Returns the product </span>X<span class="s25">1</span> <span class="s11">* </span>X<span class="s25">2</span> <span class="s11">* ... * </span>X<span class="s25">N</span><span class="p">.  </span><span class="s11">(ITIMES) = 1</span><span class="p">.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>IQUOTIENT </b><i>X Y</i>) <span class="p">[Function]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">X <span class="s11">/ </span>Y <span class="p">truncated. Examples:</span></p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(IQUOTIENT 3 2) =&gt; 1</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(IQUOTIENT -3 2) =&gt; -1</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If <span class="s16">Y </span>is zero, the result is determined by the function <span class="s11">OVERFLOW </span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>IREMAINDER </b><i>X Y</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the remainder when <span class="s16">X </span>is divided by <span class="s16">Y</span>. Example:</p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(IREMAINDER 5 2) =&gt; 1</p><p class="s11" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>IMOD </b><i>X N</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Computes the integer modulus of <span class="s16">X </span>mod <span class="s16">N</span>; this differs from <span class="s11">IREMAINDER </span>in that the result is always a non-negative integer in the range [0,<span class="s16">N</span>).</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>IGREATERP </b><i>X Y</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">T<span class="p">, if </span><i>X </i>&gt; <i>Y</i><span class="p">; </span>NIL <span class="p">otherwise.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>ILESSP </b><i>X Y</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">T<span class="p">, if </span><i>X </i>&lt; <i>Y</i><span class="p">; </span>NIL <span class="p">otherwise.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>IGEQ </b><i>X Y</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">T<span class="p">, if </span><i>X </i>&gt;= <i>Y</i><span class="p">; </span>NIL <span class="p">otherwise.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>ILEQ </b><i>X Y</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">T<span class="p">, if </span><i>X </i>&lt;= <i>Y</i><span class="p">; </span>NIL <span class="p">otherwise.</span></p><p class="s16" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s11">(</span><b>IMIN </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">) </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the minimum of <span class="s16">X</span><span class="s25">1</span>, <span class="s16">X</span><span class="s25">2</span>, <span class="s11">..., </span><span class="s16">X</span><span class="s25">N</span>. <span class="s11">(IMIN) </span>returns the largest possible large integer, the value of <span class="s11">MAX.INTEGER</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>IMAX </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">)                                     </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns the maximum of <span class="s16">X</span><span class="s25">1</span>, <span class="s16">X</span><span class="s25">2</span>, <span class="s11">..., </span><span class="s16">X</span><span class="s25">N</span>. <span class="s11">(IMAX) </span>returns the smallest possible large integer, the value of <span class="s11">MIN.INTEGER</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>IEQP </b><i>X Y</i>)                                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns <span class="s11">T </span>if <span class="s16">X </span>and <span class="s16">Y </span>are equal integers; <span class="s11">NIL </span>otherwise. Note that <span class="s11">EQ </span>may be used if <span class="s16">X </span>and <span class="s16">Y </span>are known to be small integers. <span class="s11">IEQP </span>converts <span class="s16">X </span>and <span class="s16">Y </span>to integers, e.g., <span class="s11">(IEQP 2000 2000.3) =&gt; T</span>.</p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FIX </b><i>N</i>)                                                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">N </span>is an integer, returns <span class="s16">N</span>. Otherwise, converts <span class="s16">N </span>to an integer by truncating fractional bits For example, <span class="s11">(FIX 2.3) =&gt; 2</span>, <span class="s11">(FIX -1.7) =&gt; -1</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Since <span class="s11">FIX </span>is also a programmer’s assistant command (see Chapter 13), typing <span class="s11">FIX </span>directly to a Medley executive will not cause the function <span class="s11">FIX </span>to be called.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FIXR </b><i>N</i>)                                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">N </span>is an integer, returns <span class="s16">N</span>. Otherwise, converts <span class="s16">N </span>to an integer by rounding. <span class="s11">FIXR </span>will round towards the even number if <span class="s16">N </span>is exactly half way between two integers. For example, <span class="s11">(FIXR 2.3) =&gt; 2</span>, <span class="s11">(FIXR -1.7) =&gt; -2</span>, <span class="s11">(FIXR 3.5) =&gt; 4)</span>.</p><p class="s16" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>GCD </b>N<span class="s25">1</span> N<span class="s25">2</span><span class="s11">)                                                     </span><span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the greatest common divisor of <span class="s16">N</span><span class="s25">1</span><span class="s16"> </span>and <span class="s16">N</span><span class="s25">2</span>, <span class="s11">(GCD 72 64)=8</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Logical Arithmetic Functions                                                                                                                   </h4><p class="s16" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>LOGAND </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">)                                   </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns the logical <span class="s11">AND </span>of all its arguments, as an integer. Example:</p><p class="s11" style="padding-top: 4pt;padding-left: 161pt;text-indent: 0pt;text-align: left;">(LOGAND 7 5 6) =&gt; 4</p><p class="s16" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>LOGOR </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">)                                    </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns the logical <span class="s11">OR </span>of all its arguments, as an integer. Example:</p><p class="s11" style="padding-top: 4pt;padding-left: 161pt;text-indent: 0pt;text-align: left;">(LOGOR 1 3 9) =&gt; 11</p><p class="s16" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>LOGXOR </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">)                                   </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns the logical exclusive <span class="s11">OR </span>of its arguments, as an integer. Example:</p><p class="s11" style="padding-top: 4pt;padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LOGXOR 11 5) =&gt; 14</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LOGXOR 11 5 9) = (LOGXOR 14 9) =&gt; 7</p><p class="s11" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>LSH </b><i>X N</i>)                                                      <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(Arithmetic) “Left Shift.” Returns <span class="s16">X </span>shifted left <span class="s16">N </span>places, with the sign bit unaffected. <span class="s16">X</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">can be positive or negative. If <span class="s16">N </span>is negative, <span class="s16">X </span>is shifted right <span class="s11">-</span><span class="s16">N </span>places.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 257pt;text-indent: 0pt;text-align: left;">NUMBERS AND ARITHMETIC FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>RSH </b><i>X N</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">(Arithmetic) “Right Shift.” Returns <span class="s16">X </span>shifted right <span class="s16">N </span>places, with the sign bit unaffected, and copies of the sign bit shifted into the leftmost bit. <span class="s16">X </span>can be positive or negative. If <span class="s16">N </span>is negative, <span class="s16">X </span>is shifted left -<span class="s16">N </span>places.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><b>Warning: </b>Be careful if using <span class="s11">RSH </span>to simulate division; <span class="s11">RSH</span>ing a negative number isn’t the same as dividing by a power of two.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(<b>LLSH </b><i>X N</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(<b>LRSH </b><i>X N</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">“Logical Left Shift” and “Logical Right Shift”. The difference between a logical and arithmetic right shift lies in the treatment of the sign bit. Logical shifting treats it just like any other bit; arithmetic shifting will not change it, and will “propagate” rightward when actually shifting rightwards. Note that shifting (arithmetic) a negative number “all the way” to the right yields <span class="s11">-1</span>, not <span class="s11">0</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: <span class="s11">LLSH </span>and <span class="s11">LRSH </span>always operate mod-2<span class="s24">32 </span>arithmetic. Passing a bignum to either of these will cause an error. <span class="s11">LRSH </span>of negative numbers will shift 0s into the high bits.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>INTEGERLENGTH </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns the number of bits needed to represent <span class="s16">X</span>. This is equivalent to:</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">1+floor[log2[abs[<i>X</i>]]]<span class="p">. </span>(INTEGERLENGTH 0) = 0<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>POWEROFTWOP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns non-<span class="s11">NIL </span>if <span class="s16">X </span>(coerced to an integer) is a power of two.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>EVENP </b><i>X Y</i>) <span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If <span class="s16">Y </span>is not given, equivalent to <span class="s11">(ZEROP (IMOD </span><span class="s16">X </span><span class="s11">2))</span>; otherwise equivalent to <span class="s11">(ZEROP (IMOD X Y))</span><span class="s5">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ODDP </b><i>N MODULUS</i>) <span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Equivalent to <span class="s11">(NOT (EVENP N MODULUS))</span>. <span class="s16">MODULUS </span>defaults to 2.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>LOGNOT </b><i>N</i>) <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Logical negation of the bits in <span class="s16">N</span>. Equivalent to <span class="s11">(LOGXOR </span><span class="s16">N </span><span class="s11">-1)</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>BITTEST </b><i>N MASK</i>) <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">T </span>if any of the bits in <span class="s16">MASK </span>are on in the number <span class="s16">N</span>. Equivalent to <span class="s11">(NOT (ZEROP (LOGAND </span><span class="s16">N MASK</span><span class="s11">)))</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>BITCLEAR </b><i>N MASK</i>) <span class="p">[Macro]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="p">Turns off bits from </span>MASK <span class="p">in </span>N<span class="p">. Equivalent to </span><span class="s11">(LOGAND </span>N <span class="s11">(LOGNOT </span>MASK<span class="s11">))</span><span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>BITSET </b><i>N MASK</i>) <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Turns on the bits from <span class="s16">MASK </span>in <span class="s16">N</span>. Equivalent to <span class="s11">(LOGOR </span><span class="s16">N MASK</span><span class="s11">)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>MASK.1’S </b><i>POSITION SIZE</i>)                                         <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns a bit-mask with <span class="s16">SIZE </span>one-bits starting with the bit at <span class="s16">POSITION</span>. Equivalent to</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(LLSH (SUB1 (EXPT 2 <i>SIZE</i>)) <i>POSITION</i>)<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>MASK.0’S </b><i>POSITION SIZE</i>)                                         <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns a bit-mask with all one bits, except for <span class="s16">SIZE </span>bits starting at <span class="s16">POSITION</span>. Equivalent to <span class="s11">(LOGNOT (MASK.1’S </span><span class="s16">POSITION SIZE</span><span class="s11">))</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>LOADBYTE </b><i>N POS SIZE</i>)                                          <span class="p">[Function]</span></p><p class="s16" style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 106%;text-align: left;"><span class="p">Extracts </span>SIZE <span class="p">bits from </span>N<span class="p">, starting at position </span>POS<span class="p">. Equivalent to (</span><span class="s11">LOGAND (RSH </span>N POS<span class="s11">) (MASK.1’S 0 </span>SIZE<span class="s11">))</span><span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>DEPOSITBYTE </b><i>N POS SIZE VAL</i>)                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Insert <span class="s16">SIZE </span>bits of <span class="s16">VAL </span>at position <span class="s16">POS </span>into <span class="s16">N</span>, returning the result.  Equivalent to</p><p class="s11" style="padding-top: 5pt;padding-left: 161pt;text-indent: 0pt;line-height: 88%;text-align: center;">(LOGOR (BITCLEAR <i>N </i>(MASK.1’S <i>POS SIZE</i>)) (LSH (LOGAND <i>VAL </i>(MASK.1’S 0 <i>SIZE</i>))</p><p class="s16" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">POS<span class="s11">))</span></p><p class="s11" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>ROT </b><i>X N FIELDSIZE</i>)                                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">“Rotate bits in field”. It performs a bitwise left-rotation of the integer <span class="s16">X</span>, by <span class="s16">N </span>places, within a field of <span class="s16">FIELDSIZE </span>bits wide. Bits being shifted out of the position selected by <span class="s11">(EXPT 2 (SUB1 </span><span class="s16">FIELDSIZE</span><span class="s11">)) </span>will flow into the “units” position.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">The notions of position and size can be combined to make up a “byte specifier”, which is constructed by the macro <span class="s11">BYTE </span>[note reversal of arguments as compared with the above functions]:</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>BYTE </b><i>SIZE POSITION</i>)                                             <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Constructs and returns a “byte specifier” containing <span class="s16">SIZE </span>and <span class="s16">POSITION</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>BYTESIZE </b><i>BYTESPEC</i>)                                              <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the <span class="s11">SIZE </span>componant of the “byte specifier” <span class="s16">BYTESPEC</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>BYTEPOSITION </b><i>BYTESPEC</i>)                                          <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the <span class="s11">POSITION </span>componant of the “byte specifier” <span class="s16">BYTESPEC</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>LDB </b><i>BYTESPEC VAL</i>)                                               <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Equivalent to</p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">(LOADBYTE <i>VAL </i>(BYTEPOSITION <i>BYTESPEC</i>)(BYTESIZE <i>BYTESPEC</i>))</p><p class="s11" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>DPB </b><i>N BYTESPEC VAL</i>)                                             <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Equivalent to</p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">(DEPOSITBYTE <i>VAL </i>(BYTEPOSITION <i>BYTESPEC</i>)(BYTESIZE <i>BYTESPEC</i>) <i>N</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 257pt;text-indent: 0pt;text-align: left;">NUMBERS AND ARITHMETIC FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 30pt;text-indent: -24pt;text-align: left;">Floating-Point Arithmetic                                                                                                                         </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">A floating-point number is input as a signed integer, followed by a decimal point, and another sequence of digits called the fraction, followed by an exponent (represented by <span class="s11">E </span>followed by a signed integer) and terminated by a delimiter.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Both signs are optional, and either the fraction following the decimal point, or the integer preceding the decimal point may be omitted. One or the other of the decimal point or exponent may also be omitted, but at least one of them must be present to distinguish a floating-point number from an integer.  For example, the following will be recognized as floating-point numbers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:111.5pt" cellspacing="0"><tr style="height:12pt"><td style="width:32pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">5.</p></td><td style="width:49pt"><p class="s26" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">5.00</p></td><td style="width:40pt"><p class="s26" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">5.01</p></td><td style="width:51pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">.3</p></td></tr><tr style="height:12pt"><td style="width:32pt"><p class="s26" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">5E2</p></td><td style="width:49pt"><p class="s26" style="padding-top: 1pt;padding-left: 13pt;text-indent: 0pt;line-height: 9pt;text-align: left;">5.1E2</p></td><td style="width:40pt"><p class="s26" style="padding-top: 1pt;padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">5E-3</p></td><td style="width:51pt"><p class="s26" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">-5.2E+6</p></td></tr></table><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Floating-point numbers are printed using the format control specified by the function <span class="s11">FLTFMT </span>(see Chapter 25). <span class="s11">FLTFMT </span>is initialized to <span class="s11">T</span>, or free format. For example, the above floating-point numbers would be printed free format as:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:111.5pt" cellspacing="0"><tr style="height:12pt"><td style="width:38pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">5.0</p></td><td style="width:43pt"><p class="s26" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">5.0</p></td><td style="width:40pt"><p class="s26" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">5.01</p></td><td style="width:46pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">.3</p></td></tr><tr style="height:12pt"><td style="width:38pt"><p class="s26" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">500.0</p></td><td style="width:43pt"><p class="s26" style="padding-top: 1pt;padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">510.0</p></td><td style="width:40pt"><p class="s26" style="padding-top: 1pt;padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">.005</p></td><td style="width:46pt"><p class="s26" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">-5.2E6</p></td></tr></table><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Floating-point numbers are created by the reader when a <span class="s11">“.</span>” or an <span class="s11">E </span>appears in a number, e.g., <span class="s11">1000 </span>is an integer, <span class="s11">1000. </span>a floating-point number, as are <span class="s11">1E3 </span>and <span class="s11">1.E3</span>. Note that <span class="s11">1000D</span>, <span class="s11">1000F</span>, and <span class="s11">1E3D </span>are perfectly legal literal atoms. Floating-point numbers are also created by <span class="s11">PACK </span>and <span class="s11">MKATOM</span>, and as a result of arithmetic operations.</p><p class="s11" style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">PRINTNUM <span class="p">(see Chapter 25) permits greater control over the printed appearance of floating-point numbers, allowing such things as left-justification, suppression of trailing decimals, etc.</span></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The floating-point number range is stored in the following variables:</p><p class="s15" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MIN.FLOAT <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The smallest possible floating-point number.</p><p class="s15" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MAX.FLOAT <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The largest possible floating-point number.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">All of the functions described below work on floating-point numbers. Unless specified otherwise, if given an integer, they first convert the number to a floating-point number, e.g., <span class="s11">(FPLUS 1 2.3)</span></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">&lt;=&gt; (FPLUS 1.0 2.3) =&gt; 3.3<span class="p">; if given a non-numeric argument, they generate an error, </span>Non- numeric arg<span class="p">.</span></p><p class="s16" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s11">(</span><b>FPLUS </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">) </span><span class="p">[NoSpread Function]</span></p><p class="s16" style="padding-top: 8pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">X<span class="s25">1</span> <span class="s11">+ </span>X<span class="s25">2</span> <span class="s11">+ ... + </span>X<span class="s25">N</span></p><p class="s11" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FMINUS </b><i>X</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">- <i>X</i></p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>FDIFFERENCE </b><i>X Y</i>) <span class="p">[Function]</span></p><p class="s16" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">X <span class="s11">- </span>Y</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>FTIMES </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">)                                   </span><span class="p">[NoSpread Function]</span></p><p class="s16" style="padding-top: 8pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">X<span class="s25">1</span> <span class="s11">* </span>X<span class="s25">2</span> <span class="s11">* ... * </span>X<span class="s25">N</span></p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FQUOTIENT </b><i>X Y</i>)                                                <span class="p">[Function]</span></p><p class="s16" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">X <span class="s11">/ </span>Y<span class="s5">.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The results of division by zero and floating-point overflow is determined by the function</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">OVERFLOW<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FREMAINDER </b><i>X Y</i>)                                               <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the remainder when <span class="s16">X </span>is divided by <span class="s16">Y</span>. Equivalent to:</p><p class="s11" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(FDIFFERENCE <i>X </i>(FTIMES <i>Y </i>(FIX (FQUOTIENT <i>X Y</i>))))</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Example:</p><p class="s11" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">(FREMAINDER 7.5 2.3) =&gt; 0.6</p><p class="s11" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FGREATERP </b><i>X Y</i>)                                                <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">T<span class="p">, if </span><i>X </i>&gt; <i>Y</i><span class="p">, </span>NIL <span class="p">otherwise.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FLESSP </b><i>X Y</i>)                                                   <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">T<span class="p">, if </span><i>X </i>&lt; <i>Y</i><span class="p">, </span>NIL <span class="p">otherwise.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FEQP </b><i>X Y</i>)                                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns <span class="s11">T </span>if <span class="s16">X </span>and <span class="s16">Y </span>are equal floating-point numbers; <span class="s11">NIL </span>otherwise. <span class="s11">FEQP </span>converts <span class="s16">X</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">and <span class="s16">Y </span>to floating-point numbers.</p><p class="s16" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>FMIN </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">)                                     </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the minimum of <span class="s16">X</span><span class="s25">1</span>, <span class="s16">X</span><span class="s25">2</span>, <span class="s11">..., </span><span class="s16">X</span><span class="s25">N</span>. <span class="s11">(FMIN) </span>returns the largest possible floating- point number, the value of <span class="s11">MAX.FLOAT</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>FMAX </b>X<span class="s25">1</span> X<span class="s25">2</span> <span class="s11">... </span>X<span class="s25">N</span><span class="s11">)                                     </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the maximum of <span class="s16">X</span><span class="s25">1</span>, <span class="s16">X</span><span class="s25">2</span>, <span class="s11">..., </span><span class="s16">X</span><span class="s25">N</span>. <span class="s11">(FMAX) </span>returns the smallest possible floating- point number, the value of <span class="s11">MIN.FLOAT</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FLOAT </b><i>X</i>)                                                      <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Converts <span class="s16">X </span>to a floating-point number. Example:</p><p class="s11" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">(FLOAT 0) =&gt; 0.0</p><h4 style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Transcendental Arithmetic Functions                                                                                                     </h4><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>EXPT </b><i>A N</i>)                                                     <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">A</span><span class="s27">N</span>. If <span class="s16">A </span>is an integer and <span class="s16">N </span>is a positive integer, returns an integer, e.g, <span class="s11">(EXPT 3 4) =&gt; 81</span>, otherwise returns a floating-point number. If <span class="s16">A </span>is negative and <span class="s16">N </span>fractional,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 257pt;text-indent: 0pt;text-align: left;">NUMBERS AND ARITHMETIC FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">generates the error, <span class="s11">Illegal exponentiation</span>. If <span class="s16">N </span>is floating and either too large or too small, generates the error, <span class="s11">Value out of range expt</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>SQRT </b><i>N</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the square root of <span class="s16">N </span>as a floating-point number. <span class="s16">N </span>may be fixed or floating-point. Generates an error if <span class="s16">N </span>is negative.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>LOG </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the natural logarithm of <span class="s16">X </span>as a floating-point number. <span class="s16">X </span>can be integer or floating-point.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>ANTILOG </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the floating-point number whose logarithm is <span class="s16">X</span>. <span class="s16">X </span>can be integer or floating- point.  Example:</p><p class="s11" style="padding-top: 4pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">(ANTILOG 1) = e =&gt; 2.71828...</p><p class="s11" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>SIN </b><i>X RADIANSFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the sine of <span class="s16">X </span>as a floating-point number. <span class="s16">X </span>is in degrees unless <span class="s16">RADIANSFLG </span><span class="s11">= T</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>COS </b><i>X RADIANSFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">SIN</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>TAN </b><i>X RADIANSFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">SIN</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ARCSIN </b><i>X RADIANSFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The value of <span class="s11">ARCSIN </span>is a floating-point number, and is in degrees unless <span class="s16">RADIANSFLG </span><span class="s11">=</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">T<span class="p">. In other words, if </span>(ARCSIN <i>X RADIANSFLG</i>) = Z <span class="p">then </span>(SIN Z <i>RADIANSFLG</i>) =</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s16">X</span>. The range of the value of <span class="s11">ARCSIN </span>is -90 to +90 for degrees, <span class="s11">-</span><span class="s19"></span><span class="s21"> </span>/ 2 to <span class="s19"></span><span class="s11">/2 </span>for radians. <span class="s16">X</span></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">must be a number between -1 and 1.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>ARCCOS </b><i>X RADIANSFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Similar to <span class="s11">ARCSIN</span>. Range is <span class="s11">0 </span>to <span class="s11">180</span>, 0 to <span class="s19"></span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ARCTAN </b><i>X RADIANSFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Similar to <span class="s11">ARCSIN</span>. Range is <span class="s11">0 </span>to <span class="s11">180</span>, 0 to <span class="s19"></span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ARCTAN2 </b><i>Y X RADIANSFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Computes <span class="s11">(ARCTAN (FQUOTIENT </span><span class="s16">Y X</span><span class="s11">) </span><span class="s16">RADIANSFLG</span><span class="s11">)</span>, and returns a corresponding value in the range <span class="s11">-180 </span>to <span class="s11">180 </span>(or <span class="s11">-</span><span class="s19"></span><span class="s21"> </span>to <span class="s19"></span>), i.e. the result is in the proper quadrant as determined by the signs of <span class="s16">X </span>and <span class="s16">Y</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Generating Random Numbers                                                                                                                 </h4><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>RAND </b><i>LOWER UPPER</i>)                                             <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Returns a pseudo-random number between <span class="s16">LOWER </span>and <span class="s16">UPPER </span>inclusive, i.e., <span class="s11">RAND </span>can be used to generate a sequence of random numbers. If both limits are integers, the value of <span class="s11">RAND </span>is an integer, otherwise it is a floating-point number. The algorithm is completely deterministic, i.e., given the same initial state, <span class="s11">RAND </span>produces the same sequence of values. The internal state of <span class="s11">RAND </span>is initialized using the function <span class="s11">RANDSET</span>.</p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>RANDSET </b><i>X</i>)                                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns the internal state of <span class="s11">RAND</span>. If <span class="s16">X </span><span class="s11">= NIL</span>, just returns the current state. If <span class="s16">X </span><span class="s11">= T</span>, <span class="s11">RAND </span>is initialized using the clocks, and <span class="s11">RANDSET </span>returns the new state. Otherwise, <span class="s16">X </span>is interpreted as a previous internal state, i.e., a value of <span class="s11">RANDSET</span>, and is used to reset <span class="s11">RAND</span>. For example,</p><p class="s19" style="padding-top: 2pt;padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(SETQ OLDSTATE (RANDSET))</span></p><p class="s11" style="padding-left: 167pt;text-indent: 0pt;line-height: 9pt;text-align: left;">...</p><p class="s19" style="padding-left: 167pt;text-indent: -6pt;line-height: 88%;text-align: left;"><span class="s11">(for X from 1 to 10 do (PRIN1 (RAND 1 10))) 2847592748NIL</span></p><p class="s19" style="padding-left: 161pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(RANDSET OLDSTATE)</span></p><p class="s11" style="padding-left: 167pt;text-indent: 0pt;line-height: 9pt;text-align: left;">...</p><p class="s19" style="padding-left: 167pt;text-indent: -6pt;line-height: 88%;text-align: left;"><span class="s11">(for X from 1 to 10 do (PRIN1 (RAND 1 10))) 2847592748NIL</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><a name="bookmark9">RECORDS AND DATA STRUCTURES</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_014.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Hiding the details of your code makes it more readable, and lets you program more efficiently. Data structures are a good example: You’re better off if you can say “Fetch me the <span class="s28">SPEED </span>field from this <span class="s28">AIRPLANE</span>” rather than having to say <span class="s28">(CAR (CDDDR (CADR AIRPLANE)))</span>. You can declare data structures used by your programs, then work with field names rather than access details. Using the declarations, Medley performs the access / storage operations you request. If you change a data structure’s declaration, your programs automatically adjust.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You describe the format of a data structure (record) by making a “record declaration” (see the Record Declarations section below). The record declaration is a description of the record, associating names with its various parts, or “fields”.  For example, the record declaration</p><p class="s28" style="padding-top: 6pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">(RECORD MSG (FROM TO TEXT))</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">describes a data structure called <span class="s28">MSG</span>, that has three fields: <span class="s28">FROM</span>, <span class="s28">TO</span>, and <span class="s28">TEXT</span>. You can refer to these fields by name, to get their values or to store new values into them, by using <span class="s28">FETCH </span>and <span class="s28">REPLACE</span>:</p><p class="s28" style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(fetch (MSG FROM)of MYMSG)</p><p class="s28" style="padding-left: 66pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(replace (MSG TO) of MYMSG with “John Doe”)</p><p style="padding-top: 4pt;padding-left: 66pt;text-indent: -33pt;line-height: 139%;text-align: left;">You create new <span class="s28">MSG</span>s with <span class="s28">CREATE</span>: <span class="s28">(SETQ MYMSG (create MSG))</span></p><p style="padding-top: 1pt;padding-left: 32pt;text-indent: 0pt;text-align: justify;">and <span class="s28">TYPE? </span>tells you whether some object is a <span class="s28">MSG</span>:</p><p class="s28" style="padding-top: 4pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">(IF (TYPE? MSG THIS-THING) then (SEND-MSG THIS-THING))</p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">So far we’ve said nothing about <i>how </i>your <span class="s28">MSG </span>is represented—when you’re writing <span class="s28">FETCH</span>es and <span class="s28">REPLACE</span>s, it doesn’t matter. But you <i>can </i>control the representation: The symbol <span class="s28">RECORD </span>in the declaration above causes each <span class="s28">MSG </span>to be represented as a list. There are a number of options, up to creating a completely new Lisp data type; each has its own specifier symbol, and they’re described in detail below.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The record package is implemented using DWIM and CLISP, so it will do spelling correction on field names, record types, etc. Record operations are translated using all CLISP declarations in effect (standard / fast / undoable).</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The file manager’s <span class="s28">RECORDS </span>command lets you give record declarations (see Chapter 17), and <span class="s28">FILES? </span>and</p><p class="s28" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">CLEANUP <span class="p">will tell you about record declarations that need to be dumped.</span></p><h4 style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">FETCH and REPLACE                                                                                                                               </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The fields of a record are accessed and changed with <span class="s28">FETCH </span>and <span class="s28">REPLACE</span>. If <span class="s28">X </span>is a <span class="s28">MSG </span>data structure, <span class="s28">(fetch FROM of X) </span>will return the value of the <span class="s28">FROM </span>field of <span class="s28">X</span>, and <span class="s28">(replace FROM of X with Y) </span>will replace this field with the value of <span class="s28">Y</span>. In general, the value of a <span class="s28">REPLACE </span>operation is the same as the value stored into the field.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note that <span class="s28">(fetch FROM of X) </span>assumes that <span class="s28">X </span>is an instance of the record <span class="s28">MSG</span>—the interpretation of <span class="s28">(fetch FROM of X) </span>never depends on the <i>value </i>of <span class="s28">X</span>. If <span class="s28">X </span>is not a <span class="s28">MSG</span>, this may produce incorrect results.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If there is another record declaration, <span class="s28">(RECORD REPLY (TEXT RESPONSE))</span>, then <span class="s28">(fetch TEXT of X) </span>is ambiguous, because <span class="s28">X </span>could be either a <span class="s28">MSG </span>or a <span class="s28">REPLY </span>record. In this case, an error will occur, <span class="s28">Ambiguous record field</span>. To clarify this, give <span class="s28">FETCH </span>and <span class="s28">REPLACE </span>a list for their “field” argument: <span class="s28">(fetch (MSG TEXT) of X) </span>will fetch the <span class="s28">TEXT </span>field of a <span class="s28">MSG </span>record.  If a field has an <i>identical </i>interpretation in two declarations, e.g., if the field</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">TEXT <span class="p">occurred in the same location within the declarations of </span>MSG <span class="p">and </span>REPLY<span class="p">, then </span>(fetch TEXT of X) <span class="p">would</span></p><p class="s9" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">not <span class="p">be ambiguous.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If there’s a conflict, “user” record declarations take precedence over “system” record declarations. System records are declared by including <span class="s28">(SYSTEM) </span>in the declaration (see the Record Declarations section below). All of the records defined in the standard Medley system are system records.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Another complication can occur if the fields of a record are themselves records. The fields of a record can be further broken down into sub-fields by a “subdeclaration” within the record declaration. For example,</p><p class="s28" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(RECORD NODE (POSITION . LABEL) (RECORD POSITION (XLOC . YLOC)))</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">lets you access the <span class="s28">POSITION </span>field with <span class="s28">(fetch POSITION of X)</span>, or its subfield <span class="s28">XLOC </span>with <span class="s28">(fetch XLOC of X)</span>.</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">You may also declare that field name in a <i>separate </i>record declaration. For instance, the <span class="s28">TEXT </span>field in the</p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">MSG <span class="p">and </span>REPLY <span class="p">records above may be subdivided with the seperate record declaration </span>(RECORD TEXT (HEADER TXT))<span class="p">. You get to fields of subfields (to any level of nesting) by specifying the “data path” as a list of record / field names, where there is some path from each record to the next in the list.  For instance,</span></p><p class="s28" style="padding-top: 4pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">(fetch (MSG TEXT HEADER) of X)</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">treats <span class="s28">X </span>as a <span class="s28">MSG </span>record, fetches its <span class="s28">TEXT </span>field, and fetches <i>its </i><span class="s28">HEADER </span>field. You only need to give enough of the data path to disambiguate it. In this case, <span class="s28">(fetch (MSG HEADER) of X) </span>is sufficient: Medley searches among all current record declarations for a path from each name to the next, considering first local declarations (see Chapter 21) and then global ones. Of course, if you had two records with <span class="s28">HEADER </span>fields, you get an <span class="s28">Ambiguous data path </span>error.</p><p class="s28" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">FETCH <span class="p">and </span>REPLACE <span class="p">are translated using the CLISP declarations in effect (see Chapter 21). </span>FFETCH <span class="p">and</span></p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">FREPLACE <span class="p">are fast versions that don’t do any type checking. </span>/REPLACE <span class="p">insures undoable declarations.</span></p><h4 style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Record Declarations                                                                                                                                 </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">You define records by evaluating declarations of the form:</p><p class="s28" style="padding-top: 4pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">(<span class="s16">RECORD-TYPE RECORD-NAME RECORD-FIELDS </span>. <span class="s16">RECORD-TAIL</span>)</p><p class="s16" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">RECORD-TYPE <span class="p">specifies the “type” of data you’re declaring, and controls how instances will be stored internally. The different record types are described below.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s16">RECORD-NAME </span>is a symbol used to identify the record declaration for <span class="s28">CREATE</span>, <span class="s28">TYPE?</span>, <span class="s28">FETCH </span>and <span class="s28">REPLACE</span>, and dumping to files (see Chapter 17). <span class="s28">DATATYPE </span>and <span class="s28">TYPERECORD </span>declarations also use <span class="s16">RECORD-NAME </span>to identify the data structure (as described below).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">RECORD-FIELDS </span>describes the structure of the record. Its exact interpretation varies with <span class="s28">RECORD-TYPE</span>. Generally, it names the fields within the record that can be accessed with <span class="s28">FETCH </span>and <span class="s28">REPLACE</span>.</p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">RECORD-TAIL <span class="p">is an optional list where you can specify default values for record fields, special </span><span class="s28">CREATE</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">and <span class="s28">TYPE? </span>forms, and subdeclarations (described below).</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Record declarations are Lisp programs, and could be included in functions, changing a record declaration at run-time. <i>Don’t do it. </i>You risk creating a structure with one declaration, and trying to fetch from it with another—complete chaos results. If you need to change record declarations dynamically, consider using association lists or property lists.</p><p class="s6" style="padding-top: 10pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Record Types</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 281pt;text-indent: 0pt;text-align: left;">RECORDS AND DATA STRUCTURES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The <span class="s16">RECORD-TYPE </span>field of the record declaration specifies how the data object is created, and how the various record fields are accessed. Depending on the record type, the record fields may be stored in a list, or in an array, or on a symbol’s property list. The following record types are defined:</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">RECORD <span class="p">[Record Type]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The fields of a <span class="s28">RECORD </span>are kept in a list. <span class="s16">RECORD-FIELDS </span>is a list; each non-<span class="s28">NIL </span>symbol is a field-name to be associated with the corresponding element or tail of a list structure. For example, with the declaration <span class="s28">(RECORD MSG (FROM TO . TEXT))</span>, <span class="s28">(fetch FROM of X) </span>translates as <span class="s28">(CAR X)</span>.</p><p class="s28" style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">NIL <span class="p">can be used as a place marker for an unnamed field, e.g., </span>(A NIL B) <span class="p">describes a three element list, with </span>B <span class="p">corresponding to the third element.  A number may be used to indicate a sequence of </span>NIL<span class="p">s, e.g. </span>(A 4 B) <span class="p">is interpreted as </span>(A NIL NIL NIL NIL B)<span class="p">.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DATATYPE <span class="p">[Record Type]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Defines a new user data type with type name <span class="s16">RECORD-NAME</span>. Unlike other record types, the instances of a <span class="s28">DATATYPE </span>are represented with a completely new Lisp type, and not in terms of other existing types.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">RECORD-FIELDS </span>is a list of field specifications, where each specification is either a list <span class="s28">(</span><span class="s16">FIELDNAME FIELDTYPE</span><span class="s28">)</span>, or an symbol <span class="s16">FIELDNAME</span>. If <span class="s16">FIELDTYPE </span>is omitted, it defaults to <span class="s28">POINTER</span>. Possible values for <span class="s16">FIELDTYPE </span>are:</p><p class="s28" style="padding-top: 6pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">POINTER <span class="p">Field contains a pointer to any arbitrary Interlisp object.</span></p><p class="s28" style="padding-top: 10pt;padding-left: 112pt;text-indent: 0pt;line-height: 6pt;text-align: left;">INTEGER</p><p class="s28" style="padding-left: 143pt;text-indent: -20pt;line-height: 91%;text-align: left;">FIXP <span class="p">Field contains a signed integer. Caution: An </span>INTEGER <span class="p">field is not capable of holding everything that satisfies </span>FIXP<span class="p">, such as bignums.</span></p><p class="s28" style="padding-top: 10pt;padding-left: 109pt;text-indent: 0pt;line-height: 6pt;text-align: left;">FLOATING</p><p class="s28" style="padding-left: 116pt;text-indent: 0pt;line-height: 11pt;text-align: left;">FLOATP <span class="p">Field contains a floating point number.</span></p><p class="s28" style="padding-top: 5pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">SIGNEDWORD <span class="p">Field contains a 16-bit signed integer.</span></p><p style="padding-top: 5pt;padding-left: 115pt;text-indent: 7pt;line-height: 148%;text-align: left;"><span class="s28">FLAG </span>Field is a one bit field that “contains” <span class="s28">T </span>or <span class="s28">NIL</span>. <span class="s28">BITS </span><span class="s16">N </span>Field contains an <span class="s16">N</span>-bit unsigned integer.</p><p class="s28" style="padding-left: 123pt;text-indent: 0pt;line-height: 148%;text-align: left;">BYTE <span class="p">Equivalent to </span>BITS 8<span class="p">. </span>WORD <span class="p">Equivalent to </span>BITS 16<span class="p">.</span></p><p style="padding-left: 143pt;text-indent: -34pt;line-height: 91%;text-align: justify;"><span class="s28">XPOINTER </span>Field contains a pointer like <span class="s28">POINTER</span>, but the field is <i>not </i>reference counted by the garbage collector. <span class="s28">XPOINTER </span>fields are useful for implementing back- pointers in structures that would be circular and not otherwise collected by the reference-counting garbage collector.</p><p style="padding-top: 6pt;padding-left: 144pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><b>Warning</b>: Use <span class="s28">XPOINTER </span>fields with great care. You can damage the integrity of the storage allocation system by using pointers to objects that have been garbage collected. Code that uses <span class="s28">XPOINTER </span>fields should be sure that the objects pointed to have not been garbage collected. This can be done in two ways: The first is to maintain the object in a global structure,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 192pt;text-indent: 0pt;line-height: 91%;text-align: justify;">so that it is never garbage collected until explicitly deleted from the structure, at which point the program must invalidate all the <span class="s28">XPOINTER </span>fields of other objects pointing at it. The second is to declare the object as a <span class="s28">DATATYPE </span>beginning with a <span class="s28">POINTER </span>field that the program maintains as a pointer to an object of another type (e.g., the object containing the <span class="s28">XPOINTER </span>pointing back at it), and test that field for reasonableness whenever using the contents of the <span class="s28">XPOINTER </span>field.</p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">For example, the declaration</p><p class="s28" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(DATATYPE FOO</p><p class="s28" style="padding-left: 179pt;text-indent: 0pt;line-height: 88%;text-align: left;">((FLG BITS 12) TEXT HEAD (DATE BITS 18) (PRIO FLOATP) (READ? FLAG)))</p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">would define a data type <span class="s28">FOO </span>with two pointer fields, a floating point number, and fields for a <span class="s28">12 </span>and <span class="s28">18 </span>bit unsigned integers, and a flag (one bit). Fields are allocated in such a way as to optimize the storage used and not necessarily in the order specified. Generally, a <span class="s28">DATATYPE </span>record is much more storage compact than the corresponding <span class="s28">RECORD </span>structure would be; in addition, access is faster.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Since the user data type must be set up at <i>run</i>-time, the <span class="s28">RECORDS </span>file package command will dump a <span class="s28">DECLAREDATATYPE </span>expression as well as the <span class="s28">DATATYPE </span>declaration itself. If the record declaration is otherwise not needed at runtime, it can be kept out of the compiled file by using a <span class="s28">(DECLARE: DONTCOPY --) </span>expression (see Chapter 17), but it is still necessary to ensure that the datatype is properly initialized. For this, one can use the <span class="s28">INITRECORDS </span>file package command (see Chapter 17), which will dump only the <span class="s28">DECLAREDATATYPE </span>expression.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><b>Note</b>: When defining a new data type, it is sometimes useful to call the function <span class="s28">DEFPRINT </span>(see Chapter 25) to specify how instances of the new data type should be printed. This can be specified in the record declaration by including an <span class="s28">INIT </span>record specification (see the Optional Record Specifications section below), e.g. <span class="s28">(DATATYPE QV.TYPE ... (INIT (DEFPRINT ’QV.TYPE (FUNCTION PRINT.QV.TYPE))))</span>.</p><p class="s28" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">DATATYPE <span class="p">declarations cannot be used within local record declarations (see Chapter 21).</span></p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TYPERECORD                                                  <span class="p">[Record  Type]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Similar to <span class="s28">RECORD</span>, but the record name is added to the front of the list structure to signify what “type” of record it is. This type field is used in the translation of <span class="s28">TYPE? </span>expressions. <span class="s28">CREATE </span>will insert an extra field containing <span class="s16">RECORD-NAME </span>at the beginning of the structure, and the translation of the access and storage functions will take this extra field into account. For example, for <span class="s28">(TYPERECORD MSG (FROM TO . TEXT)), (fetch FROM of X) </span>translates as</p><p class="s28" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">(CADR X)<span class="p">, not </span>(CAR X)<span class="p">.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">ASSOCRECORD                                                 <span class="p">[Record  Type]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Describes lists where the fields are stored in association list format:</p><p class="s28" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">((<span class="s16">FIELDNAME</span><i>1 </i>. <span class="s16">VALUE</span><i>1</i>) (<span class="s16">FIELDNAME</span><i>2 </i>. <span class="s16">VALUE</span><i>2</i>) ...)</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s16">RECORD-FIELDS </span>is a list of symbols, the permissable field names in the association list. Access is done with <span class="s28">ASSOC </span>(or <span class="s28">FASSOC</span>, if the current CLISP declarations are <span class="s28">FAST</span>, see Chapter 21), storing with <span class="s28">PUTASSOC</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 281pt;text-indent: 0pt;text-align: left;">RECORDS AND DATA STRUCTURES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: justify;">PROPRECORD <span class="p">[Record Type]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Describes lists where the fields are stored in property list format:</p><p class="s16" style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s28">(</span>FIELDNAME<span class="s29">1 </span>VALUE<span class="s29">1 </span>FIELDNAME<span class="s29">2 </span>VALUE<span class="s29">2 </span><span class="s28">...)</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">RECORD-FIELDS </span>is a list of symbols, the permissable field names in the property list. Access is done with <span class="s28">LISTGET</span>, storing with <span class="s28">LISTPUT</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Both <span class="s28">ASSOCRECORD </span>and <span class="s28">PROPRECORD </span>are useful for defining data structures where many of the fields are <span class="s28">NIL</span>. <span class="s28">CREATE</span>ing one these record types only stores those fields that are non-<span class="s28">NIL</span>. Note, however, that with the record declaration <span class="s28">(PROPRECORD FIE (H I J)) </span>the expression</p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">(create FIE) <span class="p">would still construct </span>(H NIL)<span class="p">, since a later operation of </span>(replace J of X with Y)</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">could not possibly change the instance of the record if it were <span class="s28">NIL</span>.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">ARRAYRECORD <span class="p">[Record Type]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="s28">ARRAYRECORDs </span>are stored as arrays. <span class="s16">RECORD-FIELDS </span>is a list of field names that are associated with the corresponding elements of an array. <span class="s28">NIL </span>can be used as a place marker for an unnamed field (element). Positive integers can be used as abbreviation for the corresponding number of <span class="s28">NIL</span>s. For example, <span class="s28">(ARRAYRECORD (ORG DEST NIL ID 3 TEXT)) </span>describes an eight-element array, with <span class="s28">ORG </span>corresponding to the first element, <span class="s28">ID </span>to the fourth, and <span class="s28">TEXT </span>to the eighth.</p><p class="s28" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">ARRAYRECORD <span class="p">only creates arrays of pointers. Other kinds of arrays must be implemented with </span>ACCESSFNS <span class="p">(see below).</span></p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">HASHLINK <span class="p">[Record Type]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The <span class="s28">HASHLINK </span>record type can be used with any type of data object: it specifies that the value of a single field can be accessed by hashing the data object in a given hash array. Since the <span class="s28">HASHLINK </span>record type describes an access method, rather than a data structure, <span class="s28">CREATE </span>is meaningless for <span class="s28">HASHLINK </span>records.</p><p class="s16" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">RECORD-FIELDS <span class="p">is either a symbol </span>FIELD-NAME<span class="p">, or a list </span><span class="s28">(</span>FIELD-NAME HARRAYNAME HARRAYSIZE<span class="s28">). </span>HARRAYNAME <span class="p">is a variable whose value is the hash array to be used; if not given, </span><span class="s28">SYSHASHARRAY </span><span class="p">is used. If the value of the variable </span>HARRAYNAME <span class="p">is not a hash array (at the time of the record declaration), it will be set to a new hash array with a size of </span>HARRAYSIZE<span class="p">.  </span>HARRAYSIZE <span class="p">defaults to 100.</span></p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The <span class="s28">HASHLINK </span>record type is useful as a subdeclaration to other records to add additional fields to already existing data structures (see the Optional Record Specifications section below). For example, suppose that <span class="s28">FOO </span>is a record declared with <span class="s28">(RECORD FOO (A B C))</span>. To add a new field <span class="s28">BAR</span>, without modifying the existing data strutures, redeclare <span class="s28">FOO </span>with:</p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(RECORD FOO (A B C) (HASHLINK FOO (BAR BARHARRAY)))</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Now, <span class="s28">(fetch BAR of X) </span>will translate into <span class="s28">(GETHASH X BARHARRAY)</span>, hashing off the existing list <span class="s28">X</span>.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">ATOMRECORD <span class="p">[Record Type]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s28">ATOMRECORD</span>s are stored on the property lists of symbols. <span class="s16">RECORD-FIELDS </span>is a list of property names. Accessing is performed with <span class="s28">GETPROP</span>, storing with <span class="s28">PUTPROP</span>. The <span class="s28">CREATE </span>expression is not initially defined for <span class="s28">ATOMRECORD </span>records.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">BLOCKRECORD                                                 <span class="p">[Record  Type]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="s28">BLOCKRECORD </span>is used in low-level system programming to “overlay” an organized structure over an arbitrary piece of raw storage. <span class="s16">RECORD-FIELDS </span>is interpreted exactly as with a <span class="s28">DATATYPE </span>declaration, except that fields are <i>not </i>automatically rearranged to maximize storage efficiency. Like an <span class="s28">ACCESSFNS </span>record, a <span class="s28">BLOCKRECORD </span>does not have concrete instances; it merely provides a way of interpreting some existing block of storage. So you can’t create an instance of a <span class="s28">BLOCKRECORD </span>(unless the declaration includes an explicit <span class="s28">CREATE </span>expression), nor is there a default <span class="s28">type? </span>expression for a <span class="s28">BLOCKRECORD</span>.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><b>Warning: </b>Exercise caution in using <span class="s28">BLOCKRECORD </span>declarations, as they let you fetch and store arbitrary data in arbitrary locations, thereby evading Medley’s normal type system. Except in very specialized situations, a <span class="s28">BLOCKRECORD </span>should never contain <span class="s28">POINTER </span>or <span class="s28">XPOINTER </span>fields, nor be used to overlay an area of storage that contains pointers. Such use could compromise the garbage collector and storage allocation system. You are responsible for ensuring that all <span class="s28">FETCH </span>and <span class="s28">REPLACE </span>expressions are performed only on suitable objects, as no type testing is performed.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">A typical use for a <span class="s28">BLOCKRECORD </span>in user code is to overlay a non-pointer portion of an existing <span class="s28">DATATYPE</span>. For this use, the <span class="s28">LOCF </span>macro is useful. <span class="s28">(LOCF (fetch </span><span class="s16">FIELD </span><span class="s28">of </span><span class="s16">DATUM</span><span class="s28">)) </span>can be used to refer to the storage that begins at the first word that contains <span class="s16">FIELD </span>of <span class="s16">DATUM</span>. For example, to define a new kind of Ethernet packet, you could overlay the “body” portion of the <span class="s28">ETHERPACKET </span>datatype declaration as follows:</p><p class="s28" style="padding-top: 4pt;padding-left: 150pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(ACCESSFNS MYPACKET</p><p class="s28" style="padding-left: 153pt;text-indent: -3pt;line-height: 88%;text-align: left;">((MYBASE (LOCF (fetch (ETHERPACKET EPBODY) of DATUM)))) (BLOCKRECORD MYBASE</p><p class="s28" style="padding-left: 157pt;text-indent: -3pt;line-height: 88%;text-align: left;">((MYTYPE WORD) (MYLENGTH WORD) (MYSTATUS BYTE) (MYERRORCODE BYTE) (MYDATA INTEGER)))</p><p class="s28" style="padding-left: 157pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(TYPE? (type? ETHERPACKET DATUM)))</p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">With this declaration in effect, the expression <span class="s28">(fetch MYLENGTH of PACKET) </span>would retrieve the second 16-bit field beyond the place inside <span class="s28">PACKET </span>where the <span class="s28">EPBODY </span>field starts.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">ACCESSFNS                                                   <span class="p">[Record  Type]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">ACCESSFNS <span class="p">lets you specify arbitrary functions to fetch and store data. For each field name, you specify how it is to be accessed and set. This lets you use arbitrary data structures, with complex access methods. Most often, </span>ACCESSFNS <span class="p">are useful when you can compute one field’s value from other fields. If you’re representing a time period by its start and duration, you could add an </span>ACCESSFNS <span class="p">definition for the ending time that did the obvious addition.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">RECORD-FIELDS <span class="p">is a list of elements of the form </span><span class="s28">(</span>FIELD-NAME ACCESSDEF SETDEF<span class="s28">)</span><span class="p">. </span>ACCESSDEF <span class="p">should be a function of one argument, the datum, and will be used for accessing the value of the field. </span>SETDEF <span class="p">should be a function of two arguments, the datum and the new value, and will be used for storing a new value in a field. </span>SETDEF <span class="p">may be omitted, in which case, no storing operations are allowed.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">ACCESSDEF </span>and / or <span class="s16">SETDEF </span>may also be a form written in terms of variables <span class="s28">DATUM </span>and <span class="s28">(in</span></p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">SETDEF<span class="s28">) NEWVALUE</span><span class="p">. For example, given the declaration</span></p><p class="s28" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 6pt;text-align: left;">[ACCESSFNS FOO</p><p class="s28" style="padding-left: 162pt;text-indent: 0pt;line-height: 6pt;text-align: left;">((FIRSTCHAR (NTHCHAR DATUM 1) (RPLSTRING DATUM 1 NEWVALUE)) (RESTCHARS (SUBSTRING DATUM 2]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 281pt;text-indent: 0pt;text-align: left;">RECORDS AND DATA STRUCTURES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="s28">(replace (FOO FIRSTCHAR) of X with Y) </span>would translate to <span class="s28">(RPLSTRING X 1 Y)</span>. Since no <span class="s16">SETDEF </span>is given for the <span class="s28">RESTCHARS </span>field, attempting to perform <span class="s28">(replace (FOO RESTCHARS) of X with Y) </span>would generate an error, <span class="s28">Replace undefined for field</span>. Note that <span class="s28">ACCESSFNS </span>do not have a <span class="s28">CREATE </span>definition. However, you may supply one in the defaults or subdeclarations of the declaration, as described below. Attempting to <span class="s28">CREATE </span>an <span class="s28">ACCESSFNS </span>record without specifying a create definition will cause an error <span class="s28">Create not defined for this record.</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">ACCESSDEF </span>and <span class="s16">SETDEF </span>can also be a property list which specify <span class="s28">FAST</span>, <span class="s28">STANDARD </span>and</p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">UNDOABLE <span class="p">versions of the </span>ACCESSFNS <span class="p">forms, e.g.</span></p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;line-height: 6pt;text-align: left;">[ACCESSFNS LITATOM</p><p class="s28" style="padding-left: 158pt;text-indent: -21pt;line-height: 88%;text-align: left;">((DEF (STANDARD GETD FAST FGETD) (STANDARD PUTD UNDOABLE /PUTD]</p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">means if <span class="s28">FAST </span>declaration is in effect, use <span class="s28">FGETD </span>for fetching, if <span class="s28">UNDOABLE</span>, use <span class="s28">/PUTD </span>for saving (see CLISP declarations, see Chapter 21).</p><p class="s16" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">SETDEF <span class="p">forms should be written so that they return the new value, to be consistant with</span></p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">REPLACE <span class="p">operations for other record types. The </span>REPLACE <span class="p">does not enforce this, though.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="s28">ACCESSFNS </span>let you use data structures not specified by one of the built-in record types. For example, one possible representation of a data structure is to store the fields in <i>parallel </i>arrays, especially if the number of instances required is known, and they needn’t be garbage collected. To implement <span class="s28">LINK </span>with two fields <span class="s28">FROM </span>and <span class="s28">TO</span>, you’d have two arrays <span class="s28">FROMARRAY </span>and <span class="s28">TOARRAY</span>. The representation of an “instance” of <span class="s28">LINK </span>would be an integer, used to index into the arrays. This can be accomplished with the declaration:</p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;line-height: 6pt;text-align: left;">[ACCESSFNS LINK</p><p class="s28" style="padding-left: 124pt;text-indent: 0pt;line-height: 6pt;text-align: left;">((FROM (ELT FROMARRAY DATUM)</p><p class="s28" style="padding-left: 128pt;text-indent: 28pt;line-height: 88%;text-align: left;">(SETA FROMARRAY DATUM NEWVALUE)) (TO (ELT TOARRAY DATUM)</p><p class="s28" style="padding-left: 128pt;text-indent: 21pt;line-height: 88%;text-align: left;">(SETA TOARRAY DATUM NEWVALUE))) (CREATE (PROG1 (SETQ LINKCNT (ADD1 LINKCNT))</p><p class="s28" style="padding-left: 182pt;text-indent: 0pt;line-height: 88%;text-align: left;">(SETA FROMARRAY LINKCNT FROM) (SETA TOARRAY LINKCNT TO)))</p><p class="s28" style="padding-left: 128pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(INIT (PROGN</p><p class="s28" style="padding-left: 168pt;text-indent: 0pt;line-height: 88%;text-align: left;">(SETQ FROMARRAY (ARRAY 100)) (SETQ TOARRAY (ARRAY 100)) (SETQ LINKCNT 0)]</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">To create a new <span class="s28">LINK</span>, a counter is incremented and the new elements stored. (Note: The</p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CREATE <span class="p">form given the declaration probably should include a test for overflow.)</span></p><p class="s6" style="padding-top: 10pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Optional Record Specifications</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">After the <span class="s16">RECORD-FIELDS </span>item in a record declaration expression there can be an arbitrary number of additional expressions in <span class="s16">RECORD-TAIL</span>. These expressions can be used to specify default values for record fields, special <span class="s28">CREATE </span>and <span class="s28">TYPE? </span>forms, and subdeclarations. The following expressions are permitted:</p><p style="padding-top: 6pt;padding-left: 156pt;text-indent: -94pt;text-align: justify;"><span class="s16">FIELD-NAME </span><span class="s30"></span><span class="s31"> </span><span class="s16">FORM </span>Allows you to specify within the record declaration the default value to be stored in <span class="s16">FIELD-NAME </span>by a <span class="s28">CREATE </span>(if no value is given within the <span class="s28">CREATE </span>expression itself). Note that <span class="s16">FORM </span>is evaluated at <span class="s28">CREATE </span>time, not when the declaration is made.</p><p class="s28" style="padding-top: 6pt;padding-left: 156pt;text-indent: -60pt;line-height: 94%;text-align: justify;">(CREATE <span class="s16">FORM</span>) <span class="p">Defines the manner in which </span>CREATE <span class="p">of this record should be performed. This provides a way of specifying how </span>ACCESSFNS <span class="p">should be created or overriding the usual definition of </span>CREATE<span class="p">. If </span><span class="s16">FORM </span><span class="p">contains the field-names of the declaration as variables, the forms given in the</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;line-height: 91%;text-align: justify;">CREATE <span class="p">operation will be substituted in. If the word </span>DATUM <span class="p">appears in the create form, the </span><span class="s9">original </span>CREATE <span class="p">definition is inserted. This effectively allows you to “advise” the create.</span></p><p style="padding-top: 6pt;padding-left: 203pt;text-indent: -52pt;text-align: justify;"><span class="s28">(INIT </span><span class="s16">FORM</span><span class="s28">) </span>Specifies that <span class="s16">FORM </span>should be evaluated when the record is declared. <span class="s16">FORM </span>will also be dumped by the <span class="s28">INITRECORDS </span>file package command (see Chapter 17).</p><p style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For example, see the example of an <span class="s28">ACCESSFNS </span>record declaration above. In this example, <span class="s28">FROMARRAY </span>and <span class="s28">TOARRAY </span>are initialized with an <span class="s28">INIT </span>form.</p><p class="s28" style="padding-top: 6pt;padding-left: 203pt;text-indent: -56pt;text-align: justify;">(TYPE? <span class="s16">FORM</span>) <span class="p">Defines the manner in which </span>TYPE? <span class="p">expressions are to be translated. </span><span class="s16">FORM </span><span class="p">may either be an expression in terms of </span>DATUM <span class="p">or a function of one argument.</span></p><p class="s28" style="padding-top: 8pt;padding-left: 129pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(SUBRECORD <span class="s16">NAME </span>.</p><p class="s16" style="padding-left: 151pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">DEFAULTS<span class="s28">) </span>NAME <span class="p">must be a field that appears in the current declaration and the</span></p><p style="padding-left: 204pt;text-indent: 0pt;line-height: 93%;text-align: justify;">name of another record. This says that, for the purposes of translating <span class="s28">CREATE </span>expressions, substitute the top-level declaration of <span class="s16">NAME </span>for the <span class="s28">SUBRECORD </span>form, adding on any defaults specified.</p><p style="padding-top: 6pt;padding-left: 203pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">For example: Given <span class="s28">(RECORD B (E F G)), (RECORD A (B C D) (SUBRECORD B))</span></p><p style="padding-left: 203pt;text-indent: 0pt;line-height: 91%;text-align: justify;">would be treated like <span class="s28">(RECORD A (B C D) (RECORD B (E F G))) </span>for the purposes of translating <span class="s28">CREATE </span>expressions.</p><p style="padding-top: 6pt;padding-left: 203pt;text-indent: -71pt;line-height: 91%;text-align: justify;">a subdeclaration If a record declaration expression occurs among the record specifications of another record declaration, it is known as a “subdeclaration.” Subdeclarations are used to declare that fields of a record are to be interpreted as another type of record, or that the record data object is to be interpreted in more than one way.</p><p style="padding-top: 6pt;padding-left: 203pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The <span class="s16">RECORD-NAME </span>of a subdeclaration must be either the <span class="s16">RECORD- NAME </span>of its immediately superior declaration or one of the superior’s field-names. Instead of identifying the declaration as with top level declarations, the record-name of a subdeclaration identifies the parent field or record that is being described by the subdeclaration. Subdeclarations can be nested to an arbitrary depth.</p><p style="padding-top: 6pt;padding-left: 203pt;text-indent: 0pt;text-align: justify;">Giving a subdeclaration <span class="s28">(RECORD </span><span class="s16">NAME</span><span class="s29">1 </span><span class="s16">NAME</span><span class="s29">2</span><span class="s28">) </span>is a simple way of defining a <i>synonym </i>for the field <span class="s16">NAME</span><span class="s29">1</span>.</p><p style="padding-top: 7pt;padding-left: 204pt;text-indent: 0pt;line-height: 91%;text-align: justify;">It is possible for a given field to have more than one subdeclaration. For example, in</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 5pt;padding-left: 204pt;text-indent: 0pt;text-align: left;">(RECORD FOO (A B) (RECORD A (C D)) (RECORD A (Q R)))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 204pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(Q R) <span class="p">and </span>(C D) <span class="p">are “overlayed,” i.e. </span>(fetch Q of X) <span class="p">and </span>(fetch C of X)</p><p style="padding-left: 203pt;text-indent: 0pt;line-height: 91%;text-align: left;">would be equivalent. In such cases, the <i>first </i>subdeclaration is the one used by <span class="s28">CREATE</span>.</p><p class="s28" style="padding-top: 8pt;padding-left: 135pt;text-indent: 0pt;text-align: left;">(SYNONYM <span class="s16">FIELD</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 281pt;text-indent: 0pt;text-align: left;">RECORDS AND DATA STRUCTURES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 156pt;text-indent: -79pt;text-align: justify;"><span class="s28">(</span>SYN<span class="s29">1 </span><span class="s28">... </span>SYN<span class="s29">N </span><span class="s28">)) </span>FIELD <span class="p">must be a field that appears in the current declaration. This defines </span>SYN<span class="s29">1 </span><span class="s28">... </span>SYN<span class="s29">N </span><span class="p">all as synonyms of </span>FIELD<span class="p">. If there is only one synonym, this can be written as (</span><span class="s28">SYNONYM </span>FIELD SYN<span class="s28">)</span><span class="p">.</span></p><p class="s28" style="padding-top: 7pt;padding-left: 156pt;text-indent: -34pt;line-height: 91%;text-align: justify;">(SYSTEM) <span class="p">If </span>(SYSTEM) <span class="p">is included in a record declaration, this indicates that the record is a “system” record rather than a “user” record. The only distinction between the two types of records is that “user” record declarations take precedence over “system” record declarations, in cases where an unqualified field name would be considered ambiguous. All of the records defined in the standard Medley system are defined as system records.</span></p><h4 style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">CREATE                                                                                                                                                     </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You can create <span class="s28">RECORD</span>s by hand if you like, using <span class="s28">CONS</span>, <span class="s28">LIST</span>, etc. But that defeats the whole point of hiding implementation details. So much easier to use:</p><p class="s28" style="padding-top: 4pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">(create <span class="s16">RECORD-NAME </span>. <span class="s16">ASSIGNMENTS</span>)</p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s28">CREATE </span>translates into an appropriate Interlisp form that uses <span class="s28">CONS</span>, <span class="s28">LIST</span>, <span class="s28">PUTHASH</span>, <span class="s28">ARRAY</span>, etc., to create the new datum with the its fields initialized to the values you specify. <span class="s16">ASSIGNMENTS </span>is optional and may contain expressions of the following form:</p><p class="s16" style="padding-top: 6pt;padding-left: 37pt;text-indent: 0pt;text-align: left;">FIELD-NAME <span class="s30"></span><span class="s31"> </span>FORM <span class="p">Specifies initial value for </span>FIELD-NAME<span class="p">.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 132pt;text-indent: -49pt;text-align: left;"><span class="s28">USING </span>FORM FORM <span class="p">is an existing instance of </span>RECORD-NAME<span class="p">. If you don’t specify a value for some field, the value of the corresponding field in </span>FORM <span class="p">is to be used.</span></p><p class="s28" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">COPYING <span class="s16">FORM </span><span class="p">Like </span>USING<span class="p">, but the corresponding values are copied (with </span>COPYALL<span class="p">).</span></p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -56pt;text-align: left;"><span class="s28">REUSING </span><span class="s16">FORM </span>Like <span class="s28">USING</span>, but wherever possible, the corresponding <i>structure </i>in <span class="s16">FORM </span>is used.</p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -60pt;text-align: left;"><span class="s28">SMASHING </span><span class="s16">FORM </span>A new instance of the record is not created at all; rather, new field values are smashed into <span class="s16">FORM</span>, which <span class="s28">CREATE </span>then returns.</p><p class="s28" style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="p">When it makes a difference, Medley goes to great pains to make its translation do things in the same order as the original </span>CREATE <span class="p">expression. For example, given the declaration </span>(RECORD CONS (CAR . CDR))<span class="p">, the expression </span>(create CONS CDR<span class="s30"></span>X CAR<span class="s30"></span>Y) <span class="p">will translate to </span>(CONS Y X)<span class="p">, but </span>(create CONS CDR<span class="s30"></span>(FOO) CAR<span class="s30"></span>(FIE)) <span class="p">will translate to </span>((LAMBDA ($$1) (CONS (PROGN (SETQ $$1 (FOO)) (FIE)) $$1))) <span class="p">because </span>FOO <span class="p">might set some variables used by </span>FIE<span class="p">.</span></p><p class="s28" style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">How are </span>USING <span class="p">and </span>REUSING <span class="p">different? </span>(create <span class="s16">RECORD </span>reusing <span class="s16">FORM </span>...) <span class="p">doesn’t do any destructive operations on the value of </span><span class="s16">FORM</span><span class="p">, but </span><span class="s9">will </span><span class="p">incorporate as much as possible of the old data structure into the new one. On the other hand, </span>(create <span class="s16">RECORD </span>using <span class="s16">FORM </span>...) <span class="p">will create a completely new data structure, with only the </span><span class="s9">contents </span><span class="p">of the fields re-used. For example, </span>REUSING <span class="p">a </span>PROPRECORD <span class="p">just </span>CONS<span class="p">es the new property names and values onto the list, while </span>USING <span class="p">copies the top level of the list. Another example of this distinction occurs when a field is elaborated by a subdeclaration: </span>USING <span class="p">will create a new instance of the sub-record, while </span>REUSING <span class="p">will use the old contents of the field (unless some field of the subdeclaration is assigned in the </span>CREATE <span class="p">expression.)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the value of a field is neither explicitly specified, nor implicitly specified via <span class="s28">USING</span>, <span class="s28">COPYING </span>or <span class="s28">REUSING</span>, the default value in the declaration is used, if any, otherwise <span class="s28">NIL</span>. (For <span class="s28">BETWEEN </span>fields in <span class="s28">DATATYPE </span>records, <span class="s16">N</span><span class="s32">1 </span>is used; for other non-pointer fields zero is used.) For example, following <span class="s28">(RECORD A (B C D) D </span><span class="s30"></span><span class="s31"> </span><span class="s28">3)</span></p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(create A B <span class="s30"></span><span class="s31"> </span>T) ==&gt; (LIST T NIL 3)</p><p class="s28" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(create A B <span class="s30"></span><span class="s31"> </span>T using X) ==&gt; (LIST T (CADR X) (CADDR X))</p><p class="s28" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(create A B <span class="s30"></span><span class="s31"> </span>T copying X)) ==&gt; [LIST T (COPYALL (CADR X)) (COPYALL (CADDR X]</p><p class="s28" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(create A B <span class="s30"></span><span class="s31"> </span>T reusing X) ==&gt; (CONS T (CDR X))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">TYPE?                                                                                                                                                         </h4><p class="s28" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="p">The record package allows you to test if a given datum “looks like” an instance of a record. This can be done via an expression of the for</span>m (type? <span class="s16">RECORD-NAME FORM</span>).</p><p class="s28" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">TYPE? <span class="p">is mainly intended for records with a record type of </span>DATATYPE <span class="p">or </span>TYPERECORD<span class="p">. For </span>DATATYPE<span class="p">s, the </span>TYPE?</p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">check is exact; i.e. the <span class="s28">TYPE? </span>expression will return non-<span class="s28">NIL </span>only if the value of <span class="s16">FORM </span>is an instance of the record named by <span class="s16">RECORD-NAME</span>. For <span class="s28">TYPERECORD</span>s, the <span class="s28">TYPE? </span>expression will check that the value of <span class="s16">FORM </span>is a list beginning with <span class="s16">RECORD-NAME</span>. For <span class="s28">ARRAYRECORD</span>s, it checks that the value is an array of the correct size. For <span class="s28">PROPRECORD</span>s and <span class="s28">ASSOCRECORD</span>s, a <span class="s28">TYPE? </span>expression will make sure that the value of <span class="s16">FORM </span>is a property / association list with property names among the field-names of the declaration.</p><p class="s28" style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="p">There is no built-in type test for records of type </span>ACCESSFNS<span class="p">, </span>HASHLINK <span class="p">or </span>RECORD<span class="p">. Type tests can be defined for these kinds of records, or redefined for the other kinds, by including an expression of the form </span>(TYPE? <span class="s16">COM</span>) <span class="p">in the record declaration (see the Record Declarations section below). Attempting to</span></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 106%;text-align: justify;">execute a <span class="s28">TYPE? </span>expression for a record that has no type test causes an error, <span class="s28">Type? not implemented for this record.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">WITH                                                                                                                                                           </h4><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Often one wants to write a complex expression that manipulates several fields of a single record. The <span class="s28">WITH </span>construct can make it easier to write such expressions by allowing one to refer to the fields of a record as if they were variables within a lexical scope:</p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(with <span class="s16">RECORD-NAME RECORD-INSTANCE FORM</span><i>1 </i>... <span class="s16">FORM</span><i>N</i>)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">RECORD-NAME </span>is the name of a record, and <span class="s16">RECORD-INSTANCE </span>is an expression which evaluates to an instance of that record. The expressions <span class="s16">FORM</span><span class="s32">1 </span><span class="s28">... </span><span class="s16">FORM</span><span class="s32">N </span>are evaluated so that references to variables which are field-names of <span class="s16">RECORD-NAME </span>are implemented via <span class="s28">FETCH </span>and <span class="s28">SETQ</span>s of those variables are implemented via <span class="s28">REPLACE</span>.</p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">For example, given</p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(RECORD RECN (FLD1 FLD2))</p><p class="s28" style="padding-left: 114pt;text-indent: 0pt;line-height: 7pt;text-align: left;">(SETQ INST (create RECN FLD1 <span class="s30"></span><span class="s31"> </span>10 FLD2 <span class="s30"></span><span class="s31"> </span>20))</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Then the construct</p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(with RECN INST (SETQ FLD2 (PLUS FLD1 FLD2]</p><p class="s5" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">is equivalent to</p><p class="s28" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">(replace FLD2 of INST with (PLUS (fetch FLD1 of INST) (fetch FLD2 of INST]</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><b>Warning</b>: <span class="s28">WITH </span>is implemented by doing simple substitutions in the body of the forms, without regard for how the record fields are used.  This means, for example, if the record <span class="s28">FOO </span>is defined by <span class="s28">(RECORD FOO (POINTER1 POINTER2))</span>, then the form</p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(with FOO X (SELECTQ Y (POINTER1 POINTER1) NIL]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 281pt;text-indent: 0pt;text-align: left;">RECORDS AND DATA STRUCTURES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">will be translated as</p><p class="s28" style="padding-top: 4pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">(SELECTQ Y ((CAR X) (CAR X)) NIL]</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Be careful that record field names are not used except as variables in the <span class="s28">WITH </span>forms.</p><h4 style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Defining New Record Types                                                                                                                     </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In addition to the built-in record types, you can declare your own record types by performing the following steps:</p><ol id="l7"><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -12pt;text-align: left;">Add the new record-type to the value of <span class="s28">CLISPRECORDTYPES</span>.</p></li><li><p class="s28" style="padding-top: 3pt;padding-left: 60pt;text-indent: -12pt;text-align: left;"><span class="p">Perform </span>(MOVD ’RECORD <span class="s16">RECORD-TYPE</span>)<span class="p">.</span></p></li><li><p style="padding-top: 5pt;padding-left: 59pt;text-indent: -12pt;line-height: 94%;text-align: justify;">Put the name of a function which will return the translation on the property list of <span class="s16">RECORD- TYPE</span>, as the value of the property <span class="s28">USERRECORDTYPE</span>. Whenever a record declaration of type <span class="s16">RECORD-TYPE </span>is encountered, this function will be passed the record declaration as its argument, and should return a <i>new </i>record declaration which the record package will then use in its place.</p><h4 style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Manipulating Record Declarations                                                                                                          </h4><p class="s16" style="padding-top: 9pt;padding-left: 78pt;text-indent: -24pt;text-align: left;"><span class="s28">(</span><b>EDITREC </b>NAME COM<span class="s29">1 </span>... COM<span class="s29">N</span><span class="s28">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s28">EDITREC </span>calls the editor on a copy of all declarations in which <span class="s16">NAME </span>is the record name or a field name. On exit, it redeclares those that have changed and undeclares any that have been deleted. If <span class="s16">NAME </span>is <span class="s28">NIL</span>, <i>all </i>declarations are edited.</p><p class="s16" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">COM<span class="s29">1 </span><span class="s28">... </span>COM<span class="s29">N </span><span class="p">are (optional) edit commands.</span></p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When you redeclare a global record, the translations of all expressions involving that record or any of its fields are automatically deleted from <span class="s28">CLISPARRAY</span>, and thus will be recomputed using the new information. If you change a <i>local </i>record declaration (see Chapter 21), or change some other CLISP declaration (see Chapter 21), e.g., <span class="s28">STANDARD </span>to <span class="s28">FAST</span>, and wish the new information to affect record expressions already translated, you must make sure the corresponding translations are removed, usually either by <span class="s28">CLISPIFY</span>ing or using the <span class="s28">DW </span>edit macro.</p><p class="s28" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">RECLOOK </span><span class="s16">RECNAME — — — —</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Returns the entire declaration for the record named <span class="s16">RECNAME</span>; <span class="s28">NIL </span>if there is no record declaration with name <span class="s16">RECNAME</span>. Note that the record package maintains internal state about current record declarations, so performing destructive operations (e.g. <span class="s28">NCONC</span>) on the value of <span class="s28">RECLOOK </span>may leave the record package in an inconsistent state. To change a record declaration, use <span class="s28">EDITREC</span>.</p><p class="s28" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FIELDLOOK </span><span class="s16">FIELDNAME</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the list of declarations in which <span class="s16">FIELDNAME </span>is the name of a field.</p><p class="s28" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">RECORDFIELDNAMES </span><span class="s16">RECORDNAME —</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the list of fields declared in record <span class="s16">RECORDNAME</span>. <span class="s16">RECORDNAME </span>may either be a name or an entire declaration.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">RECORDACCESS </span><span class="s16">FIELD DATUM DEC TYPE NEWVALUE</span>)                              <span class="p">[Function]</span></p><p class="s28" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">TYPE </span><span class="p">is one of </span>FETCH<span class="p">, </span>REPLACE<span class="p">, </span>FFETCH<span class="p">, </span>FREPLACE<span class="p">, </span>/REPLACE <span class="p">or their lowercase equivalents. </span><span class="s16">TYPE</span>=NIL <span class="p">means </span>FETCH<span class="p">. If </span><span class="s16">TYPE </span><span class="p">corresponds to a fetch operation, i.e. is </span>FETCH<span class="p">, or </span>FFETCH<span class="p">, </span>RECORDACCESS <span class="p">performs </span>(<span class="s16">TYPE FIELD </span>of <span class="s16">DATUM</span>)<span class="p">. If </span><span class="s16">TYPE </span><span class="p">corresponds to a replace, </span>RECORDACCESS <span class="p">performs </span>(<span class="s16">TYPE FIELD </span>of <span class="s16">DATUM </span>with <span class="s16">NEWVALUE</span>)<span class="p">. </span><span class="s16">DEC </span><span class="p">is an optional declaration; if given, </span><span class="s16">FIELD </span><span class="p">is interpreted as a field name of that declaration.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note that <span class="s28">RECORDACCESS </span>is relatively inefficient, although it is better than constructing the equivalent form and performing an <span class="s28">EVAL</span>.</p><p class="s28" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">RECORDACCESSFORM </span><span class="s16">FIELD DATUM TYPE NEWVALUE</span>)                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns the form that would be compiled as a result of a record access. <span class="s16">TYPE </span>is one of</p><p class="s28" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">FETCH<span class="p">, </span>REPLACE<span class="p">, </span>FFETCH<span class="p">, </span>FREPLACE<span class="p">, </span>/REPLACE <span class="p">or their lowercase equivalents. </span><span class="s16">TYPE</span>=NIL <span class="p">means </span>FETCH<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Changetran                                                                                                                                                </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 148%;text-align: justify;">Often, you’ll want to assign a new value to some datum that is a function of its current value: Incrementing a counter: <span class="s28">(SETQ X (IPLUS X 1))</span></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Pushing an item on the front of a list: <span class="s28">(SETQ X (CONS Y X))</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Popping an item off a list: <span class="s28">(PROG1 (CAR X) (SETQ X (CDR X)))</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Those are simple when you’re working with a variable; it gets complicated when you’re working with structured data. For example, if you want to modify <span class="s28">(CAR X)</span>, the above examples would be:</p><p class="s28" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(CAR (RPLACA X (IPLUS (CAR X) 1))) (CAR (RPLACA X (CONS Y (CAR X))) (PROG1 (CAAR X) (RPLACA X (CDAR X)))</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">and if you’re changing an element in an array, <span class="s28">(ELT A N)</span>, the examples would be:</p><p class="s28" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(SETA A N (IPLUS (ELT A N) 1))) (SETA A N (CONS Y (ELT A N))))</p><p class="s28" style="padding-left: 114pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(PROG1 (CAR (ELT A N)) (SETA A N (CDR (ELT A N))))</p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Changetran is designed to provide a simpler way to express these common (but user-extensible) structure modifications. Changetran defines a set of CLISP words that encode the kind of modification to take place—pushing on a list, adding to a number, etc. More important, you only indicate the item to be modified once. Thus, the “change word” <span class="s28">ADD </span>is used to increase the value of a datum by the sum of a set of numbers. Its arguments are the datum, and a set of numbers to be added to it. The datum must be a variable or an accessing expression (envolving <span class="s28">FETCH</span>, <span class="s28">CAR</span>, <span class="s28">LAST</span>, <span class="s28">ELT</span>, etc) that can be translated to the appropriate setting expression.</p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">For example, <span class="s28">(ADD X 1) </span>is equivalent to:</p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(SETQ X (PLUS X 1))</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">and <span class="s28">(ADD (CADDR X) (FOO)) </span>is equivalent to:</p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(CAR (RPLACA (CDDR X) (PLUS (FOO) (CADDR X)))</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the datum is a complicated form involving function calls, such as <span class="s28">(ELT (FOO X) (FIE Y)))</span>, Changetran goes to some lengths to make sure that those subsidiary functions are evaluated only once, even though they are used in both the setting and accessing parts of the translation. You can rely on the fact that the forms will be evaluated only as often as they appear in your expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 281pt;text-indent: 0pt;text-align: left;">RECORDS AND DATA STRUCTURES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: left;">For <span class="s28">ADD </span>and all other changewords, the lowercase version (<span class="s28">add</span>, etc.) may also be specified. Like other CLISP words, change words are translated using all CLISP declarations in effect (see Chapter 21).</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: left;">The following is a list of those change words recognized by Changetran. Except for POP, the value of all built-in changeword forms is defined to be the new value of the datum.</p><p class="s16" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s28">(</span><b>ADD </b>DATUM ITEM<span class="s29">1 </span>ITEM<span class="s29">2 </span>...<span class="s28">) </span><span class="p">[Change Word]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Adds the specified items to the current value of the datum, stores the result back in the datum location. The translation will use <span class="s28">IPLUS</span>, <span class="s28">PLUS</span>, or <span class="s28">FPLUS </span>according to the CLISP declarations in effect (see Chapter 21).</p><p class="s16" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s28">(</span><b>PUSH </b>DATUM ITEM<span class="s29">1 </span>ITEM<span class="s29">2 </span><span class="s33">...</span><span class="s28">) </span><span class="p">[Change Word]</span></p><p class="s28" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">CONS<span class="p">es the items onto the front of the current value of the datum, and stores the result back in the datum location. For example, </span>(PUSH X A B) <span class="p">would translate as </span>(SETQ X (CONS A (CONS B X)))<span class="p">.</span></p><p class="s28" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">PUSHNEW </span><span class="s16">DATUM ITEM</span>) <span class="p">[Change Word]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Like <span class="s28">PUSH </span>(with only one item) except that the item is not added if it is already <span class="s28">FMEMB </span>of the datum’s value.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: left;">Note that, whereas <span class="s28">(CAR (PUSH X ’FOO)) </span>will always be <span class="s28">FOO</span>, <span class="s28">(CAR (PUSHNEW X ’FOO)) </span>might be something else if <span class="s28">FOO </span>already existed in the middle of the list.</p><p class="s16" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s28">(</span><b>PUSHLIST </b>DATUM ITEM<span class="s29">1 </span>ITEM<span class="s29">2 </span>...<span class="s28">) </span><span class="p">[Change Word]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">Similar to <span class="s28">PUSH</span>, except that the items are <span class="s28">APPEND</span>ed in front of the current value of the datum. For example, <span class="s28">(PUSHLIST X A B) </span>translates as (<span class="s28">SETQ X (APPEND A B X))</span>.</p><p class="s28" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">POP </span><span class="s16">DATUM</span>) <span class="p">[Change Word]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns <span class="s28">CAR </span>of the current value of the datum after storing its <span class="s28">CDR </span>into the datum. The current value is computed only once even though it is referenced twice. Note that this is the only built-in changeword for which the value of the form is not the new value of the datum.</p><p class="s16" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s28">(</span><b>SWAP </b>DATUM<span class="s29">1 </span>DATUM<span class="s29">2</span><span class="s28">) </span><span class="p">[Change Word]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Sets <span class="s16">DATUM</span><span class="s29">1 </span>to <span class="s16">DATUM</span><span class="s29">2 </span>and vice versa.</p><p class="s28" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">CHANGE </span><span class="s16">DATUM FORM</span>) <span class="p">[Change Word]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This is the most flexible of all change words: You give an arbitrary form describing what the new value should be. But it still highlights the fact that structure modification is happening, and still lets the datum appear only once. <span class="s28">CHANGE </span>sets <span class="s16">DATUM </span>to the value of <span class="s16">FORM</span><span class="s28">*</span>, where <span class="s16">FORM</span><span class="s28">* </span>is constructed from <span class="s16">FORM </span>by substituting the datum expression for every occurrence of the symbol <span class="s28">DATUM</span>. For example,</p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(CHANGE (CAR X) (ITIMES DATUM 5))</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">translates as</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">(CAR (RPLACA X (ITIMES (CAR X) 5)))<span class="p">.</span></p><p class="s28" style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: left;">CHANGE <span class="p">is useful for expressing modifications that are not built-in and are not common enough to justify defining a user-changeword.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You can define new change words. To define a change word, say <span class="s28">sub</span>, that subtracts items from the current value of the datum, you must put the property <span class="s28">CLISPWORD</span>, value <span class="s28">(CHANGETRAN . sub) </span>on both the upper- and lower-case versions of sub:</p><p class="s28" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(PUTPROP ’SUB ’CLISPWORD ’(CHANGETRAN . sub)) (PUTPROP ’sub ’CLISPWORD ’(CHANGETRAN . sub))</p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Then, you must put (on the <i>lower</i>-case version of <span class="s28">sub </span>only) the property <span class="s28">CHANGEWORD</span>, with value <span class="s16">FN</span>. <span class="s16">FN </span>is a function that will be applied to a single argument, the whole <span class="s28">sub </span>form, and must return a form that Changetran can translate into an appropriate expression. This form should be a list structure with the symbol <span class="s28">DATUM </span>used whenever you want an accessing expression for the current value of the datum to appear. The form <span class="s28">(DATUM</span><span class="s30"></span><span class="s31"> </span><span class="s16">FORM</span><span class="s28">) </span>(note that <span class="s28">DATUM</span><span class="s30"></span><span class="s31"> </span>is a single symbol) should occur once in the expression; this specifies that an appropriate storing expression into the datum should occur at that point. For example, <span class="s28">sub </span>could be defined as:</p><p class="s28" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(PUTPROP ’sub ’CHANGEWORD</p><p class="s28" style="padding-left: 157pt;text-indent: -10pt;line-height: 77%;text-align: left;">’(LAMBDA (FORM) (LIST ’DATUM<span class="s30"></span></p><p class="s28" style="padding-left: 200pt;text-indent: -21pt;line-height: 88%;text-align: left;">(LIST ’IDIFFERENCE ’DATUM</p><p class="s28" style="padding-left: 200pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(CONS ’IPLUS (CDDR FORM))))))</p><p class="s28" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="p">If the expression </span>(sub (CAR X) A B) <span class="p">were encountered, the arguments to SUB would first be dwimified, and then the </span>CHANGEWORD <span class="p">function would be passed the list </span>(sub (CAR X) A B)<span class="p">, and return </span>(DATUM<span class="s30"></span><span class="s31"> </span>(IDIFFERENCE DATUM (IPLUS A B)))<span class="p">, which Changetran would convert to </span>(CAR (RPLACA X (IDIFFERENCE (CAR X) (IPLUS A B))))<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><b>Note</b>: The <span class="s28">sub </span>changeword as defined above will always use <span class="s28">IDIFFERENCE </span>and <span class="s28">IPLUS</span>; <span class="s28">add </span>uses the correct addition operation depending on the current CLISP declarations (see Chapter 21).</p><h4 style="padding-top: 10pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">Built-In and User Data Types                                                                                                                   </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley is a system for manipulating various kinds of data; it comes with a large set of built-in data types, which you can use to represent a variety of abstract objects; you can also define additional “user data types” that you can manipulate exactly like built-in data types.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Each data type in Medley has an associated “type name,” a symbol. Some of the type names of built- in data types are: <span class="s28">LITATOM</span>, <span class="s28">LISTP</span>, <span class="s28">STRINGP</span>, <span class="s28">ARRAYP</span>, <span class="s28">STACKP</span>, <span class="s28">SMALLP</span>, <span class="s28">FIXP</span>, and <span class="s28">FLOATP</span>. For user data types, the type name is specified when the data type is created.</p><p class="s28" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DATATYPES </span><span class="s16">— </span>)                                                                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns a list of all type names currently defined.</p><p class="s28" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">USERDATATYPES</span>)                                                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns list of names of currently declared user data types.</p><p class="s28" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">TYPENAME </span><span class="s16">DATUM</span>)                                                                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns the type name for the data type of <span class="s16">DATUM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 281pt;text-indent: 0pt;text-align: left;">RECORDS AND DATA STRUCTURES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">TYPENAMEP </span><span class="s16">DATUM TYPE</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Returns <span class="s28">T </span>if <span class="s16">DATUM </span>is an object with type name equal to <span class="s16">TYPE</span>, otherwise <span class="s28">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In addition to built-in data-types like symbols, lists, arrays, etc., Medley provides a way to define completely <i>new </i>classes of objects, with a fixed number of fields determined by the definition of the data type. To define a new class of objects, you must supply a name for the new data type and specifications for each of its fields. Each field may contain either a pointer (i.e., any arbitrary Interlisp datum), an integer, a floating point number, or an <i>N</i>-bit integer.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><b>Note</b>: The most convenient way to define new user data types is via <span class="s28">DATATYPE </span>record declarations (see Chapter 8) which call the following functions.</p><p class="s28" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DECLAREDATATYPE </span><span class="s16">TYPENAME FIELDSPECS — — </span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Defines a new user data type, with the name <span class="s16">TYPENAME</span>. <span class="s16">FIELDSPECS </span>is a list of “field specifications.” Each field specification may be one of the following:</p><p class="s28" style="padding-top: 6pt;padding-left: 118pt;text-indent: 0pt;text-align: left;">POINTER <span class="p">Field may contain any Interlisp datum.</span></p><p class="s28" style="padding-top: 5pt;padding-left: 129pt;text-indent: 0pt;text-align: left;">FIXP <span class="p">Field contains an integer.</span></p><p class="s28" style="padding-top: 5pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">FLOATP <span class="p">Field contains a floating point number.</span></p><p class="s28" style="padding-top: 7pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">(BITS <span class="s16">N</span>) <span class="p">Field contains a non-negative integer less than 2</span><span class="s34">N</span><span class="p">.</span></p><p class="s28" style="padding-top: 6pt;padding-left: 129pt;text-indent: 0pt;line-height: 148%;text-align: left;">BYTE <span class="p">Equivalent to </span>(BITS 8)<span class="p">. </span>WORD <span class="p">Equivalent to </span>(BITS 16)<span class="p">.</span></p><p class="s28" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">SIGNEDWORD <span class="p">Field contains a 16 bit signed integer.</span></p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s28">DECLAREDATATYPE </span>returns a list of “field descriptors,” one for each element of <span class="s16">FIELDSPECS</span>. A field descriptor contains information about where within the datum the field is actually stored.</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">FIELDSPECS </span>is <span class="s28">NIL</span>, <span class="s16">TYPENAME </span>is “undeclared.” If <span class="s16">TYPENAME </span>is already declared as a data type, it is undeclared, and then re-declared with the new <span class="s16">FIELDSPECS</span>. An instance of a data type that has been undeclared has a type name of <span class="s28">**DEALLOC**</span>.</p><p class="s28" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FETCHFIELD </span><span class="s16">DESCRIPTOR DATUM</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the contents of the field described by <span class="s16">DESCRIPTOR </span>from <span class="s16">DATUM</span>. <span class="s16">DESCRIPTOR </span>must be a “field descriptor” as returned by <span class="s28">DECLAREDATATYPE </span>or <span class="s28">GETDESCRIPTORS</span>. If <span class="s16">DATUM </span>is not an instance of the datatype of which <span class="s16">DESCRIPTOR </span>is a descriptor, causes error <span class="s28">Datum of incorrect type</span>.</p><p class="s28" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">REPLACEFIELD </span><span class="s16">DESCRIPTOR DATUM NEWVALUE</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Store <span class="s16">NEWVALUE </span>into the field of <span class="s16">DATUM </span>described by <span class="s16">DESCRIPTOR</span>. <span class="s16">DESCRIPTOR </span>must be a field descriptor as returned by <span class="s28">DECLAREDATATYPE</span>. If <span class="s16">DATUM </span>is not an instance of the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: left;">datatype of which <span class="s16">DESCRIPTOR </span>is a descriptor, causes error <span class="s28">Datum of incorrect type</span>. Value is <span class="s16">NEWVALUE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">NCREATE </span><span class="s16">TYPE OLDOBJ</span>)                                                                <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Creates and returns a new instance of datatype <span class="s16">TYPE</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s16">OLDOBJ </span>is also a datum of datatype <span class="s16">TYPE</span>, the fields of the new object are initialized to the values of the corresponding fields in <span class="s16">OLDOBJ</span>.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: left;"><span class="s28">NCREATE </span>will not work for built-in datatypes, such as <span class="s28">ARRAYP</span>, <span class="s28">STRINGP</span>, etc. If <span class="s16">TYPE </span>is not the type name of a previously declared <i>user </i>data type, generates an error, <span class="s28">Illegal data type</span>.</p><p class="s28" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GETFIELDSPECS </span><span class="s16">TYPENAME</span>)                                                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns a list which is <span class="s28">EQUAL </span>to the <span class="s16">FIELDSPECS </span>argument given to <span class="s28">DECLAREDATATYPE </span>for</p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s16">TYPENAME</span>; if <span class="s16">TYPENAME </span>is not a currently declared data-type, returns <span class="s28">NIL</span>.</p><p class="s28" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GETDESCRIPTORS </span><span class="s16">TYPENAME</span>)                                                          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns a list of field descriptors, <span class="s28">EQUAL </span>to the <i>value </i>of <span class="s28">DECLAREDATATYPE </span>for <span class="s16">TYPENAME</span>. If</p><p class="s16" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">TYPENAME <span class="p">is not an atom, </span><span class="s28">(TYPENAME </span>TYPENAME<span class="s28">) </span><span class="p">is used.</span></p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You can define how a user data type prints, using <span class="s28">DEFPRINT </span>(see Chapter 25), how they are to be evaluated by the interpreter via <span class="s28">DEFEVAL </span>(see Chapter 10), and how they are to be compiled by the compiler via <span class="s28">COMPILETYPELST </span>(see Chapter 18).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 269pt;text-indent: 0pt;text-align: left;"><a name="bookmark10">9. LISTS AND ITERATIVE STATEMENTS</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_015.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley gives you a large number of predicates, conditional functions, and control functions. Also, there is a complex “iterative statement” facility which allows you to easily create complex loops and iterative constructs.</p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Data Type Predicates                                                                                                                                </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Medley provides separate functions for testing whether objects are of certain commonly-used types:</p><p class="s11" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>LITATOM </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">T </span>if <span class="s16">X </span>is a symbol; <span class="s11">NIL </span>otherwise.  Note that a number is not a symbol.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>SMALLP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a small integer; <span class="s11">NIL </span>otherwise. (The range of small integers is -65536 to</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">+65535.</p><p class="s11" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FIXP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a small or large integer; <span class="s11">NIL </span>otherwise.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FLOATP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a floating point number; <span class="s11">NIL </span>otherwise.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>NUMBERP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a number of any type, <span class="s11">NIL </span>otherwise.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ATOM </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">T </span>if <span class="s16">X </span>is an atom (i.e. a symbol or a number); <span class="s11">NIL </span>otherwise.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">(ATOM <i>X</i>) <span class="p">is </span>NIL <span class="p">if </span><i>X </i><span class="p">is an array, string, etc. In Common Lisp, </span>CL:ATOM <span class="p">is defined equivalent to the Interlisp function </span>NLISTP<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>LISTP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a list cell (something created by <span class="s11">CONS</span>); <span class="s11">NIL </span>otherwise.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>NLISTP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s11">(NOT (LISTP X))</span>. Returns <span class="s11">T </span>if <span class="s16">X </span>is not a list cell, <span class="s11">NIL </span>otherwise.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>STRINGP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a string, <span class="s11">NIL </span>otherwise.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ARRAYP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">X </span>if <span class="s16">X </span>is an array, <span class="s11">NIL </span>otherwise.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>HARRAYP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">X </span>if it is a hash array object; otherwise <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="s11">HARRAYP </span>returns <span class="s11">NIL </span>if <span class="s16">X </span>is a list whose <span class="s11">CAR </span>is an <span class="s11">HARRAYP</span>, even though this is accepted by the hash array functions.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><b>Note</b>: The empty list, <span class="s11">() </span>or <span class="s11">NIL</span>, is considered to be a symbol, rather than a list. Therefore, <span class="s11">(LITATOM NIL) = (ATOM NIL) = T </span>and <span class="s11">(LISTP NIL) = NIL</span>. Take</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">care when using these functions if the object may be the empty list <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Equality Predicates                                                                                                                                   </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Sometimes, there is more than one type of equality. For instance, given two lists, you can ask whether they are exactly the same object, or whether they are two distinct lists that contain the same elements. Confusion between these two types of equality is often the source of program errors.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>EQ </b><i>X Y</i>)                                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">T </span>if <span class="s16">X </span>and <span class="s16">Y </span>are identical pointers; <span class="s11">NIL </span>otherwise. <span class="s11">EQ </span>should not be used to compare two numbers, unless they are small integers; use <span class="s11">EQP </span>instead.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>NEQ </b><i>X Y</i>)                                                      <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="p">The same as </span>(NOT (EQ <i>X Y</i>))</p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(<b>NULL </b><i>X</i>)                                                       <span class="p">[Function]</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(<b>NOT </b><i>X</i>)                                                        <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="p">The same as </span>(EQ <i>X </i>NIL)</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>EQP </b><i>X Y</i>)                                                      <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns <span class="s11">T </span>if <span class="s16">X </span>and <span class="s16">Y </span>are <span class="s11">EQ</span>, or if <span class="s16">X </span>and <span class="s16">Y </span>are numbers and are equal in value; <span class="s11">NIL</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">otherwise. For more discussion of <span class="s11">EQP </span>and other number functions, see Chapter 7.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">EQP <span class="p">also can be used to compare stack pointers (Section 11) and compiled code (Chapter 10).</span></p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>EQUAL </b><i>X Y</i>)                                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="s11">EQUAL </span>returns <span class="s11">T </span>if <span class="s16">X </span>and <span class="s16">Y </span>are one of the following:</p><ol id="l8"><li><p class="s11" style="padding-top: 3pt;padding-left: 138pt;text-indent: -12pt;line-height: 11pt;text-align: left;">EQ</p></li><li><p class="s11" style="padding-left: 138pt;text-indent: -12pt;line-height: 11pt;text-align: left;">EQP<span class="p">, i.e., numbers with equal value</span></p></li><li><p class="s11" style="padding-left: 138pt;text-indent: -12pt;line-height: 11pt;text-align: left;">STREQUAL<span class="p">, i.e., strings containing the same sequence of characters</span></p></li><li><p style="padding-left: 138pt;text-indent: -12pt;line-height: 11pt;text-align: left;">Lists and <span class="s11">CAR </span>of <span class="s16">X </span>is <span class="s11">EQUAL </span>to <span class="s11">CAR </span>of <span class="s16">Y</span>, and <span class="s11">CDR </span>of <span class="s16">X </span>is <span class="s11">EQUAL </span>to <span class="s11">CDR </span>of <span class="s16">Y</span></p></li></ol></li></ol><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">EQUAL <span class="p">returns </span>NIL <span class="p">otherwise. Note that </span>EQUAL <span class="p">can be significantly slower than </span>EQ<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">A loose description of <span class="s11">EQUAL </span>might be to say that <span class="s16">X </span>and <span class="s16">Y </span>are <span class="s11">EQUAL </span>if they print out the same way.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>EQUALALL </b><i>X Y</i>)                                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Like <span class="s11">EQUAL</span>, except it descends into the contents of arrays, hash arrays, user data types, etc.  Two non-<span class="s11">EQ </span>arrays may be <span class="s11">EQUALALL </span>if their respective componants are <span class="s11">EQUALALL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 232pt;text-indent: 0pt;text-align: left;">CONDITIONALS AND ITERATIVE STATEMENTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><b>Note</b>: In general, <span class="s11">EQUALALL </span>descends all the way into all datatypes, both those you’ve defined and those built into the system. If you have a data structure with fonts and pointers to windows, <span class="s11">EQUALALL </span>will descend those also. If the data structures are circular, as windows are, <span class="s11">EQUALALL </span>can cause stack overflow.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Logical Predicates                                                                                                                                    </h4><p class="s16" style="padding-top: 5pt;padding-left: 78pt;text-indent: -24pt;text-align: justify;"><span class="s11">(</span><b>AND </b>X<span class="s25">1</span> X<span class="s25">2</span> ... X<span class="s25">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Takes an indefinite number of arguments (including zero), that are evaluated in order. If any argument evaluates to <span class="s11">NIL</span>, <span class="s11">AND </span>immediately returns <span class="s11">NIL</span>, without evaluating the remaining arguments. If all of the arguments evaluate to non-<span class="s11">NIL</span>, the value of the last argument is returned. <span class="s11">(AND) =&gt; T</span>.</p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: -24pt;text-align: justify;"><span class="s11">(</span><b>OR </b>X<span class="s25">1</span> X<span class="s25">2</span> ... X<span class="s25">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Takes an indefinite number of arguments (including zero), that are evaluated in order. If any argument is non-<span class="s11">NIL</span>, the value of that argument is returned by <span class="s11">OR </span>(without evaluating the remaining arguments). If all of the arguments evaluate to <span class="s11">NIL</span>, <span class="s11">NIL </span>is returned. <span class="s11">(OR) =&gt; NIL</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">AND <span class="p">and </span>OR <span class="p">can be used as simple logical connectives, but note that they may not evaluate all of their arguments. This makes a difference if some of the arguments cause side-effects. This also means you can use </span>AND <span class="p">and </span>OR <span class="p">as simple conditional statements. For example: </span>(AND (LISTP <i>X</i>) (CDR <i>X</i>)) <span class="p">returns the value of </span>(CDR <i>X</i>) <span class="p">if </span><i>X </i><span class="p">is a list cell; otherwise it returns </span>NIL <span class="p">without evaluating </span>(CDR <i>X</i>)<span class="p">. In general, you should avoid this use of </span>AND <span class="p">and </span>OR <span class="p">in favor of more explicit conditional statements in order to make programs more readable.</span></p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">COND Conditional Function                                                                                                                     </h4><p class="s16" style="padding-top: 6pt;padding-left: 77pt;text-indent: -24pt;text-align: justify;"><span class="s11">(</span><b>COND </b>CLAUSE<span class="s25">1</span> CLAUSE<span class="s25">2</span> ... CLAUSE<span class="s25">K</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p class="s16" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s11">COND </span><span class="p">takes an indefinite number of arguments, called clauses. Each </span>CLAUSE<span class="s25">i</span> <span class="p">is a list of the form </span><span class="s11">(</span>P<span class="s25">i</span> C<span class="s25">i1</span> <b>... </b>C<span class="s25">iN</span><span class="s11">)</span><span class="p">, where </span>P<span class="s25">i</span> <span class="p">is the predicate, and </span>C<span class="s25">i1</span> <span class="s11">... </span>C<span class="s25">iN</span> <span class="p">are the consequents.  The operation of </span><span class="s11">COND </span><span class="p">can be paraphrased as:</span></p><p class="s16" style="padding-top: 4pt;padding-left: 95pt;text-indent: 0pt;text-align: left;"><span class="s11">IF </span>P<span class="s25">1</span> <span class="s11">THEN </span>C<span class="s25">11</span> <span class="s11">... </span>C<span class="s25">1N</span> <span class="s11">ELSEIF </span>P<span class="s25">2</span> <span class="s11">THEN </span>C<span class="s25">21</span> <span class="s11">... </span>C<span class="s25">2N</span> <span class="s11">ELSEIF </span>P<span class="s25">3</span> <span class="s11">...</span></p><p class="s16" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">The clauses are considered in sequence as follows: The predicate </span>P<span class="s25">1</span> <span class="p">of the clause </span>CLAUSE<span class="s25">i</span> <span class="p">is evaluated. If the value of </span>P<span class="s25">1</span> <span class="p">is “true” (non-</span><span class="s11">NIL</span><span class="p">), the consequents </span>C<span class="s25">i1</span> ... C<span class="s25">iN</span> <span class="p">are evaluated in order, and the value of the </span><span class="s11">COND </span><span class="p">is the value of the last expression in the clause. If </span>P<span class="s25">1</span> <span class="p">is “false” (</span><span class="s11">EQ </span><span class="p">to </span><span class="s11">NIL</span><span class="p">), then the remainder of </span>CLAUSE<span class="s25">i</span> <span class="p">is ignored, and the next clause, </span>CLAUSE<span class="s25">i+1</span><span class="p">, is considered. If no </span>P<span class="s25">i</span> <span class="p">is true for </span><span class="s9">any </span><span class="p">clause, the value of the </span><span class="s11">COND </span><span class="p">is </span><span class="s11">NIL</span><span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If a clause has no consequents, and has the form (<span class="s16">P</span><span class="s25">i</span>), then if <span class="s16">P</span><span class="s25">i</span><span class="s16"> </span>evaluates to non-<span class="s11">NIL</span>, it is returned as the value of the <span class="s11">COND</span>. It is only evaluated once.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Example:</p><p class="s19" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(DEFINEQ (DOUBLE (X)</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(COND ((NUMBERP X) (PLUS X X))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 7pt;padding-left: 180pt;text-indent: 0pt;line-height: 88%;text-align: left;">((STRINGP X) (CONCAT X X)) ((ATOM X) (PACK* X X))</p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 88%;text-align: left;">(T (PRINT &quot;unknown&quot;) X) ((HORRIBLE-ERROR))]</p><p class="s11" style="padding-left: 168pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(DOUBLE)</p><p class="s19" style="padding-top: 1pt;padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(DOUBLE 5)</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">10</p><p class="s19" style="padding-top: 2pt;padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(DOUBLE &quot;FOO&quot;) &quot;FOOFOO&quot;</span></p><p class="s19" style="padding-top: 2pt;padding-left: 180pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s11">(DOUBLE ’BAR) BARBAR</span></p><p class="s19" style="padding-top: 1pt;padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(DOUBLE ’(A B C))</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 88%;text-align: left;">&quot;unknown&quot; (A B C)</p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">A few points about this example: Notice that <span class="s11">5 </span>is both a number and an atom, but it is “caught” by the <span class="s11">NUMBERP </span>clause before the <span class="s11">ATOM </span>clause. Also notice the predicate <span class="s11">T</span>, which is always true. This is the normal way to indicate a <span class="s11">COND </span>clause which will always be executed (if none of the preceeding clauses are true). <span class="s11">(HORRIBLE-ERROR) </span>will never be executed.</p><h4 style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">The IF Statement                                                                                                                                       </h4><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The <span class="s11">IF </span>statement lets you write conditional expressions that are easier to read than using <span class="s11">COND </span>directly. CLISP translates expressions using <span class="s11">IF</span>, <span class="s11">THEN</span>, <span class="s11">ELSEIF</span>, or <span class="s11">ELSE </span>(or their lowercase versions) into equivalent <span class="s11">COND</span>s. In general, statements of the form:</p><p class="s11" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">(if <i>AAA </i>then <i>BBB </i>elseif <i>CCC </i>then <i>DDD </i>else <i>EEE</i>)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">are translated to:</p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">(COND (<i>AAA BBB</i>)</p><p class="s11" style="padding-left: 158pt;text-indent: 0pt;line-height: 88%;text-align: left;">(<i>CCC DDD</i>) (T <i>EEE</i>))</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The segment between <span class="s11">IF </span>or <span class="s11">ELSEIF </span>and the next <span class="s11">THEN </span>corresponds to the predicate of a <span class="s11">COND </span>clause, and the segment between <span class="s11">THEN </span>and the next <span class="s11">ELSE </span>or <span class="s11">ELSEIF </span>as the consequent(s). <span class="s11">ELSE </span>is the same as <span class="s11">ELSEIF T THEN</span>. These words are spelling corrected using the spelling list <span class="s11">CLISPIFWORDSPLST</span>. You may also use lower-case versions (<span class="s11">if</span>, <span class="s11">then</span>, <span class="s11">elseif</span>, <span class="s11">else</span>).</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If there is nothing following a <span class="s11">THEN</span>, or <span class="s11">THEN </span>is omitted entirely, the resulting <span class="s11">COND </span>clause has a predicate but no consequent. For example, <span class="s11">(if X then elseif ...) </span>and <span class="s11">(if X elseif ...) </span>both translate to <span class="s11">(COND (X) ...)</span>—if <span class="s11">X </span>is not <span class="s11">NIL</span>, it is returned as the value of the <span class="s11">COND</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Each predicate must be a single expression, but multiple expressions are allowed as the consequents after <span class="s11">THEN </span>or <span class="s11">ELSE</span>. Multiple consequent expressions are implicitely wrapped in a <span class="s11">PROGN</span>, and the value of the last one is returned as the value of the consequent.  For example:</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">(if X then (PRINT &quot;FOO&quot;) (PRINT &quot;BAR&quot;) elseif Y then (PRINT &quot;BAZ&quot;))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 232pt;text-indent: 0pt;text-align: left;">CONDITIONALS AND ITERATIVE STATEMENTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Selection Functions                                                                                                                                  </h4><p class="s16" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s11">(</span><b>SELECTQ </b>X CLAUSE<span class="s25">1</span> CLAUSE<span class="s25">2</span> ... CLAUSE<span class="s25">K</span></p><p class="s16" style="padding-left: 60pt;text-indent: 0pt;line-height: 11pt;text-align: left;">DEFAULT<span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">Selects a form or sequence of forms based on the value of </span>X<span class="p">. Each clause </span>CLAUSE<span class="s25">i</span> <span class="p">is a list of the form </span><span class="s11">(</span>S<span class="s25">i</span> C<span class="s25">i1</span> <b>... </b>C<span class="s25">iN</span><span class="s11">) </span><span class="p">where </span>S<span class="s25">i</span> <span class="p">is the selection key.  Think of </span><span class="s11">SELECTQ </span><span class="p">as:</span></p><p class="s16" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">IF </span>X <span class="s11">= </span>S<span class="s25">1</span> <span class="s11">THEN </span>C<span class="s25">11</span> <span class="s11">... </span>C<span class="s25">1N</span> <span class="s11">ELSEIF </span>X <span class="s11">= </span>S<span class="s25">2</span></p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">THEN ... ELSE <i>DEFAULT</i></p><p class="s16" style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>S<span class="s25">i</span> <span class="p">is a symbol, the value of </span>X <span class="p">is tested to see if it is </span><span class="s11">EQ </span><span class="p">to </span>S<span class="s25">i</span> <span class="p">(which is </span><span class="s9">not </span><span class="p">evaluated). If so, the expressions </span>C<span class="s25">i1</span> <span class="s11">... </span>C<span class="s25">iN</span> <span class="p">are evaluated in sequence, and the value of the </span><span class="s11">SELECTQ </span><span class="p">is the value of the last expression.</span></p><p class="s16" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>S<span class="s25">i</span> <span class="p">is a list, the value of </span>X <span class="p">is compared with each element (not evaluated) of </span>S<span class="s25">i</span><span class="p">, and if </span>X <span class="p">is</span></p><p class="s16" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s11">EQ </span><span class="p">to any one of them, then </span>C<span class="s25">i1</span> <span class="s11">... </span>C<span class="s25">iN</span> <span class="p">are evaluated as above.</span></p><p class="s16" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>CLAUSE<span class="s25">i</span> <span class="p">is not selected in one of the two ways described, </span>CLAUSE<span class="s25">i+1</span> <span class="p">is tested, etc., until all the clauses have been tested. If none is selected, </span>DEFAULT <span class="p">is evaluated, and its value is returned as the value of the </span><span class="s11">SELECTQ</span><span class="p">. </span>DEFAULT <span class="p">must be present.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">An example of the form of a <span class="s11">SELECTQ </span>is:</p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[SELECTQ MONTH</p><p class="s11" style="padding-left: 150pt;text-indent: -18pt;line-height: 88%;text-align: left;">(FEBRUARY (if (LEAPYEARP) then 29 else 28)) ((SEPTEMBER APRIL JUNE NOVEMBER) 30) 31]</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the value of <span class="s11">MONTH </span>is the symbol <span class="s11">FEBRUARY</span>, the <span class="s11">SELECTQ </span>returns <span class="s11">28 </span>or <span class="s11">29 </span>(depending on <span class="s11">(LEAPYEARP)</span>); otherwise if <span class="s11">MONTH </span>is <span class="s11">APRIL</span>, <span class="s11">JUNE</span>, <span class="s11">SEPTEMBER</span>, or <span class="s11">NOVEMBER</span>, the</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">SELECTQ <span class="p">returns </span>30<span class="p">; otherwise it returns </span>31<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">SELECTQ </span>compiles open, and is therefore very fast; however, it will not work if the value of <span class="s16">X </span>is a list, a large integer, or floating point number, since <span class="s11">SELECTQ </span>uses <span class="s11">EQ </span>for all comparisons.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">SELCHARQ <span class="p">(Chapter 2) is a version of </span>SELECTQ <span class="p">that recognizes </span>CHARCODE <span class="p">symbols.</span></p><p class="s16" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s11">(</span><b>SELECTC </b>X CLAUSE<span class="s25">1</span> CLAUSE<span class="s25">2</span> ... CLAUSE<span class="s25">K</span></p><p class="s16" style="padding-left: 60pt;text-indent: 0pt;line-height: 11pt;text-align: left;">DEFAULT<span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">“SELECTQ<span class="p">-on-Constant.” Like </span>SELECTQ<span class="p">, but the selection keys are evaluated, and the result used as a </span>SELECTQ<span class="p">-style selection key.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">SELECTC <span class="p">is compiled as a </span>SELECTQ<span class="p">, with the selection keys evaluated at compile-time. Therefore, the selection keys act like compile-time constants (see Chapter 18).</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example:</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">[SELECTC NUM</p><p class="s11" style="padding-left: 88pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((for X from 1 to 9 collect (TIMES X X)) &quot;SQUARE&quot;) &quot;HIP&quot;]</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">compiles as:</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">(SELECTQ NUM</p><p class="s11" style="padding-left: 88pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((1 4 9 16 25 36 49 64 81) &quot;SQUARE&quot;) &quot;HIP&quot;)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">PROG and Associated Control Functions                                                                                              </h4><p class="s16" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>PROG1 </b>X<span class="s25">1</span> X<span class="s25">2</span> ... X<span class="s25">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Evaluates its arguments in order, and returns the value of its first argument <span class="s16">X</span><span class="s25">1</span>. For example, <span class="s11">(PROG1 X (SETQ X Y)) </span>sets <span class="s11">X </span>to <span class="s11">Y</span>, and returns <span class="s11">X</span>’s original value.</p><p class="s16" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>PROG2 </b>X<span class="s25">1</span> X<span class="s25">2</span> ... X<span class="s25">N</span><span class="s11">) </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">PROG1</span>. Evaluates its arguments in order, and returns the value of its second argument <span class="s16">X</span><span class="s25">2</span>.</p><p class="s16" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>PROGN </b>X<span class="s25">1</span> X<span class="s25">2</span> ... X<span class="s25">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">PROGN <span class="p">evaluates each of its arguments in order, and returns the value of its last argument. </span>PROGN <span class="p">is used to specify more than one computation where the syntax allows only one, e.g., </span>(SELECTQ ... (PROGN ...)) <span class="p">allows evaluation of several expressions as the default condition for a </span>SELECTQ<span class="p">.</span></p><p class="s16" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>PROG </b>VARLST E<span class="s25">1</span> E<span class="s25">2</span> ... E<span class="s25">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Lets you bind some variables while you execute a series of expressions. <span class="s16">VARLST </span>is a list of local variables (must be <span class="s11">NIL </span>if no variables are used). Each symbol in <span class="s16">VARLST </span>is treated as the name of a local variable and bound to <span class="s11">NIL</span>. <span class="s16">VARLST </span>can also contain lists of the form <span class="s11">(</span><span class="s16">NAME FORM</span><span class="s11">)</span>. In this case, <span class="s16">NAME </span>is the name of the variable and is bound to the value of <span class="s16">FORM</span>. The evaluation takes place before any of the bindings are performed, e.g., <span class="s11">(PROG ((X Y) (Y X)) ...) </span>will bind local variable <span class="s11">X </span>to the value of <span class="s11">Y </span>(evaluated <i>outside </i>the <span class="s11">PROG</span>) and local variable <span class="s11">Y </span>to the value of <span class="s11">X </span>(outside the <span class="s11">PROG</span>). An attempt to use anything other than a symbol as a <span class="s11">PROG </span>variable will cause an error, <span class="s11">Arg not </span>symbol. An attempt to use <span class="s11">NIL </span>or <span class="s11">T </span>as a <span class="s11">PROG </span>variable will cause an error, <span class="s11">Attempt to bind NIL or T</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The rest of the <span class="s11">PROG </span>is a sequence of forms and symbols (labels). The forms are evaluated sequentially; the labels serve only as markers. The two special functions, <span class="s11">GO </span>and <span class="s11">RETURN</span>, alter this flow of control as described below. The value of the <span class="s11">PROG </span>is usually specified by the function <span class="s11">RETURN</span>. If no <span class="s11">RETURN </span>is executed before the <span class="s11">PROG </span>“falls off the end,” the value of the <span class="s11">PROG </span>is <span class="s11">NIL</span>.</p><p class="s11" style="padding-top: 8pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">(<b>GO </b><i>L</i>) <span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">GO </span>is used to cause a transfer in a <span class="s11">PROG</span>. <span class="s11">(GO </span><span class="s16">L</span><span class="s11">) </span>will cause the <span class="s11">PROG </span>to evaluate forms starting at the label <span class="s16">L </span>(<span class="s11">GO </span>does not evaluate its argument). A <span class="s11">GO </span>can be used at any level in a <span class="s11">PROG</span>. If the label is not found, <span class="s11">GO </span>will search higher progs <i>within the same function, </i>e.g., <span class="s11">(PROG ... A ... (PROG ... (GO A)))</span>. If the label is not found in the function in which the <span class="s11">PROG </span>appears, an error is generated, <span class="s11">Undefined or illegal GO</span>.</p><p class="s11" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>RETURN </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">A <span class="s11">RETURN </span>is the normal exit for a <span class="s11">PROG</span>. Its argument is evaluated and is immediately returned the value of the <span class="s11">PROG </span>in which it appears.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 232pt;text-indent: 0pt;text-align: left;">CONDITIONALS AND ITERATIVE STATEMENTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: If a <span class="s11">GO </span>or <span class="s11">RETURN </span>is executed in an interpreted function which is not a <span class="s11">PROG</span>, the <span class="s11">GO </span>or <span class="s11">RETURN </span>will be executed in the last interpreted <span class="s11">PROG </span>entered if any, otherwise cause an error.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">GO <span class="p">or </span>RETURN <span class="p">inside of a compiled function that is not a </span>PROG <span class="p">is not allowed, and will cause an error at compile time.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">As a corollary, <span class="s11">GO </span>or <span class="s11">RETURN </span>in a functional argument, e.g., to <span class="s11">SORT</span>, will not work compiled. Also, since <span class="s11">NLSETQ</span>’s and <span class="s11">ERSETQ</span>’s compile as <i>separate </i>functions, a <span class="s11">GO </span>or <span class="s11">RETURN </span><i>cannot </i>be used inside of a compiled <span class="s11">NLSETQ </span>or <span class="s11">ERSETQ </span>if the corresponding <span class="s11">PROG </span>is outside, i.e., above, the <span class="s11">NLSETQ </span>or <span class="s11">ERSETQ</span>.</p><p class="s16" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s11">(</span><b>LET </b>VARLST E<span class="s25">1</span> E<span class="s25">2</span> <span class="s11">... </span>E<span class="s25">N</span><span class="s11">) </span><span class="p">[Macro]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">LET <span class="p">is essentially a </span>PROG <span class="p">that can’t contain </span>GO<span class="p">’s or </span>RETURN<span class="p">’s, and whose last form is the returned value.</span></p><p class="s16" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s11">(</span><b>LET* </b>VARLST E<span class="s25">1</span> E<span class="s25">2</span> <span class="s11">... </span>E<span class="s25">N</span><span class="s11">) </span><span class="p">[Macro]</span></p><p class="s16" style="padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s11">(</span><b>PROG* </b>VARLST E<span class="s25">1</span> E<span class="s25">2</span> <span class="s11">... </span>E<span class="s25">N</span><span class="s11">) </span><span class="p">[Macro]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">LET* <span class="p">and </span>PROG* <span class="p">differ from </span>LET <span class="p">and </span>PROG <span class="p">only in that the binding of the bound variables is done “sequentially.” Thus</span></p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LET* ((A (LIST 5))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(B (LIST A A)))</p><p class="s11" style="padding-left: 148pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(EQ A (CADR B)))</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">would evaluate to <span class="s11">T</span>; whereas the same form with <span class="s11">LET </span>might find <span class="s11">A </span>an unbound variable when evaluating <span class="s11">(LIST A A)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 30pt;text-indent: -24pt;text-align: left;">The Iterative Statement                                                                                                                             </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The various forms of the iterative statement (i.s.) let you write complex loops easily. Rather than writing <span class="s11">PROG</span>, <span class="s11">MAPC</span>, <span class="s11">MAPCAR</span>, etc., let Medley do it for you.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">An iterative statement is a form consisting of a number of special words (known as i.s. operators or i.s.oprs), followed by operands. Many i.s.oprs (<span class="s11">FOR</span>, <span class="s11">DO</span>, <span class="s11">WHILE</span>, etc.) act like loops in other programming languages; others (<span class="s11">COLLECT</span>, <span class="s11">JOIN</span>, <span class="s11">IN</span>, etc.) do things useful in Lisp. You can also use lower-case versions of i.s.oprs (<span class="s11">do</span>, <span class="s11">collect</span>, etc.).</p><p class="s19" style="padding-top: 4pt;padding-left: 66pt;text-indent: 0pt;line-height: 88%;text-align: justify;"><span class="s21"> </span><span class="s11">(for X from 1 to 5 do (PRINT ’FOO)) FOO</span></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 88%;text-align: justify;">FOO FOO FOO FOO NIL</p><p class="s19" style="padding-top: 2pt;padding-left: 66pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">(for X from 2 to 10 by 2 collect (TIMES X X)) (4 16 36 64 100)</span></p><p class="s19" style="padding-top: 2pt;padding-left: 66pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">(for X in ’(A B 1 C 6.5 NIL (45)) count (NUMBERP X)) 2</span></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Iterative statements are implemented using CLISP, which translates them into the appropriate <span class="s11">PROG</span>s, <span class="s11">MAPCAR</span>s, etc. They’re are translated using all CLISP declarations in effect (standard / fast / undoable /</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">etc.); see Chapter 21. Misspelled i.s.oprs are recognized and corrected using the spelling list <span class="s11">CLISPFORWORDSPLST</span>. Operators can appear in any order; CLISP scans the entire statement before it begins to translate.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If you define a function with the same name as an i.s.opr (<span class="s11">WHILE</span>, <span class="s11">TO</span>, <span class="s11">etc</span>.), that i.s.opr will no longer cause looping when it appears as <span class="s11">CAR </span>of a form, although it will continue to be treated as an i.s.opr if it appears in the interior of an iterative statement. To alert you, a warning message is printed, e.g., (<span class="s11">While defined, therefore disabled in CLISP</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">I.S. Types</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Every iterative statement must have exactly one of the following operators in it (its “is.stype”), to specify what happens on each iteration.  Its operand is called the “body” of the iterative statement.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">DO <i>FORMS                                                    </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Evaluate <span class="s16">FORMS </span>at each iteration. <span class="s11">DO </span>with no other operator specifies an infinite loop. If some explicit or implicit terminating condition is specified, the value of the loop is <span class="s11">NIL</span>. Translates to <span class="s11">MAPC </span>or <span class="s11">MAP </span>whenever possible.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">COLLECT <i>FORM                                                </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The value of <span class="s16">FORM </span>at each iteration is collected in a list, which is returned as the value of the loop when it terminates. Translates to <span class="s11">MAPCAR</span>, <span class="s11">MAPLIST </span>or <span class="s11">SUBSET </span>whenever possible.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">When <span class="s11">COLLECT </span>translates to a <span class="s11">PROG </span>(if <span class="s11">UNTIL</span>, <span class="s11">WHILE</span>, etc. appear in the loop), the translation employs an open <span class="s11">TCONC </span>using two pointers similar to that used by the compiler for compiling <span class="s11">MAPCAR</span>. To disable this translation, perform <span class="s11">(CLDISABLE ’FCOLLECT)</span>.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">JOIN <i>FORM                                                   </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">FORM </span>returns a list; the lists from each iteration are concatenated using <span class="s11">NCONC</span>, forming one long list. Translates to <span class="s11">MAPCONC </span>or <span class="s11">MAPCON </span>whenever possible. <span class="s11">/NCONC</span>, <span class="s11">/MAPCONC</span>, and <span class="s11">/MAPCON </span>are used when the CLISP declaration <span class="s11">UNDOABLE </span>is in effect.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">SUM <i>FORM                                                    </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">The values of <span class="s16">FORM </span>from each iteration are added together and returned as the value of the loop, e.g., <span class="s11">(for I from 1 to 5 sum (TIMES I I)) </span>returns <span class="s11">1+4+9+16+25 =</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">55<span class="p">. </span>IPLUS<span class="p">, </span>FPLUS<span class="p">, or </span>PLUS <span class="p">will be used in the translation depending on the CLISP declarations in effect.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">COUNT <i>FORM                                                  </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Counts the number of times that <span class="s16">FORM </span>is true, and returns that count as the loop’s value.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">ALWAYS <i>FORM                                                 </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">T </span>if the value of <span class="s16">FORM </span>is non-<span class="s11">NIL </span>for all iterations. <b>Note</b>: Returns <span class="s11">NIL </span>as soon as the value of <span class="s16">FORM </span>is <span class="s11">NIL</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 232pt;text-indent: 0pt;text-align: left;">CONDITIONALS AND ITERATIVE STATEMENTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">NEVER <i>FORM </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">ALWAYS</span>, but returns <span class="s11">T </span>if the value of <span class="s16">FORM </span>is <i>never </i>true. <b>Note</b>: Returns <span class="s11">NIL </span>as soon as the value of <span class="s16">FORM </span>is non-<span class="s11">NIL</span>.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Often, you’ll want to set a variable each time through the loop; that’s called the “iteration variable”, or</p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">i.v. for short. The following i.s.types explicitly refer to the i.v. This is explained below under <span class="s11">FOR</span>.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">THEREIS <i>FORM </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the first value of the i.v. for which <span class="s16">FORM </span>is non-<span class="s11">NIL</span>, e.g., <span class="s11">(for X in Y thereis (NUMBERP X)) </span>returns the first number in <span class="s11">Y</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><b>Note</b>: Returns the value of the i.v. as soon as the value of <span class="s16">FORM </span>is non-<span class="s11">NIL</span>.</p><p class="s15" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">LARGEST <i>FORM </i><span class="p">[I.S. Operator]</span></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: left;">SMALLEST <i>FORM </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns the value of the i.v. that provides the largest / smallest value of <span class="s16">FORM</span>.</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">$$EXTREME <span class="p">is always bound to the current greatest / smallest value, </span>$$VAL <span class="p">to the value of the i.v. from which it came.</span></p><p class="s6" style="padding-top: 10pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Iteration Variable I.s.oprs</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">You’ll want to bind variables to use during the loop. Rather than putting the loop inside a <span class="s11">PROG </span>or</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">LET<span class="p">, you can specify bindings like so:</span></p><p class="s15" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">BIND <i>VAR </i><span class="p">[I.S. Operator]</span></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: left;">BIND <i>VARS </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Used to specify dummy variables, which are bound locally within the i.s.</p><p class="s16" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s17">Note</span><span class="p">: You can initialize a variable </span>VAR <span class="p">by saying </span>VAR<span class="s19"></span>FORM<span class="p">:</span></p><p class="s11" style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">(bind HEIGHT <span class="s19"></span><span class="s21"> </span>0 WEIGHT <span class="s19"></span><span class="s21"> </span>0 for SOLDIER in ...)</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">To specify iteration variables, use these operators:</p><p class="s15" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">FOR <i>VAR </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Specifies the iteration variable (i.v.) that is used in conjunction with <span class="s11">IN</span>, <span class="s11">ON</span>, <span class="s11">FROM</span>, <span class="s11">TO</span>, and <span class="s11">BY</span>. The variable is rebound within the loop, so the value of the variable outside the loop is not affected. Example:</p><p class="s19" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(SETQ X 55)</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">55</p><p class="s19" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">(for X from 1 to 5 collect (TIMES X X)) (1 4 9 16 25)</span></p><p class="s19" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">X 55</span></p><p class="s15" style="padding-top: 6pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">FOR OLD <i>VAR </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Like <span class="s11">FOR</span>, but <span class="s16">VAR </span>is <i>not </i>rebound, so its value outside the loop <i>is </i>changed. Example:</p><p class="s19" style="padding-top: 3pt;padding-left: 113pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(SETQ X 55)</span></p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">55</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">(for old X from 1 to 5 collect (TIMES X X)) (1 4 9 16 25)</span></p><p class="s19" style="padding-top: 2pt;padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">X 6</span></p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">FOR <i>VARS                                                    </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">VARS </span>a list of variables, e.g., <span class="s11">(for (X Y Z) in ...)</span>. The first variable is the i.v., the rest are dummy variables. See <span class="s11">BIND </span>above.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">IN <i>FORM                                                     </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s16">FORM </span>must evaluate to a list. The i.v. is set to successive elements of the list, one per iteration. For example, <span class="s11">(for X in Y do ...) </span>corresponds to <span class="s11">(MAPC Y (FUNCTION (LAMBDA (X) ...)))</span>. If no i.v. has been specified, a dummy is supplied, e.g., <span class="s11">(in Y collect CADR) </span>is equivalent to <span class="s11">(MAPCAR Y (FUNCTION CADR))</span>.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">ON <i>FORM                                                     </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">IN</span>, but the i.v. is reset to the corresponding <i>tail </i>at each iteration. Thus <span class="s11">IN </span>corresponds to <span class="s11">MAPC</span>, <span class="s11">MAPCAR</span>, and <span class="s11">MAPCONC</span>, while <span class="s11">ON </span>corresponds to <span class="s11">MAP</span>, <span class="s11">MAPLIST</span>, and <span class="s11">MAPCON</span>.</p><p class="s19" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">(for X on ’(A B C) do (PRINT X)) (A B C)</span></p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(B C)</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">(C) NIL</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: For both <span class="s11">IN </span>and <span class="s11">ON</span>, <span class="s16">FORM </span>is evaluated before the main part of the i.s. is entered, i.e. <i>outside </i>of the scope of any of the bound variables of the i.s. For example, <span class="s11">(for X bind (Y</span><span class="s19"></span><span class="s11">’(1 2 3)) in Y ...) </span>will map down the list which is the value of <span class="s11">Y </span>evaluated <i>outside </i>of the i.s., <i>not </i><span class="s11">(1 2 3)</span>.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">IN OLD <i>VAR                                                  </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Specifies that the i.s. is to iterate down <span class="s16">VAR</span>, with <span class="s16">VAR </span>itself being reset to the corresponding tail at each iteration, e.g., after <span class="s11">(for X in old L do ... until</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">...) <span class="p">finishes, </span>L <span class="p">will be some tail of its original value.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><b>IN OLD </b><span class="s11">(</span>VAR<span class="s19"></span>FORM<span class="s11">)                                           </span><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">IN OLD </span><span class="s16">VAR</span>, except <span class="s16">VAR </span>is first set to value of <span class="s16">FORM</span>.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">ON OLD <i>VAR                                                  </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">IN OLD </span><span class="s16">VAR </span>except the i.v. is reset to the current value of <span class="s16">VAR </span>at each iteration, instead of to <span class="s11">(CAR </span><span class="s16">VAR</span><span class="s11">)</span>.</p><p class="s16" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><b>ON OLD </b><span class="s11">(</span>VAR<span class="s19"></span>FORM<span class="s11">)                                           </span><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">ON OLD </span><span class="s16">VAR</span>, except <span class="s16">VAR </span>is first set to value of <span class="s16">FORM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 232pt;text-indent: 0pt;text-align: left;">CONDITIONALS AND ITERATIVE STATEMENTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INSIDE <i>FORM </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">IN</span>, but treats first non-list, non-<span class="s11">NIL </span>tail as the last element of the iteration, e.g., <span class="s11">INSIDE ’(A B C D . E) </span>iterates five times with the i.v. set to <span class="s11">E </span>on the last iteration. <span class="s11">INSIDE ’A </span>is equivalent to <span class="s11">INSIDE ’(A)</span>, which will iterate once.</p><p class="s15" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">FROM <i>FORM </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Specifies the initial value for a numerical i.v. The i.v. is automatically incremented by 1 after each iteration (unless <span class="s11">BY </span>is specified). If no i.v. has been specified, a dummy i.v. is supplied and initialized, e.g., <span class="s11">(from 2 to 5 collect SQRT) </span>returns <span class="s11">(1.414 1.732</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">2.0 2.236)<span class="p">.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">TO <i>FORM </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Specifies the final value for a numerical i.v. If <span class="s11">FROM </span>is not specified, the i.v. is initialized to 1. If no i.v. has been specified, a dummy i.v. is supplied and initialized. If <span class="s11">BY </span>is not specified, the i.v. is automatically incremented by 1 after each iteration. When the i.v. is definitely being <i>incremented</i>, i.e., either <span class="s11">BY </span>is not specified, or its operand is a positive number, the i.s. terminates when the i.v. exceeds the value of <span class="s16">FORM</span>. Similarly, when the</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">i.v. is definitely being decremented the i.s. terminates when the i.v. becomes <i>less </i>than the value of <span class="s16">FORM </span>(see description of <span class="s11">BY</span>).</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="s16">FORM </span>is evaluated only once, when the i.s. is first entered, and its value bound to a temporary variable against which the i.v. is checked each interation. If the user wishes to specify an i.s. in which the value of the boundary condition is recomputed each iteration, he should use <span class="s11">WHILE </span>or <span class="s11">UNTIL </span>instead of <span class="s11">TO</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">When both the operands to <span class="s11">TO </span>and <span class="s11">FROM </span>are numbers, and <span class="s11">TO</span>’s operand is less than <span class="s11">FROM</span>’s operand, the i.v. is decremented by 1 after each iteration. In this case, the i.s. terminates when the i.v. becomes <i>less </i>than the value of <span class="s16">FORM</span>. For example, <span class="s11">(from 10 to 1 do PRINT) </span>prints the numbers from <span class="s11">10 </span>down to <span class="s11">1</span>.</p><p style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s15">BY </span><span class="s16">FORM </span>(without <span class="s11">IN </span>or <span class="s11">ON</span>) [I.S. Operator]</p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If you aren’t using <span class="s11">IN </span>or <span class="s11">ON</span>, <span class="s11">BY </span>specifies how the i.v. itself is reset at each iteration. If you’re using <span class="s11">FROM </span>or <span class="s11">TO</span>, the i.v. is known to be numerical, so the new i.v. is computed by adding the value of <span class="s16">FORM </span>(which is reevaluated each iteration) to the current value of the i.v., e.g., <span class="s11">(for N from 1 to 10 by 2 collect N) </span>makes a list of the first five odd numbers.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s16">FORM </span>is a positive number (<span class="s16">FORM </span>itself, not its value, which in general CLISP would have no way of knowing in advance), the loop stops when the value of the i.v. <i>exceeds </i>the value of <span class="s11">TO</span>’s operand. If <span class="s16">FORM </span>is a negative number, the loop stops when the value of the</p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">i.v. becomes <i>less </i>than <span class="s11">TO</span>’s operand, e.g., <span class="s11">(for I from N to M by -2 until (LESSP I M) ...)</span>. Otherwise, the terminating condition for each iteration depends on the value of <span class="s16">FORM </span>for that iteration: if <span class="s16">FORM</span><span class="s11">&lt;0</span>, the test is whether the i.v. is less than <span class="s11">TO</span>’s operand, if <span class="s16">FORM</span><span class="s11">&gt;0 </span>the test is whether the i.v. exceeds <span class="s11">TO</span>’s operand; if <span class="s16">FORM </span><span class="s11">= 0</span>, the loop terminates unconditionally.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">If you didn’t use <span class="s11">FROM </span>or <span class="s11">TO </span>and <span class="s16">FORM </span>is not a number, the i.v. is simply reset to the value of <span class="s16">FORM </span>after each iteration, e.g., <span class="s11">(for I from N by (FOO) ...) </span>sets <span class="s11">I </span>to the value of <span class="s11">(FOO) </span>on each loop after the first.</p><p style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s15">BY </span><span class="s16">FORM </span>(with <span class="s11">IN </span>or <span class="s11">ON</span>)                                                                                                 [I.S. Operator]</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If you did use <span class="s11">IN </span>or <span class="s11">ON</span>, <span class="s16">FORM</span>’s value determines the <i>tail </i>for the next iteration, which in turn determines the value for the i.v. as described earlier, i.e., the new i.v. is <span class="s11">CAR </span>of the tail for <span class="s11">IN</span>, the tail itself for <span class="s11">ON</span>. In conjunction with <span class="s11">IN</span>, you can refer to the current tail within <span class="s16">FORM </span>by using the i.v. or the operand for <span class="s11">IN/ON</span>, e.g., <span class="s11">(for Z in L by (CDDR </span><span class="s16">Z</span><span class="s11">)</span></p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">...) <span class="p">or </span>(for Z in L by (CDDR <i>L</i>) ...)<span class="p">. At translation time, the name of the internal variable which holds the value of the current tail is substituted for the i.v. throughout </span><i>FORM</i><span class="p">. For example, </span>(for X in Y by (CDR (MEMB ’FOO (CDR X))) collect X) <span class="p">specifies that after each iteration, </span>CDR <span class="p">of the current tail is to be searched for the atom </span>FOO<span class="p">, and (</span>CDR <span class="p">of) this latter tail to be used for the next iteration.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">AS <i>VAR                                                      </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Lets you have more than one i.v. for a single loop, e.g., <span class="s11">(for X in Y as U in V do</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">...) <span class="p">moves through the lisps </span>Y <span class="p">and </span>V <span class="p">in parallel (see </span>MAP2C<span class="p">). The loop ends when any of the terminating conditions is met, e.g., </span>(for X in Y as I from 1 to 10 collect X) <span class="p">makes a list of the first ten elements of </span>Y<span class="p">, or however many elements there are on </span>Y <span class="p">if less than </span>10<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The operand to <span class="s11">AS</span>, <span class="s16">VAR</span>, specifies the new i.v. For the remainder of the i.s., or until another <span class="s11">AS </span>is encountered, all operators refer to the new i.v. For example, <span class="s11">(for I from</span></p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">1 to N<span class="s35">1</span> as J from 1 to N<span class="s35">2</span> by 2 as K from N<span class="s35">3</span> to 1 by -1 ...) <span class="p">terminates when </span>I <span class="p">exceeds </span>N<span class="s35">1</span><span class="p">, or </span>J <span class="p">exceeds </span>N<span class="s35">2</span><span class="p">, or </span>K <span class="p">becomes less than </span>1<span class="p">. After each iteration, </span>I <span class="p">is incremented by </span>1<span class="p">, </span>J <span class="p">by </span>2<span class="p">, and </span>K <span class="p">by </span>-1<span class="p">.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">OUTOF <i>FORM                                                  </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For use with generators. On each iteration, the i.v. is set to successive values returned by the generator.  The loop ends when the generator runs out.</p><p class="s6" style="padding-top: 10pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Condition I.S. Oprs</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">What if you want to do things only on certain times through the loop? You could make the loop body a big <span class="s11">COND</span>, but it’s much more readable to use one of these:</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">WHEN <i>FORM                                                   </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Only run the loop body when <span class="s11">FORM</span>’s value is non-<span class="s11">NIL</span>. For example, <span class="s11">(for X in Y collect X when (NUMBERP X)) </span>collects only the elements of <span class="s11">Y </span>that are numbers.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">UNLESS <i>FORM                                                 </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Opposite of <span class="s11">WHEN</span>: <span class="s11">WHEN Z </span>is the same as <span class="s11">UNLESS (NOT Z)</span>.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">WHILE <i>FORM                                                  </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">WHILE </span><span class="s16">FORM </span>evaluates <span class="s16">FORM </span><i>before </i>each iteration, and if the value is <span class="s11">NIL</span>, exits.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 232pt;text-indent: 0pt;text-align: left;">CONDITIONALS AND ITERATIVE STATEMENTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">UNTIL <i>FORM </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Opposite of <span class="s11">WHILE</span>: Evaluates <span class="s16">FORM </span><i>before </i>each iteration, and if the value is <i>not </i><span class="s11">NIL</span>, exits.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">REPEATWHILE <i>FORM </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">WHILE </span>except the test is performed <i>after </i>the loop body, but before the i.v. is reset for the next iteration.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">REPEATUNTIL <i>FORM </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">UNTIL</span>, except the test is performed <i>after </i>the loop body.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Other I.S. Operators</p><p class="s15" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">FIRST <i>FORM </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">FORM </span>is evaluated once before the first iteration, e.g., <span class="s11">(for X Y Z in L first (FOO Y Z) ...)</span>, and <span class="s11">FOO </span>could be used to initialize <span class="s11">Y </span>and <span class="s11">Z</span>.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">FINALLY <i>FORM </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">FORM </span>is evaluated after the loop terminates. For example, <span class="s11">(for X in L bind Y_0 do (if (ATOM X) then (SETQ Y (PLUS Y 1))) finally (RETURN Y)) </span>will return the number of atoms in <span class="s11">L</span>.</p><p class="s15" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">EACHTIME <i>FORM </i><span class="p">[I.S. Operator]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">FORM <span class="p">is evaluated at the beginning of each iteration before, and regardless of, any testing. For example, consider,</span></p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(for I from 1 to N</p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 9pt;text-align: left;">do (... (FOO I) ...)</p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 9pt;text-align: left;">unless (... (FOO I) ...)</p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;">until (... (FOO I) ...))</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">You might want to set a temporary variable to the value of (<span class="s11">FOO I) </span>in order to avoid computing it three times each iteration. However, without knowing the translation, you can’t know whether to put the assignment in the operand to <span class="s11">DO</span>, <span class="s11">UNLESS</span>, or <span class="s11">UNTIL</span>. You can avoid this problem by simply writing <span class="s11">EACHTIME (SETQ J (FOO I))</span>.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">DECLARE: <i>DECL </i><span class="p">[I.S. Operator]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">Inserts the form </span>(DECLARE <i>DECL</i>) <span class="p">immediately following the </span>PROG <span class="p">variable list in the translation, or, in the case that the translation is a mapping function rather than a </span>PROG<span class="p">, immediately following the argument list of the lambda expression in the translation. This can be used to declare variables bound in the iterative statement to be compiled as local or special variables. For example </span>(for X in Y declare: (LOCALVARS X) ...)<span class="p">. Several </span>DECLARE:<span class="p">s can apppear in the same i.s.; the declarations are inserted in the order they appear.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">DECLARE <i>DECL </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">DECLARE:</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">Since <span class="s11">DECLARE </span>is also the name of a function, <span class="s11">DECLARE </span>cannot be used as an i.s. operator when it appears as <span class="s11">CAR </span>of a form, i.e. as the first i.s. operator in an iterative statement. However, <span class="s11">declare </span>(lowercase version) <i>can </i>be the first i.s. operator.</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">ORIGINAL <i>I.S.OPR OPERAND                                    </i><span class="p">[I.S.  Operator]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">I.S.OPR <span class="p">will be translated using its original, built-in interpretation, independent of any user defined i.s. operators.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are also a number of i.s.oprs that make it easier to create iterative statements that use the clock, looping for a given period of time. See timers, Chapter 12.</p><p class="s6" style="padding-top: 10pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Miscellaneous Hints For Using I.S.Oprs</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Lowercase versions of all i.s. operators are equivalent to the uppercase, e.g., <span class="s11">(for X in Y ...) </span>is equivalent to <span class="s11">(FOR X IN Y ...)</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">Each i.s. operator is of lower precedence than all Interlisp forms, so parentheses around the operands can be omitted, and will be supplied where necessary, e.g., </span>BIND (X Y Z) <span class="p">can be written </span>BIND X Y Z<b>, </b>OLD (X_<i>FORM</i>) <span class="p">as </span>OLD X_<i>FORM</i>, <span class="p">etc.</span></p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s11">RETURN </span>or <span class="s11">GO </span>may be used in any operand. (In this case, the translation of the iterative statement will always be in the form of a <span class="s11">PROG</span>, never a mapping function.) <span class="s11">RETURN </span>means return from the loop (with the indicated value), <i>not </i>from the function in which the loop appears. <span class="s11">GO </span>refers to a label elsewhere in the function in which the loop. appears, except for the labels <span class="s11">$$LP</span>, <span class="s11">$$ITERATE</span>, and</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">$$OUT <span class="p">which are reserved, as described below.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">In the case of <span class="s11">FIRST</span>, <span class="s11">FINALLY</span>, <span class="s11">EACHTIME</span>, <span class="s11">DECLARE: </span>or one of the i.s.types, e.g., <span class="s11">DO</span>, <span class="s11">COLLECT</span>, <span class="s11">SUM</span>, etc., the operand can consist of more than one form, e.g., <span class="s11">COLLECT (PRINT (CAR X)) (CDR X)</span>, in which case a <span class="s11">PROGN </span>is supplied.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Each operand can be the name of a function, in which case it is applied to the (last) i.v., e.g., <span class="s11">(for X in Y do PRINT when NUMBERP) </span>is the same as <span class="s11">(for X in Y do (PRINT X) when (NUMBERP X))</span>. Note that the i.v. need not be explicitly specified, e.g., <span class="s11">(in Y do PRINT when NUMBERP) </span>will work.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">For i.s.types, e.g., <span class="s11">DO</span>, <span class="s11">COLLECT</span>, <span class="s11">JOIN</span>, the function is always applied to the first i.v. in the i.s., whether explicity named or not. For example, <span class="s11">(in Y as I from 1 to 10 do PRINT) </span>prints elements on <span class="s11">Y</span>, not integers between 1 and 10.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Note that this feature does not make much sense for <span class="s11">FOR</span>, <span class="s11">OLD</span>, <span class="s11">BIND</span>, <span class="s11">IN</span>, or <span class="s11">ON</span>, since they “operate” before the loop starts, when the i.v. may not even be bound.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">In the case of <span class="s11">BY </span>in conjunction with <span class="s11">IN</span>, the function is applied to the current <i>tail </i>e.g., <span class="s11">(for X in Y by CDDR ...) </span>is the same as <span class="s11">(for X in Y by (CDDR X) ...)</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">While the exact translation of a loop depends on which operators are present, a <span class="s11">PROG </span>will always be used whenever the loop specifies dummy variables—if <span class="s11">BIND </span>appears, or there is more than one variable specified by a <span class="s11">FOR</span>, or a <span class="s11">GO</span>, <span class="s11">RETURN</span>, or a reference to the variable <span class="s11">$$VAL </span>appears in any of the operands. When <span class="s11">PROG </span>is used, the form of the translation is:</p><p class="s11" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PROG <i>VARIABLES</i></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{initialize}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 232pt;text-indent: 0pt;text-align: left;">CONDITIONALS AND ITERATIVE STATEMENTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">$$LP {eachtime}</p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 9pt;text-align: left;">{test}</p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{body}</p><p class="s11" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">$$ITERATE</p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 9pt;text-align: left;">{aftertest}</p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 88%;text-align: left;">{update} (GO $$LP)</p><p class="s11" style="padding-top: 4pt;padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;">$$OUT {finalize} (RETURN $$VAL))</p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">where <span class="s11">{test} </span>corresponds to that part of the loop that tests for termination and also for those iterations for which <span class="s11">{body} </span>is not going to be executed, (as indicated by a <span class="s11">WHEN </span>or <span class="s11">UNLESS</span>); <span class="s11">{body} </span>corresponds to the operand of the i.s.type, e.g., <span class="s11">DO</span>, <span class="s11">COLLECT</span>, etc.; <span class="s11">{aftertest} </span>corresponds to those tests for termination specified by <span class="s11">REPEATWHILE </span>or <span class="s11">REPEATUNTIL</span>; and <span class="s11">{update} </span>corresponds to that part that resets the tail, increments the counter, etc. in preparation for the next iteration.</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">{initialize}<span class="p">, </span>{finalize}<span class="p">, and </span>{eachtime} <span class="p">correspond to the operands of </span>FIRST<span class="p">, </span>FINALLY<span class="p">, and </span>EACHTIME<span class="p">, if any.</span></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Since <span class="s11">{body} </span>always appears at the top level of the <span class="s11">PROG</span>, you can insert labels in <span class="s11">{body}</span>, and <span class="s11">GO </span>to them from within <span class="s11">{body} </span>or from other i.s. operands, e.g., <span class="s11">(for X in Y first (GO A) do (FOO) A (FIE))</span>. However, since <span class="s11">{body} </span>is dwimified as a list of forms, the label(s) should be added to the dummy variables for the iterative statement in order to prevent their being dwimified and possibly “corrected”, e.g., <span class="s11">(for X in Y bind A first (GO A) do (FOO) A (FIE))</span>. You can also <span class="s11">GO </span>to <span class="s11">$$LP</span>, <span class="s11">$$ITERATE</span>, or <span class="s11">$$OUT</span>, or explicitly set <span class="s11">$$VAL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Errors in Iterative Statements</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">An error will be generated and an appropriate diagnostic printed if any of the following conditions hold:</p><ol id="l9"><li><p style="padding-top: 6pt;padding-left: 42pt;text-indent: -12pt;text-align: justify;">Operator with null operand, i.e., two adjacent operators, as in <span class="s11">(for X in Y until do ...)</span></p></li><li><p style="padding-top: 6pt;padding-left: 42pt;text-indent: -12pt;text-align: left;">Operand consisting of more than one form (except as operand to <span class="s11">FIRST</span>, <span class="s11">FINALLY</span>, or one of the i.s.types), e.g., <span class="s11">(for X in Y (PRINT X) collect ...)</span>.</p></li><li><p class="s11" style="padding-top: 6pt;padding-left: 42pt;text-indent: -12pt;text-align: justify;">IN<span class="p">, </span>ON<span class="p">, </span>FROM<span class="p">, </span>TO<span class="p">, or </span>BY <span class="p">appear twice in same i.s.</span></p></li><li><p style="padding-top: 6pt;padding-left: 42pt;text-indent: -12pt;text-align: justify;">Both <span class="s11">IN </span>and <span class="s11">ON </span>used on same i.v.</p></li><li><p class="s11" style="padding-top: 6pt;padding-left: 42pt;text-indent: -12pt;text-align: justify;">FROM <span class="p">or </span>TO <span class="p">used with </span>IN <span class="p">or </span>ON <span class="p">on same i.v.</span></p></li><li><p style="padding-top: 6pt;padding-left: 42pt;text-indent: -12pt;text-align: justify;">More than one i.s.type, e.g., a <span class="s11">DO </span>and a <span class="s11">SUM</span>.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 153%;text-align: justify;">In 3, 4, or 5, an error is not generated if an intervening <span class="s11">AS </span>occurs. If an error occurs, the i.s. is left unchanged.</p><p class="s11" style="padding-left: 29pt;text-indent: 0pt;text-align: justify;"><span class="p">If no </span>DO<span class="p">, </span>COLLECT<span class="p">, </span>JOIN <span class="p">or any of the other i.s.types are specified, CLISP will first attempt to find an operand consisting of more than one form, e.g., </span>(for X in Y (PRINT X) when ATOM X ...)<span class="p">, and in this case will insert a </span>DO <span class="p">after the first form. (In this case, condition 2 is not considered to be met, and an error is not generated.) If CLISP cannot find such an operand, and no </span>WHILE <span class="p">or </span>UNTIL <span class="p">appears in the i.s., a warning message is printed: </span>NO DO<span class="s17">, </span>COLLECT<span class="s17">, </span>OR JOIN<span class="p">: followed by the i.s.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Similarly, if no terminating condition is detected, i.e., no <span class="s11">IN</span>, <span class="s11">ON</span>, <span class="s11">WHILE</span>, <span class="s11">UNTIL, TO</span>, or a <span class="s11">RETURN </span>or <span class="s11">GO</span>, a warning message is printed: <span class="s11">Possible non-terminating iterative statement</span>: followed by the iterative statement. However, since the user may be planning to terminate the i.s. via an error, Control-E, or a <span class="s11">RETFROM </span>from a lower function, the i.s. is still translated.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: The error message is not printed if the value of <span class="s11">CLISPI.S.GAG </span>is <span class="s11">T </span>(initially <span class="s11">NIL</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Defining New Iterative Statement Operators</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following function is available for defining new or redefining existing iterative statement operators:</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>I.S.OPR </b><i>NAME FORM OTHERS EVALFLG</i>)                             <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">NAME </span>is the name of the new i.s.opr. If <span class="s16">FORM </span>is a list, <span class="s16">NAME </span>will be a new <i>i.s.type</i>, and</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">FORM <span class="p">its body.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">OTHERS </span>is an (optional) list of additional i.s. operators and operands which will be added to the i.s. at the place where <span class="s16">NAME </span>appears. If <span class="s16">FORM </span>is <span class="s11">NIL</span>, <span class="s16">NAME </span>is a new i.s.opr defined entirely by <span class="s16">OTHERS</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">In both <span class="s16">FORM </span>and <span class="s16">OTHERS</span>, the atom <span class="s11">$$VAL </span>can be used to reference the value to be returned by the i.s., <span class="s11">I.V</span>. to reference the current i.v., and <span class="s11">BODY </span>to reference <span class="s16">NAME</span>’s operand. In other words, the current i.v. will be substituted for all instances of <span class="s11">I.V</span>. and <span class="s16">NAME</span>’s operand will be substituted for all instances of <span class="s11">BODY </span>throughout <span class="s16">FORM </span>and <span class="s16">OTHERS</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s16">EVALFLG </span>is <span class="s11">T</span>, <span class="s16">FORM </span>and <span class="s16">OTHERS </span>are evaluated at translation time, and their values used as described above. A dummy variable for use in translation that does not clash with a dummy variable already used by some other i.s. operators can be obtained by calling <span class="s11">(GETDUMMYVAR)</span>. <span class="s11">(GETDUMMYVAR T) </span>will return a dummy variable and also insure that it is bound as a <span class="s11">PROG </span>variable in the translation.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NAME </span>was previously an i.s.opr and is being redefined, the message  <span class="s11">(</span><span class="s16">NAME </span><span class="s11">REDEFINED) </span>will be printed (unless <span class="s11">DFNFLG=T</span>), and all expressions using the i.s.opr <span class="s16">NAME </span>that have been translated will have their translations discarded.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The following are some examples of how <span class="s11">I.S.OPR </span>could be called to define some existing i.s.oprs, and create some new ones:</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">COLLECT  (I.S.OPR ’COLLECT</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: center;">’(SETQ $$VAL (NCONC1 $$VAL BODY)))</p><p class="s11" style="padding-top: 5pt;padding-left: 193pt;text-indent: 0pt;line-height: 10pt;text-align: left;">SUM (I.S.OPR ’SUM</p><p class="s11" style="padding-left: 252pt;text-indent: -18pt;line-height: 88%;text-align: left;">’(SETQ $$VAL_(PLUS $$VAL BODY) ’(FIRST (SETQ $$VAL0))</p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">NEVER  (I.S.OPR ’NEVER</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">’(if BODY then</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: center;">(SETQ $$VAL NIL) (GO $$OUT))</p><p style="padding-top: 4pt;padding-left: 161pt;text-indent: 0pt;line-height: 12pt;text-align: center;">Note:   <span class="s11">(if BODY then (RETURN NIL)) </span>would exit from the</p><p style="padding-left: 222pt;text-indent: 0pt;line-height: 91%;text-align: left;">i.s. immediately and therefore not execute the operations specified via a <span class="s11">FINALLY </span>(if any).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 232pt;text-indent: 0pt;text-align: left;">CONDITIONALS AND ITERATIVE STATEMENTS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;line-height: 10pt;text-align: right;">THEREIS (I.S.OPR ’THEREIS</p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">’(if BODY then</p><p class="s11" style="padding-left: 204pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(SETQ $$VAL I.V.) (GO $$OUT)))</p><p class="s11" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">RCOLLECT  <span class="p">To  define  </span>RCOLLECT<span class="p">,  a  version  of  </span>COLLECT <span class="p">which  uses </span>CONS</p><p style="padding-left: 173pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">instead of <span class="s11">NCONC1 </span>and then reverses the list of values:</p><p class="s11" style="padding-top: 8pt;padding-left: 185pt;text-indent: -12pt;line-height: 88%;text-align: left;">(I.S.OPR ’RCOLLECT ’(FINALLY (RETURN</p><p class="s11" style="padding-left: 203pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(DREVERSE $$VAL)))]</p><p class="s11" style="padding-left: 173pt;text-indent: -55pt;line-height: 18pt;text-align: left;">TCOLLECT <span class="p">To define </span>TCOLLECT<span class="p">, a version of </span>COLLECT <span class="p">which uses </span>TCONC<span class="p">: </span>(I.S.OPR ’TCOLLECT</p><p class="s11" style="padding-left: 185pt;text-indent: 0pt;line-height: 8pt;text-align: left;">’(TCONC $$VAL BODY)</p><p class="s11" style="padding-left: 221pt;text-indent: -18pt;line-height: 88%;text-align: left;">’(FIRST (SETQ $$VAL (CONS)) FINALLY (RETURN</p><p class="s11" style="padding-left: 239pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(CAR $$VAL)))]</p><p class="s11" style="padding-top: 5pt;padding-left: 124pt;text-indent: 0pt;line-height: 10pt;text-align: left;">PRODUCT (I.S.OPR ’PRODUCT</p><p class="s11" style="padding-left: 203pt;text-indent: -18pt;line-height: 88%;text-align: left;">’(SETQ $$VAL $$VAL*BODY) ’(FIRST ($$VAL 1))]</p><p class="s11" style="padding-top: 5pt;padding-left: 173pt;text-indent: -33pt;text-align: left;">UPTO <span class="p">To define </span>UPTO<span class="p">, a version of </span>TO <span class="p">whose operand is evaluated only once:</span></p><p class="s11" style="padding-top: 8pt;padding-left: 185pt;text-indent: -12pt;line-height: 88%;text-align: left;">(I.S.OPR ’UPTO NIL</p><p class="s11" style="padding-left: 185pt;text-indent: 0pt;line-height: 9pt;text-align: left;">’(BIND $$FOO<span class="s19"></span>BODY TO $$FOO)]</p><p style="padding-top: 6pt;padding-left: 173pt;text-indent: -22pt;text-align: justify;"><span class="s11">TO </span>To redefine <span class="s11">TO </span>so that instead of recomputing <span class="s16">FORM </span>each iteration, a variable is bound to the value of <span class="s16">FORM</span>, and then that variable is used:</p><p class="s11" style="padding-top: 7pt;padding-left: 184pt;text-indent: -10pt;line-height: 108%;text-align: left;">(I.S.OPR ’TO NIL</p><p class="s11" style="padding-left: 185pt;text-indent: 0pt;line-height: 8pt;text-align: left;">’(BIND $$END FIRST</p><p class="s11" style="padding-left: 221pt;text-indent: -18pt;line-height: 88%;text-align: left;">(SETQ $$END BODY) ORIGINALTO $$END)]</p><p style="padding-top: 5pt;padding-left: 173pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Note the use of <span class="s11">ORIGINAL </span>to redefine <span class="s11">TO </span>in terms of its original definition. <span class="s11">ORIGINAL </span>is intended for use in redefining built-in operators, since their definitions are not accessible, and hence not directly modifiable. Thus if the operator had been defined by the user via <span class="s11">I.S.OPR</span>, <span class="s11">ORIGINAL </span>would not obtain its original definition. In this case, one presumably would simply modify the i.s.opr definition.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;"><span class="s11">I.S.OPR </span>can also be used to define synonyms for already defined i.s. operators by calling <span class="s11">I.S.OPR </span>with <span class="s16">FORM </span>an atom, e.g., <span class="s11">(I.S.OPR ’WHERE ’WHEN) </span>makes <span class="s11">WHERE </span>be the same as <span class="s11">WHEN</span>. Similarly, following <span class="s11">(I.S.OPR ’ISTHERE ’THEREIS)</span>, one can write <span class="s11">(ISTHERE ATOM IN Y)</span>, and following <span class="s11">(I.S.OPR ’FIND ’FOR) </span>and <span class="s11">(I.S.OPR ’SUCHTHAT ’THEREIS)</span>, one can write <span class="s11">(find X in Y suchthat X member Z) </span>. In the current system, <span class="s11">WHERE </span>is synonymous with <span class="s11">WHEN</span>, <span class="s11">SUCHTHAT </span>and <span class="s11">ISTHERE </span>with <span class="s11">THEREIS</span>, <span class="s11">FIND </span>with <span class="s11">FOR</span>, and <span class="s11">THRU </span>with <span class="s11">TO</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FORM </span>is the atom <span class="s11">MODIFIER</span>, then <span class="s16">NAME </span>is defined as an i.s.opr which can immediately follow another i.s. operator (i.e., an error will not be generated, as described previously). <span class="s16">NAME </span>will not terminate the scope of the previous operator, and will be stripped off when <span class="s11">DWIMIFY </span>is called on its operand. <span class="s11">OLD </span>is an example of a <span class="s11">MODIFIER </span>type of operator. The <span class="s11">MODIFIER </span>feature allows the user to define i.s. operators similar to <span class="s11">OLD</span>, for use in conjunction with some other user defined i.s.opr which will produce the appropriate translation.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The file package command <span class="s11">I.S.OPRS </span>(Chapter 17) will dump the definition of i.s.oprs. <span class="s11">(I.S.OPRS PRODUCT UPTO) </span>as a file package command will print suitable expressions so that these iterative statement operators will be (re)defined when the file is loaded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 176pt;text-indent: 0pt;text-align: left;"><a name="bookmark11">FUNCTION DEFINITION, MANIPULATION AND EVALUATION</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_016.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley is designed to help you define and debug functions. Developing an applications program with Medley involves defining a number of functions in terms of the system primitives and other user-defined functions. Once defined, your functions may be used exactly like Interlisp primitive functions, so the programming process can be viewed as extending the Interlisp language to include the required functionality.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A function’s definition specifies if the function has a fixed or variable number of arguments, whether these arguments are evaluated or not, the function argument names, and a series of forms which define the behavior of the function. For example:</p><p class="s28" style="padding-top: 4pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">(LAMBDA (X Y) (PRINT X) (PRINT Y))</p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This function has two evaluated arguments, <span class="s28">X </span>and <span class="s28">Y</span>, and it will execute <span class="s28">(PRINT X) </span>and <span class="s28">(PRINT Y) </span>when evaluated. Other types of function definitions are described below.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A function is defined by putting an expr definition in the function definition cell of a symbol. There are a number of functions for accessing and setting function definition cells, but one usually defines a function with <span class="s28">DEFINEQ </span>(see the Defining Functions section below). For example:</p><p class="s30" style="padding-top: 3pt;padding-left: 66pt;text-indent: 0pt;text-align: left;"><span class="s31"> </span><span class="s28">(DEFINEQ (FOO (LAMBDA (X Y) (PRINT X) (PRINT Y))))(FOO)</span></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The expression above will define the function <span class="s28">FOO </span>to have the expr definition <span class="s28">(LAMBDA (X Y) (PRINT X) (PRINT Y))</span>.  After being defined, this function may be evaluated just like any system function:</p><p class="s30" style="padding-top: 3pt;padding-left: 66pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span class="s31"> </span><span class="s28">(FOO 3 (IPLUS 3 4))</span></p><p class="s28" style="padding-left: 84pt;text-indent: 0pt;line-height: 6pt;text-align: left;">3</p><p class="s28" style="padding-left: 84pt;text-indent: 0pt;line-height: 6pt;text-align: left;">7</p><p class="s28" style="padding-left: 84pt;text-indent: 0pt;line-height: 6pt;text-align: left;">7</p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Not all function definition cells contain expr definitions. The compiler (see the first page of Chapter 18) translates expr definitions into compiled code objects, which execute much faster. Interlisp provides a number of “function type functions” which determine how a given function is defined, the number and names of function arguments, etc. See the Function Type Functions section below.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Usually, functions are evaluated automatically when they appear within another function or when typed into Interlisp. However, sometimes it is useful to envoke the Interlisp interpreter explicitly to apply a given “functional argument” to some data. There are a number of functions which will apply a given function repeatedly. For example, <span class="s28">MAPCAR </span>will apply a function (or an expr definition) to all of the elements of a list, and return the values returned by the function:</p><p class="s30" style="padding-top: 3pt;padding-left: 66pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span class="s31"> </span><span class="s28">(MAPCAR ’(1 2 3 4 5) ’(LAMBDA (X) (ITIMES X X))</span></p><p class="s28" style="padding-left: 84pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(1 4 9 16 25)</p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When using functional arguments, there are a number of problems which can arise, related to accessing free variables from within a function argument. Many times these problems can be solved using the function <span class="s28">FUNCTION </span>to create a <span class="s28">FUNARG </span>object.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The macro facility provides another way of specifying the behavior of a function (see the Macros section below). Macros are very useful when developing code which should run very quickly, which should be compiled differently than when it is interpreted, or which should run differently in different implementations of Interlisp<span class="s5">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Function Types                                                                                                                                          </h4><p class="s16" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">Interlisp functions are defined using list expressions called “expr definitions.” An expr definition is a list of the form </span><span class="s28">(</span>LAMBDA-WORD ARG-LIST FORM<span class="s25">1</span> ... FORM<span class="s25">N</span><span class="s28">)</span><span class="p">. </span>LAMBDA-WORD <span class="p">determines whether the arguments to this function will be evaluated or not. </span>ARG-LIST <span class="p">determines the number and names of arguments. </span>FORM<span class="s25">1</span> ... FORM<span class="s25">N</span> <span class="p">are a series of forms to be evaluated after the arguments are bound to the local variables in </span>ARG-LIST<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">LAMBDA-WORD </span>is the symbol <span class="s28">LAMBDA</span>, then the arguments to the function are evaluated. If <span class="s16">LAMBDA- WORD </span>is the symbol <span class="s28">NLAMBDA</span>, then the arguments to the function are not evaluated. Functions which evaluate or don’t evaluate their arguments are therefore known as “lambda” or “nlambda” functions, respectively.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">ARG-LIST </span>is <span class="s28">NIL </span>or a list of symbols, this indicates a function with a fixed number of arguments. Each symbol is the name of an argument for the function defined by this expression. The process of binding these symbols to the individual arguments is called “spreading” the arguments, and the function is called a “spread” function. If the argument <span class="s5">list is any </span>symbol other than <span class="s28">NIL</span>, this indicates a function with a variable number of arguments, known as a “nospread” function.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">ARG-LIST </span>is anything other than a symbol or a list of symbols, such as <span class="s28">(LAMBDA &quot;FOO&quot; ...)</span>, attempting to use this expr definition will generate an <span class="s28">Arg not symbol  </span>error. In addition, if <span class="s28">NIL </span>or <span class="s28">T </span>is used as an argument name, the error <span class="s28">Attempt to bind NIL or T </span>is generated.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">These two parameters (lambda / nlambda and spread / nospread) may be specified independently, so there are four nain function types, known as lambda-spread, nlanbda-spread, lanbda-nospread, and nlambda-nospread functions. Each one has a different form and is used for a different purpose. These four function types are described more fully below.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For lambda-spread, lanbda-nospread, or nlambda-spread functions, there is an upper limit to the number of arguments that a function can have, based on the number of arguments that can be stored on the stack on any one function call. Currently, the limit is 80 arguments. If a function is called with more than that many arguments, the error <span class="s28">Too many arguments occurs</span>. However, nlambda-nospread functions can be called with an arbitrary number of arguments, since the arguments are not individually saved on the <span class="s5">stack.</span></p><p class="s6" style="padding-top: 10pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Lambda-Spread Functions</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Lambda-spread functions take a fixed number of evaluated arguments. This is the most common function type. A lambda-spread expr definition has the form:</p><p class="s16" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s28">(LAMBDA </span>(ARG<span class="s25">1</span> ... ARG<span class="s25">M</span><span class="s28">) </span>FORM<span class="s25">1</span> ... FORM<span class="s25">N</span><span class="s28">)</span></p><p class="s16" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">The argument list </span><span class="s28">(</span>ARG<span class="s25">1</span> ... ARG<span class="s25">M</span><span class="s28">) </span><span class="p">is a list of symbols that gives the number and names of the formal arguments to the function. If the argument list is </span><span class="s28">( ) </span><span class="p">or </span><span class="s28">NIL</span><span class="p">, this indicates that the function takes no arguments. When a lambda-spread function is applied to some arguments, the arguments are evaluated, and bound to the local variables </span>ARG<span class="s25">1</span> ... ARG<span class="s25">M</span><span class="p">. Then, </span>FORM<span class="s25">1</span> ... FORM<span class="s25">N</span> <span class="p">are evaluated in order, and the value of the function is the value of </span>FORM<span class="s25">N</span><span class="p">.</span></p><p class="s30" style="padding-top: 6pt;padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s31"> </span><span class="s28">(DEFINEQ (FOO (LAMBDA (X Y) (LIST X Y)))) (FOO)</span></p><p class="s30" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span class="s31"> </span><span class="s28">(FOO 99 (PLUS 3 4))</span></p><p class="s28" style="padding-left: 132pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(99 7)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">FUNCTION DEFINITION, MANIPULATION AND EVALUATION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In the above example, the function <span class="s28">FOO </span>defined by <span class="s28">(LAMBDA (X Y) (LIST X Y)) </span>is applied to the arguments</p><p class="s28" style="padding-left: 30pt;text-indent: 0pt;line-height: 11pt;text-align: left;">99 <span class="p">and </span>(PLUS 3 4)<span class="p">. These arguments are evaluated (giving </span>99 <span class="p">and </span>7<span class="p">), the local variable </span>X <span class="p">is bound to </span>99</p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">and <span class="s28">Y </span>to <span class="s28">7</span>, <span class="s28">(LIST X Y) </span>is evaluated, returning <span class="s28">(99 7)</span>, and this is returned as the value of the function.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A standard feature of the Interlisp system is that no error occurs if a spread function is called with too many or too few arguments. If a function is called with too many argumnents, the extra arguments are evaluated but ignored. If a function is called with too few arguments, the unsupplied ones will be delivered as <span class="s28">NIL</span>. In fact, a spread function cannot distinguish between being given <span class="s28">NIL </span>as an argument, and not being given that argument, e.g., <span class="s28">(FOO) </span>and <span class="s28">(FOO NIL) </span>are exactly the same for spread functions. If it is necessary to distinguish between these two cases, use an nlambda function and explicitly evaluate the arguments with the <span class="s28">EVAL </span>function.</p><p class="s6" style="padding-top: 10pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Nlambda-Spread Functions</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Nlambda-spread functions take a fixed number of unevaluated arguments. An nlambda-spread expr definition has the form:</p><p class="s16" style="padding-top: 6pt;padding-left: 66pt;text-indent: 0pt;text-align: left;"><span class="s28">(NLAMBDA </span>(ARG<span class="s25">1</span> ... ARG<span class="s25">M</span><span class="s28">) </span>FORM<span class="s25">1</span> ... FORM<span class="s25">N</span><span class="s28">)</span></p><p class="s16" style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="p">Nlambda-spread functions are evaluated similarly to lanbda-spread functions, except that the arguments are not evaluated before being bound to the variables </span>ARG<span class="s25">1</span> ... ARG<span class="s25">M</span><span class="p">.</span></p><p class="s30" style="padding-top: 6pt;padding-left: 78pt;text-indent: -12pt;line-height: 88%;text-align: left;"><span class="s31"> </span><span class="s28">(DEFINEQ (FOO (NLAMBDA (X Y) (LIST X Y)))) (FOO)</span></p><p class="s30" style="padding-top: 2pt;padding-left: 47pt;text-indent: 0pt;line-height: 7pt;text-align: center;"><span class="s31">   </span><span class="s28">(FOO 99 (PLUS 3 4))</span></p><p class="s28" style="padding-left: 47pt;text-indent: 0pt;line-height: 6pt;text-align: center;">(99 (PLUS 3 4))</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In the above example, the function <span class="s28">FOO </span>defined by <span class="s28">(NLAMBDA (X Y) (LIST X Y)) </span>is applied to the arguments</p><p class="s28" style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">99 <span class="p">and </span>(PLUS 3 4)<span class="p">. These arguments are unevaluated to </span>X <span class="p">and </span>Y<span class="p">. </span>(LIST X Y) <span class="p">is evaluated, returning </span>(99 (PLUS 3 4))<span class="p">, and this is returned as the value of the function.</span></p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Functions can be defined so that all of their arguments are evaluated (lambda functions) or none are evaluated (nlambda functions). If it is desirable to write a function which only evaluates some of its arguments (e.g., <span class="s28">SETQ</span>), the functions should be defined as an nlambda, with some arguments explicitly evaluated using the function <span class="s28">EVAL</span>. If this is done, the user should put the symbol <span class="s28">EVAL </span>on the property list of the function under the property <span class="s28">INFO</span>. This informs various system packages, such as DWIM, CLISP, and Masterscope, that this function in fact does evaluate its arguments, even though it is an nlambda.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><b>Warning</b>: A frequent problem that occurs when evaluating arguments to nlambda functions with <span class="s28">EVAL </span>is that the form being evaluated may reference variables that are not accessible within the nlambda function. This is usually not a problem when interpreting code, but when the code is compiled, the values of “local” variables may not be accessible on the stack (see Chapter 18). The system nlambda functions that evaluate their arguments (such as <span class="s28">SETQ</span>) are expanded in-line by the compiler, so this is not a problem. Using the macro facility is recommended in cases where it is necessary to evaluate some arguments to an nlambda function.</p><p class="s6" style="padding-top: 10pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Lambda-Nospread Functions</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Lambda-nospread functions take a variable number of evaluated arguments. A lambda-nospread expr definition has the form:</p><p class="s16" style="padding-top: 6pt;padding-left: 66pt;text-indent: 0pt;text-align: left;"><span class="s28">(LAMBDA </span>VAR FORM<span class="s25">1</span> ... FORM<span class="s25">N</span><span class="s28">)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">VAR </span>may be any symbol, except <span class="s28">NIL </span>and <span class="s28">T</span>. When a lambda-nospread function is applied to some arguments, each of these arguments is evaluated and the values stored on the stack. <span class="s16">VAR </span>is then bound to the number of arguments which have been evaluated. For example, if <span class="s28">FOO </span>is defined by <span class="s28">(LAMBDA X ...)</span>, when <span class="s28">(FOO A B C) </span>is evaluated, <span class="s28">A</span>, <span class="s28">B</span>, and <span class="s28">C </span>are evaluated and <span class="s28">X </span>is bound to <span class="s28">3</span>. <span class="s16">VAR </span>should never be reset</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The following functions are used for accessing the arguments of lambda-nospread functions.</p><p class="s28" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ARG </span><span class="s16">VAR M</span>)                                                                    <span class="p">[NLambda Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the <span class="s16">M</span>th argument for the lambda-nospread function whose argument list is <span class="s16">VAR</span>. <span class="s16">VAR </span>is the name of the atomic argument list to a lambda-nospread function, and is not evaluated. <span class="s16">M </span>is the number of the desired argument, and is evaluated. The value of <span class="s28">ARG </span>is undefined for <span class="s16">M </span>less than or equal to 0 or greater than the value of <span class="s16">VAR</span>.</p><p class="s28" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SETARG </span><span class="s16">VAR M X</span>)                                                            <span class="p">[NLambda Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Sets the <span class="s16">M</span>th argument for the lambda-nospread function whose argument list is <span class="s16">VAR </span>to <span class="s16">X</span>. <span class="s16">VAR </span>is not evaluated; <span class="s16">M </span>and <span class="s16">X </span>are evaluated. <span class="s16">M </span>should be between 1 and the value of <span class="s16">VAR</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In the example below, the function <span class="s28">FOO </span>is defined to collect and return a list of all of the evaluated arguments it is given (the value of the for statement).</p><p class="s30" style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span class="s31"> </span><span class="s28">(DEFINEQ (FOO</span></p><p class="s28" style="padding-left: 126pt;text-indent: -4pt;line-height: 88%;text-align: left;">(LAMBDA X (for ARGNUM from 1 to X collect (ARG X ARGNUM)] (FOO)</p><p class="s30" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span class="s31"> </span><span class="s28">(FOO 99 (PLUS 3 4))</span></p><p class="s28" style="padding-left: 126pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(99 7)</p><p class="s30" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span class="s31"> </span><span class="s28">(FOO 99 (PLUS 3 4)(TIMES 3 4)))</span></p><p class="s28" style="padding-left: 126pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(99 7 12)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">NLambda-Nospread Functions</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Nlambda-nospread functions take a variable number of unevaluated arguments. An nlambda- nospread expr definition has the form:</p><p class="s16" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s28">(NLAMBDA </span>VAR FORM<span class="s25">1</span> ... FORM<span class="s25">N</span><span class="s28">)</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">VAR </span>may be any symbol, except <span class="s28">NIL </span>and <span class="s28">T</span>. Though similar in form to lambda-nospread expr definitions, an nlambda-nospread is evaluated quite differently. When an nlambda-nospread function is applied to some arguments, <span class="s16">VAR </span>is simply bound to a list of the unevaluated arguments. The user may pick apart this list, and evaluate different arguments.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In the example below, <span class="s28">FOO </span>is defined to return the reverse of the list of arguments it is given (unevaluated):</p><p class="s30" style="padding-top: 4pt;padding-left: 126pt;text-indent: -12pt;line-height: 88%;text-align: left;"><span class="s31"> </span><span class="s28">(DEFINEQ (FOO (NLAMBDA X (REVERSE X)))) (FOO)</span></p><p class="s30" style="padding-top: 2pt;padding-left: 44pt;text-indent: 0pt;line-height: 7pt;text-align: center;"><span class="s31">   </span><span class="s28">(FOO 99 (PLUS 3 4))</span></p><p class="s28" style="padding-left: 44pt;text-indent: 0pt;line-height: 6pt;text-align: center;">((PLUS 3 4) 99)</p><p class="s30" style="padding-top: 2pt;padding-left: 47pt;text-indent: 0pt;line-height: 7pt;text-align: center;"><span class="s31">   </span><span class="s28">(FOO 99 (PLUS 3 4)(TIMES 3 4))</span></p><p class="s28" style="padding-left: 47pt;text-indent: 0pt;line-height: 6pt;text-align: center;">(TIMES 3 4)(PLUS 3 4) 99)</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The warning about evaluating arguments to nlambda functions also applies to nlambda-nospread function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">FUNCTION DEFINITION, MANIPULATION AND EVALUATION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Compiled Functions</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Functions defined by expr definitions can be compiled by the Interlisp compiler (see Chapter 18). The compiler produces compiled code objects (of data type <span class="s28">CCODEP</span>) which execute more quickly than the corresponding expr definition code. Functions defined by compiled code objects may have the same four types as expr definitions (lambda / nlambda, spread / nospread). Functions created by the compiler are referred to as compiled functions.</p><p class="s6" style="padding-top: 10pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Function Type Functions</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are a variety of functions used for examining the type, argument list, etc. of functions. These functions may be given either a symbol (in which case they obtain the function definition from the definition cell), or a function definition itself.</p><p class="s28" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FNTYP </span><span class="s16">FN</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns <span class="s28">NIL </span>if <span class="s16">FN </span>is not a function definition or the name of a defined function. Otherwise,</p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FNTYP <span class="p">returns one of the following symbols, depending on the type of function definition.</span></p><p class="s28" style="padding-left: 132pt;text-indent: 3pt;line-height: 106%;text-align: left;">EXPR <span class="p">Lambda-spread expr definition </span>CEXPR <span class="p">Lambda-spread compiled definition </span>FEXPR <span class="p">Nlambda-spread expr definition</span></p><p class="s28" style="padding-left: 128pt;text-indent: 0pt;text-align: left;">CFEXPR <span class="p">Nlambda-spread compiled definition </span>EXPR* <span class="p">Lambda-nospread expr definition </span>CEXPR* <span class="p">Lambda-nospread compiled definition </span>FEXPR* <span class="p">Nlambda-nospread expr definition</span></p><p class="s28" style="padding-left: 124pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CFEXPR* <span class="p">Nlambda-nospread compiled definition</span></p><p style="padding-left: 128pt;text-indent: 0pt;text-align: left;"><span class="s28">FUNARG FNTYP </span>returns the symbol <span class="s28">FUNARG </span>if <span class="s16">FN </span>is a <span class="s28">FUNARG </span>expression.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s28">EXP</span>, <span class="s28">FEXPR</span>, <span class="s28">EXPR*, </span>and <span class="s28">FEXPR* </span>indicate that <span class="s16">FN </span>is defined by an expr definition. <span class="s28">CEXPR</span>, <span class="s28">CFEXPR</span>, <span class="s28">CEXPR*</span>, and <span class="s28">CFEXPR* </span>indicate that <span class="s16">FN </span>is defined by a compiled definition, as indicated by the prefix <span class="s28">C</span>. The suffix <span class="s28">* </span>indicates that <span class="s16">FN </span>has an indefinite number of arguments, i.e., is a nospread function. The prefix <span class="s28">F </span>indicates unevaluated arguments. Thus, for example, a <span class="s28">CFEXPR* </span>is a compiled nospread nlambda function.</p><p class="s28" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">EXPRP </span><span class="s16">FN</span>) <span class="s5">[Function]</span></p><p class="s28" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">Returns </span>T <span class="p">i</span>f (FNTYP <span class="s16">FN</span>) <span class="p">is </span>EXPR<span class="p">, </span>FEXPR<span class="p">, </span>EXPR*, <span class="p">or </span>FEXPR*<span class="p">; </span>NIL <span class="p">otherwise. However, </span>(EXPRP <span class="s16">FN</span>) <span class="p">is also true if </span><span class="s16">FN </span><span class="p">is (has) a list definition, even if it does not begin with </span>LAMBDA <span class="p">or </span>NLAMBDA<span class="p">. In other words, </span>EXPRP <span class="p">is not quite as selective as </span>FNTYP<span class="p">.</span></p><p class="s28" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">CCODEP </span><span class="s16">FN</span>) <span class="s5">[Function]</span></p><p class="s28" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">Returns </span>T <span class="p">if </span>(FNTYP <span class="s16">FN</span>) <span class="p">is either </span>CEXPR<span class="p">, </span>CFEXPR<span class="p">, </span>CEXPR*<span class="p">, or </span>CFEXPR*<span class="p">;  </span>NIL <span class="p">otherwise.</span></p><p class="s28" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">ARGTYPE </span><span class="s16">FN</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s16">FN </span>is the name of a function or its definition. <span class="s28">ARGTYPE </span>returns <span class="s28">0</span>, <span class="s28">1</span>, <span class="s28">2</span>, or <span class="s28">3</span>, or <span class="s28">NIL </span>if <span class="s16">FN </span>is not a function. <span class="s28">ARGTYPE </span>corresponds to the rows of <span class="s28">FNTYP</span>s. The interpretation of this value is as follows:</p><p class="s28" style="padding-top: 2pt;padding-left: 128pt;text-indent: 0pt;text-align: left;">0 <span class="p">Lambda-spread function </span>(EXPR, CEXPR)</p><p class="s28" style="padding-left: 128pt;text-indent: 0pt;text-align: left;">1 <span class="p">Nlambda-spread function (</span>FEXPR, CFEXPR)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l10"><li><p style="padding-top: 6pt;padding-left: 186pt;text-indent: -9pt;text-align: left;">Lambda-nospread function <span class="s28">(EXPR*, CEXPR*)</span></p></li><li><p style="padding-left: 186pt;text-indent: -9pt;text-align: left;">Nlambda-nospread function <span class="s28">(FEXPR*, CFEXPR*)</span></p></li></ol><p class="s28" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">NARGS </span><span class="s16">FN</span>)                                                                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the number of arguments of <span class="s16">FN</span>, or <span class="s28">NIL </span>if <span class="s16">FN </span>is not a function. If <span class="s16">FN </span>is a nospread function, the value of <span class="s28">NARGS </span>is <span class="s28">1</span>.</p><p class="s28" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ARGLIST </span><span class="s16">FN</span>)                                                                              <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Returns the “argument list” for <span class="s16">FN</span>. Note that the “argument list” is a symbol for nospread functions. Since <span class="s28">NIL </span>is a possible value for <span class="s28">ARGLIST</span>, the error <span class="s28">Args not available </span>is generated if <span class="s16">FN </span>is not a function.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If <span class="s16">FN </span>is a compiled function, the argument list is constructed, i.e., each call to <span class="s28">ARGLIST </span>requires making a new list. For functions defined by expr definitions, lists beginning with <span class="s28">LAMBDA </span>or <span class="s28">NLAMBDA</span>, the argument list is simply <span class="s28">CADR </span>of <span class="s28">GETD</span>. If <span class="s16">FN </span>has an expr definition, and <span class="s28">CAR </span>of the definition is not <span class="s28">LAMBDA </span>or <span class="s28">NLAMBDA</span>, <span class="s28">ARGLIST </span>will check to see if <span class="s28">CAR </span>of the definition is a member of <span class="s28">LAMBDASPLST </span>(see Chapter 20). If it is, <span class="s28">ARGLIST </span>presumes this is a function object the user is defining via <span class="s28">DWIMUSERFORMS</span>, and simply returns <span class="s28">CADR </span>of the definition as its argument list. Otherwise <span class="s28">ARGLIST </span>generates an error as described above.</p><p class="s28" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SMARTARGLIST </span><span class="s16">FN EXPLAINFLG TAIL</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">A “smart” version of <span class="s28">ARGLIST </span>that tries various strategies to get the arglist of <span class="s16">FN</span>.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">First <span class="s28">SMARTARGLIST </span>checks the property list of <span class="s16">FN </span>under the property <span class="s28">ARGNAMES</span>. For spread functions, the argument list itself is stored. For nospread functions, the form is (<span class="s28">NIL ARGLIST</span><span class="s36">1 </span><i>. </i><span class="s28">ARGLIST</span><span class="s36">2</span>), where <span class="s28">ARGLIST</span><span class="s36">1 </span>is the value <span class="s28">SMARTARGLIST </span>should return when <span class="s16">EXPLAINFLG</span></p><p style="padding-top: 1pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">= <span class="s28">T</span>, and <span class="s28">ARGLIST</span><span class="s36">2 </span>the value when <span class="s16">EXPLAINFLG </span>= <span class="s28">NIL</span>. For example, <span class="s28">(GETPROP ’DEFINEQ ’ARGNAMES) = (NIL (X1 Xl ... XN) . X)</span>. This allows the user to specify special argument lists.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Second, if <span class="s16">FN </span>is not defined as a function, <span class="s28">SMARTARGLIST </span>attempts spelling correction on <span class="s16">FN </span>by calling <span class="s28">FNCHECK </span>(see Chapter 20), passing <span class="s16">TAIL </span>to be used for the call to <span class="s28">FIXSPELL</span>. If unsuccessful, the <span class="s28">FN Not a function </span>error will be generated.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Third, if <span class="s16">FN </span>is known to the file package (see Chapter 17) but not loaded in, <span class="s28">SMARTARGLIST</span></p><p class="s28" style="padding-left: 126pt;text-indent: 0pt;line-height: 148%;text-align: left;"><span class="p">will obtain the arglist information from the file. Otherwise, </span>SMARTARGLIST <span class="p">simply returns </span>(ARGLIST <span class="s16">FN</span>)<span class="p">.</span></p><p style="padding-top: 1pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s28">SMARTARGLIST </span>is used by <span class="s28">BREAK </span>(see Chapter 15) and <span class="s28">ADVISE </span>with <span class="s16">EXPLAINFLG </span>= <span class="s28">NIL </span>for constructing equivalent expr definitions, and by the <span class="s28">TTYIN </span>in-line command <span class="s28">?= </span>(see Chapter 26), with <span class="s16">EXPLAINFLG </span>= <span class="s28">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 78pt;text-indent: -24pt;text-align: left;">Defining Functions                                                                                                                                    </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Function definitions are stored in a “function definition cell” associated with each symbol. This cell is directly accessible via the two functions <span class="s28">PUTD </span>and <span class="s28">GETD </span>(see below), but it is usually easier to define functions with <span class="s28">DEFINEQ</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">FUNCTION DEFINITION, MANIPULATION AND EVALUATION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: -24pt;text-align: left;"><span class="s28">(</span><b>DEFINEQ </b>X<span class="s25">1</span> X<span class="s25">2</span> ... X<span class="s25">N</span><span class="s28">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s28">DEFINEQ </span>is the function normally used for defining functions. It takes an indefinite number of arguments which are not evaluated. Each <span class="s16">X</span><span class="s25">i</span><span class="s16"> </span>must be a list defining one function, of the form <span class="s28">(NAME DEFINITION)</span>. For example:</p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(DEFINEQ (DOUBLE (LAMBDA (X) (IPLUS X X))))</p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The above expression will define the function <span class="s28">DOUBLE </span>with the expr definition <span class="s28">(LAMBDA (X) (IPLUS X X))</span>. <span class="s16">X</span><span class="s25">i</span><span class="s16"> </span>may also have the form (<span class="s28">NAME ARGS . DEF-BODY</span>), in which case an appropriate lambda expr definition will be constructed. Therefore, the above expression is exactly the same as:</p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(DEFINEQ (DOUBLE (X) (IPLUS X X)))</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note that this alternate form can only be used for lambda functions. The first form must be used to define an nlambda function.</p><p class="s28" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">DEFINEQ <span class="p">returns a list of the names of the functions defined.</span></p><p class="s28" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">(<span class="s15">DEFINE </span><span class="s16">X —</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Lambda-spread version of <span class="s28">DEFINEQ</span>. Each element of the list <i>X </i>is itself a list either of the form <span class="s28">(NAME DEFINITION) </span>or <span class="s28">(NAME ARGS . DEF-BODY)</span>. <span class="s28">DEFINE </span>will generate an error, <span class="s28">Incorrect defining form </span>on encountering an atom where a defining list is expected.</p><p class="s28" style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">DEFINE <span class="p">and </span>DEFINEQ <span class="p">operate correctly if the function is already defined and </span>BROKEN<span class="p">, </span>ADVISED<span class="p">, or </span>BROKEN-IN<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: left;">For expressions involving type-in only, if the time stamp facility is enabled (see the Time Stamps section of Chapter 16), both <span class="s28">DEFINE </span>and <span class="s28">DEFINEQ </span>stamp the definition with your initials and date.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">UNSAFE.TO.MODIFY.FNS <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Value is a list of functions that should not be redefined, because doing so may cause unusual bugs (or crash the system!). If you try to modify a function on this list (using <span class="s28">DEFINEQ</span>, <span class="s28">TRACE</span>, etc), the system prints <span class="s28">Warning: XXX may be unsafe to modify -- continue? </span>If you type <span class="s28">Yes</span>, the function is modified, otherwise an error occurs. This provides a measure of safety for novices who may accidently redefine important system functions. You can add your own functions onto this list.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">By convention, all functions starting with the character backslash (“\”) are system internal functions, which you should never redefine or modify. Backslash functions are not on <span class="s28">UNSAFE.TO.MODIFY.FNS</span>, so trying to redefine them will not cause a warning.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">DFNFLG <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="s28">DFNFLG </span>is a global variable that affects the operation of <span class="s28">DEFINEQ </span>and <span class="s28">DEFINE</span>. If <span class="s28">DFNFLG=NIL</span>, an attempt to <i>redefine </i>a function <span class="s28">FN </span>will cause <span class="s28">DEFINE </span>to print the message <span class="s28">(FN REDEFINED) </span>and to save the old definition of <span class="s28">FN </span>using <span class="s28">SAVEDEF </span>(see the Functions for Manipulating Typed Definitions section of Chapter 17) before redefining it (except if the old and new definitions are <span class="s28">EQUAL</span>, in which case the effect is simply a no-op). If <span class="s28">DFNFLG=T</span>, the function is simply redefined. If <span class="s28">DFNFLG=PROP </span>or <span class="s28">ALLPROP</span>, the new definition is stored on the property list under the property <span class="s28">EXPR</span>. <span class="s28">ALLPROP </span>also affects the operation of <span class="s28">RPAQQ </span>and <span class="s28">RPAQ </span>(see the Functions Used Within Source Files section of Chapter 17). <span class="s28">DFNFLG </span>is initially <span class="s28">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">DFNFLG <span class="p">is reset by </span>LOAD <span class="p">(see the Loading Files section of Chapter 17) to enable various ways of handling the defining of functions and setting of variables when loading a file. For most applications, the user will not reset </span>DFNFLG <span class="p">directly.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><b>Note</b>: The compiler does <i>not </i>respect the value of <span class="s28">DFNFLG </span>when it redefines functions to their compiled definitions (see the first page of Chapter 18). Therefore, if you set <span class="s28">DFNFLG </span>to <span class="s28">PROP </span>to completely avoid inadvertantly redefining something in your running system, you <i>must </i>use compile mode <span class="s28">F</span>, not <span class="s28">ST</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note that the functions <span class="s28">SAVEDEF </span>and <span class="s28">UNSAVEDEF </span>(see the Functions for Manipulating Typed Definitions section of Chapter 17) can be useful for “saving” and restoring function definitions from property lists.</p><p class="s28" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GETD </span><span class="s16">FN</span>)                                                                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns the function definition of <span class="s16">FN</span>. Returns <span class="s28">NIL </span>if <span class="s16">FN </span>is not a symbol, or has no definition.</p><p class="s28" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">GETD <span class="p">of a compiled function constructs a pointer to the definition, with the result that two successive calls do not necessarily produce </span>EQ <span class="p">results. </span>EQP <span class="p">or </span>EQUAL <span class="p">must be used to compare compiled definitions.</span></p><p class="s28" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">PUTD </span><span class="s16">FN DEF </span>—)                                                                          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Puts <span class="s16">DEF </span>into <span class="s16">FN</span>’s function cell, and returns <span class="s16">DEF</span>. Generates an error, <span class="s28">Arg not symbol</span><b>, </b>if <span class="s28">FN </span>is not a symbol. Generates an error, <span class="s28">Illegal arg</span>, if <span class="s16">DEF </span>is a string, number, or a symbol other than <span class="s28">NIL</span>.</p><p class="s28" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MOVD </span><span class="s16">FROM TO COPYFLG </span>—)                                                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Moves the definition of <span class="s16">FROM </span>to <span class="s16">TO</span>, i.e., redefines <span class="s16">TO</span>. If <span class="s16">COPYFLG </span>= <span class="s28">T</span>, a <span class="s28">COPY </span>of the definition of <span class="s16">FROM </span>is used. <span class="s16">COPYFLG </span>=<span class="s28">T </span>is only meaningful for expr definitions, although <span class="s28">MOVD </span>works for compiled functions as well. <span class="s28">MOVD </span>returns <span class="s16">TO</span>.</p><p class="s28" style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">COPYDEF <span class="p">(see the Functions for Manipulating Typed Definitions section of Chapter 17) is a higher-level function that not only moves expr definitions, but works also for variables, records, etc.</span></p><p class="s28" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MOVD? </span><span class="s16">FROM TO COPYFLG </span>—)                                                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TO </span>is not defined, same as <span class="s28">(MOVD </span><span class="s16">FROM TO COPYFLG</span><span class="s28">). </span>Otherwise, does nothing and returns <span class="s28">NIL</span>.</p><h4 style="padding-top: 10pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">Function Evaluation                                                                                                                                  </h4><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Usually, function application is done automatically by the Interlisp interpreter. If a form is typed into Interlisp whose <span class="s28">CAR </span>is a function, this function is applied to the arguments in the <span class="s28">CDR </span>of the form. These arguments are evaluated or not, and bound to the funcion parameters, as determined by the type of the function, and the body of the function is evaluated. This sequence is repeated as each form in the body of the function is evaluated.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are some situations where it is necessary to explicitly call the evaluator, and Interlisp supplies a number of functions that will do this. These functions take “functional arguments,” which may either</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">FUNCTION DEFINITION, MANIPULATION AND EVALUATION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">be symbols with function definitions, or expr definition forms such as <span class="s28">(LAMBDA (X)...)</span>, or <span class="s28">FUNARG</span></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">expressions.</p><p class="s28" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">APPLY </span><span class="s16">FN ARGLIST —</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Applies the function <span class="s16">FN </span>to the arguments in the list <span class="s16">ARGLIST</span>, and returns its value. <span class="s28">APPLY </span>is a lambda function, so its arguments are evaluated, but the individual elements of <span class="s16">ARGLIST </span>are not evaluated. Therefore, lambda and nlambda functions are treated the same by <span class="s28">APPLY</span>—lambda functions take their arguments from <span class="s16">ARGLIST </span>without evaluating them.  For example:</p><p class="s30" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span class="s31"> </span><span class="s28">(APPLY ’APPEND ’((PLUS 1 2 3)(4 5 6)))</span></p><p class="s28" style="padding-left: 132pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(PLUS 1 2 3 4 5 6)</p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Note that <span class="s16">FN </span>may explicitly evaluate one or more of its arguments itself. For example, the system function <span class="s28">SETQ </span>is an nlambda function that explicitly evaluates its second argument. Therefore, <span class="s28">(APPLY ’SETQ ’(FOO (ADD1 3)))</span>will set <span class="s28">FOO </span>to <span class="s28">4</span>, instead of setting it to the expression</p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(ADD1 3)<span class="p">.</span></p><p class="s28" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">APPLY <span class="p">can be used for manipulating expr definitions. For example:</span></p><p class="s30" style="padding-top: 4pt;padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s31"> </span><span class="s28">(APPLY ’(LAMBDA (X Y)(ITIMES X Y)) ’(3 4))) 12</span></p><p class="s16" style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s28">(</span><b>APPLY* </b>FN ARG<span class="s25">1</span> ARG<span class="s25">2</span> ... ARG<span class="s25">N</span> <span class="s28">) </span><span class="p">[NoSpread Function]</span></p><p class="s16" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">Nospread version of </span><span class="s28">APPLY</span><span class="p">. Applies the function </span>FN <span class="p">to the arguments </span>ARG<span class="s25">1</span> ARG<span class="s25">2</span> ... ARG<span class="s25">N</span><span class="p">.  For example:</span></p><p class="s30" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span class="s31"> </span><span class="s28">(APPLY ’APPEND ’(PLUS 1 2 3)(4 5 6))</span></p><p class="s28" style="padding-left: 132pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(PLUS 1 2 3 4 5 6)</p><p class="s28" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">EVAL </span><span class="s16">X—</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s28">EVAL </span>evaluates the expression <span class="s16">X </span>and returns this value, i.e., <span class="s28">EVAL </span>provides a way of calling the Interlisp interpreter. Note that <span class="s28">EVAL </span>is itself a lambda function, so its argument is first evaluated, e.g.:</p><p class="s30" style="padding-top: 4pt;padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s31"> </span><span class="s28">(SETQ FOO ’ADD1 3))) (ADD1 3)</span></p><p class="s30" style="padding-top: 3pt;padding-left: 132pt;text-indent: -18pt;line-height: 88%;text-align: left;"><span class="s28">(EVAL FOO) 4</span></p><p class="s30" style="padding-top: 2pt;padding-left: 28pt;text-indent: 0pt;line-height: 7pt;text-align: right;"><span class="s28">(EVAL ’FOO)</span></p><p class="s28" style="padding-left: 28pt;text-indent: 0pt;line-height: 6pt;text-align: right;">(ADD1 3)</p><p class="s28" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">QUOTE </span><span class="s16">X</span>) <span class="p">[Nlambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s28">QUOTE </span>prevents its arguments from being evaluated. Its value is <span class="s16">X </span>itself, e.g., <span class="s28">(QUOTE FOO) </span>is</p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FOO<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Interlisp functions can either evaluate or not evaluate their arguments. <span class="s28">QUOTE </span>can be used in those cases where it is desirable to specify arguments unevaluated.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The single-quote character <span class="s28">(’) </span>is defined with a read macro so it returns the next <span class="s5">expression, wrapped in a call to </span><span class="s28">QUOTE </span><span class="s5">(see Chapter 25). </span>For example, <span class="s28">’FOO </span>reads as <span class="s28">(QUOTE FOO)</span>. This is the form used for examples in this manual.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Since giving <span class="s28">QUOTE </span>more than one argument is almost always a parenthese error, and one that would otherewise go undetected, <span class="s28">QUOTE </span>itself generates an error in this case, <span class="s28">Parenthesis error</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">KWOTE </span><span class="s16">X</span>)                                                                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Value is an expression which, when evaluated, yields <span class="s16">X</span>. If <span class="s16">X </span>is <span class="s28">NIL </span>or a number, this is <span class="s16">X</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">itself. Otherwise <span class="s28">(LIST (QUOTE QUOTE) X)</span>. For example:</p><p class="s28" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(KWOTE 5) =&gt; 5</p><p class="s28" style="padding-left: 162pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(KWOTE (CONS ’A ’B)) =&gt; (QUOTE (A.B))</p><p class="s28" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">NLAMBDA.ARGS </span><span class="s16">X</span>)                                                                        <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This function interprets its argument as a list of unevaluated nlambda arguments. If any of the elements in this list are of the form <span class="s28">(QUOTE...)</span>, the enclosing <span class="s28">QUOTE </span>is stripped off. Actually, <span class="s28">NLAMBDA.ARGS </span>stops processing the list after the first non-quoted argument. Therefore, whereas <span class="s28">(NLAMBDA.ARGS ’((QUOTE FOO) BAR)) -&gt; (FOO BAR)</span>, <span class="s28">(NLAMBDA.ARGS ’(FOO (QUOTE</span></p><p class="s28" style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">BAR))) -&gt; (FOO (QUOTE BAR)).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">NLAMBDA.ARGS <span class="p">is alled by a number of nlambda functions in the system, to interpret their arguments. For instance, the function </span>BREAK <span class="p">calls </span>NLAMBDA.ARGS <span class="p">so that </span>(BREAK ’FOO) <span class="p">will break the function </span>FOO<span class="p">, rather than the function </span>QUOTE<span class="p">.</span></p><p class="s28" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">EVALA </span><span class="s16">X A</span>)                                                                               <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Simulates association list variable lookup. <span class="s16">X </span>is a form, <span class="s16">A </span>is a list of the form:</p><p class="s16" style="padding-top: 4pt;padding-left: 144pt;text-indent: 0pt;text-align: left;"><span class="s28">((</span>NAME<span class="s25">1</span> . VAL<span class="s25">1</span><span class="s28">) </span>(NAME<span class="s25">2</span> . VAL<span class="s25">2</span><span class="s28">)</span>... <span class="s28">(</span>NAME<span class="s25">N</span> . VAL<span class="s25">N</span><span class="s28">))</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The variable names and values in <span class="s16">A </span>are “spread” on the stack, and then <span class="s16">X </span>is evaluated. Therefore, any variables appearing free in <span class="s16">X </span>that also appears as <span class="s28">CAR </span>of an element of <span class="s16">A </span>will be given the value on the <span class="s28">CDR </span>of that element.</p><p class="s28" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DEFEVAL </span><span class="s16">TYPE FN</span>)                                                                      <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Specifies how a datum of a particular type is to be evaluated. Intended primarily for user- defined data types, but works for all data types except lists, literal atoms, and numbers. <span class="s16">TYPE </span>is a type name. <span class="s16">FN </span>is a function object, i.e., name of a function or a lambda expression. Whenever the interpreter encounters a datum of the indicated type, <span class="s16">FN </span>is applied to the datum and its value returned as the result of the evaluation. <span class="s28">DEFEVAL </span>returns the previous evaling function for this type. If <span class="s16">FN </span>= <span class="s28">NIL</span>, <span class="s28">DEFEVAL </span>returns the current evaling function without changing it. If <span class="s16">FN </span>= <span class="s28">T</span>, the evaling functions is set back to the system default (which for all data types except lists is to return the datum itself).</p><p class="s28" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">COMPILETYPELST <span class="p">(see Chapter 18) permits the user to specify how a datum of a particular type is to be compiled.</span></p><p class="s28" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">EVALHOOK </span><span class="s16">FORM EVALHOOKFN</span>)                                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s28">EVALHOOK </span>evaluates the expression <span class="s16">FORM</span>, and returns its value. While evaluating <span class="s16">FORM</span>, the function <span class="s28">EVAL </span>behaves in a special way. Whenever a list other than <span class="s16">FORM </span>itself is to be evaluated, whether implicitly or via an explicit call to <span class="s28">EVAL</span>, <span class="s16">EVALHOOKFN </span>is invoked (it should be a function), with the form to be evaluated as its argument. <span class="s16">EVALHOOKFN </span>is then responsible for evaluating the form. Whatever is returned is assume to be the result of evaluating the form. During the execution of <span class="s16">EVALHOOKFN</span>, this special evaluation is turned off. (Note that <span class="s28">EVALHOOK </span>does not affect the evaluations of variables, only of lists).</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Here is an example of a simple tracing routine that uses the <span class="s28">EVALHOOK </span>feature:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">FUNCTION DEFINITION, MANIPULATION AND EVALUATION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s30" style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span class="s28">(DEFINEQ (PRINTHOOK (FORM)</span></p><p class="s28" style="padding-left: 126pt;text-indent: 0pt;line-height: 88%;text-align: left;">(printout T &quot;eval: &quot;FORM T) (EVALHOOK FORM (FUNCTION PRINTHOOK (PRINTHOOK)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Using <span class="s28">PRINTHOOK</span>, one might see the following interaction:</p><p class="s30" style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span class="s28">(EVALHOOK ’(LIST (CONS 1 2)(CONS 3 4)) ’PRINTHOOK)</span></p><p class="s28" style="padding-left: 126pt;text-indent: 0pt;line-height: 6pt;text-align: left;">eval: (CONS 1 2)</p><p class="s28" style="padding-left: 126pt;text-indent: 0pt;line-height: 6pt;text-align: left;">eval: (CONS 3 4)</p><p class="s28" style="padding-left: 126pt;text-indent: 0pt;line-height: 6pt;text-align: left;">((1.2)(3.4))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Iterating and Mapping Functions                                                                                                             </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The functions below are used to evaluate a form or apply a function repeatedly. <span class="s28">RPT</span>, <span class="s28">RPTQ</span>, and <span class="s28">FRPTQ </span>evaluate an expression a specified number of time. <span class="s28">MAP</span>, <span class="s28">MAPCAR</span>, <span class="s28">MAPLIST</span>, etc., apply a given function repeatedly to different elements of a list, possibly constructing another list.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">These functions allow efficient iterative computations, but they are difficult to use. For programming iterative computations, it is usually better to use the CLISP Iterative Statement facility (see Chapter 9), which provides a more general and complete facility for expressing iterative statements. Whenever possible, CLISP transltes iterative statements into expressions using the functions below, so there is no efficiency loss.</p><p class="s28" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">RPT </span><span class="s16">N FORM</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Evaluates the expression <span class="s16">FORM</span>, <span class="s16">N </span>times. Returns the value of the last evaluation. If <span class="s16">N </span>is less than or equal to 0, <span class="s16">FORM </span>is not evaluated, and <span class="s28">RPT </span>returns <span class="s28">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Before each evaluation, the local variable <span class="s28">RPTN </span>is bound to the number of evaluations yet to take place. This variable can be referenced within <span class="s16">FORM</span>. For example, <span class="s28">(RPT 10 ’(PRINT RPTN)) </span>will print the numbers <span class="s28">10</span>, <span class="s28">9</span>...<span class="s28">1</span>, and return <span class="s28">1</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s28">(</span><b>RPTQ </b>N FORM<span class="s25">1</span> FORM<span class="s25">2</span>... FORM<span class="s25">N</span><span class="s28">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Nlambda-nospread version of <span class="s28">RPT</span>: <span class="s16">N </span>is evaluated, <span class="s16">FORM</span><span class="s25">i</span><span class="s16"> </span>are not. Returns the value of the last evaluation of <span class="s16">FORM</span><span class="s25">N</span>.</p><p class="s28" style="padding-top: 8pt;padding-left: 77pt;text-indent: -24pt;line-height: 144%;text-align: left;">(<span class="s15">FRPTQ </span><span class="s16">N FORM</span><span class="s25">1</span><span class="s16"> FORM</span><span class="s25">2</span><span class="s16">... FORM</span><span class="s25">N</span>) <span class="p">[NLambda NoSpread Function] Faster version of </span>RPTQ<span class="p">. Does not bind </span>RPTN<span class="p">.</span></p><p class="s16" style="padding-top: 1pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s28">(</span><b>MAP </b>MAP<span class="s25">X</span> MAPFN<span class="s25">1</span> MAPFN<span class="s25">2</span><span class="s33">) </span><span class="p">[Function]</span></p><p class="s16" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>MAPFN<span class="s25">2</span> <span class="p">is </span><span class="s28">NIL</span><span class="p">, </span><span class="s28">MAP </span><span class="p">applies the function </span>MAPFN<span class="s25">1</span> <span class="p">to successive tails of the list </span>MAP<span class="s25">X</span><span class="p">. That is, first it computes </span><span class="s28">(</span>MAPFN<span class="s25">1</span> MAP<span class="s25">X</span><span class="s28">)</span><span class="p">, and then </span><span class="s28">(</span>MAPFN<span class="s25">1</span> <span class="s28">(CDR </span>MAP<span class="s25">X</span><span class="s28">))</span><span class="p">, etc., until </span>MAP<span class="s25">X</span> <span class="p">becomes a non-list. If </span>MAPFN<span class="s25">2</span> <span class="p">is provided, </span><span class="s28">(</span>MAPFN<span class="s25">2</span> MAP<span class="s25">X</span><span class="s28">) </span><span class="p">is used instead of </span><span class="s28">(CDR </span>MAP<span class="s25">X</span><span class="s28">) </span><span class="p">for the next call for </span>MAPFN<span class="s25">1</span><span class="p">, e.g., if </span>MAPFN<span class="s25">2</span> <span class="p">were </span><span class="s28">CDDR</span><span class="p">, alternate elements of the list would be skipped. </span><span class="s28">MAP </span><span class="p">returns </span><span class="s28">NIL</span><span class="p">.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s28">(</span><b>MAPC </b>MAP<span class="s25">X</span> MAPFN<span class="s25">1</span> MAPFN<span class="s25">2</span><span class="s33">) </span><span class="p">[Function]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">Identical to </span>MAP<span class="p">, except that </span>(<span class="s16">MAPFN</span><span class="s25">1</span><span class="s16"> </span>(CAR <span class="s16">MAP</span><span class="s25">X</span>)) <span class="p">is computed at each iteration instead of</span></p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">(<span class="s16">MAPFN</span><span class="s25">1</span><span class="s16"> MAP</span><span class="s25">X</span>)<span class="p">, i.e., </span>MAPC <span class="p">works on elements, </span>MAP <span class="p">on tails. </span>MAPC <span class="p">returns </span>NIL<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s28">(</span><b>MAPLIST </b>MAP<span class="s25">X</span> MAPFN<span class="s25">1</span> MAPFN<span class="s25">2</span><span class="s33">)                                                                                </span><span class="p">[Function]</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Successively computes the same values that <span class="s28">MAP </span>would compute, and returns a list consisting of those values.</p><p class="s16" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s28">(</span><b>MAPCAR </b>MAP<span class="s25">X</span> MAPFN<span class="s25">1</span> MAPFN<span class="s25">2)</span>                                      <span class="p">[Function]</span></p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Computes the same values that <span class="s28">MAPC </span>would compute, and returns a list consisting of those values, e.g., <span class="s28">(MAPCAR X ’FNTYP) </span>is a list of <span class="s28">FNTYP</span>s for each element on <span class="s28">X</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s28">(</span><b>MAPCON </b>MAP<span class="s25">X</span> MAPFN<span class="s25">1</span> MAPFN<span class="s25">2</span><span class="p">)                                                                                           [Function]</span></p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Computes the same values that <span class="s28">MAP </span>and <span class="s28">MAPLIST </span>but <span class="s28">NCONCs </span>these values to form a list which it returns.</p><p class="s16" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s28">(</span><b>MAPCONC </b>MAP<span class="s25">X</span> MAPFN<span class="s25">1</span> MAPFN<span class="s25">2</span><span class="p">)                                                                                         [Function]</span></p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Computes the same values that <span class="s28">MAPC </span>and <span class="s28">MAPCAR</span>, but <span class="s28">NCONCs </span>the values to form a list which it returns.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note that <span class="s28">MAPCAR </span>creates a new list which is a mapping of the old list in that each element of the new list is the result of applying a function to the corresponding element on the original list. <span class="s28">MAPCONC </span>is used when there are a variable number of elements (including none) to be inserted at each iteration. Examples:</p><p class="s28" style="padding-top: 5pt;padding-left: 90pt;text-indent: -12pt;line-height: 88%;text-align: left;">(MAPCONC ’(A B C NIL D NIL) ’(LAMBDA (Y)(if (NULL Y) then NIL else (LIST Y)))) = &gt; (A B C D)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">This <span class="s28">MAPCONC </span>returns a list consisting of <span class="s28">MAP</span><span class="s37">X </span>with all <span class="s28">NILs </span>removed.</p><p class="s28" style="padding-top: 5pt;padding-left: 90pt;text-indent: -12pt;line-height: 88%;text-align: left;">(MAPCONC ’((A B) C (D E F)(G) H I) ’(LAMBDA (Y)(if (LISP Y) then Y else NIL))) = &gt; (A B D E F G)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">This <span class="s28">MAPCONC </span>returns a linear list consisting of all the lists on <span class="s16">MAP</span><span class="s25">X</span>.</p><p style="padding-top: 8pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Since <span class="s28">MAPCONC </span>uses <span class="s28">NCONC </span>to string the corresponding lists together, in this example the original list will be altered to be <span class="s28">((A B C D E F G) C (D E F G)(G) H I)</span>. If this is an undesirable side effect, the functional argument to <span class="s28">MAPCONC </span>should return instead a top level copy of the lists, i.e., <span class="s28">(LAMBDA (Y) (if (LISTP Y) then (APPERND Y) else NIL)))</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s28">(</span><b>MAP2C </b>MAP<span class="s25">X</span> MAP<span class="s25">Y</span> MAPFN<span class="s25">1</span> MAPFN<span class="s25">2</span><span class="s28">)                                                   </span><span class="p">[Function]</span></p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">Identical to </span><span class="s28">MAPC </span><span class="p">except </span>MAPFN<span class="s25">1</span> <span class="p">is a function of two arguments, and </span><span class="s28">(</span>MAPFN<span class="s25">1</span> <span class="s28">(CAR </span>MAP<span class="s25">X</span><span class="s28">)(CAR </span>MAP<span class="s25">Y</span><span class="s28">)) </span><span class="p">is computed at each iteration. Terminates when either </span>MAP<span class="s25">X</span> <span class="p">or </span>MAP<span class="s25">Y</span> <span class="p">is a non-list.</span></p><p class="s16" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">MAPFN<span class="s25">2</span> <span class="p">is still a function of one argument, and is applied twice on each iteration; </span><span class="s28">(</span>MAPFN<span class="s25">2</span> MAP<span class="s25">X</span><span class="s28">) </span><span class="p">gives the new </span>MAP<span class="s25">X</span><span class="p">, </span><span class="s28">(</span>MAPFN<span class="s25">2</span> MAP<span class="s25">Y</span><span class="s28">) </span><span class="p">the new </span>MAP<span class="s25">Y</span><span class="p">. </span><span class="s28">CDR </span><span class="p">is used if </span>MAPFN<span class="s25">2</span> <span class="p">is not supplied, i.e., is </span><span class="s28">NIL</span><span class="p">.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s28">(</span><b>MAP2CAR </b>MAP<span class="s25">X</span> MAP<span class="s25">Y</span> MAPFN<span class="s25">1</span> MAPFN<span class="s25">2</span><span class="p">)                                                                              [Function]</span></p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">Identical to </span><span class="s28">MAPCAR </span><span class="p">except </span>MAPFN<span class="s25">1</span> <span class="p">is a function of two arguments, and </span><span class="s28">(</span>MAPFN<span class="s25">1</span> <span class="s28">(CAR </span>MAP<span class="s25">X</span><span class="s28">)(CAR </span>MAP<span class="s25">Y</span><span class="s28">)) </span><span class="p">is used to assemble the new list. Terminates when either </span>MAP<span class="s25">X</span> <span class="p">or </span>MAP<span class="s25">Y</span> <span class="p">is a non-list.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">FUNCTION DEFINITION, MANIPULATION AND EVALUATION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s28">(</span><b>SUBSET </b>MAP<span class="s25">X</span> MAPFN<span class="s25">1</span> MAPFN<span class="s25">2</span><span class="p">) [Function]</span></p><p class="s16" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">Applies </span>MAPFN<span class="s25">1</span> <span class="p">to elements of </span>MAP<span class="s25">X</span> <span class="p">and returns a list of those elements for which this application is non-</span><span class="s28">NIL</span><span class="p">, e.g.:</span></p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(SUBSET ’(A B 3 C 4) ’NUMBERP) = (3 4)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">MAPFN</span><span class="s25">2</span><span class="s16"> </span>plays the same role as with <span class="s28">MAP</span>, <span class="s28">MAPC</span>, et al.</p><p class="s16" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s28">(</span><b>EVERY </b>EVERY<span class="s25">X</span> EVERYFN<span class="s25">1</span> EVERYFN<span class="s25">2</span><span class="s33">) </span><span class="p">[Function]</span></p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">Returns </span><span class="s28">T </span><span class="p">if the result of applying </span>EVERYFN<span class="s25">1</span> <span class="p">to each element in </span>EVERY<span class="s25">X</span> <span class="p">is true, otherwise</span></p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">NIL<span class="p">. For example, </span>(EVERY ’(X Y Z) ’ATOM) =&gt; T<span class="p">.</span></p><p class="s16" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s28">EVERY </span><span class="p">operates by evaluating </span><span class="s28">(</span>EVERYFN<span class="s25">1</span> <span class="s28">(CAR </span>EVERY<span class="s25">X</span><span class="s28">) </span>EVERY<span class="s25">X</span><span class="s28">)</span><span class="p">. The second argument is passed to </span>EVERYFN<span class="s25">1</span> <span class="p">so that it can look at the next element on </span>EVERY<span class="s25">X</span> <span class="p">if necessary. If </span>EVERYFN<span class="s25">1</span> <span class="p">yields </span><span class="s28">NIL</span><span class="p">, </span><span class="s28">EVERY </span><span class="p">immediately returns </span><span class="s28">NIL</span><span class="p">. Otherwise, </span><span class="s28">EVERY </span><span class="p">computes </span><span class="s28">(</span>EVERYFN<span class="s25">2</span> EVERY<span class="s25">X</span><span class="s28">)</span><span class="p">, or (</span><span class="s28">CDR </span>EVERY<span class="s25">X</span><span class="s28">) </span><span class="p">if </span>EVERYFN<span class="s25">2</span> <span class="p">= </span><span class="s28">NIL</span><span class="p">, and uses this as the “new” </span>EVERY<span class="s25">X</span><span class="p">, and the process continues. For example </span><span class="s28">(EVERY X ’ATOM ’CDDR) </span><span class="p">is true if every other element of </span>X <span class="p">is atomic.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s28">(</span><b>SOME </b>SOME<span class="s25">X</span> SOMEFN<span class="s25">1</span> SOMEFN<span class="s25">2</span><span class="p">) [Function]</span></p><p class="s28" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">Returns the tail of </span><span class="s16">SOME</span><span class="s25">X</span><span class="s16"> </span><span class="p">beginning with the first element that satisfies </span><span class="s16">SOMEFN</span><span class="s25">1</span><span class="p">, i.e., for which </span><span class="s16">SOMEFN</span><span class="s25">1</span><span class="s16"> </span><span class="p">applied to that element is true. Value is </span>NIL <span class="p">if no such element exists. </span>(SOME X ’(LAMBDA (Z) (EQUAL Z Y))) <span class="p">is equivalent to </span>(MEMBER Y X)<span class="p">. </span>SOME <span class="p">operates analogously to </span>EVERY<span class="p">. At each stage, </span>(<span class="s16">SOMEFN</span><span class="s25">1</span><span class="s16"> </span>(CAR <span class="s16">SOME</span><span class="s25">X</span>) <span class="s16">SOME</span><span class="s25">X</span>) <span class="p">is computed, and if this not </span>NIL<span class="p">, </span><span class="s16">SOME</span><span class="s25">X</span><span class="s16"> </span><span class="p">is returned as the value of </span>SOME<span class="p">.  Otherwise, </span>(<span class="s16">SOMEFN</span><span class="s25">2</span><span class="s16"> SOME</span><span class="s25">X</span>) <span class="p">is computed, or </span>(CDR <span class="s16">SOME</span><span class="s25">X</span>)</p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s28">if </span>SOMEFN<span class="s25">2</span> <span class="s28">= NIL</span><span class="p">, and used for the next </span>SOME<span class="s25">X</span><span class="p">.</span></p><p class="s16" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s28">(</span><b>NOTANY </b>SOME<span class="s25">X</span> SOMEFN<span class="s25">1</span> SOMEFN<span class="s25">2</span><span class="p">) [Function]</span></p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s28">(NOT (SOME </span>SOME<span class="s25">X</span> SOMEFN<span class="s25">1</span> SOMEFN<span class="s25">2</span><span class="s28">))</span><span class="p">.</span></p><p class="s16" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s28">(</span><b>NOTEVERY </b>EVERY<span class="s25">X</span> EVERYFN<span class="s25">1</span> EVERYFN<span class="s25">2</span><span class="p">) [Function]</span></p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s28">(NOT (EVERY </span>EVERY<span class="s25">X</span> EVERYFN<span class="s25">1</span> EVERYFN<span class="s25">2</span><span class="s28">))</span><span class="p">.</span></p><p class="s28" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">MAPRINT </span><span class="s16">LST FILE LEFT RIGHT SEP PFN LISPXPRINTFLG</span><span class="p">) [Function]</span></p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">A general printing function. For each element of the list <span class="s16">LST</span>, applies <span class="s16">PFN </span>to the element, and <span class="s16">FILE</span>. If <span class="s16">PFN </span>is <span class="s28">NIL</span>, <span class="s28">PRIN1 </span>is used. Between each application <span class="s28">MAPRINT </span>performs <span class="s28">PRIN1 </span>of <span class="s16">SEP </span><span class="s28">(</span>or <span class="s28">&quot;&quot; </span>if <span class="s16">SEP </span>= <span class="s28">NIL</span>). If <span class="s16">LEFT </span>is given, it is printed (using <span class="s28">PRIN1</span>) initially; if <span class="s16">RIGHT </span>is given, it is printed (using <span class="s28">PRIN1</span>) at the end.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For example, <span class="s28">(MAPRINT X NIL ’%( ’%)) </span>is equivalent to <span class="s28">PRIN1 </span>for lists. To print a list with commas between each element and a final <span class="s28">“.</span>” one could use <span class="s28">(MAPRINT X T NIL ’%. ’%,)</span>.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">LISPXPRINTFLG </span>= <span class="s28">T</span>, <span class="s28">LISPXPRIN1 </span>(see Chapter 13) is used instead of <span class="s28">PRIN1</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Functional Arguments                                                                                                                              </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The functions that call the Interlisp-D evaluator take “functional arguments,” which may be symbols with function definitions, or expr definition forms such as <span class="s28">(LAMBDA (X) ...)</span>.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following functions are useful when one wants to supply a functional argument which will always return <span class="s28">NIL</span>, <span class="s28">T</span>, or <span class="s28">0</span>. Note that the arguments <span class="s16">X</span><span class="s25">1</span><span class="s16"> ... X</span><span class="s25">N</span><span class="s16"> </span>to these functions are evaluated,</p><p style="padding-top: 2pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">though they are not used.</p><p class="s16" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s28">(</span><b>NILL </b>X<span class="s25">1</span> ... X<span class="s25">N</span> <span class="p">)                                                                                               [NoSpread Function]</span></p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns <span class="s28">NIL</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s28">(</span><b>TRUE </b>X<span class="s25">1</span> ... X<span class="s25">N</span> <span class="p">)                                                                                               [NoSpread Function]</span></p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns <span class="s28">T</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s28">(</span><b>ZERO </b>X<span class="s25">1</span> ... X<span class="s25">N</span> <span class="p">)                                                                                               [NoSpread Function]</span></p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns <span class="s28">0</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">When using expr definitions as function arguments, they should be enclosed within the function</p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">FUNCTION <span class="p">rather than </span>QUOTE<span class="p">, so that they will be compiled as separate functions.</span></p><p class="s28" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">FUNCTION </span><span class="s16">FN ENV </span><span class="p">)                                                                                           [NLambda Function]</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">ENV </span>= <span class="s28">NIL</span>, <span class="s28">FUNCTION </span>is the same as <span class="s28">QUOTE</span>, except that it is treated differently when compiled. Consider the function definition:</p><p class="s28" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">(DEFINEQ (FOO (LST)(FIE LST (FUNCTION (LAMBDA (Z)(ITIMES Z Z))]</p><p class="s28" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">FOO <span class="p">calls the function </span>FIE <span class="p">with the value of </span>LST <span class="p">and the expr definition </span>(LAMBDA (Z)(LIST (CAR Z)))<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If <span class="s28">FOO </span>is run interpreted, it does not make any difference whether <span class="s28">FUNCTION </span>or <span class="s28">QUOTE </span>is used. However, when <span class="s28">FOO </span>is compiled, if <span class="s28">FUNCTION </span>is used the compiler will define and compile the expr definition as an auxiliary function (see Chapter 18). The compiled expr definition will run considerably faster, which can make a big difference if it is applied repeatedly.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Compiling <span class="s28">FUNCTION </span>will <i>not </i>create an auxiliary function if it is a functional argument to a function that compiles open, such as most of the mapping functions (<span class="s28">MAPCAR</span>, <span class="s28">MAPLIST</span>, etc.).</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s16">ENV </span>is not <span class="s28">NIL</span>, it can be a list of variables that are (presumably) used freely by <span class="s16">FN</span>. <span class="s16">ENV </span>can also be an atom, in which case it is evaluated, and the value interpreted as described above.</p><h4 style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Macros                                                                                                                                                        </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Macros provide an alternative way of specifying the action of a function. Whereas function definitions are evaluated with a “function call”, which involves binding variables and other housekeeping tasks, macros are evaluated by <i>translating </i>one Interlisp form into another, which is then evaluated.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A symbol may have both a function definition and a macro definition. When a form is evaluated by the interpreter, if the <span class="s28">CAR </span>has a function definition, it is used (with a function call), otherwise if it has a</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">FUNCTION DEFINITION, MANIPULATION AND EVALUATION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">macro definition, then that is used. However, when a form is compiled, the <span class="s28">CAR </span>is checked for a macro definition first, and only if there isn’t one is the function definition compiled. This allows functions that behave differently when compiled and interpreted. For example, it is possible to define a function that, when interpreted, has a function definition that is slow and has a lot of error checks, for use when debugging a system. This function could also have a macro definition that defines a fast version of the function, which is used when the debugged system is compiled.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Macro definitions are represented by lists that are stored on the property list of a symbol. Macros are often used for functions that should be compiled differently in different Interlisp implementations, and the exact property name a macro definition is stored under determines whether it should be used in a particular implementation. The global variable <span class="s28">MACROPROPS </span>contains a list of all possible macro property names which should be saved by the <span class="s28">MACROS </span>file package command. Typical macro property names are <span class="s28">DMACRO </span>for Interlisp-D, <span class="s28">10MACRO </span>for Interlisp-10, <span class="s28">VAXMACRO </span>for Interlisp-VAX, <span class="s28">JMACRO </span>for Interlisp- Jerico, and <span class="s28">MACRO </span>for “implementation independent” macros. The global variable <span class="s28">COMPILERMACROPROPS </span>is a list of macro property names. Interlisp determines whether a symbol has a macro definition by checking these property names, in order, and using the first non-<span class="s28">NIL </span>property value as the macro definition. In Interlisp-D this list contains <span class="s28">DMACRO </span>and <span class="s28">MACRO </span>in that order so that <span class="s28">DMACRO</span>s will override the implementation-independent <span class="s28">MACRO </span>properties. In general, use a <span class="s28">DMACRO </span>property for macros that are to be used only in Interlisp-D, use <span class="s28">10MACRO </span>for macros that are to be used only in Interlisp-10, and use <span class="s28">MACRO </span>for macros that are to affect both systems.</p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Macro definitions can take the following forms:</p><p class="s28" style="padding-top: 7pt;padding-left: 76pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(<span class="s15">LAMBDA ...</span>)</p><p class="s28" style="padding-left: 150pt;text-indent: -78pt;text-align: left;">(<span class="s15">NLAMBDA ...</span>) <span class="p">A function can be made to compile open by giving it a macro definition of the form </span>(LAMBDA ...) <span class="p">or </span>(NLAMBDA ...)<span class="p">, e.g., </span>(LAMBDA (X) (COND ((GREATERP X</p><p class="s28" style="padding-left: 150pt;text-indent: 0pt;line-height: 91%;text-align: justify;">0) X) (T (MINUS X)))) <span class="p">for </span>ABS<span class="p">. The effect is as if the macro definition were written in place of the function wherever it appears in a function being compiled, i.e., it compiles as a lambda or nlambda expression. This saves the time necessary to call the function at the price of more compiled code generated in-line.</span></p><p class="s28" style="padding-top: 8pt;padding-left: 57pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(<span class="s15">NIL </span><span class="s16">EXPRESSION</span>)</p><p class="s28" style="padding-left: 150pt;text-indent: -97pt;line-height: 92%;text-align: justify;">(<span class="s15">LIST </span><span class="s16">EXPRESSION</span>) <span class="p">“Substitution” macro. Each argument in the form being evaluated or compiled is substituted for the corresponding atom in </span>LIST<span class="p">, and the result of the substitution is used instead of the form. For example, if the macro definition of </span>ADD1 <span class="p">is </span>((X) (IPLUS X 1))<span class="p">, then, </span>(ADD1 (CAR Y)) <span class="p">is compiled as </span>(IPLUS (CAR Y) 1).</p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: 0pt;line-height: 91%;text-align: left;">Note that <span class="s28">ABS </span>could be defined by the substitution macro <span class="s28">((X) (COND ((GREATERP X 0) X) (T (MINUS X))))</span>. In this case, however, <span class="s28">(ABS (FOO X))</span></p><p style="padding-left: 150pt;text-indent: 0pt;line-height: 11pt;text-align: left;">would compile as</p><p class="s28" style="padding-top: 4pt;padding-left: 150pt;text-indent: 0pt;line-height: 6pt;text-align: left;">(COND ((GREATERP (FOO X) 0)</p><p class="s28" style="padding-left: 153pt;text-indent: 35pt;line-height: 88%;text-align: left;">(FOO X)) (T (MINUS (FOO X))))</p><p style="padding-top: 4pt;padding-left: 150pt;text-indent: 0pt;line-height: 12pt;text-align: left;">and <span class="s28">(FOO X) </span>would be evaluated two times. (Code to evaluate <span class="s28">(FOO X)</span></p><p style="padding-left: 150pt;text-indent: 0pt;line-height: 12pt;text-align: left;">would be generated three times.)</p><p class="s28" style="padding-top: 7pt;padding-left: 25pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(<span class="s15">OPENLAMBDA </span><span class="s16">ARGS BODY</span>) <span class="p">This is a cross between substitution and </span>LAMBDA <span class="p">macros. When the</span></p><p style="padding-left: 149pt;text-indent: 0pt;line-height: 91%;text-align: left;">compiler processes an <span class="s28">OPENLAMBDA</span>, it attempts to substitute the actual arguments for the formals wherever this preserves the frequency and</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 197pt;text-indent: 0pt;line-height: 91%;text-align: justify;">order of evaluation that would have resulted from a <span class="s28">LAMBDA </span>expression, and produces a <span class="s28">LAMBDA </span>binding only for those that require it.</p><p style="padding-top: 6pt;padding-left: 197pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><b>Note</b>: <span class="s28">OPENLAMBDA </span>assumes that it can substitute literally the actual arguments for the formal arguments in the body of the macro if the actual is side-effect free or a constant. Thus, you should be careful to use names in <span class="s16">ARGS </span>which don’t occur in <span class="s16">BODY </span>(except as variable references). For example, if <span class="s28">FOO </span>has a macro definition of</p><p class="s28" style="padding-top: 4pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">(OPENLAMBDA (ENV) (FETCH (MY-RECORD-TYPE ENV) OF BAR))</p><p style="padding-top: 5pt;padding-left: 198pt;text-indent: 0pt;text-align: justify;">then <span class="s28">(FOO NIL) </span>will expand to</p><p class="s28" style="padding-top: 4pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">(FETCH (MY-RECORD-TYPE NIL) OF BAR)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 198pt;text-indent: -17pt;line-height: 92%;text-align: justify;"><span class="s15">T </span>When a macro definition is the atom <span class="s28">T</span>, it means that the compiler should ignore the macro, and compile the function definition; this is a simple way of turning off other macros. For example, the user may have a function that runs in both Interlisp-D and Interlisp-10, but has a macro definition that should only be used when compiling in Interlisp-</p><ol id="l11"><li><p style="padding-left: 197pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the <span class="s28">MACRO </span>property has the macro specification, a <span class="s28">DMACRO </span>of <span class="s28">T </span>will cause it to be ignored by the Interlisp-D compiler. This <span class="s28">DMACRO </span>would not be necessary if the macro were specified by a <span class="s28">10MACRO </span>instead of a <span class="s28">MACRO</span>.</p><p class="s28" style="padding-top: 7pt;padding-left: 198pt;text-indent: -116pt;line-height: 92%;text-align: justify;">(<span class="s15">= . </span><span class="s16">OTHER-FUNCTION</span>) <span class="p">A simple way to tell the compiler to compile one function exactly as it would compile another. For example, when compiling in Interlisp-D, </span>FRPLACA<span class="p">s are treated as </span>RPLACA<span class="p">s. This is achieved by having </span>FRPLACA <span class="p">have a </span>DMACRO <span class="p">of </span>(= . RPLACA)<span class="p">.</span></p><p style="padding-top: 8pt;padding-left: 197pt;text-indent: -113pt;line-height: 93%;text-align: justify;"><span class="s28">(</span><span class="s15">LITATOM </span><span class="s16">EXPRESSION</span><span class="s28">) </span>If a macro definition begins with a symbol other than those given above, this allows <i>computation </i>of the Interlisp expression to be evaluated or compiled in place of the form. <span class="s28">LITATOM </span>is bound to the <span class="s28">CDR </span>of the calling form, <span class="s16">EXPRESSION </span>is evaluated, and the result of this evaluation is evaluated or compiled in place of the form. For example, <span class="s28">LIST </span>could be compiled using the computed macro:</p><p class="s28" style="padding-top: 4pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">[X (LIST ’CONS (CAR X)(AND (CDR X)(CONS ’LIST (CDR X]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 198pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This would cause <span class="s28">(LIST X Y Z) </span>to compile as <span class="s28">(CONS X (CONS Y (CONS Z NIL)))</span>. Note the recursion in the macro expansion.</p><p style="padding-top: 6pt;padding-left: 197pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the result of the evaluation is the symbol <span class="s28">IGNOREMACRO</span>, the macro is ignored and the compilation of the expression proceeds as if there were no macro definition. If the symbol in question is normally treated specially by the compiler (<span class="s28">CAR</span>, <span class="s28">CDR</span>, <span class="s28">COND</span>, <span class="s28">AND</span>, etc.), and also has a macro, if the macro expansion returns <span class="s28">IGNOREMACRO</span>, the symbol will still be treated specially.</p><p style="padding-top: 6pt;padding-left: 198pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In Interlisp-10, if the result of the evaluation is the atom <span class="s28">INSTRUCTIONS</span>, no code will be generated by the compiler. It is then assumed the evaluation was done for effect and the necessary code, if any, has been added. This is a way of giving direct instructions to the compiler if you understand it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">FUNCTION DEFINITION, MANIPULATION AND EVALUATION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: 0pt;line-height: 91%;text-align: left;">It is often useful, when constructing complex macro expressions, to use the <span class="s28">BQUOTE </span>facility (see the Read Macros section of Chapter 25).</p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: 0pt;text-align: left;">The following function is quite useful for debugging macro definitions:</p><p class="s28" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">EXPANDMACRO </span><span class="s16">EXP QUIETFLG </span>— —) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Takes a form whose <span class="s28">CAR </span>has a macro definition and expands the form as it would be compiled. The result is prettyprinted, unless <span class="s16">QUIETFLG</span>=<span class="s28">T</span>, in which case the result is simply returned.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><b>Note</b>: <span class="s28">EXPANDMACRO </span>only works on Interlisp macros. Use <span class="s28">CL:MACROEXPAND-1 </span>to expand Interlisp macros visible to the Common Lisp interpreter and compliler.</p><p class="s6" style="padding-top: 10pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">DEFMACRO</p><p style="padding-top: 4pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Macros defined with the function <span class="s28">DEFMACRO </span>are much like “computed” macros (see the above section), in that they are defined with a form that is evaluated, and the result of the evaluation is used (evaluated or compiled) in place of the macro call. However, <span class="s28">DEFMACRO </span>macros support complex argument lists with optional arguments, default values, and keyword arguments as well as argument list destructuring.</p><p class="s16" style="padding-top: 2pt;padding-left: 77pt;text-indent: -24pt;line-height: 17pt;text-align: justify;"><span class="s28">(</span><b>DEFMACRO </b>NAME ARGS FORM<span class="s28">) </span><span class="p">[NLambda NoSpread Function] Defines </span>NAME <span class="p">as a macro with the arguments </span>ARGS <span class="p">and the definition form </span>FORM <span class="p">(</span>NAME<span class="p">,</span></p><p class="s16" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">ARGS<span class="p">, and </span>FORM <span class="p">are unevaluated). If an expression starting with </span>NAME <span class="p">is evaluated or compiled, arguments are bound according to </span>ARGS<span class="p">, </span>FORM <span class="p">is evaluated, and the value of </span>FORM <span class="p">is evaluated or compiled instead. The interpretation of </span>ARGS <span class="p">is described below.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><b>Note</b>: Like the function <span class="s28">DEFMACRO </span>in Common Lisp, this function currently removes any function definition for <span class="s16">NAME</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">ARGS <span class="p">is a list that defines how the argument list passed to the macro </span>NAME <span class="p">is interpreted. Specifically, </span>ARGS <span class="p">defines a set of variables that are set to various arguments in the macro call (unevaluated), that </span>FORM <span class="p">can reference to construct the macro form.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">In the simplest case, <span class="s16">ARGS </span>is a simple list of variable names that are set to the corresponding elements of the macro call (unevaluated). For example, given:</p><p class="s28" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(DEFMACRO FOO (A B) (LIST ’PLUS A B B))</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The macro call <span class="s28">(FOO X (BAR Y Z)) </span>will expand to <span class="s28">(PLUS X (BAR Y Z) (BAR Y Z))</span>.</p><p class="s28" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">“&amp;<span class="p">-keywords” (beginning with the character </span>“&amp;<span class="p">”) that are used to set variables to particular items from the macro call form, as follows:</span></p><p style="padding-top: 7pt;padding-left: 149pt;text-indent: -60pt;line-height: 94%;text-align: justify;"><span class="s15">&amp;OPTIONAL </span>Used to define optional arguments, possibly with default values. Each element on <span class="s16">ARGS </span>after <span class="s28">&amp;OPTIONAL </span>until the next <span class="s28">&amp;</span>-keyword or the end of the list defines an optional argument, which can either be a symbol or a list, interpreted as follows:</p><p class="s16" style="padding-top: 4pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">VAR</p><p style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;line-height: 91%;text-align: left;">If an optional argument is specified as a symbol, that variable is set to the corresponding element of the macro call (unevaluated).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">&amp;REST</p><p class="s28" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">(<span class="s16">VAR DEFAULT</span>)</p><p style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">If an optional argument is specified as a two element list, <span class="s16">VAR </span>is the variable to be set, and <span class="s16">DEFAULT </span>is a form that is evaluated and used as the default if there is no corresponding element in the macro call.</p><p class="s28" style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">(<span class="s16">VAR DEFAULT VARSETP</span>)</p><p style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If an optional argument is specified as a three element list, <span class="s16">VAR </span>and <span class="s16">DEFAULT </span>are the variable to be set and the default form, and <span class="s16">VARSETP </span>is a variable that is set to <span class="s28">T </span>if the optional argument is given in the macro call, <span class="s28">NIL </span>otherwise. This can be used to determine whether the argument was not given, or whether it was specified with the default value.</p><p style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">For example, after <span class="s28">(DEFMACRO FOO (&amp;OPTIONAL A (B 5) (C 6 CSET)) FORM)</span></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 91%;text-align: justify;">expanding the macro call <span class="s28">(FOO) </span>would cause <span class="s28">FORM </span>to be evaluated with <span class="s28">A </span>set to <span class="s28">NIL</span>, <span class="s28">B </span>set to <span class="s28">5</span>, <span class="s28">C </span>set to <span class="s28">6</span>, and <span class="s28">CSET </span>set to <span class="s28">NIL</span>. <span class="s28">(FOO 4 5 6) </span>would be the same, except that <span class="s28">A </span>would be set to <span class="s28">4 </span>and <span class="s28">CSET </span>would be set to <span class="s28">T</span>.</p><p style="padding-left: 197pt;text-indent: -39pt;line-height: 92%;text-align: justify;"><span class="s15">&amp;BODY </span>Used to get a list of all additional arguments from the macro call. Either <span class="s28">&amp;REST </span>or <span class="s28">&amp;BODY </span>should be followed by a single symbol, which is set to a list of all arguments to the macro after the position of the <span class="s28">&amp;</span>-keyword. For example, given</p><p class="s28" style="padding-top: 5pt;padding-left: 198pt;text-indent: 0pt;text-align: justify;">(DEFMACRO FOO (A B &amp;REST C) FORM)</p><p style="padding-top: 5pt;padding-left: 198pt;text-indent: 0pt;text-align: justify;">expanding the macro call <span class="s28">(FOO 1 2 3 4 5) </span>would cause <span class="s28">FORM </span>to be evaluated with <span class="s28">A </span>set to <span class="s28">1</span>, <span class="s28">B </span>set to <span class="s28">2</span>, and <span class="s28">C </span>set to <span class="s28">(3 4 5)</span><span class="s5">.</span></p><p style="padding-top: 6pt;padding-left: 197pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the macro calling form contains keyword arguments (see <span class="s28">&amp;KEY </span>below), these are included in the <span class="s28">&amp;REST </span>list.</p><p class="s15" style="padding-top: 7pt;padding-left: 197pt;text-indent: -33pt;line-height: 93%;text-align: justify;">&amp;KEY <span class="p">Used to define keyword arguments, that are specified in the macro call by including a “keyword” (a symbol starting with the character “:”) followed by a value.</span></p><p style="padding-top: 6pt;padding-left: 197pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Each element on <span class="s28">ARGS </span>after <span class="s28">&amp;KEY </span>until the next <span class="s28">&amp;</span>-keyword or the end of the list defines a keyword argument, which can either be a symbol or a list, interpreted as follows:</p><p class="s16" style="padding-top: 4pt;padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">VAR</p><p class="s28" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(<span class="s16">VAR</span>)</p><p class="s28" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((<span class="s16">KEYWORD VAR</span>))</p><p style="padding-top: 6pt;padding-left: 198pt;text-indent: 0pt;text-align: justify;">If a keyword argument is specified by a single symbol <span class="s16">VAR</span>, or a one- element list containing <span class="s16">VAR</span>, it is set to the value of a keyword argument, where the keyword used is created by adding the character “:” to the front of <span class="s16">VAR</span>. If a keyword argument is specified by a single- element list containing a two-element list, <span class="s16">KEYWORD </span>is interpreted as the keyword (which should start with the letter “:”), and <span class="s16">VAR </span>is the variable to set.</p><p class="s28" style="padding-top: 4pt;padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(<span class="s16">VAR DEFAULT</span>)</p><p class="s28" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((<span class="s16">KEYWORD VAR</span>) <span class="s16">DEFAULT</span>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">FUNCTION DEFINITION, MANIPULATION AND EVALUATION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 6pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(<span class="s16">VAR DEFAULT VARSETP</span>)</p><p class="s28" style="padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((<span class="s16">KEYWORD VAR</span>) <span class="s16">DEFAULT VARSETP</span>)</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If a keyword argument is specified by a two- or three-element list, the first element of the list specifies the keyword and variable to set as above. Similar to <span class="s28">&amp;OPTIONAL </span>(above), the second element <span class="s16">DEFAULT </span>is a form  that  is  evaluated  and  used  as  the  default  if  there  is  no corresponding element in the macro call, and the third element <span class="s16">VARSETP </span>is a variable that is set to <span class="s28">T </span>if the optional argument is given in the macro call, <span class="s28">NIL </span>otherwise.</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">For example, the form</p><p class="s28" style="padding-top: 4pt;padding-left: 150pt;text-indent: 0pt;text-align: left;">(DEFMACRO FOO (&amp;KEY A (B 5 BSET) ((:BAR C) 6 CSET)) FORM)</p><p style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;text-align: justify;">Defines a macro with keys <span class="s28">:A</span>, <span class="s28">:B </span>(defaulting to <span class="s28">5</span>), and <span class="s28">:BAR</span>. Expanding the macro call <span class="s28">(FOO :BAR 2 :A 1) </span>would cause <span class="s28">FORM </span>to be evaluated with <span class="s28">A </span>set to <span class="s28">1</span>, <span class="s28">B </span>set to <span class="s28">5</span>, <span class="s28">BSET </span>set to <span class="s28">NIL</span>, <span class="s28">C </span>set to <span class="s28">2</span>, and <span class="s28">CSET </span>set to <span class="s28">T</span><span class="s5">.</span></p><p style="padding-top: 7pt;padding-left: 149pt;text-indent: -103pt;text-align: justify;"><span class="s15">&amp;ALLOW-OTHER-KEYS </span>It is an error for any keywords to be supplied in a macro call that are not defined as keywords in the macro argument list, unless either the <span class="s28">&amp;</span>- keyword <span class="s28">&amp;ALLOW-OTHER-KEYS </span>appears in <span class="s16">ARGS</span>, or the keyword <span class="s28">:ALLOW-OTHER- KEYS </span>(with a non-<span class="s28">NIL </span>value) appears in the macro call<span class="s5">.</span></p><p style="padding-top: 8pt;padding-left: 149pt;text-indent: -33pt;line-height: 92%;text-align: justify;"><span class="s15">&amp;AUX </span>Used to bind and initialize auxiliary varables, using a syntax similar to <span class="s28">PROG </span>(see the <span class="s28">PROG </span>and Associated Control Functions section of Chapter 9). Any elements after <span class="s28">&amp;AUX </span>should be either symbols or lists, interpreted as follows:</p><p class="s16" style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">VAR</p><p style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Single symbols are interpreted as auxiliary variables that are initially bound to <span class="s28">NIL</span>.</p><p class="s28" style="padding-top: 4pt;padding-left: 150pt;text-indent: 0pt;text-align: left;">(<span class="s16">VAR EXP</span>)</p><p style="padding-top: 4pt;padding-left: 149pt;text-indent: 0pt;text-align: justify;">If an auxiliary variable is specified as a two element list, <span class="s16">VAR </span>is a variable initially bound to the result of evaluating the form <span class="s16">EXP</span>.</p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">For example, given</p><p class="s28" style="padding-top: 4pt;padding-left: 150pt;text-indent: 0pt;text-align: left;">(DEFMACRO FOO (A B &amp;AUX C (D 5)) FORM)</p><p style="padding-top: 4pt;padding-left: 150pt;text-indent: 0pt;text-align: left;"><span class="s28">C </span>will be bound to <span class="s28">NIL </span>and <span class="s28">D </span>to <span class="s28">5 </span>when <span class="s16">FORM </span>is evaluated.</p><p style="padding-top: 8pt;padding-left: 149pt;text-indent: -44pt;text-align: justify;"><span class="s15">&amp;WHOLE </span>Used to get the whole macro calling form. Should be the first element of <span class="s16">ARGS</span>, and should be followed by a single symbol, which is set to the entire macro calling form. Other <span class="s28">&amp;</span>-keywords or arguments can follow.</p><p style="padding-left: 150pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">For example, given</p><p class="s28" style="padding-top: 4pt;padding-left: 150pt;text-indent: 0pt;text-align: left;">(DEFMACRO FOO (&amp;WHOLE X A B) FORM)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Expanding the macro call <span class="s28">(FOO 1 2) </span>would cause <span class="s28">FORM </span>to be evaluated with <span class="s28">X </span>set to <span class="s28">(FOO 1 2)</span>, <span class="s28">A </span>set to <span class="s28">1</span>, and <span class="s28">B </span>set to <span class="s28">2</span>.</p><p class="s28" style="padding-top: 6pt;padding-left: 150pt;text-indent: 0pt;line-height: 91%;text-align: justify;">DEFMACRO <span class="p">macros also support argument list “destructuring,” a facility for accessing the structure of individual arguments to a macro. Any place</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Interpreting Macros</p><p style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;line-height: 91%;text-align: justify;">in an argument list where a symbol is expected, an argument list (in the form described above) can appear instead. Such an embedded argument list is used to match the corresponding parts of that particular argument, which should be a list structure in the same form. In the simplest case, where the embedded argument list does not include &amp;- keywords, this provides a simple way of picking apart list structures passed as arguments to a macro. For example, given</p><p class="s28" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">(DEFMACRO FOO (A (B (C . D)) E) FORM)</p><p style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Expanding the macro call <span class="s28">(FOO 1 (2 (3 4 5)) 6) </span>would cause <span class="s28">FORM </span>to be evaluated with with <span class="s28">A </span>set to <span class="s28">1</span>, <span class="s28">B </span>set to <span class="s28">2</span>, <span class="s28">C </span>set to <span class="s28">3</span>, <span class="s28">D </span>set to <span class="s28">(4 5)</span>, and <span class="s28">E </span>set to <span class="s28">6</span>. Note that the embedded argument list <span class="s28">(B (C . D)) </span>has an embedded argument list <span class="s28">(C . D)</span>. Also notice that if an argument list ends in a dotted pair, that the final symbol matches the rest of the arguments in the macro call.</p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 91%;text-align: justify;">An embedded argument list can also include <span class="s28">&amp;</span>-keywords, for interpreting parts of embedded list structures as if they appeared in a top-level macro call. For example, given</p><p class="s28" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">(DEFMACRO FOO (A (B &amp;OPTIONAL (C 6)) D) FORM)</p><p style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Expanding the macro call <span class="s28">(FOO 1 (2) 3) </span>would cause <span class="s28">FORM </span>to be evaluated with with <span class="s28">A </span>set to <span class="s28">1</span>, <span class="s28">B </span>set to <span class="s28">2</span>, <span class="s28">C </span>set to <span class="s28">6 </span>(because of the default value), and</p><p class="s28" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">D <span class="p">set to </span>3<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><b>Warning</b>: Embedded argument lists can only appear in positions in an argument list where a list is otherwise not accepted. In the above example, it would not be possible to specify an embedded argument list after the <span class="s28">&amp;OPTIONAL </span>keyword, because it would be interpreted as an optional argument specification (with variable name, default value, set variable). However, it would be possible to specify an embedded argument list as the first element of an optional argument specification list, as so<span class="s5">:</span></p><p class="s28" style="padding-top: 5pt;padding-left: 42pt;text-indent: -18pt;line-height: 88%;text-align: left;">(DEFMACRO FOO (A (B &amp;OPTIONAL ((X (Y) Z) ’(1 (2) 3))) D) FORM)</p><p style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In this case, <span class="s28">X</span>, <span class="s28">Y</span>, and <span class="s28">Z </span>default to <span class="s28">1</span>, <span class="s28">2</span>, and <span class="s28">3</span>, respectively. Note that the “default” value has to be an appropriate list structure. Also, in this case either the whole structure <span class="s28">(X (Y) Z) </span>can be supplied, or it can be defaulted (i.e., is not possible to specify <span class="s28">X </span>while letting <span class="s28">Y </span>default).</p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When the interpreter encounters a form <span class="s28">CAR </span>of which is an undefined function, it tries interpreting it as a macro. If <span class="s28">CAR </span>of the form has a macro definition, the macro is expanded, and the result of this expansion is evaluated in place of the original form. <span class="s28">CLISPTRAN </span>(see the Miscellaneous Functions and Variables section of Chapter 21) is used to save the result of this expansion so that the expansion only has to be done once. On subsequent occasions, the translation (expansion) is retrieved from <span class="s28">CLISPARRAY </span>the same as for other <span class="s28">CLISP </span>constructs.</p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><b>Note</b>: Because of the way that the evaluator processes macros, if you have a macro on <span class="s28">FOO</span>, then typing</p><p class="s28" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(FOO ’A ’B) <span class="p">will work, </span>but FOO(A B) <span class="p">will not work.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 4pt;padding-left: 274pt;text-indent: -19pt;text-align: left;"><a name="bookmark12">VARIABLE BINDINGS AND THE STACK</a></p></li></ol></li></ol><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_017.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley uses “deep binding.” Every time a function is entered, a basic frame containing the new variables is put on top of the stack. Therefore, any variable reference requires searching the stack for the first instance of that variable, which makes free variable use somewhat more expensive than in a shallow binding scheme. On the other hand, spaghetti stack operations are considerably faster. Some other tricks involving copying freely-referenced variables to higher frames on the stack are also used to speed up the search.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The basic frames are allocated on a stack; for most user purposes, these frames should be thought of as containing the variable names associated with the function call, and the <i>current </i>values for that frame. The descriptions of the stack functions in below are presented from this viewpoint. Both interpreted and compiled functions store both the names and values of variables so that interpreted and compiled functions are compatible and can be freely intermixed, i.e., free variables can be used with no <span class="s11">SPECVAR </span>declarations necessary. However, it is possible to <i>suppress </i>storing of names in compiled functions, either for efficiency or to avoid a clash, via a <span class="s11">LOCALVAR </span>declaration (see the Local Variables and Special Variables section of Chapter 18). The names are also very useful in debugging, for they make possible a complete symbolic backtrace in case of error.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In addition to the binding information, additional information is associated with each function call: access information indicating the path to search the basic frames for variable bindings, control information, and temporary results are also stored on the stack in a block called the frame extension. The interpreter also stores information about partially evaluated expressions as described in the Stack and Interpreter section of Chapter 11.</p><h4 style="padding-top: 10pt;padding-left: 30pt;text-indent: -24pt;text-align: left;">Spaghetti Stack                                                                                                                                         </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The Bobrow / Wegbreit paper, “A Model and Stack Implementation for Multiple Environments” (<i>Communications of the ACM, </i>Vol. 16, 10, October 1973.), describes an access and control mechanism more general than a simple linear stack. The access and control mechanism used by Interlisp is a slightly modified version of the one proposed by Bobrow and Wegbreit. This mechanism is called the “spaghetti stack.”</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The spaghetti system presents the access and control stack as a data structure composed of “frames.” The functions described below operate on this structure. These primitives allow user functions to manipulate the stack in a machine independent way. Backtracking, coroutines, and more sophisticated control schemes can be easily implemented with these primitives.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The evaluation of a function requires the allocation of storage to hold the values of its local variables during the computation. In addition to variable bindings, an activation of a function requires a return link (indicating where control is to go after the completion of the computation) and room for temporaries needed during the computation. In the spaghetti system, one “stack” is used for storing all this information, but it is best to view this stack as a tree of linked objects called frame extensions (or simply frames).</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A frame extension is a variable sized block of storage containing a frame name, a pointer to some variable bindings (the <span class="s11">BLINK</span>), and two pointers to other frame extensions (the <span class="s11">ALINK </span>and <span class="s11">CLINK</span>). In addition to these components, a frame extension contains other information (such as temporaries and reference counts) that does not interest us here.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The block of storage holding the variable bindings is called a basic frame. A basic frame is essentially an array of pairs, each of which contains a variable name and its value. The reason frame extensions point to basic frames (rather than just having them “built in”) is so that two frame extensions can share a common basic frame. This allows two processes to communicate via shared variable bindings.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The chain of frame extensions which can be reached via the successive <span class="s11">ALINK</span>s from a given frame is called the “access chain” of the frame. The first frame in the access chain is the starting frame. The chain through successive <span class="s11">CLINK</span>s is called the “control chain”.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A frame extension completely specifies the variable bindings and control information necessary for the evaluation of a function. Whenever a function (or in fact, any form which generally binds local variables) is evaluated, it is associated with some frame extension.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In the beginning there is precisely one frame extension in existence. This is the frame in which the top-level call to the interpreter is being run. This frame is called the “top-level” frame.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Since precisely one function is being executed at any instant, exactly one frame is distinguished as having the “control bubble” in it. This frame is called the active frame. Initially, the top-level frame is the active frame. If the computation in the active frame invokes another function, a new basic frame and frame extension are built. The frame name of this basic frame will be the name of the function being called. The <span class="s11">ALINK</span>, <span class="s11">BLINK</span>, and <span class="s11">CLINK </span>of the new frame all depend on precisely how the function is invoked. The new function is then run in this new frame by passing control to that frame, i.e., it is made the active frame.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Once the active computation has been completed, control normally returns to the frame pointed to by the <span class="s11">CLINK </span>of the active frame. That is, the frame in the <span class="s11">CLINK </span>becomes the active frame.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In most cases, the storage associated with the basic frame and frame extension just abandoned can be reclaimed. However, it is possible to obtain a pointer to a frame extension and to “hold on” to this frame even after it has been exited. This pointer can be used later to run another computation in that environment, or even “continue” the exited computation.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A separate data type, called a stack pointer, is used for this purpose. A stack pointer is just a cell that literally points to a frame extension. Stack pointers print as <span class="s11">#ADR/FRAMENAME</span>, e.g., <span class="s11">#1,13636/COND</span>. Stack pointers are returned by many of the stack manipulating functions described below. Except for certain abbreviations (such as “the frame with such-and-such a name”), stack pointers are the only way you can reference a frame extension. As long as you have a stack pointer which references a frame extension, that frame extension (and all those that can be reached from it) will not be garbage collected.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Two stack pointers referencing the same frame extension are <i>not </i>necessarily <span class="s11">EQ</span>, i.e., <span class="s11">(EQ (STKPOS ’FOO) (STKPOS ’FOO)) = NIL</span>. However, <span class="s11">EQP </span>can be used to test if two different stack pointers reference the same frame extension (see the Equality Predicates section of Chapter 9).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">It is possible to evaluate a form with respect to an access chain other than the current one by using a stack pointer to refer to the head of the access chain desired. Note, however, that this can be very expensive when using a shallow binding scheme such as that in Interlisp-10.  When evaluating the form, since all references to variables under the shallow binding scheme go through the variable’s value cell, the values in the value cells must be adjusted to reflect the values appropriate to the desired access chain. This is done by changing all the bindings on the current access chain (all the name-value pairs) so that they contain the value current at the time of the call. Then along the new access path, all</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 273pt;text-indent: 0pt;text-align: left;">VARIABLE BINDINGS AND THE STACK</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">bindings are made to contain the previous value of the variable, and the current value is placed in the value cell. For that part of the access path which is shared by the old and new chain, no work has to be done. The context switching time, i.e. the overhead in switching from the current, active, access chain to another one, is directly proportional to the size of the two branches that are not shared between the access contexts. This cost should be remembered in using generators and coroutines (see the Generators section below).</p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Stack Functions                                                                                                                                        </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In the descriptions of the stack functions below, when we refer to an argument as a stack descriptor, we mean that it is one of the following:</p><p style="padding-top: 6pt;padding-left: 131pt;text-indent: -66pt;line-height: 91%;text-align: left;">A stack pointer An object that points to a frame on the stack. Stack pointers are returned by many of the stack manipulating functions described below.</p><p class="s11" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">NIL <span class="p">Specifies the active frame; that is, the frame of the stack function itself.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 120pt;text-indent: 0pt;text-align: left;">T <span class="p">Specifies the top-level frame.</span></p><p style="padding-top: 7pt;padding-left: 131pt;text-indent: -44pt;line-height: 91%;text-align: left;">A symbol Specifies the first frame (along the control chain from the active frame) that has the frame name <span class="s11">LITATOM</span>. Equivalent to <span class="s11">(STKPOS LITATOM -1)</span>.</p><p style="padding-top: 7pt;padding-left: 132pt;text-indent: -72pt;line-height: 91%;text-align: left;">A list of symbols Specifies the first frame (along the control chain from the active frame) whose frame name is included in the list.</p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -54pt;line-height: 93%;text-align: justify;">A number <span class="s16">N </span>Specifies the <span class="s16">N</span>th frame back from the active frame. If <span class="s16">N </span>is negative, the control chain is followed, otherwise the access chain is followed. Equivalent to <span class="s11">(STKNTH N)</span>.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">In the stack functions described below, the following errors can occur: The error <span class="s11">Illegal stack arg </span>occurs when a stack descriptor is expected and the supplied argument is either not a legal stack descriptor (i.e., not a stack pointer, symbol, or number), or is a symbol or number for which there is no corresponding stack frame, e.g., <span class="s11">(STKNTH -1 ’FOO) </span>where there is no frame named <span class="s11">FOO </span>in the active control chain or <span class="s11">(STKNTH -10 ’EVALQT)</span>. The error <span class="s11">Stack pointer has been released </span>occurs whenever a released stack pointer is supplied as a stack descriptor argument for any purpose other than as a stack pointer to re-use.</p><p class="s17" style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note<span class="p">: The creation of a single stack pointer can result in the retention of a large amount of stack space. Therefore, one should try to release stack pointers when they are no longer needed (see the Releasing and Reusing Stack Pointers section below).</span></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">In Lisp there is a fixed ammount of space allocated for the stack. When most of this space is exhausted, the <span class="s11">STACK OVERFLOW </span>error occurs and the debugger will be invoked. You will still have a little room on the stack to use inside the debugger. If you use up this last little bit of stack you will encounter a “hard” stack overflow. A “hard” stack overflow will put you into URaid (see the documentation on URaid).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Searching the Stack                                                                                                                                  </h4><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>STKPOS </b><i>FRAMENAME N POS OLDPOS</i>)                                <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns a stack pointer to the <span class="s16">N</span>th frame with frame name <span class="s16">FRAMENAME</span>. The search begins with (and includes) the frame specified by the stack descriptor <span class="s16">POS</span>. The search proceeds along the control chain from <span class="s16">POS </span>if <span class="s16">N </span>is negative, or along the access chain if <span class="s16">N </span>is positive. If <span class="s16">N </span>is <span class="s11">NIL</span>, -1 is used. Returns a stack pointer to the frame if such a frame exists, otherwise returns <span class="s11">NIL</span>. If <span class="s16">OLDPOS </span>is supplied and is a stack pointer, it is reused. If <span class="s16">OLDPOS </span>is supplied and is a stack pointer and <span class="s11">STKPOS </span>returns <span class="s11">NIL</span>, <span class="s16">OLDPOS </span>is released. If <span class="s16">OLDPOS </span>is not a stack pointer it is ignored.</p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>STKNTH </b><i>N POS OLDPOS</i>)                                          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns a stack pointer to the <span class="s16">N</span>th frame back from the frame specified by the stack descriptor <span class="s16">POS</span>.  If <span class="s16">N </span>is negative, the control chain from <span class="s16">POS </span>is followed.  If <span class="s16">N </span>is positive the access chain is followed. If <span class="s16">N </span>equals 0, <span class="s11">STKNTH </span>returns a stack pointer to <span class="s16">POS </span>(this provides a way to copy a stack pointer). Returns <span class="s11">NIL </span>if there are fewer than <span class="s16">N </span>frames in the appropriate chain. If <span class="s16">OLDPOS </span>is supplied and is a stack pointer, it is reused. If <span class="s16">OLDPOS </span>is not a stack pointer it is ignored.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: <span class="s11">(STKNTH 0) </span>causes an error, <span class="s11">Illegal stack arg</span>; it is not possible to create a stack pointer to the active frame.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>STKNAME </b><i>POS</i>)                                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the frame name of the frame specified by the stack descriptor <span class="s16">POS</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SETSTKNAME </b><i>POS NAME</i>)                                          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Changes the frame name of the frame specified by <span class="s16">POS </span>to be <span class="s16">NAME</span>. Returns <span class="s16">NAME</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>STKNTHNAME </b><i>N POS</i>)                                             <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the frame name of the <span class="s16">N</span>th frame back from <span class="s16">POS</span>. Equivalent to <span class="s11">(STKNAME (STKNTH </span><span class="s16">N POS</span><span class="s11">)) </span>but avoids creation of a stack pointer.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">In summary, <span class="s11">STKPOS </span>converts function names to stack pointers, <span class="s11">STKNTH </span>converts numbers to stack pointers, <span class="s11">STKNAME </span>converts stack pointers to function names, and <span class="s11">STKNTHNAME </span>converts numbers to function names.</p><h4 style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Variable Bindings in Stack Frames                                                                                                         </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The following functions are used for accessing and changing bindings. Some of functions take an argument, <span class="s16">N</span>, which specifies a particular binding in the basic frame. If <span class="s16">N </span>is a literal atom, it is assumed to be the name of a variable bound in the basic frame. If <span class="s16">N </span>is a number, it is assumed to reference the <span class="s16">N</span>th binding in the basic frame. The first binding is 1. If the basic frame contains no binding with the given name or if the number is too large or too small, the error <span class="s11">Illegal arg </span>occurs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 273pt;text-indent: 0pt;text-align: left;">VARIABLE BINDINGS AND THE STACK</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>STKSCAN </b><i>VAR IPOS OPOS</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Searches beginning at <span class="s16">IPOS </span>for a frame in which a variable named <span class="s16">VAR </span>is bound.  The search follows the access chain. Returns a stack pointer to the frame if found, otherwise returns <span class="s11">NIL</span>.  If <span class="s16">OPOS </span>is a stack pointer it is reused, otherwise it is ignored.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>FRAMESCAN </b><i>ATOM POS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns the relative position of the binding of <span class="s16">ATOM </span>in the basic frame of <span class="s16">POS</span>. Returns</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s11">NIL </span>if <span class="s16">ATOM </span>is not found.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>STKARG </b><i>N POS —</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the value of the binding specified by <span class="s16">N </span>in the basic frame of the frame specified by the stack descriptor <span class="s16">POS</span>.  <span class="s16">N </span>can be a literal atom or number.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>STKARGNAME </b><i>N POS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the name of the binding specified by <span class="s16">N</span>, in the basic frame of the frame specified by the stack descriptor <span class="s16">POS</span>.  <span class="s16">N </span>can be a literal atom or number.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>SETSTKARG </b><i>N POS VAL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Sets the value of the binding specified by <span class="s16">N </span>in the basic frame of the frame specified by the stack descriptor <span class="s16">POS</span>. <span class="s16">N </span>can be a literal atom or a number. Returns <span class="s16">VAL</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>SETSTKARGNAME </b><i>N POS NAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Sets the variable name to <span class="s16">NAME </span>of the binding specified by <span class="s16">N </span>in the basic frame of the frame specified by the stack descriptor <span class="s16">POS</span>. <span class="s16">N </span>can be a literal atom or a number. Returns <span class="s16">NAME</span>. This function does not work for interpreted frames.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>STKNARGS </b><i>POS —</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns the number of arguments bound in the basic frame of the frame specified by the stack descriptor <span class="s16">POS</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>VARIABLES </b><i>POS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns a list of the variables bound at <span class="s16">POS</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>STKARGS </b><i>POS —</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns a list of the values of the variables bound at <span class="s16">POS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Evaluating Expressions in Stack Frames                                                                                               </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">The following functions are used to evaluate an expression in a different environment:</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ENVEVAL </b><i>FORM APOS CPOS AFLG CFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Evaluates <span class="s16">FORM </span>in the environment specified by <span class="s16">APOS </span>and <span class="s16">CPOS</span>. That is, a new active frame is created with the frame specified by the stack descriptor <span class="s16">APOS </span>as its <span class="s11">ALINK</span>, and the frame specified by the stack descriptor <span class="s16">CPOS </span>as its <span class="s11">CLINK</span>. Then <span class="s16">FORM </span>is evaluated. If</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s16">AFLG </span>is not <span class="s11">NIL</span>, and <span class="s16">APOS </span>is a stack pointer, then <span class="s16">APOS </span>will be released. Similarly, if</p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s16">CFLG </span>is not <span class="s11">NIL</span>, and <span class="s16">CPOS </span>is a stack pointer, then <span class="s16">CPOS </span>will be released.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>ENVAPPLY </b><i>FN ARGS APOS CPOS AFLG CFLG</i>)                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s11">APPLY</span>s <span class="s16">FN </span>to <span class="s16">ARGS </span>in the environment specified by <span class="s16">APOS </span>and <span class="s16">CPOS</span>. <span class="s16">AFLG </span>and <span class="s16">CFLG</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">have the same interpretation as with <span class="s11">ENVEVAL</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>EVALV </b><i>VAR POS RELFLG</i>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Evaluates <span class="s16">VAR</span>, where <span class="s16">VAR </span>is assumed to be a symbol, in the access environment specifed by the stack descriptor <span class="s16">POS</span>. If <span class="s16">VAR </span>is unbound, <span class="s11">EVALV </span>returns <span class="s11">NOBIND </span>and does not generate an error. If <span class="s16">RELFLG </span>is non-<span class="s11">NIL </span>and <span class="s16">POS </span>is a stack pointer, it will be released after the variable is looked up. While <span class="s11">EVALV </span>could be defined as <span class="s11">(ENVEVAL </span><span class="s16">VAR POS </span><span class="s11">NIL </span><span class="s16">RELFLG</span><span class="s11">) </span>it is in fact somewhat faster.</p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>STKEVAL </b><i>POS FORM FLG —</i>)                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Evaluates <span class="s16">FORM </span>in the access environment of the frame specified by the stack descriptor <span class="s16">POS</span>. If <span class="s16">FLG </span>is not <span class="s11">NIL </span>and <span class="s16">POS </span>is a stack pointer, releases <span class="s16">POS</span>. The definition of <span class="s11">STKEVAL </span>is <span class="s11">(ENVEVAL </span><span class="s16">FORM POS </span><span class="s11">NIL </span><span class="s16">FLG</span><span class="s11">)</span>.</p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>STKAPPLY </b><i>POS FN ARGS FLG</i>)                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">STKEVAL </span>but applies <span class="s16">FN </span>to <span class="s16">ARGS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 78pt;text-indent: -24pt;text-align: left;">Altering Flow of Control                                                                                                                           </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The following functions are used to alter the normal flow of control, possibly jumping to a different frame on the stack. <span class="s11">RETEVAL </span>and <span class="s11">RETAPPLY </span>allow evaluating an expression in the specified environment first.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>RETFROM </b><i>POS VAL FLG</i>)                                          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Return from the frame specified by the stack descriptor <span class="s16">POS</span>, with the value <span class="s16">VAL</span>. If <span class="s16">FLG </span>is not <span class="s11">NIL</span>, and <span class="s16">POS </span>is a stack pointer, then <span class="s16">POS </span>is released. An attempt to <span class="s11">RETFROM </span>the top level (e.g., <span class="s11">(RETFROM T)) </span>causes an error, <span class="s11">Illegal stack arg</span>. <span class="s11">RETFROM </span>can be written in terms of <span class="s11">ENVEVAL </span>as follows:</p><p class="s11" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(RETFROM</p><p class="s11" style="padding-left: 201pt;text-indent: -16pt;line-height: 88%;text-align: left;">(LAMBDA (POS VAL FLG) (ENVEVAL (LIST ’QUOTE VAL)</p><p class="s11" style="padding-left: 250pt;text-indent: 0pt;line-height: 9pt;text-align: left;">NIL</p><p class="s11" style="padding-left: 250pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(if (STKNTH -1 POS</p><p class="s11" style="padding-left: 270pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(if FLG then POS))</p><p class="s11" style="padding-left: 250pt;text-indent: 0pt;line-height: 88%;text-align: left;">else (ERRORX (LIST 19 POS))) NIL</p><p class="s11" style="padding-left: 250pt;text-indent: 0pt;line-height: 9pt;text-align: left;">T)))</p><p class="s11" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>RETTO </b><i>POS VAL FLG</i>)                                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">RETFROM</span>, but returns <i>to </i>the frame specified by <span class="s16">POS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 273pt;text-indent: 0pt;text-align: left;">VARIABLE BINDINGS AND THE STACK</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>RETEVAL </b><i>POS FORM FLG —</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Evaluates <span class="s16">FORM </span>in the access environment of the frame specified by the stack descriptor <span class="s16">POS</span>, and then returns from <span class="s16">POS </span>with that value. If <span class="s16">FLG </span>is not <span class="s11">NIL </span>and <span class="s16">POS </span>is a stack pointer, then <span class="s16">POS </span>is released. The definition of <span class="s11">RETEVAL </span>is equivalent to <span class="s11">(ENVEVAL </span><span class="s16">FORM POS </span><span class="s11">(STKNTH -1 </span><span class="s16">POS</span><span class="s11">) </span><span class="s16">FLG </span><span class="s11">T)</span>, but <span class="s11">RETEVAL </span>does not create a stack pointer.</p><p class="s11" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>RETAPPLY </b><i>POS FN ARGS FLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">RETEVAL </span>but applies <span class="s16">FN </span>to <span class="s16">ARGS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Releasing and Reusing Stack Pointers                                                                                                   </h4><p style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">The following functions and variables are used for manipulating stack pointers:</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>STACKP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 2pt;text-indent: 0pt;text-align: center;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a stack pointer, otherwise returns <span class="s11">NIL</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>RELSTK </b><i>POS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Release the stack pointer <span class="s16">POS </span>(see below). If <span class="s16">POS </span>is not a stack pointer, does nothing. Returns <span class="s16">POS</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>RELSTKP </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: center;">Returns <span class="s11">T </span>is <span class="s16">X </span>is a released stack pointer, <span class="s11">NIL </span>otherwise.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CLEARSTK </b><i>FLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s16">FLG </span>is <span class="s11">T</span>, returns a list of all the active (unreleased) stack pointers. If <span class="s16">FLG </span>is <span class="s11">NIL</span>, this call is a no-op. The abillity to clear all stack pointers is inconsistent with the modularity implicit in a multi processing environment.</p><p class="s15" style="padding-top: 6pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">CLEARSTKLST <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A variable used by the top-level executive. Every time the top-level executive is re- entered (e.g., following errors, or Control-D), <span class="s11">CLEARSTKLST </span>is checked. If its value is <span class="s11">T</span>, all active stack pointers are released using <span class="s11">CLEARSTK</span>. If its value is a list, then all stack pointers on that list are released. If its value is <span class="s11">NIL</span>, nothing is released. <span class="s11">CLEARSTKLST </span>is initially <span class="s11">T</span>.</p><p class="s15" style="padding-top: 6pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">NOCLEARSTKLST <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">A variable used by the top-level executive. If <span class="s11">CLEARSTKLST </span>is <span class="s11">T </span>(see above) all active stack pointers <i>except </i>those on <span class="s11">NOCLEARSTKLST </span>are released. <span class="s11">NOCLEARSTKLST </span>is initially <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Creating a single stack pointer can cause the retention of a large amount of stack space. Furthermore, this space will not be freed until the next garbage collection, <i>even if the stack pointer is no longer being used</i>, unless the stack pointer is explicitly released or reused. If there is sufficient amount of stack space tied up in this fashion, a <span class="s11">STACK OVERFLOW </span>condition can occur, even in the simplest of computations. For this reason, you should consider releasing a stack pointer when the environment referenced by the stack pointer is no longer needed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The effects of releasing a stack pointer are:</p><ol id="l12"><li><p class="s11" style="padding-top: 6pt;padding-left: 89pt;text-indent: -12pt;line-height: 91%;text-align: justify;"><span class="p">The link between the stack pointer and the stack is broken by setting the contents of the stack pointer to the “released mark”. A released stack pointer prints as </span>#<i>ADR</i>/#<i>0</i><span class="p">.</span></p></li><li><p style="padding-top: 7pt;padding-left: 89pt;text-indent: -12pt;line-height: 91%;text-align: justify;">If this stack pointer was the last remaining reference to a frame extension; that is, if no other stack pointer references the frame extension and the extension is not contained in the active control or access chain, then the extension may be reclaimed, and is reclaimed immediately. The process repeats for the access and control chains of the reclaimed extension so that all stack space that was reachable only from the released stack pointer is reclaimed.</p></li></ol><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A stack pointer may be released using the function <span class="s11">RELSTK</span>, but there are some cases for which <span class="s11">RELSTK </span>is not sufficient. For example, if a function contains a call to <span class="s11">RETFROM </span>in which a stack pointer was used to specify where to return to, it would not be possible to simultaneously release the stack pointer. (A <span class="s11">RELSTK </span>appearing in the function following the call to <span class="s11">RETFROM </span>would not be executed!) To permit release of a stack pointer in this situation, the stack functions that relinquish control have optional flag arguments to denote whether or not a stack pointer is to be released (<span class="s16">AFLG </span>and <span class="s16">CFLG</span>). Note that in this case releasing the stack pointer will <i>not </i>cause the stack space to be reclaimed immediately because the frame referenced by the stack pointer will have become part of the active environment.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Another way to avoid creating new stack pointers is to <i>reuse </i>stack pointers that are no longer needed. The stack functions that create stack pointers (<span class="s11">STKPOS</span>, <span class="s11">STKNTH</span>, and <span class="s11">STKSCAN</span>) have an optional argument that is a stack pointer to reuse. When a stack pointer is reused, two things happen. First the stack pointer is released (see above). Then the pointer to the new frame extension is deposited in the stack pointer. The old stack pointer (with its new contents) is returned as the value of the function. Note that the reused stack pointer will be released even if the function does not find the specified frame.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Even if stack pointers are explicitly being released, <i>creating </i>many stack pointers can cause a garbage collection of stack pointer space. Thus, if your application requires creating many stack pointers, you definitely should take advantage of reusing stack pointers.</p><h4 style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Backtrace Functions                                                                                                                                 </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following functions perform a “backtrace,” printing information about every frame on the stack. Arguments allow only backtracing a selected range of the stack, skipping selected frames, and printing different amounts of information about each frame.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>BACKTRACE </b><i>IPOS EPOS FLAGS FILE PRINTFN</i>)                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Performs a backtrace beginning at the frame specified by the stack descriptor <span class="s16">IPOS</span>, and ending with the frame specified by the stack descriptor <span class="s16">EPOS</span>. <span class="s16">FLAGS </span>is a number in which the options of the <span class="s11">BACKTRACE </span>are encoded. If a bit is set, the corresponding information is included in the backtrace.</p><p style="padding-top: 1pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">1Q - print arguments of non-<span class="s11">SUBR</span>s</p><p style="padding-top: 1pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">2Q - print temporaries of the interpreter</p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;">4Q - print <span class="s11">SUBR </span>arguments and local variables</p><p style="padding-top: 1pt;padding-left: 126pt;text-indent: 0pt;line-height: 112%;text-align: left;">10Q - omit printing of <span class="s11">UNTRACE</span>: and function names 20Q - follow access chain instead of control chain</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 273pt;text-indent: 0pt;text-align: left;">VARIABLE BINDINGS AND THE STACK</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">40Q - print temporaries, i.e. the blips (see the stack and interpreter section below)</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example: If <span class="s16">FLAGS </span><span class="s11">= 47Q</span>, everything is printed. If <span class="s16">FLAGS </span><span class="s11">= 21Q</span>, follows the access chain, prints arguments.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">FILE </span>is the file that the backtrace is printed to. <span class="s16">FILE </span>must be open. <span class="s16">PRINTFN </span>is used when printing the values of variables, temporaries, blips, etc. <span class="s16">PRINTFN </span><span class="s11">= NIL </span>defaults to <span class="s11">PRINT</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>BAKTRACE </b><i>IPOS EPOS SKIPFNS FLAGS FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Prints a backtrace from <span class="s16">IPOS </span>to <span class="s16">EPOS </span>onto <span class="s16">FILE</span>. <span class="s16">FLAGS </span>specifies the options of the backtrace, e.g., do / don’t print arguments, do / don’t print temporaries of the interpreter, etc., and is the same as for <span class="s11">BACKTRACE</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">SKIPFNS </span>is a list of functions. As <span class="s11">BAKTRACE </span>scans down the stack, the stack name of each frame is passed to each function in <span class="s16">SKIPFNS</span>, and if any of them returnS non-<span class="s11">NIL</span>, <span class="s16">POS </span>is skipped (including all variables).</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">BAKTRACE <span class="p">collapses the sequence of several function calls corresponding to a call to a system package into a single “function” using </span>BAKTRACELST <span class="p">as described below. For example, any call to the editor is printed as </span>**EDITOR**<span class="p">, a break is printed as</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">**BREAK**<span class="p">, etc.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">BAKTRACE <span class="p">is used by the </span>BT<span class="p">, </span>BTV<span class="p">, </span>BTV+<span class="p">, </span>BTV*<span class="p">, and </span>BTV! <span class="p">break commands, with </span><i>FLAGS</i></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">= 0<span class="p">, </span>1<span class="p">, </span>5<span class="p">, </span>7<span class="p">, and </span>47Q <span class="p">respectively.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s11">SYSPRETTYFLG = T</span>, the values arguments and local variables will be prettyprinted.</p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">BAKTRACELST <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Used to tell <span class="s11">BAKTRACE </span>(therefore, the <span class="s11">BT</span>, <span class="s11">BTV</span>, etc. commands) to abbreviate various sequences of function calls on the stack by a single key, e.g. <span class="s11">**BREAK**</span>, <span class="s11">**EDITOR**</span>, etc.</p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">Each entry on </span><span class="s11">BAKTRACELST </span><span class="p">is a list of the form </span><span class="s11">(</span>FRAMENAME KEY <span class="s11">. </span>PATTERN<span class="s11">) </span><span class="p">or (</span>FRAMENAME <span class="s11">(</span>KEY<span class="s25">1</span> <span class="s11">. </span>PATTERN<span class="s25">1</span><span class="s11">) ... (</span>KEY<span class="s25">N</span> <span class="s11">. </span>PATTERN<span class="s25">N</span><span class="s11">))</span><span class="p">, where a pattern is a</span></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">list of elements that are either atoms, which match a single frame, or lists, which are interpreted as a list of alternative patterns, e.g. <span class="s11">(PROGN **BREAK** EVAL ((ERRORSET BREAK1A BREAK1) (BREAK1)))</span></p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;"><span class="s11">BAKTRACE </span>operates by scanning up the stack and, at each point, comparing the current frame name, with the frame names on <span class="s11">BAKTRACELST</span>, i.e. it does an <span class="s11">ASSOC</span>. If the frame name does appear, <span class="s11">BAKTRACE </span>attempts to match the stack as of that point with (one of) the patterns. If the match is successful, <span class="s11">BAKTRACE </span>prints the corresponding key, and continues with where the match left off. If the frame name does not appear, or the match fails, <span class="s11">BAKTRACE </span>simply prints the frame name and continues with the next higher frame (unless the <span class="s16">SKIPFNS </span>applied to the frame name are non-<span class="s11">NIL </span>as described above).</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Matching is performed by comparing symbols in the pattern with the current frame name, and matching lists as patterns, i.e. sequences of function calls, always working up the stack. For example, either of the sequence of function calls <span class="s11">“... BREAK1 BREAK1A ERRORSET EVAL PROGN ...”</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">or “... BREAK1 EVAL PROGN ...<span class="p">” would match with the sample entry given above, causing</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">**BREAK** <span class="p">to be printed.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Special features:</p><ul id="l13"><li><p style="padding-top: 6pt;padding-left: 90pt;text-indent: -12pt;line-height: 12pt;text-align: left;">The symbol <span class="s11">&amp; </span>can be used to match any frame.</p></li><li><p style="padding-top: 6pt;padding-left: 89pt;text-indent: -12pt;text-align: justify;">The pattern <span class="s11">“-</span>” can be used to match nothing. <span class="s11">- </span>is useful for specifying an optional match, e.g. the example above could also have been written as <span class="s11">(PROGN **BREAK** EVAL ((ERRORSET BREAK1A) -) BREAK1)</span>.</p></li><li><p style="padding-top: 7pt;padding-left: 89pt;text-indent: -12pt;line-height: 93%;text-align: justify;">It is not necessary to provide in the pattern for matching dummy frames, i.e. frames for which <span class="s11">DUMMYFRAMEP </span>(see below) is true. When working on a match, the matcher automatically skips over these frames when they do not match.</p></li><li><p style="padding-top: 6pt;padding-left: 90pt;text-indent: -12pt;text-align: justify;">If a match succeeds and the <span class="s16">KEY </span>is <span class="s11">NIL</span>, nothing is printed. For example, <span class="s11">(*PROG*LAM NIL EVALA *ENV)</span>. This sequence will occur following an error which then causes a break if some of the function’s arguments are <span class="s11">LOCALVARS</span>.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Other Stack Functions</p><p class="s11" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>DUMMYFRAMEP </b><i>POS</i>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns <span class="s11">T </span>if you never wrote a call to the function at <span class="s16">POS</span>, e.g. in Interlisp-10, <span class="s11">DUMMYFRAMEP </span>is <span class="s11">T </span>for <span class="s11">*PROG*LAM, *ENV*</span>, and <span class="s11">FOOBLOCK </span>frames (see the Block Compiling section of Chapter 18).</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">REALFRAMEP <span class="p">and </span>REALSTKNTH <span class="p">can be used to write functions which manipulate the stack and work on either interpreted or compiled code:</span></p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>REALFRAMEP </b><i>POS INTERPFLG</i>)                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">POS </span>if <span class="s16">POS </span>is a “real” frame, i.e. if <span class="s16">POS </span>is not a dummy frame and <span class="s16">POS </span>is a frame that does not disappear when compiled (such as <span class="s11">COND</span>); otherwise <span class="s11">NIL</span>. If <span class="s16">INTERPFLG </span><span class="s11">= T</span>, returns <span class="s11">T </span>if <span class="s16">POS </span>is not a dummy frame. For example, if <span class="s11">(STKNAME </span><span class="s16">POS</span><span class="s11">) = COND</span>, <span class="s11">(REALFRAMEP </span><span class="s16">POS</span><span class="s11">) </span>is <span class="s11">NIL</span>, but <span class="s11">(REALFRAMEP </span><span class="s16">POS </span><span class="s11">T) </span>is <span class="s11">T</span>.</p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>REALSTKNTH </b><i>N POS INTERPFLG OLDPOS</i>)                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns a stack pointer to the <span class="s16">N</span>th (or <span class="s11">-</span><span class="s16">N</span>th) frames for which <span class="s11">(REALFRAMEP </span><span class="s16">POS INTERPFLG</span><span class="s11">) </span>is <span class="s16">POS</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>MAPDL </b><i>MAPDLFN MAPDLPOS</i>)                                       <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Starts at <span class="s16">MAPDLPOS </span>and applies the function <span class="s16">MAPDLFN </span>to two arguments (the frame name and a stack pointer to the frame), for each frame until the top of the stack is reached. Returns <span class="s11">NIL</span>.  For example,</p><p class="s11" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[MAPDL (FUNCTION (LAMBDA (X POS)</p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(if (IGREATERP (STKNARGS POS) 2) then (PRINT X)]</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">will print all functions of more than two arguments.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 273pt;text-indent: 0pt;text-align: left;">VARIABLE BINDINGS AND THE STACK</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>SEARCHPDL </b><i>SRCHFN SRCHPOS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">MAPDL</span>, but searches the stack starting at position <span class="s16">SRCHPOS </span>until it finds a frame for which <span class="s16">SRCHFN</span>, a function of two arguments applied to the <i>name </i>of the frame and the frame itself, is not <span class="s11">NIL</span>. Returns <span class="s11">(</span><span class="s16">NAME </span><span class="s11">. </span><span class="s16">FRAME</span><span class="s11">) </span>if such a frame is found, otherwise <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 30pt;text-indent: -24pt;text-align: left;">The Stack and the Interpreter                                                                                                                  </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In addition to the names and values of arguments for functions, information regarding partially- evaluated expressions is kept on the push-down list.  For example, consider the following definition of the function <span class="s11">FACT </span>(intentionally faulty):</p><p class="s11" style="padding-top: 4pt;padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(FACT</p><p class="s11" style="padding-left: 149pt;text-indent: -18pt;line-height: 88%;text-align: left;">[LAMBDA (N) (COND</p><p class="s11" style="padding-left: 171pt;text-indent: -10pt;line-height: 88%;text-align: left;">((ZEROP N) L)</p><p class="s11" style="padding-left: 160pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(T (ITIMES N (FACT (SUB1 N])</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">In evaluating the form <span class="s11">(FACT 1)</span>, as soon as <span class="s11">FACT </span>is entered, the interpreter begins evaluating the implicit <span class="s11">PROGN </span>following the <span class="s11">LAMBDA</span>. The first function entered in this process is <span class="s11">COND</span>. <span class="s11">COND </span>begins to process its list of clauses. After calling <span class="s11">ZEROP </span>and getting a <span class="s11">NIL </span>value, <span class="s11">COND </span>proceeds to the next clause and evaluates <span class="s11">T</span>. Since <span class="s11">T </span>is true, the evaluation of the implicit <span class="s11">PROGN </span>that is the consequent of the <span class="s11">T </span>clause is begun. This requires calling the function <span class="s11">ITIMES</span>. However before <span class="s11">ITIMES </span>can be called, its arguments must be evaluated. The first argument is evaluated by retrieving the current binding of <span class="s11">N </span>from its value cell; the second involves a recursive call to <span class="s11">FACT</span>, and another implicit <span class="s11">PROGN</span>, etc.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">At each stage of this process, some portion of an expression has been evaluated, and another is awaiting evaluation. The output below (from Interlisp-10) illustrates this by showing the state of the push-down list at the point in the computation of <span class="s11">(FACT 1) </span>when the unbound atom <span class="s11">L </span>is reached.</p><p class="s19" style="padding-top: 3pt;padding-left: 48pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s21"> </span><span class="s11">FACT(1)</span></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;line-height: 88%;text-align: left;">u.b.a. L {in FACT} in ((ZEROP NO L) (L broken)</p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;line-height: 9pt;text-align: left;">:BTV!</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*TAIL* (L)</p><p class="s11" style="padding-left: 54pt;text-indent: 16pt;line-height: 88%;text-align: left;">*ARG1 (((ZEROP N) L) (T (ITIMES N (FACT (SUB1 N))))) COND</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*FORM* (COND ((ZEROP N) L) (T (ITIMES N (FACT (SUB1 N)))))</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 88%;text-align: left;">*TAIL* ((COND ((ZEROP N) L) (T (ITIMES N (FACT (SUB1 N)))))) N 0</p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;line-height: 9pt;text-align: left;">FACT</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*FORM* (FACT (SUB1 N))</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*FN* ITIMES</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*TAIL* ((FACT (SUB1 N)))</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*ARGVAL* 1</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*FORM* (ITIMES N (FACT (SUB1 N)))</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*TAIL* ((ITIMES N (FACT (SUB1 N))))</p><p class="s11" style="padding-left: 54pt;text-indent: 16pt;line-height: 88%;text-align: left;">*ARG1 (((ZEROP N) L) (T (ITIMES N (FACT (SUB1 N))))) COND</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*FORM* (COND ((ZEROP N) L) (T (ITIMES N (FACT (SUB1 N)))))</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 88%;text-align: left;">*TAIL* ((COND ((ZEROP N) L) (T (ITIMES N (FACT (SUB1 N)))))) N 1</p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;line-height: 9pt;text-align: left;">FACT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">**TOP**</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Internal calls to <span class="s11">EVAL</span>, e.g., from <span class="s11">COND </span>and the interpreter, are marked on the push-down list by a special mark or blip which the backtrace prints as <span class="s11">*FORM*</span>. The genealogy of <span class="s11">*FORM*</span>’s is thus a history of the computation. Other temporary information stored on the stack by the interpreter includes the tail of a partially evaluated implicit <span class="s11">PROGN </span>(e.g., a cond clause or lambda expression) and the tail of a partially evaluated form (i.e., those arguments not yet evaluated), both indicated on the backtrace by <span class="s11">*TAIL*</span>, the values of arguments that have already been evaluated, indicated by</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">*ARGVAL*<span class="p">, and the names of functions waiting to be called, indicated by </span>*FN*<span class="p">. </span>*ARG1, ...,</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">*ARGn <span class="p">are used by the backtrace to indicate the (unnamed) arguments to </span>SUBR<span class="p">s.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note that a function is not actually entered and does not appear on the stack, until its arguments have been evaluated (except for nlambda functions, of course). Also note that the <span class="s11">*ARG1</span>, <span class="s11">*FORM*</span>,</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">*TAIL*<span class="p">, etc. “bindings” comprise the actual working storage. In other words, in the above example, if a (lower) function changed the value of the </span>*ARG1 <span class="p">binding, the </span>COND <span class="p">would continue interpreting the new binding as a list of </span>COND <span class="p">clauses. Similarly, if the </span>*ARGVAL* <span class="p">binding were changed, the new value would be given to </span>ITIMES <span class="p">as its first argument after its second argument had been evaluated, and </span>ITIMES <span class="p">was actually called.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">*FORM*<span class="p">, </span>*TAIL*<span class="p">, </span>*ARGVAL*<span class="p">, etc., do not actually appear as variables on the stack, i.e., evaluating</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">*FORM* <span class="p">or calling </span>STKSCAN <span class="p">to search for it will not work. However, the functions </span>BLIPVAL<span class="p">, </span>SETBLIPVAL<span class="p">, and </span>BLIPSCAN <span class="p">described below are available for accessing these internal blips. These functions currently know about four different types of blips:</span></p><p class="s11" style="padding-top: 6pt;padding-left: 45pt;text-indent: 0pt;text-align: center;">*FN* <span class="p">The name of a function about to be called</span></p><p class="s11" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: center;">*ARGVAL* <span class="p">An argument for a function about to be called</span></p><p class="s11" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: center;">*FORM* <span class="p">A form in the process of evaluation</span></p><p class="s11" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">*TAIL* <span class="p">The tail of a </span>COND <span class="p">clause, implicit </span>PROGN<span class="p">, </span>PROG<span class="p">, etc.</span></p><p class="s11" style="padding-top: 5pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<b>BLIPVAL </b><i>BLIPTYP IPOS FLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the value of the specified blip of type <span class="s16">BLIPTYP</span>. If <span class="s16">FLG </span>is a number <span class="s11">N</span>, finds the <span class="s11">N</span>th blip of the desired type, searching the control chain beginning at the frame specified by the stack descriptor <span class="s16">IPOS</span>. If <span class="s16">FLG </span>is <span class="s11">NIL</span>, 1 is used. If <span class="s16">FLG </span>is <span class="s11">T</span>, returns the number of blips of the specified type at <span class="s16">IPOS</span>.</p><p class="s11" style="padding-top: 8pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<b>SETBLIPVAL </b><i>BLIPTYP IPOS N VAL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Sets the value of the specified blip of type <span class="s16">BLIPTYP</span>. Searches for the <span class="s16">N</span>th blip of the desired type, beginning with the frame specified by the stack descriptor <span class="s16">IPOS</span>, and following the control chain.</p><p style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<span class="s15">BLIPSCAN </span><span class="s16">BLIPTYP IPOS</span>) [Function]</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns a stack pointer to the frame in which a blip of type <span class="s16">BLIPTYP </span>is located. Search begins at the frame specified by the stack descriptor <span class="s16">IPOS </span>and follows the control chain.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 273pt;text-indent: 0pt;text-align: left;">VARIABLE BINDINGS AND THE STACK</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 30pt;text-indent: -24pt;text-align: left;">Generators                                                                                                                                                 </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A <i>generator </i>is like a subroutine except that it retains information about previous times it has been called. Some of this state may be data (for example, the seed in a random number generator), and some may be in program state (as in a recursive generator which finds all the atoms in a list structure). For example, if <span class="s11">LISTGEN </span>is defined by:</p><p class="s11" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(DEFINEQ (LISTGEN (L)</p><p class="s11" style="padding-left: 98pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(if L then (PRODUCE (CAR L))</p><p class="s11" style="padding-left: 157pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LISTGEN (CDR L))))</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">we can use the function <span class="s11">GENERATOR </span>(described below) to create a generator that uses <span class="s11">LISTGEN </span>to produce the elements of a list one at a time, e.g.,</p><p class="s11" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(SETQ GR (GENERATOR (LISTGEN ’(A B C))))</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">creates a generator, which can be called by</p><p class="s11" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(GENERATE GR)</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">to produce as values on successive calls, <span class="s11">A</span>, <span class="s11">B</span>, <span class="s11">C</span>. When <span class="s11">GENERATE </span>(not <span class="s11">GENERATOR</span>) is called the first time, it simply starts evaluating <span class="s11">(LISTGEN ’(A B C))</span>. <span class="s11">PRODUCE </span>gets called from <span class="s11">LISTGEN</span>, and pops back up to <span class="s11">GENERATE </span>with the indicated value after saving the state. When <span class="s11">GENERATE </span>gets called again, it continues from where the last <span class="s11">PRODUCE </span>left off. This process continues until finally <span class="s11">LISTGEN </span>completes and returns a value (it doesn’t matter what it is). <span class="s11">GENERATE </span>then returns GR itself as its value, so that the program that called <span class="s11">GENERATE </span>can tell that it is finished, i.e., there are no more values to be generated.</p><p class="s11" style="padding-top: 3pt;padding-left: 78pt;text-indent: -24pt;line-height: 17pt;text-align: left;">(<b>GENERATOR </b><i>FORM COMVAR</i>) <span class="p">[NLambda Function] An nlambda function that creates a generator which uses </span><i>FORM </i><span class="p">to compute values.</span></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">GENERATOR </span>returns a <i>generator handle </i>which is represented by a dotted pair of stack pointers.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">COMVAR </span>is optional. If its value (<span class="s11">EVAL </span>of) is a generator handle, the list structure and stack pointers will be reused. Otherwise, a new generator handle will be constructed.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">GENERATOR <span class="p">compiles open.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>PRODUCE </b><i>VAL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Used from within a generator to return <span class="s16">VAL </span>as the value of the corresponding call to</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">GENERATE<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>GENERATE </b><i>HANDLE VAL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Restarts the generator represented by <span class="s16">HANDLE</span>. <span class="s16">VAL </span>is returned as the value of the <span class="s11">PRODUCE </span>which last suspended the operation of the generator. When the generator runs out of values, <span class="s11">GENERATE </span>returns <span class="s16">HANDLE </span>itself.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Examples:</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">The following function will go down recursively through a list structure and produce the atoms in the list structure one at a time.</p><p class="s11" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(DEFINEQ (LEAVESG (L)</p><p class="s11" style="padding-left: 96pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(if (ATOM L)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;">then (PRODUCE L)</p><p class="s11" style="padding-left: 176pt;text-indent: -27pt;line-height: 88%;text-align: left;">else (LEAVESG (CAR L)) (if (CDR L)</p><p class="s11" style="padding-left: 181pt;text-indent: 0pt;line-height: 9pt;text-align: left;">then (LEAVESG (CDR L)]</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following function prints each of these atoms as it appears. It illustrates how a loop can be set up to use a generator.</p><p class="s11" style="padding-top: 4pt;padding-left: 102pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(DEFINEQ (PLEAVESG1 (L)</p><p class="s11" style="padding-left: 144pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(PROG (X LHANDLE)</p><p class="s11" style="padding-left: 160pt;text-indent: -5pt;line-height: 88%;text-align: left;">(SETQ LHANDLE (GENERATOR (LEAVESG L))) LP (SETQ X (GENERATE LHANDLE))</p><p class="s11" style="padding-left: 171pt;text-indent: -5pt;line-height: 88%;text-align: left;">(if (EQ X LHANDLE) then (RETURN NIL))</p><p class="s11" style="padding-left: 176pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(PRINT X)</p><p class="s11" style="padding-left: 192pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(GO LP))]</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The loop terminates when the value of the generator is <span class="s11">EQ </span>to the dotted pair which is the value produced by the call to <span class="s11">GENERATOR</span>. A CLISP iterative operator, <span class="s11">OUTOF</span>, is provided which makes it much easier to write the loop in <span class="s11">PLEAVESG1</span>. <span class="s11">OUTOF </span>(or <span class="s11">outof</span>) can precede a form which is to be used as a generator. On each iteration, the iteration variable will be set to successive values returned by the generator; the loop will be terminated automatically when the generator runs out. Therefore, the following is equivalent to the above program <span class="s11">PLEAVESG1</span>:</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">(DEFINEQ (PLEAVESG2 (L) (for X outof (LEAVESG L) do (PRINT X))]</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Here is another example; the following form will print the first <span class="s11">N </span>atoms.</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">(for X outof (MAPATOMS (FUNCTION PRODUCE)) as I from 1 to N do (PRINT X))</p><h4 style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Coroutines                                                                                                                                                 </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">This package provides facilities for the creation and use of fully general coroutine structures. It uses a stack pointer to preserve the state of a coroutine, and allows arbitrary switching between <span class="s16">N </span>different coroutines, rather than just a call to a generator and return. This package is slightly more efficient than the generator package described above, and allows more flexibility on specification of what to do when a coroutine terminates.</p><p class="s11" style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<b>COROUTINE </b><i>CALLPTR COROUTPTR COROUTFORM ENDFORM</i>) <span class="p">[NLambda Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">This nlambda function is used to create a coroutine and initialize the linkage. <span class="s16">CALLPTR </span>and <span class="s16">COROUTPTR </span>are the names of two variables, which will be set to appropriate stack pointers. If the values of <span class="s16">CALLPTR </span>or <span class="s16">COROUTPTR </span>are already stack pointers, the stack pointers will be reused. <span class="s16">COROUTFORM </span>is the form which is evaluated to start the coroutine; <span class="s16">ENDFORM </span>is a form to be evaluated if <span class="s16">COROUTFORM </span>actually returns when it runs out of values.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">COROUTINE <span class="p">compiles open.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<b>RESUME </b><i>FROMPTR TOPTR VAL</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Used to transfer control from one coroutine to another. <span class="s16">FROMPTR </span>should be the stack pointer for the current coroutine, which will be smashed to preserve the current state. <span class="s16">TOPTR </span>should be the stack pointer which has preserved the state of the coroutine to be transferred to, and <span class="s16">VAL </span>is the value that is to be returned to the latter coroutine as the value of the <span class="s11">RESUME </span>which suspended the operation of that coroutine.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 273pt;text-indent: 0pt;text-align: left;">VARIABLE BINDINGS AND THE STACK</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">For example, the following is the way one might write the <span class="s11">LEAVES </span>program using the coroutine package:</p><p class="s11" style="padding-top: 5pt;padding-left: 82pt;text-indent: -16pt;line-height: 88%;text-align: left;">(DEFINEQ (LEAVESC (L COROUTPTR CALLPTR) (if (ATOM L)</p><p class="s11" style="padding-left: 87pt;text-indent: 0pt;line-height: 9pt;text-align: left;">then (RESUME COROUTPTR CALLPTR L)</p><p class="s11" style="padding-left: 87pt;text-indent: 0pt;line-height: 9pt;text-align: left;">else (LEAVESC (CAR L) COROUTPTR CALLPTR)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(if (CDR L) then (LEAVESC (CDR L) COROUTPTR CALLPTR))))]</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">A function <span class="s11">PLEAVESC </span>which uses <span class="s11">LEAVESC </span>can be defined as follows:</p><p class="s11" style="padding-top: 5pt;padding-left: 76pt;text-indent: -10pt;line-height: 88%;text-align: left;">(DEFINEQ (PLEAVESC (L) (bind PLHANDLE LHANDLE</p><p class="s11" style="padding-left: 82pt;text-indent: 0pt;line-height: 9pt;text-align: left;">first (COROUTINE PLHANDLE LHANDLE</p><p class="s11" style="padding-left: 174pt;text-indent: 0pt;line-height: 88%;text-align: left;">(LEAVESC L LHANDLE PLHANDLE) (RETFROM ’PLEAVESC))</p><p class="s11" style="padding-left: 82pt;text-indent: 0pt;line-height: 9pt;text-align: left;">do (PRINT (RESUME PLHANDLE LHANDLE))))]</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">By <span class="s11">RESUME</span>ing <span class="s11">LEAVESC </span>repeatedly, this function will print all the leaves of list L and then return out of <span class="s11">PLEAVESC </span>via the <span class="s11">RETFROM</span>. The <span class="s11">RETFROM </span>is necessary to break out of the non-terminating do- loop. This was done to illustrate the additional flexibility allowed through the use of <span class="s16">ENDFORM</span>.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">We use two coroutines working on two trees in the example <span class="s11">EQLEAVES</span>, defined below. <span class="s11">EQLEAVES </span>tests to see whether two trees have the same leaf set in the same order, e.g., <span class="s11">(EQLEAVES ’(A B C) ’(A B (C))) </span>is true.</p><p class="s11" style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">(DEFINEQ (EQLEAVES (L1 L2)</p><p class="s11" style="padding-left: 87pt;text-indent: 0pt;line-height: 9pt;text-align: justify;">(bind LHANDLE1 LHANDLE2 PE EL1 EL2</p><p class="s11" style="padding-left: 125pt;text-indent: -32pt;line-height: 88%;text-align: justify;">first (COROUTINE PE LHANDLE1 (LEAVESC L1 LHANDLE1 PE) ’NO-MORE) (COROUTINE PE LHANDLE2 (LEAVESC L2 LHANDLE2 PE) ’NO-MORE)</p><p class="s11" style="padding-left: 109pt;text-indent: -16pt;line-height: 88%;text-align: justify;">do (SETQ EL1 (RESUME PE LHANDLE1)) (SETQ EL2 (RESUME PE LHANDLE2)) (if (NEQ EL1 EL2)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: justify;">then (RETURN NIL))</p><p class="s11" style="padding-left: 93pt;text-indent: 0pt;line-height: 88%;text-align: justify;">repeatuntil (EQ EL1 ’NO-MORE) finally (RETURN T)))]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 30pt;text-indent: -24pt;text-align: left;">Possibilities Lists                                                                                                                                      </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A possibilities list is the interface between a generator and a consumer. The possibilities list is initialized by a call to <span class="s11">POSSIBILITIES</span>, and elements are obtained from it by using <span class="s11">TRYNEXT</span>. By using the spaghetti stack to maintain separate environments, this package allows a regime in which a generator can put a few items in a possibilities list, suspend itself until they have been consumed, and be subsequently aroused and generate some more.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>POSSIBILITIES </b><i>FORM</i>) <span class="p">[NLambda Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">This nlambda function is used for the initial creation of a possibilities list. <span class="s16">FORM </span>will be evaluated to create the list. It should use the functions <span class="s11">NOTE </span>and <span class="s11">AU-REVOIR </span>described below to generate possibilities. Normally, one would set some variable to the possibilities list which is returned, so it can be used later, e.g.:</p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: justify;">(SETQ PLIST (POSSIBILITIES (GENERFN V1 V2))).</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">POSSIBILITIES <span class="p">compiles open.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>NOTE </b><i>VAL LSTFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Used within a generator to put items on the possibilities list being generated. If <span class="s16">LSTFLG </span>is equal to <span class="s11">NIL</span>, <span class="s16">VAL </span>is treated as a single item. If <span class="s16">LSTFLG </span>is non-<span class="s11">NIL</span>, then the list <span class="s16">VAL </span>is <span class="s11">NCONC</span>ed on the end of the possibilities list. Note that it is perfectly reasonable to create a possibilities list using a second generator, and <span class="s11">NOTE </span>that list as possibilities for the current generator with <span class="s16">LSTFLG </span>equal to <span class="s11">T</span>. The lower generator will be resumed at the appropriate point.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>AU-REVOIR </b><i>VAL</i>)                                        <span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Puts <span class="s16">VAL </span>on the possibilities list if it is given, and then suspends the generator and returns to the consumer in such a fashion that control will return to the generator at the <span class="s11">AU- REVOIR </span>if the consumer exhausts the possibilities list.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">NIL </span>is not put on the possibilities list unless it is explicitly given as an argument to <span class="s11">AU- REVOIR</span>, i.e., <span class="s11">(AU-REVOIR) </span>and <span class="s11">(AU-REVOIR NIL) </span>are <i>not </i>the same. <span class="s11">AU-REVOIR </span>and <span class="s11">ADIEU </span>are lambda nospreads to enable them to distinguish these two cases.</p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>ADIEU </b><i>VAL</i>)                                            <span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">AU-REVOIR </span>but releases the generator instead of suspending it.</p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>TRYNEXT </b><i>PLST ENDFORM VAL</i>) <span class="p">[NLambda Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This nlambda function allows a consumer to use a possibilities list. It removes the first item from the possibilities list named by <span class="s16">PLST </span>(i.e. <span class="s16">PLST </span>must be an atom whose value is a possiblities list), and returns that item, provided it is not a generator handle. If a generator handle is encountered, the generator is reawakened. When it returns a possibilities list, this list is added to the front of the current list. When a call to <span class="s11">TRYNEXT </span>causes a generator to be awakened, <span class="s16">VAL </span>is returned as the value of the <span class="s11">AU-REVOIR </span>which put that generator to sleep. If <span class="s16">PLST </span>is empty, it evaluates <span class="s16">ENDFORM </span>in the caller’s environment.</p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">TRYNEXT <span class="p">compiles open.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>CLEANPOSLST </b><i>PLST</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">This function is provided to release any stack pointers which may be left in the <span class="s16">PLST</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">which was not used to exhaustion.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, <span class="s11">FIB </span>is a generator for fibonnaci numbers. It starts out by <span class="s11">NOTE</span>ing its two arguments, then suspends itself. Thereafter, on being re-awakened, it will <span class="s11">NOTE </span>two more terms in the series and suspends again. <span class="s11">PRINTFIB </span>uses <span class="s11">FIB </span>to print the first <span class="s11">N </span>fibonacci numbers.</p><p class="s11" style="padding-top: 5pt;padding-left: 124pt;text-indent: -10pt;line-height: 88%;text-align: justify;">(DEFINEQ (FIB (F1 F2) (do (NOTE F1)</p><p class="s11" style="padding-left: 146pt;text-indent: 0pt;line-height: 9pt;text-align: justify;">(NOTE F2)</p><p class="s11" style="padding-left: 146pt;text-indent: 0pt;line-height: 88%;text-align: justify;">(SETQ F1 (IPLUS F1 F2)) (SETQ F2 (IPLUS F1 F2)) (AU-REVOIR)]</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note that this <span class="s11">AU-REVOIR </span>just suspends the generator and adds nothing to the possibilities list except the generator.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 273pt;text-indent: 0pt;text-align: left;">VARIABLE BINDINGS AND THE STACK</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 71pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(DEFINEQ (PRINTFIB (N)</p><p class="s11" style="padding-left: 125pt;text-indent: -32pt;line-height: 88%;text-align: left;">(PROG ((FL (POSSIBILITIES (FIB 0 1)))) (RPTQ N (PRINT (TRYNEXT FL))) (CLEANPOSLST FL)]</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Note that <span class="s11">FIB </span>itself will never terminate.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 358pt;text-indent: 0pt;text-align: left;"><a name="bookmark13">12. MISCELLANEOUS</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_018.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 30pt;text-indent: -24pt;text-align: left;">Greeting and Initialization Files                                                                                                               </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Many of the features of Medley are controlled by variables that you can adjust to your own taste. In addition, you can modify the action of system functions in ways not specifically provided for by using <span class="s11">ADVISE </span>(see the Advise Functions section of Chapter 15). To encourage customizing Medley’s environment, it includes a facility for automatically loading initialization files (or “init files”) when it is first started. Each user can have a separate “user init file” that customizes Medley’s environment to his / her tastes. In addition, there can be a “site init file” that applies to all users at a given physical site, setting system variables that are the same for all users such as the name of the nearest printer, etc.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The process of loading init files, also known as “greeting”, occurs when a Medley system created by <span class="s11">MAKESYS </span>(see the Saving Virtual Memory State section below) is started for the first time. The user can also explicitly invoke the greeting operation at any time via the function <span class="s11">GREET </span>(below). The process of greeting includes the following steps:</p><ol id="l14"><li><p style="padding-top: 6pt;padding-left: 41pt;text-indent: -12pt;line-height: 91%;text-align: justify;">Any previous greeting operation is undone. The side effects of the greeting operation are stored on a global variable as well as on the history list, thus enabling the previous greeting to be undone even if it has dropped off of the bottom of the history list.</p></li><li><p style="padding-top: 6pt;padding-left: 42pt;text-indent: -12pt;text-align: justify;">All of the items on the list <span class="s11">PREGREETFORMS </span>are evaluated.</p></li><li><p style="padding-top: 7pt;padding-left: 42pt;text-indent: -12pt;line-height: 94%;text-align: justify;">The site init file is loaded. <span class="s11">GREET </span>looks for a file by the name <span class="s11">{DSK}INIT.LISP</span>. If this is found, it is loaded. If it is not found, the system prints <span class="s11">Please enter name of system init file (e.g. {server}&lt;directory&gt;INIT.extension): </span>and waits for you to type a file name, followed by a carriage return. If you just type a carriage return without typing a file name, no site init file is loaded. <b>Note</b>: The site init file is loaded with <span class="s16">LDFLG </span>set to <span class="s11">SYSLOAD</span>, so that no file package information is saved, and nothing is printed out.</p></li><li><p style="padding-top: 6pt;padding-left: 42pt;text-indent: -12pt;line-height: 94%;text-align: justify;">The user init file is loaded. The user init file is found by using the variable <span class="s11">USERGREETFILES </span>(described below), which is normally set in the site init file. The user init file is loaded with normal file package settings, but under errorset protection and with <span class="s11">PRETTYHEADER </span>set to <span class="s11">NIL </span>to suppress the <span class="s11">File created </span>message.</p></li><li><p style="padding-top: 6pt;padding-left: 42pt;text-indent: -12pt;text-align: justify;">All of the items on the list <span class="s11">POSTGREETFORMS </span>are evaluated.</p></li><li><p style="padding-top: 6pt;padding-left: 42pt;text-indent: -12pt;text-align: justify;">The greeting <span class="s11">“Hello, </span><span class="s16">XXX</span><span class="s11">.</span>” is printed, where <span class="s16">XXX </span>is the value of the variable <span class="s11">FIRSTNAME </span>(if non-<span class="s11">NIL</span>). The variable <span class="s11">GREETDATES </span>(below) can be set to modify this greeting for particular dates.</p></li></ol><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>GREET </b><i>NAME —</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Performs the greeting for person whose username is <span class="s16">NAME </span>(if <span class="s16">NAME </span><span class="s11">= NIL</span>, uses the login name). When Medley first starts up, it performs <span class="s11">(GREET)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>GREETFILENAME </b><i>USER</i>)                                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">USER </span>is <span class="s11">T</span>, <span class="s11">GREETFILENAME </span>returns the file name of the site init file. If the file name doesn’t exist, you are prompted for it. Otherwise, <span class="s16">USER </span>is interpreted to be a user’s system name, and <span class="s11">GREETFILENAME </span>returns the file name for the user init file (if it exists).</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">USERGREETFILES                                                 <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">USERGREETFILES <span class="p">specifies a series of file names to try as the user init file. The value of </span>USERGREETFILES <span class="p">is a list, where each element is a list of symbols. For each item in </span>USERGREETFILES<span class="p">, the user name is substituted for the symbol </span>USER <span class="p">and the value of </span>COMPILE<span class="p">.</span>EXT <span class="p">(see the Cimpiler Functions section of Chapter 18) is substituted for the symbol </span>COM<span class="p">, and the symbols are packed into a single file name. The first such file that is found is the user init file.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For example, suppose that the value of <span class="s11">USERGREETFILES </span>was</p><p class="s11" style="padding-top: 8pt;padding-left: 179pt;text-indent: -5pt;line-height: 88%;text-align: left;">(({ERIS}&lt; USER &gt;LISP&gt;INIT. COM) ({ERIS}&lt; USER &gt;LISP&gt;INIT) ({ERIS}&lt; USER &gt;INIT. COM) ({ERIS}&lt; USER &gt;INIT))</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If the user name was <span class="s11">JONES</span>, and the value of <span class="s11">COMPILE.EXT </span>was <span class="s11">DCOM</span>, then this would search for the files <span class="s11">{ERIS}&lt;JONES&gt;LISP&gt;INIT.DCOM, {ERIS}&lt;JONES&gt;LISP&gt;INIT,</span></p><p class="s11" style="padding-top: 1pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">{ERIS}&lt;JONES&gt;INIT.DCOM, and {ERIS}&lt;JONES&gt;INIT.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><b>Note</b>: The file name “specifications” in <span class="s11">USERGREETFILES </span>should be fully qualified, including all host and directory information. The directory search path (the value of <span class="s11">DIRECTORIES</span>, see the Searching File Directories section of Chapter 24) is <i>not </i>used to find the user greet files.</p><p class="s15" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">GREETDATES                                                     <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">The value of </span>GREETDATES <span class="p">can be used to specify special greeting messages for various dates. </span>GREETDATES <span class="p">is a list of elements of the form </span>(<i>DATESTRING </i>. <i>STRING</i>)<span class="p">, e.g. </span>(&quot;25-DEC&quot; . &quot;Merry Christmas&quot;)<span class="p">. The user can add entries to this list in his / her </span>INIT.LISP <span class="p">file by using a </span>ADDVARS <span class="p">file package command like </span>(ADDVARS (GREETDATES (&quot;8-FEB&quot; . &quot;Happy Birthday&quot;)))<span class="p">. On the specified date, the </span>GREET <span class="p">will use the indicated salutation.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">It is impossible to give a complete list of all of the variables and functions you may want to set in your init files. The default values for system variables are chosen in the hope that they will be correct for the majority of users, so many users get along with very small init files. The following describes some of the variables that users may want to reset in their init files:</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -49pt;line-height: 93%;text-align: justify;">Directories The variables <span class="s11">DIRECTORIES </span>and <span class="s11">LISPUSERSDIRECTORIES </span>(see the Searching File Directories section of Chapter 24) contain lists of directories used when searching for files. <span class="s11">LOGINHOST/DIR </span>(see the Incomplete File Names section of Chapter 24) determines the default directory used when you call <span class="s11">CONN </span>with no argument.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 370pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 132pt;text-indent: -80pt;text-align: justify;">Fonts and Printing The variables <span class="s11">DISPLAYFONTDIRECTORIES</span>, <span class="s11">DISPLAYFONTEXTENSIONS</span>, <span class="s11">INTERPRESSFONTDIRECTORIES</span>, and <span class="s11">PRESSFONTWIDTHSFILES </span>(see the</p><p style="padding-left: 132pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Font Files and Font Directories section of Chapter 27) must be set before fonts can be automatically loaded from files. <span class="s11">DEFAULTPRINTINGHOST </span>(see Chapter 29) should be set before attempting to generate hardcopy to a printer.</p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -76pt;line-height: 93%;text-align: justify;">Network Systems <span class="s11">CH.DEFAULT.ORGANIZATION </span>and <span class="s11">CH.DEFAULT.DOMAIN </span>(see the Name and Address Conventions section of Chapter 31) should be set to the default NS organization and domain, when using NS network communications. If <span class="s11">CH.NET.HINT </span>(see the Clearinghouse Functions section of Chapter 31) is set, it can reduce the amount of time spent searching for a clearinghouse.</p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -77pt;line-height: 93%;text-align: justify;">Medley Executive The variable <span class="s11">PROMPT#FLG </span>(see the Changing the Programmer’s Assistant section of Chapter 13) determines whether an “event number” is printed at the beginning of every input line. The function <span class="s11">CHANGESLICE </span>(see the Changing the Programmer’s Assistant section of Chapter 13) can be used to change the number of events that are remembered on the history list.</p><p style="padding-top: 6pt;padding-left: 52pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Copyright Notices <span class="s11">COPYRIGHTFLG</span>, <span class="s11">COPYRIGHTOWNERS</span>, and <span class="s11">DEFAULTCOPYRIGHTOWNER </span>(see</p><p style="padding-left: 132pt;text-indent: 0pt;line-height: 91%;text-align: justify;">the Copyright Notices section of Chapter 17) control the inclusion of copyright notices on source files.</p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -80pt;line-height: 94%;text-align: justify;">Printing Functions <span class="s11">**COMMENT**FLG </span>(see the Comment Feature section of Chapter 26) determines how program comments are printed. <span class="s11">FIRSTCOL</span>, <span class="s11">PRETTYFLG</span>, and <span class="s11">CLISPIFYPRETTYFLG </span>(see the Special Prettyprint Controls section of Chapter 26) are among the many variables controlling how functions are pretty printed.</p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -87pt;line-height: 94%;text-align: justify;">List Structure Editor The variable <span class="s11">INITIALSLST </span>(see the Time Stamps section of Chapter 16) is used when “time-stamps” are inserted in a function when it is edited. <span class="s11">EDITCHARACTERS </span>(see the Time Stamps section of Chapter 16) is used to set the read macros used in the teletype editor.</p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Idle Mode                                                                                                                                                    </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The Medley environment runs on small single-user computers, usually located in users’ offices. Often, users leave their computers up and running for days, which can cause several problems. First, the phosphor in the video display screen can be permanently marked if the same pattern is displayed for a long time (weeks). Second, if you go away, leaving a Medley system running, another person could possibly walk up and use the environment, taking advantage of any passwords that have been entered. To solve these problems, Medley implements the concept of “idle mode.”</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If no keyboard or mouse action has occurred for a specified time, Medley automatically enters idle mode. While idle mode is on, the display screen is blacked out, to protect the phosphor. Idle mode also runs a program to display some moving pattern on the black screen, so the screen does not appear to be broken. Usually, idle mode can be exited by pressing any key on the keyboard or mouse. However, you can optionally specify that idle mode should erase the current password cache when it is entered., and require the next user to supply a password to exit idle mode.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If either shift key is pressed while Medley is in idle mode, the current user name and the amount of time spent idling are displayed in the prompt window while the key is depressed.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Idle mode can also be entered by calling the function <span class="s11">IDLE </span>, or by selecting the Idle menu command from the background menu (see Chapter 28). The Idle menu command has subitems that allow you to interactively set the idle options (display program, erasing password, etc.) specified by the variable <span class="s11">IDLE.PROFILE</span>.</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">IDLE.PROFILE                                                   <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: left;">The value of this variable is a property list (see Chapter 3) which controls most aspects of idle mode. The following properties are recognized:</p><p class="s11" style="padding-top: 6pt;padding-left: 222pt;text-indent: -43pt;text-align: justify;">TIMEOUT <span class="p">Value is a number that determines how long (in minutes) Medley will wait before automatically entering idle mode. If </span>NIL<span class="p">, idle mode will never be entered automatically. Default is 10 minutes.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 222pt;text-indent: -38pt;text-align: justify;">FORGET <span class="p">If this is the symbol </span>FIRST<span class="p">, your password will be erased when idle mode is entered. If non-</span>NIL<span class="p">, your password will be erased when idle mode is exited. Initial value is </span>T <span class="p">(erase password on exit).</span></p><p style="padding-top: 6pt;padding-left: 222pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If the password is erased on entry to idle mode (value <span class="s11">FIRST</span>), any programs left running when idle mode is entered will fail if they try doing anything requiring passwords (such as accessing file servers).</p><p class="s11" style="padding-top: 6pt;padding-left: 222pt;text-indent: -81pt;text-align: justify;">ALLOWED.LOGINS <span class="p">The value of this property can either be a list or a non-list. If the value is </span>NIL <span class="p">or any other non-list, idle mode is exited without requesting login.</span></p><p style="padding-top: 6pt;padding-left: 222pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the value is a list the members of the list should be interpreted as follows:</p><p class="s11" style="padding-top: 6pt;padding-left: 234pt;text-indent: -11pt;line-height: 92%;text-align: justify;">* <span class="p">If the value is a list containing </span>* <span class="p">as it’s element, login is required but anyone can exit idle mode. This will overwrite the previous user’s user name and password each time idle mode is exited.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 234pt;text-indent: -11pt;text-align: justify;">T <span class="p">Let the previous user (as determined by </span>USERNAME<span class="p">) exit idle mode. If the username has not been set, this is equivalent to </span>*</p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">user name Let this specific user exit idle mode.</p><p style="padding-top: 6pt;padding-left: 222pt;text-indent: -54pt;line-height: 91%;text-align: left;">group name Let any member of this group (an NS clearinghouse group) exit idle mode.</p><p class="s11" style="padding-top: 6pt;padding-left: 222pt;text-indent: -70pt;text-align: left;">AUTHENTICATE <span class="p">The value of this property determines the method used for logging in. The value can be one of the following:</span></p><p class="s11" style="padding-top: 6pt;padding-left: 222pt;text-indent: -37pt;text-align: left;">T <span class="p">or </span>NS <span class="p">Use the NS authentication protocol. This requires that you have an NS authentication server accessible on your net.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 370pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 157pt;text-indent: 0pt;text-align: left;">GV <span class="p">Authenticate the login via the GrapeVine protocol.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 146pt;text-indent: 0pt;text-align: left;">UNIX <span class="p">Use the unix login mechanism.</span></p><p class="s17" style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note<span class="p">: Unix is case sensitive. If you try to login but fail, you may have typed the password with the caps-lock on.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -76pt;text-align: left;">LOGIN.TIMEOUT <span class="p">This is the number of seconds idle will wait for a login before resuming idle mode again.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -54pt;line-height: 92%;text-align: justify;">DISPLAYFN <span class="p">The value of this property, which should be a function name or lambda expression, is called to display a moving pattern on the screen while in idle mode. This function is called with one argument, a window covering the whole screen. The default is </span>IDLE.BOUNCING.BOX <span class="p">(below).</span></p><p style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Any function used as a <span class="s11">DISPLAYFN </span>should call <span class="s11">BLOCK </span>(see Chapter 23) frequently, so other programs can run during idle mode.</p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -38pt;text-align: justify;">SAVEVM <span class="p">Value is a number that determines how long (in minutes) after idle mode is entered that </span>SAVEVM <span class="p">will be called to save the virtual memory. If </span>NIL<span class="p">, </span>SAVEVM <span class="p">is never called automatically from idle mode. Default is 10 minutes.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">SUSPEND.PROCESS.NAMES <span class="p">Value is a list of names. For each name on this list, if a process by</span></p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 91%;text-align: justify;">that name is found, it will be suspended upon entering idle mode and woken upon exiting idle mode.</p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">IDLE.RESETVARS <span class="p">[Variable]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">The value of this variable is a list of two-element lists: </span><span class="s11">((</span>VAR<span class="s25">1</span> EXP<span class="s25">1</span><span class="s11">)(</span>VAR<span class="s25">2</span> EXP<span class="s25">2</span><span class="s11">)...)</span><span class="p">. On entering idle mode, each variable </span>VAR<span class="s25">N</span> <span class="p">is bound to the value of the corresponding expression </span>EXP<span class="s25">N</span><span class="p">. When idle mode is exited, each variable </span>VAR<span class="s25">N</span> <span class="p">is reset to its original value.</span></p><p class="s15" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">IDLE.SUSPEND.PROCESS.NAMES <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Value is a list of names. For each name on this list, if a process by that name is found, it will be suspended upon entering idle mode and woken upon exiting idle mode.</p><p class="s15" style="padding-top: 6pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">IDLE.PROFILE <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The value of this variable determines the menu raised by selecting the Display subitem of the Idle background menu command. It should be in the format used for the <span class="s11">ITEMS </span>field of a menu (see Chapter 28), with the selection of an item returning the appropriate display function.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>IDLE.BOUNCING.BOX </b><i>WINDOW BOX WAIT</i><span class="s33">) </span><span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">This is the default display function used for idle mode. <span class="s16">BOX </span>is bounded about <span class="s16">WINDOW</span>, with bounces taking place every <span class="s16">WAIT </span>milliseconds. <span class="s16">BOX </span>can be a string, a bitmap, a window (whose image will be bounced about), or a list containing any number of these</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">(which will be cycled through). <span class="s16">BOX </span>defaults to the value of the variable <span class="s11">IDLE.BOUNCING.BOX</span>, which is initially a bitmap of the Venue logo. <span class="s16">WAIT </span>defaults to 1000 (one second).</p><h4 style="padding-top: 10pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">Saving Virtual Memory State                                                                                                                    </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley storage allocation occurs within a virtual memory space that is usually much larger than the physical memory on the computer. The virtual memory is stored as a large file on the computer’s hard disk, called the virtual memory file. Medley controls the swapping of pages between this file and the real memory, swapping in virtual memory pages as they are accessed, and swapping out pages that have been modified. At any moment, the total state of the Medley virtual memory is stored partially in the virtual memory file, and partially in the real physical memory.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Medley provides facilities for saving the total state of the virtual memory, either on the virtual memory file, or in a file on an arbitrary file device. The function <span class="s11">LOGOUT </span>is used to write all altered (dirty) pages from the real memory to the virtual memory file and stop Medley, so that Medley can be restarted from the state of the <span class="s11">LOGOUT</span>. <span class="s11">SAVEVM </span>updates the virtual memory file without stopping Medley, which puts the virtual memory file into a consistant state (temporarily), so it could be restarted if the system crashes. <span class="s11">SYSOUT </span>and <span class="s11">MAKESYS </span>are used to save a copy of the total virtual memory state on a file, which can be loaded into another machine to restore Medley’s state. <span class="s11">VMEM.PURE.STATE </span>can be used to “freeze” the current state of the virtual memory, so that Medley will come up in that state if it is restarted.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>LOGOUT </b><i>FAST</i>)                                                  <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Stops Medley, and returns control to the operating system. If Medley is restarted, it should come up in the same state as when the <span class="s11">LOGOUT </span>was called. <span class="s11">LOGOUT </span>will not affect the state of open files.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">LOGOUT </span>writes out all altered pages from real memory to the virtual memory file. If <span class="s16">FAST </span>is <span class="s11">T</span>, Medley is stopped without updating the virtual memory file. Note that after doing <span class="s11">(LOGOUT T) </span>it will not be possible to restart Medley from the point of the <span class="s11">LOGOUT</span>, and it may not be possible to restart it at all. Typing <span class="s11">(LOGOUT T</span><b>) </b>is preferable to just booting the machine, because it also does other cleanup operations (closing network connections, etc.).</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FAST </span>is the symbol <span class="s11">?, LOGOUT </span>acts like <span class="s16">FLG </span><span class="s11">= T </span>if the virtual memory file is consistant, otherwise it acts like <span class="s16">FLG </span><span class="s11">= NIL</span>. This insures that the virtual memory image can be restarted as of <i>some </i>previous state, not necessarily as of the <span class="s11">LOGOUT</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SAVEVM </b>—)                                                     <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">This function is similar to logging out and continuing, but faster. It takes about as long as a logout, which can be as brief as 10 seconds or so if you have already written out most of your dirty pages by virtue of being idle a while. After the <span class="s11">SAVEVM</span>, and until the pagefault handler is next forced to write out a dirty page, your virtual memory image will be continuable (as of the <span class="s11">SAVEVM</span>) should there be a system crash or other disaster.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If the system has been idle long enough (no keyboard or mouse activity), there are dirty pages to be written, and there are few enough dirty pages left to write that a <span class="s11">SAVEVM </span>would be quick, <span class="s11">SAVEVM </span>is automatically called. When <span class="s11">SAVEVM </span>is called automatically,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 370pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="10" height="9" alt="image" src="Image_019.gif"/></span></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">the cursor is changed to a special cursor: , stored in the variable <span class="s11">SAVINGCURSOR</span>. You can control how often <span class="s11">SAVEVM </span>is automatically called by setting the following two global variables:</p><p class="s15" style="padding-top: 6pt;padding-left: 53pt;text-indent: 0pt;line-height: 11pt;text-align: left;">SAVEVMWAIT <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;line-height: 11pt;text-align: left;">SAVEVMMAX <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The system will call <span class="s11">SAVEVM </span>after being idle for <span class="s11">SAVEVMWAIT </span>seconds (initially 300) if there are fewer than <span class="s11">SAVEVMMAX </span>pages dirty (initially 600). These values are fairly conservative. If you want to be extremely wary, you can set <span class="s11">SAVEVMWAIT = 0 </span>and <span class="s11">SAVEVMMAX = 10000</span>, in which case <span class="s11">SAVEVM </span>will be called the first chance available after the first dirty page has been written.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The function <span class="s11">SYSOUT </span>saves the current state of Medley’s virtual memory on a file, known as a “sysout file”, or simply a “sysout”. The file package can be used to save particular function definitions and other arbitrary objects on files, but <span class="s11">SYSOUT </span>saves the <i>total </i>state of the system. This capability can be useful in many situations: for creating customized systems for other people to use, or to save a particular system state for debugging purposes. Note that a sysout file can be very large (thousands of pages), and can take a long time to create, so it is not to be done lightly. The file produced by <span class="s11">SYSOUT </span>can be loaded into Medley’s virtual memory and restarted to restore the virtual memory to the exact state that it had when the sysout file was made. The exact method of loading a sysout depend on the implementation. For more information on loading sysout files, see the users guide for your computer.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>SYSOUT </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Saves the current state of Medley’s virtual memory on the file <span class="s16">FILE</span>, in a form that can be subsequently restarted. The current state of program execution is saved in the sysout file, so <span class="s11">(PROGN (SYSOUT ’FOO) (PRINT ’HELLO)) </span>will cause <span class="s11">HELLO </span>to be printed after the sysout file is restarted.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="9" height="9" alt="image" src="Image_020.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="9" height="9" alt="image" src="Image_021.gif"/></span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">SYSOUT </span>can take a very long time (ten or fifteen minutes), particularly when storing a file on a remote file server. To display some indication that something is happening, the cursor is changed to: <span class="s5">. </span>Also, as the sysout file is being written, the cursor is inverted line by line, to show that activity is taking place, and how much of the sysout has completed. For example, after the <span class="s11">SYSOUT </span>is about two-thirds done, the cursor would look like: <span class="s5">. </span>The <span class="s11">SYSOUT </span>cursor is stored in the variable <span class="s11">SYSOUTCURSOR</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FILE </span>is non-<span class="s11">NIL</span>, the variable <span class="s11">SYSOUTFILE </span>is set to the body of <span class="s16">FILE</span>. If <span class="s16">FILE </span>is <span class="s11">NIL</span>, then the value of <span class="s11">SYSOUTFILE </span>instead. Therefore, <span class="s11">(SYSOUT) </span>will save the current state on the next higher version of a file with the same name as the previous <span class="s11">SYSOUT</span>. Also, if the extension for <span class="s16">FILE </span>is not specified, the value of <span class="s11">SYSOUT.EXT </span>is used. <span class="s11">SYSOUT </span>sets <span class="s11">SYSOUTDATE </span>(see the System Version Information section below) to <span class="s11">(DATE)</span>, the time and date that the <span class="s11">SYSOUT </span>was performed.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s11">SYSOUT </span>was not able to create the sysout file, because of disk or computer error, or because there was not enough space on the directory, <span class="s11">SYSOUT </span>returns <span class="s11">NIL</span>. Otherwise it returns the full file name of <span class="s16">FILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">Actually, <span class="s11">SYSOUT </span>“returns” twice; when the sysout file is first created, and when it is subsequently restarted. In the latter case, <span class="s11">SYSOUT </span>returns a list whose <span class="s11">CAR </span>is the full file name of <span class="s16">FILE</span>. For example, <span class="s11">(if (LISTP (SYSOUT ’FOO)) then (PRINT ’HELLO)) </span>will cause <span class="s11">HELLO </span>to be printed when the sysout file is restarted, but not when <span class="s11">SYSOUT </span>is initially performed.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><b>Note</b>: <span class="s11">SYSOUT </span>does not save the state of any open files. Use <span class="s11">WHENCLOSE </span>(see the Closing and Reopening Files section in Chapter 24) to associate certain operations with open files so that when a <span class="s11">SYSOUT </span>is started up, these files will be reopened, and file pointers repositioned.</p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">SYSOUT <span class="p">evaluates the expressions on </span>BEFORESYSOUTFORMS <span class="p">(see also </span>AROUNDEXITFNS<span class="p">) before creating the sysout file. This variable initially includes expressions to:</span></p><ol id="l15"><li><p style="padding-top: 6pt;padding-left: 140pt;text-indent: -14pt;text-align: left;">Set the variables <span class="s11">SYSOUTDATE </span>and <span class="s11">SYSOUTFILE </span>as described above</p></li><li><p style="padding-top: 6pt;padding-left: 138pt;text-indent: -12pt;line-height: 12pt;text-align: left;">Default the sysout file name <span class="s16">FILE </span>according to the values of the variables</p><p class="s11" style="padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: left;">SYSOUTFILE <span class="p">and </span>SYSOUT.EXT<span class="p">, as described above</span></p></li><li><p style="padding-top: 6pt;padding-left: 138pt;text-indent: -12pt;text-align: left;">Perform any necessary operations on open files as specified by calls to <span class="s11">WHENCLOSE</span>.</p></li></ol><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">After a sysout file is restarted (but <i>not </i>when it is initially created), <span class="s11">SYSOUT </span>evaluates the expressions on <span class="s11">AFTERSYSOUTFORMS </span>(see also <span class="s11">AROUNDEXITFNS</span>). This initially includes expressions to:</p><ol id="l16"><li><p style="padding-top: 6pt;padding-left: 138pt;text-indent: -12pt;text-align: left;">Perform any necessary operations on previously-opened files as specified by calls to</p><p class="s11" style="padding-left: 138pt;text-indent: 0pt;text-align: left;">WHENCLOSE</p></li><li><p style="padding-top: 6pt;padding-left: 138pt;text-indent: -12pt;text-align: left;">Possibly print a message, as determined by the value of <span class="s11">SYSOUTGAG </span>(see below)</p></li><li><p style="padding-top: 6pt;padding-left: 138pt;text-indent: -12pt;text-align: left;">Call <span class="s11">SETINITIALS </span>to reset the initials used for time-stamping (see the Time Stamps section of Chapter 16).</p></li></ol><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">AROUNDEXITFNS                                                  <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This variable provides a way to “advise” the system on cleanup and restoration activities to perform around <span class="s11">LOGOUT</span>, <span class="s11">SYSOUT</span>, <span class="s11">MAKESYS </span>and <span class="s11">SAVEVM</span>; It subsumes the functionality of <span class="s11">BEFORESYSOUTFORMS</span>, <span class="s11">AFTERLOGOUTFORMS</span>, etc. It’s value is a list of functions (names) to call around every “exit” of the system. Each function is called with one argument, a symbol indicating which particular event is occuring.  The symbols are:</p><p style="padding-top: 6pt;padding-left: 138pt;text-indent: 0pt;text-align: left;"><span class="s15">BEFORLOGOUT </span>The system is about to perform a <span class="s11">LOGOUT</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 127pt;text-indent: 5pt;line-height: 88%;text-align: left;">BEFORESYSOUT BEFOREMAKESYS</p><p style="padding-left: 133pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s15">BEFORESAVEVM </span>The system is about to perform a <span class="s11">SYSOUT, MAKESYS </span>or a <span class="s11">SAVEVM</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 133pt;text-indent: 5pt;line-height: 88%;text-align: right;">AFTERLOGOUT AFTERSYSOUT AFTERMAKESYS</p><p class="s15" style="padding-left: 138pt;text-indent: 0pt;line-height: 10pt;text-align: left;">AFTERSAVEVM <span class="p">The system is starting up am image that was saved by performing a</span></p><p class="s11" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: center;">LOGOUT<span class="p">, </span>SYSOUT<span class="p">, etc.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 127pt;text-indent: 0pt;text-align: left;">AFTERDOSYSOUT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 370pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 74pt;text-indent: 0pt;line-height: 9pt;text-align: left;">AFTERDOMAKESYS</p><p class="s15" style="padding-left: 79pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">AFTERDOSAVEVM <span class="p">The system just made a copy of the virtual memory and saved it to</span></p><p style="padding-left: 156pt;text-indent: 0pt;line-height: 91%;text-align: left;">disk. The image continues to run. These events only exist to allow you to negate the effects of saveing a copy of the virtual memory.</p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">SYSOUTGAG <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The value of <span class="s11">SYSOUTGAG </span>determines what is printed when a sysout file is restarted. If the value of <span class="s11">SYSOUTGAG </span>is a list, the list is evaluated, and no additional message is printed. This allows you to print a message. If <span class="s11">SYSOUTGAG </span>is non-<span class="s11">NIL </span>and not a list, no message is printed. Finally, if <span class="s11">SYSOUTGAG </span>is <span class="s11">NIL </span>(its initial value), and the sysout file is being restarted by the same user that made the sysout originally, you are greeted by printing the value of <span class="s11">HERALDSTRING </span>(see below) followed by a greeting message. If the sysout file was made by a different user, a message is printed, warning that the currently-loaded user init file may be incorrect for the current user (see the Greeting and Initialization Files section above).</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>MAKESYS </b><i>FILE NAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Used to store a new Medley system on the “makesys file” <span class="s16">FILE</span>. Like <span class="s11">SYSOUT</span>, but before the file is made, the system is “initialized” by undoing the greet history, and clearing the display.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">When the system is first started up, a “herald” is printed identifying the system, typically “<span class="s11">Medley-XX DATE ...</span>”. If <span class="s16">NAME </span>is non-<span class="s11">NIL</span>, <span class="s11">MAKESYS </span>will use it instead of <span class="s11">Medley- XX </span>in the herald. <span class="s11">MAKESYS </span>sets <span class="s11">HERALDSTRING </span>to the herald string printed out.</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">MAKESYS <span class="p">also sets the variable </span>MAKESYSDATE <span class="p">(see the next section below) to </span>(DATE)<span class="p">, i.e. the time and date the system was made.</span></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley contains a routine that writes out dirty pages of the virtual memory during I / O wait, assuming that swapping has caused at least one dirty page to be written back into the virtual memory file (making it non-continuable). The frequency with which this routine runs is determined by:</p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">BACKGROUNDPAGEFREQ <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">This variable determines how often the routine that writes out dirty pages is run. The <i>higher </i><span class="s11">BACKGROUNDPAGEFREQ </span>is set, the <i>greater </i>the time between running the dirty page writing routine. Initially it is set to 4. The lower <span class="s11">BACKGROUNDPAGEFREQ </span>is set, the less responsiveness you get at typein, so it may not be desirable to set it all the way down to 1.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>VMEM.PURE.STATE </b><i>X</i>) <span class="p">[NoSpread Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">VMEM.PURE.STATE <span class="p">modifies the swapper’s page replacement algorithm so that dirty pages are only written at the end of the virtual memory backing file. This “freezes” a given virtual memory state, so that Medley will come up in that state whenever it is restarted. This can be used to set up a “clean” environment on a pool machine, allowing each user to initialize the system simply by rebooting the computer.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The way to use <span class="s11">VMEM.PURE.STATE </span>is to set up the environment as you wish it to be “frozen,” evaluate <span class="s11">(VMEM.PURE.STATE T)</span>, and then call any function that saves the virtual memory state (<span class="s11">LOGOUT</span>, <span class="s11">SAVEVM</span>, <span class="s11">SYSOUT</span>, or <span class="s11">MAKESYS</span>). From that point on,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">whenever the system is restarted, it will return to the state as of the saving operation. Future <span class="s11">LOGOUT</span>, <span class="s11">SAVEVM</span>, etc. operations will not reset this state.</p><p class="s17" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note<span class="p">: When the system is running in “pure state” mode, it uses a significant amount of the virtual memory backing file to save the “frozen” memory image, so this will reduce the amount of virtual memory space available for use.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(VMEM.PURE.STATE) <span class="p">returns </span>T <span class="p">if the system is running in “pure state” mode, </span>NIL</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">otherwise.</p><p class="s11" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>REALMEMORYSIZE</b>)                                               <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the number of real memory pages in the computer.</p><p class="s11" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>VMEMSIZE</b>)                                                     <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Returns the number of pages in use in the virtual memory. This is the roughly the same as the number of pages required to make a sysout file on the local disk (see <span class="s11">SYSOUT</span>, above).</p><p class="s5" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">\ <span class="s15">LASTVMEMFILEPAGE                                              </span><span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Value is the total size of the virtual memory backing file. This variable is set when the system is started.  You should <i>not </i>set it..</p><p class="s17" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note<span class="p">: When the virtual memory expands to the point where the virtual memory backing file is almost full, a break will occur with the warning message “Your virtual memory backing file is almost full. Save your work &amp; reload asap.” When this happens, it is strongly suggested that you save any important work and reload the system. If you continue working past this point, the system will start slowing down considerably, and it will eventually stop working.</span></p><h4 style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">System Version Information                                                                                                                    </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley runs on a number of different machines, with many possible hardware configurations. There have been a number of different releases of the Medley software. These facts make it difficult to answer the important question “what software / hardware environment are you running?” when reporting bugs. The following functions allow the novice to collect this information.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PRINT-LISP-INFORMATION </b><i>STREAM FILESTRING</i>)             <span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Prints out a summary of the software and hardware environment that Medley is running in, and a list of all loaded patch files:</p><p class="s11" style="padding-top: 4pt;padding-left: 143pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Venue Medley version</p><p class="s11" style="padding-left: 143pt;text-indent: 0pt;line-height: 88%;text-align: left;">Medley 2.0 sysout of 7-Oct-92 15:18:52 on mips, Emulator created: 20-Nov-92, memory size: 0, machine d022899 mo</p><p class="s11" style="padding-left: 143pt;text-indent: 0pt;line-height: 88%;text-align: left;">based on Envos Medley version Medley 2.0 sysout of 7-Oct- 92 15:18:52,</p><p class="s11" style="padding-left: 143pt;text-indent: 0pt;line-height: 88%;text-align: left;">Make-init dates: 7-Oct-92 11:07:17, 7-Oct-92 11:26:22 Patch files: NIL</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;"><span class="s16">STREAM </span>is the stream used to print the summary. If not given, it defaults to <span class="s11">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 370pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">FILESTRING </span>is a string used to determine what loaded files should be listed as “patch files.” All file names on <span class="s11">LOADEDFILELST </span>(see the Noticing Files section of Chapter 17) that have <span class="s16">FILESTRING </span>as a substring as listed. If <span class="s16">FILESTRING </span>is not given, it defaults to the string <span class="s11">“PATCH”</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>CL:LISP-IMPLEMENTATION-TYPE</b>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 54pt;text-indent: 23pt;line-height: 153%;text-align: left;"><span class="p">Returns a string identifying the type of implementation that is running, e.g., </span>“Medley”<span class="p">. </span>(<b>CL:LISP-IMPLEMENTATION-VERSION</b>) <span class="p">[Function]</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Returns a string identifying the version that is running. Currently gives the system name</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">and date, e.g., <span class="s11">“KOTO of 10-Sep-85 08:25:46”</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">This uses the variables <span class="s11">MAKESYSNAME </span>and <span class="s11">MAKESYSDATE </span>(below), so it will change if you use <span class="s11">MAKESYS </span>(see the Saving Virtual Memory State section above) to create a custom sysout file, or explicitly changes these variables.</p><p class="s11" style="padding-top: 6pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>CL:SOFTWARE-TYPE</b>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns a string identifying the operating system that Interlisp is running under. Currently returns the string <span class="s11">“Envos Medley”</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CL:SOFTWARE-VERSION</b>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns a string identifying the version of the operating system that Interlisp is running under. Currently, this returns the date that the Medley release was originally created, so it doesn’t change over <span class="s11">MAKESYS </span>or <span class="s11">SYSOUT</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CL:MACHINE-TYPE</b>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns a string identifying the type of computer hardware that Medley is running on, i.e., <span class="s11">“1108”</span>, <span class="s11">“1132”</span>, <span class="s11">“1186”</span>,  <span class="s11">“mips”</span>, etc.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CL:MACHINE-VERSION</b>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns a string identifying the version of the computer hardware that Medley is running on. Currently returns the microcode version and real memory size.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CL:MACHINE-INSTANCE</b>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns a string identifying the particular machine that Medley is running on. Currently returns the machine’s NS address.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CL:SHORT-SITE-NAME</b>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns a short string identifying the site where the machine is located. Currently returns</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(ETHERHOSTNAME) <span class="p">(if non-</span>NIL<span class="p">) or the string </span>“unknown”<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CL:LONG-SITE-NAME</b>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns a long string identifying the site where the machine is located. Currently returns the same as <span class="s11">SHORT-SITE-NAME</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">SYSOUTDATE                                                     <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Value is set by <span class="s11">SYSOUT </span>(see the Saving Virtual Memory State section above) to the date before generating a virtual memory image file.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">MAKESYSDATE                                                   <span class="s5">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Value is set by <span class="s11">MAKESYS </span>(see the Saving Virtual Memory State section above) to the date before generating a virtual memory image file.</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">MAKESYSNAME                                                    <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Value is a symbol identifying the release name of the current Medley system, e.g.,</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:MEDLEY<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SYSTEMTYPE</b>)                                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Allows programmers to write system-dependent code. <span class="s11">SYSTEMTYPE </span>returns a symbol corresponding to the implementation of Interlisp: <span class="s11">D </span>(for Medley), <span class="s11">TOPS-20</span>, <span class="s11">TENEX</span>, <span class="s11">JERICO</span>, or <span class="s11">VAX</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">In Medley, <span class="s11">(SELECTQ (SYSTEMTYPE) ...) </span>expressions are expanded at compile time so that this is an effective way to perform conditional compilation.</p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>MACHINETYPE</b>)                                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the type of machine that Medley is running on: either <span class="s11">DORADO </span>(for the Xerox 1132), <span class="s11">DOLPHIN </span>(for the Xerox 1100), <span class="s11">DANDELION </span>(for the Xerox 1108), <span class="s11">DOVE </span>(for the Xerox 1186), or <span class="s11">MAIKO </span>(for Unix, DOS, etc).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Date And Time Functions                                                                                                                         </h4><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>DATE </b><i>FORMAT</i>)                                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the current date and time as a string with format <span class="s11">“</span><span class="s16">DD-MM-YY HH:MMM:SS</span><span class="s11">”</span>, where <span class="s16">DD </span>is day, <span class="s16">MM </span>is month, <span class="s16">YY </span>year, <span class="s16">HH </span>hours, <span class="s16">MMM </span>minutes, <span class="s16">SS </span>seconds, e.g., <span class="s11">“7-Jun- 85 15:49:34”</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FORMAT </span>is a date format as returned by <span class="s11">DATEFORMAT </span>(below), it is used to modify the format of the date string returned by <span class="s11">DATE</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>IDATE </b><i>STR</i>)                                                    <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><i>STR </i><span class="p">is a date and time string. </span>IDATE <span class="p">returns </span><i>STR </i><span class="p">converted to a number such that if </span>DATE1 <span class="p">is before (earlier than) </span>DATE2<span class="p">, then </span>(IDATE <i>DATE1</i>) &lt; (IDATE <i>DATE2</i>)<span class="p">. If </span>STR <span class="p">is </span>NIL<span class="p">, the current date and time is used.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Different Interlisp implementations can have different internal date formats. However, <span class="s11">IDATE </span>always has the essential property that <span class="s11">(IDATE </span><span class="s16">X</span><span class="s11">) </span>is less than <span class="s11">(IDATE </span><span class="s16">Y</span><span class="s11">) </span>if <span class="s16">X </span>is before <span class="s16">Y</span>, and <span class="s11">(IDATE (GDATE </span><span class="s16">N</span><span class="s11">)) </span>equals <span class="s16">N</span>. Programs which do arithmetic other than numerical comparisons between <span class="s11">IDATE </span>numbers may not work when moved from one implementation to another.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 370pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Generally, it is possible to increment an <span class="s11">IDATE </span>number by an integral number of days by computing a “1 day” constant, the difference between two convenient <span class="s11">IDATE</span>s, e.g. <span class="s11">(IDIFFERENCE (IDATE “2-JAN-80 12:00&quot;) (IDATE &quot;1-JAN-80 12:00&quot;))</span>.</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">This “1 day” constant can be evaluated at compile time.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">IDATE <span class="p">is guaranteed to accept as input the dates that </span>DATE <span class="p">will output. It will ignore the parenthesized day of the week (if any). </span>IDATE <span class="p">also correctly handles time zone specifications for those time zones registered in the list </span>TIME.ZONES <span class="p">(below).</span></p><p class="s11" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>GDATE </b><i>DATE FORMAT —</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">DATE</span>, except that <span class="s16">DATE </span>can be a number in internal date and time format as returned by <span class="s11">IDATE</span>.  If <span class="s16">DATE </span>is <span class="s11">NIL</span>, the current time and date is used.</p><p class="s16" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>DATEFORMAT </b>KEY<span class="s25">1</span> ... KEY<span class="s25">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">DATEFORMAT <span class="p">returns a date format suitable as a parameter to </span>DATE <span class="p">and </span>GDATE<span class="p">. </span><i>KEY</i><i>1</i></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">... <i>KEY</i><i>N</i><i> </i><span class="p">are a set of keywords (unevaluated). Each keyword affects the format of the date independently (except for </span>SLASHES <span class="p">and </span>SPACES<span class="p">). If the date returned by </span>(DATE) <span class="p">with the default formatting was 7-Jun-85 15:49:34, the keywords would affect the formatting as follows:</span></p><p class="s11" style="padding-top: 6pt;padding-left: 130pt;text-indent: 0pt;text-align: left;">NO.DATE <span class="p">Doesn’t include the date information, e.g. </span>“15:49:34”<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 180pt;text-indent: -93pt;text-align: left;">NUMBER.OF.MONTH <span class="p">Shows the month as a number instead of a name, e.g. </span>“7-06- 85 15:49:34”<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 180pt;text-indent: -60pt;text-align: left;">YEAR.LONG <span class="p">Prints the year using four digits, e.g. </span>“7-Jun-1985 15:49:34”<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 130pt;text-indent: 0pt;line-height: 12pt;text-align: left;">SLASHES <span class="p">Separates the day, month, and year fields with slashes, e.g.</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 12pt;text-align: left;">“7/Jun/85 15:49:34”<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 180pt;text-indent: -44pt;text-align: left;">SPACES <span class="p">Separates the day, month, and year fields with spaces, e.g. </span>“7 Jun 85 15:49:34”<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 180pt;text-indent: -103pt;text-align: justify;">NO.LEADING.SPACES <span class="p">By default, the day field will always be two characters long. If </span>NO.LEADING.SPACES <span class="p">is specified, the day field will be one character for dates earlier than the 10th, e.g. </span>“7-Jun-85 15:49:34” <span class="p">instead of </span>“7-Jun-85 15:49:34”<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 130pt;text-indent: 0pt;text-align: left;">NO.TIME <span class="p">Doesn’t include the time information, e.g. </span>“7-Jun-85”<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 179pt;text-indent: -60pt;text-align: left;">TIME.ZONE <span class="p">Includes the time zone in the time specification, e.g. </span>“7-Jun- 85”<span class="p">.</span></p><p class="s11" style="padding-left: 108pt;text-indent: 5pt;line-height: 19pt;text-align: left;">NO.SECONDS <span class="p">Doesn’t include the seconds, e.g. </span>“7-Jun-85 15:49”<span class="p">. </span>DAY.OF.WEEK <span class="p">Includes the day of the week in the time specification, e.g. </span>“7-</p><p class="s11" style="padding-left: 179pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Jun-85 15:49:34 PDT (Friday)”<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 227pt;text-indent: -60pt;text-align: justify;">DAY.SHORT <span class="p">If </span>DAY.OF.WEEK <span class="p">is specified to include the day of the week, the week day is shortened to the first three letters, e.g. </span>“7-Jun-85 15:49:34 PDT (Fri)”<span class="p">. Note that </span>DAY.SHORT <span class="p">has no effect unless </span>DAY.OF.WEEK <span class="p">is also specified.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">(<b>CLOCK </b><i>N —</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">N </span><span class="s11">= 0</span>, <span class="s11">CLOCK </span>returns the current value of the time of day clock i.e., the number of milliseconds since last system start up.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">N </span><span class="s11">= 1</span>, returns the value of the time of day clock when you started up this Interlisp, i.e., difference between <span class="s11">(CLOCK 0) </span>and <span class="s11">(CLOCK 1) </span>is number of milliseconds (real time) since this Interlisp system was started.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">N </span><span class="s11">= 2</span>, returns the number of milliseconds of <i>compute </i>time since user started up this Interlisp (garbage collection time is subtracted off).</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">N </span><span class="s11">= 3</span>, returns the number of milliseconds of compute time spent in garbage collections (all types).</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SETTIME </b><i>DT</i>)                                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Sets the internal time-of-day clock. If <span class="s16">DT </span><span class="s11">= NIL</span>, <span class="s11">SETTIME </span>attempts to get the time from the communications net; if it fails, you are prompted for the time. If <span class="s16">DT </span>is a string in a form that <span class="s11">IDATE </span>recognizes, it is used to set the time.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The following variables are used to interpret times in different time zones. <span class="s11">\TimeZoneComp</span>,</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">\BeginDST<span class="p">, and </span>\EndDST <span class="p">are normally set automatically if your machine is connected to a network with a time server. For standalone machines, it may be necessary to set them by hand (or in your init file, see the first section of this chapter) if you are not in the Pacific time zone.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TIME.ZONES                                                     <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Value is an association list that associates time zone specifications (<span class="s11">PDT</span>, <span class="s11">EST</span>, <span class="s11">GMT</span>, etc.) with the number of hours west of Greenwich (negative if east). If the time zone specification is a single letter, it is appended to <span class="s11">“DT</span>” or <span class="s11">“ST</span>” depending on whether daylight saving time is in effect.  Initially set to:</p><p class="s11" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">((8 . P) (7 . M) (6 . C) (5 . E) (0 . GMT))</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">This list is used by <span class="s11">DATE </span>and <span class="s11">GDATE </span>when generating a date with the <span class="s11">TIME.ZONE </span>format is specified, and by <span class="s11">IDATE </span>when parsing dates.</p><p class="s38" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">\ <span class="s15">TimeZoneComp                                                  </span><span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This variable should be initialized to the number of hours west of Greenwich (negative if east). For the U.S. west coast it is 8. For the east coast it is 5.</p><p class="s38" style="padding-top: 7pt;padding-left: 103pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">\ <span class="s15">BeginDST </span><span class="p">[Variable]</span></p><p class="s38" style="padding-left: 103pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">\ <span class="s15">EndDST </span><span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">\BeginDST <span class="p">is the day of the year on or before which Daylight Savings Time takes effect (i.e., the Sunday on or immediately preceding this day); </span>\EndDST <span class="p">is the day on or before which Daylight Savings Time ends. Days are numbered with 1 being January 1, and</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 370pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">counting the days as for a leap year. In the USA where Daylight Savings Time is observed, <span class="s11">\BeginDST = 121 </span>and <span class="s11">\EndDST = 305</span>. In a region where Daylight Savings Time is not observed at all, set <span class="s11">\BeginDST </span>to 367.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 30pt;text-indent: -24pt;text-align: left;">Timers and Duration Functions                                                                                                               </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Often one needs to loop over some code, stopping when a certain interval of time has passed. Some systems provide an “alarm clock” facility, which provides an asynchronous interrupt when a time interval runs out. This is not particularly feasible in the current Medley environment, so the following facilities are supplied for efficiently testing for the expiration of a time interval in a loop context.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Three functions are provided: <span class="s11">SETUPTIMER</span>, <span class="s11">SETUPTIMER.DATE</span>, and <span class="s11">TIMEREXPIRED?</span>. There are also several new i.s.oprs: <span class="s11">forDuration</span>, <span class="s11">during</span>, <span class="s11">untilDate</span>, <span class="s11">timerUnits</span>, <span class="s11">usingTimer</span>, and <span class="s11">resourceName </span>(reasonable variations on upper / lower case are permissible).</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">These functions use an object called a timer, which encodes a future clock time at which a signal is desired.  A timer is constructed by the functions <span class="s11">SETUPTIMER </span>and <span class="s11">SETUPTIMER.DATE</span>, and is created with a basic clock “unit” selected from among <span class="s11">SECONDS</span>, <span class="s11">MILLISECONDS</span>, or <span class="s11">TICKS</span>. The first two timer units provide a machine / system independent interface, and the latter provides access to the “real”, basic strobe unit of the machine’s clock on which the program is running. The default unit is <span class="s11">MILLISECONDS</span>.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Currently, the <span class="s11">TICKS </span>unit depends on what machine Medley is running on. The Xerox 1132 has about 1680 ticks per millisecond; the Xerox 1108 has about 34.746 ticks per millisecond; the Xerox 1185 and 1186 have about 62.5 ticks per millisecond. The advantage of using <span class="s11">TICKS </span>rather than one of the uniform interfaces is primarily speed; e.g., it may take over 400 microseconds to read the milliseconds clock (a software facility that uses the real clock), whereas reading the real clock itself may take less than ten microseconds. The disadvantage of the <span class="s11">TICKS </span>unit is its short roll-over interval (about 20 minutes) compared to the <span class="s11">MILLISECONDS </span>roll-over interval (about two weeks), and also the dependency on particular machine parameters.</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">(<b>SETUPTIMER </b><i>INTERVAL OldTimer? timerUnits intervalUnits</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">SETUPTIMER <span class="p">returns a timer that will “go off” (as tested by </span>TIMEREXPIRED?<span class="p">) after a specified time-interval measured from  the  current  clock  time.  </span>SETUPTIMER <span class="p">has  one required and three optional arguments:</span></p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">INTERVAL <span class="p">must be a integer specifying how long an interval is desired. </span>timerUnits</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">specifies the units of measure for the interval (defaults to <span class="s11">MILLISECONDS</span>).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">OldTimer? </span>is a timer, it will be reused and returned, rather than allocating a new timer. <span class="s16">intervalUnits </span>specifies the units in which the <span class="s16">OldTimer</span><i>? </i>is expressed (defaults to the value of <span class="s16">timerUnits</span>.</p><p class="s11" style="padding-top: 8pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">(<b>SETUPTIMER.DATE </b><i>DTS OldTimer?</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">SETUPTIMER.DATE </span>returns a timer (using the <span class="s11">SECONDS </span>time unit) that will “go off” at a specified date and time. <span class="s16">DTS </span>is a Date / Time string such as <span class="s11">IDATE </span>accepts (see the above section). If <span class="s16">OldTimer? </span>is a timer, it will be reused and returned, rather than allocating a new timer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">SETUPTIMER.DATE <span class="p">operates by first subtracting </span>(IDATE) <span class="p">from </span>(IDATE <i>DTS</i>)<span class="p">, so there may be some large integer creation involved, even if </span><i>OLDTIMER? </i><span class="p">is given.</span></p><p class="s16" style="padding-top: 3pt;padding-left: 125pt;text-indent: -24pt;line-height: 17pt;text-align: left;"><span class="s11">(</span><b>TIMEREXPIRED? </b>TIMER ClockValue.or.timerUnits<span class="s11">) </span><span class="p">[Function] If </span>TIMER <span class="p">is a timer, and </span>ClockValue.or.timerUnits <span class="p">is the time-unit of </span>TIMER<span class="p">,</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s11">TIMEREXPIRED? </span>returns true if <span class="s16">TIMER </span>has “gone off”.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s16">ClockValue.or.timerUnits </span>can also be a timer, in which case <span class="s11">TIMEREXPIRED? </span>compares the two timers (which must be in the same timer units). If <span class="s11">X </span>and <span class="s11">Y </span>are timers, then <span class="s11">(TIMEREXPIRED? X Y) </span>is true if <span class="s11">X </span>is set for an <i>earlier </i>time than <span class="s11">Y</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are a number of i.s.oprs that make it easier to use timers in iterative statements (see the Interative Statement section of Chapter 9). These i.s.oprs are given below in the “canonical” form, with the second “word” capitalized, but the all-caps and all-lower-case versions are also acceptable.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">forDuration <i>INTERVAL                                        </i><span class="p">[I.S. Operator]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">during <i>INTERVAL                                             </i><span class="p">[I.S. Operator]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">INTERVAL <span class="p">is an integer specifying an interval of time during which the iterative statement will loop.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">timerUnits <i>UNITS                                            </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">UNITS </span>specifies the time units of the <span class="s16">INTERVAL </span>specified in <span class="s11">forDuration</span>.</p><p class="s15" style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">untilDate <i>DTS </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">DTS </span>is a Date / Time string (such as <span class="s11">IDATE </span>accepts) specifying when the iterative statement should stop looping.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">usingTimer <i>TIMER                                            </i><span class="p">[I.S. Operator]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If usingTimer is given, <span class="s16">TIMER </span>is reused as the timer for <span class="s11">forDuration </span>or <span class="s11">untilDate</span>, rather than creating a new timer. This can reduce allocation if one of these i.s.oprs is used within another loop.</p><p class="s17" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">resourceName <span class="s16">RESOURCE </span><span class="p">[I.S. Operator]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">RESOURCE <span class="p">specifies a resource name to be used as the timer storage (see the File Package Types section of Chapter 17). If </span>RESOURCE <span class="s11">= T</span><span class="p">, it will be converted to an internal name.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Some examples:</p><p class="s11" style="padding-top: 5pt;padding-left: 137pt;text-indent: -11pt;line-height: 88%;text-align: left;">(during 6MONTHS timerUnits ’SECONDS until (TENANT-VACATED? HouseHolder) do (DISMISS &lt;for-about-a-day&gt;)</p><p class="s11" style="padding-left: 153pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(HARRASS HouseHolder)</p><p class="s11" style="padding-left: 186pt;text-indent: -48pt;line-height: 88%;text-align: left;">finally (if (NOT (TENANT-VACATED? HouseHolder)) then (EVICT-TENANT HouseHolder)))</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This example shows that how is is possible to have two termination condition: when the time interval of <span class="s11">6MONTHS </span>has elapsed, or when the predicate <span class="s11">(TENANT-VACATED? HouseHolder) </span>becomes true. Note that the “finally” clause is executed regardless of which termination condition caused it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 370pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Also note that since the millisecond clock will “roll over” about every two weeks, <span class="s11">“6MONTHS</span>” wouldn’t be an appropriate interval if the timer units were the default case, namely <span class="s11">MILLISECONDS</span>.</p><p class="s11" style="padding-top: 5pt;padding-left: 111pt;text-indent: -33pt;line-height: 88%;text-align: left;">(do (forDuration (CONSTANT (ITIMES 10 24 60 60 1000)) do (CARRY.ON.AS.USUAL)</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">finally (PROMPTPRINT &quot;Have you had your 10-day check-up?&quot;)))</p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This infinite loop breaks out with a warning message every 10 days. One could question whether the millisecond clock, which is used by default, is appropriate for this loop, since it rolls-over about every two weeks.</p><p class="s11" style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(SETQ <span class="s5">\ </span>RandomTimer (SETUPTIMER 0))</p><p class="s11" style="padding-left: 89pt;text-indent: -5pt;line-height: 88%;text-align: left;">(untilDate &quot;31-DEC-83 23:59:59&quot; usingTimer \RandomTimer when (WINNING?) do (RETURN)</p><p class="s11" style="padding-left: 89pt;text-indent: 0pt;line-height: 9pt;text-align: left;">finally (ERROR &quot;You’ve been losing this whole year!&quot;))</p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Here is a usage of an explicit date for the time interval; also, some stsorage has been squirreled away (as the value of \RandomTimer) for use by the call to <span class="s11">SETUPTIMER </span>in this loop.</p><p class="s11" style="padding-top: 5pt;padding-left: 89pt;text-indent: -11pt;line-height: 88%;text-align: left;">(forDuration SOMEINTERVAL resourceName \INNERLOOPBOX timerunits ’TICKS</p><p class="s11" style="padding-left: 89pt;text-indent: 0pt;line-height: 9pt;text-align: left;">do (CRITICAL.INNER.LOOP))</p><p style="padding-top: 4pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">For this loop, you don’t want any <span class="s11">CONS</span>ing to take place, so <span class="s11">\INNERLOOPBOX </span>is defined as a resource which “caches” a timer cell (if it isn’t already so defined), and wraps the entire statement in a <span class="s11">WITH- RESOURCES </span>call. Furthermore, a time unit of <span class="s11">TICKS </span>is specified, for lower overhead in this critical inner loop. In fact specifying a resourceName of <span class="s11">T </span>is the same as specifying it to be</p><p class="s11" style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">\ForDurationOfBox<span class="p">; this is just a simpler way to specify that a resource is wanted, without having to think up a name.</span></p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Resources                                                                                                                                                  </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley is based on the use of a storage-management system which allocates memory space for new data objects, and automatically reclaims the space when no longer in use. More generally, Medley manages shared “resources”, such as files, semaphors for processes, etc. The protocols for allocating and freeing such resources resemble those of ordinary storage management.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Sometimes you need to explicitly manage the allocation of resources. You may want the efficiency of explicit reclamation of certain temporary data; or it may be expensive to initialize a complex data object; or there may be an application that must not allocate new cells during some critical section of code.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The file manager type <span class="s11">RESOURCES </span>is available to help with the definition and usage of such classes of data; the definition of a <span class="s11">RESOURCE </span>specifies prototype code to do the basic management operations. The file manager command <span class="s11">RESOURCES </span>is used to save such definitions on files, and <span class="s11">INITRESOURCES </span>(see the Miscellaneous File Manager Commands section of Chapter 17) causes the initialization code to be output.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">The basic needs of resource management are:</p><ol id="l17"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -12pt;line-height: 91%;text-align: left;">Obtaining a data item from the Lisp memory management system and configuring it to be a totally new instance of the resource in question</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -12pt;text-align: left;">Freeing up an instance which is no longer needed</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 6pt;padding-left: 89pt;text-indent: -12pt;line-height: 91%;text-align: left;">Getting an instance of the resource for temporary usage (whether “fresh” or a formerly freed-up instance)</p></li><li><p style="padding-top: 3pt;padding-left: 90pt;text-indent: -12pt;text-align: left;">Setting up any prerequisite global data structures and variables</p></li></ol><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">A resources definition consists of four “methods”: <span class="s11">INIT</span>, <span class="s11">NEW</span>, <span class="s11">GET</span>, and <span class="s11">FREE</span>; each “method” is a form that will specialize the definition for four corresponding user-level macros <span class="s11">INITRESOURCE</span>, <span class="s11">NEWRESOURCE</span>, <span class="s11">GETRESOURCE</span>, and <span class="s11">FREERESOURCE</span>. <span class="s11">PUTDEF </span>is used to make a resources definition, and the four components are specified in a proplist:</p><p class="s11" style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PUTDEF</p><p class="s11" style="padding-left: 148pt;text-indent: 0pt;line-height: 88%;text-align: left;">’<i>RESOURCENAME </i>’RESOURCES</p><p class="s11" style="padding-left: 148pt;text-indent: 0pt;line-height: 9pt;text-align: left;">’(NEW <i>NEW-INSTANCE-GENERATION-CODE</i></p><p class="s11" style="padding-left: 159pt;text-indent: 0pt;line-height: 9pt;text-align: left;">FREE <i>FREEING-UP-CODE</i></p><p class="s11" style="padding-left: 159pt;text-indent: 0pt;line-height: 9pt;text-align: left;">GET <i>GET-INSTANCE-CODE</i></p><p class="s11" style="padding-left: 159pt;text-indent: 0pt;line-height: 10pt;text-align: left;">INIT <i>INITIALIZATION-CODE</i>))</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Each of the <span class="s16">xxx-CODE </span>forms is a form that will appear as if it were the body of a substitution macro definition for the corresponding macro (see the discussion on the macros below).</p><p class="s6" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">A Simple Example</p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Suppose one has several pieces of code which use a 256-character string as a scratch string. One could simply generate a new string each time, but that would be inefficient if done repeatedly. If you can guarantee that there are no re-entrant uses of the scratch string, then it could simply be stored in a global variable. However, if the code might be re-entrant on occasion, the program has to take precautions that two programs do not use the same scratch string at the same time. (This consideration becomes very important in a multi-process environment. It is hard to guarantee that two processes won’t be running the same code at the same time, without using elaborate locks.) A typical tactic would be to store the scratch string in a global variable, and set the variable to <span class="s11">NIL </span>whenever the string is in use (so that re-entrant usages would know to get a “new” instance). For example, assuming the global variable <span class="s11">TEMPSTRINGBUFFER </span>is initialized to <span class="s11">NIL</span>:</p><p class="s11" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[DEFINEQ (WITHSTRING NIL</p><p class="s11" style="padding-left: 202pt;text-indent: -59pt;line-height: 88%;text-align: left;">(PROG ((BUF (OR (PROG1 TEMPSTRINGBUFFER (SETQ TEMPSTRINGBUFFER NIL))</p><p class="s11" style="padding-left: 175pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(ALLOCSTRING 256))))</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">... use the scratch string in the variable <span class="s11">BUF </span>...</p><p class="s11" style="padding-top: 5pt;padding-left: 159pt;text-indent: -6pt;line-height: 88%;text-align: left;">(SETQ TEMPSTRINGBUFFER BUF) (RETURN]</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Here, the basic elements of a “resource” usage may be seen:</p><ol id="l18"><li><p style="padding-top: 5pt;padding-left: 90pt;text-indent: -12pt;text-align: left;">A call <span class="s11">(ALLOCSTRING 256) </span>allocates fresh instances of “buffer”</p></li><li><p style="padding-top: 7pt;padding-left: 90pt;text-indent: -12pt;line-height: 91%;text-align: left;">After usage is completed the instance is returned to the “free” state, by putting it back in the global variable <span class="s11">TEMPSTRINGBUFFER </span>where a subsequent call will find it</p></li><li><p style="padding-top: 7pt;padding-left: 90pt;text-indent: -12pt;text-align: left;">The prog-binding of <span class="s11">BUF </span>will get an existing instance of a string buffer if there is one -- otherwise it will get a new instance which will later be available for reuse</p></li><li><p style="padding-top: 6pt;padding-left: 90pt;text-indent: -12pt;line-height: 91%;text-align: left;">Some initialization is performed before usage of the resource (in this case, it is the setting of the global variable <span class="s11">TEMPSTRINGBUFFER</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 370pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Given the following resources definition:</p><p class="s11" style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PUTDEF</p><p class="s11" style="padding-left: 100pt;text-indent: 0pt;line-height: 88%;text-align: left;">’STRINGBUFFER ’RESOURCES</p><p class="s11" style="padding-left: 100pt;text-indent: 0pt;line-height: 9pt;text-align: left;">’(NEW (ALLOCSTRING 256)</p><p class="s11" style="padding-left: 111pt;text-indent: 0pt;line-height: 9pt;text-align: left;">FREE (SETQ TEMPSTRINGBUFFER (PROG1 . ARGS))</p><p class="s11" style="padding-left: 111pt;text-indent: 0pt;line-height: 9pt;text-align: left;">GET (OR (PROG1 TEMPSTRINGBUFFER</p><p class="s11" style="padding-left: 159pt;text-indent: 21pt;line-height: 88%;text-align: left;">(SETQ TEMPSTRINGBUFFER NIL)) (NEWRESOURCE TEMPSTRINGBUFFER)))</p><p class="s11" style="padding-left: 111pt;text-indent: 0pt;line-height: 9pt;text-align: left;">INIT (SETQ TEMPSTRINGBUFFER NIL)))</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">we could then redo the example above as</p><p class="s11" style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(DEFINEQ (WITHSTRING NIL</p><p class="s11" style="padding-left: 100pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PROG ((BUF (GETRESOURCE STRINGBUFFER)))</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">... use the string in the variable <span class="s11">BUF </span>...</p><p class="s11" style="padding-top: 5pt;padding-left: 116pt;text-indent: -6pt;line-height: 88%;text-align: left;">(FREERESOURCE STRINGBUFFER BUF) (RETURN]</p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The advantage of doing the coding this way is that the resource management part of <span class="s11">WITHSTRING </span>is fully contained in the expansions of <span class="s11">GETRESOURCE </span>and <span class="s11">FREERESOURCE</span>, and thus there is no confusion between what is <span class="s11">WITHSTRING </span>code and what is resource management code. This particuar advantage will be multiplied if there are other functions which need a “temporary” string buffer; and of course, the resultant modularity makes it much easier to contemplate minor variations on, as well as multiple clients of, the <span class="s11">STRINGBUFFER </span>resource.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">In fact, the scenario just shown above in the <span class="s11">WITHSTRING </span>example is so commonly useful that an abbreviation has been added; if a resources definition is made with *only* a <span class="s11">NEW </span>method, then appropriate <span class="s11">FREE</span>, <span class="s11">GET</span>, and <span class="s11">INIT </span>methods will be inferred, along with a coordinated globalvar, to be parallel to the above definition.  So the above definition could be more simply written</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PUTDEF ’STRINGBUFFER</p><p class="s11" style="padding-left: 127pt;text-indent: 0pt;line-height: 9pt;text-align: left;">’RESOURCES</p><p class="s11" style="padding-left: 127pt;text-indent: 0pt;line-height: 10pt;text-align: left;">’(NEW (ALLOCSTRING 256)))</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">and everything would work the same.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The macro <span class="s11">WITH-RESOURCES </span>simplifies the common scoping case, where at the beginning of some piece of code, there are one or more <span class="s11">GETRESOURCE </span>calls the results of which are each bound to a lambda variable; and at the ending of that code a <span class="s11">FREERESOURCE </span>call is done on each instance. Since the resources are locally bound to variables with the same name as the resource itself, the definition for <span class="s11">WITHSTRING </span>then simplifies to</p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(DEFINEQ (WITHSTRING NIL</p><p class="s11" style="padding-left: 100pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(WITH-RESOURCES (STRINGBUFFER)</p><p style="padding-top: 4pt;padding-left: 32pt;text-indent: 0pt;text-align: left;">... use the string in the variable <span class="s11">STRINGBUFFER </span>...]</p><p class="s6" style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Trade-offs in More Complicated Cases</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This simple example presumes that the various functions which use the resource are generally not re- entrant. While an occasional re-entrant use will be handled correctly (another example of the resource will simply be created), if this were to happen too often, then many of the resource requests will create and throw away new objects, which defeats one of the major purposes of using resources. A slightly more complex <span class="s11">GET </span>and <span class="s11">FREE </span>method can be of much benefit in maintaining a pool of available</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">resources; if the resource were defined to maintain a list of “free” instances, then the <span class="s11">GET </span>method could simply take one off the list and the <span class="s11">FREE </span>method could just push it back onto the list. In this simple example, the <span class="s11">SETQ </span>in the <span class="s11">FREE </span>method defined above would just become a “push”, and the first clause of the <span class="s11">GET </span>method would just be (pop <span class="s11">TEMPSTRINGBUFFER</span>)</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A word of caution: if the datatype of the resource is something very small that Medley is “good” at allocating and reclaiming, then explicit user storage management will probably not do much better than the combination of cons / createcell and the garbage collector. This would especially be so if more complicated <span class="s11">GET </span>and <span class="s11">FREE </span>methods were to be used, since their overhead would be closer to that of the built-in system facilities. Finally, it must be considered whether retaining multiple instances of the resource is a net gain; if the re-entrant case is truly rare, it may be more worthwhile to retain at most one instance, and simply let the instances created by the rarely-used case be reclaimed in the normal course of garbage collection.</p><p class="s6" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Macros for Accessing Resources</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Four user-level macros are defined for accessing resources:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:99.5003pt" cellspacing="0"><tr style="height:12pt"><td style="width:143pt"><p class="s26" style="padding-top: 1pt;padding-left: 1pt;padding-right: 7pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(<b>NEWRESOURCE </b><i>RESOURCENAME</i></p></td><td style="width:129pt"><p class="s26" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">. <i>ARGS</i>)</p></td><td style="width:117pt"><p class="s41" style="padding-right: 2pt;text-indent: 0pt;line-height: 11pt;text-align: right;">[Macro]</p></td></tr><tr style="height:11pt"><td style="width:143pt"><p class="s26" style="padding-top: 1pt;padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(<b>FREERESOURCE </b><i>RESOURCENAME</i></p></td><td style="width:129pt"><p class="s26" style="padding-top: 1pt;padding-right: 82pt;text-indent: 0pt;line-height: 9pt;text-align: right;">. <i>ARGS</i>)</p></td><td style="width:117pt"><p class="s41" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">[Macro]</p></td></tr><tr style="height:11pt"><td style="width:143pt"><p class="s26" style="padding-top: 1pt;padding-left: 1pt;padding-right: 7pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(<b>GETRESOURCE </b><i>RESOURCENAME</i></p></td><td style="width:129pt"><p class="s26" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">. <i>ARGS</i>)</p></td><td style="width:117pt"><p class="s41" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">[Macro]</p></td></tr><tr style="height:12pt"><td style="width:143pt"><p class="s26" style="padding-top: 1pt;padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(<b>INITRESOURCE </b><i>RESOURCENAME</i></p></td><td style="width:129pt"><p class="s26" style="padding-top: 1pt;padding-right: 82pt;text-indent: 0pt;line-height: 9pt;text-align: right;">. <i>ARGS</i>)</p></td><td style="width:117pt"><p class="s41" style="padding-right: 2pt;text-indent: 0pt;line-height: 11pt;text-align: right;">[Macro]</p></td></tr></table><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Each of these macros behave as if they were defined as a substitution macro of the form</p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">((<i>RESOURCENAME </i>. <i>ARGS</i>) <i>MACROBODY</i>)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">where the expression <span class="s16">MACROBODY </span>is selected by using the “code” supplied by the corresponding method from the <span class="s16">RESOURCENAME </span>definition.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Note that it is possible to pass “arguments” to your resource allocation macros. For example, if the <span class="s11">GET </span>method for the resource <span class="s11">FOO </span>is <span class="s11">(GETFOO . ARGS)</span>, then <span class="s11">(GETRESOURCE FOO X Y) </span>is transformed into <span class="s11">(GETFOO X Y)</span>. This form was used in the <span class="s11">FREE </span>method of the <span class="s11">STRINGBUFFER </span>resource described above, to pass the old <span class="s11">STRINGBUFFER </span>object to be freed.</p><p class="s16" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>WITH-RESOURCES </b><span class="s11">(</span>RESOURCE<span class="s25">1</span> RESOURCE<span class="s25">2</span> <span class="s11">...) </span>FORM<span class="s25">1</span> FORM<span class="s25">2</span> <span class="s11">...)        </span><span class="p">[Macro]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The <span class="s11">WITH-RESOURCES </span>macro binds lambda variables of the same name as the resources (for each of the resources <span class="s16">RESOURCE</span><span class="s25">1</span>, <span class="s16">RESOURCE</span><span class="s25">2</span>, etc.) to the result of the <span class="s11">GETRESOURCE </span>macro; then executes the forms <span class="s16">FORM</span><span class="s25">1</span>, <span class="s16">FORM</span><span class="s25">2</span>, etc., does a <span class="s11">FREERESOURCE </span>on each instance, and returns the value of the last form (evaluated and saved before the <span class="s11">FREERESOURCE</span>s).</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s17">Note</span><span class="p">: </span>(WITH-RESOURCES <i>RESOURCE </i>...) <span class="p">is interpreted the same as </span>(WITH- RESOURCES (<i>RESOURCE</i>) ...)<span class="p">. Also, the singular name </span>WITH-RESOURCE <span class="p">is accepted as a synonym for </span>WITH-RESOURCES<span class="p">.</span></p><p class="s6" style="padding-top: 8pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Saving Resources in a File</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Resources definitions may be saved on files using the <span class="s11">RESOURCES </span>file package command (see the Miscellaneous File Package Commands section of Chapter 17). Typically, one only needs the full definition available when compiling or interpreting the code, so it is appropriate to put the file package command in a <span class="s11">(DECLARE: EVAL@COMPILE DONTCOPY ...) </span>declaration, just as one might</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 370pt;text-indent: 0pt;text-align: left;">MISCELLANEOUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">do for a <span class="s11">RECORDS </span>declaration. But just as certain record declarations need *some* initialization in the run-time environment, so do most resources. This initialization is specified by the resource’s <span class="s11">INIT </span>method, which is executed automatically when the resource is defined by the <span class="s11">PUTDEF </span>output by the <span class="s11">RESOURCES </span>command. However, if the <span class="s11">RESOURCES </span>command is in a <span class="s11">DONTCOPY </span>expression and thus is not included in the compiled file, then it is necessary to include a separate <span class="s11">INITRESOURCES </span>command (see the Miscellaneous File Manager Commands section of Chapter 17) in the filecoms to insure that the resource is properly initialized.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 331pt;text-indent: 0pt;text-align: left;"><a name="bookmark14">13. MEDLEY EXECUTIVES</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="605" height="3" alt="image" src="Image_022.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In most Common Lisp implementations, there is a “top-level read-eval-print loop,” which reads an expression, evaluates it, and prints the results. In Medley, the Exec acts as the top-level loop, but does much more.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">The Exec traps all <span class="s11">THROWS</span>, and recovers gracefully. It prints all values resulting from evaluation, on separate lines. (When zero values are returned, nothing is printed).</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The Exec keeps track of your previous inputs, in the history list. Each entry you type creates a history event, which sotres the input and its values.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">It’s easy to use the results of earlier events, redo and event, or recall an earlier input, edit it, and run it. This makes it much easier to get your work done.</p><h4 style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Multiple Execs and the Exec’s Type                                                                                                        </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Sometimes you need more than one Exec open at a time. It’s easy to open as many as you need by using the right button background menu and selecting the kind of Exec you need. The Execs are differentiated from one another by their &quot;names&quot; in their title bars and by their prompts. For example, the second Exec you open may have a prompt like <span class="s11">2/50&gt; </span>if it’s the second Common Lisp Exec you’ve opened. Events in each Exec are placed on the global history list with their Exec number so the system can tell them apart.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Several variables are very important to an Exec since they control the format of reading and printing. Together these variables describe a type of exec, or its mode. Some standard bindings for the variables have been named to make mode setting easy. The names provide you with an Exec of the Common Lisp (<span class="s11">LISP</span>), Interlisp or Old Interlisp (<span class="s11">IL</span>), or Medley (<span class="s11">XCL</span>) type. An Exec’s type is displayed in the title bar of its window:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 164pt;text-indent: 0pt;text-align: left;"><span><img width="186" height="82" alt="image" src="Image_023.gif"/></span></p><h4 style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">A Brief Example of Exec Interactions                                                                                                     </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The following dialogue contains examples and gives the flavor of the use of an Exec. The commands are described in greater detail in the following sections. For now, be sure to type these examples to an Exec whose <span class="s11">*PACKAGE* </span>is set to the <span class="s11">XCL-USER </span>package. The Exec that Medley starts up with is set to the <span class="s11">XCL-USER </span>package. Each prompt consists of an Exec number, an event number and a prompt character (“&gt;” for Common Lisp and “<span class="s19"></span>” for Interlisp).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 213pt;text-indent: 0pt;text-align: left;"><span><img width="184" height="117" alt="image" src="Image_024.gif"/></span></p><p style="padding-top: 3pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">You have instructed the Exec to UNDO the previous event.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 213pt;text-indent: 0pt;text-align: left;"><span><img width="184" height="117" alt="image" src="Image_025.gif"/></span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The Exec accepts input both in <span class="s11">APPLY </span>format (the <span class="s11">SET</span>) and <span class="s11">EVAL </span>format (the <span class="s11">SETQ</span>). In event 1196, you added a property <span class="s11">MYPROP </span>to the symbols <span class="s11">A</span>, <span class="s11">B</span>, and <span class="s11">C</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 213pt;text-indent: 0pt;text-align: left;"><span><img width="184" height="117" alt="image" src="Image_026.gif"/></span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">You told the Exec to go back to event 1196, substitute <span class="s11">LST2 </span>for <span class="s11">LST1</span>, and then re-execute the expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 212pt;text-indent: 0pt;text-align: left;"><span><img width="186" height="82" alt="image" src="Image_027.gif"/></span></p><p style="padding-top: 3pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If <span class="s11">STRING </span>were computationally expensive (it isn’t), you might be caching its value for later use.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 212pt;text-indent: 0pt;text-align: left;"><span><img width="186" height="82" alt="image" src="Image_028.gif"/></span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">You now decide you would like to redo the <span class="s11">SETF </span>with a different value. You can specify the event using any symbol in the expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 348pt;text-indent: 0pt;text-align: left;">MEDLEY EXECUTIVES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 165pt;text-indent: 0pt;text-align: left;"><span><img width="185" height="97" alt="image" src="Image_029.gif"/></span></p><p style="padding-top: 4pt;padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Here you ask the Exec (using the <span class="s11">?? </span>command) what it has on its history list for the last input. Since the event corresponds to a command, the Exec displays both the original command and the generated input.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You’ll usually deal with the Exec at top level or in the debugger, where you type in expressions for evaluation, and see the values printed out. An Exec acts much like a standard Lisp top-level loop, but before it evaluates an input, it first adds it to the history list. If the operation is aborted or causes an error, the input is still available for you to modify or re-execute.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">After updating the history list, the Exec executes the computation (i.e., evaluates the form or applies the function to its arguments), saves the value in the history-list entry for that input, and prints the result.  Finally the Exec displays a prompt to show it’s again ready for input.</p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Input Formats                                                                                                                                            </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The Exec accepts three forms of input: an expression to be evaluated (<span class="s11">EVAL</span>-format), a function-name and arguments to apply it to (<span class="s11">APPLY</span>-format), and Exec commands, as follows:</p><p class="s11" style="padding-top: 7pt;padding-left: 108pt;text-indent: -81pt;line-height: 93%;text-align: justify;">EVAL<span class="p">-format input If you type a single expression, either followed by a carriage-return, or, in the case of a list, terminated with balanced parenthesis, the expression is evaluated and the value is returned. For example, if the value of </span>FOO <span class="p">is the list </span>(A B C)<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 221pt;text-indent: 0pt;text-align: left;"><span><img width="139" height="52" alt="image" src="Image_030.gif"/></span></p><p style="padding-top: 4pt;padding-left: 108pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Similarly, if you type a Lisp expression, beginning with a left parenthesis and terminated by a matching right parenthesis, the form is simply passed to <span class="s11">EVAL </span>for evaluation. Notice that it is not necessary to type a carriage return at the end of such a form; the reader will supply one automatically. If a carriage-return is typed before the final matching right parenthesis or bracket, it is treated the same as a space, and input continues.  The following examples are interpreted identically:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 222pt;text-indent: 0pt;text-align: left;"><span><img width="136" height="74" alt="image" src="Image_031.gif"/></span></p><p class="s11" style="padding-top: 4pt;padding-left: 108pt;text-indent: -89pt;line-height: 94%;text-align: justify;">APPLY<span class="p">-format input Often, you call functions with constant argument values, which would have to be quoted if you typed them in </span>EVAL<span class="p">-format. For convenience, if you type a symbol immediately followed by a list, the symbol is </span>APPLY<span class="p">ed to the elements within the list, unevaluated. The input is terminated by the matching right parenthesis. For example, typing </span>LOAD(FOO) <span class="p">is equivalent to typing </span>(LOAD ’FOO)<span class="p">, and </span>GET(X</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 156pt;text-indent: 0pt;text-align: justify;">COLOR) <span class="p">is equivalent to </span>(GET ’X ’COLOR)<span class="p">. As a simple special case, a single right parenthesis is treated as a balanced set of parentheses, e.g. </span>UNBREAK) <span class="p">is equivalent to </span>UNBREAK()</p><p style="padding-top: 7pt;padding-left: 156pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The reader will only supply the “carriage return” automatically if no space appears between the initial symbol and the list that follows; if there is a space after the initial symbol on the line and the list that follows, the input is not terminated until you type a carriage return.</p><p style="padding-top: 6pt;padding-left: 156pt;text-indent: 0pt;line-height: 91%;text-align: left;">The Exec will not consider unparenthesized input with more than one argument to be in apply format, e.g.:</p><p class="s11" style="padding-top: 3pt;padding-left: 156pt;text-indent: 0pt;text-align: left;">LIST(1) <span class="p">is apply format (executes after closing parenthesis is typed)</span></p><p class="s11" style="padding-top: 3pt;padding-left: 198pt;text-indent: -42pt;text-align: left;">LIST (1) <span class="p">is apply format (second argument is a list, no trailing arguments given)</span></p><p class="s11" style="padding-top: 3pt;padding-left: 156pt;text-indent: 0pt;line-height: 128%;text-align: left;">LIST ’(1) 2 3 <span class="p">is NOT apply format, arguments are evaluated </span>LIST 1 2 3 <span class="p">is NOT apply format, arguments are evaluated </span>LIST 1<span class="p">not legal input: second argument is not a list</span></p><p style="padding-top: 3pt;padding-left: 156pt;text-indent: 0pt;text-align: left;">Note that <span class="s11">APPLY</span>-format input cannot be used for macros or special forms.</p><p style="padding-top: 7pt;padding-left: 156pt;text-indent: -72pt;line-height: 91%;text-align: justify;">Exec commands The Exec recognizes a number of commands, which usually refer to past events on the history list. These commands are treated specially; for example, they may not be put on the history list. The format of a command is always a line beginning with the command name. (The Exec looks up the command name independent of package.) The remainder of the line, if any, is treated as “arguments” to the command. For example,</p><p class="s11" style="padding-top: 4pt;padding-left: 156pt;text-indent: 0pt;line-height: 10pt;text-align: left;">128&gt; UNDO</p><p class="s11" style="padding-left: 156pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mapc undone</p><p class="s11" style="padding-top: 2pt;padding-left: 156pt;text-indent: 0pt;line-height: 10pt;text-align: left;">129&gt; UNDO (FOO --)</p><p class="s11" style="padding-left: 156pt;text-indent: 0pt;line-height: 10pt;text-align: left;">foo undone</p><p style="padding-top: 4pt;padding-left: 156pt;text-indent: 0pt;text-align: left;">are both valid command inputs.</p><h4 style="padding-top: 10pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">Event Specification                                                                                                                                   </h4><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Exec commands, like <span class="s11">UNDO</span>, frequently refer to previous events in the session’s history. All Exec commands use the same conventions and syntax for indicating which event(s) the command refers to. This section shows you the syntax used to specify previous events.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">An event address identifies one event on the history list. For example, the event address 42 refers to the event with event number 42, and -2 refers to two events back in the current Exec. Usually, an event address will contain only one or two commands.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Event addresses can be concatenated. For example, if <span class="s11">FOO </span>refers to event <span class="s11">N</span>, <span class="s11">FOO FIE </span>will refer to the first event before event <span class="s11">N </span>which contains <span class="s11">FIE</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The symbols used in event addresses (such as <span class="s11">AND</span>, <span class="s11">F</span>, etc.) are compared with <span class="s11">STRING-EQUAL</span>, so that it does not matter what the current package is when you type an event address symbol to an Exec.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 348pt;text-indent: 0pt;text-align: left;">MEDLEY EXECUTIVES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;"><span class="p">Specifications used below of the form </span>EventAddress <span class="p">refer to event addresses, as described above. Since an event address may contain multiple words, the event address is parsed by searching for the words which delimit it. For example, in </span>EventAddress<span class="s25">1</span> <span class="s11">AND </span>EventAddress<span class="s25">2</span><span class="p">, the notation </span>EventAddress<span class="s25">1</span> <span class="p">corresponds to all words up to the </span><span class="s11">AND </span><span class="p">in the event specification, and </span>EventAddress<span class="s25">2</span> <span class="p">to all words after the </span><span class="s11">AND </span><span class="p">in the event specification.</span></p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Event addresses are interpreted as follows:</p><p class="s11" style="padding-top: 6pt;padding-left: 107pt;text-indent: -59pt;text-align: justify;">N <span class="p">(an integer) If </span>N <span class="p">is positive, it refers to the event with event number </span>N <span class="p">(no matter which Exec the event occurred in.) If </span>N <span class="p">is negative, it always refers to the event </span>-N <span class="p">events backwards, counting only events belonging to the current Exec.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 107pt;text-indent: -11pt;text-align: left;">F <span class="p">Specifies that the next object in the event address is to be searched for, regardless of what it is. For example, </span>F -2 <span class="p">looks for an event containing </span>-2<span class="p">.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">FROM <i>EventAddress</i></p><p style="padding-top: 3pt;padding-left: 108pt;text-indent: 0pt;text-align: justify;">All events since <span class="s16">EventAddress</span>, inclusive. For example, if there is a single Exec and the current event is number 53, then <span class="s11">FROM 49 </span>specifies events 49, 50, 51, and</p><ol id="l19"><li><p style="padding-left: 126pt;text-indent: -18pt;line-height: 12pt;text-align: left;"><span class="s11">FROM </span>includes events from <i>all </i>Execs.</p><p class="s11" style="padding-top: 8pt;padding-left: 32pt;text-indent: 0pt;text-align: justify;">ALL <i>EventAddress</i></p><p style="padding-top: 3pt;padding-left: 107pt;text-indent: 0pt;text-align: justify;">Specifies all events satisfying <span class="s16">EventAddress</span>. For example, <span class="s11">ALL LOAD, ALL SUCHTHAT FOO-P</span>.</p><p style="padding-top: 7pt;padding-left: 107pt;text-indent: -31pt;line-height: 91%;text-align: left;">empty If nothing is specified, it is the same as specifying -1, i.e., the last event in the current Exec.</p><p class="s16" style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">EventSpec<span class="s25">1</span> <span class="s11">AND </span>EventSpec<span class="s25">2</span> <span class="s11">AND </span><span class="p">. . . </span><span class="s11">AND </span>EventSpec<span class="s25">N</span></p><p style="padding-top: 5pt;padding-left: 108pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Each of the is an event specification. The lists of events are concatenated. For example, <span class="s11">REDO ALL MAPC AND ALL STRING AND 32 </span>redoes all events containing <span class="s11">MAPC</span>, all containing <span class="s11">STRING</span>, and also event 32. Duplicate events are removed.</p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Exec Commands                                                                                                                                       </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You enter an Exec commands by typing the name of the command at the prompt. The name of an Exec command is not a symbol and therefore is not sensitive to the setting of the current package (the value of <span class="s11">*PACKAGE*</span>).</p><p style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;"><span class="s16">EventSpec </span>is used to denote an event specification which in most cases will be either a specific event address (e.g., <span class="s11">42</span>) or a relative one (e.g., <span class="s11">-3</span>). Unless specified otherwise, omitting <span class="s16">EventSpec </span>is the same as specifying <span class="s16">EventSpec </span><span class="s11">= -1</span>. For example, <span class="s11">REDO </span>and <span class="s11">REDO -1 </span>are the same.</p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">REDO <i>EventSpec </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Redoes the event or events specified by <span class="s16">EventSpec</span>. For example, <span class="s11">REDO 123 </span>redoes the event numbered 123.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">RETRY <i>EventSpec                                            </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Like <span class="s11">REDO </span>but sets the debugger parameters so that any errors that occur while executing</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">EventSpec <span class="p">will cause breaks.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">USE <i>NEW </i><span class="s11">[</span>FOR <i>OLD </i><span class="s11">] [</span>IN <i>EventSpec </i><span class="s11">] </span><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Substitutes <span class="s16">NEW </span>for <span class="s16">OLD </span>in the events specified by <span class="s16">EventSpec</span>, and redoes the result<span class="s16">. NEW </span>and <span class="s16">OLD </span>can include lists or symbols, etc.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For example, <span class="s11">USE SIN (- X) FOR COS X IN -2 AND -1 </span>will substitute <span class="s11">SIN </span>for every occurrence of <span class="s11">COS </span>in the previous two events, and substitute <span class="s11">(- X) </span>for every occurrence of <span class="s11">X</span>, and reexecute them. (The substitutions do not change the previous information saved about these events on the history list.)</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">IN </span><span class="s16">EventSpec </span>is omitted, the first member of <span class="s16">OLD </span>is used to search for the appropriate event. For example, <span class="s11">USE DEFAULTFONT FOR DEFLATFONT </span>is equivalent to <span class="s11">USE DEFAULTFONT FOR DEFLATFONT IN F DEFLATFONT</span>. The <span class="s11">F </span>is inserted to handle the case where the first member of <span class="s16">OLD </span>could be interpreted as an event address command.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">If <span class="s16">OLD </span>is omitted, substitution is for the “operator” in that command. For example</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FBOUNDP(FF) <span class="p">followed by </span>USE CALLS <span class="p">is equivalent to </span>USE CALLS FOR FBOUNDP IN</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">-1<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">OLD </span>is not found, <span class="s11">USE </span>will print a question mark, several spaces and the pattern that was not found. For example, if you specified <span class="s11">USE Y FOR X IN 104 </span>and <span class="s11">X </span>was not found, <span class="s11">“X ?</span>” is printed to the Exec.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">You can also specify more than one substitution simultaneously as follows:</p><p class="s16" style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><b>USE </b>NEW<span class="s25">1</span> <b>FOR </b>OLD<span class="s25">1</span> <b>AND </b><span class="s11">... </span><b>AND </b>NEW<span class="s25">N</span> <b>FOR </b>OLD<span class="s25">N</span> <span class="s11">[</span><b>IN </b>EventSpec<span class="s11">] </span><span class="p">[Exec command]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">[The <span class="s11">USE </span>command is parsed by a small finite state parser to distinguish the expressions and arguments. For example, <span class="s11">USE FOR FOR AND AND AND FOR FOR </span>will be parsed correctly.]</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Every <span class="s11">USE </span>command involves three pieces of information: the expressions to be substituted, the arguments to be substituted for, and an event specification that defines the input expression in which the substitution takes place. If the <span class="s11">USE </span>command has the same number of expressions as arguments, the substitution procedure is straightforward. For example, <span class="s11">USE X Y FOR U V </span>means substitute <span class="s11">X </span>for <span class="s11">U </span>and <span class="s11">Y </span>for <span class="s11">V</span>, and is equivalent to <span class="s11">USE X FOR U AND Y FOR V</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">However, the <span class="s11">USE </span>command also permits distributive substitutions for substituting several expressions for the same argument. For example, <span class="s11">USE A B C FOR X </span>means first substitute <span class="s11">A </span>for <span class="s11">X </span>then substitute <span class="s11">B </span>for <span class="s11">X </span>(in a new copy of the expression), then substitute <span class="s11">C </span>for <span class="s11">X</span>.  The effect is the same as three separate <span class="s11">USE </span>commands.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Similarly, <span class="s11">USE A B C FOR D AND X Y Z FOR W </span>is equivalent to <span class="s11">USE A FOR D AND X FOR W</span>, followed by <span class="s11">USE B FOR D AND Y FOR W</span>, followed by <span class="s11">USE C FOR D AND Z FOR W</span>. <span class="s11">USE A B C FOR D AND X FOR Y </span>also corresponds to three substitutions, the first with <span class="s11">A </span>for <span class="s11">D </span>and <span class="s11">X </span>for <span class="s11">Y</span>, the second with <span class="s11">B </span>for <span class="s11">D</span>, and <span class="s11">X </span>for <span class="s11">Y</span>, and the third with <span class="s11">C</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 348pt;text-indent: 0pt;text-align: left;">MEDLEY EXECUTIVES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">for <span class="s11">D</span>, and again <span class="s11">X </span>for <span class="s11">Y</span>. However, <span class="s11">USE A B C FOR D AND X Y FOR Z </span>is ambiguous and will cause an error.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Essentially, the <span class="s11">USE </span>command operates by proceeding from left to right handling each <span class="s11">AND </span>separately. Whenever the number of expressions exceeds the available expressions, multiple <span class="s11">USE </span>expressions are generated. Thus <span class="s11">USE A B C D FOR E F </span>means substitute <span class="s11">A </span>for <span class="s11">E </span>at the same time substituting <span class="s11">B </span>for <span class="s11">F</span>, then in another copy of the indicated expression, substitute <span class="s11">C </span>for <span class="s11">E </span>and <span class="s11">D </span>for <span class="s11">F</span>. This is also equivalent to <span class="s11">USE A C FOR E AND B D FOR F</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The <span class="s11">USE </span>command correctly handles the situation where one of the old expressions is the same as one of the new ones, <span class="s11">USE X Y FOR Y X</span>, or <span class="s11">USE X FOR Y AND Y FOR X</span>.</p><p class="s15" style="padding-top: 6pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">? <i>NAME </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NAME </span>is not provided describes all available Exec commands by printing the name, argument list, and description of each. With <span class="s16">NAME</span>, only that command is described.</p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">?? <i>EventSpec </i><span class="p">[Exec command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Prints the most recent event matching the given <span class="s16">EventSpec</span>. Without <span class="s16">EventSpec</span>, lists all entries on the history list from all execs, not necessarily in the order in which they occured (since the list is in allocation order). If you haven’t completed typing a command it will be listed as &quot;&lt;in progress&gt;&quot; .</p><p class="s17" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note<span class="p">: Event nubmers are allocated at the time the prompt is printed, except in the Old Interlisp exec where they are assigned at the end of type-in. This means that if activity occurs in another exec, the number printed next to the command is not necessarily the number associated with the event.</span></p><p class="s15" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">CONN <i>DIRECTORY </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Changes default pathname to <span class="s16">DIRECTORY</span>.</p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">DA <span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns current date and time.</p><p class="s15" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DIR <i>PATHNAME KEYWORDS </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Shows a directory listing for <span class="s16">PATHNAME </span>or the connected directory. If provided, <span class="s16">KEYWORDS </span>indicate information to be displayed for each file. Some keywords are: <span class="s16">AUTHOR</span>, <span class="s16">AU</span>, <span class="s16">CREATIONDATE</span>, <span class="s16">DA</span>, etc.</p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DO-EVENTS <i>INPUTS ENV </i><span class="p">[Exec command]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">DO-EVENTS <span class="p">is intended as a way of putting together several different events, which can include commands. It executes the multiple </span>INPUTS <span class="p">as a single event. The values returned by the </span>DO-EVENTS <span class="p">event are the concatenation of the values of the inputs. An input is not an EventSpec, but a call to a function or command. If </span>ENV <span class="p">is provided it is a lexical environment in which all evaluations (functions and commands) will take place. Event specification in the </span>INPUTS <span class="p">should be explicit, not relative, since referring to the last event will reinvoke the executing </span>DO-EVENTS <span class="p">command.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 102pt;text-indent: 0pt;text-align: justify;">FIX <i>EventSpec </i><span class="p">[Exec command]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Edits the specified event prior to re-executing it. If the number of characters in the fixed line is less than the variable <span class="s11">TTYINFIXLIMIT </span>then it will be edited using <span class="s11">TTYIN</span>, otherwise the Lisp editor is called via <span class="s11">EDITE</span>.</p><p class="s15" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">FORGET <i>EventSpec </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Erases <span class="s11">UNDO </span>information for the specified events.</p><p class="s15" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">NAME <i>COMMAND-NAME ARGUMENTS EVENT-SPEC </i><span class="s21">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Defines a new command, <span class="s16">COMMAND-NAME</span>, and its <span class="s16">ARGUMENTS</span>, containing the events in</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">EVENT-SPEC<span class="p">.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">NDIR <i>PATHNAME KEYWORDS </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Shows a directory listing for <span class="s16">PATHNAME </span>or the connected directory in abbreviated format. If provided, <span class="s16">KEYWORDS </span>indicate information to be displayed for each file. Some keywords are: <span class="s11">AUTHOR</span>, <span class="s11">AU</span>, <span class="s11">CREATIONDATE</span>, <span class="s11">DA</span>, etc.</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">PL <i>SYMBOL                                                  </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Prints the property list of <span class="s16">SYMBOL </span>in an easy to read format.</p><p class="s15" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">REMEMBER <i>&amp;REST EVENT-SPEC </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Tells File Manager to remember type-in from specified event(s), <span class="s16">EVENT-SPEC</span>, as expressions to save.</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">SHH <i>LINE                                                   </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Executes <span class="s16">LINE </span>without history list processing.</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">UNDO <i>EventSpec                                             </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Undoes the side effects of the specified event (see below under “Undoing”).</p><p class="s15" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">PP <i>NAME TYPES                                              </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Shows (prettyprinted) the definitions for <span class="s16">NAME </span>specified by <span class="s16">TYPES</span>.</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">SEE <i>FILES                                                  </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Prints the contents of <span class="s16">FILES </span>in the Exec window, hiding comments.</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">SEE* <i>FILES                                                 </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Prints the contents of <span class="s16">FILES </span>in the Exec window, showing comments.</p><p class="s15" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">TIME <i>FORM &amp;KEY REPEAT &amp;ENVIRONMENT ENV </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Times the evaluation of <span class="s16">FORM </span>in the lexical environment <span class="s16">ENV</span>, repeating <span class="s16">REPEAT </span>number of times. Information is displayed in the Exec window.</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TY <i>FILES                                                   </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Exactly like the <span class="s16">TYPE </span>Exec command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 348pt;text-indent: 0pt;text-align: left;">MEDLEY EXECUTIVES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">TYPE <i>FILES </i><span class="p">[Exec command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Prints the contents of <span class="s16">FILES </span>in the Exec window, hiding comments.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Variables                                                                                                                                                    </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">A number of variables are provided for convenience in the Exec.</p><p class="s15" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">IL:IT <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Whenever an event is completed, the global value of the variable <span class="s11">IT </span>is reset to the event’s value. For example,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 207pt;text-indent: 0pt;text-align: left;"><span><img width="136" height="74" alt="image" src="Image_032.gif"/></span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Following a <span class="s11">?? </span>command, <span class="s11">IL:IT </span>is set to the value of the last event printed. The inspector has an option for setting the variable <span class="s11">IL:IT </span>to the current selection or inspected object, as well. The variable <span class="s11">IL:IT </span>is global, and is shared among all Execs. <span class="s11">IL:IT </span>is a convenient mechanism for passing values from one process to another.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><b>Note</b>: <span class="s11">IT </span>is in the Interlisp package and these examples are intended for an Exec whose</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">*PACKAGE* <span class="p">is set to </span>XCL-USER<span class="p">. Thus, </span>IT <span class="p">must be package qualified (the </span>IL:<span class="p">).</span></p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The following variables are maintained independently by each Exec. (When a new Exec is started, the initial values are <span class="s11">NIL</span>, or, for a nested Exec, the value for the “parent” Exec. However, events executed under a nested Exec will not affect the parent values.)</p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">CL:- <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">CL:+ <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">CL:++ <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">CL:+++ <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">While a form is being evaluated by the Exec, the variable <span class="s11">CL:- </span>is bound to the form, <span class="s11">CL:+ </span>is bound to the previous form, <span class="s11">CL:++ </span>the one before, etc. If the input is in apply-format rather than eval-format, the value of the respective variable is just the function name.</p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">CL:* <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">CL:** <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">CL:*** <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">While a form is being evaluated by the Exec, the variable <span class="s11">CL:* </span>is bound to the (first) value returned by the last event, <span class="s11">CL:** </span>to the event before that, etc. The variable <span class="s11">CL:* </span>differs from <span class="s11">IT </span>in that <span class="s11">IT </span>is global while each separate Exec maintains its own copy of <span class="s11">CL:*</span>, <span class="s11">CL:** </span>and <span class="s11">CL:***</span>. In addition, the history commands change <span class="s11">IT</span>, but only inputs that are retained on the history list can change <span class="s11">CL:*</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">CL:/                                                           <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">CL://                                                          <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">CL:///                                                         <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">While a form is being evaluated by an Exec, the variable <span class="s11">CL:/ </span>is bound to a list of the results of the last event in that Exec, <span class="s11">CL:// </span>to the values of the event before that, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Fonts in the Exec                                                                                                                                      </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">The Exec can use different fonts for displaying the prompt, user’s input, intermediate printout, and the values returned by evaluation. The following variables control the Exec’s font use:</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">PROMPTFONT                                                     <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Font used for printing the event prompt.</p><p class="s15" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">INPUTFONT                                                      <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Font used for echoing your type-in.</p><p class="s15" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">PRINTOUTFONT                                                   <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Font used for any intermediate printing caused by execution of a command or evaluation of a form. Initially the same as <span class="s11">DEFAULTFONT</span>.</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">VALUEFONT                                                      <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Font used to print the values returned by evaluation of a form. Initially the same as</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DEFAULTFONT<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Modifying an Exec                                                                                                                                     </h4><p class="s11" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>CHANGESLICE </b><i>N HISTORY </i>—)                                      <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Changes the maximum number of events saved on the history list <span class="s16">HISTORY </span>to <span class="s16">N</span>. If <span class="s11">NIL</span>,</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">HISTORY </span>defaults to the top level history <span class="s11">LISPXHISTORY</span>.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The effect of <i>increasing </i>the time-slice is gradual: the history list is simply allowed to grow to the corresponding length before any events are forgotten. <i>Decreasing </i>the time-slice will immediately remove a sufficient number of the older events to bring the history list down to the proper size. However, <span class="s11">CHANGESLICE </span>is undoable, so that these events are (temporarily) recoverable. Therefore, if you want to recover the storage associated with these events without waiting <span class="s16">N </span>more events until the <span class="s11">CHANGESLICE </span>event drops off the history list, you must perform a <span class="s11">FORGET </span>command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Defining New Commands                                                                                                                         </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">You can define new Exec commands using the <span class="s11">XCL:DEFCOMMAND </span>macro.</p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>XCL:DEFCOMMAND </b><i>NAME ARGUMENT-LIST &amp;REST BODY</i>)                   <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">XCL:DEFCOMMAND </span>is like <span class="s11">XCL:DEFMACRO</span>, but defines new Exec commands. The <span class="s16">ARGUMENT-LIST </span>can have keywords, and use all of the features of macro argument lists. When <span class="s16">NAME </span>is subsequently typed to the Exec, the rest of the line is processed like the arguments to a macro, and the <span class="s16">BODY </span>is executed<span class="s11">. XCL:DEFCOMMAND </span>is a definer; the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 348pt;text-indent: 0pt;text-align: left;">MEDLEY EXECUTIVES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">File Manager will remember typed-in definitions and allow them to be saved, edited with</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">EDITDEF<span class="p">, etc.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">There are three kinds of commands that can be defined, <span class="s11">:EVAL</span>, <span class="s11">:QUIET</span>, and <span class="s11">:INPUT</span>. Commands can also be marked as only for the debugger, in which case they are labelled as <span class="s11">:DEBUGGER</span>. The command type is noted by supplying a list for the <span class="s16">NAME </span>argument to <span class="s11">XCL:DEFCOMMAND</span>, where the first element of the list is the command name, and the other elements are keyword(s) for the command type and, optionally <span class="s11">:DEBUGGER</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The documentation string in user defined Exec commands is automatically added to the documentation descriptions by the <span class="s11">CL:DOCUMENTATION </span>function under the <span class="s11">COMMANDS </span>type and can be shown using the <span class="s11">? </span>Exec command.</p><p class="s11" style="padding-top: 7pt;padding-left: 132pt;text-indent: -33pt;text-align: justify;">:EVAL <span class="p">This is the default. The body of the command just gets executed, and its value is the value of the event.  For example (in an XCL Exec),</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 156pt;text-indent: 0pt;text-align: left;"><span><img width="274" height="119" alt="image" src="Image_033.gif"/></span></p><p style="padding-top: 4pt;padding-left: 132pt;text-indent: 0pt;text-align: justify;">would define the <span class="s11">LS </span>command to print out all file names that match the input <span class="s11">NAMESTRING</span>. The <span class="s11">(VALUES) </span>means that no value will be printed by the event, only the intermediate output from the <span class="s11">FORMAT</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 132pt;text-indent: -38pt;text-align: justify;">:QUIET <span class="p">These commands are evaluated, but neither your input nor the results of the command are stored on the history list. For example, the </span>?? <span class="p">and </span>SHH <span class="p">commands are quiet.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 132pt;text-indent: -38pt;text-align: justify;">:INPUT <span class="p">These commands work more like macros, in that the result of evaluating the command is treated as a new line of input. The </span>FIX <span class="p">command is an input command. The result is treated as a line; a single expression in </span>EVAL<span class="p">-format should be returned as a list of the expression to </span>EVAL<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Undoing                                                                                                                                                      </h4><p class="s17" style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Note<span class="p">: This discussion only applies to undoing under the Exec or Debugger, and within the </span><span class="s11">UNDOABLY</span></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">macro; text and structure editors handle undoing differently.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s11">UNDO </span>facility allows recording of destructive changes such that they can be played back to restore a previous state. There are two kinds of <span class="s11">UNDO</span>ing: one is done by the Exec, the other is available for use in your code. Both methods share information about what kind of operations can be undone and where the changes are recorded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Undoing in the Exec                                                                                                                                  </h4><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">UNDO <i>EventSpec                                             </i><span class="p">[Exec command]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The Exec’s <span class="s11">UNDO </span>command is implemented by watching the evaluation of forms and requiring undoable operations in that evaluation to save enough information on the history list to reverse their side effects. The Exec simply executes operations, and any undoable changes that occur are automatically saved on the history list by the responsible functions. The <span class="s11">UNDO </span>command works on itself the same way: it recovers the saved information and performs the corresponding inverses. Thus, <span class="s11">UNDO </span>is effective on itself, so that you can <span class="s11">UNDO </span>an <span class="s11">UNDO</span>, and <span class="s11">UNDO </span>that, etc.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Only when you attempt to undo an operation does the Exec check to see whether any information has been saved. If none has been saved, and you have specifically named the event you want undone, the Exec types <span class="s11">nothing saved</span>. (When you just type <span class="s11">UNDO</span>, the Exec only tries to undo the last operation.)</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">UNDO <span class="p">watches evaluation using </span>CL:EVALHOOK <span class="p">(thus, calling </span>CL:EVALHOOK <span class="p">cannot be undone). Each form given to </span>EVAL <span class="p">is examined against the list </span>LISPXFNS <span class="p">to see if it has a corresponding undoable version. If an undoable version of a call is found, it is called with the same arguments instead of the original. Therefore, before evaluating all subforms of your input, the Exec substitutes the corresponding undoable call for any destructive operation. For example, if you type </span>(DEFUN FOO ...)<span class="p">, undoable versions of the forms that set the definition into the symbol function cell are evaluated. </span>FOO<span class="p">’s function definition itself is not made undoable.</span></p><h4 style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Undoing in Programs                                                                                                                                </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">There are two ways to make a program undoable. The simplest method is to wrap the program’s form in the <span class="s11">UNDOABLY </span>macro. The other is to call undoable versions of destructive operations directly.</p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>XCL:UNDOABLY </b><i>&amp;REST FORMS</i>)                                       <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Executes the forms in <span class="s16">FORMS </span>using undoable versions of all destructive operations. This is done by “walking” (see <span class="s11">WALKFORM</span>) all of the <span class="s16">FORMS </span>and rewriting them to use the undoable versions of destructive operations (<span class="s11">LISPXFNS </span>makes the association).</p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>STOP-UNDOABLY </b><i>&amp;REST FORMS</i>)                                      <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Normally executes as <span class="s11">PROGN</span>; however, within an <span class="s11">UNDOABLY </span>form, explicitly causes <span class="s16">FORMS </span>not to be done undoably. Turns off rewriting of the <span class="s16">FORMS </span>to be undoable inside an <span class="s11">UNDOABLY </span>macro.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Undoable Versions of Common Functions                                                                                            </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When efficiencyis a serious concern, you may need more control over the saving of undo information than that provided by the <span class="s11">UNDOABLY </span>macro.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">To make a function undoable, you can simply substitute the corresponding undoable function in your program. When the undoable function is called, it will save the undo information in the current event on the history list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 348pt;text-indent: 0pt;text-align: left;">MEDLEY EXECUTIVES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Various operations, most notably <span class="s11">SETF</span>, have undoable versions. The following undoable macros are initially available:</p><p class="s11" style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">UNDOABLY-POP UNDOABLY-SET-SYMBOL</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">UNDOABLY-PUSH UNDOABLY-MAKUNBOUND</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">UNDOABLY-PUSHNEW UNDOABLY-FMAKUNBOUND</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">UNDOABLY-REMF UNDOABLY-SETQ</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">UNDOABLY-ROTATEF XCL:UNDOABLY-SETF</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">UNDOABLY-SHIFTF UNDOABLY-PSETF</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">UNDOABLY-DECF UNDOABLY-SETF-SYMBOL-FUNCTION</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">UNDOABLY-INCF UNDOABLY-SETF-MACRO-FUNCTION</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: Many destructive Common Lisp functions do not have undoable versions, e.g., <span class="s11">CL:NREVERSE</span>, <span class="s11">CL:SORT</span>, etc. You can see the current list of undoable functions on the association list <span class="s11">LISPXFNS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Modifying the UNDO Facility                                                                                                                    </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">You may want to extend the <span class="s11">UNDO </span>facility after creating a form whose side effects might be undoable, for instance a file renaming function.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You need to write an undoable version of the function. You can do this by explicitly saving previous state information, or by renaming calls in the function to their undoable equivalent. Undo information should be saved on the history list using <span class="s11">IL:UNDOSAVE</span>.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">You must then hook the undoable version of the function into the undo facility. You do this by either using the <span class="s11">IL:LISPXFNS </span>association list, or in the case of a <span class="s11">SETF </span>modifier, on the <span class="s11">IL:UNDOABLE- SETF-INVERSE </span>property of the <span class="s11">SETF </span>function.</p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">LISPXFNS <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Contains an association list that maps from destructive operations to their undoable form. Initially this list contains:</p><p class="s11" style="padding-top: 3pt;padding-left: 108pt;text-indent: -6pt;line-height: 88%;text-align: left;">((CL:POP . UNDOABLY-POP) (CL:PSETF . NDOABLY-PSETF) (CL:PUSH . UNDOABLY-PUSH) (CL:PUSHNEW . UNDOABLY-PUSHNEW) ((CL:REMF) . UNDOABLY-REMF) (CL:ROTATEF . UNDOABLY-ROTATEF) (CL:SHIFTF . UNDOABLY-SHIFTF) (CL:DECF . UNDOABLY-DECF) (CL:INCF . UNDOABLY-INCF) (CL:SET . UNDOABLY-SET-SYMBOL)</p><p class="s11" style="padding-left: 108pt;text-indent: 0pt;line-height: 88%;text-align: left;">(CL:MAKUNBOUND . UNDOABLY-MAKUNBOUND) (CL:FMAKUNBOUND . UNDOABLY-FMAKUNBOUND)</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 10pt;text-align: left;">. . . plus the original Interlisp undo associations)</p><p class="s11" style="padding-top: 3pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>XCL:UNDOABLY-SETF </b><i>PLACE VALUE </i>...) <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">CL:SETF </span>but saves information so it may be undone. <span class="s11">UNDOABLY-SETF </span>uses undoable versions of the <span class="s11">SETF </span>function located on the <span class="s11">UNDOABLE-SETF-INVERSE </span>property of the function being <span class="s11">SETF</span>ed. Initially these <span class="s11">SETF </span>names have such a property:</p><p class="s11" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;line-height: 88%;text-align: left;">CL:SYMBOL-FUNCTION - UNDOABLY-SETF-SYMBOL-FUNCTION CL:MACRO-FUNCTION - UNDOABLY-SETF-MACRO-FUNCTION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>UNDOABLY-SETQ </b><i>&amp;REST FORMS</i>)                                    <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Typed-in <span class="s11">SETQ</span>s (and <span class="s11">SETF</span>s on symbols) are made undoable by substituting a call to <span class="s11">UNDOABLY-SETQ. UNDOABLY-SETQ </span>operates like <span class="s11">SETQ </span>on lexical variables or those with dynamic bindings; it only saves information on the history list for changes to global, “top-level” values.</p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>UNDOSAVE </b><i>UNDOFORM HISTENTRY</i>)                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Adds the undo information <span class="s16">UNDOFORM </span>to the <span class="s11">SIDE </span>property of the history event <span class="s16">HISTENTRY</span>. If there is no <span class="s11">SIDE </span>property, one is created. If the value of the <span class="s11">SIDE </span>property is <span class="s11">NOSAVE</span>, the information is not saved<span class="s16">. HISTENTRY </span>specifies an event. If <span class="s16">HISTENTRY</span>=<span class="s11">NIL</span>, the value of <span class="s11">LISPXHIST </span>is used. If both <span class="s16">HISTENTRY </span>and <span class="s11">LISPXHIST </span>are <span class="s11">NIL</span>, <span class="s11">UNDOSAVE </span>is a no-op.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">The form of <span class="s11">UNDOFORM </span>is <span class="s11">(FN . ARGS)</span>. Undoing is done by performing <span class="s11">(APPLY (CAR UNDOFORM) (CDR UNDOFORM))</span>.</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">\#UNDOSAVES                                                    <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The maximum number of <span class="s11">UNDOFORM</span>s to be saved for a single event. When the count of <span class="s11">UNDOFORM</span>s reaches this number, <span class="s11">UNDOSAVE </span>prints the message <span class="s11">CONTINUE SAVING?</span>, asking if you want to continue saving. If you answer <span class="s11">NO </span>or <span class="s11">default</span>, <span class="s11">UNDOSAVE </span>discards the previously saved information for this event, and makes <span class="s11">NOSAVE </span>be the value of the property <span class="s11">SIDE</span>, which disables any further saving for this event. If you answer <span class="s11">YES</span>, <span class="s11">UNDOSAVE </span>changes the count to <span class="s11">-1</span>, which is then never incremented, and continues saving. The purpose of this feature is to avoid tying up large quantities of storage for operations that will never need to be undone.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">\#UNDOSAVES </span>is negative, then when the count reaches <span class="s11">(ABS \#UNDOSAVES)</span>, <span class="s11">UNDOSAVE </span>simply stops saving without printing any messages or other interactions.</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">\#UNDOSAVES <span class="p">= </span>NIL <span class="p">is equivalent to </span>\#UNDOSAVES <span class="p">= infinity. </span>\#UNDOSAVES <span class="p">is initially</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">NIL<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The configuration described here is very satisfactory. You pay a very small price for the ability to undo what you type in, since the interpreted evaluation is simply watched for destructive operations, or if you wish to protect yourself from malfunctioning in your own programs, you can explicitly call, or rewrite your program to explicitly call, undoable functions.</p><h4 style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Undoing Out of Order                                                                                                                               </h4><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">UNDOABLY-SETF <span class="p">operates undoably by saving (on the history list) the cell that is to be changed and its original contents. Undoing an </span>UNDOABLY-SETF <span class="p">restores the saved contents.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">This implementation can produce unexpected results when multiple modifications are made to the same piece of storage and then undone out of order. For example, if you type <span class="s11">(SETF (CAR FOO) 1)</span>, followed by <span class="s11">(SETF (CAR FOO) 2)</span>, then undo both events by undoing the most recent event first, then undoing the older event, <span class="s11">FOO </span>will be restored to its state before either event operated. However if you undo the first event, then the second event, <span class="s11">(CAR FOO) </span>will be <span class="s11">1</span>, since this is what was in <span class="s11">CAR </span>of <span class="s11">FOO </span>before <span class="s11">(UNDOABLY-SETF (CAR FOO) 2) </span>was executed. Similarly, if you type</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 348pt;text-indent: 0pt;text-align: left;">MEDLEY EXECUTIVES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">(NCONC FOO ’(1))<span class="p">, followed by </span>(NCONC FOO ’(2))<span class="p">, undoing just </span>(NCONC FOO ’(1)) <span class="p">will remove both </span>1 <span class="p">and </span>2 <span class="p">from </span>FOO<span class="p">. The problem in both cases is that the two operations are not independent.</span></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In general, operations are always independent if they affect different lists or different sublists of the same list. Undoing in reverse order of execution, or undoing independent operations, is always guaranteed to do the right thing. However, undoing dependent operations out of order may not always have the predicted effect.</p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Format and Use of the History List                                                                                                         </h4><p class="s15" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">LISPXHISTORY <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The Exec currently uses one primary history list, <span class="s11">LISPXHISTORY </span>for the storing events.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The history list is in the form <span class="s11">(</span><span class="s16">EVENTS EVENT# SIZE MOD</span><span class="s11">)</span>, where <span class="s16">EVENTS </span>is a list of events with the most recent event first, <span class="s16">EVENT# </span>is the event number for the most recent event on <span class="s16">EVENTS</span>, <span class="s16">SIZE </span>is the the maximum length <span class="s16">EVENTS </span>is allowed to grow<span class="s16">. MOD </span>is is the maximum event number to use, after which event numbers roll over<span class="s16">. LISPXHISTORY </span>is initialized to <span class="s11">(NIL 0 100 1000)</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The history list has a maximum length, called its time-slice. As new events occur, existing events are aged, and the oldest events are forgotten. The time-slice can be changed with the function <span class="s11">CHANGESLICE</span>. Larger time-slices enable longer memory spans, but tie up correspondingly greater amounts of storage. Since you seldom need really ancient history, a relatively small time-slice such as 30 events is usually adequate, although some users prefer to set the time-slice as large as 200 events.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Each individual event on <span class="s16">EVENTS </span>is a list of the form <span class="s11">(</span><span class="s16">INPUT ID VALUE . PROPS</span><span class="s11">)</span>. For Exec events, <span class="s16">ID </span>is a list <span class="s11">(</span><span class="s16">EVENT-NUMBER EXEC-ID</span><span class="s11">)</span>. The <span class="s16">EVENT-NUMBER </span>is the number of the event, while the <span class="s16">EXEC-ID </span>is a string that uniquely identifies the Exec. (The <span class="s16">EXEC-ID </span>is used to identify which events belong to the “same” Exec.) <span class="s16">VALUE </span>is the (first) value of the event<span class="s16">. PROPS </span>is a property list used to associate other information with the event (described below).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">INPUT </span>is the input sequence for the event. Normally, this is just the input that you type in. For an <span class="s11">APPLY</span>-format input this is a list consisting of two expressions; for an <span class="s11">EVAL</span>- format input, this is a list of just one expression; for an input entered as list of atoms, <span class="s16">INPUT </span>is simply that list. For example,</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">User Input <span class="s16">INPUT </span>is:</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 10pt;text-align: left;">LIST(1 2) (LIST (1 2))</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(LIST 1 1) ((LIST 1 1))</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 11pt;text-align: left;">DIR &quot;{DSK}&lt;LISPFILES&gt;&quot;<span class="s9">cr </span>(DIR &quot;{DSK}&lt;LISPFILES&gt;&quot;)</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If you type in an Exec command that executes other events (<span class="s11">REDO</span>, <span class="s11">USE</span>, etc.), several events might result. When there is more than one input, they are wrapped together into one invocation of the <span class="s11">DO-EVENTS </span>command.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The same convention is used for representing multiple inputs when a <span class="s11">USE </span>command involves sequential substitutions. For example, if you type <span class="s11">FBOUNDP(FOO) </span>and then <span class="s11">USE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">SIDE</p><p class="s11" style="padding-top: 5pt;text-indent: 0pt;text-align: justify;">FIE FUM FOR FOO<span class="p">, the input sequence that will be constructed is </span>DO-EVENTS (EVENT FBOUNDP (FIE)) (EVENT FBOUNDP (FUM))<span class="p">, which is the result of substituting </span>FIE <span class="p">for </span>FOO <span class="p">in </span>(FBOUNDP (FOO)) <span class="p">concatenated with the result of substituting </span>FUM <span class="p">for </span>FOO <span class="p">in </span>(FBOUNDP (FOO))<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;text-indent: 0pt;text-align: justify;">PROPS <span class="p">is a property list of the form </span>(PROPERTY<span class="s35">1</span> VALUE<span class="s35">1</span> PROPERTY<span class="s35">2</span> VALUE<span class="s35">2</span> ...)<span class="p">, that can be used to associate arbitrary information with a particular event. Currently, the following properties are used by the Exec:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: justify;">A list of the side effects of the event. See <span class="s11">UNDOSAVE</span>.</p><p class="s15" style="padding-top: 7pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">*LISPXPRINT*</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Used to record calls to <span class="s11">EXEC-FORMAT</span>, and printed by the <span class="s11">?? </span>command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Making or Changing an Exec                                                                                                                   </h4><p class="s11" style="padding-top: 5pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<b>XCL:ADD-EXEC </b><i>&amp;KEY PROFILE REGION TTY ID</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Creates a new process and window with an Exec running in it. <span class="s16">PROFILE </span>is the type of the Exec to be created (see below under <span class="s11">XCL:SET-EXEC-TYPE</span>). <span class="s16">REGION </span>optionally gives the shape and location of the window to be used. If not provided you will be prompted. <span class="s16">TTY </span>is a flag, which, if true, causes the tty to be given to the new Exec process. <span class="s16">ID </span>is a string identifier to use for events generated in this exec. <span class="s16">ID </span>defaults to the number given to the Exec process created.</p><p class="s11" style="padding-top: 9pt;padding-left: 108pt;text-indent: -6pt;line-height: 79%;text-align: left;">(<b>XCL:EXEC </b><i>&amp;KEY WINDOW PROMPT COMMAND-TABLES ENVIRONMENT PROFILE TOP- LEVEL-P TITLE FUNCTION ID</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">This is the main entry to the Exec. The arguments are:</p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">WINDOW <span class="p">defaults to the current TTY display stream, or can be provided a window in which the Exec will run.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">PROMPT <span class="p">is the prompt to print.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">COMMAND-TABLES </span>is a list of hash-tables for looking up commands (e.g., <span class="s11">*EXEC- COMMAND-TABLE* </span>or <span class="s11">*DEBUGGER-COMMAND-TABLE*</span>).</p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">ENVIRONMENT <span class="p">is a lexical environment used to evaluate things in.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">READTABLE <span class="p">is the default readtable to use (defaults to the “Common Lisp” readtable).</span></p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">PROFILE <span class="p">is a way to set the Exec’s type (see above, “Multiple Execs and the Exec’s Type”).</span></p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">TOP-LEVEL-P <span class="p">is a boolean, which should be true if this Exec is at the top level (it’s </span><span class="s11">NIL</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">for debugger windows, etc).</p><p class="s16" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">TITLE <span class="p">is an identifying title for the window title of the Exec.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="s16">FUNCTION </span>is a function used to actually evaluate events, default is <span class="s11">EVAL-INPUT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 348pt;text-indent: 0pt;text-align: left;">MEDLEY EXECUTIVES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">ID <span class="p">is a string identifier to use for events generated in this Exec. </span>ID <span class="p">defaults to the number given to the Exec process.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">XCL:*PER-EXEC-VARIABLES* <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="p">A list of pairs of the form </span>(<i>VAR INIT</i>)<span class="p">. Each time an Exec is entered, the variables in</span></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s11">*PER-EXEC-VARIABLES* </span>are rebound to the value returned by evaluating <span class="s16">INIT</span>. The initial value of <span class="s11">*PER-EXEC-VARIABLES* </span>is:</p><p class="s11" style="padding-top: 5pt;padding-left: 102pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((*PACKAGE* *PACKAGE*)</p><p class="s11" style="padding-left: 107pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(* *)</p><p class="s11" style="padding-left: 107pt;text-indent: 0pt;line-height: 88%;text-align: left;">(** **) (*** ***) (+ +)</p><p class="s11" style="padding-left: 107pt;text-indent: 0pt;line-height: 88%;text-align: left;">(++ ++) (+++ +++) (- -)</p><p class="s11" style="padding-left: 107pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(/ /)</p><p class="s11" style="padding-left: 107pt;text-indent: 0pt;line-height: 88%;text-align: left;">(// //) (/// ///)</p><p class="s11" style="padding-left: 107pt;text-indent: 0pt;line-height: 88%;text-align: left;">(HELPFLAG T) (*EVALHOOK* NIL)</p><p class="s11" style="padding-left: 107pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(*APPLYHOOK* nil)</p><p class="s11" style="padding-left: 107pt;text-indent: 0pt;line-height: 88%;text-align: left;">(*ERROR-OUPUT* *TERMINAL-IO*) (*READTABLE* *READTABLE*)</p><p class="s11" style="padding-left: 107pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(*package* *package*)</p><p class="s11" style="padding-left: 107pt;text-indent: 0pt;line-height: 88%;text-align: left;">(*eval-function* *eval-function*) (*exec-prompt* *exec-prompt*) (*debugger-prompt* *debugger-prompt*))</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">Most of these cause the values to be (re)bound to their current value in any inferior Exec, or to <span class="s11">NIL</span>, their value at the “top level”.</p><p class="s15" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">XCL:*EVAL-FUNCTION* <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">Bound to the function used by the Exec to evaluate input. Typically in an Interlisp Exec this is <span class="s11">IL:EVAL</span>, and in a Common Lisp Exec, <span class="s11">CL:EVAL</span>.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">XCL:*EXEC-PROMPT* <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Bound to the string printed by the Exec as a prompt for input. Typically in an Interlisp Exec this is “ <span class="s19"></span><span class="s21"> </span>”, and in a Common Lisp Exec, “&gt; ”.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">XCL:*DEBUGGER-PROMPT* <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Bound to the string printed by the debugger Exec as a prompt for input. Typically in an Interlisp Exec this is “ <span class="s19"></span><span class="s21"> </span>: ”, and in a Common Lisp Exec, “: ”.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>XCL:EXEC-EVAL </b><i>FORM &amp;OPTIONAL ENVIRONMENT</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Evaluates <span class="s16">FORM </span>(using <span class="s11">EVAL</span>) in the lexical environment <span class="s16">ENVIRONMENT </span>the same as though it were typed in to <span class="s11">EXEC</span>, i.e., the event is recorded, and the evaluation is made undoable by substituting the <span class="s11">UNDOABLE</span>-functions for the corresponding destructive functions<span class="s11">. XCL:EXEC-EVAL </span>returns the value(s) of the form, but does not print it, and does not reset the variables <span class="s11">*</span>, <span class="s11">**</span>, <span class="s11">***</span>, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<b>XCL:EXEC-FORMAT </b><i>CONTROL-STRING &amp;REST ARGUMENTS</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">In addition to saving inputs and values, the Exec saves many system messages on the history list. For example, </span>FILE CREATED ..., FN redefined<span class="p">, </span>VAR reset<span class="p">, output of </span>TIME<span class="p">, </span>BREAKDOWN<span class="p">, </span>ROOM<span class="p">, save their output on the history list, so that when </span>?? <span class="p">prints the event, the output is also printed. The function </span>XCL:EXEC-FORMAT <span class="p">can be used in your code similarly</span>. XCL:EXEC-FORMAT <span class="p">performs </span>(APPLY #’CL:FORMAT *TERMINAL- IO* <i>CONTROL-STRING ARGUMENTS</i>) <span class="p">and also saves the format string and arguments on the history list associated with the current event.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<b>XCL:SET-EXEC-TYPE </b><i>NAME</i><span class="s10">) </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Sets the type of the current Exec to that indicated by <span class="s16">NAME</span>. This can be used to set up the Exec to your liking. <span class="s16">NAME </span>may be an atom or string. Possible names are:</p><p class="s15" style="padding-top: 5pt;padding-left: 169pt;text-indent: 0pt;line-height: 10pt;text-align: left;">INTERLISP<span class="s11">, </span>IL <span class="s11">*READTABLE* INTERLISP</span></p><p class="s11" style="padding-left: 245pt;text-indent: 0pt;line-height: 80%;text-align: left;">*PACKAGE* INTERLISP XCL:*DEBUGGER-PROMPT* &quot;<span class="s19"></span>: &quot; XCL:*EXEC-PROMPT* &quot;<span class="s19"></span>&quot; XCL:*EVAL-FUNCTION* IL:EVAL</p><p class="s15" style="padding-top: 3pt;padding-left: 121pt;text-indent: 0pt;line-height: 10pt;text-align: left;">XEROX-COMMON-LISP<span class="s11">, </span>XCL <span class="s11">*READTABLE* XCL</span></p><p class="s11" style="padding-left: 245pt;text-indent: 0pt;line-height: 88%;text-align: left;">*PACKAGE* XCL-USER XCL:*DEBUGGER-PROMPT* &quot;: &quot; XCL:*EXEC-PROMPT* &quot;&gt; &quot; XCL:*EVAL-FUNCTION* CL:EVAL</p><p class="s15" style="padding-top: 3pt;padding-left: 158pt;text-indent: 0pt;line-height: 10pt;text-align: left;">COMMON-LISP<span class="s11">, </span>CL <span class="s11">*READTABLE* LISP</span></p><p class="s11" style="padding-left: 245pt;text-indent: 0pt;line-height: 88%;text-align: left;">*PACKAGE* USER XCL:*DEBUGGER-PROMPT* &quot;: &quot; XCL:*EXEC-PROMPT* &quot;&gt; &quot; XCL:*EVAL-FUNCTION* CL:EVAL</p><p class="s15" style="padding-top: 3pt;padding-left: 158pt;text-indent: 0pt;line-height: 10pt;text-align: left;">OLD-INTERLISP-T <span class="s11">*READTABLE* OLD-INTERLISP-T</span></p><p class="s11" style="padding-left: 245pt;text-indent: 0pt;line-height: 82%;text-align: left;">*PACKAGE* INTERLISP XCL:*DEBUGGER-PROMPT* “<span class="s19"></span>: &quot; XCL:*EXEC-PROMPT* &quot;: &quot;</p><p class="s11" style="padding-left: 245pt;text-indent: 0pt;line-height: 9pt;text-align: left;">XCL:*EVAL-FUNCTION* IL:EVAL</p><p class="s11" style="padding-top: 5pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">(<b>XCL:SET-DEFAULT-EXEC-TYPE </b><i>NAME</i><span class="s10">) [</span><span class="p">Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">XCL:SET-EXEC-TYPE</span>, but sets the type of Execs created by default, as from the background menu. Initially <span class="s11">XCL</span>. This can be used in your greet file to set default Execs to your liking.</p><h4 style="padding-top: 10pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">Editing Exec Input                                                                                                                                     </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The Exec features an input editorwhich provides completion, spelling correction, help facility, and character-level editing. The implementation is borrowed from the Interlisp module <span class="s11">TTYIN</span>. This section describes the use of the <span class="s11">TTYIN </span>editor from the perspective of the Exec.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 78pt;text-indent: -24pt;text-align: left;">Editing Your Input                                                                                                                                     </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Some editing operations can be performed using any of several characters; characters that are interrupts will, of course, not be read, so several alternatives are given. The following characters may be used to edit your input:</p><p class="s15" style="padding-top: 4pt;padding-left: 107pt;text-indent: 0pt;text-align: left;">CONTROL-A</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 348pt;text-indent: 0pt;text-align: left;">MEDLEY EXECUTIVES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 114pt;text-indent: -108pt;text-align: justify;">BACKSPACE<span class="p">Deletes a character. At the start of the second or subsequent lines of your input, deletes the last character of the previous line.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">CONTROL-W <span class="p">Deletes a “word”. Generally this means back to the last space or parenthesis.</span></p><p class="s15" style="padding-top: 1pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">CONTROL-Q <span class="p">Deletes the current line, or if the current line is blank, deletes the previous line.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 114pt;text-indent: -54pt;line-height: 79%;text-align: justify;">CONTROL-R <span class="p">Refreshes the current line. Two in a row refreshes the whole buffer (when doing multiline input).</span></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: -38pt;line-height: 79%;text-align: justify;"><span class="s15">ESCAPE </span>Tries to complete the current word from the spelling list <span class="s11">USERWORDS</span>. In the case of ambiguity, completes as far as is uniquely determined, or beeps.</p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: -46pt;line-height: 77%;text-align: justify;"><span class="s15">UNDO </span>key Retrieves characters from the previous non-empty buffer when it is able to; e.g., when typed at the beginning of the line this command restores the previous line you typed; when typed in the middle of a line fills in the remaining text from the old line; when typed following <span class="s11">CONTROL-Q </span>or <span class="s11">CONTROL-W </span>restores what those commands erased.</p><p class="s15" style="padding-top: 3pt;padding-left: 114pt;text-indent: -54pt;line-height: 79%;text-align: justify;">CONTROL-X <span class="p">Goes to the end of your input (or end of expression if there is an excess right parenthesis) and returns if parentheses are balanced.</span></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If you are already at the end of the input and the expression is balanced except for lacking one or more right parentheses, <span class="s11">CONTROL-X </span>adds the required right parentheses to balance and returns.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">During most kinds of input, lines are broken, if possible, so that no word straddles the end of the line. The pseudo-carriage return ending the line is still read as a space, however; i.e., the program keeps track of whether a line ends in a carriage return or is merely broken at some convenient point. You will not get carriage returns in your strings unless you explicitly type them.</p><h4 style="padding-top: 10pt;padding-left: 30pt;text-indent: -24pt;text-align: left;">Using the Mouse                                                                                                                                       </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Editing with the mouse during <span class="s11">TTYIN </span>input is slightly different than with other modules. The mouse buttons are interpreted as follows during <span class="s11">TTYIN </span>input:</p><p style="padding-top: 4pt;padding-left: 96pt;text-indent: -27pt;line-height: 93%;text-align: justify;"><span class="s15">LEFT </span>Moves the caret to where the cursor is pointing. As you hold down <span class="s11">LEFT</span>, the caret moves around with the cursor; after you let up, any type-in will be inserted at the new position.</p><p class="s15" style="padding-top: 5pt;padding-left: 57pt;text-indent: 0pt;line-height: 9pt;text-align: left;">MIDDLE</p><p style="padding-left: 35pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><span class="s15">LEFT</span>+<span class="s15">RIGHT </span>Like <span class="s11">LEFT</span>, but moves only to word boundaries.</p><p style="padding-top: 4pt;padding-left: 96pt;text-indent: -33pt;line-height: 94%;text-align: justify;"><span class="s15">RIGHT </span>Deletes text from the caret to the cursor, either forward or backward. While you hold down <span class="s11">RIGHT</span>, the text to be deleted is inverted; when you let up, the text goes away. If you let up outside the scope of the text, nothing is deleted (this is how to cancel this operation).</p><p style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If you hold down <span class="s11">MOVE</span>, <span class="s11">COPY</span>, <span class="s11">SHIFT </span>or <span class="s11">CTRL </span>while pressing the mouse buttons, you instead get secondary selection, move selection or delete selection. The selection is made by holding the appropriate key down while pressing the mouse buttons <span class="s11">LEFT </span>(to select a character) or <span class="s11">MIDDLE </span>(to select a word), and optionally extend the selection either left or right using <span class="s11">RIGHT</span>. While you are doing this, the caret does not move, but the selected text is highlighted in a manner indicating what is about to happen. When the selection is complete, release the mouse buttons and then lift up on <span class="s11">MOVE </span>/ <span class="s11">COPY </span>/ <span class="s11">CTRL </span>/ <span class="s11">SHIFT </span>and the appropriate action will occur:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 116pt;text-indent: 0pt;line-height: 9pt;text-align: left;">COPY</p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">SHIFT  <span class="p">The selected text is inserted as if it were typed.  The text is highlighted with a broken</span></p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">underline during selection.</p><p class="s15" style="padding-top: 2pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">CTRL <span class="p">The selected text is deleted.  The text is complemented during selection.</span></p><p class="s15" style="padding-top: 4pt;padding-left: 116pt;text-indent: 0pt;line-height: 9pt;text-align: left;">MOVE</p><p class="s15" style="padding-left: 83pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">CTRL<span class="p">+</span>SHIFT <span class="p">Combines copy and delete. The selected text is moved to the caret.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">You can cancel a selection in progress by pressing <span class="s11">LEFT </span>or <span class="s11">MIDDLE </span>as if to select, and moving outside the range of the text.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The most recent text deleted by mouse command can be inserted at the caret by typing the <span class="s11">UNDO </span>key. This is the same key that retrieves the previous buffer when issued at the end of a line.</p><h4 style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Editing Commands                                                                                                                                   </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A number of characters have special effects while typing to the Exec. Some of them merely move the caret inside the input stream. While caret positioning can often be done more conveniently with the mouse, some of the commands, such as the case changing commands, can be useful for modifying the input.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In the descriptions below, current word means the word the cursor is under, or if under a space, the previous word. Currently, parentheses are treated as spaces, which is usually what you want, but can occasionally cause confusion in the word deletion commands.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Most commands can be preceded by a numeric argument. A numeric argument can be a number or an escape. You enter the numeric argument by holding down the meta key and entering a number. You only need to hold down the meta key for the firs digit of the argument. Entering escape as a numeric argument means infinity.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Some commands also accept negative arguments, but some only look at the magnitude of the argument. Most of these commands are confined to work within one line of text unless otherwise noted.</p><h4 style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Cursor Movement Commands                                                                                                                 </h4><p class="s15" style="padding-top: 5pt;padding-left: 80pt;text-indent: 0pt;text-align: justify;">Meta-BACKSPACE <span class="p">Backs up one (or n) characters.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">Meta-SPACE <span class="p">Moves forward one (or n) characters.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: justify;">Meta-^ <span class="p">Moves up one (or n) lines.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 123pt;text-indent: -37pt;line-height: 128%;text-align: justify;">Meta-LINEFEED <span class="p">Moves down one (or n) lines. </span>Meta-( <span class="p">Moves back one (or n) words. </span>Meta-) <span class="p">Moves ahead one (or n) words.</span></p><p class="s15" style="padding-left: 162pt;text-indent: -49pt;text-align: justify;">Meta-tab <span class="p">Moves to end of line; with an argument moves to nth end of line; </span>Meta- Control-tab <span class="p">goes to end of buffer.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 80pt;text-indent: 0pt;text-align: justify;">Meta-Control-L <span class="p">Moves to start of line (or nth previous, or start of buffer).</span></p><p class="s15" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;line-height: 128%;text-align: justify;">Meta-{ <span class="p">Goes to start of buffer</span>. Meta-} <span class="p">Goes to end of buffer.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 348pt;text-indent: 0pt;text-align: left;">MEDLEY EXECUTIVES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 114pt;text-indent: -38pt;line-height: 93%;text-align: justify;">Meta-[ <span class="p">Moves to beginning of the current list, where cursor is currently under an element of that list or its closing paren. (See also the auto-parenthesis-matching feature below under “Assorted Flags”.)</span></p><p class="s15" style="padding-top: 3pt;padding-left: 75pt;text-indent: 0pt;text-align: left;">Meta-] <span class="p">Moves to end of current list.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 70pt;text-indent: 0pt;text-align: left;">Meta-S<span class="p">x Skips ahead to next (or nth) occurrence of character x, or rings the bell.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 70pt;text-indent: 0pt;text-align: left;">Meta-B<span class="p">x Backward search.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Buffer Modification Commands                                                                                                               </h4><p class="s15" style="padding-top: 5pt;padding-left: 113pt;text-indent: -43pt;text-align: justify;">Meta-Z<span class="p">x Zaps characters from cursor to next (or nth) occurrence of x. There is no unzap command.</span></p><p class="s15" style="padding-top: 5pt;padding-left: 75pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Meta-A</p><p class="s15" style="padding-left: 75pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Meta-R <span class="p">Repeats the last S, B, or Z command, regardless of any intervening input.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 75pt;text-indent: 0pt;text-align: justify;">Meta-K <span class="p">Kills the character under the cursor, or n chars starting at the cursor.</span></p><p class="s15" style="padding-top: 4pt;padding-left: 113pt;text-indent: -43pt;line-height: 94%;text-align: justify;">Meta-CR <span class="p">When the buffer is empty is the same as undo i.e. restores buffer’s previous contents. Otherwise is just like a &lt;cr&gt; (except that it also terminates an insert). Thus, </span>Meta-CR Meta-CR <span class="p">will repeat the previous input (as will undo&lt;cr&gt; without the meta key).</span></p><p class="s15" style="padding-top: 3pt;padding-left: 114pt;text-indent: -38pt;text-align: justify;">Meta-O <span class="p">Does “Open line”, inserting a crlf after the cursor, i.e., it breaks the line but leaves the cursor where it is.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 114pt;text-indent: -38pt;line-height: 93%;text-align: justify;">Meta-T <span class="p">Transposes the characters before and after the cursor. When typed at the end of a line, transposes the previous two characters. Refuses to handle odd cases, such as tabs.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 75pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Meta-G <span class="p">Grabs the contents of the previous line from the cursor position onward. </span>Meta-</p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">n <span class="s15">Meta-G </span>grabs the nth previous line.</p><p class="s15" style="padding-top: 3pt;padding-left: 114pt;text-indent: -38pt;text-align: justify;">Meta-L <span class="p">Puts the current word, or n words on line, in lower case. </span>Meta-<span class="p">&lt;escape&gt; </span>Meta-L <span class="p">puts the rest of the linein lower case; or if given at the end of line puts the entire line in lower case.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 75pt;text-indent: 0pt;text-align: justify;">Meta-U <span class="p">Analogous to </span>Meta-L<span class="p">, for putting word, line, or portion of line in upper case.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 114pt;text-indent: -38pt;text-align: justify;">Meta-C <span class="p">Capitalizes. If you give it an argument, only the first word is capitalized; the rest are just lowercased.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 114pt;text-indent: -81pt;line-height: 93%;text-align: justify;">Meta-Control-Q <span class="p">Deletes the current line. </span>Meta-<span class="p">&lt;escape&gt; </span>Meta-Control-Q <span class="p">deletes from the current cursor position to the end of the buffer. No other arguments are handled.</span></p><p class="s15" style="padding-top: 3pt;padding-left: 32pt;text-indent: 0pt;text-align: justify;">Meta-Control-W <span class="p">Deletes the current word, or the previous word if sitting on a space.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Miscellaneous Commands                                                                                                                       </h4><p class="s15" style="padding-top: 5pt;padding-left: 114pt;text-indent: -38pt;line-height: 92%;text-align: justify;">Meta-P <span class="p">Prettyprints buffer. Clears the buffer and reprints it using prettyprint. If there are not enough right parentheses, it will supply more; if there are too many, any excess remains unprettyprinted at the end of the buffer. May refuse to do anything if there is an unclosed string or other error trying to read the buffer.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 162pt;text-indent: -38pt;text-align: justify;"><span class="s15">Meta-N </span>Refreshes line. Same as <b>Control-R</b>. <span class="s15">Meta-</span>&lt;escape&gt; <span class="s15">Meta-N </span>refreshes the whole buffer; <span class="s15">Meta-</span>n <span class="s15">Meta-N </span>refreshes n lines. Cursor movement in <span class="s11">TTYIN </span>depends on <span class="s11">TTYIN </span>being the only source of output to the window; in some circumstances, you may need to refresh the line for best results.</p><p class="s15" style="padding-top: 3pt;padding-left: 162pt;text-indent: -81pt;line-height: 94%;text-align: justify;">Meta-Control-Y <span class="p">Gets an Interlisp Exec</span>. Meta-<span class="p">&lt;escape&gt; </span>Meta-Control-Y <span class="p">Gets an Interlisp Exec, but first unreads the contents of the buffer from the cursor onward. Thus if you typed at </span><span class="s11">TTYIN </span><span class="p">something destined for Interlisp, you can do </span>Meta- Control-<span class="s17">L </span>Meta-<span class="p">&lt;escape&gt; </span>Meta-Control-Y <span class="p">and give it to Lisp.</span></p><p style="padding-top: 4pt;padding-left: 162pt;text-indent: -38pt;text-align: justify;"><span class="s15">Meta-_ </span>Adds the current word to the spelling list <span class="s11">USERWORDS</span>. With zero argument, removes word.  See <span class="s11">TTYINCOMPLETEFLG </span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 47pt;text-indent: 0pt;text-align: center;">Useful Macros                                                                                                                                            </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If the event is considered short enough, the Exec command <span class="s11">FIX </span>will load the buffer with the event’s input, rather than calling the structure editor. If you really wanted the Lisp editor for your fix, you can say <span class="s11">FIX EVENT - |TTY:|.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 47pt;text-indent: 0pt;text-align: center;">?= Handler                                                                                                                                                 </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Typing the characters <span class="s11">?=</span>&lt;cr&gt; displays the arguments to the function currently in progress. Since <span class="s11">TTYIN </span>wants you to be able to continue editing the buffer after a <span class="s11">?=</span>, it prints the arguments below your type-in and then puts the cursor back where it was when <span class="s11">?= </span>was typed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 47pt;text-indent: 0pt;text-align: center;">Assorted Flags                                                                                                                                          </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">These flags control aspects of <span class="s11">TTYIN</span>’s behavior. Some have already been mentioned. All are initially set to <span class="s11">T</span>.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">?ACTIVATEFLG                                                   <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If true, enables the feature whereby <span class="s11">? </span>lists alternative completions from the current spelling list.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">SHOWPARENFLG                                                   <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If true, then whenever you are typing Lisp input and type a right parenthesis, <span class="s11">TTYIN </span>will briefly move the cursor to the matching parenthesis, assuming it is still on the screen. The cursor stays there for about 1 second, or until you type another character (i.e., if you type fast you will never notice it).</p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">USERWORDS                                                      <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">USERWORDS <span class="p">contains words you mentioned recently: functions you have defined or edited, variables you have set or evaluated at the executive level, etc. This happens to be a very convenient list for context-free escape completion; if you have recently edited a function, chances are good you may want to edit it again (typing </span>“ED(xx$)<span class="p">”) or type a call to it. If there is no completion for the current word from </span>USERWORDS<span class="p">, or there is more than one possible completion, </span>TTYIN <span class="p">beeps. If typed when not inside a word, Escape completes to the value of </span>LASTWORD<span class="p">, i.e., the last thing you typed that the Exec noticed,</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 348pt;text-indent: 0pt;text-align: left;">MEDLEY EXECUTIVES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">except that Escape at the beginning of the line is left alone (it is an Old Interlisp Exec command).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If you really wanted to enter an escape, you can, of course, just quote it with a <span class="s11">CONTROL- V</span>, like you can other control characters.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">You may explicitly add words to <span class="s11">USERWORDS </span>yourself that would not get there otherwise. To make this convenient online the edit command [<span class="s19"></span>] means “add the current atom to <span class="s11">USERWORDS</span>” (you might think of the command as pointing out this atom). For example, you might be entering a function definition and want to point to one or more of its arguments or prog variables. Giving an argument of zero to this command will instead remove the indicated atom from <span class="s11">USERWORDS</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Note that this feature loses some of its value if the spelling list is too long, if there are too many alternative completions for you to get by with typing a few characters followed by escape. Lisp’s maintenance of the spelling list <span class="s11">USERWORDS </span>keeps the temporary section (which is where everything goes initially unless you say otherwise) limited to</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">\#USERWORDS <span class="p">atoms, initially 100. Words fall off the end if they haven’t been used (they are used if </span>FIXSPELL <span class="p">corrects to one, or you use &lt;escape&gt; to complete one).</span></p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"> Old Interlisp T compatibility                                                                                                                    </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 148%;text-align: left;">The Old Interlisp exec contains a few extra Exec commands not listed above. They are explained here. In addition to the normal Event addresses you can also specify the following Event addresses:</p><p class="s11" style="padding-left: 108pt;text-indent: -11pt;text-align: left;">= <span class="p">Specifies that the next object is to be searched for in the values of events, instead of the inputs</span></p><p class="s16" style="padding-top: 6pt;padding-left: 108pt;text-indent: -76pt;text-align: left;"><span class="s11">SUCHTHAT </span>PRED <span class="p">Specifies an event for which the function </span>PRED <span class="p">returns true. </span>PRED <span class="p">should be a function of two arguments, the input portion of the event, and the event itself.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 108pt;text-indent: -22pt;line-height: 94%;text-align: justify;">PAT <span class="p">Any other event address command specifies an event whose input contains an expression that matches </span>PAT<span class="p">. When multiple Execs are active, all events are searched, no matter which Exec they belong to. The pattern can be a simple symbol, or a more complex search pattern.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="608" height="17" alt="image" src="Image_034.png"/></span></p><p class="s6" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Significant Changes in MEDLEY Rele</p><p style="text-indent: 0pt;text-align: left;"/><p class="s6" style="text-indent: 0pt;line-height: 11pt;text-align: left;">ase</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">There are two major differences between the Medley release and older versions of the system:</p><ul id="l20"><li><p class="s11" style="padding-top: 6pt;padding-left: 41pt;text-indent: -12pt;text-align: justify;">SETQ <span class="p">does not interact with the File Manager. In older releases (Koto, etc.), when you typed in </span>(SETQ FOO <i>some-new-value</i>) <span class="p">the executive responded with </span>(FOO reset) <span class="p">and the file manager was told that </span>FOO<span class="p">’s value had changed. Files containing </span>FOO <span class="p">were marked for cleanup, if none existed you were prompted for one when you typed </span>(FILES?)<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;line-height: 92%;text-align: justify;">This is still the case in the Old Interlisp executive but not in any of the others. If you are setting a variable that is significant to a program and you want to save it on a file, you should use the Common Lisp macro <span class="s11">CL:DEFPARAMETER </span>instead of <span class="s11">SETQ</span>. This will give the symbol a definition of type <span class="s11">VARIABLES </span>(instead of <span class="s11">VARS</span>), and it will be noticed by the File Manager. Subseqent</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">changes to the variable must be done by another call to <span class="s11">CL:DEFPARAMETER </span>or by editing it using</p><p class="s11" style="padding-left: 90pt;text-indent: 0pt;line-height: 12pt;text-align: left;">ED <span class="p">(not </span>DV<span class="p">).</span></p><ul id="l21"><li><p style="padding-top: 6pt;padding-left: 90pt;text-indent: -12pt;text-align: justify;">The following functions and variables are only available in the Old Interlisp Exec: <span class="s11">LISPX</span>, <span class="s11">USEREXEC</span>, <span class="s11">LISPXEVAL</span>, <span class="s11">READBUF</span>, <span class="s11">(READLINE)</span>, <span class="s11">(LISPXREAD)</span>, <span class="s11">(LISPXREADP)</span>, <span class="s11">(LISPXUNREAD)</span>, <span class="s11">(PROMPTCHAR)</span>, <span class="s11">(HISTORYSAVE)</span>, <span class="s11">(LISPXSTOREVALUE)</span>, <span class="s11">(LISPXFIND)</span>, <span class="s11">(HISTORYFIND)</span>, <span class="s11">(HISROTYMATCH)</span>, <span class="s11">(ENTRY)</span>, <span class="s11">(UNDOSAVE)</span>, <span class="s11">#UNDOSAVES</span>, <span class="s11">(NEW/FN)</span>, <span class="s11">(LISPX/)</span>, <span class="s11">(UNDOLISPX)</span>, <span class="s11">(UNDOLISPX1)</span>, and <span class="s11">(PRINTHISTORY)</span>.</p><p style="padding-top: 7pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">The function <span class="s11">USEREXEC </span>invokes an old-style executive, but uses the package and readtable of its caller. Callers of <span class="s11">LISPXEVAL </span>should use <span class="s11">EXEC-EVAL </span>instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 305pt;text-indent: 0pt;text-align: left;"><a name="bookmark15">14. ERRORS AND DEBUGGING</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_035.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Occasionally, while a program is running, an error occurs which stops the computation. Errors can be caused in different ways. A coding mistake may have caused the wrong arguments to be passed to a function, or caused the function to attempt something illegal. For example, <span class="s11">PLUS </span>will cause an error if its arguments are not numbers. It is also possible to interrupt a computation by typing one of the “interrupt characters,” such as Control-D or Control-E (Medley interrupt characters are listed in Chapter 30). Finally, you can specify that certain functions automatically cause an error whenever they are entered (see Chapter 15). This facilitates debugging by allowing you to examine the context within the computation.</p><p style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When an error occurs, the system can either reset and unwind the stack, or go into a “break”, and attempt to debug the program. You can modify the mechanism that decides whether to unwind the stack or break, and is described in the Controlling When to Break section in this chapter. Within a break, Medley offers an extensive set of “break commands”.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This chapter explains what happens when errors occur. It also tells you how to handle program errors using breaks and break commands. The debugging capabilities of the break window facility are described, as well as the variables that control its operation. Finally, advanced facilities for modifying and extending the error mechanism are presented.</p><h4 style="padding-top: 10pt;padding-left: 30pt;text-indent: -24pt;text-align: left;">Breaks                                                                                                                                                        </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">One of the most useful debugging facilities in Medley is the ability to put the system into a “break”, stopping a computation at any point, allowing you to interrogate the state of the world and affect the course of the computation. When a break occurs, a “break window” (see the Break Windows section below) is brought up near the TTY window of the broken process.  The break window looks like a top- level executive window, except that the prompt character is <b>“:</b>” instead of “<span class="s19"></span>” as in the top-level executive. A break saves the environment where the break occurred, so that you may evaluate variables and expressions in the borken environment.  In addition, the break program recognizes a number of useful “break commands”, providing an easy way to interrogate the state of the broken computation.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Breaks may be entered in several ways. Some interrupt characters (Chapter 30) automatically cause a break whenever you type them. Function errors may also cause a break, depending on the depth of the computation (see Controlling When to Break below). Finally, Medley provides facilities which make it easy to “break” suspect functions so that they always cause a break whenever they are entered.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Within a break you have access to all of the power of Medley; you can do anything you can do at the top-level executive. For example, you can evaluate an expression, call the editor, change the function, and evaluate the expression again, all without leaving the break. You can also type in commands like <span class="s11">REDO</span>, and <span class="s11">UNDO </span>(Chapter 13), to redo or undo previously executed events, including break commands.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Similarly, you can prettyprint functions, define new functions or redefine old ones, load a file, compile functions, time a computation, etc. In addition, you can examine the stack (see Chapter 11), and even force a return back to some higher function via the functions <span class="s11">RETFROM </span>or <span class="s11">RETEVAL</span>.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Once a break occurs, <i>you </i>are in complete control of the flow of the computation, and the computation will not proceed without specific instruction from you. If you type in an expression whose evaluation</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">causes an error, the break is maintained. Similarly if you abort a computation initiated from within the break (by typing Control-E), the break is maintained. Only if you give one of the commands that exits from the break, or evaluates a form which does a <span class="s11">RETFROM </span>or <span class="s11">RETEVAL </span>out of <span class="s11">BREAK1</span>, will the computation continue. Also, <span class="s11">BREAK1 </span>does not “turn off” Control-D, so a Control-D will force an immediate return to the top level.</p><h4 style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Break Windows                                                                                                                                         </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When a break occurs, a break window is brought up near the TTY window of the borken process and the terminal stream switched to it. The title of the break window is changed to the name of the broken function and the reason for the break. If a break occurs under a previous break, a new break window is created.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If a break is caused by a storage full error, the display break package will not try to open a new break window, since this would cause an infinite loop.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">While in a break window, clicking the middle button brings up a menu of break commands: <span class="s11">EVAL</span>, <span class="s11">EDIT</span>, <span class="s11">revert</span>, <span class="s19"></span>, <span class="s11">OK</span>, <span class="s11">BT</span>, <span class="s11">BT!</span>, and <span class="s11">?=</span>. Clicking on these commands is equivalent to typing the corresponding break commandm, except <span class="s11">BT </span>and <span class="s11">BT! </span>which behave differently from the typed-in commands (see Break Commands below).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s11">BT </span>and <span class="s11">BT! </span>menu commands bring up a backtrace menu beside the break window showing the frames on the stack. <span class="s11">BT </span>shows frames for which <span class="s11">REALFRAMEP </span>is <span class="s11">T</span>; <span class="s11">BT! </span>shows all frames. When one of the frames is selected from the backtrace menu, it is grayed and the function name and the variables bound in that frame (including local variables and <span class="s11">PROG </span>variables) are printed in the “backtrace frame window.” If the left button is used for the selection, only named variables are printed. If the middle button is used, all variables are printed (variables without names appear as <span class="s11">*var* </span><span class="s16">N</span>). The “backtrace frame” window is an inspect window (see Chapter 26). In this window, the left button is used to select the name of the function, the names of the variables or the values of the variables. For example, below is a picture of a break window with a backtrace menu created by <span class="s11">BT</span>. The <span class="s11">OPENSTREAM </span>stack frame has been selected, so its variables are shown in an inspect window on top of the break window:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 197pt;text-indent: 0pt;text-align: left;"><span><img width="195" height="182" alt="image" src="Image_036.gif"/></span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">After selecting an item, the middle button brings up a menu of commands that apply to the selected item. If the function name is selected, you are given a choice of editing the function or seeing the compiled code with <span class="s11">INSPECTCODE </span>(Chapter 26). If you edit the function in this way, the editor is called in the broken process, so variables evaluated in the editor are in the broken process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 325pt;text-indent: 0pt;text-align: left;">ERRORS AND DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">If a variable name is selected, the command <span class="s11">SET </span>is offered. Selecting <span class="s11">SET </span>will <span class="s11">READ </span>a value and set the selected to the value read.</p><p class="s17" style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note<span class="p">: The inspector will only allow the setting of named variables. Even with this restriction it is still possible to crash the system by setting variables inside system frames. Exercise caution in setting variables in other than your own code.</span></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">If a value is selected, the inspector is called on the selected value.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The internal break variable <span class="s11">LASTPOS </span>(see the section below) is set to the selected backtrace menu frame so that the normal break commands <span class="s11">EDIT</span>, <span class="s11">revert</span>, and <span class="s11">?= </span>work on the currently selected frame. The commands <span class="s11">EVAL</span>, <span class="s11">revert</span>, <span class="s19"></span>, <span class="s11">OK</span>, and <span class="s11">?= </span>in the break menu cause the corresponding commands to be “typed in.” This means that these break commands will not have the intended effect if characters have already been typed in. The typed-in break commands <span class="s11">BT</span>, <span class="s11">BTV</span>, etc. use the value of <span class="s11">LASTPOS </span>to determine where to start listing the stack, so selecting a stack frame name in the backtrace menu affects these commands.</p><h4 style="padding-top: 10pt;padding-left: 30pt;text-indent: -24pt;text-align: left;">Break Commands                                                                                                                                      </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The basic function of the break package is <span class="s11">BREAK1</span>. <span class="s11">BREAK1 </span>is just another Interlisp function, not a special system feature like the interpreter or the garbage collector. It has arguments, and returns a value, the same as any other function. For more information on the function <span class="s11">BREAK1</span>, see Creating Breaks with BREAK1 below.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">The value returned by <span class="s11">BREAK1 </span>is called “the value of the break.” You can specify this value explicitly by using the <span class="s11">RETURN </span>break command (see below). But in most cases, the value of a break is given implicitly, via a <span class="s11">GO </span>or <span class="s11">OK </span>command, and is the result of evaluating “the break expression.” The break expression, stored in the variable <span class="s11">BRKEXP</span>, is an expression equivalent to the computation that would have taken place had no break occurred. For example, if you break on the function <span class="s11">FOO</span>, the break expression is the body of the definition of <span class="s11">FOO</span>. When you type <span class="s11">OK </span>or <span class="s11">GO</span>, the body of <span class="s11">FOO </span>is evaluated, and its value returned as the value of the break, i.e., to whatever function called <span class="s11">FOO</span>. <span class="s11">BRKEXP </span>is set up by the function that created the call to <span class="s11">BREAK1</span>. For functions broken with <span class="s11">BREAK </span>or <span class="s11">TRACE</span>, <span class="s11">BRKEXP </span>is equivalent to the body of the definition of the broken function (see Chapter 15). For functions broken with <span class="s11">BREAKIN</span>, using <span class="s11">BEFORE </span>or <span class="s11">AFTER</span>, <span class="s11">BRKEXP </span>is <span class="s11">NIL</span>. For <span class="s11">BREAKIN AROUND</span>, <span class="s11">BRKEXP </span>is the indicated expression (see Chapter 15).</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">BREAK1 </span>recognizes a large set of break commands. These are typed in <i>without </i>parentheses. In order to facilitate debugging of programs that perform input operations, the carriage return that is typed to complete the <span class="s11">GO</span>, <span class="s11">OK</span>, <span class="s11">EVAL</span>, etc. commands is discarded by <span class="s11">BREAK1</span>, so that it will not be part of the input stream after the break.</p><p class="s15" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">GO <span class="p">[Break Command]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Evaluates <span class="s11">BRKEXP</span>, prints its value, and returns it as the value of the break. Releases the break and allows the computation to proceed.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">OK <span class="p">[Break Command]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Same as <span class="s11">GO </span>except that the value of <span class="s11">BRKEXP </span>is not printed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">EVAL <span class="p">[Break Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">OK </span>except that the break is maintained after the evaluation. The value of <span class="s11">EVAL </span>is bound to the local variable <span class="s11">!VALUE</span>, which you can interrogate. Typing <span class="s11">GO </span>or <span class="s11">OK </span>following <span class="s11">EVAL </span>will not cause <span class="s11">BRKEXP </span>to be reevaluated, but simply returns the value of</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">!VALUE <span class="p">as the value of the break. Typing another </span>EVAL <span class="p">will cause reevaluation. </span>EVAL <span class="p">is useful when you are not sure whether the break will produce the correct value and want to examine it before continuing with the computation.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">RETURN <i>FORM </i><span class="p">[Break Command]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">FORM <span class="p">is evaluated, and returned as the value of the break. For example, one could use the</span></p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">EVAL <span class="p">command and follow this with </span>RETURN (REVERSE !VALUE)<span class="p">.</span></p><p class="s19" style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;"><span class="s21"> </span><span class="p">[Break Command]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Calls <span class="s11">ERROR! </span>and aborts the break, making it “go away” without returning a value. This is a useful way to unwind to a higher level break. All other errors, including those encountered while executing the <span class="s11">GO</span>, <span class="s11">OK</span>, <span class="s11">EVAL</span>, and <span class="s11">RETURN </span>commands, maintain the break.</p><p style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">The following four commands refer to “the broken function”, whose name is stored in the <span class="s11">BREAK1</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">argument <span class="s11">BRKFN</span>.</p><p class="s15" style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">!GO <span class="p">[Break Command]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The broken function is unbroken, the break expression is evaluated, the function is rebroken, and then the break is exited with the value printed.</p><p class="s15" style="padding-top: 7pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">!OK <span class="p">[Break Command]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The broken function is unbroken, the break expression is evaluated, the function is rebroken, and then the break is exited without the value printed.</p><p class="s15" style="padding-top: 7pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">UB <span class="p">[Break Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Unbreaks the broken function.</p><p class="s15" style="padding-top: 7pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">@ <span class="p">[Break Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Resets the variable <span class="s11">LASTPOS</span>, which establishes a context for the commands <span class="s11">?=</span>, <span class="s11">ARGS</span>, <span class="s11">BT</span>, <span class="s11">BTV</span>, <span class="s11">BTV*</span>, <span class="s11">EDIT</span>, and <span class="s11">IN? </span>described below. <span class="s11">LASTPOS </span>is the position of a function call on the stack. It is initialized to the function just before the call to <span class="s11">BREAK1</span>, i.e., <span class="s11">(STKNTH -1 ’BREAK1)</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">When control passes from <span class="s11">BREAK1</span>, e.g. as a result of an <span class="s11">EVAL</span>, <span class="s11">OK</span>, <span class="s11">GO</span>, <span class="s11">REVERT</span>, <span class="s19"></span><span class="s21"> </span>command, or via a <span class="s11">RETFROM </span>or <span class="s11">RETEVAL </span>you type in, <span class="s11">(RELSTK LASTPOS) </span>is executed to release this stack pointer.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">@ <span class="p">treats the rest of the teletype line as its argument(s). It first resets </span>LASTPOS <span class="p">to </span>(STKNTH</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">-1 ’BREAK1) <span class="p">and then for each atom on the line, </span>@ <span class="p">searches down the stack for a call to that atom. The following atoms are treated specially:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 325pt;text-indent: 0pt;text-align: left;">ERRORS AND DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 125pt;text-indent: -17pt;text-align: justify;">@ <span class="p">Do not reset </span>LASTPOS <span class="p">to </span>(STKNTH -1 ’BREAK1) <span class="p">but leave it as it was, and continue searching from that point.</span></p><p style="padding-top: 6pt;padding-left: 68pt;text-indent: 0pt;line-height: 12pt;text-align: left;">a number <span class="s16">N </span>If negative, move <span class="s11">LASTPOS </span>down the stack <span class="s16">N </span>frames. If positive, move</p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s11">LASTPOS </span>up the stack <span class="s16">N </span>frames.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: -17pt;text-align: justify;"><span class="s11">/ </span>The next atom on the line (which should be a number) specifies that the <i>previous </i>atom should be searched for that many times. For example, <span class="s11">“@ FOO / 3</span>” is equivalent to <span class="s11">“@ FOO FOO FOO</span>”.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: -17pt;text-align: justify;"><span class="s11">= </span>Resets <span class="s11">LASTPOS </span>to the <i>value </i>of the next expression, e.g., if the value of <span class="s11">FOO </span>is a stack pointer, <span class="s11">“@ = FOO FIE</span>” will search for <span class="s11">FIE </span>in the environment specified by (the value of) <span class="s11">FOO</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">For example, if the push-down stack looks like:</p><p class="s16" style="padding-top: 7pt;padding-left: 137pt;text-indent: 0pt;text-align: left;">[9] <span class="s11">BREAK1</span></p><p class="s16" style="padding-left: 137pt;text-indent: 0pt;text-align: left;">[8] <span class="s11">FOO</span></p><p class="s16" style="padding-left: 137pt;text-indent: 0pt;text-align: left;">[7] <span class="s11">COND</span></p><p class="s16" style="padding-left: 137pt;text-indent: 0pt;text-align: left;">[6] <span class="s11">FIE</span></p><p class="s16" style="padding-left: 137pt;text-indent: 0pt;text-align: left;">[5] <span class="s11">COND</span></p><p class="s16" style="padding-left: 137pt;text-indent: 0pt;text-align: left;">[4] <span class="s11">FIE</span></p><p class="s16" style="padding-left: 137pt;text-indent: 0pt;text-align: left;">[3] <span class="s11">COND</span></p><p class="s16" style="padding-left: 137pt;text-indent: 0pt;text-align: left;">[2] <span class="s11">FIE</span></p><p class="s16" style="padding-left: 137pt;text-indent: 0pt;text-align: left;">[1] <span class="s11">FUM</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">then <span class="s11">“@ FIE COND</span>” will set <span class="s11">LASTPOS </span>to the position corresponding to <span class="s16">[5]</span>; <span class="s11">“@ @ COND</span>” will then set <span class="s11">LASTPOS </span>to <span class="s16">[3]</span>; and <span class="s11">“@ FIE / 3 - 1</span>” to <span class="s16">[1]</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s11">@ </span>cannot successfully complete a search for function <span class="s16">FN</span>, it searches the stack again from that point looking for a call to a function whose name is a possible misspelling of <span class="s16">FN </span>(see spelling correction in Chapter 20). If the search is still unsuccessful, <span class="s11">@ </span>types <span class="s11">(</span><span class="s16">FN </span><span class="s11">NOT FOUND)</span>, and then aborts.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">When <span class="s11">@ </span>finishes, it types the name of the function at <span class="s11">LASTPOS</span>, i.e., <span class="s11">(STKNAME LASTPOS)</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">@ <span class="p">can be used on </span>BRKCOMS <span class="p">(see Creating Breaks with BREAK1 below). In this case, the</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><i>next </i>command on <span class="s11">BRKCOMS </span>is treated the same as the rest of the teletype line.</p><p class="s15" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">?= <span class="p">[Break Command]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This is a multi-purpose command. Its most common use is to interrogate the value(s) of the arguments of the broken function. For example, if <span class="s11">FOO </span>has three arguments <span class="s11">(X Y Z)</span>, then typing <span class="s11">?= </span>to a break on <span class="s11">FOO </span>will produce:</p><p class="s11" style="padding-top: 5pt;padding-left: 101pt;text-indent: 0pt;line-height: 9pt;text-align: left;">:?=</p><p class="s11" style="padding-left: 101pt;text-indent: 0pt;line-height: 79%;text-align: justify;">X = <span class="s9">value of </span>X Y = <span class="s9">value of </span>Y Z = <span class="s9">value of </span>Z</p><p class="s11" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">?= </span>operates on the rest of the teletype line as its arguments. If the line is empty, as in the above case, it operates on all of the arguments of the broken function. If the you type <span class="s11">?= X (CAR Y)</span>, you will see the value of <span class="s11">X</span>, and the value of <span class="s11">(CAR Y)</span>. The difference between using <span class="s11">?= </span>and typing <span class="s11">X </span>and <span class="s11">(CAR Y) </span>directly to <span class="s11">BREAK1 </span>is that <span class="s11">?= </span>evaluates its inputs as of the stack frame <span class="s11">LASTPOS</span>, i.e., it uses <span class="s11">STKEVAL</span>. This provides a way of examining variables or performing computations <i>as of a particular point on the stack. </i>For example, <span class="s11">@ FOO / 2 </span>followed by <span class="s11">?= X </span>will allow you to examine the value of <span class="s11">X </span>in the previous call to <span class="s11">FOO</span>, etc.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">?= <span class="p">also recognizes numbers as referring to the correspondingly numbered argument, i.e., it uses </span>STKARG <span class="p">in this case. Thus</span></p><p class="s11" style="padding-top: 5pt;padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">:@ FIE FIE</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">:?= 2</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">will print the name and value of the second argument of <span class="s11">FIE</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">?= <span class="p">can also be used on </span>BRKCOMS <span class="p">(see Creating Breaks with BREAK1 below), in which case the next command on </span>BRKCOMS <span class="p">is treated as the rest of the teletype line. For example, if </span>BRKCOMS <span class="p">is </span>(EVAL ?= (X Y) GO)<span class="p">, </span>BRKEXP <span class="p">is evaluated, the values of </span>X <span class="p">and </span>Y <span class="p">printed, and then the function exited with its value being printed.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">?= <span class="p">prints variable values using the function </span>SHOWPRINT <span class="p">(see Chapter 25), so that if</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">SYSPRETTYFLG = T<span class="p">, the value is prettyprinted.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">?= <span class="p">is a universal mnemonic for displaying argument names and their corresponding values. In addition to being a break command, </span>?= <span class="p">is an edit macro that prints the argument names and values for the current expression (see Chapter 16), and a read macro (actually </span>? <span class="p">is the read macro character) which does the same for the current level list being read.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">PB <span class="p">[Break Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Prints the bindings of a given variable. Similar to <span class="s11">?=</span>, except ascends the stack starting from <span class="s11">LASTPOS</span>, and, for each frame in which the given variable is bound, prints the frame name and value of the variable (with <span class="s11">PRINTLEVEL </span>reset to <span class="s11">(2 . 3))</span>, e.g.</p><p class="s11" style="padding-top: 5pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">:PB FOO</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">@ FN1: 3</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">@ FN2: 10</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">@ TOP: NOBIND</p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">PB <span class="p">is also a programmer’s assistant command (see Chapter 13) that can be used when not in a break. </span>PB <span class="p">is implemented via the function </span>PRINTBINDINGS<span class="p">.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">BT <span class="p">[Break Command]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Prints a backtrace of function names starting at <span class="s11">LASTPOS</span>. The value of <span class="s11">LASTPOS </span>is changed by selecting an item from the backtrace menu (see the Break Window Variables section below) or by the <span class="s11">@ </span>command. The several nested calls in system packages such as break, edit, and the top level executive appear as the single entries <span class="s11">**BREAK**</span>,</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">**EDITOR**<span class="p">, and </span>**TOP** <span class="p">respectively.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 325pt;text-indent: 0pt;text-align: left;">ERRORS AND DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">BTV <span class="p">[Break Command]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Prints a backtrace of function names <i>with </i>variables beginning at <span class="s11">LASTPOS</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The value of each variable is printed with the function <span class="s11">SHOWPRINT </span>(see Chapter 25), so that if <span class="s11">SYSPRETTYFLG = T</span>, the value is prettyprinted.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">BTV+ <span class="p">[Break Command]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Same as <span class="s11">BTV </span>except also prints local variables and arguments to <span class="s11">SUBR</span>s.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">BTV* <span class="p">[Break Command]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Same as <span class="s11">BTV </span>except prints arguments to local variables.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">BTV! <span class="p">[Break Command]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Same as <span class="s11">BTV </span>except prints <i>everything </i>on the stack.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">BT</span>, <span class="s11">BTV</span>, <span class="s11">BTV+</span>, <span class="s11">BTV*</span>, and <span class="s11">BTV! </span>all take optional functional arguments. Use these arguments to choose functions to be <i>skipped </i>on the backtrace. As the backtrace scans down the stack, the name of each stack frame is passed to each of the arguments of the backtrace command. If any of these functions returns a non-<span class="s11">NIL </span>value, then that frame is skipped, and not shown in the backtrace. For example, <span class="s11">BT EXPRP </span>will skip all functions definied by expr definitions, <span class="s11">BTV (LAMBDA (X) (NOT (MEMB X FOOFNS))) </span>will skip all but those functions on <span class="s11">FOOFNS</span>. If used on <span class="s11">BRKCOMS </span>(see Creating Breaks with BREAK1 below) the functional argument is no longer optional, i.e., the next element on <span class="s11">BRKCOMS </span>must either be a list of functional arguments, or <span class="s11">NIL </span>if no functional argument is to be applied.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">For <span class="s11">BT</span>, <span class="s11">BTV</span>, <span class="s11">BTV+</span>, <span class="s11">BTV*</span>, and <span class="s11">BTV!</span>, if Control-P is used to change a printlevel during the backtrace, the printlevel is restored after the backtrace is completed.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The value of <span class="s11">BREAKDELIMITER</span>, initially the carriage return character, is printed to delimit the output of <span class="s11">?= </span>and backtrace commands. You can reset it (e.g. to a comma) for more linear output.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">ARGS <span class="p">[Break Command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Prints the names of the variables bound at <span class="s11">LASTPOS</span>, i.e., <span class="s11">(VARIABLES LASTPOS) </span>(see Chapter 11). For most cases, these are the arguments to the function entered at that position, i.e., <span class="s11">(ARGLIST (STKNAME LASTPOS))</span>.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">REVERT <span class="p">[Break Command]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Goes back to position <span class="s11">LASTPOS </span>on stack and reenters the function called at that point with the arguments found on the stack. If the function is not already broken, <span class="s11">REVERT </span>first breaks it, and then unbreaks it after it is reentered.</p><p class="s11" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">REVERT <span class="p">can be given the position using the conventions described for </span>@<span class="p">, e.g., </span>REVERT FOO -1 <span class="p">is equivalent to </span>@ FOO -1 <span class="p">followed by </span>REVERT<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s11">REVERT </span>is useful for restarting a computation in the situation where a bug is discovered at some point <i>below </i>where the problem actually occurred. <span class="s11">REVERT </span>essentially says “go back there and start over in a break.” <span class="s11">REVERT </span>will work correctly if the names or arguments to the function, or even its function type, have been changed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">ORIGINAL                                                 <span class="p">[Break  Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">For use in conjunction with <span class="s11">BREAKMACROS </span>(see Creating Breaks with BREAK1 below). Form is <span class="s11">(ORIGINAL . </span><span class="s16">COMS</span><span class="s11">)</span>. <span class="s16">COMS </span>are executed without regard for <span class="s11">BREAKMACROS</span>. Useful for redefining a break command in terms of itself.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">EDIT                                                     <span class="p">[Break  Command]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Designed for use in conjunction with breaks caused by errors. Facilitates editing the expression causing the break:</p><p class="s11" style="padding-top: 5pt;padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">NON-NUMERIC ARG NIL</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(IPLUS BROKEN)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">:EDIT</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">IN FOO... (IPLUS X Z) EDIT</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(3 Y)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">*OK FOO</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">:</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">and you can continue by typing <span class="s11">OK</span>, <span class="s11">EVAL</span>, etc.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This command is very simple conceptually, but its implementation is complicated by all of the exceptional cases involving interactions with compiled functions, breaks on user functions, error breaks, breaks within breaks, et al. Therefore, we shall give the following simplified explanation which will account for 90% of the situations arising in actual usage. For those others, <span class="s11">EDIT </span>will print an appropriate failure message and return to the break.</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">EDIT <span class="p">begins by searching up the stack beginning at </span>LASTPOS <span class="p">(set by </span>@ <span class="p">command, initially position of the break) looking for a form, i.e., an internal call to </span>EVAL<span class="p">. Then </span>EDIT <span class="p">continues from that point looking for a call to an interpreted function, or to </span>EVAL<span class="p">. It then calls the editor on either the </span>EXPR <span class="p">or the argument to </span>EVAL <span class="p">in such a way as to look for an expression </span>EQ <span class="p">to the form that it first found. It then prints the form, and permits interactive editing to begin. You can then type successive </span>0<span class="p">’s to the editor to see the chain of superforms for this computation.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If you exit from the edit with an <span class="s11">OK</span>, the break expression is reset, if possible, so that you can continue with the computation by simply typing <span class="s11">OK</span>. (Evaluating the new <span class="s11">BRKEXP </span>will  involve  reevaluating  the  form  that  causes  the  break,  so  that  if  <span class="s11">(PUTD  (QUOTE (FOO)) </span><span class="s16">BIG-COMPUTATION</span><span class="s11">) </span>were handled by <span class="s11">EDIT</span>, <span class="s16">BIG-COMPUTATION </span>would be reevaluated.) However, in some situations, the break expression cannot be reset. For example, if a compiled function <span class="s11">FOO </span>incorrectly called <span class="s11">PUTD </span>and caused the error <span class="s11">Arg not atom </span>followed by a break on <span class="s11">PUTD</span>, <span class="s11">EDIT </span>might be able to find the form headed by <span class="s11">FOO</span>, and also find <i>that </i>form in some higher interpreted function. But after you corrected the problem in the <span class="s11">FOO</span>-form, if any, you would still not have informed <span class="s11">EDIT </span>what to do about the immediate problem, i.e., the incorrect call to <span class="s11">PUTD</span>. However, if <span class="s11">FOO </span>were <i>interpreted</i>, <span class="s11">EDIT </span>would find the <span class="s11">PUTD </span>form itself, so that when you corrected that form, <span class="s11">EDIT </span>could use the new corrected form to reset the break expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 325pt;text-indent: 0pt;text-align: left;">ERRORS AND DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">IN? <span class="p">[Break Command]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Similar to <span class="s11">EDIT</span>, but just prints parent form, and superform, but does not call the editor, e.g.,</p><p class="s11" style="padding-top: 5pt;padding-left: 102pt;text-indent: 0pt;line-height: 88%;text-align: left;">ATTEMPT TO RPLAC NIL T</p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(RPLACD BROKEN)</p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;line-height: 9pt;text-align: left;">:IN?</p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;line-height: 10pt;text-align: left;">FOO: (RPLACD X Z)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Although <span class="s11">EDIT </span>and <span class="s11">IN? </span>were designed for error breaks, they can also be useful for user breaks. For example, if upon reaching a break on his function <span class="s11">FOO</span>, you determine that there is a problem in the <i>call </i>to <span class="s11">FOO</span>, you can edit the calling form and reset the break expression with one operation by using <span class="s11">EDIT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 30pt;text-indent: -24pt;text-align: left;">Controlling When to Break                                                                                                                       </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When an error occurs, the system has to decide whether to reset and unwind the stack, or go into a break. In the middle of a complex computation, it is usually helpful to go into a break, so that you may examine the state of the computation. However, if the computation has only proceeded a little when the error occurs, such as when you mistype a function name, you would normally just terminate a break, and it would be more convenient for the system to simply cause an error and unwind the stack in this situatuation. The decision over whether or not to induce a break depends on the depth of computation, and the amount of time invested in the computation. The actual algorithm is described in detail below; suffice it to say that the parameters affecting this decision have been adjusted empirically so that trivial type-in errors do not cause breaks, but deep errors do.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>BREAKCHECK </b><i>ERRORPOS ERXN</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">BREAKCHECK </span>is called by the error routine to decide whether or not to induce a break when a error occurs. <span class="s16">ERRORPOS </span>is the stack position at which the error occurred; <span class="s16">ERXN </span>is the error number. Returns <span class="s11">T </span>if a break should occur; <span class="s11">NIL </span>otherwise.</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">BREAKCHECK <span class="p">returns </span>T <span class="p">(and a break occurs) if the “computation depth” is greater than or equal to </span>HELPDEPTH<span class="p">. </span>HELPDEPTH <span class="p">is initially set to 7, arrived at empirically by taking into account the overhead due to </span>LISPX <span class="p">or </span>BREAK<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the depth of the computation is less than <span class="s11">HELPDEPTH</span>, <span class="s11">BREAKCHECK </span>next calculates the length of time spent in the computation. If this time is greater than <span class="s11">HELPTIME </span>milliseconds, initially set to 1000, then <span class="s11">BREAKCHECK </span>returns <span class="s11">T </span>(and a break occurs), otherwise <span class="s11">NIL</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">BREAKCHECK <span class="p">determines the “computation depth” by searching back up the stack looking for an </span>ERRORSET <span class="p">frame (</span>ERRORSET<span class="p">s indicate how far back unwinding is to take place when an error occurs, see the Catching Errors section below). At the same time, it counts the number of internal calls to </span>EVAL<span class="p">. As soon as the number of calls to </span>EVAL <span class="p">exceeds </span>HELPDEPTH<span class="p">, </span>BREAKCHECK <span class="p">immediately stops searching for an </span>ERRORSET <span class="p">and returns </span>T<span class="p">. Otherwise, </span>BREAKCHECK <span class="p">continues searching until either an </span>ERRORSET <span class="p">is found or the top of the stack is reached. (If the second argument to </span>ERRORSET <span class="p">is </span>INTERNAL<span class="p">, the </span>ERRORSET <span class="p">is ignored by </span>BREAKCHECK <span class="p">during this search.) </span>BREAKCHECK <span class="p">then counts the number of function calls between the error and the last </span>ERRORSET<span class="p">, or the top of the stack.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">The number of function calls plus the number of calls to <span class="s11">EVAL </span>(already counted) is used as the “computation depth”.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">BREAKCHECK <span class="p">determines the computation time by subtracting the value of the variable </span>HELPCLOCK <span class="p">from the value of </span>(CLOCK 2)<span class="p">, the number of milliseconds of compute time (see Chapter 12). </span>HELPCLOCK <span class="p">is rebound to the current value of </span>(CLOCK 2) <span class="p">for each computation typed in to </span>LISPX <span class="p">or to a break. The time criterion for breaking can be suppressed by setting </span>HELPTIME <span class="p">to </span>NIL <span class="p">(or a very big number), or by setting </span>HELPCLOCK <span class="p">to </span>NIL<span class="p">. Setting </span>HELPCLOCK <span class="p">to </span>NIL <span class="p">will not have any effect beyond the current computation, because </span>HELPCLOCK <span class="p">is rebound for each computation typed in to </span>LISPX <span class="p">and </span>BREAK<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">You can suppress all error breaks by setting the top level binding of the variable <span class="s11">HELPFLAG </span>to <span class="s11">NIL </span>using <span class="s11">SETTOPVAL </span>(<span class="s11">HELPFLAG </span>is bound as a local variable in <span class="s11">LISPX</span>, and reset to the global value of <span class="s11">HELPFLAG </span>on every <span class="s11">LISPX </span>line, so just <span class="s11">SETQ</span>ing it will not work.) If <span class="s11">HELPFLAG = T </span>(the initial value), the decision whether to cause an error or break is decided based on the computation time and the computation depth, as described above.  Finally, if <span class="s11">HELPFLAG = BREAK!</span>, a break will always occur following an error.</p><h4 style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Break Window Variables                                                                                                                          </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The appearance and use of break windows is controlled by the following variables:</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>WBREAK </b><i>ONFLG</i>)                                                 <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">ONFLG </span>is non-<span class="s11">NIL</span>, break windows and trace windows are enabled. If <span class="s16">ONFLG </span>is <span class="s11">NIL</span>, break windows are disabled (break windows do not appear, but the executive prompt is changed to <b>“:</b>” to indicate that the system is in a break). <span class="s11">WBREAK </span>returns <span class="s11">T </span>if break windows are currently enabled; <span class="s11">NIL </span>otherwise.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">MaxBkMenuWidth                                                 <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">MaxBkMenuHeight                                                <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The variables <span class="s11">MaxBkMenuWidth </span>(default 125) and <span class="s11">MaxBkMenuHeight </span>(default 300) control the maximum size of the backtrace menu. If this menu is too small to contain all of the frames in the backtrace, it is made scrollable in both vertical and horizontal directions.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">AUTOBACKTRACEFLG                                               <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This variable controls when and what kind of backtrace menu is automatically brought up.  The value of <span class="s11">AUTOBACKTRACEFLG </span>can be one of the following:</p><p class="s11" style="padding-top: 6pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">NIL <span class="p">The backtrace menu is not automatically brought up (the default).</span></p><p class="s11" style="padding-top: 6pt;padding-left: 156pt;text-indent: 0pt;text-align: left;">T <span class="p">On error breaks the </span>BT <span class="p">menu is brought up.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">BT! <span class="p">On error breaks the </span>BT! <span class="p">menu is brought up.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 168pt;text-indent: -38pt;text-align: left;">ALWAYS <span class="p">The </span>BT <span class="p">menu is brought up on both error breaks and user breaks (calls to functions broken by </span>BREAK<span class="p">).</span></p><p class="s11" style="padding-top: 6pt;padding-left: 124pt;text-indent: 0pt;text-align: justify;">ALWAYS! <span class="p">On both error breaks and user breaks the </span>BT! <span class="p">menu is brought up.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 325pt;text-indent: 0pt;text-align: left;">ERRORS AND DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">BACKTRACEFONT <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The backtrace menu is printed in the font <span class="s11">BACKTRACEFONT</span>.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">CLOSEBREAKWINDOWFLG <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The system normally closes break windows after the break is exited. If <span class="s11">CLOSEBREAKWINDOWFLG </span>is <span class="s11">NIL</span>, break windows will not be closed on exit. In this case, you must close all break windows.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">BREAKREGIONSPEC <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Break windows are positioned near the TTY window of the broken process, as determined by the variable <span class="s11">BREAKREGIONSPEC</span>.  The value of this variable is a region (see Chapter 27) whose <span class="s11">LEFT </span>and <span class="s11">BOTTOM </span>fields are an offset from the <span class="s11">LEFT </span>and <span class="s11">BOTTOM </span>of the TTY window. The <span class="s11">WIDTH </span>and <span class="s11">HEIGHT </span>fields of <span class="s11">BREAKREGIONSPEC </span>determine the size of the break window.</p><p class="s15" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">TRACEWINDOW <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The trace window, <span class="s11">TRACEWINDOW</span>, is used for tracing functions. It is brought up when the first tracing occurs and stays up until you close it. <span class="s11">TRACEWINDOW </span>can be set to a particular window to cause the tracing formation to print there.</p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">TRACEREGION <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The trace window is first created in the region <span class="s11">TRACEREGION</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 30pt;text-indent: -24pt;text-align: left;">Creating Breaks with BREAK1                                                                                                                 </h4><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">The basic function of the break package is <span class="s11">BREAK1</span>, which creates a break. A break appears to be a regular executive, with the prompt <b>“:</b>”, but <span class="s11">BREAK1 </span>also detects and interpretes break commands (see the Break Commands section above).</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>BREAK1 </b><i>BRKEXP BRKWHEN BRKFN BRKCOMS BRKTYPE ERRORN</i>) <span class="p">[NLambda Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">BRKWHEN </span>(evaluated) is non-<span class="s11">NIL</span>, a break occurs and commands are then taken from <span class="s16">BRKCOMS </span>or the terminal and interpreted. All inputs not recognized by <span class="s11">BREAK1 </span>are simply passed on to the programmer’s assistant.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">BRKWHEN </span>is <span class="s11">NIL</span>, <span class="s16">BRKEXP </span>is evaluated and returned as the value of <span class="s11">BREAK1</span>, without causing a break.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">When a break occurs, if <span class="s16">ERRORN </span>is a list whose <span class="s11">CAR </span>is a number, <span class="s11">ERRORMESS </span>(see the Signalling Errors section below) is called to print an identifying message. If <span class="s16">ERRORN </span>is a list whose <span class="s11">CAR </span>is not a number, <span class="s11">ERRORMESS1 </span>(see the Signalling Errors section below) is called. Otherwise, no preliminary message is printed. Following this, the message <span class="s11">(</span><span class="s16">BRKFN </span><span class="s11">broken) </span>is printed.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Since <span class="s11">BREAK1 </span>itself calls functions, when one of these is broken, an infinite loop would occur. <span class="s11">BREAK1 </span>detects this situation, and prints <span class="s11">Break within a break on </span><span class="s16">FN</span>, and then simply calls the function without going into a break.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">The commands <span class="s11">GO</span>, <span class="s11">!GO</span>, <span class="s11">OK</span>, <span class="s11">!OK</span>, <span class="s11">RETURN </span>and <span class="s19"></span><span class="s21"> </span>are the only ways to leave <span class="s11">BREAK1</span>. The command <span class="s11">EVAL </span>causes <span class="s16">BRKEXP </span>to be evaluated, and saves the value on the variable</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">!VALUE<span class="p">. Other commands can be defined for </span>BREAK1 <span class="p">via </span>BREAKMACROS <span class="p">(below).</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">BRKTYPE </span>is <span class="s11">NIL </span>for user breaks, <span class="s11">INTERRUPT </span>for Control-H breaks, and <span class="s11">ERRORX </span>for error breaks. For breaks when <span class="s16">BRKTYPE </span>is not <span class="s11">NIL</span>, <span class="s11">BREAK1 </span>will clear and save the input buffer. If the break returns a value (i.e., is not aborted via <span class="s19"></span><span class="s21"> </span>or Control-D) the input buffer is restored.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The fourth argument to <span class="s11">BREAK1 </span>is <span class="s16">BRKCOMS</span>, a list of break commands that <span class="s11">BREAK1 </span>interprets and executes as though they were keyboard input. One can think of <span class="s16">BRKCOMS </span>as another input file which always has priority over the keyboard. Whenever <span class="s16">BRKCOM</span><span class="s11">S = NIL</span>, <span class="s11">BREAK1 </span>reads its next command from the keyboard. Whenever <span class="s16">BRKCOMS </span>is non- <span class="s11">NIL</span>, <span class="s11">BREAK1 </span>takes <span class="s11">(CAR BRKCOMS) </span>as its next command and sets <span class="s16">BRKCOMS </span>to <span class="s11">(CDR BRKCOMS)</span>. For example, suppose you wished to see the value of the variable <span class="s11">X </span><i>after </i>a function was evaluated. You could set up a break with <span class="s16">BRKCOMS </span><span class="s11">= (EVAL (PRINT X) OK)</span>, which would have the desired effect. If <span class="s16">BRKCOMS </span>is non-<span class="s11">NIL</span>, the value of a break command is not printed. If you desire to see a value, you must print it yourself, as in the above example. The function <span class="s11">TRACE </span>(see Chapter 15) uses <span class="s16">BRKCOMS</span>: it sets up a break with two commands; the first one prints the arguments of the function, or whatever you specify, and the second is the command <span class="s11">GO</span>, which causes the function to be evaluated and its value printed.</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><b>Note</b>: If an error occurs while interpreting the <span class="s16">BRKCOMS </span>commands, <span class="s16">BRKCOMS </span>is set to</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">NIL<span class="p">, and a full interactive break occurs.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The break package has a facility for redirecting ouput to a file. All output resulting from <span class="s16">BRKCOMS </span>is output to the value of the variable <span class="s11">BRKFILE</span>, which should be the name of an open file. Output due to user type-in is not affected, and will always go to the terminal. <span class="s11">BRKFILE </span>is initially <span class="s11">T</span>.</p><p class="s15" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">BREAKMACROS <span class="p">[Variable]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">BREAKMACROS </span><span class="p">is a list of the form </span><span class="s11">((</span>NAME<span class="s25">1</span> COM1<span class="s25">1</span> <span class="s11">... </span>COM1<span class="s25">n</span><span class="s11">)(</span>NAME<span class="s25">2</span> COM2<span class="s25">1</span> <span class="s11">...</span></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s16">COM2</span><span class="s25">n</span><span class="s11">)...)</span>. Whenever an atomic command is given to <span class="s11">BREAK1</span>, it first searches the list <span class="s11">BREAKMACROS </span>for the command. If the command is equal to <span class="s16">NAME</span><span class="s25">i</span>, <span class="s11">BREAK1 </span>simply appends the corresponding commands to the front of <span class="s16">BRKCOMS</span>, and goes on. If the command is not found on <span class="s11">BREAKMACROS</span>, <span class="s11">BREAK1 </span>then checks to see if it is one of the built in commands, and finally, treats it as a function or variable as before.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If the command is not the name of a defined function, bound variable, or <span class="s11">LISPX </span>command, <span class="s11">BREAK1 </span>will attempt spelling correction using <span class="s11">BREAKCOMSLST </span>as a spelling list. If spelling correction is unsuccessful, <span class="s11">BREAK1 </span>will go ahead and call <span class="s11">LISPX </span>anyway, since the atom may also be a misspelled history command.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For example, the command <span class="s11">ARGS </span>could be defined by including on <span class="s11">BREAKMACROS </span>the form:</p><p class="s11" style="padding-top: 7pt;padding-left: 210pt;text-indent: 0pt;text-align: left;">(ARGS (PRINT (VARIABLES LASTPOS T)))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 325pt;text-indent: 0pt;text-align: left;">ERRORS AND DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>BREAKREAD </b><i>TYPE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Useful within <span class="s11">BREAKMACROS </span>for reading arguments. If <span class="s11">BRKCOMS </span>is non-<span class="s11">NIL </span>(the command in which the call to <span class="s11">BREAKREAD </span>appears was not typed in), returns the next break command from <span class="s11">BRKCOMS</span>, and sets <span class="s11">BRKCOMS </span>to <span class="s11">(CDR BRKCOMS)</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s11">BRKCOMS </span>is <span class="s11">NIL </span>(the command was typed in), then <span class="s11">BREAKREAD </span>returns either the rest of the commands on the line as a list (if <span class="s16">TYPE </span><span class="s11">= LINE</span>) or just the next command on the line (if <span class="s16">TYPE </span>is not <span class="s11">LINE</span>).</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, the <span class="s11">BT </span>command is defined as <span class="s11">(BAKTRACE LASTPOS NIL (BREAKREAD ’LINE) 0 T)</span>. Thus, if you type <span class="s11">BT</span>, the third argument to <span class="s11">BAKTRACE </span>is <span class="s11">NIL</span>. If you type <span class="s11">BT SUBRP</span>, the third argument is <span class="s11">(SUBRP).</span></p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">BREAKRESETFORMS <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If you are developing programs that change the way a user and Medley normally interact (e.g., change or disable the interrupt or line-editing characters, turn off echoing, etc.), debugging them by breaking or tracing may be difficult, because Medley might be in a “funny” state at the time of the break. <span class="s11">BREAKRESETFORMS </span>is designed to solve this problem. You put in <span class="s11">BREAKRESETFORMS </span>expressions suitable for use in conjunction with <span class="s11">RESETFORM </span>or <span class="s11">RESETSAVE </span>(see Changing and Restoring System State below). When a break occurs, <span class="s11">BREAK1 </span>evaluates each expression on <span class="s11">BREAKRESETFORMS </span><i>before </i>any interaction with the terminal, and saves the values. When the break expression is evaluated via an <span class="s11">EVAL</span>, <span class="s11">OK</span>, or <span class="s11">GO</span>, <span class="s11">BREAK1 </span>first restores the state of the system with respect to the various expressions on <span class="s11">BREAKRESETFORMS</span>. When control returns to <span class="s11">BREAK1</span>, the expressions on <span class="s11">BREAKRESETFORMS </span>are <i>again </i>evaluated, and their values saved. When the break is exited with an <span class="s11">OK</span>, <span class="s11">GO</span>, <span class="s11">RETURN</span>, or <span class="s19"></span><span class="s21"> </span>command, by typing Control-D, or by a <span class="s11">RETFROM </span>or <span class="s11">RETEVAL </span>you type in, <span class="s11">BREAK1 </span>again restores state. Thus the net effect is to make the break invisible with respect to your programs, but nevertheless allow you to interact in the break in the normal fashion.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">All user type-in is scanned to make the operations undoable, as described in Chapter 13. At this point, <span class="s11">RETFROM</span>s and <span class="s11">RETEVAL</span>s are also noticed. However, if you type in an expression which calls a function that then does a <span class="s11">RETFROM</span>, this <span class="s11">RETFROM </span>will not be noticed, and the effects of <span class="s11">BREAKRESETFORMS </span>will <i>not </i>be reversed.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">As mentioned earlier, <span class="s11">BREAK1 </span>detects “Break within a break” situations, and avoids infinite loops. If the loop occurs because of an error, <span class="s11">BREAK1 </span>simply rebinds <span class="s11">BREAKRESETFORMS </span>to <span class="s11">NIL</span>, and calls <span class="s11">HELP</span>. This situation most frequently occurs when there is a bug in a function called by <span class="s11">BREAKRESETFORMS</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">SETQ <span class="p">expressions can also be included on </span>BREAKRESETFORMS <span class="p">for saving and restoring system parameters, e.g. </span>(SETQ LISPXHISTORY NIL)<span class="p">, </span>(SETQ DWIMFLG NIL)<span class="p">, etc. These are handled specially by </span>BREAK1 <span class="p">in that the current value of the variable is saved before the </span>SETQ <span class="p">is executed, and upon restoration, the variable is set back to this value.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">Signalling Errors                                                                                                                                       </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">With the Medley release, Interlisp errors use the Xerox Common Lisp (XCL) error system. Most of the functions still exist for compatibility with previous releases, but the underlying machinery has changed. There are some incompatible differences, especially with respect to error numbers. All errors are now handled by signalling an object of type <span class="s11">XCL:CONDITION. </span>This means the error numbers generated are different from the old Interlisp method of registered numbers for well-known errors and error messages for all other errors. The mapping from Interlisp erors to Lisp error conditions is listed in the Error List sections below. The obsolete error numbers still generate error messages, but they are useless.</p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>ERRORX </b><i>ERXM</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Calls <span class="s11">CL:ERROR </span>after first converting <span class="s16">ERXM </span>into a condition. If <span class="s16">ERXM </span>is <span class="s11">NIL </span>the value of</p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">*LAST-CONDITION* </span>is used. If <span class="s16">ERXM </span>is an Interlisp error descriptor, it is first converted to a condition. If <span class="s16">ERXM </span>is already a condition, it is passed along unchanged. <span class="s11">ERRORX </span>also sets a proceed case for <span class="s11">XCL:PROCEED</span>, which will attempt to re-evaluate the caller of <span class="s11">ERRORX</span>, much as <span class="s11">OK </span>did in older versions of the break package.</p><p class="s16" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>ERROR </b>MESS<span class="s25">1</span> MESS<span class="s25">2</span> NOBREAK<span class="s11">) </span><span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Prints <span class="s16">MESS</span><span class="s25">1</span><span class="s16"> </span>(using <span class="s11">PRIN1</span>), followed by a space if <span class="s16">MESS</span><span class="s25">1</span><span class="s16"> </span>is an atom, otherwise a carriage return. Then <span class="s16">MESS</span><span class="s25">2</span><span class="s16"> </span>is printed (using <span class="s11">PRIN1 </span>if <span class="s16">MESS</span><span class="s25">2</span><span class="s16"> </span>is a string; otherwise <span class="s11">PRINT</span>). For example, <span class="s11">(ERROR “NON-NUMERIC ARG” T) </span>prints</p><p class="s11" style="padding-top: 5pt;padding-left: 156pt;text-indent: 0pt;line-height: 88%;text-align: left;">NON-NUMERIC ARG T</p><p style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">and <span class="s11">(ERROR ’FOO &quot;NOT A FUNCTION&quot;) </span>prints <span class="s11">FOO NOT A FUNCTION</span>. If both <span class="s16">MESS</span><span class="s25">1</span></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">and <span class="s16">MESS</span><span class="s25">2</span><span class="s16"> </span>are <span class="s11">NIL</span>, the message printed is simply <span class="s11">ERROR</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span><i>NOBREAK </i>= T<span class="p">, </span>ERROR <span class="p">prints its message and then calls </span>ERROR! <span class="p">(below). Otherwise it calls </span>(ERRORX ’(17 (<i>MESS</i><i>1</i><i> </i>. <i>MESS</i><i>2</i>)))<span class="p">, i.e., generates error number 17, in which case the decision as to whether to break, and whether to print a message, is handled as any other error.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If the value of <span class="s11">HELPFLAG </span>(see the Controlling When to Break section above) is <span class="s11">BREAK!</span>, a break will always occur, irregardless of the value of <span class="s16">NOBREAK</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>ERROR <span class="p">causes a break, the “break expression“ is </span>(ERROR MESS<span class="s35">1</span> MESS<span class="s35">2</span> NOBREAK)<span class="p">. Using the </span>GO<span class="s17">, </span>OK<span class="p">, , or </span>EVAL <span class="p">break commands (see the Break Commands section above) will simply call </span>ERROR <span class="p">again. It is sometimes helpful to design programs that call </span>ERROR <span class="p">such that if the call to </span>ERROR <span class="p">returns (as the result of using the </span>RETURN <span class="p">break command), the operation is tried again. This lrts you fix any problems within the break environment, and try to continue the operation.</span></p><p class="s16" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>HELP </b>MESS<span class="s25">1</span> MESS<span class="s25">2</span> BRKTYPE<span class="s11">) </span><span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Prints <span class="s16">MESS</span><span class="s25">1</span><span class="s16"> </span>and <span class="s16">MESS</span><span class="s25">2</span><span class="s16"> </span>similar to <span class="s11">ERROR</span>, and then calls <span class="s11">BREAK1 </span>passing <span class="s16">BRKTYPE </span>as the <span class="s11">BRKTYPE </span>argument. If both <span class="s16">MESS</span><span class="s25">1</span><span class="s16"> </span>and <span class="s16">MESS</span><span class="s25">2</span><span class="s16"> </span>are <span class="s11">NIL</span>, <span class="s11">Help! </span>is used for the message. <span class="s11">HELP </span>is a convenient way to program a default condition, or to terminate some portion of a program which the computation is theoretically never supposed to reach.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 325pt;text-indent: 0pt;text-align: left;">ERRORS AND DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>SHOULDNT </b><i>MESS</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Useful in situations when a program detects a condition that should never occur. Calls <span class="s11">HELP </span>with the message arguments <span class="s16">MESS </span>and <span class="s11">“Shouldn’t happen!</span>” and a <span class="s11">BRKTYPE </span>argument of <span class="s11">’ERRORX</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ERROR!</b>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Equivalent to <span class="s11">XCL:ABORT</span>, except that if no <span class="s11">ERRORSET </span>or <span class="s11">XCL:CATCH-ABORT </span>isa found, it unwinds to the top of the process.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>RESET</b>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Programmable Control-D; immediately returns to the top level<span class="s10">.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">*LAST-CONDITION* <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Value is the condition object most recently signaled.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>SETERRORN </b><i>NUM MESS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Converts its arguments into a condition, then sets the value of <span class="s11">*LAST-CONDITION* </span>to the result.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ERRORMESS </b><i>U</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Prints message corresponding to its first argument. For example, <span class="s11">(ERRORMESS ’(17 T)) </span>would print<span class="s11">: T is not a LIST</span></p><p class="s16" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s11">(</span><b>ERRORMESS1 </b>MESS<span class="s25">1</span> MESS<span class="s25">2</span> MESS<span class="s25">3</span><span class="s11">) </span><span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Prints the message corresponding to a <span class="s11">HELP </span>or <span class="s11">ERROR </span>break.</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>ERRORSTRING </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns as a new string the message corresponding to error number <span class="s16">X</span>, e.g.,</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(ERRORSTRING 10) = “NON-NUMERIC ARG<span class="p">”.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 30pt;text-indent: -24pt;text-align: left;">Catching Errors                                                                                                                                         </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">All error conditions are not caused by program bugs. For some programs, it is reasonable for some errors to occur (such as file not found errors) and it is possible for the program to handle the error itself. There are a number of functions that allow a program to “catch” errors, rather than abort the computation or cause a break.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ERRORSET </b><i>FORM FLAG</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">Performs </span>(EVAL <i>FORM</i>)<span class="p">. If no error occurs in the evaluation of </span><i>FORM</i><span class="p">, the value of </span>ERRORSET <span class="p">is a list containing one element, the value of </span>(EVAL <i>FORM</i>)<span class="p">. If an error did occur, the value of </span>ERRORSET <span class="p">is </span>NIL<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">ERRORSET </span>is a lambda function, so its arguments are evaluated <i>before </i>it is entered, i.e., <span class="s11">(ERRORSET X) </span>means <span class="s11">EVAL </span>is called with the <i>value </i>of <span class="s11">X</span>. In most cases, <span class="s11">ERSETQ </span>and <span class="s11">NLSETQ </span>(below) are more useful.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Note<span class="p">: Beginning with the Medley release, there are no longer frames named </span><span class="s11">ERRORSET</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">on the stack and any programs that explicity look for them must be changed.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><b>Performance Note</b>: When a call to <span class="s11">ERSETQ </span>or <span class="s11">NLSETQ </span>is compiled, the form to be evaluated is compiled as a separate function. However, compiling a call to <span class="s11">ERRORSET </span>does not compile <span class="s16">FORM</span>. Therefore, if <span class="s16">FORM </span>performs a lengthy computation, using <span class="s11">ERSETQ </span>or <span class="s11">NLSETQ </span>can be much more efficient than using <span class="s11">ERRORSET</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The argument <span class="s16">FLAG </span>controls the printing of error messages if an error occurs. If a <i>break</i></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">occurs below an <span class="s11">ERRORSET</span>, the message is printed regardless of the value of <span class="s16">FLAG</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FLAG </span><span class="s11">= T</span>, the error message is printed; if <span class="s16">FLAG </span><span class="s11">= NIL</span>, the error message is not printed (unless <span class="s11">NLSETQGAG </span>is <span class="s11">NIL</span>, see below).</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">FLAG </span><span class="s11">= INTERNAL</span>, this <span class="s11">ERRORSET </span>is ignored for the purpose of deciding whether or not to break or print a message (see the Controlling When to Break section above). However, the <span class="s11">ERRORSET </span>is in effect for the purpose of flow of control, i.e., if an error occurs, this <span class="s11">ERRORSET </span>returns <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FLAG </span><span class="s11">= NOBREAK</span>, no break will occur, even if the time criterion for breaking is met (the Controlling When to Break section above). <span class="s16">FLAG </span><span class="s11">= NOBREAK </span>will <i>not </i>prevent a break from occurring if the error occurs more than <span class="s11">HELPDEPTH </span>function calls below the errorset, since <span class="s11">BREAKCHECK </span>will stop searching before it reaches the <span class="s11">ERRORSET</span>. To guarantee that no break occurs, you would also either have to reset <span class="s11">HELPDEPTH </span>or <span class="s11">HELPFLAG</span>.</p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>ERSETQ </b><i>FORM</i>)                                          <span class="p">[NLambda Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Evaluates <span class="s16">FORM</span>, letting a break happen if an error occurs, but 9<span class="s11">^ </span>brings you back to the</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">ERSETQ<span class="p">. Performs </span>(ERRORSET ’<i>FORM </i>T), <span class="p">printing error messages.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>NLSETQ </b><i>FORM</i>)                                          <span class="p">[NLambda Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Evaluates <span class="s16">FORM</span>, witout breaking, returning <span class="s11">NIL </span>if an error occurs or a list containing <span class="s16">FORM </span>if no error occurs. Performs <span class="s11">(ERRORSET ’</span><span class="s16">FORM </span><span class="s11">NIL), </span>without printing error messages.</p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">NLSETQGAG                                                      <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">NLSETQGAG </span>is <span class="s11">NIL</span>, error messages will print, regardless of the <span class="s16">FLAG </span>argument of <span class="s11">ERRORSET</span>. <span class="s11">NLSETQGAG </span>effectively changes all <span class="s11">NLSETQ</span>s to <span class="s11">ERSETQ</span>s. <span class="s11">NLSETQGAG </span>is initially <span class="s11">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 78pt;text-indent: -24pt;text-align: left;">Changing and Restoring System State                                                                                                   </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">In Medley, a computation can be interrupted / aborted at any point due to an error, or more forcefully, because a Control-D was typed, causing return to the top level. This situation creates problems for programs that need to perform a computation with the system in a “different state”, e.g., different radix, input file, readtable, etc. but want to be able to restore the state when the computation has completed. While program errors and Control-E are “caught” by <span class="s11">ERRORSET</span>s, Control-D is not. The program could redefine Control-D as a user interrupt (see Chapter 30), check for it, reenable it, and</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 325pt;text-indent: 0pt;text-align: left;">ERRORS AND DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">call <span class="s11">RESET </span>or something similar. Thus the system may be left in its changed state as a result of the computation being aborted. The following functions address this problem.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">These functions cannot handle the situation where their environment is exited via anything other than a normal return, an error, or a reset. Therefore, a <span class="s11">RETEVAL</span>, <span class="s11">RETFROM</span>, <span class="s11">RESUME</span>, etc., will never be seen.</p><p class="s16" style="padding-top: 7pt;padding-left: 77pt;text-indent: -24pt;text-align: left;"><span class="s11">(</span><b>RESETLST </b>FORM<span class="s25">1</span> ... FORM<span class="s25">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s11">RESETLST </span>evaluates its arguments in order, after setting up an <span class="s11">ERRORSET </span>so that any reset operations performed by <span class="s11">RESETSAVE </span>(see below) are restored when the forms have been evaluated (or an error occurs, or a Control-D is typed). If no error occurs, the value of <span class="s11">RESETLST </span>is the value of <span class="s16">FORM</span><span class="s25">N</span>, otherwise <span class="s11">RESETLST </span>generates an error (after performing the necessary restorations).</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">RESETLST <span class="p">compiles open.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 77pt;text-indent: -24pt;text-align: left;">(<b>RESETSAVE </b><i>X Y</i>) <span class="p">[NLambda NoSpread Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">RESETSAVE <span class="p">is used within a call to </span>RESETLST <span class="p">to change the system state by calling a function or setting a variable, while specifying how to restore the original system state when the </span>RESETLST <span class="p">is exited (normally, or with an error or Control-D).</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is atomic, resets the top level value of <span class="s16">X </span>to the value of <span class="s16">Y</span>. For example, <span class="s11">(RESETSAVE LISPXHISTORY EDITHISTORY) </span>resets the value of <span class="s11">LISPXHISTORY </span>to the value of <span class="s11">EDITHISTORY</span>, and provides for the original value of <span class="s11">LISPXHISTORY </span>to be restored when the <span class="s11">RESETLST </span>completes operation, (or an error occurs, or a Control-D is typed).</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><b>Note</b>: If the variable is simply rebound, the <span class="s11">RESETSAVE </span>will not affect the most recent binding but will change only the top level value, and therefore probably not have the intended effect.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">X </span>is not atomic, it is a form that is evaluated. If <span class="s16">Y </span>is <span class="s11">NIL</span>, <span class="s16">X </span>must return as its value its “former state”, so that the effect of evaluating the form can be reversed, and the system state can be restored, by applying <span class="s11">CAR </span>of <span class="s16">X </span>to the value of <span class="s16">X</span>. For example, <span class="s11">(RESETSAVE (RADIX 8)) </span>performs <span class="s11">(RADIX 8)</span>, and provides for <span class="s11">RADIX </span>to be reset to its original value when the <span class="s11">RESETLST </span>completes by applying <span class="s11">RADIX </span>to the value returned by <span class="s11">(RADIX 8)</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">In the special case that <span class="s11">CAR </span>of <span class="s16">X </span>is <span class="s11">SETQ</span>, the <span class="s11">SETQ </span>is transparent for the purposes of <span class="s11">RESETSAVE</span>, i.e. you could also have written <span class="s11">(RESETSAVE (SETQ X (RADIX 8)))</span>, and restoration would be performed by applying <span class="s11">RADIX</span>, not <span class="s11">SETQ</span>, to the previous value of <span class="s11">RADIX</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">Y </span>is not <span class="s11">NIL</span>, it is evaluated (before <span class="s16">X</span>), and its <i>value </i>is used as the restoring expression. This is useful for functions which do not return their “previous setting”.  For example,</p><p class="s11" style="padding-top: 4pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">[RESETSAVE (SETBRK ...) (LIST ’SETBRK (GETBRK]</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">will restore the break characters by applying <span class="s11">SETBRK </span>to the value returned by <span class="s11">(GETBRK)</span>, which was computed before the <span class="s11">(SETBRK ...) </span>expression was evaluated. The restoration expression is “evaluated” by <i>applying </i>its <span class="s11">CAR </span>to its <span class="s11">CDR</span>. This insures that the “arguments” in the <span class="s11">CDR </span>are not evaluated again.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is <span class="s11">NIL</span>, <span class="s16">Y </span>is still treated as a restoration expression. Therefore,</p><p class="s11" style="padding-top: 4pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">(RESETSAVE NIL (LIST ’CLOSEF FILE))</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">will cause <span class="s11">FILE </span>to be closed when the <span class="s11">RESETLST </span>that the <span class="s11">RESETSAVE </span>is under completes (or an error occurs or a Control-D is typed).</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s11">RESETSAVE </span>can be called when <i>not </i>under a <span class="s11">RESETLST</span>. In this case, the restoration is performed at the next <span class="s11">RESET</span>, i.e., Control-D or call to <span class="s11">RESET</span>. In other words, there is an “implicit” <span class="s11">RESETLST </span>at the top-level executive.</p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">RESETSAVE <span class="p">compiles open. Its value is not a “useful” quantity.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>RESETVAR </b><i>VAR NEWVALUE FORM</i>) <span class="p">[NLambda Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">Simplified form of </span>RESETLST <span class="p">and </span>RESETSAVE <span class="p">for resetting and restoring global variables. Equivalent to </span>(RESETLST (RESETSAVE <i>VAR NEWVALUE</i>) <i>FORM</i>)<span class="p">. For example, </span>(RESETVAR LISPXHISTORY EDITHISTORY (FOO)) <span class="p">resets </span>LISPXHISTORY <span class="p">to</span></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">the value of <span class="s11">EDITHISTORY </span>while evaluating <span class="s11">(FOO)</span>. <span class="s11">RESETVAR </span>compiles open. If no error occurs, its value is the value of <span class="s16">FORM</span>.</p><p class="s16" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>RESETVARS </b>VARSLST E<span class="s29">1 </span>E<span class="s29">2 </span>... E<span class="s29">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">PROG</span>, except that the variables in <span class="s16">VARSLST </span>are global variables. In a deep bound system (like Medley), each variable is “rebound” using <span class="s11">RESETSAVE</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">In a shallow bound system (like Interlisp-10) <span class="s11">RESETVARS </span>and <span class="s11">PROG </span>are identical, except that the compiler insures that variables bound in a <span class="s11">RESETVARS </span>are declared as <span class="s11">SPECVARS </span>(see Chapter 18).</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">RESETVARS<span class="p">, like </span>GETATOMVAL <span class="p">and </span>SETATOMVAL <span class="p">(see Chapter 2), is provided to permit compatibility (i.e. transportablility) between a shallow bound and deep bound system with respect to conceptually global variables.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: Like <span class="s11">PROG</span>, <span class="s11">RESETVARS </span>returns <span class="s11">NIL </span>unless a <span class="s11">RETURN </span>statement is executed.</p><p class="s16" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>RESETFORM </b>RESETFORM FORM<span class="s29">1 </span>FORM<span class="s29">2 </span>... FORM<span class="s29">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">Simplified form of </span>RESETLST <span class="p">and </span>RESETSAVE <span class="p">for resetting a system state when the corresponding function returns as its value the “previous setting.” Equivalent to </span>(RESETLST (RESETSAVE <i>RESETFORM</i>) <i>FORM</i><span class="s29">1 </span><i>FORM</i><span class="s29">2 </span><b>... </b><i>FORM</i><span class="s29">N</span>)<span class="p">. For example,</span></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s11">(RESETFORM (RADIX 8) (FOO))</span>. <span class="s11">RESETFORM </span>compiles open. If no error occurs, it returns the value returned by <span class="s16">FORM</span><span class="s29">N</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">For some applications, the restoration operation must be different depending on whether the computation completed successfully or was aborted somehow (e.g., by an error or by typing Control- D). To facilitate this, while the restoration operation is being performed, the value of <span class="s11">RESETSTATE </span>is bound to <span class="s11">NIL</span>, <span class="s11">ERROR</span>, <span class="s11">RESET</span>, or <span class="s11">HARDRESET </span>depending on whether the exit was normal, due to an error, due to a reset (i.e., Control-D), or due to call to <span class="s11">HARDRESET </span>(see Chapter 23). As an example of the use of <span class="s11">RESETSTATE</span>,</p><p class="s11" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(RESETLST</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(RESETSAVE (INFILE X)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 325pt;text-indent: 0pt;text-align: left;">ERRORS AND DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LIST ’[LAMBDA (FL)</p><p class="s11" style="padding-left: 184pt;text-indent: -34pt;line-height: 88%;text-align: left;">(COND ((EQ RESETSTATE ’RESET) (CLOSEF FL)</p><p class="s11" style="padding-left: 189pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DELFILE FL]</p><p class="s11" style="padding-left: 221pt;text-indent: 0pt;line-height: 9pt;text-align: left;">X))</p><p class="s16" style="padding-left: 222pt;text-indent: 0pt;line-height: 10pt;text-align: left;">FORMS<span class="s11">)</span></p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">will cause <span class="s11">X </span>to be closed and deleted only if a Control-D was typed during the execution of <span class="s16">FORMS</span>.</p><p style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">When specifying complicated restoring expressions, it is often necessary to use the old value of the saving expression. For example, the following expression will set the primary input file (to <span class="s11">FL</span>) and execute some forms, but reset the primary input file only if an error or Control-D occurs.</p><p class="s11" style="padding-top: 4pt;padding-left: 65pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(RESETLST</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 88%;text-align: left;">(SETQ TEM (INPUT FL)) (RESETSAVE NIL</p><p class="s11" style="padding-left: 162pt;text-indent: -32pt;line-height: 88%;text-align: left;">(LIST ’(LAMBDA (X) (AND RESETSTATE (INPUT X))) TEM))</p><p class="s16" style="padding-left: 113pt;text-indent: 0pt;line-height: 9pt;text-align: left;">FORMS<span class="s11">)</span></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">So that you will not have to explicitely save the old value, the variable <span class="s11">OLDVALUE </span>is bound at the time the restoring operation is performed to the value of the saving expression. Using this, the previous example could be recoded as:</p><p class="s11" style="padding-top: 4pt;padding-left: 65pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(RESETLST</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(RESETSAVE (INPUT FL)</p><p class="s11" style="padding-left: 130pt;text-indent: 0pt;line-height: 9pt;text-align: left;">’(AND RESETSTATE (INPUT OLDVALUE)))</p><p class="s16" style="padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">FORMS<span class="s11">)</span></p><p style="padding-top: 4pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">As mentioned earlier, restoring is performed by applying <span class="s11">CAR </span>of the restoring expression to the <span class="s11">CDR</span>, so <span class="s11">RESETSTATE </span>and <span class="s11">(INPUT OLDVALUE) </span>will not be evaluated by the <span class="s11">APPLY</span>. This particular example works because <span class="s11">AND </span>is an nlambda function that explicitly evaluates its arguments, so <span class="s11">APPLY</span>ing <span class="s11">AND </span>to <span class="s11">(RESETSTATE (INPUT OLDVALUE)) </span>is the same as <span class="s11">EVAL</span>ing <span class="s11">(AND RESETSTATE</span></p><p class="s11" style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">(INPUT OLDVALUE))<span class="p">. </span>PROGN <span class="p">also has this property, so you can use a lambda function as a restoring form by enclosing it within a </span>PROGN<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">The function <span class="s11">RESETUNDO </span>(see Chapter 13) can be used in conjunction with <span class="s11">RESETLST </span>and <span class="s11">RESETSAVE </span>to provide a way of specifying that the system be restored to its prior state by <i>undoing </i>the side effects of the computations performed under the <span class="s11">RESETLST</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 30pt;text-indent: -24pt;text-align: left;">Error List                                                                                                                                                    </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are currently fifty-plus types of errors in Medley. Some of these errors are implementation dependent, i.e., appear in Medley but may not appear in other Interlisp systems. The error number is set internally by the code that detects the error before it calls the error handling functions, and is used by <span class="s11">ERRORMESS </span>for printing error messages.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Most errors will print the offending expression as part of the error message. Error number 18 (Control-B) always causes a break (unless <span class="s11">HELPFLAG </span>is <span class="s11">NIL</span>). All other errors cause breaks if <span class="s11">BREAKCHECK </span>returns <span class="s11">T </span>(see Controlling When to Break above).</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The folloing error messages are arranged numerically with the printed message next to the error number. <span class="s16">X </span>is the offending expression in each error message. The obsolete error numbers still generate error messags, but they aren’t particularly useful. For information on how to use the Common Lisp error conditions in your own programs, see <i>Common Lisp: the Language </i>by Steele.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l22"><li><p style="padding-left: 96pt;text-indent: -16pt;text-align: left;">Obsolete.</p></li><li><p style="padding-top: 2pt;padding-left: 96pt;text-indent: -16pt;text-align: left;">Obsolete.</p></li><li><p class="s15" style="padding-top: 2pt;padding-left: 96pt;text-indent: -16pt;text-align: left;">Stack Overflow</p><p style="padding-top: 4pt;padding-left: 95pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Occurs when computation is too deep, either with respect to number of function calls, or number of variable bindings. Usually because of a non-terminating recursive computation, i.e., a bug. Condition type: <span class="s11">STACK-OVERFLOW</span>.</p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 96pt;text-indent: -16pt;text-align: left;">RETURN to nonexistant block: <i>X</i></p><p style="padding-top: 3pt;padding-left: 95pt;text-indent: 0pt;text-align: left;">Call to <span class="s11">RETURN </span>when not inside of an interpreted <span class="s11">PROG</span>. Condition type: <span class="s11">ILLEGAL-RETURN</span>.</p></li><li><p class="s42" style="padding-top: 3pt;padding-left: 96pt;text-indent: -16pt;text-align: left;">X <span class="s15">is not a LIST</span></p><p class="s11" style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">RPLACA <span class="p">called on a non-list. Condition type: </span>XCL:SIMPLE-TYPE-ERROR <i>culprit</i></p><p class="s11" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">:EXPECTED-TYPE ’LIST</p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 96pt;text-indent: -16pt;text-align: left;">Device error: <i>X</i></p><p style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">An error with the local disk drive. Condition type: <span class="s11">XCL:SIMPLE-DEVICE-ERROR </span><span class="s16">message</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 96pt;text-indent: -16pt;text-align: left;">Serious condition XCL:ATTEMPT-TO-CHANGE-CONSTANT occured.</p><p style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">Via <span class="s11">SET </span>or <span class="s11">SETQ</span>. Condition type: <span class="s11">XCL:ATTEMPT-TO-CHANGE-CONSTANT</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 96pt;text-indent: -16pt;text-align: left;">Attempt to rplac NIL with <i>X</i></p><p style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">Attempt either to <span class="s11">RPLACA </span>or to <span class="s11">RPLACD NIL </span>with something other than <span class="s11">NIL</span>. Condition type:</p><p class="s11" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">XCL:ATTEMPT-TO-RPLAC-NIL <i>message</i></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 96pt;text-indent: -16pt;text-align: left;">GO to a nonexistant tag: <i>X</i><span class="p">.</span></p><p class="s11" style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">GO <span class="p">when not inside of a </span>PROG<span class="p">, or </span>GO <span class="p">to nonexistent label. Condition type: </span>ILLEGAL-GO <i>tag</i></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 96pt;text-indent: -16pt;text-align: left;">File won’t open: <i>X</i></p><p style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">From <span class="s11">OPENSTREAM </span>(see Chapter 24). Condition type: <span class="s11">XCL:FILE-WONT-OPEN </span><span class="s16">pathname</span></p></li><li><p class="s42" style="padding-top: 3pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">X <span class="s15">is not a NUMBER</span></p><p class="s11" style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;text-align: left;"><span class="p">A numeric function e.g., </span>PLUS<span class="p">, </span>TIMES<span class="p">, </span>GREATERP<span class="p">, expected a number and didn’t get one. Condition type: </span>XCL:SIMPLE-TYPE-ERROR <i>culprit </i>:EXPECTED TYPE ’CL:NUMBER</p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Symbol name too long</p><p style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;text-align: justify;">Attempted to create a symbol (via <span class="s11">PACK</span>, or typing one in, or reading from a file) with too many characters. In Medley, the maximum number of characters in a symbol is 255. Condition type: <span class="s11">XCL:SYMBOL-NAME-TOO-LONG</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Symbol hash table full</p><p style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">No room for any more (new) atoms. Condition type: <span class="s11">XCL:SYMBOL-HT-FULL</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Stream not open: <i>X</i></p><p style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">From an I / O function, e.g., <span class="s11">READ</span>, <span class="s11">PRINT</span>, <span class="s11">CLOSEF</span>. Condition type: <span class="s11">XCL:STREAM-NOT-OPEN</span></p><p class="s16" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">stream</p></li><li><p class="s42" style="padding-top: 3pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">X <span class="s15">is not a SYMBOL.</span></p><p class="s11" style="padding-top: 3pt;padding-left: 96pt;text-indent: 0pt;line-height: 107%;text-align: left;">SETQ<span class="p">, </span>PUTPROP<span class="p">, </span>GETTOPVAL<span class="p">, etc., given a non-atomic argument. Condition type: </span>XCL:SMPLE- TYPE-ERROR <i>culprit </i>:EXPECTED-TYPE ’CL:SYMBOL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 325pt;text-indent: 0pt;text-align: left;">ERRORS AND DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 48pt;text-indent: -21pt;text-align: left;">Obsolete</p></li><li><p class="s15" style="padding-top: 2pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">End of file <i>X</i></p><p style="padding-top: 3pt;padding-left: 48pt;text-indent: 0pt;text-align: justify;">From an input function, e.g., <span class="s11">READ</span>, <span class="s11">READC</span>, <span class="s11">RATOM</span>. After the error occurs, the file will still be left open. Condition type: <span class="s11">END-OF-FILE </span><span class="s16">stream</span></p></li><li><p class="s42" style="padding-top: 3pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">X varying messages<span class="s15">.</span></p><p style="padding-top: 3pt;padding-left: 48pt;text-indent: 0pt;text-align: justify;">Call to <span class="s11">ERROR </span>(see Signalling Errors above). Condition type: <span class="s11">INTERLISP-ERROR MESSAGE</span></p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Obsolete</p></li><li><p class="s15" style="padding-top: 2pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Illegal stack arg: <i>X</i></p><p style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A stack function expected a stack position and was given something else. This might occur if the arguments to a stack function are reversed. Also occurs if you specified a stack position with a function name, and that function was not found on the stack (see Chapter 11). Condition type: <span class="s11">ILLEGAL-STACK-ARG </span><span class="s16">arg</span>.</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Obsolete</p></li><li><p class="s15" style="padding-top: 2pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Array space full</p><p style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;line-height: 91%;text-align: justify;">System will first initiate a garbage collection of array space, and if no array space is reclaimed, will then generate this error.  Condition type:  <span class="s11">XCL:ARRAY-SPACE-FULL</span>.</p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">File system resources exceeded<span class="p">: </span><i>X</i></p><p style="padding-top: 3pt;padding-left: 48pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Includes no more disk space, disk quota exceeded, directory full, etc. Condition type: <span class="s11">XCL:FS- RESOURCE-EXCEEDED</span></p></li><li><p class="s15" style="padding-top: 2pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">File not found</p><p style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;line-height: 91%;text-align: justify;">File name does not correspond to a file in the corresponding directory. Can also occur if file name is ambiguous. Condition type: <span class="s11">XCL:FILE-NOT-FOUND </span><i>pathname</i></p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Obsolete</p></li><li><p class="s15" style="padding-top: 2pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Invalid argument: <i>X</i></p><p style="padding-top: 3pt;padding-left: 48pt;text-indent: 0pt;line-height: 107%;text-align: justify;">A form ends in a non-list other than <span class="s11">NIL</span>, e.g., <span class="s11">(CONS T . 3)</span>. Condition type: <span class="s11">INVALID- ARGUMENT-LIST </span><span class="s16">argument</span></p></li><li><p class="s15" style="padding-top: 2pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Hash table full<span class="p">: </span><i>X</i></p><p style="padding-top: 3pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">See hash array functions, Chapter 6. Condition type: <span class="s11">XCL:HASH-TABLE-FULL </span><span class="s16">table</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Invalid argument: <i>X</i></p><p style="padding-top: 3pt;padding-left: 48pt;text-indent: 0pt;line-height: 107%;text-align: left;">Catch-all error. Currently used by <span class="s11">PUTD</span>, <span class="s11">EVALA</span>, <span class="s11">ARG</span>, <span class="s11">FUNARG</span>, etc. Condition type: <span class="s11">INVALID- ARGUMENT-LIST </span><span class="s16">argument</span></p></li><li><p class="s15" style="padding-top: 2pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">X is not a ARRAYP.</p><p class="s11" style="padding-top: 3pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">ELT <span class="p">or </span>SETA <span class="p">given an argument that is not a legal array (see Chapter 5). Condition type:</span></p><p class="s11" style="padding-left: 48pt;text-indent: 0pt;text-align: left;">XCL:SIMPLE-TYPE-ERROR <i>culprit </i>:EXPECTED-TYPE ’ARRAYP</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Obsolete</p></li><li><p class="s15" style="padding-top: 2pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Stack ptr ahs been released NOBIND</p><p style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;line-height: 91%;text-align: left;">A released stack pointer was supplied as a stack descriptor for a purpose other than as a stack pointer to be re-used (see Chapter 11). Condition type: <span class="s11">STACK-POINTER-REALEASED </span><span class="s16">name</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s15" style="padding-left: 96pt;text-indent: -21pt;text-align: left;">Serious condition XCL:STORAGE-EXHAUSTED occured.</p><p style="padding-top: 3pt;padding-left: 95pt;text-indent: 0pt;text-align: justify;">Following a garbage collection, if not enough words have been collected, and there is no un- allocated space left in the system, this error is generated. Condition type: <span class="s11">XCL:STORAGE- EXHAUSTED</span></p></li><li><p style="padding-top: 3pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Obsolete</p></li><li><p style="padding-top: 2pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Obsolete</p></li><li><p class="s15" style="padding-top: 2pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">No more data types available</p><p style="padding-top: 3pt;padding-left: 95pt;text-indent: 0pt;line-height: 107%;text-align: justify;">All available user data types have been allocated (see Chapter 8). Condition type: <span class="s11">XCL:DATA- TYPES-EXHAUSTED</span></p></li><li><p class="s15" style="padding-top: 2pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Serious condition XCL:ATTEMPT-TO-CHANGE-CONSTANT occured.</p><p style="padding-top: 3pt;padding-left: 95pt;text-indent: 0pt;text-align: left;">In a <span class="s11">PROG </span>or <span class="s11">LAMBDA </span>expression. Condition type: <span class="s11">XCL:ATTEMPT-TO-CHANGE-CONSTANT</span></p></li><li><p style="padding-top: 3pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Obsolete</p></li><li><p style="padding-top: 2pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Obsolete</p></li><li><p class="s42" style="padding-top: 2pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">X <span class="s15">is not a READTABLEP.</span></p><p style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">The  argument  was  expected  to  be  a  valid  read  table  (see  Chapter  25).    Condition  type:</p><p class="s11" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">XCL:SIMPLE-TYPE-ERROR <i>culprit </i>:EXPECTED-TYPE ’READTABLEP</p></li><li><p class="s42" style="padding-top: 3pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">X <span class="s15">is not a TERMTABLEP.</span></p><p style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">The  argument  was  expected  to  be  a  valid  terminal  table  (see  Chapter  30).    Condition type:</p><p class="s11" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">XCL:SIMPLE-TYPE-ERROR <i>culprit </i>:EXPECTED-TYPE ’TERMTABLEP</p></li><li><p style="padding-top: 3pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Obsolete</p></li><li><p class="s15" style="padding-top: 2pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Protection violation<span class="p">: </span><i>X</i></p><p style="padding-top: 4pt;padding-left: 95pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Attempt to open a file that you do not have access to. Also reference to unassigned device. Condition type:  <span class="s11">XCL:FS-PROTECTION-VIOLATION</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Invalid pathname: <i>X</i></p><p style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Illegal   character   in   file   specification,   illegal   syntax,   e.g.   two   <b>;</b>’s   etc.      Condition   type:</p><p class="s11" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">XCL:INVALID-PATHNAME <i>pathname</i></p></li><li><p style="padding-top: 3pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Obsolete</p></li><li><p class="s42" style="padding-top: 2pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">X <span class="s15">is an unbound variable</span></p><p style="padding-top: 4pt;padding-left: 95pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This occurs when a variable (symbol) was used which had neither a stack binding (wasn’t an argument to a function nor a <span class="s11">PROG </span>variable) nor a top level value. The “culprit” (<span class="s11">(CADR ERRORMESS)</span>) is the symbol. If DWIM corrects the error, no error occurs and the error number is not set. However, if an error is going to occur, whether or not it will cause a break, the error number will be set. Condition type: <span class="s11">UNBOUND-VARIABLE </span><span class="s16">name</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 96pt;text-indent: -21pt;text-align: left;">Serious condition UNDEFINED-CAR-OF-FORM occured.</p><p style="padding-top: 3pt;padding-left: 100pt;text-indent: 0pt;text-align: center;">Undefined function error.   This occurs when a form is evaluated whose function position (<span class="s11">CAR</span>) does not have a definition as a function.  Condition type:  <span class="s11">UNDEFINE-CAR-OF FORM  </span><span class="s16">function</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 325pt;text-indent: 0pt;text-align: left;">ERRORS AND DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s42" style="padding-left: 48pt;text-indent: -21pt;text-align: left;">X varying messages<span class="s15">.</span></p><p style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: left;">This error is generated if <span class="s11">APPLY </span>is given an undefined function. Culprit is <span class="s16">(LIST FN ARGS)</span></p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Condition type: <span class="s11">UNDEFINED-FUNCTION-IN-APPLY</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">CONTROL <span class="s17">E</span></p><p style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: justify;">Control-E was typed. Condition type: <span class="s11">XCL:CONTROL-E-INTERRUPT</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Floating point underflow.</p><p style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">Underflow during floating-point operation. Condition type: <span class="s11">XCL:FLOATING-UNDERFLOW</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Floating point overflow.</p><p style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">Overflow during floating-point operation. Condition type: <span class="s11">XCL:OVERFLOW</span></p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Obsolete</p></li><li><p class="s42" style="padding-top: 2pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">X <span class="s15">is not a HASH-TABLE</span></p><p style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">Hash array operations given an argument that is not a hash array. Condition type:</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: justify;">XCL:SIMPLE-TYPE-ERROR <i>culprit </i>:EXPECTED-TYPE ’CL:HASH-TABLE</p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 48pt;text-indent: -21pt;text-align: left;">Too many arguments to <i>X</i></p><p style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: justify;">Too many arguments given to a lambda-spread, lambda-nospread, or nlambda-spread function.</p><p style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley does not cause an error if more arguments are passed to a function than it is defined with. This argument occurs when more individual arguments are passed to a function than Medley can store on the stack at once. The limit is currently 80 arguments.</p><p class="s11" style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: justify;"><span class="p">In addition, many system functions, e.g., </span>DEFINE<span class="p">, </span>ARGLIST<span class="p">, </span>ADVISE<span class="p">, </span>LOG<span class="p">, </span>EXPT<span class="p">, etc, also generate errors with appropriate messages by calling </span>ERROR <span class="p">(see Signalling Errors above) which causes error number 17. Condition type: </span>TOO-MANY-ARGUMENTS <i>callee </i>:MAXIMUM CL:CALL-ARGUMENTS-LIMIT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l23"><li><p class="s6" style="padding-top: 4pt;padding-left: 279pt;text-indent: -25pt;text-align: left;"><a name="bookmark16">BREAKING, TRACING, AND ADVISING</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="608" height="4" alt="image" src="Image_037.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">Medley provides several different facilities for modifing the behavior of a function without actually editing its definition. By “breaking” a function, you can cause breaks to occur at various times in the running of an incomplete program, so that the program state can be inspected. “Tracing” a function causes information to be printed every time the function is entered or exited.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">“Advising” is a facility for specifying longer-term function modifications. Even system functions can be changed through advising.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Breaking Functions and Debugging                                                                                                       </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Debugging a collection of Lisp functions involves isolating problems within particular functions and / or determining when and where incorrect data are being generated and transmitted. In the Medley, there are three facilities which allow you to (temporarily) modify selected function definitions so that you can follow the flow of control in your programs, and obtain this debugging information. All three redefine functions in terms of a system function, <span class="s11">BREAK1 </span>(see Chapter 14).</p><p style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s11">BREAK </span>modifies the definition of a function <span class="s16">FN</span>, so that whenever <span class="s16">FN </span>is called and a break condition (user-defined) is satisfied, a function break occurs. You can then interrogate the state of the machine, perform any computation, and continue or return from the call.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;"><span class="s11">TRACE </span>modifies a definition of a function <span class="s16">FN </span>so that whenever <span class="s16">FN </span>is called, its arguments (or some other user-specified values) are printed. When the value of <span class="s16">FN </span>is computed it is printed also. <span class="s11">TRACE </span>is a special case of <span class="s11">BREAK</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">BREAKIN <span class="p">allows you to insert a breakpoint inside an expression defining a function. When the breakpoint is reached and if a break condition (defined by you) is satisfied, a temporary halt occurs and you can again investigate the state of the computation.</span></p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">The following two examples illustrate these facilities. In the first example, the function <span class="s11">FACTORIA</span>L is traced. <span class="s11">TRACE </span>redefines <span class="s11">FACTORIAL </span>so that it print its arguments and value, and then goes on with the computation. When an error occurs on the fifth recursion, a full interactive break occurs. The situation is then the same as though <span class="s11">(BREAK FACTORIAL) </span>had been performed instead of <span class="s11">(TRACE FACTORIAL)</span>, now you can evaluate various Interlisp forms and direct the course of the computation. In this case, the variable <span class="s11">N </span>is examined, and <span class="s11">BREAK1 </span>is instructed to return 1 as the value of this cell to <span class="s11">FACTORIAL</span>. The rest of the tracing proceeds without incident. Presumably, <span class="s11">FACTORIAL </span>would be edited to change <span class="s11">L </span>to <span class="s11">1</span>.</p><p class="s19" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">PP FACTORIAL (FACTORIAL</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">[LAMBDA (N) (COND</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((ZEROP N)</p><p class="s11" style="padding-left: 142pt;text-indent: 0pt;line-height: 9pt;text-align: left;">L)</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(T (ITIMES N (FACTORIAL (SUB1 N])</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 9pt;text-align: left;">FACTORIAL</p><p class="s19" style="padding-left: 78pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">(TRACE FACTORIAL) (FACTORIAL)</span></p><p class="s19" style="padding-left: 78pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s11">(FACTORIAL 4)</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 88%;text-align: left;">FACTORIAL:</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 88%;text-align: left;">N = 4</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 147pt;text-indent: 0pt;line-height: 10pt;text-align: left;">FACTORIAL:</p><p class="s11" style="padding-left: 147pt;text-indent: 0pt;line-height: 9pt;text-align: left;">N = 3</p><p class="s11" style="padding-left: 169pt;text-indent: 0pt;line-height: 9pt;text-align: left;">FACTORIAL:</p><p class="s11" style="padding-left: 169pt;text-indent: 0pt;line-height: 9pt;text-align: left;">N = 2</p><p class="s11" style="padding-left: 190pt;text-indent: 0pt;line-height: 88%;text-align: left;">FACTORIAL:</p><p class="s11" style="padding-left: 190pt;text-indent: 0pt;line-height: 88%;text-align: left;">N = 1</p><p class="s11" style="padding-left: 212pt;text-indent: 0pt;line-height: 88%;text-align: left;">FACTORIAL:</p><p class="s11" style="padding-left: 212pt;text-indent: 0pt;line-height: 88%;text-align: left;">N = 0</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 88%;text-align: left;">UNBOUND ATOM L</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(FACTORIAL BROKEN)</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 88%;text-align: left;">:N 0</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 8pt;text-align: left;">:RETURN 1</p><p class="s11" style="padding-left: 7pt;text-indent: 0pt;line-height: 10pt;text-align: center;">FACTORIAL = 1</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">FACTORIAL = 1</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">FACTORIAL = 2</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">FACTORIAL = 6</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">FACTORIAL = 24</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 9pt;text-align: left;">24</p><p class="s19" style="padding-left: 126pt;text-indent: 0pt;line-height: 10pt;text-align: left;"></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">In the second example, a non-recursive definition of <span class="s11">FACTORIAL </span>has been constructed. <span class="s11">BREAKIN </span>is used to insert a call to <span class="s11">BREAK1 </span>just after the <span class="s11">PROG </span>label <span class="s11">LOOP</span>. This break is to occur only on the last two iterations, when <span class="s11">N </span>is less than 2. When the break occurs, in trying to look at the value of <span class="s11">N, NN </span>is mistakenly typed. The break is maintained, however, and no damage is done. After examining <span class="s11">N </span>and <span class="s11">M </span>the computation is allowed to continue by typing <span class="s11">OK</span>. A second break occurs after the next iteration, this time with <span class="s11">N = 0</span>. When this break is released, the function <span class="s11">FACTORIAL </span>returns its value of <span class="s11">120</span>.</p><p class="s19" style="padding-top: 8pt;padding-left: 138pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">PP FACTORIAL (FACTORIAL</span></p><p class="s11" style="padding-left: 165pt;text-indent: -16pt;line-height: 88%;text-align: left;">[LAMBDA (N) (PROG ((M 1))</p><p class="s11" style="padding-left: 181pt;text-indent: 0pt;line-height: 9pt;text-align: left;">LOOP (COND</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 8pt;padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((ZEROP N)</p><p class="s11" style="padding-left: 8pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(RETURN M)))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">FACTORIAL</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 88%;text-align: left;">(SETQ M (ITIMES M N)) (SETQ N (SUB1 N))</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(GO LOOP])</p><p class="s19" style="padding-top: 5pt;padding-left: 138pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">(BREAKIN FACTORIAL (AFTER LOOP) (ILESSP N 2] SEARCHING...</span></p><p class="s11" style="padding-left: 138pt;text-indent: 0pt;line-height: 9pt;text-align: left;">FACTORIAL</p><p class="s19" style="padding-top: 5pt;padding-left: 138pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">((FACTORIAL 5) ((FACTORIAL) BROKEN)</span></p><p class="s11" style="padding-left: 138pt;text-indent: 0pt;line-height: 88%;text-align: left;">:NN U.B.A. NN</p><p class="s11" style="padding-left: 138pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(FACTORIAL BROKEN AFTER LOOP)</p><p class="s11" style="padding-left: 138pt;text-indent: 0pt;line-height: 88%;text-align: left;">:N 1</p><p class="s11" style="padding-left: 138pt;text-indent: 0pt;line-height: 88%;text-align: left;">:M 120</p><p class="s11" style="padding-left: 138pt;text-indent: 0pt;line-height: 88%;text-align: left;">:OK (FACTORIAL)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 276pt;text-indent: 0pt;text-align: left;">BREAKING, TRACING, AND ADVISING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((FACTORIAL) BROKEN)</p><p class="s11" style="padding-left: 90pt;text-indent: 0pt;line-height: 88%;text-align: left;">:N 0</p><p class="s11" style="padding-left: 90pt;text-indent: 0pt;line-height: 88%;text-align: left;">:OK (FACTORIAL) 120</p><p class="s19" style="padding-left: 90pt;text-indent: 0pt;line-height: 9pt;text-align: left;"></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: <span class="s11">BREAK </span>and <span class="s11">TRACE </span>can also be used on CLISP words which appear as <span class="s11">CAR </span>of form, e.g. <span class="s11">FETCH</span>, <span class="s11">REPLACE</span>, <span class="s11">IF</span>, <span class="s11">FOR</span>, <span class="s11">DO</span>, etc., even though these are not implemented as functions. For conditional breaking, you can refer to the entire expression via the variable <span class="s11">EXP</span>, e.g. <span class="s11">(BREAK (FOR (MEMB ’UNTIL EXP)))</span>.</p><p class="s11" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>BREAK0 </b><i>FN WHEN COMS — —</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Sets up a break on the function <span class="s16">FN</span>; returns <span class="s16">FN</span>. If <span class="s16">FN </span>is not defined, returns <span class="s11">(</span><span class="s16">FN </span><span class="s11">NOT DEFINED)</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The value of <span class="s16">WHEN</span>, if non-<span class="s11">NIL</span>, should be an expression that is evaluated whenever <span class="s16">FN </span>is entered. If the value of the expression is non-<span class="s11">NIL</span>, a break is entered, otherwise the function simply called and returns without causing a break. This provides the means of conditionally breaking a function.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The value of <span class="s16">COMS</span>, if non-<span class="s11">NIL</span>, should be a list of break commands, that are interpreted and executed if a break occurs.  (See the <span class="s16">BRKCOMS </span>argument to <span class="s11">BREAK1</span>, Chapter 14.)</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">BREAK0 <span class="p">sets up a break by doing the following:</span></p><p style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">Redefines <span class="s16">FN </span>as a call to <span class="s11">BREAK1 </span>(Chapter 14), passing an equivalent definition of <span class="s16">FN</span>, <span class="s16">WHEN</span>, <span class="s16">FN</span>, and <span class="s16">COMS </span>as the <span class="s11">BRKEXP</span>, <span class="s16">BRKWHEN</span>, <span class="s16">BRKFN</span>, and <span class="s16">BRKCOMS </span>arguments to <span class="s11">BREAK1</span></p><p style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">Defines a <span class="s11">GENSYM </span>(Chapter 2) with the original definition of <span class="s16">FN</span>, and puts it on the property list of <span class="s16">FN </span>under the property <span class="s11">BROKEN</span></p><p style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">Puts the form <span class="s11">(BREAK0 </span><span class="s16">WHEN COMS</span><span class="s11">) </span>on the property list of <span class="s16">FN </span>under the property <span class="s11">BRKINFO </span>(for use in conjunction with <span class="s11">REBREAK</span>)</p><p style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">Adds <span class="s16">FN </span>to the front of the list <span class="s11">BROKENFNS</span>.</p><p class="s16" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>FN <span class="p">is non-atomic and of the form </span><span class="s11">(</span>FN<span class="s25">1</span> <span class="s11">IN </span>FN<span class="s25">2</span><span class="s11">)</span><span class="p">, </span><span class="s11">BREAK0 </span><span class="p">breaks every call to </span>FN<span class="s25">1</span> <span class="p">from within </span>FN<span class="s25">2</span><span class="p">. This is useful for breaking on a function that is called from many places, but where one is only interested in the call from a specific function, e.g., </span><span class="s11">(RPLACA IN FOO)</span><span class="p">, </span><span class="s11">(PRINT IN FIE), </span><span class="p">etc. It is similar to </span><span class="s11">BREAKIN </span><span class="p">described below, but can be performed even when </span>FN<span class="s25">2</span> <span class="p">is compiled or blockcompiled, whereas </span><span class="s11">BREAKIN </span><span class="p">only works on interpreted functions. If </span>FN<span class="s25">1</span> <span class="p">is not found in </span>FN<span class="s25">2</span><span class="p">, </span><span class="s11">BREAK0 </span><span class="p">returns the value </span><span class="s11">(</span>FN<span class="s25">1</span> <span class="s11">NOT FOUND IN </span>FN<span class="s25">2</span><span class="s11">)</span><span class="p">.</span></p><p class="s16" style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s11">BREAK0 </span><span class="p">breaks one function </span><span class="s9">inside </span><span class="p">another by first calling a function which changes the name of </span>FN<span class="s25">1</span> <span class="p">wherever it appears inside of </span>FN<span class="s25">2</span> <span class="p">to that of a new function, </span>FN1<span class="s11">-IN-</span>FN2<span class="p">, which is initially given the same function definition as </span>FN<span class="s25">1</span><span class="p">. Then </span><span class="s11">BREAK0 </span><span class="p">proceeds to</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="p">break on </span>FN1<span class="s11">-IN-</span>FN2 <span class="p">exactly as described above. In addition to breaking </span>FN1<span class="s11">-IN-</span>FN2 <span class="p">and adding </span>FN1<span class="s11">-IN-</span>FN2 <span class="p">to the list </span><span class="s11">BROKENFNS</span><span class="p">, </span><span class="s11">BREAK0 </span><span class="p">adds </span>FN1 <span class="p">to the property value for the property </span><span class="s11">NAMESCHANGED </span><span class="p">on the property list of </span>FN<span class="s25">2</span> <span class="p">and puts </span><span class="s11">(</span>FN<span class="s25">2</span> <span class="s11">. </span>FN<span class="s25">1</span><span class="s11">) </span><span class="p">on the property list of </span>FN1<span class="s11">-IN-</span>FN2 <span class="p">under the property </span><span class="s11">ALIAS</span><span class="p">. This will enable </span><span class="s11">UNBREAK </span><span class="p">to recognize what changes have been made and restore the function </span>FN<span class="s25">2</span> <span class="p">to its original state.</span></p><p style="padding-top: 8pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FN </span>is nonatomic and not of the above form, <span class="s11">BREAK0 </span>is called for each member of <span class="s16">FN </span>using the same values for <span class="s16">WHEN</span>, <span class="s16">COMS</span>, and <span class="s16">FILE</span>. This distributivity permits you to specify complicated break conditions on several functions. For example,</p><p class="s11" style="padding-top: 5pt;padding-left: 166pt;text-indent: -16pt;line-height: 88%;text-align: left;">(BREAK0 ’(FOO1 ((PRINT PRIN1) IN (FOO2 FOO3))) ’(NEQ X T)</p><p class="s11" style="padding-left: 166pt;text-indent: 0pt;line-height: 9pt;text-align: left;">’(EVAL ?= (Y Z) OK) )</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 107%;text-align: left;">will break on <span class="s11">FOO1</span>, <span class="s11">PRINT-IN-FOO2</span>, <span class="s11">PRINT-IN-FOO3</span>, <span class="s11">PRIN1-IN-FOO2 </span>and <span class="s11">PRIN1- IN-FOO3.</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FN </span>is non-atomic, the value of <span class="s11">BREAK0 </span>is a list of the functions broken.</p><p class="s11" style="padding-top: 7pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">(<b>BREAK </b><i>X</i>) <span class="p">[NLambda NoSpread Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="p">For each atomic argument, it performs </span>(BREAK0 <i>ATOM </i>T)<span class="p">. For each list, it performs </span>(APPLY ’BREAK0 <i>LIST</i>)<span class="p">. For example, </span>(BREAK FOO1 (FOO2 (GREATERP N 5) (EVAL))) <span class="p">is equivalent to </span>(BREAK0 ’FOO1 T) <span class="p">and </span>(BREAK0 ’FOO2 ’(GREATERP N 5) ’(EVAL))<span class="p">.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">(<b>TRACE </b><i>X</i>) <span class="p">[NLambda NoSpread Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="p">For each atomic argument, it performs </span>(BREAK0 <i>ATOM </i>T ’(TRACE ?= NIL GO))<span class="p">. The flag </span>TRACE <span class="p">is checked for in </span>BREAK1 <span class="p">and causes the message </span><i>“FUNCTION </i>:<span class="p">” to be printed instead of </span>(<i>FUNCTION </i>BROKEN)<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For each list argument, <span class="s11">CAR </span>is the function to be traced, and <span class="s11">CDR </span>the forms to be viewed, i.e., <span class="s11">TRACE </span>performs:</p><p class="s11" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(BREAK0 (CAR <i>LIST</i>) T (LIST ’TRACE ’?= (CDR <i>LIST</i>) ’GO))</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For example, <span class="s11">(TRACE FOO1 (FOO2 Y)) </span>causes both <span class="s11">FOO1 </span>and <span class="s11">FOO2 </span>to be traced. All the arguments of <span class="s11">FOO1 </span>are printed; only the value of <span class="s11">Y </span>is printed for <span class="s11">FOO2</span>. In the special case when you want to see <i>only </i>the value, you can perform <span class="s11">(TRACE (</span><span class="s16">FUNCTION</span><span class="s11">))</span>. This sets up a break with commands <span class="s11">(TRACE ?= (NIL) GO)</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: You can always call <span class="s11">BREAK0 </span>to obtain combination of options of <span class="s11">BREAK1 </span>not directly available with <span class="s11">BREAK </span>and <span class="s11">TRACE</span>. These two functions merely provide convenient ways of calling <span class="s11">BREAK0</span>, and will serve for most uses.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: <span class="s11">BREAK0</span>, <span class="s11">BREAK</span>, and <span class="s11">TRACE </span>print a warning if you try to modify a function on the list <span class="s11">UNSAFE.TO.MODIFY.FNS </span>(Chapter 10).</p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>BREAKIN </b><i>FN WHERE WHEN COMS</i>)                           <span class="p">[NLambda Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">BREAKIN </span>enables you to insert a break, i.e., a call to <span class="s11">BREAK1 </span>(Chapter 14), at a specified location in the interpreted function <span class="s16">FN</span>. <span class="s11">BREAKIN </span>can be used to insert breaks before or after <span class="s11">PROG </span>labels, particular <span class="s11">SETQ </span>expressions, or even the evaluation of a variable. This</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 276pt;text-indent: 0pt;text-align: left;">BREAKING, TRACING, AND ADVISING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">is because <span class="s11">BREAKIN </span>operates by calling the editor and actually inserting a call to <span class="s11">BREAK1 </span>at a specified point <i>inside </i>of the function. If <span class="s16">FN </span>is a compiled function, <span class="s11">BREAKIN </span>returns <span class="s11">(</span><span class="s16">FN </span><span class="s11">UNBREAKABLE) </span>as its value.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">WHEN </span>should be an expression that is evaluated whenever the break is entered. If the value of the expression is non-<span class="s11">NIL</span>, a break is entered, otherwise the function simply called and returns without causing a break. This provides the means of creating a conditional break.  For <span class="s11">BREAKIN</span>, unlike <span class="s11">BREAK0</span>, if <span class="s16">WHEN </span>is <span class="s11">NIL</span>, it defaults to <span class="s11">T</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s16">COMS</span>, if non-<span class="s11">NIL</span>, should be a list of break commands, that are interpreted and executed if a break occurs. (See the <span class="s16">BRKCONMS </span>argument to <span class="s11">BREAK1</span>, Chapter 14.)</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s16">WHERE </span>specifies where in the definition of <span class="s16">FN </span>the call to <span class="s11">BREAK1 </span>is to be inserted. <span class="s16">WHERE </span>should be a list of the form <span class="s11">(BEFORE ...), (AFTER ...)</span>, or <span class="s11">(AROUND ...)</span>. You specify where the break is to be inserted by a sequence of editor commands, preceded by one of the symbols <span class="s11">BEFORE</span>, <span class="s11">AFTER</span>, or <span class="s11">AROUND</span>, which <span class="s11">BREAKIN </span>uses to determine what to do once the editor has found the specified point, i.e., put the call to <span class="s11">BREAK1 BEFORE </span>that point, <span class="s11">AFTER </span>that point, or <span class="s11">AROUND </span>that point. For example, <span class="s11">(BEFORE COND) </span>will insert a break before the first occurrence of <span class="s11">COND</span>, <span class="s11">(AFTER COND 2 1) </span>will insert a break after the predicate in the first <span class="s11">COND </span>clause, <span class="s11">(AFTER BF (SETQ X &amp;)) </span>after the <i>last </i>place <span class="s11">X </span>is set. Note that <span class="s11">(BEFORE TTY:) </span>or <span class="s11">(AFTER TTY:) </span>permit you to type in commands to the editor, locate the correct point, and verify it, and exit from the editor with <span class="s11">OK</span>. <span class="s11">BREAKIN </span>then inserts the break <span class="s11">BEFORE</span>, <span class="s11">AFTER</span>, or <span class="s11">AROUND </span>that point.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: A <span class="s11">STOP </span>command typed to <span class="s11">TTY: </span>produces the same effect as an unsuccessful edit command in the original specification, e.g., <span class="s11">(BEFORE CONDD)</span>. In both cases, the editor aborts, and <span class="s11">BREAKIN </span>types <span class="s11">(NOT FOUND)</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">WHERE </span>is <span class="s11">(BEFORE ...) </span>or <span class="s11">(AFTER ...)</span>, the break expression is <span class="s11">NIL</span>, since the value of the break is irrelevant. For <span class="s11">(AROUND ...)</span>, the break expression will be the indicated form. In this case, you can use the <span class="s11">EVAL </span>command to evaluate that form, and examine its value, before allowing the computation to proceed. For example, if you inserted a break after a <span class="s11">COND </span>predicate, e.g., <span class="s11">(AFTER (EQUAL X Y))</span>, you would be powerless to alter the flow of computation if the predicate were not true, since the break would not be reached. However, by breaking <span class="s11">(AROUND (EQUAL X Y))</span>, you can evaluate the break expression, i.e., <span class="s11">(EQUAL X Y)</span>, look at its value, and return something else if desired.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FN </span>is interpreted, <span class="s11">BREAKIN </span>types <span class="s11">SEARCHING</span>... while it calls the editor. If the location specified by <span class="s16">WHERE </span>is not found, <span class="s11">BREAKIN </span>types <span class="s11">(NOT FOUND) </span>and exits. If it is found, <span class="s11">BREAKIN </span>puts <span class="s11">T </span>under the property <span class="s11">BROKEN-IN </span>and <span class="s11">(</span><span class="s16">WHERE WHEN COMS</span><span class="s11">) </span>under the the property <span class="s11">BRKINFO </span>on the property list of <span class="s16">FN</span>, and adds <span class="s16">FN </span>to the front of the list <span class="s11">BROKENFNS</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Multiple break points, can be inserted with a single call to <span class="s11">BREAKIN </span>by using a list of the form <span class="s11">((BEFORE ...) ... (AROUND ...)) </span>for <span class="s16">WHERE</span>. It is also possible to call <span class="s11">BREAK </span>or <span class="s11">TRACE </span>on a function which has been modified by <span class="s11">BREAKIN</span>, and conversely to <span class="s11">BREAKIN </span>a function which has been redefined by a call to <span class="s11">BREAK </span>or <span class="s11">TRACE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The message typed for a <span class="s11">BREAKIN </span>break is <span class="s11">((</span><span class="s16">FN</span><span class="s11">) BROKEN)</span>, where <span class="s16">FN </span>is the name of the function inside of which the break was inserted. Any error, or typing control-E, will cause the full identifying message to be printed, e.g., <span class="s11">(FOO BROKEN AFTER COND 2 1)</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A special check is made to avoid inserting a break inside of an expression headed by any member of the list <span class="s11">NOBREAKS</span>, initialized to <span class="s11">(GO QUOTE *)</span>, since this break would never be activated. For example, if <span class="s11">(GO L) </span>appears before the label <span class="s11">L</span>, <span class="s11">BREAKIN (AFTER L) </span>will not insert the break inside of the <span class="s11">GO </span>expression, but skip this occurrence of <span class="s11">L </span>and go on to the next L, in this case the label <span class="s11">L</span>. Similarly, for <span class="s11">BEFORE </span>or <span class="s11">AFTER </span>breaks, <span class="s11">BREAKIN </span>checks to make sure that the break is being inserted at a “safe” place. For example, if you request a break <span class="s11">(AFTER X) </span>in <span class="s11">(PROG ... (SETQ X &amp;) ...)</span>, the break will actually be inserted after <span class="s11">(SETQ X &amp;)</span>, and a message printed to this effect, e.g., <span class="s11">BREAK INSERTED AFTER (SETQ X &amp;)</span>.</p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>UNBREAK </b><i>X</i>)                                    <span class="p">[NLambda NoSpread  Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">UNBREAK <span class="p">takes an indefinite number of functions modified by </span>BREAK<span class="p">, </span>TRACE<span class="p">, or </span>BREAKIN <span class="p">and restores them to their original state by calling </span>UNBREAK0<span class="p">. Returns list of values of </span>UNBREAK0<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(UNBREAK) <span class="p">will unbreak all functions on </span>BROKENFNS<span class="p">, in reverse order. It first sets</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">BRKINFOLST <span class="p">to </span>NIL<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">(UNBREAK T) <span class="p">unbreaks just the first function on </span>BROKENFNS<span class="p">, i.e., the most recently broken function.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>UNBREAK0 </b><i>FN —</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Restores <span class="s16">FN </span>to its original state. If <span class="s16">FN </span>was not broken, value is <span class="s11">(NOT BROKEN) </span>and no changes are made. If <span class="s16">FN </span>was modified by <span class="s11">BREAKIN</span>, <span class="s11">UNBREAKIN </span>is called to edit it back to its original state. If <span class="s16">FN </span>was created from <span class="s11">(</span><span class="s16">FN</span><span class="s25">1</span><span class="s16"> </span><span class="s11">IN </span><span class="s16">FN</span><span class="s25">2</span><span class="s11">)</span>, (i.e., if it has a property <span class="s11">ALIAS</span>), the function in which <span class="s16">FN </span>appears is restored to its original state. All dummy functions that were created by the break are eliminated. Adds property value of <span class="s11">BRKINFO </span>to the front of <span class="s11">BRKINFOLST</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s17">Note</span><span class="p">: </span>(UNBREAK0 ’(<i>FN</i><i>1</i><i> </i>IN <i>FN</i><i>2</i>)) <span class="p">is allowed: </span>UNBREAK0 <span class="p">will operate on </span>(<i>FN</i><i>1</i>-IN-</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">FN<span class="s25">2</span><span class="s11">) </span><span class="p">instead.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>UNBREAKIN </b><i>FN</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Performs the appropriate editing operations to eliminate all changes made by <span class="s11">BREAKIN</span>.</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FN <span class="p">may be either the name or definition of a function. Value is </span>FN<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">UNBREAKIN </span>is automatically called by <span class="s11">UNBREAK </span>if <span class="s16">FN </span>has property <span class="s11">BROKEN-IN </span>with value <span class="s11">T </span>on its property list.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>REBREAK </b><i>X</i>)                                    <span class="p">[NLambda NoSpread  Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Nlambda nospread function for rebreaking functions that were previously broken without having to respecify the break information. For each function on <span class="s16">X</span>, <span class="s11">REBREAK </span>searches <span class="s11">BRKINFOLST </span>for break(s) and performs the corresponding operation. Value is a</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 276pt;text-indent: 0pt;text-align: left;">BREAKING, TRACING, AND ADVISING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">list of values corresponding to calls to <span class="s11">BREAK0 </span>or <span class="s11">BREAKIN</span>. If no information is found for a particular function, returns <span class="s11">(</span><span class="s16">FN </span>- <span class="s11">NO BREAK INFORMATION SAVED)</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(REBREAK) <span class="p">rebreaks everything on </span>BRKINFOLST<span class="p">, so </span>(REBREAK) <span class="p">is the inverse of</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(UNBREAK)<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">(REBREAK T) <span class="p">rebreaks just the first break on </span>BRKINFOLST<span class="p">, i.e., the function most recently unbroken.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CHANGENAME </b><i>FN FROM TO</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Replaces all occurrences of <span class="s16">FROM </span>by <span class="s16">TO </span>in the definition of <span class="s16">FN</span>. If <span class="s16">FN </span>is defined by an expr definition, <span class="s11">CHANGENAME </span>performs <span class="s11">(ESUBST </span><span class="s16">TO FROM </span><span class="s11">(GETD </span><span class="s16">FN</span><span class="s11">)) </span>(see Chapter 16). If <span class="s16">FN </span>is compiled, <span class="s11">CHANGENAME </span>searches the literals of <span class="s16">FN </span>(and all of its compiler generated subfunctions), replacing each occurrence of <span class="s16">FROM </span>with <span class="s16">TO</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note that <span class="s16">FROM </span>and <span class="s16">TO </span>do not have to be functions, e.g., they can be names of variables, or any other literals.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">CHANGENAME </span>returns <span class="s16">FN </span>if at least one instance of <span class="s16">FROM </span>was found, otherwise <span class="s11">NIL</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>VIRGINFN </b><i>FN FLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The function that knows how to restore functions to their original state regardless of any amount of breaks, breakins, advising, compiling and saving exprs, etc. It is used by <span class="s11">PRETTYPRINT</span>, <span class="s11">DEFINE</span>, and the compiler.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FLG </span><span class="s11">= NIL</span>, as for <span class="s11">PRETTYPRINT</span>, it does not modify the definition of <span class="s16">FN </span>in the process of producing a “clean” version of the definition; it works on a copy.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FLG </span><span class="s11">= T</span>, as for the compiler and <span class="s11">DEFINE</span>, it physically restores the function to its original state, and prints the changes it is making, e.g., <span class="s11">FOO UNBROKEN</span>, <span class="s11">FOO UNADVISED</span>, <span class="s11">FOO NAMES RESTORED</span>, etc.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the virgin function definition.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Advising                                                                                                                                                     </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The operation of advising gives you a way of modifying a function without necessarily knowing how the function works or even what it does. Advising consists of modifying the  <i>interface </i>between functions as opposed to modifying the function definition itself, as in editing. <span class="s11">BREAK</span>, <span class="s11">TRACE</span>, and <span class="s11">BREAKDOWN</span>, are examples of the use of this technique: they each modify user functions by placing relevant computations <i>between </i>the function and the rest of the programming environment.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The principal advantage of advising, aside from its convenience, is that it allows you to treat anyone’s functions as “black boxes,” and to modify them without concern for their contents or details of operations. For example, you could modify <span class="s11">SYSOUT </span>to set <span class="s11">SYSDATE </span>to the time and date of creation by <span class="s11">(ADVISE ’SYSOUT ’(SETQ SYSDATE (DATE)))</span>.</p><p style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">As with <span class="s11">BREAK</span>, advising works equally well on compiled and interpreted functions. Similarly, it is possible to make a change which only operates when a function is called from some other specified function. For example, you can modify the interface between two particular functions, instead of the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">interface between one function and the rest of the world. This latter feature is especially useful for changing the <i>internal </i>workings of a system function.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, suppose you wanted <span class="s11">TIME </span>(Chapter 22) to print the results of your measurements to the file <span class="s11">FOO </span>instead of the terminal. You can accomplish this by <span class="s11">(ADVISE ’((PRIN1 PRINT SPACES) IN TIME) ’BEFORE ’(SETQQ U FOO)).</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Advising <span class="s11">PRIN1</span>, <span class="s11">PRINT</span>, or <span class="s11">SPACES </span>directly would have affected all calls to these frequently used functions, whereas advising <span class="s11">((PRIN1 PRINT SPACES) IN TIME) </span>affects just those calls to <span class="s11">PRIN1</span>, <span class="s11">PRINT</span>, and <span class="s11">SPACES </span>from <span class="s11">TIME</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Advice can also be specified to operate after a function has been evaluated. The value of the body of the original function can be obtained from the variable <span class="s11">!VALUE</span>, as with <span class="s11">BREAK1</span>.</p><p class="s6" style="padding-top: 8pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Implementation of Advising</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">After a function has been modified several times by <span class="s11">ADVISE</span>, it will look like:</p><p class="s11" style="padding-top: 5pt;padding-left: 166pt;text-indent: -16pt;line-height: 88%;text-align: left;">(LAMBDA arguments (PROG (!VALUE)</p><p class="s11" style="padding-left: 198pt;text-indent: -16pt;line-height: 88%;text-align: left;">(SETQ !VALUE (PROG NIL</p><p class="s11" style="padding-left: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">advice1</p><p class="s11" style="text-indent: 0pt;line-height: 8pt;text-align: center;">.</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">.     <span class="s9">advice before</span></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">.</p><p class="s11" style="padding-left: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">advicen</p><p class="s11" style="padding-left: 44pt;text-indent: 0pt;line-height: 8pt;text-align: center;">(RETURN <i>BODY</i>)))</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">advice1</p><p class="s11" style="text-indent: 0pt;line-height: 8pt;text-align: center;">.</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">.     <span class="s9">advice after</span></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">.</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">advicem</p><p class="s11" style="padding-left: 182pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(RETURN !VALUE)))</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">where <span class="s16">BODY </span>is equivalent to the original definition. If <span class="s16">FN </span>was originally an expr definition, <span class="s16">BODY </span>is the body of the definition, otherwise a form using a <span class="s11">GENSYM </span>which is defined with the original definition.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The structure of a function modified by <span class="s11">ADVISE </span>allows a piece of advice to bypass the original definition by using the function <span class="s11">RETURN</span>. For example, if <span class="s11">(COND ((ATOM X</span><b>) </b><span class="s11">(RETURN Y))) </span>were one of the pieces of advice <i>before </i>a function, and this function was entered with <span class="s11">X </span>atomic, <span class="s11">Y </span>would be returned as the value of the inner <span class="s11">PROG</span>, <span class="s11">!VALUE </span>would be set to <span class="s11">Y</span>, and control passed to the advice, if any, to be executed <span class="s11">AFTER </span>the function. If this same piece of advice appeared <i>after </i>the function, <span class="s11">Y </span>would be returned as the value of the entire advised function.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The advice <span class="s11">(COND ((ATOM X) (SETQ !VALUE Y))) </span><i>after </i>the function would have a similar effect, but the rest of the advice <i>after </i>the function would still be executed.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><b>Note</b>: Actually, <span class="s11">ADVISE </span>uses its own versions of <span class="s11">PROG</span>, <span class="s11">SETQ</span>, and <span class="s11">RETURN</span>, (called <span class="s11">ADV-PROG, ADV- SETQ</span>, and <span class="s11">ADV-RETURN</span>) to enable advising these functions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 276pt;text-indent: 0pt;text-align: left;">BREAKING, TRACING, AND ADVISING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">Advise Functions</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;"><span class="s11">ADVISE </span>is a function of four arguments: <span class="s16">FN</span>, <span class="s16">WHEN</span>, <span class="s16">WHERE</span>, and <span class="s16">WHAT</span>. <span class="s16">FN </span>is the function to be modified by advising, <span class="s16">WHAT </span>is the modification, or piece of advice. <span class="s16">WHEN </span>is either <span class="s11">BEFORE</span>, <span class="s11">AFTER</span>, or <span class="s11">AROUND</span>, and indicates whether the advice is to operate <span class="s11">BEFORE</span>, <span class="s11">AFTER</span>, or <span class="s11">AROUND </span>the body of the function definition. <span class="s16">WHERE </span>specifies exactly where in the list of advice the new advice is to be placed, e.g., <span class="s11">FIRST</span>, or <span class="s11">(BEFORE PRINT) </span>meaning before the advice containing <span class="s11">PRINT</span>, or <span class="s11">(AFTER 3) </span>meaning after the third piece of advice, or even <span class="s11">(: TTY:)</span>. If <span class="s16">WHERE </span>is specified, <span class="s11">ADVISE </span>first checks to see if it is one of <span class="s11">LAST</span>, <span class="s11">BOTTOM</span>, <span class="s11">END</span>, <span class="s11">FIRST</span>, or <span class="s11">TOP</span>, and operates accordingly. Otherwise, it constructs an appropriate edit command and calls the editor to insert the advice at the corresponding location.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Both <span class="s16">WHEN </span>and <span class="s16">WHERE </span>are optional arguments, in the sense that they can be omitted in the call to <span class="s11">ADVISE</span>. In other words, <span class="s11">ADVISE </span>can be thought of as a function of two arguments <span class="s11">(ADVISE </span><span class="s16">FN WHAT</span><span class="s11">)</span>, or a function of three arguments: <span class="s11">(ADVISE </span><span class="s16">FN WHEN WHAT</span><span class="s11">)</span>, or a function of four arguments: <span class="s11">(ADVISE </span><span class="s16">FN WHEN WHERE WHAT</span><span class="s11">)</span>. Note that the advice is always the <i>last </i>argument. If <span class="s16">WHEN </span><span class="s11">= NIL</span>, <span class="s11">BEFORE </span>is used. If <span class="s16">WHERE </span><span class="s11">= NIL</span>, <span class="s11">LAST </span>is used.</p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ADVISE </b><i>FN WHEN WHERE WHAT</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">FN </span>is the function to be advised, <span class="s16">WHEN </span><span class="s11">= BEFORE</span>, <span class="s11">AFTER</span>, or <span class="s11">AROUND</span>, <span class="s16">WHERE </span>specifies where in the advice list the advice is to be inserted, and <span class="s16">WHAT </span>is the piece of advice.</p><p class="s16" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>FN <span class="p">is of the form </span><span class="s11">(</span>FN<span class="s25">1</span> <span class="s11">IN </span>FN<span class="s25">2</span><span class="s11">)</span><span class="p">, </span>FN<span class="s25">1</span> <span class="p">is changed to </span>FN1<span class="s11">-IN-</span>FN2 <span class="p">throughout </span>FN<span class="s25">2</span><span class="p">, as with break, and then </span>FN1<span class="s11">-IN-</span>FN2 <span class="p">is used in place of </span>FN<span class="p">. If </span>FN<span class="s25">1</span> <span class="p">and / or </span>FN<span class="s25">2</span> <span class="p">are lists, they are distributed as with </span><span class="s11">BREAK0</span><span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FN </span>is broken, it is unbroken before advising.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FN </span>is not defined, an error is generated, <span class="s11">NOT A FUNCTION</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FN </span>is being advised for the first time, i.e., if <span class="s11">(GETP </span><span class="s16">FN </span><span class="s11">’ADVISED) = NIL</span>, a <span class="s11">GENSYM </span>is generated and stored on the property list of <span class="s16">FN </span>under the property <span class="s11">ADVISED</span>, and the <span class="s11">GENSYM </span>is defined with the original definition of <span class="s16">FN</span>. An appropriate expr definition is then created for <span class="s16">FN</span>, using private versions of <span class="s11">PROG</span>, <span class="s11">SETQ</span>, and <span class="s11">RETURN</span>, so that these functions can also be advised. Finally, <span class="s16">FN </span>is added to the (front of) <span class="s11">ADVISEDFNS</span>, so that <span class="s11">(UNADVISE T) </span>always unadvises the last function advised.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FN </span>has been advised before, it is moved to the front of <span class="s11">ADVISEDFNS</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WHEN </span><span class="s11">= BEFORE </span>or <span class="s11">AFTER</span>, the advice is inserted in <span class="s16">FN</span>’s definition either <span class="s11">BEFORE </span>or <span class="s11">AFTER </span>the original body of the function. Within that context, its position is determined by <span class="s16">WHERE</span>. If <span class="s16">WHERE </span><span class="s11">= LAST</span>, <span class="s11">BOTTOM</span>, <span class="s11">END</span>, or <span class="s11">NIL</span>, the advice is added following all other advice, if any. If <span class="s16">WHERE </span><span class="s11">= FIRST </span>or <span class="s11">TOP</span>, the advice is inserted as the first piece of advice. Otherwise, <span class="s16">WHERE </span>is treated as a command for the editor, similar to <span class="s11">BREAKIN</span>, e.g., <span class="s11">(BEFORE 3)</span>, <span class="s11">(AFTER PRINT)</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WHEN </span><span class="s11">= AROUND</span>, the body is substituted for <span class="s11">* </span>in the advice, and the result becomes the new body, e.g., <span class="s11">(ADVISE ’FOO ’AROUND ’(RESETFORM (OUTPUT T) *))</span>. Note that</p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">if several pieces of <span class="s11">AROUND </span>advice are specified, earlier ones will be embedded inside later ones. The value of <span class="s16">WHERE </span>is ignored.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MEDLEY REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Finally <span class="s11">(LIST </span><span class="s16">WHEN WHERE WHAT</span><span class="s11">) </span>is added (by <span class="s11">ADDPROP</span>) to the value of property <span class="s11">ADVICE </span>on the property list of <span class="s16">FN</span>, so that a record of all the changes is available for subsequent use in readvising. Note that this property value is a list of the advice in order of calls to <span class="s11">ADVISE</span>, not necessarily in order of appearance of the advice in the definition of <span class="s16">FN</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The value of <span class="s11">ADVISE </span>is <span class="s16">FN</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If <span class="s16">FN </span>is non-atomic, every function in <span class="s16">FN </span>is advised with the same values (but copies) for</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">WHEN</span>, <span class="s16">WHERE</span>, and <span class="s16">WHAT</span>. In this case, <span class="s11">ADVISE </span>returns a list of individual functions.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><b>Note</b>: Advised functions can be broken. However if a function is broken at the time it is advised, it is first unbroken. Similarly, advised functions can be edited, including their advice. <span class="s11">UNADVISE </span>will still restore the function to its unadvised state, but any changes to the body of the definition will survive. Since the advice stored on the property list is the same structure as the advice inserted in the function, editing of advice can be performed on either the function’s definition or its property list.</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>UNADVISE </b><i>X</i>)                                   <span class="p">[NLambda NoSpread  Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">An nlambda nospread like <span class="s11">UNBREAK</span>. It takes an indefinite number of functions and restores them to their original unadvised state, including removing the properties added by <span class="s11">ADVISE</span>. <span class="s11">UNADVISE </span>saves on the list <span class="s11">ADVINFOLST </span>enough information to allow restoring a function to its advised state using <span class="s11">READVISE</span>. <span class="s11">ADVINFOLST </span>and <span class="s11">READVISE </span>thus correspond to <span class="s11">BRKINFOLST </span>and <span class="s11">REBREAK</span>. If a function contains the property <span class="s11">READVICE</span>, <span class="s11">UNADVISE </span>moves the current value of the property <span class="s11">ADVICE </span>to <span class="s11">READVICE</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">(UNADVISE) <span class="p">unadvises all functions on </span>ADVISEDFNS <span class="p">in reverse order, so that the most recently advised function is unadvised last. It first sets </span>ADVINFOLST <span class="p">to </span>NIL<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">(UNADVISE T) <span class="p">unadvises the first function of </span>ADVISEDFNS<span class="p">, i.e., the most recently advised function.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>READVISE </b><i>X</i>)                                   <span class="p">[NLambda NoSpread  Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">An nlambda nospread like <span class="s11">REBREAK </span>for restoring a function to its advised state without having to specify all the advise information. For each function on <span class="s16">X</span>, <span class="s11">READVISE </span>retrieves the advise information either from the property <span class="s11">READVICE </span>for that function, or from <span class="s11">ADVINFOLST</span>, and performs the corresponding advise operation(s). It also stores this information on the property <span class="s11">READVICE </span>if not already there. If no information is found for a particular function, value is <span class="s11">(</span><span class="s16">FN </span>- <span class="s11">NO ADVICE SAVED)</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">(READVISE) <span class="p">readvises everything on </span>ADVINFOLST<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">(READVISE T) <span class="p">readvises the first function on </span>ADVINFOLST<span class="p">, i.e., the function most recently unadvised.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">A difference between <span class="s11">ADVISE</span>, <span class="s11">UNADVISE</span>, and <span class="s11">READVISE </span>versus <span class="s11">BREAK</span>, <span class="s11">UNBREAK</span>, and <span class="s11">REBREAK</span>, is that if a function is not rebroken between successive <span class="s11">(UNBREAK)</span>s, its break information is forgotten. However, once <span class="s11">READVISE </span>is called on a function, that function’s advice is permanently saved on its property list (under <span class="s11">READVICE</span>); subsequent calls to</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 276pt;text-indent: 0pt;text-align: left;">BREAKING, TRACING, AND ADVISING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">UNADVISE <span class="p">will not remove it. In fact, calls to </span>UNADVISE <span class="p">update the property </span>READVICE <span class="p">with the current value of the property </span>ADVICE<span class="p">, so that the sequence </span>READVISE<span class="p">, </span>ADVISE<span class="p">, </span>UNADVISE <span class="p">causes the augmented advice to become permanent. The sequence </span>READVISE<span class="p">, </span>ADVISE<span class="p">, </span>READVISE <span class="p">removes the “intermediate advice” by restoring the function to its earlier state.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ADVISEDUMP </b><i>X FLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Used by <span class="s11">PRETTYDEF </span>when given a command of the form <span class="s11">(ADVISE ...) </span>or <span class="s11">(ADVICE</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">...)<span class="p">. If </span><i>FLG </i>= T<span class="p">, </span>ADVISEDUMP <span class="p">writes both a </span>DEFLIST <span class="p">and a </span>READVISE<span class="p">; this corresponds to </span>(ADVISE ...)<span class="p">. If </span><i>FLG </i>= NIL<span class="p">, only the </span>DEFLIST <span class="p">is written; this corresponds to </span>(ADVICE ...)<span class="p">. In either case, </span>ADVISEDUMP <span class="p">copies the advise information to the property </span>READVICE<span class="p">, thereby making it “permanent” as described above.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark17">SEDIT - The EDITOR</a></p></li><li><p class="s6" style="padding-top: 8pt;padding-left: 25pt;text-indent: -19pt;text-align: left;">SEdit - The Structure Editor</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="669" height="3" alt="image" src="Image_038.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">Medley’s code editors are “structure” editors—they know how to take advantage of Lisp code being represented as lists.  One is a display editor named SEdit and the other is a TTY-based editor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s43" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Starting the Editor                                                                                                                        </p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">The editor is normally called using the following functions:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(DF <i>FN</i>) <span class="p">[NLambda NoSpread Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Edit the definition of the function <span class="s16">FN</span>. <span class="s11">DF </span>handles exceptional cases (the function is broken or advised, the definition is on the property list, the function needs to be loaded from a file, etc.) the same as <span class="s11">EDITF </span>(see below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">If you call <span class="s11">DF </span>with a name that has no function definition, you are prompted with a choise of definers to use.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(DV <i>VAR</i>) <span class="p">[NLambda NoSpread Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">Edit the value of the variable <span class="s16">VAR</span>.</p><p class="s16" style="padding-left: 65pt;text-indent: -12pt;line-height: 25pt;text-align: left;"><span class="s11">(DP </span>NAME PROP<span class="s11">) </span><span class="p">[NLambda NoSpread Function] Edit property </span>PROP <span class="p">of the symbol </span>NAME<span class="p">. If </span>PROP <span class="p">is not given, the whole property list of</span></p><p class="s16" style="padding-left: 65pt;text-indent: 0pt;line-height: 9pt;text-align: justify;">NAME <span class="p">is edited.</span></p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(DC <i>FILE</i>) <span class="p">[NLambda NoSpread Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">Edit the file package commands (or “filecoms,” see Chapter 17) for the file <span class="s16">FILE</span>.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(ED <i>NAME OPTIONS</i>) <span class="p">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This function finds out what kind of definiton <span class="s16">NAME </span>has and lets you edit it. If NAME has more than one definition (e.g., it’s both a function and a macro), you will be prompted for the right one. If NAME has no definition, you’ll be asked what kind of definition to create.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s43" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Choosing Your Editor                                                                                                                  </p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">The default editor may be set with <span class="s11">EDITMODE</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(EDITMODE <i>NEWMODE</i>)                                             <span class="p">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NEWMODE </span>is <span class="s11">DISPLAY</span>, sets the default editor to be SEdit; or the teletype editor (if <span class="s16">NEWMODE </span>is <span class="s11">TELETYPE</span>). Returns the previous setting. If <span class="s16">NEWMODE </span>is <span class="s11">NIL</span>, returns the previous setting without setting a new editor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s43" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">SEdit - The Structure Editor                                                                                                 </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">SEdit is a structure editor. You use a structure editor when you want to edit objects instead of text. SEdit is a part of the environment and operates directly on objects in the system you are running. SEdit behaves differently depending on the type of objects you are editing.</p><p style="padding-top: 6pt;padding-left: 117pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Common Lisp definitions: SEdit always edits a copy of a Common Lisp definition. The</p><p style="padding-left: 234pt;text-indent: 0pt;line-height: 91%;text-align: justify;">changes made while you edit a function will not be installed until the edit session is complete.</p><p style="padding-top: 6pt;padding-left: 234pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For example, when you edit a Common Lisp function, you edit the definition of the function and not the executable version of the function. When you end the session the comments will be stripped of the definition and the definition will be installed as the executable version of the function.</p><p style="padding-top: 5pt;padding-left: 98pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Interlisp functions and macros: SEdit edits the actual structure that will be run, except editing</p><p style="padding-left: 234pt;text-indent: 0pt;line-height: 91%;text-align: justify;">the source for a compiled function. In this case, changes are made and the function is unsaved when you complete the edit session.</p><p style="padding-top: 6pt;padding-left: 234pt;text-indent: -91pt;line-height: 91%;text-align: left;">All other structures: Variables, property lists and other structures are edited directly in place, i.e. SEdit installs all changes as they are made.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If you make a severe editing error, you can abort the edit session with an Abort command (see Command Keys, below). This command undoes all changes from the beginning of the edit session and exits from SEdit without changing your environment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If you change the definition of an object that is being edited in an SEdit window, Medley will ask you if you want to throw away the changes made there.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">SEdit supports the standard Copy-Select mechanism in Medley.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s43" style="padding-left: 54pt;text-indent: 0pt;text-align: left;"> An SEdit Session                                                                                                                 </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Whenever you call SEdit, a new SEdit window is created. This SEdit window has its own process. You can make edits in the window, shrink it while you do something else, expand it and edit some more, and finally close the window when you are done.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Throughout an edit session, SEdit remembers everything that you do IN a change history. You can undo and redo edits sequentially. When you end the edit session, SEdit forgets this information and installs the changes in the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">You signal the end of the session in the following ways:</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li></ol></li></ul></li><li><p style="padding-left: 42pt;text-indent: -12pt;text-align: left;">Close the window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 42pt;text-indent: -12pt;text-align: left;">Shrink the window. If you expand the window again, you can continue editing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 42pt;text-indent: -12pt;text-align: left;">Issue a Completion Command, see below.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">SEdit Carets                                                                                                                                                                </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are two carets in SEdit, the edit caret and the structure caret. The edit caret appears when characters are edited within a single symbol, string, or comment. Anything you type will appear at the edit caret as part of the item it’s in.  The edit caret  looks like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span><img width="31" height="13" alt="image" src="Image_039.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">The structure caret appears when the edit point is between symbols (or strings or comments), so that anything you type will go into a new one. It looks like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span><img width="31" height="13" alt="image" src="Image_040.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: left;">SEdit changes the caret frequently, depending on where the caret is positioned. The left mouse button positions the edit caret. The middle mouse button positions the structure caret.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;"> The Mouse                                                                                                                                                                  </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">The left mouse button selects parts of Lisp structures. The middle mouse button selects whole Lisp structures.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">For example; select the <span class="s11">Q </span>in <span class="s11">LEQ </span>below by pressing the left mouse button when the pointer is over the</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Q<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span><img width="59" height="13" alt="image" src="Image_041.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Any characters you type in now will be appended to the symbol <span class="s11">LEQ</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: left;">Selecting the same letter with the middle mouse button selects the whole symbol (this matches TEdit’s character / word selection convention), and sets a structure caret between the <span class="s11">LEQ </span>and the <span class="s11">n</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 82pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span><img width="59" height="13" alt="image" src="Image_042.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Any characters you type in now will form a new symbol between the <span class="s11">LEQ </span>and the <span class="s11">n</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Larger structures can be selected in two ways. Use the middle mouse button to position the mouse cursor on the parenthesis of the list you want to edit. Press the mouse button multiple times, without moving the mouse, extends the selection. In the previous example, if the middle button was pressed twice, the list <span class="s11">(LEQ ...) </span>would be selected:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 82pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span><img width="63" height="13" alt="image" src="Image_043.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Press the button a third time and you will select the list containing the <span class="s11">(LEQ n 1) </span>to be selected.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The right mouse button positions the mouse cursor for selecting sequences of structures or substructures. Extended selections are indicated by a box enclosing the structures selected. The selection extends in the same mode as the original selection. That is, if the original selection was a character selection, the right button will be used to select more characters in the same atom. Extended selections also have the property of being marked for pending deletion. That is, the selection takes the place of the caret, and anything typed in is inserted in place of the selection.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, selecting the <span class="s11">E </span>by pressing the left mouse button and selecting the <span class="s11">Q </span>by pressing the right mouse button will produce:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 81pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span><img width="59" height="15" alt="image" src="Image_044.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Similarly, pressing the middle mouse button and then selecting with the right mouse button extends the selection by whole structures. In our example, pressing the middle mouse button to select <span class="s11">LEQ </span>and pressing the right mouse button to select the <span class="s11">1 </span>will produce:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 83pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span><img width="59" height="15" alt="image" src="Image_045.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">This is not the same as selecting the entire list, as above. Instead, the elements in the list are collectively selected, but the list itself is not.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"> Gaps                                                                                                                                                                           </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">SEdit requires that everything edited must have an underlying Lisp structure at all times. Some characters, such as single quote “<span class="s11">’</span>” have no meaning by themselves, but must be followed by something more. Whenyou type such a character, SEdit puts a “gap” where the rest of the input should go.  When you type, the gap is automatically replaced.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="15" height="5" alt="image" src="Image_046.gif"/></span></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">A gap looks like:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">After you type a quote, the gap looks like this:  <span><img width="21" height="15" alt="image" src="Image_047.gif"/></span><span class="s21"> </span>with the gap marked for pending deletion.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 11pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Broken Atoms                                                                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When you type an atom (a symbol or a number), SEdit saves the characters you type until you are finished. Typing any character that cannot belong to an atom, like a space or open parenthesis, ends the atom. SEdit then tries to create an atom with the characters you just typed, just as if they were read by the Lisp reader. The atom then becomes part of the structure you’re editing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If an error occurs when SEdit reads the atom, SEdit creates a structure called a Broken-Atom. A Broken-Atom looks and behaves just like a normal atom, but is printed in italics to tell you that something is wrong.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">SEdit creates a Broken-Atom when the characters typed don’t make a legal atom. For example, the characters &quot;DECLARE:&quot; can’t be a symbol because the colon is a package specifier, but the form is not correct for a package-qualified symbol. Similarly, the characters &quot;#b123&quot; cannot represent an integer in base two, because 2 and 3 aren’t legal digits in base two, so SEdit would make a Broken-Atom that looks like <span class="s16">#b123</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You can edit Broken-Atoms just like real atoms. Whenever you finish editing a Broken-Atom, SEdit again tries to create an atom from the characters. If SEdit succeeds, it reprints the atom in SEdit’s default font, rather than in italics. Be sure to correct any Broken-Atoms you create before exiting SEdit, since Broken-Atoms do not behave in any useful way outside SEdit.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Special Characters                                                                                                                                                     </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Some characters have special meanings in Lisp, and are therefor treated specially by SEdit. SEdit must always have a complete structure to work on at any level of the edit. This means that SEdit needs a special way to type in structures such as lists, strings, and quoted objects. In most instances these structures can be typed in just as they would be to a regular Exec, but in the following cases this is not possible.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 221pt;text-indent: -80pt;line-height: 91%;text-align: justify;">Lists: <span class="s15">( ) </span>Lists begin with an open parenthesis character &quot;(&quot;. Typing an open parenthesis gives a balanced list. SEdit inserts both an open and a close parenthesis. The structure caret is placed between the two parentheses. List elements can be typed in at the structure caret. When a close parenthesis, &quot;)&quot; is typed, the caret will be moved outside the list, effectively finishing the list. Square bracket characters, &quot;[&quot; and &quot;]&quot;, have no special meaning in SEdit, as they have no special meaning in Common Lisp.</p><p style="padding-top: 6pt;padding-left: 118pt;text-indent: -9pt;text-align: right;">Single Quote: <span class="s15">’ </span>Backquote: <span class="s15">‘ </span>Comma: <span class="s15">,</span></p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">At Sign: <span class="s15">,@</span></p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">Dot: <span class="s15">,.</span></p><p style="padding-left: 111pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Hash Quote: <span class="s15">#’ </span>All these characters are special macro characters in</p><p style="padding-left: 221pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Common Lisp. When you type one, SEdit will echo the character followed by a gap, which you should then fill in.</p><p style="padding-top: 6pt;padding-left: 111pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Dotted Lists: <span class="s15">( . ) </span>Use period to enter dotted pairs. After you type a dot,</p><p style="padding-left: 221pt;text-indent: 0pt;line-height: 91%;text-align: justify;">SEdit prints a dot and a gap to fill in for the tail of the list. To dot an existing list, point the cursor between the last and second to last elements, and type a dot. To undot a list, select the tail of the list before the dot while holding down the SHIFT key.</p><p style="padding-top: 5pt;padding-left: 106pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Single escape: <span class="s15">\ </span>or <span class="s15">% </span>Use the single escape characters to make symbols with</p><p style="padding-left: 221pt;text-indent: 0pt;line-height: 91%;text-align: justify;">special characters. The single escape character for Interlisp is &quot;%&quot;. The single escape character for Common Lisp is &quot;\&quot;.</p><p style="padding-top: 6pt;padding-left: 221pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When you want to create a symbol with a special character in it you have to type a single escape character before you type the character itself. SEdit does not echo the single escape character until you type the following character.</p><p style="padding-top: 6pt;padding-left: 221pt;text-indent: 0pt;line-height: 94%;text-align: justify;">For example; create the Common Lisp symbol <span class="s11">APAREN-(</span>. Since SEdit normally will treat the &quot;<span class="s11">(</span>&quot; as the start of a new list you have to tell SEdit to treat it as an ordinary character. You do this by typing a &quot;<span class="s11">\</span>&quot; before you type the &quot;<span class="s11">(</span>&quot;.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 92pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Multiple Escape<span class="s15">: | </span>Use the multiple escape character when you enter symbols</p><p style="padding-left: 221pt;text-indent: 0pt;line-height: 91%;text-align: justify;">with many special characters. SEdit always balances multiple escape characters. When you type one, SEdit adds another, with the caret between them. If you type a second vertical bar, the caret moves after it, but is still inthe same symbol, so you can add more unescaped characters.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:69.5798pt" cellspacing="0"><tr style="height:38pt"><td style="width:50pt"><p class="s41" style="padding-right: 5pt;text-indent: 0pt;text-align: right;">Comment:</p></td><td style="width:33pt"><p class="s39" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">;</p></td><td style="width:264pt"><p class="s41" style="padding-left: 21pt;padding-right: 2pt;text-indent: 0pt;line-height: 93%;text-align: justify;">A semicolon starts a comment. When you type a semicolon, an empty comment is inserted with the caret in position to type the comment. Comments can be edited like strings.</p></td></tr><tr style="height:150pt"><td style="width:50pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:33pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:264pt"><p class="s41" style="padding-top: 3pt;padding-left: 21pt;padding-right: 2pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are three levels of comments supported by SEdit: single-, double-, and triple-semicolon. Single-semicolon comments are formatted at the comment column, about three-quarters of the way across the window. Double- semicolon comments are formatted at the current indentation of the code they are in. Triple semicolon comments are formatted against the left margin. The level of a comment can be increased or decreased by pointing after the semicolon, and either typing another semicolon, or backspacing over the preceding semicolon. Comments can be placed anywhere in your Common Lisp code. However, in Interlisp code, they must follow the placement rules for Interlisp comments.</p></td></tr><tr style="height:60pt"><td style="width:50pt"><p class="s41" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">String:</p></td><td style="width:33pt"><p class="s39" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">&quot;</p></td><td style="width:264pt"><p class="s41" style="padding-top: 3pt;padding-left: 21pt;padding-right: 2pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Enter strings in SEdit by typing a double quote. SEdit balances the double quotes: When one is typed, SEdit produces a second, with the caret between the two. If you type a double-quote in the middle of a string, SEdit breaks</p><p class="s41" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">the string in two, leaving the caret between them.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">SEdit Commands                                                                                                                                               </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Enter SEdit commands either from the keyboard or from the SEdit menu. When possible, SEdit uses a named key on the keyboard, e.g., the DELETE key. Other commands are combinations of Meta, Control, and alphabetic keys. For the alphabetic command keys, either uppercase or lowercase will work.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are two menus available, as an alternative means of invoking commands. They are the middle button popup menu, and the attached command menu. These menus are described in more detail below.</p><p class="s15" style="padding-top: 9pt;padding-left: 69pt;text-indent: 0pt;text-align: left;">Meta-A <span class="p">Abort the session. Throw away the changes made to the form.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 69pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Meta-B <span class="p">Change the Print Base. Prompts for entry of the desired Print Base, in decimal.</span></p><p style="padding-left: 113pt;text-indent: 0pt;line-height: 11pt;text-align: left;">SEdit redisplays fixed point numbers in this new base.</p><p style="padding-top: 8pt;padding-left: 113pt;text-indent: -60pt;line-height: 79%;text-align: justify;"><span class="s15">Control-C </span>Tell SEdit that this session is complete and compiles the definition being edited. The variable <span class="s11">*COMPILE-FN* </span>determines which function to use as compiler. See the Options section below.</p><p class="s15" style="padding-top: 9pt;padding-left: 113pt;text-indent: -84pt;line-height: 79%;text-align: left;">Control-Meta-C <span class="p">Signals the system that this edit is complete, compiles the definition being editing, and closes the window.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 69pt;text-indent: 0pt;text-align: left;">DELETE <span class="p">Deletes the current selection.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 7pt;padding-left: 161pt;text-indent: -46pt;line-height: 75%;text-align: justify;">Meta-E <span class="p">Evaluate the current selection. If the result is a structure, the inspector is called on it, allowing the user to choose how to look at the result. Otherwise, the result is printed in the SEdit prompt window. The evaluation is done in the process from which the edit session was started. Thus, while editing a function from a break window, evaluations are done in the context of the break.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">FIND</p><p class="s15" style="padding-top: 1pt;padding-left: 161pt;text-indent: -44pt;line-height: 75%;text-align: justify;">Meta-F <span class="p">Find a specified structure, or sequence of structures. If there is a current selection, SEdit looks for the next occurrence of the selected structure. If there is no selection, SEdit prompts for the structure to find, and searches forward from the position of the caret. The found structure will be selected, so the Find command can be used to easily find the same structure again.</span></p><p style="padding-top: 9pt;padding-left: 161pt;text-indent: 0pt;line-height: 74%;text-align: justify;">If a sequence of structures are selected, SEdit will look for the next occurrence of the same sequence. Similarly, when SEdit prompts for the structure to find, you can type a sequence of structures to look for.</p><p style="padding-top: 8pt;padding-left: 162pt;text-indent: 0pt;line-height: 77%;text-align: justify;">The variable <span class="s11">*WRAP-SEARCH* </span>controls whether or not SEdit wraps around from the end of the structure being edited and continues searching from the beginning.</p><p class="s15" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Control-Meta-F <span class="p">Find a specified structure, searching in reverse from the position of the caret.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">HELP</p><p class="s15" style="padding-left: 162pt;text-indent: -44pt;line-height: 77%;text-align: justify;">Meta-H <span class="p">Show the argument list for the function currently selected, or currently being typed in, in the SEdit prompt window. If the argument list will not fit in the SEdit prompt window, it is displayed in the main Prompt Window.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 117pt;text-indent: 0pt;text-align: left;">Meta-I <span class="p">Inspect the current selection.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 162pt;text-indent: -44pt;line-height: 75%;text-align: justify;">Meta-J <span class="p">Join any number of sequential Lisp objects of the same type into a single object of that type. Join is supported for atoms, strings, lists, and comments. In addition, SEdit permits joining of a sequence of atoms and strings, since either type can easily be coerced into the other. In this case, the result of the Join will be an atom if the first object in the selection is an atom, otherwise the result will be a string.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">Control-L <span class="p">Redisplay the structure being edited.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">SKIP-NEXT</p><p class="s15" style="padding-left: 112pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Meta-N <span class="p">Select next gap in the structure.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 162pt;text-indent: -46pt;line-height: 76%;text-align: justify;">Meta-O <span class="p">Edit the definition of the current selection. If the selected name has more than one type of definition, SEdit asks for the type to edit. If the selection has no definition, a menu pops up. This menu lets you specify the type of definition to create.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s15">Control-Meta-O </span>Perform a fast edit by calling <span class="s11">ED </span>with the <span class="s11">CURRENT </span>option.</p><p class="s15" style="padding-top: 9pt;padding-left: 162pt;text-indent: -44pt;line-height: 79%;text-align: justify;">Meta-P <span class="p">Change the current package for this edit. Prompt the user for a new package name. SEdit will redisplay atoms with respect to that package.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 123pt;text-indent: 0pt;line-height: 9pt;text-align: left;">AGAIN</p><p class="s15" style="padding-left: 162pt;text-indent: -44pt;line-height: 79%;text-align: left;">Meta-R <span class="p">Redo the edit change that was just undone. Redo only works directly following an Undo. Any number of Undo commands can be sequentially redone.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">SHIFT-FIND</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 113pt;text-indent: -44pt;line-height: 76%;text-align: justify;">Meta-S <span class="p">Substitute a structure, or sequence of structures within the current selection. SEdit prompts you in the SEdit prompt window for the structures to replace, and the structures to replace with. The selection to substitute within must be a structure selection.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 113pt;text-indent: -84pt;line-height: 79%;text-align: left;">Control-Meta-S <span class="p">Remove all occurences of a structure or sequence of structures within the current selection. SEdit prompts you for the structures to delete.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">UNDO</p><p class="s15" style="padding-left: 113pt;text-indent: -44pt;line-height: 79%;text-align: justify;">Meta-U <span class="p">Undo the last edit. All changes in the the edit session are remembered, and can be undone sequentially</span>.</p><p class="s15" style="padding-top: 10pt;padding-left: 113pt;text-indent: -60pt;line-height: 79%;text-align: left;">Control-W <span class="p">Delete the previous atom or structure. If the caret is in the middle of an atom, deletes backward to the beginning of the atom only.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">Control-X <span class="p">Tell SEdit that this session is complete. The SEdit window remains open.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">EXPAND</p><p class="s15" style="padding-left: 113pt;text-indent: -44pt;line-height: 79%;text-align: justify;">Meta-X <span class="p">Replaces the current selection with its definition. This command can be used to expand macros and translate CLISP.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Control-Meta-X <span class="p">Tell SEdit that this session is complete Close the SEdit window.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 113pt;text-indent: -44pt;line-height: 79%;text-align: justify;">Meta-Z <span class="p">Mutate. Prompt for a function and call this function with the current selection as the argument. The result is inserted into SEdit and made the current selection.</span></p><p style="padding-top: 9pt;padding-left: 113pt;text-indent: 0pt;line-height: 74%;text-align: left;">For example, you can replace a structure with its value by selecting it and mutating by <span class="s11">EVAL</span>.</p><p class="s15" style="padding-top: 10pt;padding-left: 113pt;text-indent: -44pt;line-height: 77%;text-align: justify;">Meta-; <span class="p">Convert old style comments in the selected structure to new style comments. The converter notices any list that begins with the symbol IL:* as an old style comment. Section 16.1.18, Options, describes the converter options .</span></p><p class="s15" style="padding-top: 9pt;padding-left: 113pt;text-indent: -84pt;line-height: 77%;text-align: justify;">Control-Meta-; <span class="p">Put the contents of a structure selection into a comment. This provides an easy way to &quot;comment out&quot; a chunk of code. The Extract command can be used to reverse this process, returning the comment to the structures contained therein.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 113pt;text-indent: -44pt;line-height: 76%;text-align: justify;">Meta-/ <span class="p">Extract one level of structure from the current selection. If there is no selection, but there is a structure caret, the list containing the caret is used. This command can be used to strip the parentheses off a list, or to unquote a quoted structure, or to replace a comment with the contained structures.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 69pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Meta-’</p><p class="s15" style="padding-left: 69pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Meta-‘</p><p class="s15" style="padding-left: 69pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Meta-,</p><p class="s15" style="padding-left: 69pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Meta-.</p><p class="s15" style="padding-left: 30pt;text-indent: 0pt;line-height: 79%;text-align: left;">Meta-@ <span class="p">or </span>Meta-2 Meta-# <span class="p">or </span>Meta-3</p><p class="s15" style="padding-left: 69pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Meta-. <span class="p">Quote the current selection with the specified kind of quote.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 48pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Meta-Space</p><p class="s15" style="padding-left: 113pt;text-indent: -71pt;line-height: 79%;text-align: left;">Meta-Return <span class="p">Scroll the current selection to the center of the window. Similarly, the Space or Return key can be used to normalize the caret.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 69pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Meta-)</p><p class="s15" style="padding-left: 69pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Meta-0 <span class="p">Parenthesize the current selection, position the caret after the new list.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: center;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">Meta-(</p><p class="s15" style="padding-left: 161pt;text-indent: -44pt;line-height: 79%;text-align: left;">Meta-9 <span class="p">ParenthesizE the current selection, position the caret at the beginning of the new list.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 161pt;text-indent: -44pt;line-height: 79%;text-align: left;">Meta-M <span class="p">Attach a menu of common commands to the top of the SEdit window. Each SEdit window can have its own menu.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">SEdit Command Mnemonics                                                                                                                                     </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 172pt;text-indent: 49pt;line-height: 74%;text-align: left;">Abort Meta-A Change Print Base Meta-B</p><p style="padding-left: 161pt;text-indent: 45pt;line-height: 74%;text-align: left;">Complete Control-X Compile &amp; Complete Control-C</p><p style="padding-left: 171pt;text-indent: -36pt;line-height: 74%;text-align: left;">Close, Compile &amp; Complete Control-Meta-C Convert Comment Meta-;</p><p style="padding-left: 182pt;text-indent: -38pt;line-height: 74%;text-align: left;">Make Selection Comment Control-Meta-; Previous Delete Control-W Selection Delete DELETE</p><p style="padding-left: 164pt;text-indent: -4pt;line-height: 74%;text-align: left;">Selection Dot Comma Meta-. Selection At Comma Meta-@</p><p style="padding-left: 229pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Edit Meta-O</p><p style="padding-left: 190pt;text-indent: 20pt;line-height: 74%;text-align: left;">Fast Edit Control-Meta-O Selection Eval Meta-E</p><p style="padding-left: 187pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Macro Expand Meta-X</p><p style="padding-left: 193pt;text-indent: -3pt;line-height: 74%;text-align: left;">Forward Find Meta-F Reverse Find Control-Meta-F</p><p style="padding-left: 207pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Next Gap Meta-N</p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">Arglist Help Meta-H</p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">Inspect Meta-I</p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">Join Meta-J</p><p style="padding-left: 171pt;text-indent: 22pt;line-height: 74%;text-align: right;">Attach Menu Meta-M Expression Mutate Meat-Z</p><p style="padding-left: 133pt;text-indent: 47pt;line-height: 74%;text-align: justify;">Change Package Meta-P Selection Left Parenthesize Meta-( Selection Right Parenthesize Meta-)</p><p style="padding-left: 160pt;text-indent: 32pt;line-height: 74%;text-align: right;">Selection Pop Meta- / Selection Back Quote Meta-‘ Selection Hash Quote Meta-# Selection Quote Meta-’</p><p style="padding-left: 206pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Redisplay Control-L</p><p style="padding-left: 213pt;text-indent: 11pt;line-height: 74%;text-align: left;">Redo Meta-R Remove Control-Meta-S</p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 8pt;text-align: right;">Substitute Meta-S</p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 11pt;text-align: right;">Undo Meta-U</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">SEdit Command Menu                                                                                                                                               </h4><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: left;">When the mouse cursor is in the SEdit title bar and you press middle mouse button, a Help Menu of commands pops up. The menu looks like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: 0pt;text-align: left;"><span><img width="207" height="386" alt="image" src="Image_048.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The Help Menu lists each command and its corresponding Command Key. (C- stands for Control, M- for Meta.) The menu pops up with the mouse cursor next to the last command you used from the menu.  This makes it easy to repeat a command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">SEdit Attached Menu                                                                                                                                                 </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">SEdit’s Attached Command Menu contains the commonly used commands. Use the Meta- M keyboard command to bring up this menu. The menu can be closed, independently of the SEdit window. The menu looks like:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 135pt;text-indent: 0pt;text-align: left;"><span><img width="327" height="102" alt="image" src="Image_049.gif"/></span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Menu commands work like the corresponding keyboard commands, except for Find and Substitute.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For Find, SEdit prompts in the menu window, next to the Find button, for the structures to find. Type in the structures then select Find again. The search begins from the caret position in the SEdit window.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Similarly, Substitute prompts next to the Find button for the structures to find, and next to the Substitute button for the structures to replace them with. After both have been typed in, selecting Substitute replaces all occurrences of the Find structures with the Substitute structures, within the current selection.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">To selectively substitute, use Find to find the next potential substitution target. If you want to replace it, select Substitute. Otherwise, select Find again to go on.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Selecting either Find or Substitute with the right mouse button erases the old structure to find or substitute from the menu, and prompts for a new one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">SEdit Programmer’s Interface                                                                                                                                   </h4><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following sections describe SEdit’s programmer’s interface. All symbols are external in the package <span class="s11">SEDIT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">SEdit Window Region Manager                                                                                                                                </h4><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">SEdit provides user redefinable functions which control how SEdit chooses the region for a new edit window. In the follwin thext there are a few concepts that you will have to be familliar with. They are:</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The region stack. This is a stack of old used regions. The reason to keep these around is that the user probably was comfortable with the old position of the window, so when he starts a new SEdit it is a good bet that he will be happy with the old placement.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">SEdit uses the respective value of the symbols <span class="s11">SEDIT::DEFAULT-FONT</span>, <span class="s11">SEDIT::ITALIC-FONT</span>, <span class="s11">SEDIT::KEYWORD-FONT</span>, <span class="s11">SEDIT::COMMENT-FONT</span>, and</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">SEDIT::BROKEN-ATOM-FONT <span class="p">when displaying an expression. The value of these symbols have to be font descriptors.</span></p><p style="padding-top: 9pt;padding-left: 126pt;text-indent: -24pt;text-align: left;">(<span class="s15">GET-WINDOW-REGION </span><span class="s16">context reason name type</span>) [Function]</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This function is called when SEdit wants to know where to place a window it is about to open. This happens whenever the user starts a new SEdit or expands an Sedit icon. The default behavior is to pop a window region off SEdit’s stack of regions that have been used in the past. If the stack is empty, SEdit prompts for a new region.</p><p class="s16" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">context <span class="p">is the current editor context.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">reason </span>is one of <span class="s11">:CREATE </span>or <span class="s11">:EXPAND </span>depending on what action prompted the call to</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">GET-WINDOW-REGION</p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">name <span class="p">is the name of the structure to be edited.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">type <span class="p">is the edit type of the calling context.</span></p><p style="padding-top: 9pt;padding-left: 77pt;text-indent: -24pt;text-align: left;">(<span class="s15">SAVE-WINDOW-REGION </span><span class="s16">context reason name type region</span>) [Function]</p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This function is called whenever SEdit is finished with a region and wants to make the region available for other SEdits. This happens whenever an SEdit window is closed or shrunk, or when an SEdit Icon is closed. The default behavior is simply to push the region onto SEdit’s stack of regions.</p><p class="s16" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">context <span class="p">is the current editor context.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s16">reason </span>is one of <span class="s11">:CLOSE</span>, <span class="s11">:SHRINK</span>, or <span class="s11">:CLOSE-ICON </span>or depending on what action prompted the call to <span class="s11">SAVE-WINDOW-REGION</span></p><p class="s16" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">name <span class="p">is the name of the structure to be edited.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">type <span class="p">is the edit type of the calling context.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">region </span>is the region to be pushed onto the region stack. If region is <span class="s11">NIL </span>the old region of the SEdit will be pushed top the region stack.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">KEEP-WINDOW-REGION <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Default <span class="s11">T</span>. This flag determines the behavior of the default SEdit region manager, explained above, for shrinking and expanding windows. When set to <span class="s11">T</span>, shrinking an SEdit window will not give up that window’s region; the icon will always expand back into the same region. When set to <span class="s11">NIL</span>, the window’s region is made available for other SEdits when the window is shrunk. Then when an SEdit icon is expanded, the window will be reshaped to the next available region.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This variable is only used by the default implementations of the functions get-window- region and save-window-region. If these functions are redefined, this flag is no longer used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Options                                                                                                                                                                        </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The following parameters can be set as desired.</p><p class="s15" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">*WRAP-PARENS* <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">This SEdit pretty printer flag determines whether or not trailing close parenthesis characters, <span class="s11">)</span>, are forced to be visible in the window without scrolling. By default it is set to <span class="s11">NIL</span>, meaning that close parens are allowed to &quot;fall off&quot; the right edge of the window. If set to <span class="s11">T</span>, the pretty printer will start a new line before the structure preceding the close parens, so that all the parens will be visible.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">*WRAP-SEARCH* <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This flag determines whether or not SEdit find will wrap around to the top of the structure when it reaches the end, or vice versa in the case of reverse find. The default is <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">*CLEAR-LINEAR-ON-COMPLETION*                                   <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This flag determines whether or not SEdit completely re-pretty prints the structure being edited when you complete the edit. The default value is <span class="s11">NIL</span>, meaning that SEdit reuses the pretty printing.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">*IGNORE-CHANGES-ON-COMPLETION*                                 <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Sometimes the structure that you are editing is changed by the system upon completion. Editdates are an example of this behavior. When this flag is <span class="s11">NIL</span>, the default, SEdit will redisplay the new structure, capturing the changes. When <span class="s11">T</span>, SEdit will ignore the fact that changes were made by the system and keep the old structure.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">CONVERT-UPGRADE                                                <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Default 100. When using Meta-; to convert old-style single- asterisk comments, if the length of the comment exceeds convert-upgrade characters, the comment is converted into a double semicolon comment. Otherwise, the comment is converted into a single semicolon comment.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Old-style double-asterisk comments are always converted into new-style triple-semicolon comments.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Control Functions                                                                                                                                                      </h4><p style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">RESET</span>)                                                                                                                                         [Function]</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This function recomputes the SEdit edit environment. Any changes made in the font profile, or any changes made to SEdit’s commands are captured by resetting. Close all SEdit windows before calling this function.</p><p style="padding-top: 9pt;padding-left: 101pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(<span class="s15">ADD-COMMAND </span><span class="s16">key-code form &amp;optional scroll? key-name command-name</span></p><p class="s16" style="padding-left: 107pt;text-indent: 0pt;line-height: 11pt;text-align: left;">help-string<span class="p">) [Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This function allows you to write your own SEdit keyboard commands. You can add commands to new keys, or you can redefine keys that SEdit already uses as command keys. If you mistakenly redefine an SEdit command, the funtion Reset-Commands will remove all user-added commands, leaving SEdit with its default set of commands.</p><p class="s16" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">key-code <span class="p">can be a character code, or any form acceptible to il:charcode.</span></p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="s16">form </span>determines the function to be called when the key command is typed. It can be a symbol naming a function, or a list, whose first element is a symbol naming a function and the rest of the elements are extra arguments to the function. When the command is invoked, SEdit will apply the function to the edit context (SEdit’s main data structure), the charcode that was typed, and any extra arguments supplied in form. The extra arguments do not get evaluated, but are useful as keywords or flags, depending on how the command was invoked. The command function must return <span class="s11">T </span>if it handled the command. If the function returns <span class="s11">NIL</span>, SEdit will ignore the command and insert the character typed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The first optional argument, <span class="s16">scroll?</span>, determines whether or not SEdit scrolls the window after running the command. This argument defaults to <span class="s11">NIL</span>, meaning don’t scroll. If the value of <span class="s16">scroll? </span>is <span class="s11">T</span>, SEdit will scroll the window to ensure that the caret is visible.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The rest of the optional arguments are used to add this command to SEdit’s middle button menu. When the item is selected from the menu, the command function will be called as described above, with the charcode argument set to <span class="s11">NIL</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">key-name <span class="p">is a string to identify the key (combination) to be typed to invoke the command. For example &quot;M-A&quot; to represent the Meta-A key combination, and &quot;C-M-A&quot; for Control-Meta-A.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">command-name is a string to identify the command function, and will appear in the menu next to the key-name.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">help-string is a string to be printed in the prompt window when a mouse button is held down over the menu item.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">After adding all the commands that you want, you must call Reset-Commands to install them.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example:</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 18pt;text-align: left;">(ADD-COMMAND &quot;^U&quot; (MY-CHANGE-CASE T)) (ADD-COMMAND &quot;^Y&quot; (MY-CHANGE-CASE NIL)) (ADD-COMMAND &quot;1,R&quot; MY-REMOVE-NIL</p><p class="s11" style="padding-left: 124pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;M-R&quot; &quot;REMOVE NIL&quot;</p><p class="s11" style="padding-left: 114pt;text-indent: 10pt;line-height: 177%;text-align: left;">&quot;REMOVE NIL FROM THE SELECTED STRUCTURE&quot;)) (RESET-COMMANDS)</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">will add three commands.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Suppose <span class="s11">MY-CHANGE-CASE </span>takes the arguments <i>context</i>, <i>charcode</i>, and <i>upper-case?</i>. <i>upper- case? </i>will be set to <span class="s11">T </span>when <span class="s11">MY-CHANGE-CASE </span>is called from Control-U, and <span class="s11">NIL </span>when called from Control-Y. <span class="s11">MY-REMOVE-NIL </span>will be called with only <i>context </i>and <i>charcode </i>arguments when you type Meta-R.</p><p style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">RESET-COMMANDS</span>) [Function]</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This function installs all commands added by add-command. SEdits which are open at the time of the reset-commands will not see the new commands; only new SEdits will have the new commands available.</p><p style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DEFAULT-COMMANDS</span>) [Function]</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This function removes all commands added by add-command, leaving SEdit with its default set of commands. As in reset-commands, open SEdits will not be changed; only new SEdits will have the user commands removed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GET-PROMPT-WINDOW </span><i>context</i>)                                                                                              [Function]</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns the attached prompt window for a particular SEdit.</p><p style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GET-SELECTION </span><i>context</i>)                                                                                                        [Function]</p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This function returns two values: the selected structure, and the type of selection, one of <span class="s11">NIL</span>, <span class="s11">T</span>, or <span class="s11">:SUB-LIST</span>. The selection type <span class="s11">NIL </span>means there is not a valid selection (in this case the structure is meaningless). <span class="s11">T </span>means the selection is one complete structure.</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">:SUB-LIST <span class="p">means a series of elements in a list is selected, in which case the structure returned is a list of the elements selected.</span></p><p style="padding-top: 9pt;padding-left: 125pt;text-indent: -24pt;text-align: justify;">(<span class="s15">REPLACE-SELECTION </span><i>context structure selection-type </i>) [Function]</p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This function replaces the current selection with a new structure, or multiple structures, by deleting the selection and then inserting the new structure(s). The selection-type argument must be one of <span class="s11">T </span>or <span class="s11">:SUB-LIST</span>. If <span class="s11">T</span>, the structure is inserted as one complete structure. If <span class="s11">:SUB-LIST</span>, the structure is treated as a list of elements, each of which is insertd.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">*EDIT-FN*                                                      <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This function is called with the selected structure and the edit specified as arguments to Sedit options as its arguments from the Edit (M-O) command. It should start the editor as appropriate, or generate an error if the selection is not editable.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">*COMPILE-FN*                                                   <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">This function is called with the arguments <span class="s16">name</span>, <span class="s16">type</span>, and <span class="s16">body</span>, from the compile / completion commands. It should compile the definition, <span class="s16">body</span>, and install the code as appropriate.</p><p style="padding-top: 9pt;padding-left: 125pt;text-indent: -24pt;text-align: justify;">(<span class="s15">SEDIT </span><span class="s16">structure props options</span>) [Function]</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">This function provides a means of starting SEdit directly. <span class="s16">structure </span>is the structure to be edited.</p><p class="s16" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">props <span class="p">is a property list, which may specify the following properties:</span></p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">:NAME <span class="p">- the name of the object being edited</span></p><p class="s11" style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">:TYPE <span class="p">- the file manager type of the object being edited. If NIL, SEdit will not call the file manager when it tries to refetch the definition it is editing. Instead, it will just continue to use the structure that it has.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">:COMPLETION-FN </span>- the function to be called when the edit session is completed. This function is called with the <span class="s16">context</span>, <span class="s16">structure</span>, and <span class="s16">changed? </span>arguments.  <span class="s16">context </span>is SEdits main data structure. <span class="s16">structure </span>is the structure being edited. <span class="s16">changed? </span>specifies if any changes have been made, and is one of <span class="s11">NIL</span>, <span class="s11">T</span>, or <span class="s11">:ABORT</span>, where <span class="s11">:ABORT </span>means the user is aborting the edit and throwing away any changes made. If the value of this property is a list, the first element is treated as the function, and the rest of the elements are extra arguments for the function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">:ROOT-CHANGED-FN <span class="p">- the function to be called when the entire structure being edited is replaced with a new structure. This function is called with the new structure as its argument. If the value of this property is a list, the first element is treated as the function, and the rest of the elements are extra arguments that the function is applied to following the structure argument.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">options <span class="p">is one or a list of any number of the followng keywords:</span></p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">:CLOSE-ON-COMPLETION <span class="p">- This option specifies that SEdit cannot remain active for multiple completions. That is, the SEdit window cannot be shrunk, and the completion commands that normally leave the window open will in this case close the window and terminate the edit.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">:COMPILE-ON-COMPLETION <span class="p">- This option specifies that SEdit should call the</span></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">*COMPILE-FN* <span class="p">to compile the definition being edited upon completion, regardless of the completion command used.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The TTY Editor                                                                                                                                           </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This editor the main code editor in pre-window-system versions of Interlisp. For that task, it has been replaced by SEdit.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">However, the TTY Editor provides an excellent language for manipulating list structure and making large-scale code changes. For example, several tools for cleaning up code are written using TTY Editor calls to do the actual work.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">TTY Editor Local Attention-Changing Commands                                                                               </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This section describes commands that change the current expression (i.e., change the edit chain) thereby &quot;shifting the editor’s attention.&quot; These commands depend only on the <i>structure </i>of the edit chain, as compared to the search commands (presented later), which search the contents of the structure.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">UP <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 94%;text-align: justify;">UP <span class="p">modifies the edit chain so that the old current expression (i.e., the one at the time </span>UP <span class="p">was called) is the first element in the new current expression. If the current expression is the first element in the next higher expression </span>UP <span class="p">simply does a </span>0<span class="p">. Otherwise </span>UP <span class="p">adds the corresponding tail to the edit chain.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">If a <span class="s11">P </span>command would cause the editor to type <span class="s11">... </span>before typing the current expression, ie., the current expression is a tail of the next higher expression, <span class="s11">UP </span>has no effect.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">*PP</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(COND ((NULL X) (RETURN Y)))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;">*1 P COND</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*UP P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND (&amp; &amp;))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*-1 P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((NULL X) (RETURN Y))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*UP P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">... ((NULL X) (RETURN Y))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*UP P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">... ((NULL X) (RETURN Y)))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;">*F NULL P (NULL X)</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*UP P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((NULL X) (RETURN Y))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*UP P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">... ((NULL X) (RETURN Y)))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The execution of <span class="s11">UP </span>is straightforward, except in those cases where the current expression appears more than once in the next higher expression. For example, if the current expression is <span class="s11">(A NIL B NIL C NIL) </span>and you perform <span class="s11">4 </span>followed by <span class="s11">UP</span>, the current expression should then be <span class="s11">... NIL C NIL)</span>. <span class="s11">UP </span>can determine which tail is the correct one because the commands that descend save the last tail on an internal editor variable, <span class="s11">LASTAIL</span>. Thus after the <span class="s11">4 </span>command is executed, <span class="s11">LASTAIL </span>is <span class="s11">(NIL C NIL)</span>. When <span class="s11">UP </span>is called, it first determines if the current expression is a tail of the next higher expression. If it is, <span class="s11">UP </span>is finished. Otherwise, <span class="s11">UP </span>computes <span class="s11">(MEMB </span><span class="s16">CURRENT-EXPRESSION NEXT-HIGHER- EXPRESSION</span><span class="s11">) </span>to obtain a tail beginning with the current expression. The current expression should <i>always </i>be either a tail or an element of the next higher expression. If it is neither, for example yopu have directly (and incorrectly) manipulated the edit chain, <span class="s11">UP </span>generates an error. If there are no other instances of the current expression in the next higher expression, this tail is the correct one.  Otherwise <span class="s11">UP </span>uses <span class="s11">LASTAIL </span>to select the correct tail.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Occasionally you can get the edit chain into a state where <span class="s11">LASTAIL </span>cannot resolve the ambiguity, for example if there were two non-atomic structures in the same expression that were <span class="s11">EQ</span>, and you descended more than one level into one of them and then tried to come back out using <span class="s11">UP</span>. In this case, <span class="s11">UP </span>prints <span class="s11">LOCATION UNCERTAIN </span>and generates an error. Of course, we could have solved this problem completely in our implementation by saving at each descent <i>both </i>elements and tails. However, this would be a costly solution to a situation that arises infrequently, and when it does, has no detrimental effects. The <span class="s11">LASTAIL </span>solution is cheap and resolves almost all of the ambiguities.</p><p class="s16" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">N <span class="p">(</span>N&gt; = 1<span class="p">)                                                                                                                   [Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Adds the <span class="s16">N</span>th element of the current expression to the front of the edit chain, thereby making it be the new current expression. Sets <span class="s11">LASTAIL </span>for use by <span class="s11">UP</span>. Generates an error if the current expression is not a list that contains at least <span class="s16">N </span>elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s11">-</span>N <span class="p">(</span>N<span class="s11">&gt; = 1</span><span class="p">) [Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Adds the <span class="s16">N</span>th element from the end of the current expression to the front of the edit chain, thereby making it be the new current expression. Sets <span class="s11">LASTAIL </span>for use by <span class="s11">UP</span>. Generates an error if the current expression is not a list that contains at least <span class="s16">N </span>elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">0 <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Sets the edit chain to <span class="s11">CDR </span>of the edit chain, thereby making the next higher expression be the new current expression. Generates an error if there is no higher expression, i.e., <span class="s11">CDR </span>of edit chain is <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Note that <span class="s11">0 </span>usually corresponds to going back to the next higher left parenthesis, but not always. For example:</p><p class="s11" style="padding-top: 7pt;padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(A B C D E F B)</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*3 UP P</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 9pt;text-align: left;">... C D E F G)</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*3 UP P</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 9pt;text-align: left;">... E F G)</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*0 P</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;">... C D E F G)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the intention is to go back to the next higher left parenthesis, regardless of any intervening tails, the command <span class="s11">!0 </span>can be used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">!0 <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Does repeated <span class="s11">0</span>’s until it reaches a point where the current expression is <i>not </i>a tail of the next higher expression, i.e., always goes back to the next higher left parenthesis.</p><p class="s4" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s5"> </span><span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Sets the edit chain to <span class="s11">LAST </span>of edit chain, thereby making the top level expression be the current expression. Never generates an error.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">NX <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Effectively does an <span class="s11">UP </span>followed by a <span class="s11">2</span>, thereby making the current expression be the next expression. Generates an error if the current expression is the last one in a list. (However,</p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">!NX <span class="p">described below will handle this case.)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">BK <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Makes the current expression be the previous expression in the next higher expression. Generates an error if the current expression is the first expression in a list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">For example:</p><p class="s11" style="padding-top: 7pt;padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*PP</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND ((NULL X) (RETURN Y)))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 88%;text-align: left;">*F RETURN P (RETURN Y)</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 88%;text-align: left;">*BK P (NULL X)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Both <span class="s11">NX </span>and <span class="s11">BK </span>operate by performing a <span class="s11">!0 </span>followed by an appropriate number, i.e., there won’t be an extra tail above the new current expression, as there would be if <span class="s11">NX </span>operated by performing an <span class="s11">UP </span>followed by a <span class="s11">2</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(NX <i>N</i>)                                                   <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: left;">(<span class="s16">N </span><span class="s11">&gt;= 1</span>) Equivalent to <span class="s16">N </span><span class="s11">NX </span>commands, except if an error occurs, the edit chain is not changed.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(BK <i>N</i>)                                                   <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: left;">(<span class="s16">N </span><span class="s11">&gt;= 1</span>) Equivalent to <span class="s16">N </span><span class="s11">BK </span>commands, except if an error occurs, the edit chain is not changed.</p><p class="s11" style="padding-top: 6pt;padding-left: 149pt;text-indent: 0pt;text-align: left;"><span class="p">Note: </span>(NX -<i>N</i>) <span class="p">is equivalent to </span>(BK <i>N</i>)<span class="p">, and vice versa.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">!NX                                                      <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 91%;text-align: left;">Makes the current expression be the next expression at a higher level, i.e., goes through any number of right parentheses to get to the next expression.  For example:</p><p class="s11" style="padding-top: 7pt;padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*PP</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(PROG ((L L)</p><p class="s11" style="padding-left: 235pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(UF L))</p><p class="s11" style="padding-left: 208pt;text-indent: 0pt;line-height: 9pt;text-align: left;">LP (COND</p><p class="s11" style="padding-left: 262pt;text-indent: -16pt;line-height: 88%;text-align: left;">((NULL (SETQ L (CDR L))) (ERROR!))</p><p class="s11" style="padding-left: 262pt;text-indent: -16pt;line-height: 88%;text-align: left;">([NULL (CDR (FMEMB (CAR L) (CADR L] (GO LP)))</p><p class="s11" style="padding-left: 230pt;text-indent: 0pt;line-height: 88%;text-align: left;">(EDITCOM (QUOTE NX)) (SETQ UNFIND UF) (RETURN L))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 88%;text-align: left;">*F CDR P (CDR L)</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*NX</p><p class="s11" style="padding-top: 7pt;padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">NX ?</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 88%;text-align: left;">*!NX P (ERROR!)</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*!NX P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((NULL &amp;) (GO LP))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*!NX P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(EDITCOM (QUOTE NX))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">!NX </span>operates by doing <span class="s11">0</span>’s until it reaches a stage where the current expression is <i>not </i>the last expression in the next higher expression, and then does a <span class="s11">NX</span>. Thus <span class="s11">!NX </span>always goes through at least one unmatched right parenthesis, and the new current expression is always on a different level, i.e., <span class="s11">!NX </span>and <span class="s11">NX </span>always produce different results. For example using the previous current expression:</p><p class="s11" style="padding-top: 8pt;padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">*F CAR P (CAR L)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">*!NX P (GO LP)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*<span class="p">\</span>P P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(CAR L)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">*NX P (CADR L)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*</p><p class="s11" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(NTH <i>N</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;"><span class="s11">(</span><span class="s16">N </span><span class="s11">~= 0) </span>Equivalent to <span class="s16">N </span>followed by <span class="s11">UP</span>, i.e., causes the list starting with the <span class="s16">N</span>th element of the current expression (or <span class="s16">N</span>th from the end if <span class="s16">N </span>&lt; 0) to become the current expression. Causes an error if current expression does not have at least <span class="s16">N </span>elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">(NTH 1) <span class="p">is a no-op, as is </span>(NTH -<i>L</i>) <span class="p">where </span><i>L </i><span class="p">is the length of the current expression.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">line-feed <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Moves to the &quot;next&quot; expression and prints it, i.e. performs a <span class="s11">NX </span>if possible, otherwise performs a <span class="s11">!NX</span>. (The latter case is indcated by first printing &quot;<span class="s11">&gt;</span>&quot;.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Control-X <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Control-X moves to the &quot;previous&quot; thing and then prints it, i.e. performs a <span class="s11">BK </span>if possible, otherwise a <span class="s11">!0 </span>followed by a <span class="s11">BK</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Control-Z <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Control-Z moves to the last expression and prints it, i.e. does <span class="s11">-1 </span>followed by <span class="s11">P</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Line-feed, Control-X, and Control-Z are implemented as <i>immediate </i>read macros; as soon as they are read, they abort the current printout. They thus provide a convenient way of moving around in the editor. To facilitate using different control characters for those macros, the function <span class="s11">SETTERMCHARS </span>is provided (see below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Commands That Search                                                                                                                           </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">All of the editor commands that search use the same pattern matching routine (the function <span class="s11">EDIT4E</span>, below). We will therefore begin our discussion of searching by describing the pattern match mechanism. A pattern <span class="s16">PAT </span>matches with <span class="s16">X </span>if any of the following conditions are true:</p><ol id="l24"><ol id="l25"><li><p style="padding-top: 6pt;padding-left: 120pt;text-indent: -18pt;text-align: left;">If <span class="s16">PAT </span>is <span class="s11">EQ </span>to <span class="s16">X</span></p></li><li><p style="padding-top: 6pt;padding-left: 120pt;text-indent: -18pt;text-align: left;">If <span class="s16">PAT </span>is <span class="s11">&amp;</span></p></li><li><p style="padding-top: 6pt;padding-left: 120pt;text-indent: -18pt;text-align: left;">If <span class="s16">PAT </span>is a number and <span class="s11">EQP </span>to <span class="s16">X</span></p></li><li><p style="padding-top: 6pt;padding-left: 120pt;text-indent: -18pt;text-align: left;">If <span class="s16">PAT </span>is a string and <span class="s11">(STREQUAL </span><span class="s16">PAT X</span><span class="s11">) </span>is true</p></li><li><p class="s11" style="padding-top: 6pt;padding-left: 120pt;text-indent: -18pt;line-height: 12pt;text-align: justify;"><span class="p">If </span>(CAR <i>PAT</i>) <span class="p">is the atom </span>*ANY*<span class="p">, </span>(CDR <i>PAT</i>) <span class="p">is a list of patterns, and one of the patterns on</span></p><p class="s11" style="padding-left: 107pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(CDR <i>PAT</i>) <span class="p">matches </span><i>X</i><span class="p">.</span></p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -6pt;text-align: justify;">If <span class="s16">PAT </span>is a literal atom or string containing one or more <span class="s11">$</span>s (escapes), each <span class="s11">$ </span>can match an indefinite number (including 0) of contiguous characters in the atom or string <i>X</i>, e.g., <span class="s11">VER$ </span>matches both <span class="s11">VERYLONGATOM </span>and <span class="s11">&quot;VERYLONGSTRING&quot; </span>as do <span class="s11">$LONG$ </span>(but not <span class="s11">$LONG</span>), and</p><p class="s11" style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">$V$L$T$<span class="p">. Note: the litatom </span>$ <span class="p">(escape) matches only with itself.</span></p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -6pt;text-align: justify;">If <span class="s16">PAT </span>is a literal atom or string ending in <span class="s11">$$ </span>(escape, escape), <span class="s16">PAT </span>matches with the atom or string <span class="s16">X </span>if it is &quot;close&quot; to <span class="s16">PAT</span>, in the sense used by the spelling corrector (see Chapter 20). For example, <span class="s11">CONSS$$ </span>matches with <span class="s11">CONS</span>, <span class="s11">CNONC$$ </span>with <span class="s11">NCONC </span>or <span class="s11">NCONC1</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The pattern matching routine always types a message of the form <span class="s11">=</span><span class="s16">MATCHING-ITEM </span>to inform you of the object matched by a pattern of the above two types, unless <span class="s11">EDITQUIETFLG = T</span>. For example, if <span class="s11">VER$ </span>matches <span class="s11">VERYLONGATOM</span>, the editor would print <span class="s11">=VERYLONGATOM</span>.</p></li><li><p style="padding-top: 7pt;padding-left: 108pt;text-indent: -6pt;text-align: justify;">If <span class="s11">(CAR </span><span class="s16">PAT</span><span class="s11">) </span>is the atom <b>--</b>, <span class="s16">PAT </span>matches <span class="s16">X </span>if <span class="s11">(CDR </span><span class="s16">PAT</span><span class="s11">) </span>matches with some tail of <span class="s16">X</span>. For example, <span class="s11">(A -- (&amp;)) </span>will match with <span class="s11">(A B C (D))</span>, but not <span class="s11">(A B C D)</span>, or <span class="s11">(A B C (D) E)</span>. However, note that <span class="s11">(A -- (&amp;) --) </span>will match with <span class="s11">(A B C (D) E)</span>. In other words,</p><p class="s11" style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">-- <span class="p">can match any interior segment of a list.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 120pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="p">If </span>(CDR <span class="s9">P</span><i>AT</i>)= NIL<span class="p">, i.e., </span><i>PAT </i>= (--), <span class="p">then it matches any tail of a list. Therefore, </span>(A --</p><p class="s11" style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">) <span class="p">matches </span>(A), (A B C) <span class="p">and </span>(A . B)<span class="p">.</span></p></li><li><p style="padding-top: 6pt;padding-left: 120pt;text-indent: -18pt;text-align: left;">If <span class="s11">(CAR </span><span class="s16">PAT</span><span class="s11">) </span>is the atom <span class="s11">==</span>, <span class="s16">PAT </span>matches <span class="s16">X </span>if and only if <span class="s11">(CDR </span><span class="s16">PAT</span><span class="s11">) </span>is <span class="s11">EQ </span>to <span class="s16">X</span>.</p><p style="padding-top: 7pt;padding-left: 108pt;text-indent: 12pt;line-height: 93%;text-align: justify;">This pattern is for use by programs that call the editor as a subroutine, since any non- atomic expression in a command <i>typed </i>in by you obviously cannot be <span class="s11">EQ </span>to already existing structure.</p></li><li><p class="s11" style="padding-top: 6pt;padding-left: 120pt;text-indent: -18pt;line-height: 12pt;text-align: justify;"><span class="p">If </span>(CADR <i>PAT</i>) <span class="p">is the atom </span>.. <span class="p">(two periods), </span><i>PAT </i><span class="p">matches </span><i>X </i><span class="p">if </span>(CAR <i>PAT</i>) <span class="p">matches </span>(CAR <i>X</i>)</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">and <span class="s11">(CDDR </span><span class="s16">PAT</span><span class="s11">) </span>is contained in <span class="s16">X</span>, as described below.</p></li><li><p style="padding-top: 6pt;padding-left: 120pt;text-indent: -18pt;line-height: 12pt;text-align: justify;">Otherwise if <span class="s16">X </span>is a list, <span class="s16">PAT </span>matches <span class="s16">X </span>if <span class="s11">(CAR </span><span class="s16">PAT</span><span class="s11">) </span>matches <span class="s11">(CAR </span><span class="s16">X</span><span class="s11">)</span>, and <span class="s11">(CDR </span><span class="s16">PAT</span><span class="s11">)</span></p></li></ol></ol><p class="s11" style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="p">matches </span>(CDR <i>X</i>)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">When the editor is searching, the pattern matching routine is called to match with <i>elements </i>in the structure, unless the pattern begins with <span class="s11">... </span>(three periods), in which case <span class="s11">CDR </span>of the pattern is matched against proper tails in the structure.  Thus,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(A B C (B C))</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*F (B --)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(B C)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*0 F (... B --)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">... B C (B C))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Matching is also attempted with atomic tails (except for <span class="s11">NIL</span>). Thus,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(A (B . C))</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*F C</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">... . C)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Although the current expression is the atom <span class="s11">C </span>after the final command, it is printed as <span class="s11">C) </span>to</p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">alert you to the fact that <span class="s11">C </span>is a <i>tail</i>, not an element. Note that the pattern <span class="s11">C </span>will match with either instance of <span class="s11">C </span>in <span class="s11">(A C (B . C))</span>, whereas <span class="s11">(. C) </span>will match only the second <span class="s11">C</span>. The pattern</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">NIL <span class="p">will only match with </span>NIL <span class="p">as an element, i.e., it will not match in </span>(A B)<span class="p">, even though </span>CDDR <span class="p">of </span>(A B) <span class="p">is </span>NIL<span class="p">. However, </span>(... . NIL) <span class="p">(or equivalently </span>(. )<span class="p">) may be used to specify a </span>NIL <span class="s9">tail</span><span class="p">, e.g.,</span></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(... . NIL) <span class="p">will match with </span>CDR <span class="p">of the third subexpression of </span>((A . B) (C . D) (E))<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Search Algorithm</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Searching begins with the current expression and proceeds in print order. Searching usually means find the next instance of this pattern, and consequently a match is not attempted that would leave the edit chain unchanged. At each step, the pattern is matched against the next element in the expression currently being searched, unless the pattern begins with <span class="s11">... </span>(three periods) in which case it is matched against the next tail of the expression.</p><p class="s11" style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">If the match is not successful, the search operation is recursive first in the </span>CAR <span class="p">direction, and then in the </span>CDR <span class="p">direction, i.e., if the element under examination is a list, the search descends into that list before attempting to match with other elements (or tails) at the same level. Note: A find command of the form </span>(F <i>PATTERN </i>NIL) <span class="p">will only attempts matches at the top level of the current expression, i.e., it does not descend into elements, or ascend to higher expressions.</span></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">However, at no point is the total recursive depth of the search (sum of number of <span class="s11">CAR</span>s and <span class="s11">CDR</span>s descended into) allowed to exceed the value of the variable <span class="s11">MAXLEVEL</span>. At that point, the search of that element or tail is abandoned, exactly as though the element or tail had been completely searched without finding a match, and the search continues with the element or tail for which the recursive depth is below <span class="s11">MAXLEVEL</span>. This feature is designed to enable you to search circular list structures (by setting <span class="s11">MAXLEVEL </span>small), as well as protecting him from accidentally encountering a circular list</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">structure in the course of normal editing. <span class="s11">MAXLEVEL </span>can also be set to <span class="s11">NIL</span>, which is equivalent to infinity. <span class="s11">MAXLEVEL </span>is initially set to 300.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If a successful match is not found in the current expression, the search automatically ascends to the next higher expression, and continues searching there on the next expression after the expression it just finished searching. If there is none, it ascends again, etc. This process continues until the entire edit chain has been searched, at which point the search fails, and an error is generated. If the search fails (or is aborted by Control-E), the edit chain is not changed (nor are any <span class="s11">CONS</span>es performed).</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the search is successful, i.e., an expression is found that the pattern matches, the edit chain is set to the value it would have had had you reached that expression via a sequence of integer commands.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If the expression that matched was a list, it will be the final link in the edit chain, i.e., the new current expression. If the expression that matched is not a list, e.g., is an atom, the current expression will be the tail beginning with that atom, unless the atom is a tail, e.g., <span class="s11">B </span>in <span class="s11">(A . B)</span>. In this case, the current expression will be <span class="s11">B</span>, but will print as <span class="s11">B)</span>. In other words, the search effectively does an <span class="s11">UP</span></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(unless <span class="s11">UPFINDFLG = NIL </span>(initially <span class="s11">T</span>). See &quot;Form Oriented Editing&quot; in this chapter).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Search Commands</p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">All of the commands below set <span class="s11">LASTAIL </span>for use by <span class="s11">UP</span>, set <span class="s11">UNFIND </span>for use by \ (below), and do not change the edit chain or perform any <span class="s11">CONS</span>es if they are unsuccessful or aborted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">F <i>PATTERN                                                </i><span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Actually two commands: the <span class="s11">F </span>informs the editor that the <i>next </i>command is to be interpreted as a pattern. This is the most common and useful form of the find command. If successful, the edit chain always changes, i.e., <span class="s11">F </span><span class="s16">PATTERN </span>means find the next instance of <span class="s16">PATTERN</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>(MEMB <i>PATTERN CURRENT-EXPRESSION</i>) <span class="p">is true, </span>F <span class="p">does not proceed with a full recursive search. If the value of the </span>MEMB <span class="p">is </span>NIL<span class="p">, </span>F <span class="p">invokes the search algorithm described above.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If the current expression is <span class="s11">(PROG NIL LP (COND (-- (GO LP1))) ... LP1 )</span>,</p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">then <span class="s11">F LP1 </span>will find the <span class="s11">PROG </span>label, not the <span class="s11">LP1 </span>inside of the <span class="s11">GO </span>expression, even though the latter appears first (in print order) in the current expression. Typing <span class="s11">1 </span>(making the atom <span class="s11">PROG </span>be the current expression) followed by <span class="s11">F LP1 </span><i>would </i>find the first <span class="s11">LP1</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">F <i>PATTERN </i>N                                              <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Same as <span class="s11">F </span><span class="s16">PATTERN</span>, i.e., <span class="s11">F</span>inds the <span class="s11">N</span>ext instance of <span class="s16">PATTERN</span>, except that the <span class="s11">MEMB </span>check of <span class="s11">F</span></p><p class="s16" style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">PATTERN <span class="p">is not performed.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">F <i>PATTERN </i>T <span class="s10">[</span><span class="p">Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">F </span><span class="s16">PATTERN</span>, except that it may succeed without changing the edit chain, and it does not perform the <span class="s11">MEMB </span>check. For example, if the current expression is <span class="s11">(COND ...), F COND </span>will look for the next <span class="s11">COND</span>, but <span class="s11">(F COND T) </span>will &quot;stay here&quot;.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(F <i>PATTERN </i>N) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;"><span class="s11">(</span><span class="s16">N </span><span class="s11">&gt;= 1) </span>Finds the <span class="s16">N</span>th place that <span class="s16">PATTERN </span>matches. Equivalent to <span class="s11">(F </span><span class="s16">PATTERN </span><span class="s11">T) </span>followed by <span class="s11">(F </span><span class="s16">PATTERN </span><span class="s11">N) </span>repeated <span class="s16">N</span>-1 times. Each time <span class="s16">PATTERN </span>successfully matches, <span class="s16">N </span>is decremented by 1, and the search continues, until <span class="s16">N </span>reaches 0. Note that <span class="s16">PATTERN </span>does not have to match with <span class="s16">N </span>identical expressions; it just has to match <span class="s16">N </span>times. Thus if the current expression is <span class="s11">(FOO1 FOO2 FOO3)</span>, <span class="s11">(F FOO$ 3) </span>will find <span class="s11">FOO3</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">If <span class="s16">PATTERN </span>does not match successfully <span class="s16">N </span>times, an error is generated and the edit chain is unchanged (even if <span class="s16">PATTERN </span>matched <span class="s16">N</span>-1 times).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(F <i>PATTERN</i>) <span class="p">[Editor Command]</span></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: left;">F <i>PATTERN </i>NIL <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Similar to <span class="s11">F </span><span class="s16">PATTERN</span>, except that it only matches with elements at the top level of the current expression, i.e., the search will not descend into the current expression, nor will it go outside of the current expression. May succeed without changing the edit chain.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">For example, if the current expression is <span class="s11">(PROG NIL (SETQ X (COND &amp; &amp;)) (COND &amp;)</span></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;">...)<span class="p">, the command </span>F COND <span class="p">will find the </span>COND <span class="p">inside the </span>SETQ<span class="p">, whereas </span>(F (COND --))</p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;">will find the top level <span class="s11">COND</span>, i.e., the second one.</p><p class="s16" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s11">(FS </span>PATTERN<span class="s32">1 </span>... PATTERN<span class="s32">N</span><span class="s11">) </span><span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">Equivalent to <span class="s11">F </span><span class="s16">PATTERN</span><span class="s32">1 </span>followed by <span class="s11">F </span><span class="s16">PATTERN</span><span class="s32">2 </span><span class="s11">... </span>followed by <span class="s11">F </span><span class="s16">PATTERN</span><span class="s32">N</span>, so that if <span class="s11">F </span><span class="s16">PATTERN</span><span class="s32">M </span>fails, the edit chain is left at the place <span class="s16">PATTERN</span><span class="s32">M-1 </span>matched.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(F= <i>EXPRESSION X</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="p">Equivalent to </span>(F (== . <i>EXPRESSION</i>) <i>X</i>)<span class="p">, i.e., searches for a structure </span>EQ <span class="p">to </span><i>EXPRESSION</i></p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(see above).</p><p class="s16" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s11">(ORF </span>PATTERN<span class="s32">1 </span>... PATTERN<span class="s32">N</span><span class="s11">) </span><span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">Equivalent to <span class="s11">(F (*ANY*</span><span class="s16">PATTERN</span><span class="s32">1 </span><span class="s11">... </span><span class="s16">PATTERN</span><span class="s32">N</span><span class="s11">) N)</span>, i.e., searches for an expression that is matched by either <span class="s16">PATTERN</span><span class="s32">1</span>, <i>PATTERN</i><i>2</i>, <span class="s11">... </span>or <span class="s16">PATTERN</span><span class="s32">N </span>(see above).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: center;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">BF <i>PATTERN                                               </i><span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 91%;text-align: justify;">&quot;Backwards Find&quot;. Searches in reverse print order, beginning with the expression immediately before the current expression (unless the current expression is the top level expression, in which case <span class="s11">BF </span>searches the entire expression, in reverse order).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s11">BF </span>uses the same pattern match routine as <span class="s11">F</span>, and <span class="s11">MAXLEVEL </span>and <span class="s11">UPFINDFLG </span>have the same effect, but the searching begins at the <i>end </i>of each list, and descends into each element before attempting to match that element. If unsuccessful, the search continues with the next previous element, etc., until the front of the list is reached, at which point <span class="s11">BF </span>ascends and backs up, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">For example, if the current expression is</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">(PROG NIL (SETQ X (SETQ Y (LIST Z))) (COND ((SETQ W --) --)) --),</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 106%;text-align: justify;">the command <span class="s11">F LIST </span>followed by <span class="s11">BF SETQ </span>will leave the current expression as <span class="s11">(SETQ Y (LIST Z))</span>, as will <span class="s11">F COND </span>followed by <span class="s11">BF SETQ</span><span class="s10">.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">BF <i>PATTERN </i>T                                             <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">BF </span><span class="s16">PATTERN</span>, except that the search always includes the current expression, i.e., starts at the end of current expression and works backward, then ascends and backs up, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Thus in the previous example, where <span class="s11">F COND </span>followed by <span class="s11">BF SETQ </span>found <span class="s11">(SETQ Y (LIST Z)), F COND </span>followed by <span class="s11">(BF SETQ T) </span>would find the <span class="s11">(SETQ W --) </span>expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">(BF <i>PATTERN</i>)                                             <span class="p">[Editor Command]</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">BF <i>PATTERN </i>NIL                                           <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">BF </span><span class="s16">PATTERN</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(GO <i>LABEL</i>)                                               <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Makes the current expression be the first thing after the <span class="s11">PROG </span>label <span class="s16">LABEL</span>, i.e. goes where an executed <span class="s11">GO </span>would go.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="text-indent: 0pt;text-align: center;">Location Specification</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Many of the more sophisticated commands described later in this chapter use a more general method of specifying position called a &quot;location specification.&quot; A location specification is a list of edit commands that are executed in the normal fashion with two exceptions. First, all commands not recognized by the editor are interpreted as though they had been preceded by <span class="s11">F</span>; normally such commands would cause errors. For example, the location specification <span class="s11">(COND 2 3) </span>specifies the 3rd element in the first clause of the next <span class="s11">COND</span>. Note that you could always write <span class="s11">F COND </span>followed by 2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">and 3 for <span class="s11">(COND 2 3) </span>if you were not sure whether or not <span class="s11">COND </span>was the name of an atomic command.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Secondly, if an error occurs while evaluating one of the commands in the location specification, and the edit chain had been changed, i.e., was not the same as it was at the beginning of that execution of the location specification, the location operation will continue. In other words, the location operation keeps going unless it reaches a state where it detects that it is &quot;looping&quot;, at which point it gives up. Thus, if <span class="s11">(COND 2 3) </span>is being located, and the first clause of the next <span class="s11">COND </span>contained only two elements, the execution of the command 3 would cause an error. The search would then continue by looking for the next <span class="s11">COND</span>. However, if a point were reached where there were no further <span class="s11">COND</span>s, then the first command, <span class="s11">COND</span>, would cause the error; the edit chain would not have been changed, and so the entire location operation would fail, and cause an error.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The <span class="s11">IF </span>command (see above) in conjunction with the <span class="s11">## </span>function (see below) provide a way of using arbitrary predicates applied to elements in the current expression. <span class="s11">IF </span>and <span class="s11">## </span>will be described in detail later in the chapter, along with examples illustrating their use in location specifications.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Throughout this chapter, the meta-symbol <span class="s11">@ </span>is used to denote a location specification. Thus <span class="s11">@ </span>is a list of commands interpreted as described above. <span class="s11">@ </span>can also be atomic, in which case it is interpreted as <span class="s11">(LIST @)</span>.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(LC . @) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Provides a way of explicitly invoking the location operation, e.g., <span class="s11">(LC COND 2 3) </span>will perform the the search described above.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(LCL . @) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Same as <span class="s11">LC </span>except the search is confined to the current expression, i.e., the edit chain is rebound during the search so that it looks as though the editor were called on just the current expression. For example, to find a <span class="s11">COND </span>containing a <span class="s11">RETURN</span>, one might use the location specification <span class="s11">(COND (LCL RETURN) </span>\<span class="s11">) </span>where the \ would reverse the effects of the <span class="s11">LCL </span>command, and make the final current expression be the <span class="s11">COND</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(2ND . @) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">(LC . @) </span>followed by another <span class="s11">(LC . @) </span>except that if the first succeeds and second fails, no change is made to the edit chain.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(3ND . @) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">2ND</span>.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s19"></span><span class="s21"> </span><i>PATTERN</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Ascends the edit chain looking for a link which matches <span class="s16">PATTERN</span>. In other words, it keeps doing <span class="s11">0</span>’s until it gets to a specified point. If <span class="s16">PATTERN </span>is atomic, it is matched with the first</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;line-height: 91%;text-align: left;">element of each link, otherwise with the entire link. If no match is found, an error is generated, and the edit chain is unchanged.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: left;">If <span class="s16">PATTERN </span>is of the form <span class="s11">(IF </span><span class="s16">EXPRESSION</span><span class="s11">)</span>, <span class="s16">EXPRESSION </span>is evaluated at each link, and if its value is <span class="s11">NIL</span>, or the evaluation causes an error, the ascent continues.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">For example:</p><p class="s11" style="padding-top: 7pt;padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*PP</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">[PROG NIL</p><p class="s11" style="padding-left: 214pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND</p><p class="s11" style="padding-left: 241pt;text-indent: -10pt;line-height: 88%;text-align: left;">[(NULL (SETQ L (CDR L))) (COND</p><p class="s11" style="padding-left: 230pt;text-indent: 27pt;line-height: 88%;text-align: left;">(FLG (RETURN L] ([NULL (CDR (FMEMB (CAR L)</p><p class="s11" style="padding-left: 241pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(CADR L]]</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*F CADR</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*(<span class="s19"></span><span class="s21"> </span>COND)</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND (&amp; &amp;) (&amp; &amp;))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">Note that this command differs from <span class="s11">BF </span>in that it does not search <i>inside </i>of each link, it simply ascends. Thus in the above example, <span class="s11">F CADR </span>followed by <span class="s11">BF COND </span>would find <span class="s11">(COND (FLG (RETURN L)))</span>, not the higher <span class="s11">COND</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(BELOW <i>COM X</i>)                                            <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Ascends the edit chain looking for a link specified by <span class="s16">COM</span>, and stops <span class="s16">X </span>links below that (only links that are elements are counted, not tails). In other words <span class="s11">BELOW </span>keeps doing <span class="s11">0</span>’s until it gets to a specified point, and then backs off <span class="s16">X </span><span class="s11">0</span>’s.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Note that <span class="s16">X </span>is evaluated, so one can type <span class="s11">(BELOW </span><span class="s16">COM </span><span class="s11">(IPLUS X Y))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(BELOW <i>COM</i>)                                              <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">Same as </span>(BELOW <i>COM </i>1)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">For example, <span class="s11">(BELOW COND) </span>will cause the <span class="s11">COND </span><i>clause </i>containing the current expression to become the new current expression. Thus if the current expression is as shown above, <span class="s11">F CADR </span>followed by <span class="s11">(BELOW COND) </span>will make the new expression be <span class="s11">([NULL (CDR (FMEMB (CAR L) (CADR L] (GO LP))</span>, and is therefore equivalent to <span class="s11">0 0 0 0</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The <span class="s11">BELOW </span>command is useful for locating a substructure by specifying something it contains. For example, suppose you are editing a list of lists, and want to find a sublist that contains a <span class="s11">FOO </span>(at any depth). He simply executes <span class="s11">F FOO (BELOW </span>\<span class="s11">)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(NEX <i>COM</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="p">Same as </span>(BELOW <i>COM</i>) <span class="p">followed by </span>NX<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">For example, if you are deep inside of a <span class="s11">SELECTQ </span>clause, you can advance to the next clause with <span class="s11">(NEX SELECTQ)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">NEX <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="p">Same as </span>(NEX <span class="s19"></span>)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">The atomic form of <span class="s11">NEX </span>is useful if you will be performing repeated executions of <span class="s11">(NEX </span><span class="s16">COM</span><span class="s11">)</span>. By simply <span class="s11">MARK</span>ing (see the next section) the chain corresponding to <span class="s16">COM</span>, you can use <span class="s11">NEX </span>to step through the sublists.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(NTH <i>COM</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="p">Generalized </span>NTH <span class="p">command. Effectively performs </span>(LCL . <i>COM</i>)<span class="p">, followed by </span>(BELOW <span class="p">\</span>)<span class="p">, followed by </span>UP<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">If the search is unsuccessful, <span class="s11">NTH </span>generates an error and the edit chain is not changed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="p">Note that </span>(NTH <i>NUMBER</i>) <span class="p">is just a special case of </span>(NTH <i>COM</i>)<span class="p">, and in fact, no special check is made for </span><i>COM </i><span class="p">a number; both commands are executed identically.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 92%;text-align: justify;">In other words, <span class="s11">NTH </span>locates <span class="s16">COM</span>, using a search restricted to the current expression, and then backs up to the current level, where the new current expression is the tail whose first element contains, however deeply, the expression that was the terminus of the location operation. For example:</p><p class="s11" style="padding-top: 7pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">(PROG (&amp; &amp;) LP (COND &amp; &amp;) (EDITCOM &amp;) (SETQ UNFIND UF) (RETURN L))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(NTH UF)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">... (SETQ UNFIND UF) (RETURN L))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p class="s16" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">PATTERN <span class="s11">.. @ </span><span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="p">For example, </span>(COND .. RETURN)<span class="p">. Finds a </span>COND <span class="p">that contains a </span>RETURN<span class="p">, at any depth. Equivalent to (but more efficient than) </span>(F <i>PATTERN </i>N)<span class="p">, </span>(LCL . @) <span class="p">followed by </span>(<span class="s19"></span><span class="s21"> </span><i>PATTERN</i>)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">An infix command, &quot;</span>..<span class="p">&quot; is not a meta-symbol, it </span><span class="s9">is </span><span class="p">the name of the command. </span>@ <span class="p">is </span>CDDR <span class="p">of the command. Note that </span>(<i>PATTERN </i>.. @) <span class="p">can also be used directly as an edit pattern as described above, e.g. </span>F (<i>PATTERN </i>.. @)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">For example, if the current expression is</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">(PROG NIL [COND ((NULL L) (COND (FLG (RETURN L] --),</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">then </span>(COND .. RETURN) <span class="p">will make </span>(COND (FLG (RETURN L))) <span class="p">be the current expression. Note that it is the innermost </span>COND <span class="p">that is found, because this is the first </span>COND <span class="p">encountered when ascending from the </span>RETURN<span class="p">. In other words, </span>(<i>PATTERN </i>.. @) <span class="p">is not </span><span class="s9">always </span><span class="p">equivalent to </span>(F <i>PATTERN </i>N)<span class="p">, followed by </span>(LCL . @) <span class="p">followed by \.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Note that <span class="s11">@ </span>is a location specification, not just a pattern. Thus <span class="s11">(RETURN .. COND 2 3) </span>can be used to find the <span class="s11">RETURN </span>which contains a <span class="s11">COND </span>whose first clause contains (at least) three elements. Note also that since <b>@ </b>permits any edit command, you can write commands of the form <span class="s11">(COND .. (RETURN .. COND))</span>, which will locate the first <span class="s11">COND </span>that contains a <span class="s11">RETURN </span>that contains a <span class="s11">COND</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Commands That Save and Restore the Edit Chain                                                                                </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Several facilities are available for saving the current edit chain and later retrieving it: <span class="s11">MARK</span>, which marks the current chain for future reference, <span class="s19"></span>, which returns to the last mark without destroying it, and <span class="s19"></span>, which returns to the last mark and also erases it.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">MARK                                                     <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Adds the current edit chain to the front of the list <span class="s11">MARKLST</span>.</p><p class="s4" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s5">                                                                                                                       </span><span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Makes the new edit chain be <span class="s11">(CAR MARKLST)</span>. Generates an error if <span class="s11">MARKLST </span>is <span class="s11">NIL</span>, i.e., no <span class="s11">MARK</span>s have been performed, or all have been erased.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="p">This is an atomic command; do not confuse it with the list command </span>(<span class="s19"></span><span class="s21"> </span><i>PATTERN</i>)<span class="p">.</span></p><p class="s4" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s5">                                                                                                                   </span><span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: left;">Similar to <span class="s19"></span><span class="s21"> </span>but also erases the last <span class="s11">MARK</span>, i.e., performs <span class="s11">(SETQ MARKLST (CDR MARKLST))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;line-height: 91%;text-align: left;">If you have two chains marked, and wish to return to the first chain, you must perform <span class="s4"></span>, which removes the second mark, and then <span class="s19"></span>. However, the second mark is then no longer</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;line-height: 91%;text-align: justify;">accessible. If you want to be able to return to either of two (or more) chains, you can use the following generalized <span class="s11">MARK</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(MARK <i>SYMBOL</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Sets <span class="s16">SYMBOL </span>to the current edit chain,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="p">\ </span><span class="s16">SYMBOL</span>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Makes the current edit chain become the value of <span class="s16">SYMBOL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If you did not prepare in advance for returning to a particular edit chain, you may still be able to return to that chain with a single command by using \ or \<span class="s11">P</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 54pt;text-indent: 0pt;text-align: left;">\ [Editor Command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Makes the edit chain be the value of <span class="s11">UNFIND</span>. Generates an error if <span class="s11">UNFIND = NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="s11">UNFIND </span>is set to the current edit chain by each command that makes a &quot;big jump&quot;, i.e., a command that usually performs more than a single ascent or descent, namely <span class="s19"></span>, <span class="s19"></span>, <span class="s19"></span>,</p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;"><span class="s11">!NX</span>, all commands that involve a search, e.g., <span class="s11">F</span>, <span class="s11">LC</span>, <b>..</b>, <span class="s11">BELOW</span>, et al and \ and \<span class="s11">P </span>themselves. One exception is that <span class="s11">UNFIND </span>is not reset when the current edit chain is the top level expression, since this could always be returned to via the <span class="s19"></span><span class="s21"> </span>command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">For example, if you type <span class="s11">F COND</span>, and then <span class="s11">F CAR</span>, \ would take you back to the <span class="s11">COND</span>. Another \ would take you back to the <span class="s11">CAR</span>, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 54pt;text-indent: 0pt;text-align: left;">\<span class="s11">P </span>[Editor Command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Restores the edit chain to its state as of the last print operation, i.e., <span class="s11">P</span>, <span class="s11">?</span>, or <span class="s11">PP</span>. If the edit chain has not changed since the last printing, \<span class="s11">P </span>restores it to its state as of the printing before that one, i.e., two chains are always saved.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">For example, if you type <span class="s11">P </span>followed by <span class="s11">3 2 1 P</span>, \<span class="s11">P </span>returns to the first <span class="s11">P</span>, i.e., would be equivalent to <span class="s11">0 0 0</span>. Another \<span class="s11">P </span>would then take you back to the second <span class="s11">P</span>, i.e., you could use \<span class="s11">P </span>to flip back and forth between the two edit chains.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">If you had typed <span class="s11">P </span>followed by <span class="s11">F COND</span>, you could use <i>either </i>\ or \<span class="s11">P </span>to return to the <span class="s11">P</span>, i.e., the action of \ and \<span class="s11">P </span>are independent.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">S <i>SYMBOL </i>@ <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Sets <span class="s16">SYMBOL </span>(using <span class="s11">SETQ</span>) to the current expression after performing <span class="s11">(LC . @)</span>. The edit chain is not changed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Thus <span class="s11">(S FOO) </span>will set <span class="s11">FOO </span>to the current expression, and <span class="s11">(S FOO -1 1) </span>will set <span class="s11">FOO </span>to the first element in the last element of the current expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Commands That Modify Structure                                                                                                          </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The basic structure modification commands in the editor are:</p><p class="s11" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<i>N</i>) (<i>N </i>&gt;= 1) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Deletes the corresponding element from the current expression.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<i>N E</i><i>1 </i>... <i>E</i><i>M</i>) (<i>N </i>&gt;= 1)                                   <span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Replaces the <i>N</i>th element in the current expression with <span class="s16">E</span><span class="s32">1 </span><span class="s11">... </span><span class="s16">E</span><span class="s32">M</span>.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(-<i>N E</i><i>1 </i>... <i>E</i><i>M</i>) (<i>N </i>&gt;= 1)                                  <span class="p">[Editor Command]</span></p><p class="s16" style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="p">Inserts </span>E<span class="s32">1 </span><span class="s11">... </span>E<span class="s32">M </span><span class="p">before the </span>N<span class="p">th element in the current expression.</span></p><p class="s16" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(N </span>E<span class="s32">1 </span>... E<span class="s32">M</span><span class="s11">)                                            </span><span class="p">[Editor Command]</span></p><p class="s16" style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="p">Attaches </span>E<span class="s32">1 </span><span class="s11">... </span>E<span class="s32">M </span><span class="p">at the end of the current expression.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">As mentioned earlier: </span>all structure modification done by the editor is destructive, i.e., the editor uses <span class="s11">RPLACA </span>and <span class="s11">RPLACD </span>to physically change the structure it was given. <span class="p">However, all structure modification is undoable, see </span><span class="s11">UNDO </span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">All of the above commands generate errors if the current expression is not a list, or in the case of the first three commands, if the list contains fewer than <span class="s16">N </span>elements. In addition, the command <span class="s11">(1)</span>, i.e., delete the first element, will cause an error if there is only one element, since deleting the first element must be done by replacing it with the second element, and then deleting the second element. Or, to look at it another way, deleting the first element when there is only one element would require changing a list to an atom (i.e., to <span class="s11">NIL</span>) which cannot be done. However, the command <span class="s11">DELETE </span>will work even if there is only one element in the current expression, since it will ascend to a point where it <i>can </i>do the deletion.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the value of <span class="s11">CHANGESARRAY </span>is a hash array, the editor will mark all structures that are changed by doing <span class="s11">(PUTHASH </span><span class="s16">STRUCTURE FN </span><span class="s11">CHANGESARRAY)</span>, where <span class="s16">FN </span>is the name of the function. The algorithm used for marking is as follows:</p><ol id="l26"><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -6pt;line-height: 91%;text-align: left;">If the expression is inside of another expression already marked as being changed, do nothing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 5pt;padding-left: 72pt;text-indent: -18pt;text-align: left;">If the change is an insertion of or replacement with a list, mark the list as changed.</p></li><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -6pt;line-height: 91%;text-align: left;">If the change is an insertion of or replacement with an atom, or a deletion, mark the parent as changed.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">CHANGESARRAY <span class="p">is primarily for use by </span>PRETTYPRINT <span class="p">(Chapter 26). When the value of </span>CHANGECHAR <span class="p">is non-</span>NIL<span class="p">, </span>PRETTYPRINT<span class="p">, when printing to a file or display terminal, prints </span>CHANGECHAR <span class="p">in the right margin while printing an expression marked as having been changed. </span>CHANGECHAR <span class="p">is initially</span></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">|.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Implementation</p><p class="s9" style="padding-top: 4pt;padding-left: 89pt;text-indent: -30pt;line-height: 91%;text-align: justify;">Note: Since all commands that insert, replace, delete or attach structure use the same low level editor functions, the remarks made here are valid for all structure changing commands.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">For all replacement, insertion, and attaching at the end of a list, unless the command was typed in directly to the editor, <i>copies </i>of the corresponding structure are used, because of the possibility that the exact same command, (i.e., same list structure) might be used again. Thus if a program constructs the command <span class="s11">(1 (A B C)) </span>e.g., via <span class="s11">(LIST 1 FOO)</span>, and gives this command to the editor, the <span class="s11">(A B C) </span>used for the replacement will <i>not </i>be <span class="s11">EQ </span>to <span class="s11">FOO</span>. You can circumvent this by using the <span class="s11">I </span>command, which computes the structure to be used. In the above example, the form of the command would be <span class="s11">(I 1 FOO)</span>, which would replace the first element with the value of <span class="s11">FOO </span>itself.</p><p style="padding-top: 7pt;padding-left: 89pt;text-indent: -30pt;line-height: 94%;text-align: justify;">Note: Some editor commands take as arguments a list of edit commands, e.g., <span class="s11">(LP F FOO (1 (CAR FOO)))</span>. In this case, the command <span class="s11">(1 (CAR FOO)) </span>is not considered to have been &quot;typed in&quot; even though the <span class="s11">LP </span>command itself may have been typed in. Similarly, commands originating from macros, or commands given to the editor as arguments to <span class="s11">EDITF</span>, <span class="s11">EDITV</span>, et al, e.g., <span class="s11">EDITF(FOO F COND (N --)) </span>are not considered typed in.</p><p style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The rest of this section is included for applications wherein the editor is used to modify a data structure, and pointers into that data structure are stored elsewhere. In these cases, the actual mechanics of structure modification must be known in order to predict the effect that various commands may have on these outside pointers. For example, if the value of <span class="s11">FOO </span>is <span class="s11">CDR </span>of the current expression, what will the commands <span class="s11">(2)</span>, <span class="s11">(3)</span>, <span class="s11">(2 X Y Z)</span>, <span class="s11">(-2 X Y Z)</span>, etc. do to <span class="s11">FOO</span>?</p><p style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Deletion of the first element in the current expression is performed by replacing it with the second element and deleting the second element by patching around it. Deletion of any other element is done by patching around it, i.e., the previous tail is altered. Thus if <span class="s11">FOO </span>is <span class="s11">EQ </span>to the current expression which is <span class="s11">(A B C D)</span>, and <span class="s11">FIE </span>is <span class="s11">CDR </span>of <span class="s11">FOO</span>, after executing the command <span class="s11">(1)</span>, <span class="s11">FOO </span>will be <span class="s11">(B C D) </span>(which is <span class="s11">EQUAL </span>but not <span class="s11">EQ </span>to <span class="s11">FIE</span>). However, under the same initial conditions, after executing <span class="s11">(2) FIE </span>will be unchanged, i.e., <span class="s11">FIE </span>will still be <span class="s11">(B C D) </span>even though the current expression and <span class="s11">FOO </span>are now <span class="s11">(A C D)</span>.</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">A general solution of the problem isn’t possible, as it would require being able to make two lists <span class="s11">EQ </span>to each other that were originally different. Thus if <span class="s11">FIE </span>is <span class="s11">CDR </span>of the current expression, and <span class="s11">FUM </span>is <span class="s11">CDDR </span>of the current expression, performing <span class="s11">(2) </span>would have to make <span class="s11">FIE </span>be <span class="s11">EQ </span>to <span class="s11">FUM </span>if all subsequent operations were to update both <span class="s11">FIE </span>and <span class="s11">FUM </span>correctly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Both replacement and insertion are accomplished by smashing both <span class="s11">CAR </span>and <span class="s11">CDR </span>of the corresponding tail. Thus, if <span class="s11">FOO </span>were <span class="s11">EQ </span>to the current expression, <span class="s11">(A B C D)</span>, after <span class="s11">(1 X Y Z)</span>, <span class="s11">FOO </span>would be <span class="s11">(X Y Z B C D)</span>. Similarly, if <span class="s11">FOO </span>were <span class="s11">EQ </span>to the current expression, <span class="s11">(A B C D)</span>, then after <span class="s11">(-1 X Y Z), FOO </span>would be <span class="s11">(X Y Z A B C D)</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The <span class="s11">N </span>command is accomplished by smashing the last <span class="s11">CDR </span>of the current expression a la <span class="s11">NCONC</span>. Thus if <span class="s11">FOO </span>were <span class="s11">EQ </span>to any tail of the current expression, after executing an <span class="s11">N </span>command, the corresponding expressions would also appear at the end of <span class="s11">FOO</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">In summary, the only situation in which an edit operation will <i>not </i>change an external pointer occurs when the external pointer is to a <i>proper tail </i>of the data structure, i.e., to <span class="s11">CDR </span>of some node in the structure, and the operation is deletion. If all external pointers are to <i>elements </i>of the structure, i.e., to <span class="s11">CAR </span>of some node, or if only insertions, replacements, or attachments are performed, the edit operation will <i>always </i>have the same effect on an external pointer as it does on the current expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The A, B, and : Commands</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">In the </span>(<i>N</i>)<span class="p">, </span>(<i>N E</i><i>1 </i>... <i>E</i><i>M</i>)<span class="p">, and </span>(-<i>N E</i><i>1 </i>... <i>E</i><i>M</i>) <span class="p">commands, the sign of the integer is used to indicate the operation. As a result, there is no direct way to express insertion after a particular element (hence the necessity for a separate </span>N <span class="p">command). Similarly, you cannot specify deletion or replacement of the </span><i>N</i><span class="p">th element from the end of a list without first converting </span><i>N </i><span class="p">to the corresponding positive integer. Accordingly, we have:</span></p><p class="s16" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(B </span>E<span class="s32">1 </span>... E<span class="s32">M</span><span class="s11">)                                            </span><span class="p">[Editor Command]</span></p><p class="s11" style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="p">Inserts </span><i>E</i><i>1 </i>... <i>E</i><i>M </i><span class="p">before the current expression.  Equivalent to </span>UP <span class="p">followed by </span>(-1 <i>E</i><i>1 </i>...</p><p class="s16" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">E<span class="s32">M</span><span class="s11">)</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">For example, to insert <span class="s11">FOO </span>before the last element in the current expression, perform <b>-</b><span class="s11">1 </span>and then <span class="s11">(B FOO)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(A </span>E<span class="s32">1 </span>... E<span class="s32">M</span><span class="s11">)                                            </span><span class="p">[Editor Command]</span></p><p class="s11" style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="p">Inserts </span><i>E</i><i>1 </i>... <i>E</i><i>M </i><span class="p">after the current expression. Equivalent to </span>UP <span class="p">followed by </span>(-2 <i>E</i><i>1 </i>...</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><i>E</i><i>M</i>) <span class="p">or </span>(N <i>E</i><i>1 </i>... <i>E</i><i>M</i>)<span class="p">, whichever is appropriate.</span></p><p class="s16" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(: </span>E<span class="s32">1 </span>... E<span class="s32">M</span><span class="s11">)                                            </span><span class="p">[Editor Command]</span></p><p class="s11" style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="p">Replaces the current expression by </span><i>E</i><i>1 </i>... <i>E</i><i>M</i><span class="p">. Equivalent to </span>UP <span class="p">followed by </span>(1 <i>E</i><i>1 </i>...</p><p class="s16" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">E<span class="s32">M</span><span class="s11">)</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DELETE <span class="p">[Editor Command]</span></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(:) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Deletes the current expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">DELETE <span class="p">first tries to delete the current expression by performing an </span>UP <span class="p">and then a </span>(1)<span class="p">. This works in most cases. However, if after performing </span>UP<span class="p">, the new current expression contains only one element, the command </span>(1) <span class="p">will not work. Therefore, </span>DELETE <span class="p">starts over and performs a </span>BK<span class="p">, followed by </span>UP<span class="p">, followed by </span>(2)<span class="p">. For example, if the current expression is </span>(COND ((MEMB X Y)) (T Y))<span class="p">, and you perform </span>-1<span class="p">, and then </span>DELETE<span class="p">, the </span>BK-UP-(2) <span class="p">method is used, and the new current expression will be </span>... ((MEMB X Y)))<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">However, if the next higher expression contains only one element, <span class="s11">BK </span>will not work. So in this case, <span class="s11">DELETE </span>performs <span class="s11">UP</span>, followed by <span class="s11">(: NIL)</span>, i.e., it <i>replaces </i>the higher expression by <span class="s11">NIL</span>. For example, if the current expression is <span class="s11">(COND ((MEMB X Y)) (T Y)) </span>and you perform <span class="s11">F MEMB </span>and then <span class="s11">DELETE</span>, the new current expression will be <span class="s11">... NIL (T Y)) </span>and the original expression would now be <span class="s11">(COND NIL (T Y))</span>. The rationale behind this is that deleting <span class="s11">(MEMB X Y) </span>from <span class="s11">((MEMB X Y)) </span>changes a list of one element to a list of no elements, i.e., <span class="s11">() </span>or <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If the current expression is a tail, then <span class="s11">B</span>, <span class="s11">A</span>, <b>:</b>, and <span class="s11">DELETE </span>all work exactly the same as though the current expression were the first element in that tail. Thus if the current expression were <span class="s11">... (PRINT Y) (PRINT Z)), (B (PRINT X)) </span>would insert <span class="s11">(PRINT X) </span>before <span class="s11">(PRINT Y)</span>, leaving the current expression <span class="s11">... (PRINT X) (PRINT Y) (PRINT Z))</span>.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">The following forms of the <span class="s11">A</span>, <span class="s11">B</span>, and <b>: </b>commands incorporate a location specification:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(INSERT <i>E</i><i>1 </i>... <i>E</i><i>M </i>BEFORE . @) <span class="p">[Editor Command]</span></p><p class="s11" style="padding-top: 12pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">(@ <span class="p">is </span>(CDR (MEMBER ’BEFORE <i>COMMAND</i>))) <span class="p">Similar to </span>(LC .@) <span class="p">followed by </span>(B <i>E</i><i>1 </i>...</p><p class="s16" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">E<span class="s32">M</span><span class="s11">)</span><span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 132pt;text-indent: -30pt;text-align: justify;">Warning: If <span class="s11">@ </span>causes an error, the location process does <i>not </i>continue as described above. For example, if <span class="s11">@ = (COND 3) </span>and the next <span class="s11">COND </span>does not have a thirdelement, the search stops and the <span class="s11">INSERT </span>fails. You can always write <span class="s11">(LC COND 3) </span>if you intend the search to continue.</p><p class="s11" style="padding-top: 7pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">(PROG (&amp; &amp; X) **COMMENT** (SELECTQ ATM &amp; NIL) (OR &amp; &amp;) (PRIN1 &amp; T)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(PRIN1 &amp; T) (SETQ X &amp;</p><p class="s11" style="padding-top: 7pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*(INSERT LABEL BEFORE PRIN1)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 7pt;padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;">(PROG (&amp; &amp; X) **COMMENT** (SELECTQ ATM &amp; NIL) (OR &amp; &amp;) LABEL</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PRIN1 &amp; T) ( <span class="s9">user typed Control-E</span></p><p class="s11" style="padding-top: 7pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Current edit chain is not changed, but <span class="s11">UNFIND </span>is set to the edit chain after the <span class="s11">B </span>was performed, i.e., \ will make the edit chain be that chain where the insertion was performed.</p><p class="s11" style="padding-top: 10pt;padding-left: 114pt;text-indent: -12pt;line-height: 202%;text-align: left;">(INSERT <i>E</i><i>1 </i>... <i>E</i><i>M </i>AFTER . @) <span class="p">[Editor Command] Similar to </span>INSERT BEFORE <span class="p">except uses </span>A <span class="p">instead of </span>B<span class="p">.</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 83%;text-align: center;">(INSERT <i>E</i><i>1 </i>... <i>E</i><i>M </i>FOR . @)                               <span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Similar to <span class="s11">INSERT BEFORE </span>except uses <span class="s11">: </span>for <span class="s11">B</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 89%;text-align: center;">(REPLACE @ BY <i>E</i><i>1 </i>... <i>E</i><i>M</i>)                                 <span class="p">[Editor Command]</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 93%;text-align: center;">(REPLACE @ WITH <i>E</i><i>1 </i>... <i>E</i><i>M</i>)                               <span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Here <span class="s11">@ </span>is the <i>segment </i>of the command between <span class="s11">REPLACE </span>and <span class="s11">WITH</span>. Same as <span class="s11">(INSERT </span><span class="s16">E</span><span class="s32">1</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">... <i>E</i><i>M </i>FOR . @)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Example: <span class="s11">(REPLACE COND -1 WITH (T (RETURN L)))</span></p><p class="s11" style="padding-top: 1pt;padding-left: 114pt;text-indent: -12pt;line-height: 25pt;text-align: left;">(CHANGE @ TO <i>E</i><i>1 </i>... <i>E</i><i>M</i>) <span class="p">[Editor Command] Same as </span>REPLACE WITH<span class="p">.</span></p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(DELETE . @)                                             <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: left;">Does a <span class="s11">(LC . @) </span>followed by <span class="s11">DELETE </span>(see warning about <span class="s11">INSERT </span>above). The current edit chain is not changed, but <span class="s11">UNFIND </span>is set to the edit chain after the <span class="s11">DELETE </span>was performed.</p><p style="padding-top: 7pt;padding-left: 179pt;text-indent: -30pt;line-height: 91%;text-align: justify;">Note: The edit chain will be changed if the current expression is no longer a part of the expression being edited, e.g., if the current expression is</p><p class="s11" style="padding-left: 179pt;text-indent: 0pt;text-align: justify;">... C) <span class="p">and you perform </span>(DELETE 1)<span class="p">, the tail, </span>(C)<span class="p">, will have been cut off. Similarly, if the current expression is </span>(CDR Y) <span class="p">and you perform </span>(REPLACE WITH (CAR X))<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: left;">Example: <span class="s11">(DELETE -1), (DELETE COND 3)</span></p><p class="s9" style="padding-top: 6pt;padding-left: 179pt;text-indent: -30pt;text-align: justify;">Note: If <span class="s11">@ </span>is <span class="s11">NIL </span>(i.e., empty), the corresponding operation is performed on the current edit chain.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 132pt;text-indent: 0pt;text-align: justify;">For example, <span class="s11">(REPLACE WITH (CAR X)) </span>is equivalent to <span class="s11">(: (CAR X))</span>. For added readability, <span class="s11">HERE </span>is also permitted, e.g., <span class="s11">(INSERT (PRINT X) BEFORE HERE) </span>will insert <span class="s11">(PRINT X) </span>before the current expression (but not change the edit chain).</p><p class="s9" style="padding-top: 6pt;padding-left: 132pt;text-indent: -30pt;text-align: left;">Note: <span class="s11">@ </span>does not have to specify a location within the current expression, i.e., it is perfectly legal to ascend to <span class="s11">INSERT</span>, <span class="s11">REPLACE</span>, or <span class="s11">DELETE</span></p><p style="padding-top: 7pt;padding-left: 132pt;text-indent: 0pt;text-align: justify;">For example, <span class="s11">(INSERT (RETURN) AFTER ^ PROG -1) </span>will go to the top, find the first <span class="s11">PROG</span>, and insert a <span class="s11">(RETURN) </span>at its end, and not change the current edit chain.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">The <span class="s11">A</span>, <span class="s11">B</span>, and <span class="s11">: </span>commands, commands, (and consequently <span class="s11">INSERT</span>, <span class="s11">REPLACE</span>, and <span class="s11">CHANGE</span>), all make special checks in <span class="s16">E</span><span class="s32">1 </span>thru <span class="s16">E</span><span class="s32">M </span>for expressions of the form <span class="s11">(## . </span><span class="s16">COMS</span><span class="s11">)</span>. In this case, the expression used for inserting or replacing is a <i>copy </i>of the current expression after executing <span class="s16">COMS</span>, a list of edit commands (the execution of <span class="s16">COMS </span>does not change the current edit chain). For example, <span class="s11">(INSERT (## F COND -1 -1) AFTER 3) </span>will make a copy of the last form in the last clause of the next <span class="s11">COND</span>, and insert it after the third element of the current expression. Note that this is not the same as <span class="s11">(INSERT F COND -1 (## -1) AFTER 3)</span>, which inserts four elements after the third element, namely <span class="s11">F</span>, <span class="s11">COND, -1</span>, and a copy of the last element in the current expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Form Oriented Editing and the Role of UP</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The <span class="s11">UP </span>that is performed before <span class="s11">A</span>, <span class="s11">B</span>, and <span class="s11">: </span>commands (and therefore in <span class="s11">INSERT</span>, <span class="s11">CHANGE</span>, <span class="s11">REPLACE</span>, and <span class="s11">DELETE </span>commands after the location portion of the operation has been performed) makes these operations form-oriented. For example, if you type <span class="s11">F SETQ</span>, and then <span class="s11">DELETE</span>, or simply <span class="s11">(DELETE SETQ)</span>, you will delete the entire <span class="s11">SETQ </span>expression, whereas <span class="s11">(DELETE X) </span>if <span class="s11">X </span>is a variable, deletes just the variable <span class="s11">X</span>. In both cases, the operation is performed on the corresponding <i>form</i>, and in both cases is probably what you intended. Similarly, if you type <span class="s11">(INSERT (RETURN Y) BEFORE SETQ)</span>, you mean before the <span class="s11">SETQ </span>expression, not before the atom <span class="s11">SETQ. </span>A consequent of this procedure is that a pattern of the form <span class="s11">(SETQ Y --) </span>can be viewed as simply an elaboration and further refinement of the pattern <span class="s11">SETQ</span>. Thus <span class="s11">(INSERT (RETURN Y) BEFORE SETQ) </span>and <span class="s11">(INSERT (RETURN Y)</span></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">BEFORE (SETQ Y --)) <span class="p">perform the same operation (assuming the next </span>SETQ <span class="p">is of the form </span>(SETQ Y --)) <span class="p">and, in fact, this is one of the motivations behind making the current expression after </span>F SETQ<span class="p">, and </span>F (SETQ Y --) <span class="p">be the same.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 90pt;text-indent: -30pt;text-align: justify;"><span class="p">Note: There is some ambiguity in </span>(INSERT <i>EXPR </i>AFTER <i>FUNCTIONNAME</i>)<span class="p">, as you might mean make </span><i>EXPR </i><span class="p">be the function’s first argument. Similarly, you cannot write </span>(REPLACE SETQ WITH SETQQ) <span class="p">meaning change the name of the function. You must in these cases write </span>(INSERT <i>EXPR </i>AFTER <i>FUNCTIONNAME </i>1)<span class="p">, and </span>(REPLACE SETQ 1 WITH SETQQ)<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Occasionally, however, you may have a data structure in which no special significance or meaning is attached to the position of an atom in a list, as Interlisp attaches to atoms that appear as <span class="s11">CAR </span>of a list, versus those appearing elsewhere in a list. In general, you may not even <i>know </i>whether a particular atom is at the head of a list or not. Thus, when you write <span class="s11">(INSERT </span><span class="s16">EXPR </span><span class="s11">BEFORE FOO)</span>, you mean before the atom <span class="s11">FOO</span>, whether or not it is <span class="s11">CAR </span>of a list. By setting the variable <span class="s11">UPFINDFLG </span>to <span class="s11">NIL</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">(initially <span class="s11">T</span>), you can suppress the implicit <span class="s11">UP </span>that follows searches for atoms, and thus achieve the desired effect. With <span class="s11">UPFINDFLG = NIL</span>, following <span class="s11">F FOO</span>, for example, the current expression will be the atom <span class="s11">FOO</span>. In this case, the <span class="s11">A</span>, <span class="s11">B</span>, and <span class="s11">: </span>operations will operate with respect to the atom <span class="s11">FOO</span>. If you intend the operation to refer to the list which <span class="s11">FOO </span>heads, use the pattern <span class="s11">(FOO --)</span>instead .</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Extract and Embed</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Extraction involves replacing the current expression with one of its subexpressions (from any depth).</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(XTR . @)                                                <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Replaces the original current expression with the expression that is current after performing <span class="s11">(LCL . @) </span>(see warning about <span class="s11">INSERT </span>above). If the current expression after <span class="s11">(LCL . @) </span>is a <i>tail </i>of a higher expression, its first element is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If the extracted expression is a list, then after <span class="s11">XTR </span>has finished, the current expression will be that list. If the extracted expression is not a list, the new current expression will be a tail whose first element is that non-list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">For example, if the current expression is <span class="s11">(COND ((NULL X) (PRINT Y))), (XTR PRINT)</span>, or <span class="s11">(XTR 2 2) </span>will replace the <span class="s11">COND </span>by the <span class="s11">PRINT</span>. The current expression after the <span class="s11">XTR </span>would be <span class="s11">(PRINT Y)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">If the current expression is <span class="s11">(COND ((NULL X) Y) (T Z))</span>, then <span class="s11">(XTR Y) </span>will replace the <span class="s11">COND </span>with <span class="s11">Y</span>, even though the current expression after performing <span class="s11">(LCL Y) </span>is <span class="s11">... Y)</span>. The current expression after the <span class="s11">XTR </span>would be <span class="s11">... Y </span>followed by whatever followed the <span class="s11">COND</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If the current expression <i>initially </i>is a tail, extraction works exactly the same as though the current expression were the first element in that tail. Thus if the current expression is <span class="s11">... (COND ((NULL X) (PRINT Y))) (RETURN Z))</span>, then <span class="s11">(XTR PRINT) </span>will replace the</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: left;">COND <span class="p">by the </span>PRINT<span class="p">, leaving </span>(PRINT Y) <span class="p">as the current expression.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The extract command can also incorporate a location specification:</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(EXTRACT @<span class="s45">1 </span>FROM . @<span class="s45">2</span>)                                   <span class="p">[Editor Command]</span></p><p class="s11" style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="p">Performs </span>(LC . @<span class="s45">2</span>) <span class="p">and then </span>(XTR . @<span class="s45">1</span>) <span class="p">(see warning about </span>INSERT<span class="p">). The current edit chain is not changed, but </span>UNFIND <span class="p">is set to the edit chain after the </span>XTR <span class="p">was performed.</span></p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: 0pt;text-align: left;">Note: <span class="s11">@</span><span class="s45">1 </span>is the <i>segment </i>between <span class="s11">EXTRACT </span>and <span class="s11">FROM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">For example: If the current expression is <span class="s11">(PRINT (COND ((NULL X) Y) (T Z))) </span>then following <span class="s11">(EXTRACT Y FROM COND)</span>, the current expression will be <span class="s11">(PRINT Y)</span>. <span class="s11">(EXTRACT 2 -1 FROM COND)</span>, <span class="s11">(EXTRACT Y FROM 2)</span>, and <span class="s11">(EXTRACT 2 -1 FROM 2)</span></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: left;">will all produce the same result.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">While extracting replaces the current expression by a subexpression, embedding replaces the current expression with one containing <i>it </i>as a subexpression.</p><p class="s16" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s11">(MBD </span>E<span class="s32">1 </span>... E<span class="s32">M</span><span class="s11">) </span><span class="p">[Editor Command]</span></p><p class="s11" style="padding-top: 12pt;padding-left: 65pt;text-indent: 0pt;text-align: justify;">MBD <span class="p">substitutes the current expression for all instances of the atom </span>&amp; <span class="p">in </span><i>E</i><i>1 </i>... <i>E</i><i>M</i><span class="p">, and replaces the current expression with the result of that substitution. As with </span>SUBST<span class="p">, a fresh copy is used for each substitution.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 65pt;text-indent: 0pt;line-height: 219%;text-align: left;"><span class="p">If </span>&amp; <span class="p">does not appear in </span><i>E</i><i>1 </i>... <i>E</i><i>M</i><span class="p">, the </span>MBD <span class="p">is interpreted as </span>(MBD (<i>E</i><i>1 </i>... <i>E</i><i>M </i>&amp;))<span class="p">. </span>MBD <span class="p">leaves the edit chain so that the larger expression is the new current expression.</span></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: left;">Examples:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">If the current expression is <span class="s11">(PRINT Y)</span>, <span class="s11">(MBD (COND ((NULL X) &amp;) ((NULL (CAR Y)) &amp; (GO LP)))) </span>would replace <span class="s11">(PRINT Y) </span>with <span class="s11">(COND ((NULL X) (PRINT Y)) ((NULL (CAR Y)) (PRINT Y) (GO LP)))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">If the current expression is <span class="s11">(RETURN X)</span>, <span class="s11">(MBD (PRINT Y) (AND FLG &amp;)) </span>would replace it with the <i>two </i>expressions <span class="s11">(PRINT Y) </span>and <span class="s11">(AND FLG (RETURN X)), </span>i.e., if the <span class="s11">(RETURN X) </span>appeared in the cond clause <span class="s11">(T (RETURN X))</span>, after the <span class="s11">MBD</span>, the clause would be <span class="s11">(T (PRINT Y) (AND FLG (RETURN X)))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">If the current expression is <span class="s11">(PRINT Y)</span>, then <span class="s11">(MBD SETQ X) </span>will replace it with <span class="s11">(SETQ X (PRINT Y))</span>. If the current expression is <span class="s11">(PRINT Y)</span>, <span class="s11">(MBD RETURN) </span>will replace it with <span class="s11">(RETURN (PRINT Y))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">If the current expression <i>initially </i>is a tail, embedding works exactly the same as though the current expression were the first element in that tail. Thus if the current expression were <span class="s11">... (PRINT Y) (PRINT Z))</span>, <span class="s11">(MBD SETQ X) </span>would replace <span class="s11">(PRINT Y) </span>with <span class="s11">(SETQ X (PRINT Y)).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">The embed command can also incorporate a location specification:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(EMBED @ IN . <i>X</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="p">(</span>@ <span class="p">is the segment between </span>EMBED <span class="p">and </span>IN<span class="p">.) Does </span>(LC . @) <span class="p">and then </span>(MBD . <i>X</i>) <span class="p">(see warning about </span>INSERT<span class="p">). Edit chain is not changed, but </span>UNFIND <span class="p">is set to the edit chain after the </span>MBD <span class="p">was performed.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Examples: <span class="s11">(EMBED PRINT IN SETQ X), (EMBED 3 2 IN RETURN), (EMBED COND</span></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;">3 1 IN (OR &amp; (NULL X)))<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">WITH <span class="p">can be used for </span>IN<span class="p">, and </span>SURROUND <span class="p">can be used for </span>EMBED<span class="p">, e.g., </span>(SURROUND NUMBERP WITH (AND &amp; (MINUSP X)))<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">EDITEMBEDTOKEN                                                 <span class="p">[Variable]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The special atom used in the <span class="s11">MBD </span>and <span class="s11">EMBED </span>commands is the value of this variable, initially</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&amp;<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">The MOVE Command</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The <span class="s11">MOVE </span>command allows you to specify the expression to be moved, the place it is to be moved to, and the operation to be performed there, e.g., insert it before, insert it after, replace, etc.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(MOVE @<span class="s45">1 </span>TO <i>COM </i>. @<span class="s45">2</span>)                                    <span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 113pt;text-indent: 0pt;text-align: justify;">(<span class="s11">@</span><span class="s45">1 </span>is the segment between <span class="s11">MOVE </span>and <span class="s11">TO</span>.) <span class="s16">COM </span>is <span class="s11">BEFORE</span>, <span class="s11">AFTER</span>, or the name of a list command, e.g., <span class="s11">:</span>, <span class="s11">N</span>, etc. Performs <span class="s11">(LC . @</span><span class="s45">1</span><span class="s11">) </span>(see warning about <span class="s11">INSERT</span>), and obtains the current expression there (or its first element, if it is a tail), which we will call <span class="s16">EXPR</span>; <span class="s11">MOVE </span>then goes back to the original edit chain, performs <span class="s11">(LC . @</span><span class="s45">2</span><span class="s11">) </span>followed by <span class="s11">(</span><span class="s16">COM EXPR</span><span class="s11">) </span>(setting an internal flag so <span class="s16">EXPR </span>is not copied), then goes back to <span class="s11">@</span><span class="s45">1 </span>and deletes <span class="s16">EXPR</span>. The edit chain is not changed. <span class="s11">UNFIND </span>is set to the edit chain after <span class="s11">(</span><span class="s16">COM EXPR</span><span class="s11">) </span>was performed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">If <span class="s11">@</span><span class="s45">2 </span>specifies a location <i>inside of the expression to be moved, </i>a message is printed and an error is generated, e.g., <span class="s11">(MOVE 2 TO AFTER X)</span>, where <span class="s11">X </span>is contained inside of the second element.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">For example, if the current expression is <span class="s11">(A B C D)</span>, <span class="s11">(MOVE 2 TO AFTER 4) </span>will make the new current expression be <span class="s11">(A C D B)</span>. Note that <span class="s11">4 </span>was executed as of the original edit chain, and that the second element had not yet been removed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">As the following examples taken from actual editing will show, the <span class="s11">MOVE </span>command is an extremely versatile and powerful feature of the editor.</p><p class="s11" style="padding-top: 7pt;padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*?</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(PROG ((L L)) (EDLOC (CDDR C)) (RETURN (CAR L)))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(MOVE 3 TO : CAR)</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*?</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(PROG ((L L)) (RETURN (EDLOC (CDDR C))))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">... (SELECTQ OBJPR &amp; &amp;) (RETURN &amp;) LP2 (COND &amp; &amp;))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(MOVE 2 TO N 1)</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">... (SELECTQ OBJPR &amp; &amp; &amp;) LP2 (COND &amp; &amp;))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(OR (EQ X LASTAIL) (NOT &amp;) (AND &amp; &amp; &amp;))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(MOVE 4 TO AFTER (BELOW COND))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(OR (EQ X LASTAIL) (NOT &amp;))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*<span class="p">\ </span>P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">... (&amp; &amp;) (AND &amp; &amp; &amp;) (T &amp; &amp;))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p class="s11" style="padding-top: 5pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((NULL X) **COMMENT** (COND &amp; &amp;))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(-3 (GO NXT]</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*(MOVE 4 TO N (<span class="s19"></span><span class="s21"> </span>PROG))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 8pt;text-align: left;">((NULL X) **COMMENT** (GO NXT))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*<span class="p">\ </span>P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(PROG (&amp;) **COMMENT** (COND &amp; &amp; &amp;) (COND &amp; &amp; &amp;) (COND &amp; &amp;))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(INSERT NXT BEFORE -1)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PROG (&amp;) **COMMENT** (COND &amp; &amp; &amp;) (COND &amp; &amp; &amp;) NXT (COND &amp; &amp;))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="p">In the last example, you could have added the </span>PROG <span class="p">label </span>NXT <span class="p">and moved the </span>COND <span class="p">in one operation by performing </span>(MOVE 4 TO N (<span class="s19"></span><span class="s21"> </span>PROG) (N NXT))<span class="p">. Similarly, in the next example, in the course of specifying </span>@<span class="s45">2</span><span class="p">, the location where the expression was to be moved to, you also perform a structure modification, via </span>(N (T))<span class="p">, thus creating the structure that will receive the expression being moved.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((CDR &amp;) **COMMENT** (SETQ CL &amp;) (EDITSMASH CL &amp; &amp;))</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*MOVE 4 TO N 0 (N (T)) -1]</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 8pt;text-align: left;">((CDR &amp;) **COMMENT** (SETQ CL &amp;))</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*<span class="p">\ </span>P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(T (EDITSMASH CL &amp; &amp;))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">If <span class="s11">@</span><span class="s45">2 </span>is <span class="s11">NIL</span>, or <span class="s11">(HERE)</span>, the current position specifies where the operation is to take place. In this case, <span class="s11">UNFIND </span>is set to where the expression that was moved was originally located, i.e., <span class="s11">@</span><span class="s45">1</span>. For example:</p><p class="s11" style="padding-top: 8pt;padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">*P (TENEX)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(MOVE <span class="s19"></span><span class="s21"> </span>F APPLY TO N HERE)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(TENEX (APPLY &amp; &amp;))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p class="s11" style="padding-top: 5pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">(PROG (&amp; &amp; &amp; ATM IND VAL) (OR &amp; &amp;) **COMMENT** (OR &amp; &amp;) (PRIN1 &amp; T) (</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 11pt;text-align: left;">PRIN1 &amp; T) (SETQ IND <span class="s9">user typed Control-E</span></p><p class="s11" style="padding-top: 8pt;padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*(MOVE * TO BEFORE HERE)</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PROG (&amp; &amp; &amp; ATM IND VAL) (OR &amp; &amp;) (OR &amp; &amp;) (PRIN1 &amp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(T (PRIN1 C-EXP T))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*(MOVE <span class="s19"></span><span class="s21"> </span>BF PRIN1 TO N HERE)</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(T (PRIN1 C-EXP T) (PRIN1 &amp; T))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Finally, if <span class="s11">@</span><span class="s45">1 </span>is <span class="s11">NIL</span>, the <span class="s11">MOVE </span>command allows you to specify where the <i>current expression </i>is to be moved to. In this case, the edit chain is changed, and is the chain where the current expression was moved to; <span class="s11">UNFIND </span>is set to where it was.</p><p class="s11" style="padding-top: 7pt;padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(SELECTQ OBJPR (&amp;) (PROGN &amp; &amp;))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(MOVE TO BEFORE LOOP)</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 8pt;text-align: left;">... (SELECTQ OBJPR &amp; &amp;) LOOP (FRPLACA DFPRP &amp;) (FRPLACD DFPRP</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&amp;) (SELECTQ <span class="s9">user typed Control-E</span></p><p class="s11" style="padding-top: 7pt;padding-left: 197pt;text-indent: 0pt;text-align: left;">*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Commands That Move Parentheses</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The commands presented in this section permit modification of the list structure itself, as opposed to modifying components thereof. Their effect can be described as inserting or removing a single left or right parenthesis, or pair of left and right parentheses. Of course, there will always be the same number of left parentheses as right parentheses in any list structure, since the parentheses are just a notational guide to the structure provided by <span class="s11">PRINT</span>. Thus, no command can insert or remove just one parenthesis, but this is suggestive of what actually happens.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">In all six commands, <i>N </i>and <i>M </i>are used to specify an element of a list, usually of the current expression. In practice, <i>N </i>and <i>M </i>are usually positive or negative integers with the obvious interpretation. However, all six commands use the generalized <span class="s11">NTH </span>command <span class="s11">(NTH </span><span class="s16">COM</span><span class="s11">) </span>to find their element(s), so that <span class="s16">N</span>th element means the first element of the tail found by performing <span class="s11">(NTH </span><span class="s16">N</span><span class="s11">)</span>. In other words, if the current expression is <span class="s11">(LIST (CAR X) (SETQ Y (CONS W Z)))</span>, then <span class="s11">(BI 2 CONS)</span>, <span class="s11">(BI X -1)</span>, and <span class="s11">(BI X Z) </span>all specify the exact same operation.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">All six commands generate an error if the element is not found, i.e., the <span class="s11">NTH </span>fails. All are undoable.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(BI <i>N M</i>)                                                 <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">&quot;Both In&quot;. Inserts a left parentheses before the <span class="s16">N</span>th element and after the <span class="s16">M</span>th element in the current expression. Generates an error if the <span class="s16">M</span>th element is not contained in the <span class="s16">N</span>th tail, i.e., the <span class="s16">M</span>th element must be &quot;to the right&quot; of the <span class="s16">N</span>th element.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">Example: If the current expression is <span class="s11">(A B (C D E) F G)</span>, then <span class="s11">(BI 2 4) </span>will modify it to be <span class="s11">(A (B (C D E) F) G)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(BI <i>N</i>)                                                   <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">Same as </span>(BI <i>N N</i>)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: 0pt;text-align: justify;">Example: If the current expression is <span class="s11">(A B (C D E) F G)</span>, then <span class="s11">(BI -2) </span>will modify it to be <span class="s11">(A B (C D E) (F) G)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(BO <i>N</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">&quot;Both Out&quot;. Removes both parentheses from the <span class="s16">N</span>th element. Generates an error if <span class="s16">N</span>th element is not a list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">Example: If the current expression is <span class="s11">(A B (C D E) F G)</span>, then <span class="s11">(BO D) </span>will modify it to be <span class="s11">(A B C D E F G)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(LI <i>N</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 91%;text-align: justify;">&quot;Left In&quot;. Inserts a left parenthesis before the <i>N</i>th element (and a matching right parenthesis at the end of the current expression), i.e. equivalent to <span class="s11">(BI </span><span class="s16">N </span><span class="s11">-1)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">Example: if the current expression is <span class="s11">(A B (C D E) F G)</span>, then <span class="s11">(LI 2) </span>will modify it to be <span class="s11">(A (B (C D E) F G))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(LO <i>N</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">&quot;Left Out&quot;. Removes a left parenthesis from the <span class="s16">N</span>th element. <i>All elements following the </i><span class="s16">N</span><i>th element are deleted. </i>Generates an error if <span class="s16">N</span>th element is not a list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">Example: If the current expression is <span class="s11">(A B (C D E) F G)</span>, then <span class="s11">(LO 3) </span>will modify it to be <span class="s11">(A B C D E)</span>.</p><p class="s11" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(RI <i>N M</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">&quot;Right In&quot;. Inserts a right parenthesis after the <span class="s16">M</span>th element of the <span class="s16">N</span>th element. The rest of the <i>N</i>th element is brought up to the level of the current expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Example: If the current expression is <span class="s11">(A (B C D E) F G)</span>, <span class="s11">(RI 2 2) </span>will modify it to be <span class="s11">(A (B C) D E F G)</span>. Another way of thinking about <span class="s11">RI </span>is to read it as &quot;move the right parenthesis at the end of the <span class="s16">N</span>th element <i>in </i>to after its <span class="s16">N</span>th element.&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(RO <i>N</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">&quot;Right Out&quot;. Removes the right parenthesis from the <span class="s16">N</span>th element, moving it to the end of the current expression. All elements following the <span class="s16">N</span>th element are moved inside of the <span class="s16">N</span>th element. Generates an error if <span class="s16">N</span>th element is not a list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Example: If the current expression is <span class="s11">(A B (C D E) F G)</span>, <span class="s11">(RO 3) </span>will modify it to be <span class="s11">(A B (C D E F G))</span>. Another way of thinking about <span class="s11">RO </span>is to read it as &quot;move the right parenthesis at the end of the <i>N</i>th element <i>out </i>to the end of the current expression.&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">TO and THRU</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">EXTRACT<span class="p">, </span>EMBED<span class="p">, </span>DELETE<span class="p">, </span>REPLACE<span class="p">, and </span>MOVE <span class="p">can be made to operate on several contiguous elements, i.e., a segment of a list, by using in their respective location specifications the </span>TO <span class="p">or </span>THRU <span class="p">command.</span></p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(@<span class="s45">1 </span>THRU @<span class="s45">2</span>)                                             <span class="p">[Editor Command]</span></p><p class="s11" style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">Does a </span>(LC . @<span class="s45">1</span>)<span class="p">, followed by an </span>UP<span class="p">, and then a </span>(BI 1 @<span class="s45">2</span>)<span class="p">, thereby grouping the segment into a single element, and finally does a </span>1<span class="p">, making the final current expression be that element.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">For example, if the current expression is <span class="s11">(A (B (C D) (E) (F G H) I) J K)</span>, following</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(C THRU G)<span class="p">, the current expression will be </span>((C D) (E) (F G H))<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(@<span class="s45">1 </span>TO @<span class="s45">2</span>)                                               <span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 113pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">THRU </span>except the last element not included, i.e., after the <span class="s11">BI</span>, an <span class="s11">(RI 1 -2) </span>is performed.</p><p class="s11" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">If both </span>@<span class="s45">1 </span><span class="p">and </span>@<span class="s45">2 </span><span class="p">are numbers, and </span>@<span class="s45">2 </span><span class="p">is greater than </span>@<span class="s45">1</span><span class="p">, then </span>@<span class="s45">2 </span><span class="p">counts from the beginning of the current expression, the same as </span>@<span class="s45">1</span><span class="p">. In other words, if the current expression is </span>(A B C D E F G)<span class="p">, </span>(3 THRU 5) <span class="p">means </span>(C THRU E) <span class="p">not </span>(C THRU G)<span class="p">. In this case, the corresponding </span>BI <span class="p">command is </span>(BI 1 @<span class="s45">2</span>-@<span class="s45">1</span>+1)<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">THRU <span class="p">and </span>TO <span class="p">are not very useful commands by themselves; they are intended to be used in conjunction with </span>EXTRACT<span class="p">, </span>EMBED<span class="p">, </span>DELETE<span class="p">, </span>REPLACE<span class="p">, and </span>MOVE<span class="p">. After </span>THRU <span class="p">and </span>TO <span class="p">have operated, they set an internal editor flag informing the above commands that the element they are operating on is actually a segment, and that the extra pair of parentheses should be removed when the operation is complete. Thus:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 88%;text-align: left;">(PROG (&amp; &amp; ATM IND VAL WORD) (PRIN1 &amp; T) (PRIN1 &amp; T) (SETQ IND &amp;)</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(SETQ VAL &amp;) **COMMENT** (SETQQ <span class="s9">user typed Control-E</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*(MOVE (3 THRU 4) TO BEFORE 7)</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 88%;text-align: left;">(PROG (&amp; &amp; ATM IND VAL WORD) (SETQ IND &amp;) (SETQ VAL &amp;) (PRIN1 &amp; T)</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PRIN1 &amp; T) **COMMENT** <span class="s9">user typed Control-E</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(* FAIL RETURN FROM EDITOR. USER SHOULD NOTE THE VALUES OF SOURCEXPR</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">AND CURRENTFORM. CURRENTFORM IS THE LAST FORM IN SOURCEXPR WHICH WILL</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">HAVE BEEN TRANSLATED, AND IT CAUSED THE ERROR.)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(DELETE (USER THRU CURR$))</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=CURRENTFORM.</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 8pt;text-align: left;">*P</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(* FAIL RETURN FROM EDITOR.CURRENTFORM IS <span class="s9">user typed Control-E</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">... LP (SELECTO &amp; &amp; &amp; &amp; NIL) (SETQ Y &amp;) OUT (SETQ FLG &amp;) (RETURN Y))</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(MOVE (1 TO OUT) TO N HERE]</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">... OUT (SETQ FLG &amp;) (RETURN Y) LP (SELECTQ &amp; &amp; &amp; &amp; NIL) (SETQ Y &amp;))</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">*PP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 45pt;text-indent: -16pt;line-height: 88%;text-align: left;">[PROG (RF TEMP1 TEMP2) (COND</p><p class="s11" style="padding-left: 62pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((NOT (MEMB REMARG LISTING))</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(SETQ TEMP1 (ASSOC REMARG NAMEDREMARKS))</p><p class="s11" style="padding-left: 29pt;text-indent: 0pt;line-height: 9pt;text-align: left;">**COMMENT**</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 88%;text-align: left;">(SETQ TEMP2 (CADR TEMP1)) (GO SKIP))</p><p class="s11" style="padding-left: 62pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(T **COMMENT**</p><p class="s11" style="padding-left: 45pt;text-indent: 32pt;line-height: 88%;text-align: left;">(SETQ TEMP1 REMARG))) (NCONC1 LISTING REMARG) (COND</p><p class="s11" style="padding-left: 62pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((NOT (SETQ TEMP2 (SASSOC</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*(EXTRACT (SETQ THRU CADR) FROM COND)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(PROG (RF TEMP1 TEMP2) (SETQ TEMP1 &amp;) **COMMENT** (SETQ</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 79%;text-align: left;">TEMP2 &amp;) (NCONC1 LISTING REMARG) (COND &amp; &amp; <span class="s9">user typed Control- E</span></p><p class="s11" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">*</p><p class="s11" style="padding-top: 4pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">TO <span class="p">and </span>THRU <span class="p">can also be used directly with </span>XTR<span class="p">, because </span>XTR <span class="p">involves a location specification while </span>A<span class="p">, B, </span>:<span class="p">, and </span>MBD <span class="p">do not. Thus in the previous example, if the current expression had been the </span>COND<span class="p">, e.g.,you had first performed </span>F COND<span class="p">, you could have used </span>(XTR (SETQ THRU CADR)) <span class="p">to perform the extraction.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;line-height: 89%;text-align: center;">(@<span class="s45">1 </span>TO)                                                  <span class="p">[Editor Command]</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 93%;text-align: center;">(@<span class="s45">1 </span>THRU)                                                <span class="p">[Editor Command]</span></p><p class="s11" style="padding-top: 12pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="p">Both are the same as </span>(@<span class="s45">1 </span>THRU -1)<span class="p">, i.e., from </span>@<span class="s45">1 </span><span class="p">through the end of the list.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Examples:</p><p class="s11" style="padding-top: 7pt;padding-left: 197pt;text-indent: 0pt;text-align: left;">*P</p><p class="s11" style="padding-top: 1pt;padding-left: 197pt;text-indent: 0pt;line-height: 88%;text-align: left;">(VALUE (RPLACA DEPRP &amp;) (RPLACD &amp;) (RPLACA VARSWORD &amp;) (RETURN))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(MOVE (2 TO) TO N (<span class="s19"></span><span class="s21"> </span>PROG))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(N (GO VAR))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(VALUE (GO VAR))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 88%;text-align: left;">(T **COMMENT** (COND &amp;) **COMMENT** (EDITSMASH CL &amp; &amp;) (COND &amp;))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 8pt;text-align: left;">*(-3 (GO REPLACE))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*(MOVE (COND TO) TO N <span class="s19"></span><span class="s21"> </span>PROG (N REPLACE))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(T **COMMENT** (GO REPLACE))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*<span class="p">\ </span>P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(PROG (&amp;) **COMMENT** (COND &amp; &amp; &amp;) (COND &amp; &amp; &amp;)</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DELETE (COND &amp; &amp;) REPLACE</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND &amp;) **COMMENT** (EDITSMASH CL &amp; &amp;) (COND &amp;))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p class="s11" style="padding-top: 5pt;padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*PP</p><p class="s11" style="padding-left: 214pt;text-indent: -16pt;line-height: 88%;text-align: left;">[LAMBDA (CLAUSALA X) (PROG (A D)</p><p class="s11" style="padding-left: 208pt;text-indent: 21pt;line-height: 88%;text-align: left;">(SETQ A CLAUSALA) LP (COND</p><p class="s11" style="padding-left: 246pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((NULL A)</p><p class="s11" style="padding-left: 230pt;text-indent: 32pt;line-height: 88%;text-align: left;">(RETURN))) (SERCH X A) (RUMARK (CDR A)) (NOTICECL (CAR A)) (SETQ A (CDR A)) (GO LP]</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(EXTRACT (SERCH THRU NOT$) FROM PROG)</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=NOTICECL</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(LAMBDA (CLAUSALA X) (SERCH X A) (RUMARK &amp;) (NOTICECL</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&amp;))</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(EMBED (SERCH TO) IN (MAP CLAUSALA (FUNCTION (LAMBDA</p><ol id="l27"><li><p class="s11" style="padding-left: 219pt;text-indent: -21pt;line-height: 9pt;text-align: left;">*]</p></li></ol><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*PP</p><p class="s11" style="padding-left: 214pt;text-indent: -16pt;line-height: 88%;text-align: left;">[LAMBDA (CLAUSALA X) (MAP CLAUSALA</p><p class="s11" style="padding-left: 241pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(FUNCTION (LAMBDA (A)</p><p class="s11" style="padding-left: 284pt;text-indent: 0pt;line-height: 88%;text-align: left;">(SERCH X A) (RUMARK (CDR A)) (NOTICECL (CAR A]</p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">The R Command</p><p class="s11" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(R <i>X Y</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Replaces all instances of <span class="s16">X </span>by <span class="s16">Y </span>in the current expression, e.g., <span class="s11">(R CAADR CADAR)</span>. Generates an error if there is not at least one instance.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">The <span class="s11">R </span>command operates in conjunction with the search mechanism of the editor. The search proceeds as described in the Search Algorithm section above, and <span class="s16">X </span>can employ any of the patterns shown in the Commands That Search section above. Each time <span class="s16">X </span>matches an element of the structure, the element is replaced by (a copy of) <span class="s16">Y</span>; each time <span class="s16">X </span>matches a tail of the structure, the tail is replaced by (a copy of) <span class="s16">Y</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 219%;text-align: left;">For example, if the current expression is <span class="s11">(A (B C) (B . C))</span>, <span class="s11">(R C D) </span>will change it to <span class="s11">(A (B D) (B . D))</span>,</p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">(R (... . C) D) <span class="p">will change it to </span>(A (B C) (B . D))<span class="p">,</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">(R C (D E)) <span class="p">will change it to </span>(A (B (D E)) (B D E))<span class="p">, and</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">(R (... . NIL) D) <span class="p">will change it to </span>(A (B C . D) (B . C) . D)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is an atom or string containing <span class="s11">$</span>s (escapes), <span class="s11">$</span>s appearing in <span class="s16">Y </span>stand for the characters matched by the corresponding <span class="s11">$ </span>in <span class="s16">X</span>. For example, <span class="s11">(R FOO$ FIE$) </span>means for all atoms or strings that begin with <span class="s11">FOO</span>, replace the characters &quot;<span class="s11">FOO</span>&quot; by &quot;<span class="s11">FIE</span>&quot;. Applied to the list <span class="s11">(FOO FOO2 XFOO1)</span>, <span class="s16">(R FOO$ FIE$) </span>would produce <span class="s11">(FIE FIE2 XFOO1)</span>, and <span class="s11">(R $FOO$</span></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">$FIE$) <span class="p">would produce </span>(FIE FIE2 XFIE1)<span class="p">. Similarly, </span>(R $D$ $A$) <span class="p">will change </span>(LIST (CADR X) (CADDR Y)) <span class="p">to </span>(LIST (CAAR X) (CAADR))<span class="p">. Note that </span>CADDR <span class="p">was </span><span class="s9">not</span></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">changed to <span class="s11">CAAAR</span>, i.e., <span class="s11">(R $D$ $A$) </span>does not mean replace every <span class="s11">D </span>with <span class="s11">A</span>, but replace the first <span class="s11">D </span>in every atom or string by <span class="s11">A</span>. If you wanted to replace every <span class="s11">D </span>by <span class="s11">A</span>, you could perform <span class="s11">(LP (R $D$ $A$))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;">You will be informed of all such <span class="s11">$ </span>replacements by a message of the form <span class="s16">X</span><span class="s11">-&gt;</span><span class="s16">Y</span>, e.g., <span class="s11">CADR-</span></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&gt;CAAR<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>matches a string, it will be replaced by a string. It does not matter whether <span class="s16">X </span>or <span class="s16">Y </span>themselves are strings, i.e. <span class="s11">(R $D$ $A$)</span>, <span class="s11">(R &quot;$D$&quot; $A$), (R $D$ &quot;$A$&quot;)</span>, and <span class="s11">(R &quot;$D$&quot; &quot;$A$&quot;) </span>are equivalent. <span class="s16">X </span>will never match with a number, i.e., <span class="s11">(R $1 $2) </span>will not change 11 to 12.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">The <span class="s11">$ </span>(escape) feature can be used to delete or add characters, as well as replace them. For example, <span class="s11">(R $1 $) </span>will delete the terminating <span class="s11">1</span>’s from all literal atoms and strings.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">Similarly, if an <span class="s11">$ </span>in <span class="s16">X </span>does not have a mate in <span class="s16">Y</span>, the characters matched by the <span class="s11">$ </span>are effectively deleted. For example, <span class="s11">(R $/$ $) </span>will change <span class="s11">AND/OR </span>to <span class="s11">AND</span>. There is no similar operation for changing <span class="s11">AND/OR </span>to <span class="s11">OR</span>, since the first <span class="s11">$ </span>in <span class="s16">Y </span>always corresponds to the first <span class="s11">$ </span>in <i>X</i>, the second <b>$ </b>in <span class="s16">Y </span>to the second in <span class="s16">X</span>, etc. <span class="s16">Y </span>can also be a list containing <span class="s11">$</span>s, e.g., <span class="s11">(R</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">$1 (CAR $)) <span class="p">will change </span>FOO1 <span class="p">to </span>(CAR FOO)<span class="p">, </span>FIE1 <span class="p">to </span>(CAR FIE)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>does not contain <span class="s11">$</span>s, <span class="s11">$ </span>appearing in <span class="s16">Y </span>refers to the <i>entire </i>expression matched by <span class="s16">X</span>, e.g., <span class="s11">(R LONGATOM ’$) </span>changes <span class="s11">LONGATOM </span>to <span class="s11">’LONGATOM</span>, <span class="s11">(R (SETQ X &amp;) (PRINT $)) </span>changes</p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">every <span class="s11">(SETQ X &amp;) </span>to <span class="s11">(PRINT (SETQ X &amp;))</span>. If <span class="s16">X </span>is a pattern containing an <span class="s11">$ </span>pattern somewhere <i>within </i>it, the characters matched by the <span class="s11">$</span>s are not available, and for the purposes of replacement, the effect is the same as though <span class="s16">X </span>did not contain any <span class="s11">$</span>s. For example, if you type <span class="s11">(R (CAR F$) (PRINT </span><i>$</i><span class="s11">))</span>, the second <span class="s11">$ </span>will refer to the entire expression matched by <span class="s11">(CAR F$)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Since <span class="s11">(R </span><span class="s16">$X$ $Y$</span><span class="s11">) </span>is a frequently used operation for <b>R</b>eplacing <b>C</b>haracters, the following command is provided:</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(RC <i>X Y</i>)                                                 <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="p">Equivalent to </span>(R <i>$X$ $Y$</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="s11">R </span>and <span class="s11">RC </span>change all instances of <span class="s16">X </span>to <span class="s16">Y</span>. The commands <span class="s11">R1 </span>and <span class="s11">RC1 </span>are available for changing just one, (i.e., the first) instance of <span class="s16">X </span>to <span class="s16">Y</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(R1 <i>X Y</i>)                                                 <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Find the first instance of <span class="s16">X </span>and replace it by <span class="s16">Y</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(RC1 <i>X Y</i>)                                                <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="p">Equivalent to </span>(R1 <i>$X$ $Y$</i>)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">In addition, while <span class="s11">R </span>and <span class="s11">RC </span>only operate within the current expression, <span class="s11">R1 </span>and <span class="s11">RC1 </span>will continue searching, a la the <span class="s11">F </span>command, until they find an instance of <span class="s16">x</span>, even if the search carries them beyond the current expression.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(SW <i>N M</i>)                                                 <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Switches the <span class="s16">N</span>th and <span class="s16">M</span>th elements of the current expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">For example, if the current expression is <span class="s11">(LIST (CONS (CAR X) (CAR Y)) (CONS (CDR X) (CDR Y)))</span>, <span class="s11">(SW 2 3) </span>will modify it to be <span class="s11">(LIST (CONS (CDR X) (CDR Y))</span></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="s11">(CONS (CAR X) (CAR Y)))</span>. The relative order of <span class="s16">N </span>and <span class="s16">M </span>is not important, i.e., <span class="s11">(SW 3 2) </span>and <span class="s11">(SW 2 3) </span>are equivalent.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s11">SW </span>uses the generalized <span class="s11">NTH </span>command <span class="s11">(NTH </span><span class="s16">COM</span><span class="s11">) </span>to find the <span class="s16">N</span>th and <span class="s16">M</span>th elements, a la the</p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;">BI<span class="p">-</span>BO <span class="p">commands.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Thus in the previous example, <span class="s11">(SW CAR CDR) </span>would produce the same result.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(SWAP @<span class="s45">1 </span>@<span class="s45">2</span>) <span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">SW </span>except switches the expressions specified by <span class="s11">@</span><span class="s45">1 </span>and <span class="s11">@</span><span class="s45">2</span>, not the corresponding elements of the current expression, i.e. <span class="s11">@</span><span class="s45">1 </span>and <span class="s11">@</span><span class="s45">2 </span>can be at different levels in current expression, or one or both be outside of current expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Thus, using the previous example, <span class="s11">(SWAP CAR CDR) </span>would result in <span class="s11">(LIST (CONS (CDR X) (CAR Y)) (CONS (CAR X) (CDR Y)))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Commands That Print                                                                                                                               </h4><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">PP <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Prettyprints the current expression.</p><ol id="l28"><li><p style="padding-top: 10pt;padding-left: 362pt;text-indent: -308pt;text-align: left;">[Editor Command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Prints the current expression as though PRINTLEVEL (Chapter 25) were set to 2.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(P <i>M</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Prints the <span class="s16">M</span>th element of the current expression as though PRINTLEVEL were set to 2.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(P <span class="s9">0</span>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Same as P.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(P <i>M N</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Prints the <span class="s16">M</span>th element of the current expression as though PRINTLEVEL were set to <span class="s16">N</span>.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(P 0 <i>N</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Prints the current expression as though PRINTLEVEL were set to <span class="s16">N</span>.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">? <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Same as (P 0 100).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">Both </span>(P <i>M</i>) <span class="p">and </span>(P <i>M N</i>) <span class="p">use the generalized </span>NTH <span class="p">command </span>(NTH <i>COM</i>) <span class="p">to obtain the corresponding element, so that </span><span class="s9">M </span><span class="p">does not have to be a number, e.g., </span>(P COND 3) <span class="p">will work. PP causes all comments to be printed as </span>**COMMENT** <span class="p">(see Chapter 26). P and ? print as </span>**COMMENT** <span class="p">only those comments that are (top level) elements of the current expression. Lower expressions are not really seen by the editor; the printing command simply sets </span>PRINTLEVEL <span class="p">and calls </span>PRINT<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">PP*                                                      <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Prettyprints current expression, <i>including </i>comments.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">PP* <span class="p">is equivalent to </span>PP <span class="p">except that it first resets </span>**COMMENT**FLG <span class="p">to </span>NIL <span class="p">(see Chapter 26).</span></p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">PPV                                                      <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Prettyprints the current expression as a variable, i.e., no special treatment for <span class="s11">LAMBDA</span>, <span class="s11">COND</span>, <span class="s11">SETQ</span>, etc., or for CLISP.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">PPT                                                      <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Prettyprints the current expression, printing CLISP translations, if any.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">?=                                                       <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 91%;text-align: left;">Prints the argument names and corresponding values for the current expression. Analagous to the <span class="s11">?= </span>break command (Chapter 14). For example,</p><p class="s11" style="padding-top: 8pt;padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(STRPOS &quot;A0???&quot; X N (QUOTE ?) T)</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*?=</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;">X = &quot;A0???&quot; Y = X</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">START = N</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;">SKIP = (QUOTE ?) ANCHOR = T</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">TAIL =</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The command <span class="s11">MAKE </span>(see below) is an imperative form of <span class="s11">?=</span>. It allows you to specify a change to the element of the current expression that corresponds to a particular argument name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">All printing functions print to the terminal, regardless of the primary output file. All use the readtable</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">T<span class="p">. No printing function ever changes the edit chain. All record the current edit chain for use by \</span>P <span class="p">(above). All can be aborted with Control-E.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Commands for Leaving the Editor                                                                                                          </h4><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">OK <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Exits from the editor.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">STOP <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Exits from the editor with an error. Mainly for use in conjunction with <span class="s11">TTY: </span>commands (see next section) that you want to abort.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Since all of the commands in the editor are errorset protected, you must exit from the editor via a command. <span class="s11">STOP </span>provides a way of distinguishing between a successful and unsuccessful (from your standpoint) editing session. For example, if you are executing <span class="s11">(MOVE 3 TO AFTER COND TTY:)</span>, and you exitsfrom the lower editor with an <span class="s11">OK</span>, the <span class="s11">MOVE </span>command will then complete its operation. If you want to abort the <span class="s11">MOVE </span>command, you must make the <span class="s11">TTY: </span>command generate an error. Do this by exiting from the lower editor with a <span class="s11">STOP </span>command. In this case, the higher editor’s edit chain will not be changed by the <span class="s11">TTY: </span>command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Actually, it is also possible to exit the editor by typing Control-D. <span class="s11">STOP </span>is preferred even if you are editing at the <span class="s11">EVALQT </span>level, as it will perform the necessary &quot;wrapup&quot; to insure that the changes made while editing will be undoable.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">SAVE <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Exits from the editor and saves the &quot;state of the edit&quot; on the property list of the function or variable being edited under the property <span class="s11">EDIT-SAVE</span>. If the editor is called again on the same structure, the editing is effectively &quot;continued,&quot; i.e., the edit chain, mark list, value of <span class="s11">UNFIND </span>and <span class="s11">UNDOLST </span>are restored.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">For example:</p><p class="s11" style="padding-top: 7pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(NULL X)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*F COND P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND (&amp; &amp;) (T &amp;))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">*SAVE FOO</p><p class="s19" style="padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;"><span class="s21"> </span><span class="s11">.</span></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: right;">.</p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: right;">.</p><p class="s19" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">EDITF(FOO) EDIT</span></p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(COND (&amp; &amp;) (T &amp;))</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">*<span class="p">\ </span>P (NULL X)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">SAVE <span class="p">is necessary only if you are editing many different expressions; an exit from the editor via </span>OK <span class="p">always saves the state of the edit of that call to the editor on the property list of the atom </span>EDIT<span class="p">, under the property name </span>LASTVALUE<span class="p">. </span>OK <span class="p">also remprops </span>EDIT-SAVE <span class="p">from the property list of the function or variable being edited.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Whenever the editor is entered, it checks to see if it is editing the same expression as the last one edited. In this case, it restores the mark list and <span class="s11">UNDOLST</span>, and sets <span class="s11">UNFIND </span>to be the edit chain as of the previous exit from the editor. For example:</p><p class="s19" style="padding-top: 7pt;padding-left: 197pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">EDITF(FOO) EDIT</span></p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(LAMBDA (X) (PROG &amp; &amp; LP &amp; &amp; &amp; &amp;))</p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">.</p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">.</p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">.</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND &amp; &amp;)</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;line-height: 88%;text-align: left;">*OK FOO</p><p class="s19" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s21"> </span><span class="s11">.</span></p><p class="s9" style="padding-left: 208pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">. </span>any number of <span class="p">LISPX </span>inputs</p><p class="s11" style="padding-left: 208pt;text-indent: 0pt;line-height: 10pt;text-align: left;">. <span class="s9">except for calls to the editor</span></p><p class="s19" style="padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">EDITF(FOO) EDIT</span></p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(LAMBDA (X) (PROG &amp; &amp; LP &amp; &amp; &amp; &amp;))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;">*<span class="p">\ </span>P (COND &amp; &amp;)</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Furthermore, as a result of the history feature, if the editor is called on the same expression within a certain number of <span class="s11">LISPX </span>inputs (namely, the size of the history list, which can be changed with <span class="s11">CHANGESLICE</span>, Chapter 13) the state of the edit of that expression is restored, regardless of how many other expressions may have been edited in the meantime. For example:</p><p class="s19" style="padding-top: 7pt;padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">EDITF(FOO) EDIT</span></p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 8pt;text-align: left;">*</p><p class="s11" style="text-indent: 0pt;line-height: 10pt;text-align: center;">.</p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">.</p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">.</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND (&amp; &amp;) (&amp; &amp;) (&amp;) (T &amp;))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;">*OK FOO</p><p class="s9" style="padding-left: 208pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s11">. </span>a small number of <span class="p">LISPX </span>inputs,</p><p class="s11" style="padding-left: 208pt;text-indent: 0pt;line-height: 10pt;text-align: left;">. <span class="s9">including editing</span></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">.</p><p class="s19" style="padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">EDITF(FOO) EDIT</span></p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*<span class="p">\ </span>P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND (&amp; &amp;) (&amp; &amp;) (&amp;) (T &amp;))</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Thus you can always continue editing, including undoing changes from a previous editing session, if one of the following occurs:</p><ol id="l29"><li><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -15pt;line-height: 91%;text-align: justify;">No other expressions have been edited since that session (since saving takes place at <i>exit </i>time, intervening calls that were aborted via Control-D or exited via <span class="s11">STOP </span>will not affect the editor’s memory).</p></li><li><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -18pt;text-align: left;">That session was &quot;sufficiently&quot; recent.</p></li><li><p style="padding-top: 5pt;padding-left: 132pt;text-indent: -18pt;text-align: left;">It was ended with a <span class="s11">SAVE </span>command.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Nested Calls to Editor                                                                                                                               </h4><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">TTY: <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Calls the editor recursively. You can then type in commands, and have them executed. The</p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">TTY: <span class="p">command is completed when you exit from the lower editor (see </span>OK <span class="p">and </span>STOP <span class="p">above).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s11">TTY: </span>command is extremely useful. It enables you to set up a complex operation, and perform interactive attention-changing commands part way through it. For example, the command <span class="s11">(MOVE 3 TO AFTER COND 3 P TTY:) </span>allows you to interact, in effect, <i>within </i>the <span class="s11">MOVE </span>command. You can then verify for yourself that the correct location has been found, or complete the specification &quot;by hand.&quot; In effect, <span class="s11">TTY: </span>says &quot;I’ll tell you what you should do when you get there.&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s11">TTY: </span>command operates by printing <span class="s11">TTY: </span>and then calling the editor. The initial edit chain in the lower editor is the one that existed in the higher editor at the time the <span class="s11">TTY: </span>command was entered. Until you exit from the lower editor, any attention changing commands you execute only affect the lower editor’s edit chain. Of course, if you perform any structure modification commands while under a <span class="s11">TTY: </span>command, these will modify the structure in both editors, since it is the same structure. When the <span class="s11">TTY: </span>command finishes, the lower editor’s edit chain becomes the edit chain of the higher editor.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">EF <span class="p">[Editor Command]</span></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;line-height: 11pt;text-align: left;">EV <span class="p">[Editor Command]</span></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: left;">EP <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Calls <span class="s11">EDITF </span>or <span class="s11">EDITV </span>or <span class="s11">EDITP </span>on <span class="s11">CAR </span>of current expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Manipulating the Characters of an Atom or String                                                                                </h4><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">RAISE                                                    <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">An edit macro defined as <span class="s11">UP </span>followed by <span class="s11">(I 1 (U-CASE (## 1)))</span>, i.e., it raises to uppercase the current expression, or if a tail, the first element of the current expression.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">LOWER                                                    <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">RAISE</span>, except uses <span class="s11">L-CASE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">CAP                                                      <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">First does a <span class="s11">RAISE</span>, and then lowers all but the first character, i.e., the first character is left capitalized.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">RAISE<span class="p">, </span>LOWER<span class="p">, and </span>CAP <span class="p">are all no-ops if the corresponding atom or string is already in that state.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(RAISE <i>X</i>)                                                <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;text-align: justify;"><span class="p">Equivalent to </span>(I R (L-CASE <i>X</i>) <i>X</i>)<span class="p">, i.e., changes every lowercase </span><i>X </i><span class="p">to uppercase in the current expression.</span></p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(LOWER <i>X</i>)                                                <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">Similar to </span>RAISE<span class="p">, except performs </span>(I R <i>X </i>(L-CASE <i>X</i>))<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">In both </span>(RAISE <i>X</i>) <span class="p">and </span>(LOWER <i>X</i>)<span class="p">, </span><i>X </i><span class="p">should be typed in uppercase.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">REPACK                                                   <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Permits the &quot;editing&quot; of an atom or string.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">REPACK <span class="p">operates by calling the editor recursively on </span>UNPACK <span class="p">of the current expression, or if it is a list, on </span>UNPACK <span class="p">of its first element. If the lower editor is exited successfully, i.e., via </span>OK <span class="p">as opposed to </span>STOP<span class="p">, the list of atoms is made into a single atom or string, which replaces the atom or string being &quot;repacked.&quot; The new atom or string is always printed.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Example:</p><p class="s11" style="padding-top: 7pt;padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">... &quot;THIS IS A LOGN STRING&quot;)</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*REPACK</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;">*EDIT P</p><p class="s11" style="padding-left: 198pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(T H I S % I S % A % L O G N % S T R I N G)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*(SW G N)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*OK</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&quot;THIS IS A LONG STRING&quot;</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 54pt;text-indent: 12pt;line-height: 189%;text-align: left;">This could also have been accomplished by <span class="s11">(R $GN$ $NG$) </span>or simply <span class="s11">(RC GN NG)</span>. <span class="s11">(REPACK @) </span>[Editor Command]</p><p style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;">Does <span class="s11">(LC . @) </span>followed by <span class="s11">REPACK</span>, e.g. <span class="s11">(REPACK THIS$)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Manipulating Predicates and Conditional Expressions                                                                        </h4><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">JOINC <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="p">Used to join two neighboring </span>COND<span class="p">s together, e.g. </span>(COND <i>CLAUSE</i><i>1 </i><i>CLAUSE</i><i>2</i>) <span class="p">followed by</span></p><p class="s16" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="s11">(COND </span>CLAUSE<span class="s32">3 </span>CLAUSE<span class="s32">4</span><span class="s11">) </span><span class="p">becomes </span><span class="s11">(COND </span>CLAUSE<span class="s32">1 </span>CLAUSE<span class="s32">2 </span>CLAUSE<span class="s32">3 </span>CLAUSE<span class="s32">4</span><span class="s11">)</span><span class="p">.</span></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">JOINC <span class="p">does an </span>(F COND T) <span class="p">first so that you don’t have to be at the first </span>COND<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(SPLITC <i>X</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Splits one <span class="s11">COND </span>into two. <span class="s16">X </span>specifies the last clause in the first <span class="s11">COND</span>, e.g. <span class="s11">(SPLITC 3) </span>splits</p><p class="s16" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="s11">(COND </span>CLAUSE<span class="s32">1 </span>CLAUSE<span class="s32">2 </span>CLAUSE<span class="s32">3 </span>CLAUSE<span class="s32">4</span><span class="s11">) </span><span class="p">into </span><span class="s11">(COND </span>CLAUSE<span class="s32">1 </span>CLAUSE<span class="s32">2</span><span class="s11">) (COND</span></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><i>CLAUSE</i><i>3 </i><i>CLAUSE</i><i>4</i>)<span class="p">. Uses the generalized </span>NTH <span class="p">command </span>(NTH <i>COM</i>)<span class="p">, so that </span><i>X </i><span class="p">does not have to be a number, e.g., you can say </span>(SPLITC RETURN)<span class="p">, meaning split after the clause containing </span>RETURN<span class="p">. </span>SPLITC <span class="p">also does an </span>(F COND T) <span class="p">first.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">NEGATE <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Negates the current expression, i.e. performs <span class="s11">(MBD NOT)</span>, except that is smart about simplifying. For example, if the current expression is: <span class="s11">(OR (NULL X) (LISTP X))</span>, <span class="s11">NEGATE </span>would change it to <span class="s11">(AND X (NLISTP X))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">NEGATE <span class="p">is implemented via the function </span>NEGATE <span class="p">(Chapter 3).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">SWAPC <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Takes a conditional expression of the form <span class="s11">(COND (A B)(T C)) </span>and rearranges it to an equivalent <span class="s11">(COND ((NOT A) C)(T B))</span>, or <span class="s11">(COND (A B) (C D)) </span>to <span class="s11">(COND ((NOT A) (COND (C D))) (T B))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 93%;text-align: justify;">SWAPC <span class="p">is smart about negations (uses </span>NEGATE<span class="p">) and simplifying </span>COND<span class="p">s. It always produces an equivalent expression. It is useful for those cases where one wants to insert extra clauses or tests.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">History Commands in the Editor                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">All of your inputs to the editor are stored on the history list <span class="s11">EDITHISTORY </span>(see Chapter 13, the editor’s history list, and all of the programmer’s assistant commands for manipulating the history list,</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">e.g. <span class="s11">REDO</span>, <span class="s11">USE</span>, <span class="s11">FIX</span>, <span class="s11">NAME</span>, etc., are available for use on events on <span class="s11">EDITHISTORY</span>. In addition, the following four history commands are recognized specially by the editor. They always operate on the last, i.e. most recent, event.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">DO <i>COM                                                   </i><span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Allows you to supply the command name when it was omitted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s11">USE </span>is useful when a command name is <i>incorrect</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">For example, suppose you want to perform <span class="s11">(-2 (SETQ X (LIST Y Z))) </span>but instead types just <span class="s11">(SETQ X (LIST Y Z))</span>. The editor will type <span class="s11">SETQ ?</span>, whereupon you can type <span class="s11">DO -2</span>. The effect is the same as though you had typed <span class="s11">FIX</span>, followed by <span class="s11">(LI 1)</span>, <span class="s11">(-1 -2)</span>, and <span class="s11">OK</span>, i.e., the command <span class="s11">(-2 (SETQ X (LIST Y Z))) </span>is executed. <span class="s11">DO </span>also works if the command is a line command.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">!F                                                       <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Same as <span class="s11">DO F</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">In the case of <span class="s11">!F</span>, the previous command is always treated as though it were a line command, e.g., if you type <span class="s11">(SETQ X &amp;) </span>and then <span class="s11">!F</span>, the effect is the same as though you had typed <span class="s11">F (SETQ X &amp;)</span>, not <span class="s11">(F (SETQ X &amp;))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">!E                                                       <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Same as <span class="s11">DO E</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">!N                                                       <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Same as <span class="s11">DO N</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Miscellaneous Commands                                                                                                                       </h4><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">NIL <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Unless preceded by <span class="s11">F </span>or <span class="s11">BF</span>, is always a no-op. Thus extra right parentheses or square brackets at the ends of commands are ignored.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">CL <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Clispifies the current expression (see Chapter 21).</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DW <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Dwimifies the current expression (see Chapter 21).</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">IFY <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;">If the current statement is a <span class="s11">COND </span>statement (Chapter 9), replaces it with an eqivalent <span class="s11">IF</span></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;">statement.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">GET* <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the current expression is a comment pointer (see Chapter 26), reads in the full text of the comment, and replaces the current expression by it.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(* . <i>X</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><i>X </i><span class="p">is the text of a comment. </span>* <span class="p">ascends the edit chain looking for a &quot;safe&quot; place to insert the comment, e.g., in a </span>COND <span class="p">clause, after a </span>PROG <span class="p">statement, etc., and inserts </span>(* . <i>X</i>) <span class="s9">after </span><span class="p">that point, if possible, otherwise before. For example, if the current expression is </span>(FACT (SUB1 N)) <span class="p">in</span></p><p class="s11" style="padding-top: 8pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[COND</p><p class="s11" style="padding-left: 166pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((ZEROP N) 1)</p><p class="s11" style="padding-left: 166pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(T (ITIMES N (FACT (SUB1 N]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 94%;text-align: justify;">then <span class="s11">(* CALL FACT RECURSIVELY) </span>would insert <span class="s11">(* CALL FACT RECURSIVELY) </span><i>before </i>the <span class="s11">ITIMES </span>expression. If inserted after the <span class="s11">ITIMES</span>, the comment would then be (incorrectly) returned as the value of the <span class="s11">COND</span>. However, if the <span class="s11">COND </span>was itself a <span class="s11">PROG </span>statement, and hence its value was not being used, the comment could be (and would be) inserted after the <span class="s11">ITIMES </span>expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">* <span class="p">does not change the edit chain, but </span>UNFIND <span class="p">is set to where the comment was actually inserted.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">GETD                                                     <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Essentially &quot;expands&quot; the current expression in line:</p><ol id="l30"><li><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -18pt;text-align: left;">If (<span class="s11">CAR </span>of) the current expression is the name of a macro, expands the macro in line;</p></li><li><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -18pt;line-height: 91%;text-align: left;">If a CLISP word, translates the current expression and replaces it with the translation;</p></li><li><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -15pt;line-height: 92%;text-align: left;">If <span class="s11">CAR </span>is the name of a function for which the editor can obtain a symbolic definition, either in-core or from a file, substitutes the argument expressions for the corresponding argument names in the body of the definition and replaces the current expression with the result;</p></li><li><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -18pt;line-height: 93%;text-align: left;">If <span class="s11">CAR </span>of the current expression is an open lambda, substitutes the arguments for the corresponding argument names in the body of the lambda, and then removes the lambda and argument list.</p></li></ol><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -30pt;line-height: 92%;text-align: justify;">Warning: When expanding a function definition or open lambda expression, <span class="s11">GETD </span>does a simple substitution of the actual arguments for the formal arguments. Therefore, if any of the function arguments are used in other ways in the function definition (as functions, as record fields, etc.), they will simply be replaced with the actual arguments.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(MAKEFN (<i>FN . ACTUALARGS</i>) <i>ARGLIST N1 N2</i>)                 <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">The inverse of <span class="s11">GETD</span>: makes the current expression into a function. <span class="s16">FN </span>is the function name, <span class="s16">ARGLIST </span>its arguments. The argument names are substituted for the corresponding argument values in <span class="s16">ACTUALARGS</span>, and the result becomes the body of the function definition for <span class="s16">FN</span>. The current expression is then replaced with <span class="s11">(</span><span class="s16">FN </span><span class="s11">. </span><span class="s16">ACTUALARGS</span><span class="s11">)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>N<span class="s32">1 </span><span class="p">and </span>N<span class="s32">2 </span><span class="p">are supplied, </span><span class="s11">(</span>N<span class="s32">1 </span><span class="s11">THRU </span>N<span class="s32">2</span><span class="s11">) </span><span class="p">is used rather than the current expression; if just</span></p><p class="s16" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">N<span class="s32">1 </span><span class="p">is supplied, </span><span class="s11">(</span>N<span class="s32">1 </span><span class="s11">THRU -1) </span><span class="p">is used.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: left;">If <span class="s16">ARGLIST </span>is omitted, <span class="s11">MAKEFN </span>will make up some arguments, using elements of</p><p class="s16" style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: left;">ACTUALARGS<span class="p">, if they are literal atoms, otherwise arguments selected from </span><span class="s11">(X Y Z A B C</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: left;">...)<span class="p">, avoiding duplicate argument names.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Example: If the current expression is <span class="s11">(COND ((CAR X) (PRINT Y T)) (T (HELP)))</span>, then <span class="s11">(MAKEFN (FOO (CAR X) Y) (A B)) </span>will define <span class="s11">FOO </span>as <span class="s11">(LAMBDA (A B) (COND</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">(A (PRINT B T)) (T (HELP)))) <span class="p">and then replace the current expression with </span>(FOO (CAR X) Y)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(MAKE <i>ARGNAME EXP</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Makes the value of <span class="s16">ARGNAME </span>be <span class="s16">EXP </span>in the call which is the current expression, i.e. a <span class="s11">?=</span></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: left;">command following a <span class="s11">MAKE </span>will always print <span class="s16">ARGNAME </span><span class="s11">= </span><span class="s16">EXP</span>. For example:</p><p class="s11" style="padding-top: 8pt;padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">*P (JSYS)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">*?= JSYS[N;AC1,AC2,AC3,RESULTAC]</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(MAKE N 10)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*(MAKE RESULTAC 3)</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(JSYS 10 NIL NIL NIL 3)</p></li><li><p style="padding-top: 8pt;padding-left: 362pt;text-indent: -308pt;text-align: left;">[Editor Command]</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Quotes the current expression, i.e. <span class="s11">MBD QUOTE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l31"><li><p style="padding-left: 362pt;text-indent: -308pt;text-align: left;">[Editor Command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Deletes the current expression, then prints new current expression, i.e. <span class="s11">(:) I P</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Commands That Evaluate                                                                                                                        </h4></li><li><p style="padding-top: 9pt;padding-left: 362pt;text-indent: -308pt;text-align: left;">[Editor Command]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Causes the editor to call the Interlisp executive <span class="s11">LISPX </span>giving it the next input as argument. Example:</p><p class="s11" style="padding-top: 8pt;padding-left: 149pt;text-indent: 0pt;line-height: 88%;text-align: left;">*E BREAK(FIE FUM) (FIE FUM)</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*E (FOO)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(FIE BROKEN)</p><p class="s11" style="padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;">:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">E <span class="p">only works when when typed in, e.g, </span>(INSERT D BEFORE E) <span class="p">will treat </span>E <span class="p">as a pattern, and search for </span>E<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(E <i>X</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">Evaluates <i>X</i>, i.e., performs <span class="s11">(EVAL </span><span class="s16">X</span><span class="s11">)</span>, and prints the result on the terminal.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(E <i>X </i>T) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: left;"><span class="p">Same as </span>(E <i>x</i>) <span class="p">but does not print.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">The </span>(E <i>X</i>) <span class="p">and </span>(E <i>X </i>T) <span class="p">commands are mainly intended for use by macros and subroutine calls to the editor; you would probably type in a form for evaluation using the more convenient format of the (atomic) </span>E <span class="p">command.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(I </span>C X<span class="s32">1 </span>... X<span class="s32">N</span><span class="s11">)                                          </span><span class="p">[Editor Command]</span></p><p class="s11" style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">Executes the </span><span class="s9">editor command </span>(<i>C Y</i><i>1 </i>... <i>Y</i><i>N</i>) <span class="p">where </span><i>Y</i><i>i </i>= (EVAL <i>X</i><i>i</i>)<span class="p">. If </span><i>C </i><span class="p">is not an atom,</span></p><p class="s16" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">C <span class="p">is evaluated also.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Examples:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">(I 3 (GETD ’FOO)) <span class="p">will replace the third element of the current expression with the definition of </span>FOO<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">(I N FOO (CAR FIE)) <span class="p">will attach the value of </span>FOO <span class="p">and </span>CAR <span class="p">of the value of </span>FIE <span class="p">to the end of the current expression.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">(I F = FOO T) <span class="p">will search for an expression </span>EQ <span class="p">to the value of </span>FOO<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 93%;text-align: justify;">(I (COND ((NULL FLG) ’-1) (T 1)) FOO)<span class="p">, if </span>FLG <span class="p">is </span>NIL<span class="p">, inserts the value of </span>FOO <span class="p">before the first element of the current expression, otherwise replaces the first element by the value of </span>FOO<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The <span class="s11">I </span>command sets an internal flag to indicate to the structure modification commands <i>not</i></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">to copy expression(s) when inserting, replacing, or attaching.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">EVAL                                                     <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Does an <span class="s11">EVAL </span>of the current expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">EVAL<span class="p">, line-feed, and the </span>GO <span class="p">command together effectively allows you to &quot;single-step&quot; a program through its symbolic definition.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">GETVAL                                                   <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Replaces the current expression by the result of evaluating it.</p><p class="s16" style="padding-top: 10pt;padding-left: 113pt;text-indent: -12pt;text-align: left;"><span class="s11">(## </span>COM<span class="s32">1 </span>COM<span class="s32">2 </span>... COM<span class="s32">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 12pt;padding-left: 113pt;text-indent: 0pt;text-align: justify;">An nlambda, nospread function (not a command). Its value is what the current expression would be after executing the edit commands <span class="s16">COM</span><span class="s32">1 </span><span class="s11">... </span><span class="s16">COM</span><span class="s32">N </span>starting from the present edit chain. Generates an error if any of <span class="s16">COM</span><span class="s32">1 </span>thru <span class="s11">COM</span><span class="s45">N </span>cause errors. The current edit chain is never changed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 131pt;text-indent: -30pt;text-align: justify;">Note: The <span class="s11">A</span>, <span class="s11">B</span>, <span class="s11">:</span>, <span class="s11">INSERT</span>, <span class="s11">REPLACE</span>, and <span class="s11">CHANGE </span>commands make special checks for <span class="s11">## </span>forms in the expressions used for inserting or replacing, and use a copy of <span class="s11">## </span>form instead (see the <span class="s11">A</span>,<span class="s11">B</span>, and <span class="s11">: </span>Commands section above). Thus, <span class="s11">(INSERT (## 3 2) AFTER 1) </span>is equivalent to <span class="s11">(I INSERT (COPY (## 3 2)) ’AFTER 1)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">Example: <span class="s11">(I R ’X (## (CONS .. Z))) </span>replaces all <span class="s11">X</span>’s in the current expression by the first <span class="s11">CONS </span>containing a <span class="s11">Z</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s11">I </span>command is not very convenient for computing an <i>entire </i>edit command for execution, since it computes the command name and its arguments separately. Also, the <span class="s11">I </span>command cannot be used to compute an atomic command. The following two commands provide more general ways of computing commands.</p><p class="s16" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s11">(COMS </span>X<span class="s32">1 </span>... X<span class="s32">M</span><span class="s11">) </span><span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;">Each <span class="s16">X</span><span class="s32">i </span>is evaluated and its value is executed as a command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">For example, <span class="s11">(COMS (COND (X (LIST 1 X)))) </span>will replace the first element of the current expression with the value of <span class="s11">X </span>if non-<span class="s11">NIL</span>, otherwise do nothing. The editor command <span class="s11">NIL </span>is a no-op (see the Miscellaneous Commands section above).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s11">(COMSQ </span>COM<span class="s32">1 </span>... COM<span class="s32">N</span><span class="s11">) </span><span class="p">[Editor Command]</span></p><p class="s16" style="padding-top: 12pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="p">Executes </span>COM<span class="s32">1 </span><span class="s11">... </span>COM<span class="s32">N</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 65pt;text-indent: 0pt;line-height: 94%;text-align: justify;">COMSQ <span class="p">is mainly useful in conjunction with the </span>COMS <span class="p">command. For example, suppose you want to compute an entire list of commands for evaluation, as opposed to computing each command one at a time as does the </span>COMS <span class="p">command. You would then write </span>(COMS (CONS ’COMSQ <span class="s9">X</span>)) <span class="p">where </span><span class="s9">X </span><span class="p">computed the list of commands, e.g., </span>(COMS (CONS ’COMSQ (GETP FOO ’COMMANDS)))<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Commands That Test                                                                                                                                </h4><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(IF <i>X</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="p">Generates an error </span><span class="s9">unless </span><span class="p">the value of </span>(EVAL <i>X</i>) <span class="p">is true. In other words, if </span>(EVAL <i>X</i>) <span class="p">causes an error or </span>(EVAL <i>X</i>) = NIL<span class="p">, </span>IF <span class="p">will cause an error.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For some editor commands, the occurrence of an error has a well defined meaning, i.e., they use errors to branch on, as <span class="s11">COND </span>uses <span class="s11">NIL </span>and non-<span class="s11">NIL</span>. For example, an error condition in a location specification may simply mean &quot;not this one, try the next.&quot; Thus the location</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 94%;text-align: justify;">specification <span class="s11">(IPLUS (E (OR (NUMBERP (## 3)) (ERROR!)) T)) </span>specifies the first <span class="s11">IPLUS </span>whose second argument is a number. The <span class="s11">IF </span>command, by equating <span class="s11">NIL </span>to error, provides a more natural way of accomplishing the same result. Thus, an equivalent location specification is <span class="s11">(IPLUS (IF (NUMBERP (## 3))))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">The <span class="s11">IF </span>command can also be used to select between two alternate lists of commands for execution.</p><p class="s16" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(IF </span>X COMS<span class="s32">1 </span>COMS<span class="s32">2</span><span class="s11">)                                       </span><span class="p">[Editor Command]</span></p><p class="s11" style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>(EVAL <i>X</i>) <span class="p">is true, execute </span><i>COMS</i><i>1</i><span class="p">; if </span>(EVAL <i>X</i>) <span class="p">causes an error or is equal to </span>NIL<span class="p">, execute</span></p><p class="s16" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">COMS<span class="s32">2</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Thus <span class="s11">IF </span>is equivalent to</p><p class="s11" style="padding-top: 8pt;padding-left: 235pt;text-indent: -37pt;line-height: 88%;text-align: left;">(COMS (CONS ’COMSQ (COND</p><p class="s11" style="padding-left: 252pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((CAR (NLSETQ (EVAL X)))</p><p class="s16" style="padding-left: 47pt;text-indent: 0pt;line-height: 89%;text-align: center;">COMS<span class="s32">1</span><span class="s11">)</span></p><p class="s11" style="padding-left: 252pt;text-indent: 0pt;line-height: 91%;text-align: left;">(T <i>COMS</i><i>2</i>))))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">For example, the command <span class="s11">(IF (READP T) NIL (P)) </span>will print the current expression provided the input buffer is empty.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(IF <i>X COMS</i><i>1</i>)                                             <span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: justify;">If <span class="s11">(EVAL </span><span class="s16">X</span><span class="s11">) </span>is true, execute <span class="s16">COMS</span><span class="s32">1</span>; otherwise generate an error.</p><p class="s16" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(LP </span>COMS<span class="s32">1 </span>... COMS<span class="s32">N</span><span class="s11">)                                     </span><span class="p">[Editor Command]</span></p><p class="s16" style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">Repeatedly executes </span>COMS<span class="s32">1 </span><span class="s11">... </span>COMS<span class="s32">N </span><span class="p">until an error occurs.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">For example, <span class="s11">(LP F PRINT (N T)) </span>will attach a <span class="s11">T </span>at the end of every <span class="s11">PRINT </span>expression. <span class="s11">(LP F PRINT (IF (## 3) NIL ((N T)))) </span>will attach a <span class="s11">T </span>at the end of each print expression which does not already have a second argument. The form <span class="s11">(## 3) </span>will cause an error if the edit command <span class="s11">3 </span>causes an error, thereby selecting <span class="s11">((N T)) </span>as the list of commands to be executed. The <span class="s11">IF </span>could also be written as <span class="s11">(IF (CDDR (##)) NIL ((N T)))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 93%;text-align: justify;">When an error occurs, <span class="s11">LP </span>prints <i>N </i><span class="s11">OCCURRENCES </span>where <i>N </i>is the number of times the commands were successfully executed. The edit chain is left as of the last complete successful execution of <span class="s16">COMS</span><span class="s32">1 </span><span class="s11">... </span><span class="s16">COMS</span><span class="s32">N</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s11">(LPQ </span>COMS<span class="s32">1 </span>... COMS<span class="s32">N</span><span class="s11">) </span><span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">LP </span>but does not print the message <span class="s16">N </span><span class="s11">OCCURRENCES</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 94%;text-align: justify;">In order to prevent non-terminating loops, both <span class="s11">LP </span>and <span class="s11">LPQ </span>terminate when the number of iterations reaches <span class="s11">MAXLOOP</span>, initially set to 30. <span class="s11">MAXLOOP </span>can be set to <span class="s11">NIL</span>, which is equivalent to setting it to infinity. Since the edit chain is left as of the last successful completion of the loop, you can simply continue the <span class="s11">LP </span>command with <span class="s11">REDO </span>(see Chapter 13).</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(SHOW <i>X</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">X </span>is a list of patterns. <span class="s11">SHOW </span>does a <span class="s11">LPQ </span>printing all instances of the indicated expression(s),</p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">e.g. <span class="s11">(SHOW FOO (SETQ FIE &amp;)) </span>will print all <span class="s11">FOO</span>s and all <span class="s11">(SETQ FIE &amp;)</span>s. Generates an error if there aren’t any instances of the expression(s).</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(EXAM <i>X</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">SHOW </span>except calls the editor recursively (via the <span class="s11">TTY: </span>command, see above) on each instance of the indicated espression(s) so that you can examine and / or change them.</p><p class="s16" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s11">(ORR </span>COMS<span class="s32">1 </span>... COMS<span class="s32">N</span><span class="s11">) </span><span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;"><span class="s11">ORR </span>begins by executing <span class="s16">COMS</span><span class="s32">1</span>, a list of commands. If no error occurs, <span class="s11">ORR </span>is finished. Otherwise, <span class="s11">ORR </span>restores the edit chain to its original value, and continues by executing <span class="s16">COMS</span><span class="s32">2</span>, etc. If none of the command lists execute without errors, i.e., the <span class="s11">ORR </span>&quot;drops off the end&quot;, <span class="s11">ORR </span>generates an error. Otherwise, the edit chain is left as of the completion of the first command list which executes without an error.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">NIL <span class="p">as a command list is perfectly legal, and will always execute successfully. Thus, making the last &quot;argument&quot; to </span>ORR <span class="p">be </span>NIL <span class="p">will insure that the </span>ORR <span class="p">never causes an error. Any other atom is treated as </span>(<i>ATOM</i>)<span class="p">, i.e., the above example could be written as </span>(ORR NX !NX NIL)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">For example, <span class="s11">(ORR (NX) (!NX) NIL) </span>will perform a <span class="s11">NX</span>, if possible, otherwise a <span class="s11">!NX</span>, if possible, otherwise do nothing. Similarly, <span class="s11">DELETE </span>could be written as <span class="s11">(ORR (UP (1)) (BK UP (2)) (UP (: NIL)))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Edit Macros                                                                                                                                                </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Many of the more sophisticated branching commands in the editor, such as <span class="s11">ORR</span>, <span class="s11">IF</span>, etc., are most often used in conjunction with edit macros. The macro feature permits you to define new commands and thereby expand the editor’s repertoire, or redefine existing commands (to refer to the original</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">definition of a built-in command when redefining it via a macro, use the <span class="s11">ORIGINAL </span>command, below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Macros are defined by using the <span class="s11">M </span>command:</p><p class="s16" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(M </span>C COMS<span class="s32">1 </span>... COMS<span class="s32">N</span><span class="s11">)                                    </span><span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: justify;">For <span class="s16">C </span>an atom, <span class="s11">M </span>defines <span class="s16">C </span>as an atomic command. If a macro is redefined, its new definition replaces its old. Executing <span class="s16">C </span>is then the same as executing the list of commands <span class="s16">COMS</span><span class="s32">1 </span><span class="s11">... </span><span class="s16">COMS</span><span class="s32">N</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">For example, <span class="s11">(M BP BK UP P) </span>will define <span class="s11">BP </span>as an atomic command which does three things, a <span class="s11">BK</span>, and <span class="s11">UP</span>, and a <span class="s11">P</span>. Macros can use commands defined by macros as well as built in commands in their definitions. For example, suppose <span class="s11">Z </span>is defined by <span class="s11">(M Z -1 (IF (READP T) NIL (P)))</span>, i.e., <span class="s11">Z </span>does a <span class="s11">-1</span>, and then if nothing has been typed, a <span class="s11">P</span>. Now we can define <span class="s11">ZZ </span>by <span class="s11">(M ZZ -1 Z)</span>, and <span class="s11">ZZZ </span>by <span class="s11">(M ZZZ -1 -1 Z) or (M ZZZ -1 ZZ)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Macros can also define list commands, i.e., commands that take arguments.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(M (<i>C</i>) (<i>ARG</i><i>1 </i>... <i>ARG</i><i>N</i>) <i>COMS</i><i>1 </i>... <i>COMS</i><i>M</i>)                  <span class="p">[Editor Command]</span></p><p class="s16" style="padding-top: 12pt;padding-left: 113pt;text-indent: 0pt;text-align: justify;">C <span class="p">an atom. </span><span class="s11">M </span><span class="p">defines </span>C <span class="p">as a list command. Executing </span><span class="s11">(</span>C E<span class="s32">1 </span><span class="s11">... </span>E<span class="s32">N</span><span class="s11">) </span><span class="p">is then performed by substituting </span>E<span class="s32">1 </span><span class="p">for </span>ARG<span class="s32">1</span><span class="s11">, ... </span>E<span class="s32">N </span><span class="p">for </span>ARG<span class="s32">N </span><span class="p">throughout </span>COMS<span class="s32">1 </span><span class="s11">... </span>COMS<span class="s32">M</span><span class="p">, and then executing </span>COMS<span class="s32">1 </span><span class="s11">... </span>COMS<span class="s32">M</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">For example, we could define a more general <span class="s11">BP </span>by <span class="s11">(M (BP) (N) (BK N) UP P)</span>. Thus,</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(BP 3) <span class="p">would perform </span>(BK 3)<span class="p">, followed by an </span>UP<span class="p">, followed by a </span>P<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A list command can be defined via a macro so as to take a fixed or indefinite number of &quot;arguments&quot;, as with spread vs. nospread functions. The form given above specified a macro with a fixed number of arguments, as indicated by its argument list. If the &quot;argument list&quot; is <i>atomic</i>, the command takes an indefinite number of arguments.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(M (<i>C</i>) <i>ARG COMS</i><i>1 </i>... <i>COMS</i><i>M</i>)                              <span class="p">[Editor Command]</span></p><p class="s16" style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>C<span class="p">, </span>ARG <span class="p">are both atoms, this defines </span>C <span class="p">as a list command. Executing </span><span class="s11">(</span>C E<span class="s32">1 </span><span class="s11">... </span>E<span class="s32">N</span><span class="s11">) </span><span class="p">is performed by substituting </span><span class="s11">(</span>E<span class="s32">1 </span><span class="s11">... </span>E<span class="s32">N</span><span class="s11">)</span><span class="p">, i.e., </span><span class="s11">CDR </span><span class="p">of the command, for </span>ARG <span class="p">throughout </span>COMS<span class="s32">1 </span><span class="s11">... </span>COMS<span class="s32">M</span><span class="p">, and then executing </span>COMS<span class="s32">1 </span><span class="s11">... </span>COMS<span class="s32">M</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">For example, the command <span class="s11">2ND </span>(see the Location Specification section above), could be defined as a macro by <span class="s11">(M (2ND) X (ORR ((LC . X) (LC . X))))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For all editor commands, &quot;built in&quot; commands as well as commands defined by macros as atomic commands and list definitions are <i>completely </i>independent. In other words, the existence of an atomic definition for <span class="s16">C </span>in <i>no </i>way affects the treatment of <span class="s16">C </span>when it appears as <span class="s11">CAR </span>of a list command, and the existence of a list definition for <span class="s16">C </span>in <i>no </i>way affects the treatment of <span class="s16">C </span>when it appears as an atom. In particular, <span class="s16">C </span>can be used as the name of either an atomic command, or a list command, or both. In the latter case, two entirely different definitions can be used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Once <span class="s16">C </span>is defined as an atomic command via a macro definition, it will <i>not </i>be searched for when used in a location specification, unless it is preceded by an <span class="s11">F</span>. Thus <span class="s11">(INSERT -- BEFORE BP) </span>would not search for <span class="s11">BP</span>, but instead perform a <span class="s11">BK</span>, and <span class="s11">UP</span>, and a <span class="s11">P</span>, and then do the insertion. The corresponding also holds true for list commands.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Occasionally, your will want to employ the <span class="s11">S </span>command in a macro to save some temporary result. For example, the <span class="s11">SW </span>command could be defined as:</p><p class="s11" style="padding-top: 8pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(M (SW) (N M)</p><p class="s11" style="padding-left: 171pt;text-indent: 0pt;line-height: 88%;text-align: left;">(NTH N) (S FOO 1) MARK</p><p class="s11" style="padding-left: 171pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0</p><p class="s11" style="padding-left: 171pt;text-indent: 0pt;line-height: 88%;text-align: left;">(NTH M) (S FIE 1)</p><p class="s11" style="padding-left: 171pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(I 1 FOO)</p><p class="s19" style="padding-left: 171pt;text-indent: 0pt;line-height: 10pt;text-align: left;"></p><p class="s11" style="padding-left: 171pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(I 1 FIE))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Since this version of <span class="s11">SW </span>sets <span class="s11">FOO </span>and <span class="s11">FIE</span>, using <span class="s11">SW </span>may have undesirable side effects, especially when the editor was called from deep in a computation, we would have to be careful to make up unique names for dummy variables used in edit macros, which is bothersome. Furthermore, it would be impossible to define a command that called itself recursively while setting free variables. The <span class="s11">BIND </span>command solves both problems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s11">(BIND </span>COMS<span class="s32">1 </span>... COMS<span class="s32">N</span><span class="s11">) </span><span class="p">[Editor Command]</span></p><p style="padding-top: 12pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;">Binds three dummy variables <span class="s11">#1</span>, <span class="s11">#2</span>, <span class="s11">#3</span>, (initialized to <span class="s11">NIL</span>), and then executes the edit commands <span class="s16">COMS</span><span class="s32">1 </span><span class="s11">... </span><span class="s16">COMS</span><span class="s32">N</span>. <span class="s11">BIND </span>uses a <span class="s11">PROG </span>to make these bindings, so they are only in effect while the commands are being executed and <span class="s11">BIND</span>s can be used recursively; the variables <span class="s11">#1</span>, <span class="s11">#2</span>, and <span class="s11">#3 </span>will be rebound each time <span class="s11">BIND </span>is invoked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Thus, we can write SW safely as:</p><p class="s11" style="padding-top: 7pt;padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(M (SW) (N M)</p><p class="s11" style="padding-left: 171pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(BIND (NTH N)</p><p class="s11" style="padding-left: 204pt;text-indent: 0pt;line-height: 88%;text-align: left;">(S #1 1) MARK</p><p class="s11" style="padding-left: 204pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0</p><p class="s11" style="padding-left: 204pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(NTH M)</p><p class="s11" style="padding-left: 204pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(S #2 1)</p><p class="s11" style="padding-left: 204pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(I 1 #1)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 252pt;text-indent: 0pt;text-align: left;"><span class="s21"> </span><span class="s11">(I 1 #2)))</span></p><p class="s16" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(ORIGINAL </span>COMS<span class="s32">1 </span>... COMS<span class="s32">N</span><span class="s11">)                               </span><span class="p">[Editor Command]</span></p><p class="s16" style="padding-top: 12pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="p">Executes </span>COMS<span class="s32">1 </span><span class="s11">... </span>COMS<span class="s32">N </span><span class="p">without regard to macro definitions. Useful for redefining a built in command in terms of itself., i.e. effectively allows you to &quot;advise&quot; edit commands.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">User macros are stored on a list <span class="s11">USERMACROS</span>. The file package command <span class="s11">USERMACROS </span>(Chapter 17) is available for dumping all or selected user macros.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Undo                                                                                                                                                           </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Each command that causes structure modification automatically adds an entry to the front of <span class="s11">UNDOLST </span>that contains the information required to restore all pointers that were changed by that command.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">UNDO                                                     <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Undoes the last, i.e., most recent, structure modification command that has not yet been undone, and prints the name of that command, e.g., <span class="s11">MBD undone</span>. The edit chain is then <i>exactly </i>what it was before the &quot;undone&quot; command had been performed. If there are no commands to undo, <span class="s11">UNDO </span>types <span class="s11">nothing saved</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">!UNDO                                                    <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Undoes all modifications performed during this editing session, i.e. this call to the editor. As each command is undone, its name is printed a la <span class="s11">UNDO</span>. If there is nothing to be undone,</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">!UNDO <span class="p">prints </span>nothing saved<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">Undoing an event containing an <span class="s11">I</span>, <span class="s11">E</span>, or <span class="s11">S </span>command will also undo the side effects of the evaluation(s), e.g., undoing <span class="s11">(I 3 (/NCONC FOO FIE)) </span>will not only restore the third element but also restore <span class="s11">FOO</span>. Similarly, undoing an <span class="s11">S </span>command will undo the set. See the discussion of <span class="s11">UNDO </span>in Chapter 13. (If the <span class="s11">I </span>command was typed directly to the editor, <span class="s11">/NCONC </span>would automatically be substituted for <span class="s11">NCONC </span>as described in Chapter 13.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Since <span class="s11">UNDO </span>and <span class="s11">!UNDO </span>cause structure modification, they also add an entry to <span class="s11">UNDOLST</span>. However, <span class="s11">UNDO </span>and <span class="s11">!UNDO </span>entries are skipped by <span class="s11">UNDO</span>, e.g., if you perform an <span class="s11">INSERT</span>, and then an <span class="s11">MBD</span>, the first <span class="s11">UNDO </span>will undo the <span class="s11">MBD</span>, and the second will undo the <span class="s11">INSERT</span>. However, you can also specify precisely which commands you want undone by identifying the corresponding entry. In this case, you can undo an <span class="s11">UNDO </span>command, e.g., by typing <span class="s11">UNDO UNDO</span>, or undo a <span class="s11">!UNDO </span>command, or undo a command other than that most recently performed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Whenever you <i>continue </i>an editing session, the undo information of the previous session is protected by inserting a special blip, called an undo-block, on the front of <span class="s11">UNDOLST</span>. This undo-block will terminate the operation of a <span class="s11">!UNDO</span>, thereby confining its effect to the current session, and will similarly prevent an <span class="s11">UNDO </span>command from operating on commands executed in the previous session.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Thus, if you enter the editor continuing a session, and immediately execute an <span class="s11">UNDO </span>or <span class="s11">!UNDO</span>, the editor will type <span class="s11">BLOCKED </span>instead of <span class="s11">NOTHING SAVED</span>. Similarly, if you execute several commands and then undo them all, another <span class="s11">UNDO </span>or <span class="s11">!UNDO </span>will also cause <span class="s11">BLOCKED </span>to be typed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">UNBLOCK <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Removes an undo-block. If executed at a non-blocked state, i.e., if <span class="s11">UNDO </span>or <span class="s11">!UNDO </span><i>could</i></p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">operate, types <span class="s11">NOT BLOCKED</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">TEST <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Adds an undo-block at the front of <span class="s11">UNDOLST</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">Note that <span class="s11">TEST </span>together with <span class="s11">!UNDO </span>provide a &quot;tentative&quot; mode for editing, i.e., you can perform a number of changes, and then undo all of them with a single <span class="s11">!UNDO </span>command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(UNDO <i>EventSpec</i>) <span class="p">[Editor Command]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 66pt;text-indent: 0pt;line-height: 92%;text-align: justify;">EventSpec <span class="p">is an event specification (see Chapter 13). Undoes the indicated event on the history list. In this case, the event does not have to be in the current editing session, even if the previous session has not been unblocked as described above. However, you do have to be editing the same expression as was being edited in the indicated event.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">If the expressions differ, the editor types the warning message <span class="s11">&quot;different expression,&quot; </span>and does not undo the event. The editor enforces this to avoid your accidentally undoing a random command by giving the wrong event specification.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">EDITDEFAULT                                                                                                                                           </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Whenever a command is not recognized, i.e., is not &quot;built in&quot; or defined as a macro, the editor calls an internal function, <span class="s11">EDITDEFAULT</span>, to determine what action to take. Since <span class="s11">EDITDEFAULT </span>is part of the edit block, you cannot advise or redefine it as a means of augmenting or extending the editor. However, you can accomplish this via <span class="s11">EDITUSERFN</span>. If the value of the variable <span class="s11">EDITUSERFN </span>is <span class="s11">T</span>, <span class="s11">EDITDEFAULT </span>calls the function <span class="s11">EDITUSERFN </span>giving it the command as an argument. If <span class="s11">EDITUSERFN </span>returns a non-<span class="s11">NIL </span>value, its value is interpreted as a single command and executed. Otherwise, the error correction procedure described below is performed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">If a location specification is being executed, an internal flag informs <span class="s11">EDITDEFAULT </span>to treat the command as though it had been preceded by an <span class="s11">F</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the command is a list, an attempt is made to perform spelling correction on the <span class="s11">CAR </span>of the command (unless <span class="s11">DWIMFLG = NIL</span>) using <span class="s11">EDITCOMSL</span>, a list of all list edit commands. If spelling correction is successful, the correct command name is <span class="s11">RPLACA</span>ed into the command, and the editor continues by executing the command. In other words, if you type <span class="s11">(LP F PRINT (MBBD AND (NULL FLG)))</span>, only one spelling correction will be necessary to change <span class="s11">MBBD </span>to <span class="s11">MBD</span>. If spelling correction is not successful, an error is generated.</p><p style="padding-top: 6pt;padding-left: 138pt;text-indent: -30pt;text-align: justify;">Note: When a macro is defined via the <span class="s11">M </span>command, the command name is added to <span class="s11">EDITCOMSA </span>or <span class="s11">EDITCOMSL</span>, depending on whether it is an atomic or list command. The <span class="s11">USERMACROS </span>file package command is aware of this, and provides for restoring <span class="s11">EDITCOMSA </span>and <span class="s11">EDITCOMSL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the command is atomic, the procedure followed is a little more <span class="s10">elaborate.</span></p><ol id="l32"><ol id="l33"><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -6pt;line-height: 93%;text-align: justify;">If the command is one of the list commands, i.e., a member of <span class="s11">EDITCOMSL</span>, and there is additional input on the same terminal line, treat the entire line as a single list command.  The line is read using <span class="s11">READLINE </span>(see Chapter 13), so the line can be terminated by a square bracket, or by a carriage return not preceded by a space. You may omit parentheses for any list command typed in at the top level (provided the command is not also an atomic command,</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">e.g. <span class="s11">NX</span>, <span class="s11">BK</span>). For example,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND (&amp; &amp;) (T &amp;))</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*XTR 3 2]</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*MOVE TO AFTER LP</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><p style="padding-top: 4pt;padding-left: 144pt;text-indent: 0pt;line-height: 12pt;text-align: left;">If the command is on the list <span class="s11">EDITCOMSL </span>but no additional input is on the terminal</p><p style="padding-left: 108pt;text-indent: 0pt;text-align: left;">line, an error is generated. For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND (&amp; &amp;) (T &amp;))</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*MOVE</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">MOVE ?</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">*</p><p style="padding-top: 4pt;padding-left: 144pt;text-indent: 0pt;line-height: 12pt;text-align: left;">If the command is on <span class="s11">EDITCOMSL</span>, and <i>not </i>typed in directly, e.g., it appears as one of</p><p style="padding-left: 108pt;text-indent: 0pt;text-align: justify;">the commands in a <span class="s11">LP </span>command, the procedure is similar, with the rest of the command stream at that level being treated as &quot;the terminal line&quot;, e.g. <span class="s11">(LP F (COND (T &amp;)) XTR 2 2)</span>.</p><p style="padding-top: 7pt;padding-left: 108pt;text-indent: 36pt;text-align: justify;">If the command is being executed in location context, <span class="s11">EDITDEFAULT </span>does not get this far, e.g., <span class="s11">(MOVE TO AFTER COND XTR 3) </span>will search for <span class="s11">XTR</span>, <i>not </i>execute it. However, <span class="s11">(MOVE TO AFTER COND (XTR 3)) </span>will work.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 5pt;padding-left: 60pt;text-indent: -6pt;line-height: 91%;text-align: justify;">If the command was typed in and the first character in the command is an 8, treat the 8 as a mistyped left parenthesis, and and the rest of the line as the arguments to the command, e.g.,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND (&amp; &amp;) (T &amp;))</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*8-2 (Y (RETURN Z)))</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=(-2</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*P</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(COND (Y &amp;) (&amp; &amp;) (T &amp;))</p></li><li><p style="padding-top: 4pt;padding-left: 59pt;text-indent: -6pt;text-align: justify;">If the command was typed in, is the name of a function, and is followed by <span class="s11">NIL </span>or a list <span class="s11">CAR </span>of which is not an edit command, assume you forgot to type <span class="s11">E </span>and intend to apply the function to its arguments, type <span class="s11">=E </span>and the function name, and perform the indicated computation, e.g.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*BREAK(FOO)</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 88%;text-align: left;">=E BREAK (FOO)</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*</p></li><li><p style="padding-top: 4pt;padding-left: 59pt;text-indent: -6pt;text-align: justify;">If the last character in the command is <span class="s11">P</span>, and the first <span class="s16">N</span>-1 characters comprise a number, assume that you intended two commands, e.g.,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 65pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*P</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND (&amp; &amp;) (T &amp;))</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 9pt;text-align: left;">*0P</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=0 P</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(SETQ X (COND &amp; &amp;))</p></li><li><p style="padding-top: 4pt;padding-left: 59pt;text-indent: -6pt;text-align: left;">Attempt spelling correction using <span class="s11">EDITCOMSA</span>, and if successful, execute the corrected command.</p></li><li><p style="padding-top: 6pt;padding-left: 59pt;text-indent: -6pt;line-height: 91%;text-align: left;">If there is additional input on the same line, or command stream, spelling correct using <span class="s11">EDITCOMSL </span>as a spelling list, e.g.,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;line-height: 10pt;text-align: right;">*MBBD SETQ X</p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">=MBD</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p></li><li><p style="padding-top: 4pt;padding-left: 95pt;text-indent: -42pt;text-align: left;">Otherwise, generate an error.</p></li></ol></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Time Stamps                                                                                                                                              </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Whenever a function is edited, and changes were made, the function is time-stamped (by <span class="s11">EDITE</span>), which consists of inserting a comment of the form <span class="s11">(* </span><span class="s16">USERS-INITIALS DATE</span><span class="s11">)</span>. <span class="s16">USERS-INITIALS </span>is the value of the variable <span class="s11">INITIALS</span>. After greeting (see Chapter 12), the function <span class="s11">SETINITIALS </span>is</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">called. </span>SETINITIALS <span class="p">searches </span>INITIALSLST<span class="p">, a list of elements of the form </span>(<i>USERNAME </i>. <i>INITIALS</i>) <span class="p">or </span>(<i>USERNAME FIRSTNAME INITIALS</i>)<span class="p">. If your name is found, </span>INITIALS <span class="p">is set accordingly. If your username name is </span><span class="s9">not </span><span class="p">found on </span>INITIALSLST<span class="p">, </span>INITIALS <span class="p">is set to the value of </span>DEFAULTINITIALS<span class="p">, initially </span>edited:<span class="p">. Thus, the default is to always time stamp. To suppress time stamping, you must either include an entry of the form </span>(<i>USERNAME</i>) <span class="p">on </span>INITIALSLST<span class="p">, or set </span>DEFAULTINITIALS <span class="p">to </span>NIL <span class="p">before greeting, i.e. in your user profile, or else, </span><span class="s9">after </span><span class="p">greeting, explicitly set </span>INITIALS <span class="p">to </span>NIL<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">If you want your functions to be time stamped with your initials when edited, include a file package command command of the form </span>(ADDVARS (INITIALSLST (<i>USERNAME </i>. <i>INITIALS</i>))) <span class="p">in your </span>INIT.LISP <span class="p">file (see Chapter 12).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">The following three functions may be of use for specialized applications with respect to time- stamping: </span>(FIXEDITDATE <i>EXPR</i>) <span class="p">which, given a lambda expression, inserts or smashes a time- stamp comment; </span>(EDITDATE? <i>COMMENT</i>) <span class="p">which returns </span>T <span class="p">if </span><i>COMMENT </i><span class="p">is a time stamp; and </span>(EDITDATE <i>OLDATE INITLS</i>) <span class="p">which returns a new time-stamp comment. If </span><i>OLDATE </i><span class="p">is a time-stamp comment, it will be reused.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Warning with Declarations                                                                                                                                </h4><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">CAUTION: There is a feature of the BYTECOMPILER that is not supported by SEdit or the XCL compiler. It is possible to insert a comment at the beginning of your function that looks like</p><p style="padding-top: 10pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">(* DECLARATIONS: --)</p><p style="padding-top: 10pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The tail, or -- section, of this comment is taken as a set of local record declarations which are then used by the compiler in that function just as if they had been declared globally. See the &quot;Compiler&quot; section in Chapter 3 of these Notes for additional behavior in XCL.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">SEdit does not recognize such declarations. Thus, if the &quot;Expand&quot; command is used, the expansion will not be done with these record declarations in effect. The code that you see in SEdit will not be the same code compiled by the BYTECOMPILER.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 179pt;text-indent: 0pt;text-align: left;">[This page intentionally left blank]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l34"><li><p class="s6" style="padding-top: 4pt;padding-left: 28pt;text-indent: -22pt;text-align: left;"><a name="bookmark18">FILE MANAGER</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="605" height="3" alt="image" src="Image_050.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Warning: The subsystem within Medley used for managing collections of definitions (of functions, variables, etc.) is known as the &quot;File Manager.&quot; This terminology is confusing, because the word &quot;file&quot; is also used in the more conventional sense as meaning a collection of data stored on some physical media. Unfortunately, it is not possible to change this terminology at this time, because many functions and variables (<span class="s11">MAKEFILE</span>, <span class="s11">FILEPKGTYPES</span>, etc.) incorporate the word &quot;file&quot; in their names.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Most implementations of Lisp treat symbolic files as unstructured text, much as they are treated in most conventional programming environments. Function definitions are edited with a character- oriented text editor, and then the changed definitions (or sometimes the entire file) is read or compiled to install those changes in the running memory image. Interlisp incorporates a different philosophy. A symbolic file is considered as a database of information about a group of data objects---function definitions,  variable  values,  record  declarations,  etc.  The  text  in  a  symbolic  file  is  never  edited directly. Definitions are edited only after their textual representations on files have been converted to data-structures that reside inside the Lisp address space. The programs for editing definitions inside Medley can therefore make use of the full set of data-manipulation capabilities that the environment already provides, and editing operations can be easily intermixed with the processes of evaluation and compilation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley is thus a &quot;resident&quot; programming environment, and as such it provides facilities for moving definitions back and forth between memory and the external databases on symbolic files, and for doing the bookkeeping involved when definitions on many symbolic files with compiled counterparts are being manipulated. The file manager provides those capabilities. It shoulders the burden of keeping track of where things are and what things have changed so that you don’t have to. The file manager also keeps track of which files have been modified and need to be updated and recompiled.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The file manager is integrated into many other system packages. For example, if only the compiled version of a file is loaded and you attempt to edit a function, the file manager will attempt to load the source of that function from the appropriate symbolic file. In many cases, if a datum is needed by some program, the file manager will automatically retrieve it from a file if it is not already in your working environment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Some of the operations of the file manager are rather complex. For example, the same function may appear in several different files, or the symbolic or compiled files may be in different directories, etc. Therefore, this chapter does not document how the file manager works in each and every situation, but instead makes the deliberately vague statement that it does the &quot;right&quot; thing with respect to keeping track of what has been changed, and what file operations need to be performed in accordance with those changes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">For a simple illustration of what the file manager does, suppose that the symbolic file <span class="s11">FOO </span>contains the functions <span class="s11">FOO1 </span>and <span class="s11">FOO2</span>, and that the file <span class="s11">BAR </span>contains the functions <span class="s11">BAR1 </span>and <span class="s11">BAR2</span>. These two files could be loaded into the environment with the function <span class="s11">LOAD</span>:</p><p class="s19" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s21"> </span><span class="s11">(LOAD ’FOO)</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">FILE CREATED 4-MAR-83 09:26:55</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">FOOCOMS</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{DSK}FOO.;1</p><p class="s19" style="padding-top: 2pt;padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s21"> </span><span class="s11">(LOAD ’BAR)</span></p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">FILE CREATED 4-MAR-83 09:27:24 BARCOMS</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">{DSK}BAR.;1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Now, suppose that we change the definition of <span class="s11">FOO2 </span>with the editor, and we define two new functions, <span class="s11">NEW1 </span>and <span class="s11">NEW2</span>. At that point, the file manager knows that the in-memory definition of <span class="s11">FOO2 </span>is no longer consistent with the definition in the file <span class="s11">FOO</span>, and that the new functions have been defined but have not yet been associated with a symbolic file and saved on permanent storage. The function <span class="s11">FILES? </span>summarizes this state of affairs and enters into an interactive dialog in which we can specify what files the new functions are to belong to.</p><p class="s19" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s21"> </span><span class="s11">(FILES?)</span></p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">FOO...to be dumped.</p><p class="s11" style="padding-left: 162pt;text-indent: 21pt;line-height: 88%;text-align: left;">plus the functions: NEW1,NEW2 want to say where the above go ? Yes (functions)</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">NEW1 File name: BAR NEW2 File name: ZAP</p><p class="s11" style="padding-left: 162pt;text-indent: 10pt;line-height: 88%;text-align: left;">new file ? Yes NIL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The file manager knows that the file <span class="s11">FOO </span>has been changed, and needs to be dumped back to permanent storage. This can be done with <span class="s11">MAKEFILE</span>.</p><p class="s19" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(MAKEFILE ’FOO)</span></p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{DSK}FOO.;2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Since we added <span class="s11">NEW1 </span>to the old file <span class="s11">BAR </span>and established a new file <span class="s11">ZAP </span>to contain <span class="s11">NEW2</span>, both <span class="s11">BAR </span>and</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">ZAP <span class="p">now also need to be dumped. This is confirmed by a second call to </span>FILES?<span class="p">:</span></p><p class="s19" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(FILES?)</span></p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">BAR, ZAP...to be dumped. FOO...to be listed.</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">FOO...to be compiled NIL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">We are also informed that the new version we made of <span class="s11">FOO </span>needs to be listed (sent to a printer) and that the functions on the file must be compiled.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Rather than doing several <span class="s11">MAKEFILE</span>s to dump the files <span class="s11">BAR </span>and <span class="s11">ZAP</span>, we can simply call <span class="s11">CLEANUP</span>. Without any further user interaction, this will dump any files whose definitions have been modified. <span class="s11">CLEANUP </span>will also send any unlisted files to the printer and recompile any files which need to be recompiled. <span class="s11">CLEANUP </span>is a useful function to use at the end of a debugging session. It will call <span class="s11">FILES? </span>if any new objects have been defined, so you do not lose the opportunity to say explicitly where those belong. In effect, the function <span class="s11">CLEANUP </span>executes all the operations necessary to make the your permanent files consistent with the definitions in the current core-image.</p><p class="s19" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s21"> </span><span class="s11">(CLEANUP)</span></p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">FOO...compiling {DSK}FOO.;2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 130pt;text-indent: 0pt;line-height: 10pt;text-align: left;">.</p><p class="s11" style="padding-left: 130pt;text-indent: 0pt;line-height: 9pt;text-align: left;">.</p><p class="s11" style="padding-left: 130pt;text-indent: 0pt;line-height: 9pt;text-align: left;">.</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">BAR...compiling {DSK}BAR.;2</p><p class="s11" style="padding-left: 130pt;text-indent: 0pt;line-height: 9pt;text-align: left;">.</p><p class="s11" style="padding-left: 130pt;text-indent: 0pt;line-height: 9pt;text-align: left;">.</p><p class="s11" style="padding-left: 130pt;text-indent: 0pt;line-height: 9pt;text-align: left;">.</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ZAP...compiling {DSK}ZAP.;1</p><p class="s11" style="padding-left: 130pt;text-indent: 0pt;line-height: 9pt;text-align: left;">.</p><p class="s11" style="padding-left: 130pt;text-indent: 0pt;line-height: 9pt;text-align: left;">.</p><p class="s11" style="padding-left: 130pt;text-indent: 0pt;line-height: 10pt;text-align: left;">.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In addition to the definitions of functions, symbolic files in Interlisp can contain definitions of a variety of other types, e.g. variable values, property lists, record declarations, macro definitions, hash arrays, etc. In order to treat such a diverse assortment of data uniformly from the standpoint of file operations, the file manager uses the concept of a <i>typed definition</i>, of which a function definition is just one example. A typed definition associates with a name (usually a symbol), a definition of a given type (called the file manager type). Note that the same name may have several definitions of different types. For example, a symbol may have both a function definition and a variable definition. The file manager also keeps track of the files that a particular typed definition is stored on, so one can think of a typed definition as a relation between four elements: a name, a definition, a type, and a file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Symbolic files on permanent storage devices are referred to by names that obey the naming conventions of those devices, usually including host, directory, and version fields. When such definition groups are noticed by the file manager, they are assigned simple <i>root names </i>and these are used by all file manager operations to refer to those groups of definitions. The root name for a group is computed from its full permanent storage name by applying the function <span class="s11">ROOTFILENAME</span>; this strips off the host, directory, version, etc., and returns just the simple name field of the file. For each file, the file manager also has a data structure that describes what definitions it contains. This is known as the commands of the file, or its &quot;filecoms&quot;. By convention, the filecoms of a file whose root name is <span class="s16">X </span>is stored as the value of the symbol <span class="s16">X</span><span class="s11">COMS</span>. For example, the value of <span class="s11">FOOCOMS </span>is the filecoms for the file <span class="s11">FOO</span>. This variable can be directly manipulated, but the file manager contains facilities such as <span class="s11">FILES? </span>which make constructing and updating filecoms easier, and in some cases automatic.  See the Functions for Manipulating File Command Lists section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The file manager is able to maintain its databases of information because it is notified by various other routines in the system when events take place that may change that database. A file is &quot;noticed&quot; when it is loaded, or when a new file is stored (though there are ways to explicitly notice files without completely loading all their definitions). Once a file is noticed, the file manager takes it into account when modifying filecoms, dumping files, etc. The file manager also needs to know what typed definitions have been changed or what new definitions have been introduced, so it can determine which files need to be updated.  This is done by &quot;marking changes&quot;.  All the system functions that perform file manager operations (<span class="s11">LOAD</span>, <span class="s11">TCOMPL</span>, <span class="s11">PRETTYDEF</span>, etc.), as well as those functions that define or change data, (<span class="s11">EDITF</span>, <span class="s11">EDITV</span>, <span class="s11">EDITP</span>, DWIM corrections to user functions) interact with the file manager. Also, <i>typed-in </i>assignment of variables or property values is noticed by the file manager. (Note that modifications to variable or property values during the execution of a function body are not noticed.) In some cases the marking procedure can be subtle, e.g. if you edit a property list using <span class="s11">EDITP</span>, only those properties whose values are actually changed (or added) are marked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">All file manager operations can be disabled with <span class="s11">FILEPKGFLG</span>.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">FILEPKGFLG                                                     <span class="p">[Variable]</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">The file manager can be disabled by setting <span class="s11">FILEPKGFLG </span>to <span class="s11">NIL</span>. This will turn off noticing files and marking changes. <span class="s11">FILEPKGFLG </span>is initially <span class="s11">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The rest of this chapter goes into further detail about the file manager. Functions for loading and storing symbolic files are presented first, followed by functions for adding and removing typed definitions from files, moving typed definitions from one file to another, determining which file a particular definition is stored in, and so on.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Loading Files                                                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The functions below load information from symbolic files into the Interlisp environment. A symbolic file contains a sequence of Interlisp expressions that can be evaluated to establish specified typed definitions. The expressions on symbolic files are read using <span class="s11">FILERDTBL </span>as the read table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The loading functions all have an argument <span class="s16">LDFLG</span>. <span class="s16">LDFLG </span>affects the operation of <span class="s11">DEFINE</span>, <span class="s11">DEFINEQ</span>, <span class="s11">RPAQ</span>, <span class="s11">RPAQ?</span>, and <span class="s11">RPAQQ</span>. While a source file is being loaded, <span class="s11">DFNFLG </span>(Chapter 10) is rebound to <span class="s16">LDFLG</span>. Thus, if <span class="s16">LDFLG </span><span class="s11">= NIL</span>, and a function is redefined, a message is printed and the old definition saved. If <span class="s16">LDFLG </span><span class="s11">= T </span>, the old definition is simply overwritten. If <span class="s16">LDFLG </span><span class="s11">= PROP</span>, the functions are stored as &quot;saved&quot; definitions on the property lists under the property <span class="s11">EXPR </span>instead of being installed as the active definitions. If <span class="s16">LDFLG </span><span class="s11">= ALLPROP</span>, not only function definitions but also variables set by <span class="s11">RPAQQ</span>, <span class="s11">RPAQ</span>, <span class="s11">RPAQ? </span>are stored on property lists (except when the variable has the value <span class="s11">NOBIND</span>, in which case they are set to the indicated value regardless of <span class="s11">DFNFLG</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Another option is available for loading systems for others to use and who wish to suppress the saving of information used to aid in development and debugging. If <span class="s16">LDFLG </span><span class="s11">= SYSLOAD</span>, <span class="s11">LOAD </span>will:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l35"><li><p style="padding-top: 5pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">Rebind <span class="s11">DFNFLG </span>to <span class="s11">T</span>, so old definitions are simply overwritten</p></li><li><p style="padding-top: 6pt;padding-left: 66pt;text-indent: -12pt;text-align: left;">Rebind <span class="s11">LISPXHIST </span>to <span class="s11">NIL</span>, thereby making the <span class="s11">LOAD </span>not be undoable and eliminating the cost of saving undo information (Chapter 13)</p></li><li><p style="padding-top: 6pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">Rebind <span class="s11">ADDSPELLFLG </span>to <span class="s11">NIL</span>, to suppress adding to spelling lists</p></li><li><p style="padding-top: 6pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">Rebind <span class="s11">FILEPKGFLG </span>to <span class="s11">NIL</span>, to prevent the file from being &quot;noticed&quot; by the file manager</p></li><li><p style="padding-top: 6pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">Rebind <span class="s11">BUILDMAPFLG </span>to <span class="s11">NIL</span>, to prevent a file map from being constructed</p></li><li><p style="padding-top: 6pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">After the load has completed, set the filecoms variable and any filevars variables to</p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">NOBIND</p></li><li><p style="padding-top: 6pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">Add the file name to <span class="s11">SYSFILES </span>rather than <span class="s11">FILELST</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;"><span class="p">A filevars variable is any variable appearing in a file manager command of the form </span>(<i>FILECOM </i>* <i>VARIABLE</i>) <span class="p">(see the FileVars section). Therefore, if the filecoms includes </span>(FNS * FOOFNS)<span class="p">, </span>FOOFNS <span class="p">is set to </span>NOBIND<span class="p">. If you want the value of such a variable to be retained, even when the file is loaded with </span><i>LDFLG </i>= SYSLOAD<span class="p">, then you should replace the variable with an equivalent, </span><span class="s9">non-atomic </span><span class="p">expression, such as </span>(FNS * (PROGN FOOFNS))<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">All functions that have <span class="s16">LDFLG </span>as an argument perform spelling correction using <span class="s11">LOADOPTIONS </span>as a spelling list when <span class="s16">LDFLG </span>is not a member of <span class="s11">LOADOPTIONS</span>. <span class="s11">LOADOPTIONS </span>is initially <span class="s11">(NIL T PROP ALLPROP SYSLOAD)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>LOAD </b><i>FILE LDFLG PRINTFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Reads successive expressions from <span class="s16">FILE </span>(with <span class="s11">FILERDTBL </span>as read table) and evaluates each as it is read, until it reads either <span class="s11">NIL</span>, or the single atom <span class="s11">STOP</span>. Note that <span class="s11">LOAD </span>can be used to load both symbolic and compiled files. Returns <span class="s16">FILE </span>(full name).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">PRINTFLG </span><span class="s11">= T</span>, <span class="s11">LOAD </span>prints the value of each expression; otherwise it does not.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>LOAD? </b><i>FILE LDFLG PRINTFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">LOAD </span>except that it does not load <span class="s16">FILE </span>if it has already been loaded, in which case it returns <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">LOAD? </span>loads <span class="s16">FILE </span>except when the <i>same </i>version of the file has been loaded (either from the same place, or from a copy of it from a different place). Specifically, <span class="s11">LOAD? </span>considers that <span class="s16">FILE </span>has already been loaded if the full name of <span class="s16">FILE </span>is on <span class="s11">LOADEDFILELST </span>(see the Noticing Files section) or the date stored on the <span class="s11">FILEDATES </span>property of the root file name of <span class="s16">FILE </span>is the same as the <span class="s11">FILECREATED </span>expression on <span class="s16">FILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>LOADFNS </b><i>FNS FILE LDFLG VARS</i>) <span class="p">[Function]</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Permits selective loading of definitions. <span class="s16">FNS </span>is a list of function names, a single function name, or <span class="s11">T</span>, meaning to load all of the functions on the file. <span class="s16">FILE </span>can be either a compiled</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">or symbolic file. If a compiled definition is loaded, so are all compiler-generated subfunctions.  The interpretation of <span class="s16">LDFLG </span>is the same as for <span class="s11">LOAD</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FILE </span><span class="s11">= NIL</span>, <span class="s11">LOADFNS </span>will use <span class="s11">WHEREIS </span>(see the Storing Files section) to determine where the first function in <span class="s16">FNS </span>resides, and load from that file. Note that the file must previously have been &quot;noticed&quot;. If <span class="s11">WHEREIS </span>returns <span class="s11">NIL</span>, and the <span class="s11">WHEREIS </span>library package has been loaded, <span class="s11">LOADFNS </span>will use the <span class="s11">WHEREIS </span>data base to find the file containing <span class="s16">FN</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">VARS </span>specifies which non-<span class="s11">DEFINEQ </span>expressions are to be loaded (i.e., evaluated). It is interpreted as follows:</p><p style="padding-top: 7pt;padding-left: 204pt;text-indent: 0pt;text-align: left;"><span class="s15">T </span>Means to load all non-<span class="s11">DEFINEQ </span>expressions.</p><p style="padding-top: 7pt;padding-left: 193pt;text-indent: 0pt;text-align: left;"><span class="s15">NIL </span>Means to load none of the non-<span class="s11">DEFINEQ </span>expressions.</p><p style="padding-top: 8pt;padding-left: 216pt;text-indent: -27pt;text-align: justify;"><span class="s15">VARS </span>Means to evaluate all variable assignment expressions (beginning with <span class="s11">RPAQ</span>, <span class="s11">RPAQQ</span>, or <span class="s11">RPAQ?</span>, see the Functions Used Within Source Files section).</p><p style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Any other symbol   Means the same as specifying a list containing that atom.</p><p style="padding-top: 6pt;padding-left: 216pt;text-indent: -27pt;line-height: 94%;text-align: justify;">A list If <span class="s16">VARS </span>is a list that is not a valid function definition, each element in <span class="s16">VARS </span>is &quot;matched&quot; against each non-<span class="s11">DEFINEQ </span>expression, and if any elements in <span class="s16">VARS </span>&quot;match&quot; successfully, the expression is evaluated. &quot;Matching&quot; is defined as follows: If an element of <span class="s16">VARS </span>is an atom, it matches an expression if it is <span class="s11">EQ </span>to either the <span class="s11">CAR </span>or the <span class="s11">CADR </span>of the expression. If an element of <span class="s16">VARS </span>is a list, it is treated as an edit pattern (see Chapter 16), and matched with the entire expression (using <span class="s11">EDIT4E</span>, described in Chapter 16). For example, if <span class="s16">VARS </span>was <span class="s11">(FOOCOMS DECLARE: (DEFLIST &amp; (QUOTE MACRO)))</span>,</p><p style="padding-left: 216pt;text-indent: 0pt;text-align: justify;">this would cause <span class="s11">(RPAQQ FOOCOMS ...)</span>, all <span class="s11">DECLARE:</span>s, and all <span class="s11">DEFLIST</span>s which set up <span class="s11">MACRO</span>s to be read and evaluated.</p><p style="padding-top: 6pt;padding-left: 216pt;text-indent: -89pt;line-height: 93%;text-align: justify;">A function definition If <span class="s16">VARS </span>is a list and a valid function definition <span class="s11">((FNTYP </span><span class="s16">VARS</span><span class="s11">) </span>is true), then <span class="s11">LOADFNS </span>will invoke that function on every non-<span class="s11">DEFINEQ </span>expression being considered, applying it to two arguments, the first and second elements in the expression. If the function returns <span class="s11">NIL</span>, the expression will be skipped; if it returns a non-<span class="s11">NIL </span>symbol (e.g., <span class="s11">T</span>), the expression will be evaluated; and if it returns a list, this list is evaluated instead of the expression. The file pointer is set to the very beginning of the expression before calling the <span class="s16">VARS </span>function definition, so it may read the entire expression if necessary. If the function returns a symbol, the file pointer is reset and the expression is <span class="s11">READ </span>or <span class="s11">SKREAD</span>. However, the file pointer is not reset when the function returns a list, so the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 168pt;text-indent: 0pt;line-height: 91%;text-align: left;">function must leave it set immediately after the expression that it has presumably read.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">LOADFNS <span class="p">returns a list of:</span></p><ol id="l36"><li><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -12pt;text-align: left;">The names of the functions that were found</p></li><li><p style="padding-top: 5pt;padding-left: 125pt;text-indent: -12pt;line-height: 107%;text-align: left;">A list of those functions not found (if any) headed by the symbol <span class="s11">NOT- FOUND:</span></p></li><li><p style="padding-top: 5pt;padding-left: 126pt;text-indent: -12pt;text-align: left;">All of the expressions that were evaluated</p></li><li><p style="padding-top: 6pt;padding-left: 125pt;text-indent: -12pt;text-align: left;">A list of those members of <span class="s16">VARS </span>for which no corresponding expressions were found (if any), again headed by the symbol <span class="s11">NOT-FOUND:</span></p></li></ol></li></ol></li></ol></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example:</p><p class="s11" style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s19"></span><span class="s21"> </span>(LOADFNS ’(FOO FIE FUM) <i>FILE </i>NIL ’(BAZ (DEFLIST &amp;))) (FOO FIE (NOT-FOUND: FUM) (RPAQ BAZ ...) (NOT-FOUND: (DEFLIST &amp;)))</p><p class="s11" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>LOADVARS </b><i>VARS FILE LDFLG</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;"><span class="p">Same as </span>(LOADFNS NIL <i>FILE LDFLG VARS</i>)<span class="p">.</span></p><p class="s11" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>LOADFROM </b><i>FILE FNS LDFLG</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;"><span class="p">Same as </span>(LOADFNS <i>FNS FILE LDFLG </i>T)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Once the file manager has noticed a file, you can edit functions contained in the file without explicitly loading them. Similarly, those functions which have not been modified do not have to be loaded in order to write out an updated version of the file. Files are normally noticed (i.e., their contents become known to the file manager) when either the symbolic or compiled versions of the file are loaded. If the file is <i>not </i>going to be loaded completely, the preferred way to notice it is with <span class="s11">LOADFROM</span>. You can also load some functions at the same time by giving <span class="s11">LOADFROM </span>a second argument, but it is normally used simply to inform the file manager about the existence and contents of a particular file.</p><p class="s11" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>LOADBLOCK </b><i>FN FILE LDFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Calls <span class="s11">LOADFNS </span>on those functions contained in the block declaration containing <span class="s16">FN </span>(see Chapter 18). <span class="s11">LOADBLOCK </span>is designed primarily for use with symbolic files, to load the <span class="s11">EXPR</span>s for a given block. It will not load a function which already has an in-core <span class="s11">EXPR </span>definition, and it will not load the block name, unless it is also one of the block functions.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>LOADCOMP </b><i>FILE LDFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Performs all operations on <span class="s16">FILE </span>associated with compilation, i.e. evaluates all expressions under a <span class="s11">DECLARE: EVAL@COMPILE</span>, and &quot;notices&quot; the function and variable names by adding them to the lists <span class="s11">NOFIXFNSLST </span>and <span class="s11">NOFIXVARSLST </span>(see Chapter 21).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Thus, if building a system composed of many files with compilation information scattered among them, all that is required to compile one file is to <span class="s11">LOADCOMP </span>the others.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>LOADCOMP? </b><i>FILE LDFLG</i>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Similar to <span class="s11">LOADCOMP</span>, except it does not load if file has already been loaded (with</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">LOADCOMP<span class="p">), in which case its value is </span>NIL<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">LOADCOMP? <span class="p">will load the file even if it has been loaded with </span>LOAD<span class="p">, </span>LOADFNS<span class="p">, etc. The only time it will not load the file is if the file has already been loaded with </span>LOADCOMP<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">FILESLOAD <span class="p">provides an easy way for you to load a series of files, setting various options:</span></p><p class="s11" style="padding-top: 9pt;padding-left: 126pt;text-indent: -24pt;text-align: left;">(<b>FILESLOAD </b><i>FILE</i><i>1 </i>... <i>FILE</i><i>N</i>) <span class="p">[NLambda NoSpread Function]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">Loads the files </span>FILE<span class="s18">1 </span><span class="s11">... </span>FILE<span class="s18">N </span><span class="p">(all arguments unevaluated). If any of these arguments are lists, they specify certain loading options for all following files (unless changed by another list).  Within these lists, the following commands are recognized:</span></p><p style="padding-top: 7pt;padding-left: 234pt;text-indent: -52pt;line-height: 93%;text-align: justify;"><span class="s15">FROM </span><span class="s42">DIR </span>Search the specified directories for the file. <span class="s16">DIR </span>can either be a single directory, or a list of directories to search in order. For example, <span class="s11">(FILESLOAD (FROM</span></p><p class="s11" style="padding-left: 234pt;text-indent: 0pt;line-height: 94%;text-align: justify;">{ERIS}&lt;LISPCORE&gt;SOURCES&gt;) ...) <span class="p">will search the directory </span>{ERIS}&lt;LISPCORE&gt;SOURCES&gt; <span class="p">for the files. If this is not specified, the default is to search the contents of </span>DIRECTORIES <span class="p">(see Chapter 24).</span></p><p style="padding-top: 7pt;padding-left: 234pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s11">FROM </span>is followed by the key word <span class="s11">VALUEOF</span>, the following word is evaluated, and the value is used as the list of directories to search. For example, <span class="s11">(FILESLOAD (FROM VALUEOF FOO) ...) </span>will search the directory list that is the value of the variable <span class="s11">FOO</span>.</p><p style="padding-top: 7pt;padding-left: 234pt;text-indent: 0pt;line-height: 94%;text-align: justify;">As a special case, if <span class="s16">DIR </span>is a symbol, and the symbol <span class="s16">DIR</span><span class="s11">DIRECTORIES </span>is bound, the value of this variable is used as the directory search list. For example, since the variable <span class="s11">LISPUSERSDIRECTORIES </span>(see Chapter 24) is commonly used to contain a list of directories containing &quot;library&quot; packages, <span class="s11">(FILESLOAD (FROM LISPUSERS)</span></p><p class="s11" style="padding-left: 234pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">...) <span class="p">can be used instead of </span>(FILESLOAD (FROM</p><p class="s11" style="padding-left: 234pt;text-indent: 0pt;text-align: justify;">VALUEOF LISPUSERSDIRECTORIES) ...)</p><p style="padding-top: 6pt;padding-left: 234pt;text-indent: 0pt;text-align: justify;">If a <span class="s11">FILESLOAD </span>is read and evaluated while loading a file, and it doesn’t contain a <span class="s11">FROM </span>expression, the default is to search the directory containing the <span class="s11">FILESLOAD </span>expression before the value of <span class="s11">DIRECTORIES</span>. <span class="s11">FILESLOAD </span>expressions can be dumped on files using the <span class="s11">FILES </span>file manager command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 5pt;padding-left: 186pt;text-indent: -44pt;text-align: left;">SOURCE <span class="p">Load the source version of the file rather than the compiled version.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 130pt;text-indent: 0pt;text-align: left;">COMPILED <span class="p">Load the compiled version of the file.</span></p><p style="padding-top: 7pt;padding-left: 186pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s11">COMPILED </span>is specified, the compiled version will be loaded, if it is found. The source will not be loaded. If neither <span class="s11">SOURCE </span>or <span class="s11">COMPILED </span>is specified, the compiled version of the file will be loaded if it is found, otherwise the source will be loaded if it is found.</p><p style="padding-top: 7pt;padding-left: 186pt;text-indent: -33pt;text-align: justify;"><span class="s15">LOAD </span>Load the file by calling <span class="s11">LOAD</span>, if it has not already been loaded. This is the default unless <span class="s11">LOADCOMP </span>or <span class="s11">LOADFROM </span>is specified.</p><p style="padding-top: 7pt;padding-left: 186pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s11">LOAD </span>is specified, <span class="s11">FILESLOAD </span>considers that the file has already been loaded if the root name of the file has a non-<span class="s11">NIL FILEDATES </span>property. This is a somewhat different algorithm than <span class="s11">LOAD? </span>uses. In particular, <span class="s11">FILESLOAD </span>will not load a newer version of a file that has already been loaded.</p><p style="padding-top: 8pt;padding-left: 186pt;text-indent: -55pt;text-align: justify;"><span class="s15">LOADCOMP </span>Load the file with <span class="s11">LOADCOMP? </span>rather than <span class="s11">LOAD</span>. Automatically implies <span class="s11">SOURCE</span>.</p><p style="padding-top: 7pt;padding-left: 130pt;text-indent: 0pt;text-align: left;"><span class="s15">LOADFROM </span>Load the file with <span class="s11">LOADFROM </span>rather than <span class="s11">LOAD</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 28pt;text-indent: 0pt;line-height: 10pt;text-align: right;">NIL<span class="s11">, </span>T<span class="s11">, </span>PROP</p><p class="s15" style="padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">ALLPROP</p><p style="padding-left: 186pt;text-indent: -49pt;text-align: justify;"><span class="s15">SYSLOAD </span>The loading function is called with its <span class="s16">LDFLG </span>argument set to the specified token. <span class="s16">LDFLG </span>affects the operation of the loading functions by resetting <span class="s11">DFNFLG </span>(see Chapter 10) to <span class="s16">LDFLG </span>during the loading. If none of these tokens are specified, the value of the variable <span class="s11">LDFLG </span>is used if it is bound, otherwise <span class="s11">NIL </span>is used.</p><p style="padding-top: 8pt;padding-left: 186pt;text-indent: -49pt;text-align: justify;"><span class="s15">NOERROR </span>If <span class="s11">NOERROR </span>is specified, no error occurs when a file is not found.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Each list determines how all further files in the lists are loaded, unless changed by another list. The tokens above can be joined together in a single list. For example,</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 108%;text-align: left;">(FILESLOAD (LOADCOMP) NET (SYSLOAD FROM VALUEOF NEWDIRECTORIES) CJSYS)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">will call <span class="s11">LOADCOMP? </span>to load the file <span class="s11">NET </span>searching the value of <span class="s11">DIRECTORIES</span>, and then call <span class="s11">LOADCOMP? </span>to load the file <span class="s11">CJSYS </span>with <span class="s16">LDFLG </span>set to <span class="s11">SYSLOAD</span>, searching the directory list that is the value of the variable <span class="s11">NEWDIRECTORIES</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">FILESLOAD <span class="p">expressions can be dumped on files using the </span>FILES <span class="p">file manager command.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Storing Files                                                                                                                                              </h4><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>MAKEFILE </b><i>FILE OPTIONS REPRINTFNS SOURCEFILE</i>)                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Makes a new version of the file <span class="s16">FILE</span>, storing the information specified by <span class="s16">FILE</span>’s filecoms. Notices <span class="s16">FILE </span>if not previously noticed. Then, it adds <span class="s16">FILE </span>to <span class="s11">NOTLISTEDFILES </span>and <span class="s11">NOTCOMPILEDFILES</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">OPTIONS </span>is a symbol or list of symbols which specify options. By specifying certain options, <span class="s11">MAKEFILE </span>can automatically compile or list <span class="s16">FILE</span>. Note that if <span class="s16">FILE </span>does not contain any function definitions, it is not compiled even when <span class="s16">OPTIONS </span>specifies <span class="s11">C </span>or <span class="s11">RC</span>. The options are spelling corrected using the list <span class="s11">MAKEFILEOPTIONS</span>. If spelling correction fails, <span class="s11">MAKEFILE </span>generates an error.  The options are interpreted as follows:</p><p class="s15" style="padding-top: 10pt;text-indent: 0pt;line-height: 10pt;text-align: center;">C</p><p style="padding-left: 216pt;text-indent: -22pt;line-height: 94%;text-align: justify;"><span class="s15">RC </span>After making <span class="s16">FILE</span>, <span class="s11">MAKEFILE </span>will compile <span class="s16">FILE </span>by calling <span class="s11">TCOMPL </span>(if <span class="s11">C </span>is specified) or <span class="s11">RECOMPILE </span>(if <span class="s11">RC </span>is specified). If there are any block declarations specified in the filecoms for <span class="s16">FILE</span>, <span class="s11">BCOMPL </span>or <span class="s11">BRECOMPILE </span>will be called instead.</p><p style="padding-top: 7pt;padding-left: 216pt;text-indent: 0pt;text-align: justify;">If <span class="s11">F</span>, <span class="s11">ST</span>, <span class="s11">STF</span>, or <span class="s11">S </span>is the <i>next </i>item on <span class="s16">OPTIONS </span>following <span class="s11">C </span>or <span class="s11">RC</span>, it is given to the compiler as the answer to the compiler’s question <span class="s11">LISTING? </span>(see Chapter 18). For example, <span class="s11">(MAKEFILE ’FOO ’(C F LIST)) </span>will dump <span class="s11">FOO</span>, then <span class="s11">TCOMPL </span>or <span class="s11">BCOMPL </span>it specifying that functions are not to be redefined, and finally list the file.</p><p style="padding-top: 7pt;padding-left: 216pt;text-indent: -33pt;line-height: 106%;text-align: left;"><span class="s15">LIST </span>After making <span class="s16">FILE</span>, <span class="s11">MAKEFILE </span>calls <span class="s11">LISTFILES </span>to print a hardcopy listing of <i>FILE</i><span class="s10">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;"><b>CLISPIFY </b>MAKEFILE <span class="p">calls </span>PRETTYDEF <span class="p">with </span>CLISPIFYPRETTYFLG =</p><p class="s11" style="padding-left: 216pt;text-indent: 0pt;text-align: justify;">T <span class="p">(see Chapter 21). This causes </span>CLISPIFY <span class="p">to be called on each function defined as an </span>EXPR <span class="p">before it is prettyprinted.</span></p><p style="padding-top: 7pt;padding-left: 216pt;text-indent: 0pt;text-align: justify;">Alternatively, if <span class="s16">FILE </span>has the property <span class="s11">FILETYPE </span>with value <span class="s11">CLISP </span>or a list containing <span class="s11">CLISP</span>, <span class="s11">PRETTYDEF </span>is called with <span class="s11">CLISPIFYPRETTYFLG </span>reset to <span class="s11">CHANGES</span>, which will cause <span class="s11">CLISPIFY </span>to be called on all functions marked as having been changed. If <span class="s16">FILE </span>has property <span class="s11">FILETYPE </span>with value <span class="s11">CLISP</span>, the compiler will <span class="s11">DWIMIFY </span>its functions before compiling them (see Chapter 18).</p><p class="s11" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;"><b>FAST </b>MAKEFILE <span class="p">calls </span>PRETTYDEF <span class="p">with </span>PRETTYFLG = NIL <span class="p">(see</span></p><p style="padding-left: 216pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Chapter 26). This causes data objects to be printed rather than prettyprinted, which is much faster.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 167pt;text-indent: -44pt;line-height: 92%;text-align: justify;"><span class="s15">REMAKE </span><span class="s11">MAKEFILE </span>&quot;remakes&quot; <span class="s16">FILE</span>: The prettyprinted definitions of functions that have not changed are copied from an earlier version of the symbolic file. Only those functions that have changed are prettyprinted.</p><p style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><span class="s15">NEW  </span><span class="s11">MAKEFILE </span>does <i>not </i>remake <span class="s16">FILE</span>.   If <span class="s11">MAKEFILEREMAKEFLG</span></p><p class="s11" style="padding-left: 167pt;text-indent: 0pt;text-align: justify;">= T <span class="p">(the initial setting), the default for all calls to </span>MAKEFILE <span class="p">is to remake. The </span>NEW <span class="p">option can be used to override this default.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 167pt;text-indent: 0pt;text-align: justify;">REPRINTFNS <span class="p">and </span>SOURCEFILE <span class="p">are used when remaking a file.</span></p><p style="padding-top: 6pt;padding-left: 167pt;text-indent: 0pt;text-align: justify;"><span class="s16">FILE </span>is not added to <span class="s11">NOTLISTEDFILES </span>if <span class="s16">FILE </span>has on its property list the property <span class="s11">FILETYPE </span>with value <span class="s11">DON’TLIST</span>, or a list containing <span class="s11">DON’TLIST</span>. <span class="s16">FILE </span>is not added to <span class="s11">NOTCOMPILEDFILES </span>if <span class="s16">FILE </span>has on its property list the property <span class="s11">FILETYPE </span>with value <span class="s11">DON’TCOMPILE</span>, or a list containing <span class="s11">DON’TCOMPILE</span>. Also, if <span class="s16">FILE </span>does not contain any function definitions, it is not added to <span class="s11">NOTCOMPILEDFILES</span>, and it is not compiled even when <span class="s16">OPTIONS </span>specifies <span class="s11">C </span>or <span class="s11">RC</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">If a remake is <i>not </i>being performed, <span class="s11">MAKEFILE </span>checks the state of <span class="s16">FILE </span>to make sure that the entire source file was actually <span class="s11">LOAD</span>ed. If <span class="s16">FILE </span>was loaded as a compiled file, <span class="s11">MAKEFILE </span>prints the message <span class="s11">CAN’T DUMP: ONLY THE COMPILED FILE HAS BEEN LOADED</span>.</p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">Similarly, if only some of the symbolic definitions were loaded via <span class="s11">LOADFNS </span>or <span class="s11">LOADFROM</span>, <span class="s11">MAKEFILE </span>prints <span class="s11">CAN’T DUMP: ONLY SOME OF ITS SYMBOLICS HAVE BEEN LOADED</span>.</p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">In both cases, <span class="s11">MAKEFILE </span>will then ask you if it should dump anyway; if you decline,</p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">MAKEFILE <span class="p">does not call </span>PRETTYDEF<span class="p">, but simply returns </span>(<i>FILE </i>NOT DUMPED) <span class="p">as its value.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: justify;">You can indicate that <span class="s16">FILE </span>must be block compiled together with other files as a unit by putting a list of those files on the property list of each file under the property <span class="s11">FILEGROUP</span>. If <span class="s16">FILE </span>has  a  <span class="s11">FILEGROUP </span>property,  the  compiler  will  not  be  called  until  all  files  on  this property have been dumped that need to be.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 65pt;text-indent: 0pt;text-align: justify;">MAKEFILE <span class="p">operates by rebinding </span>PRETTYFLG<span class="p">, </span>PRETTYTRANFLG<span class="p">, and </span>CLISPIFYPRETTYFLG<span class="p">, evaluating each expression on </span>MAKEFILEFORMS <span class="p">(under errorset protection), and then calling </span>PRETTYDEF<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 65pt;text-indent: 0pt;line-height: 94%;text-align: justify;">PRETTYDEF <span class="p">calls </span>PRETTYPRINT <span class="p">with its second argument </span><i>PRETTYDEFLG </i>= T<span class="p">, so whenever </span>PRETTYPRINT <span class="p">(and hence </span>MAKEFILE<span class="p">) start printing a new function, the name of that function is printed if more than 30 seconds (real time) have elapsed since the last time it printed the name of a function.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>MAKEFILES </b><i>OPTIONS FILES</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Performs <span class="s11">(MAKEFILE </span><span class="s16">FILE OPTIONS</span><span class="s11">) </span>for each file on <span class="s16">FILES </span>that needs to be dumped. If <span class="s16">FILES </span><span class="s11">= NIL</span>, <span class="s11">FILELST </span>is used. For example, <span class="s11">(MAKEFILES ’LIST) </span>will make and list all files that have been changed. In this case, if any typed definitions for any items have been defined or changed and they are <i>not </i>contained in one of the files on <span class="s11">FILELST</span>, <span class="s11">MAKEFILES </span>calls <span class="s11">ADDTOFILES? </span>to allow you to specify where these go. <span class="s11">MAKEFILES </span>returns a list of all files that are made.</p><p class="s16" style="padding-top: 9pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>CLEANUP </b>FILE<span class="s18">1 </span>FILE<span class="s18">2 </span>... FILE<span class="s18">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Dumps, lists, and recompiles (with <span class="s11">RECOMPILE </span>or <span class="s11">BRECOMPILE</span>) any of the specified files (unevaluated) requiring the corresponding operation. If no files are specified, <span class="s11">FILELST </span>is used. <span class="s11">CLEANUP </span>returns <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">CLEANUP </span>uses the value of the variable <span class="s11">CLEANUPOPTIONS </span>as the <span class="s16">OPTIONS </span>argument to <span class="s11">MAKEFILE</span>. <span class="s11">CLEANUPOPTIONS </span>is initially <span class="s11">(RC)</span>, to indicate that the files should be recompiled. If <span class="s11">CLEANUPOPTIONS </span>is set to <span class="s11">(RC F)</span>, no listing will be performed, and no functions will be redefined as the result of compiling. Alternatively, if <span class="s16">FILE</span><span class="s18">1 </span>is a list, it will be interpreted as the list of options regardless of the value of <span class="s11">CLEANUPOPTIONS</span>.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FILES?</b>)                                                       <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Prints on the terminal the names of those files that have been modified but not dumped, dumped but not listed, dumped but not compiled, plus the names of any functions and other typed definitions (if any) that are not contained in any file. If there are any, <span class="s11">FILES? </span>then calls <span class="s11">ADDTOFILES? </span>to allow you to specify where these go.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>ADDTOFILES? </b><i>—</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Called from <span class="s11">MAKEFILES</span>, <span class="s11">CLEANUP</span>, and <span class="s11">FILES? </span>when there are typed definitions that have been marked as changed which do not belong to any file. <span class="s11">ADDTOFILES? </span>lists the names of the changed items, and asks if you want to specify where these items should be put. If you answer <span class="s11">N</span>(o), <span class="s11">ADDTOFILES? </span>returns <span class="s11">NIL </span>without taking any action. If you answer <span class="s11">]</span>, this is taken to be an answer to each question that would be asked, and all the changed items are marked as dummy items to be ignored. Otherwise, <span class="s11">ADDTOFILES? </span>prints the name of each changed item, and accepts one of the following responses:</p><p style="padding-top: 5pt;padding-left: 175pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">A file name</p><p style="padding-left: 234pt;text-indent: -46pt;line-height: 91%;text-align: justify;">A filevar If you give a file name or a variable whose value is a list (a filevar), the item is added to the corresponding file or list, using <span class="s11">ADDTOFILE</span>.</p><p style="padding-top: 7pt;padding-left: 234pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If your response is not the name of a file on <span class="s11">FILELST </span>or a variable whose value is a list, you will be asked whether it is a new file. If you say no, then <span class="s11">ADDTOFILES? </span>will check whether the item is the name of a list, i.e., whether its value is a list. If not, youwill be asked whether it is a new list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 151pt;text-indent: -12pt;line-height: 18pt;text-align: left;">line-feed Same as your previous response. space</p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 8pt;text-align: left;">carriage return Take no action.</p><p style="padding-top: 7pt;padding-left: 186pt;text-indent: -17pt;text-align: justify;"><span class="s15">] </span>The item is marked as a dummy item by adding it to <span class="s11">NILCOMS</span>. This tells the file manager simply to ignore this item.</p><p class="s15" style="padding-top: 8pt;padding-left: 186pt;text-indent: -17pt;line-height: 93%;text-align: justify;">[ <span class="p">The &quot;definition&quot; of the item in question is prettyprinted to the terminal, and then you are asked again about its disposition.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 185pt;text-indent: -17pt;line-height: 94%;text-align: justify;"><b>( </b>ADDTOFILES? <span class="p">prompts with &quot;</span>LISTNAME: (<span class="p">&quot;, you type in the name of a list, i.e. a variable whose value is a list, terminated by a </span>)<span class="p">. The item will then only be added to (under) a command in which the named list appears as a filevar. If none are found, a message is printed, and you are asked again. For example, you define a new function </span>FOO3<span class="p">. When asked where it goes, you type </span>(FOOFNS)<span class="p">. If the command </span>(FNS * FOOFNS) <span class="p">is found, </span>FOO3 <span class="p">will be added to the value of </span>FOOFNS<span class="p">. If instead you type </span>(FOOCOMS)<span class="p">, and the command </span>(COMS * FOOCOMS) <span class="p">is found, then </span>FOO3 <span class="p">will be added to a command for dumping functions that is contained in </span>FOOCOMS<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 185pt;text-indent: 0pt;line-height: 91%;text-align: left;">If the named list is not also the name of a file, you can simply type it in without parenthesis as described above.</p><p class="s11" style="padding-top: 6pt;padding-left: 185pt;text-indent: -17pt;line-height: 92%;text-align: justify;"><b>@ </b>ADDTOFILES? <span class="p">prompts with &quot;</span>Near: (<span class="p">&quot;, you type in the name of an object, and the item is then inserted in a command for dumping objects (of its type) that contains the indicated name. The item is inserted immediately after the indicated name.</span></p><p class="s16" style="padding-top: 10pt;padding-left: 77pt;text-indent: -24pt;text-align: left;"><span class="s11">(</span><b>LISTFILES </b>FILE<span class="s18">1 </span>FILE<span class="s18">2 </span>... FILE<span class="s18">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Lists each of the specified files (unevaluated). If no files are given, <span class="s11">NOTLISTEDFILES </span>is used. Each file listed is removed from <span class="s11">NOTLISTEDFILES </span>if the listing is completed. For each file not found, <span class="s11">LISTFILES </span>prints the message <span class="s16">FILENAME </span><span class="s11">NOT FOUND </span>and proceeds to the next file.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">LISTFILES <span class="p">calls the function </span>LISTFILES1 <span class="p">on each file to be listed. Normally, </span>LISTFILES1 <span class="p">is defined to simply call </span>SEND.FILE.TO.PRINTER <span class="p">(see Chapter 29), but you can advise or redefine </span>LISTFILES1 <span class="p">for more specialized applications.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Any lists inside the argument list to <span class="s11">LISTFILES </span>are interpreted as property lists that set the various printing options, such as the printer, number of copies, banner page name, etc (see see Chapter 29).  Later properties override earlier ones.  For example,</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(LISTFILES FOO (HOST JEDI) FUM (#COPIES 3) FIE)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">will cause one copy of <span class="s11">FOO </span>to be printed on the default printer, and one copy of <span class="s11">FUM </span>and three copies of <span class="s11">FIE </span>to be printed on the printer <span class="s11">JEDI</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>COMPILEFILES </b>FILE<span class="s18">1 </span>FILE<span class="s18">2 </span>... FILE<span class="s18">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Executes the <span class="s11">RC </span>and <span class="s11">C </span>options of <span class="s11">MAKEFILE </span>for each of the specified files (unevaluated). If no files are given, <span class="s11">NOTCOMPILEDFILES </span>is used. Each file compiled is removed from <span class="s11">NOTCOMPILEDFILES</span>. If <span class="s16">FILE</span><span class="s18">1 </span>is a list, it is interpreted as the <span class="s16">OPTIONS </span>argument to <span class="s11">MAKEFILES</span>. This feature can be used to supply an answer to the compiler’s <span class="s11">LISTING? </span>question, e.g., <span class="s11">(COMPILEFILES (STF)) </span>will compile each file on <span class="s11">NOTCOMPILEDFILES </span>so that the functions are redefined without the <span class="s11">EXPR</span>s definitions being saved.</p><p class="s11" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>WHEREIS </b><i>NAME TYPE FILES FN</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">TYPE </span>is a file manager type. <span class="s11">WHEREIS </span>sweeps through all the files on the list <span class="s16">FILES </span>and returns a list of all files containing <span class="s16">NAME </span>as a <span class="s16">TYPE</span>. <span class="s11">WHEREIS </span>knows about and expands all file manager commands and file manager macros. <span class="s16">TYPE </span><span class="s11">= NIL </span>defaults to <span class="s11">FNS </span>(to retrieve function definitions). If <span class="s16">FILES </span>is not a list, the value of <span class="s11">FILELST </span>is used.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FN </span>is given, it should be a function (with arguments <span class="s16">NAME</span>, <span class="s16">FILE</span>, and <span class="s16">TYPE</span>) which is applied for every file in <span class="s16">FILES </span>that contains <span class="s16">NAME </span>as a <span class="s16">TYPE</span>. In this case, <span class="s11">WHEREIS </span>returns <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If the <span class="s11">WHEREIS </span>library package has been loaded, <span class="s11">WHEREIS </span>is redefined so that <span class="s16">FILES </span><span class="s11">= T </span>means to use the whereis package data base, so <span class="s11">WHEREIS </span>will find <span class="s16">NAME </span>even if the file has not been loaded or noticed.  <span class="s16">FILES </span><span class="s11">= NIL </span>always means use <span class="s11">FILELST</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Remaking a Symbolic File                                                                                                                        </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Most of the time that a symbolic file is written using <span class="s11">MAKEFILE</span>, only a few of the functions that it contains have been changed since the last time the file was written. Rather than prettprinting all of the functions, it is often considerably faster to &quot;remake&quot; the file, copying the prettprinted definitions of unchanged functions from an earlier version of the symbolic file, and only prettyprinting those functions that have been changed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">MAKEFILE <span class="p">will remake the symbolic file if the </span>REMAKE <span class="p">option is specified. If the </span>NEW <span class="p">option is given, the file is not remade, and all of the functions are prettprinted. The default action is specified by the value of </span>MAKEFILEREMAKEFLG<span class="p">: if </span>T <span class="p">(its initial value), </span>MAKEFILE <span class="p">will remake files unless the </span>NEW <span class="p">option is given; if </span>NIL<span class="p">, </span>MAKEFILE <span class="p">will not remake unless the </span>REMAKE <span class="p">option is given.</span></p><p style="padding-top: 7pt;padding-left: 138pt;text-indent: -30pt;line-height: 94%;text-align: justify;">Note: If the file has never been loaded or dumped, for example if the filecoms were simply set up in memory, then <span class="s11">MAKEFILE </span>will never attempt to remake the file, regardless of the setting of <span class="s11">MAKEFILEREMAKEFLG</span>, or whether the <span class="s11">REMAKE </span>option was specified.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">When <span class="s11">MAKEFILE </span>is remaking a symbolic file, you can explicitly indicate the functions which are to be prettyprinted and the file to be used for copying the rest of the function definitions from via the <span class="s16">REPRINTFNS </span>and <span class="s16">SOURCEFILE </span>arguments to <span class="s11">MAKEFILE</span>. Normally, both of these arguments are defaulted to <span class="s11">NIL</span>. In this case, <span class="s16">REPRINTFNS </span>will be set to those functions that have been changed since the last version of the file was written. For <span class="s16">SOURCEFILE</span>, <span class="s11">MAKEFILE </span>obtains the full name of the most recent version of the file (that it knows about) from the <span class="s11">FILEDATES </span>property of the file, and checks to make sure that the file still exists and has the same file date as that stored on the <span class="s11">FILEDATES </span>property. If it does, <span class="s11">MAKEFILE </span>uses that file as <span class="s16">SOURCEFILE</span>. This procedure permits you to <span class="s11">LOAD </span>or <span class="s11">LOADFROM </span>a file in a different directory, and still be able to remake the file with <span class="s11">MAKEFILE</span>. In the case where the most recent version of the file cannot be found, <span class="s11">MAKEFILE </span>will attempt to remake using the <i>original </i>version of the file (i.e., the one first loaded), specifying as <span class="s16">REPRINTFNS </span>the union of all changes that have been made since the file was first loaded, which is obtained from the <span class="s11">FILECHANGES </span>property of the file. If both of these fail, <span class="s11">MAKEFILE </span>prints the message &quot;<span class="s11">CAN’T FIND</span></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">EITHER THE PREVIOUS VERSION OR THE ORIGINAL VERSION OF <i>FILE</i>, SO IT WILL</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">HAVE TO BE WRITTEN ANEW<span class="p">&quot;, and does not remake the file, i.e. will prettyprint all of the functions.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">When a remake is specified, <span class="s11">MAKEFILE </span>also checks to see how the file was originally loaded. If the file was originally loaded as a compiled file, <span class="s11">MAKEFILE </span>will call <span class="s11">LOADVARS </span>to obtain those <span class="s11">DECLARE: </span>expressions that are contained on the symbolic file, but not the compiled file, and hence have not been loaded. If the file was loaded by <span class="s11">LOADFNS </span>(but not <span class="s11">LOADFROM</span>), then <span class="s11">LOADVARS </span>is called to obtain any non-<span class="s11">DEFINEQ </span>expressions. Before calling <span class="s11">LOADVARS </span>to re-load definitions, <span class="s11">MAKEFILE </span>asks you,</p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">e.g. &quot;<span class="s11">Only the compiled version of FOO was loaded, do you want to LOADVARS the (DECLARE: .. DONTCOPY ..) expressions from {DSK}&lt;MYDIR&gt;FOO.;3?&quot;</span>. You can respond <span class="s11">Yes </span>to execute the <span class="s11">LOADVARS </span>and continue the <span class="s11">MAKEFILE</span>, <span class="s11">No </span>to proceed with the <span class="s11">MAKEFILE </span>without performing the <span class="s11">LOADVARS</span>, or <span class="s11">Abort </span>to abort the <span class="s11">MAKEFILE</span>. You may wish to skip the <span class="s11">LOADVARS </span>if you had circumvented the file manager in some way, and loading the old definitions would overwrite new ones.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Remaking a symbolic file is considerably faster if the earlier version has a <i>file map </i>indicating where the function definitions are located (see the File Maps section), but it does not depend on this information.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Loading Files in a Distributed Environment                                                                                           </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Each Interlisp source and compiled code file contains the full filename of the file, including the host and directory names, in a <span class="s11">FILECREATED </span>expression at the beginning of the file. The compiled code file also contains the full file name of the source file it was created from. In earlier versions of Interlisp, the file manager used this information to locate the appropriate source file when &quot;remaking&quot; or recompiling a file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This turned out to be a bad feature in distributed environments, where users frequently move files from one place to another, or where files are stored on removable media. For example, suppose you <span class="s11">MAKEFILE </span>to a floppy, and then copy the file to a file server. If you loaded and edited the file from a file server, and tried to do <span class="s11">MAKEFILE</span>, it would try to locate the source file on the floppy, which is probably no longer loaded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Currently, the file manager searches for sources file on the connected directory, and on the directory search path (on the variable <span class="s11">DIRECTORIES</span>). If it is not found, the host / directory information from the <span class="s11">FILECREATED </span>expression be used.</p><p style="padding-top: 7pt;padding-left: 150pt;text-indent: -42pt;line-height: 94%;text-align: justify;">Warning: One situation where the new algorithm does the wrong thing is if you explicitly <span class="s11">LOADFROM </span>a file that is not on your directory search path. Future <span class="s11">MAKEFILE</span>s and <span class="s11">CLEANUP</span>s will search the connected directory and <span class="s11">DIRECTORIES </span>to find the source file, rather than using the file that the <span class="s11">LOADFROM </span>was done from. Even if the correct file is on the directory search path, you could still create a bad file if there is another version of the file in an earlier directory on the search path. In general, you should either explicitly specify the <span class="s16">SOURCEFILE </span>argument to <span class="s11">MAKEFILE </span>to tell it where to get the old source, or connect to the directory where the correct source file is.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Marking Changes                                                                                                                                      </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The file manager needs to know what typed definitions have been changed, so it can determine which files need to be updated. This is done by &quot;marking changes&quot;. All the system functions that perform file manager operations (<span class="s11">LOAD</span>, <span class="s11">TCOMPL</span>, <span class="s11">PRETTYDEF</span>, etc.), as well as those functions that define or change data, (<span class="s11">EDITF</span>, <span class="s11">EDITV</span>, <span class="s11">EDITP</span>, DWIM corrections to user functions) interact with the file manager by marking changes. Also, <i>typed-in </i>assignment of variables or property values is noticed by the file manager. (If a program modifies a variable or property value, this is not noticed.) In some cases the marking procedure can be subtle, e.g. if you edit a property list using <span class="s11">EDITP</span>, only those properties whose values are actually changed (or added) are marked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The various system functions which create or modify objects call <span class="s11">MARKASCHANGED </span>to mark the object as changed. For example, when a function is defined via <span class="s11">DEFINE </span>or <span class="s11">DEFINEQ</span>, or modified via <span class="s11">EDITF</span>, or a <span class="s11">DWIM </span>correction, the function is marked as being a changed object of type <span class="s11">FNS</span>. Similarly, whenever a new record is declared, or an existing record redeclared or edited, it is marked as being a changed object of type <span class="s11">RECORDS</span>, and so on for all of the other file manager types.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">You can also call <span class="s11">MARKASCHANGED </span>directly to mark objects of a particular file manager type as changed:</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>MARKASCHANGED </b><i>NAME TYPE REASON</i>)                               <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Marks <span class="s16">NAME </span>of type <span class="s16">TYPE </span>as being changed. <span class="s11">MARKASCHANGED </span>returns <span class="s16">NAME</span>.</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">MARKASCHANGED <span class="p">is undoable.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="s16">REASON </span>is a symbol that indicated how <span class="s16">NAME </span>was changed. <span class="s11">MARKASCHANGED </span>recognizes the following values for <span class="s16">REASON</span>:</p><p style="padding-top: 6pt;padding-left: 184pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s15">DEFINED </span>Used to indicate the creation of <span class="s16">NAME</span>, e.g. from <span class="s11">DEFINEQ</span></p><p style="padding-left: 32pt;text-indent: 0pt;line-height: 12pt;text-align: center;">(Chapter 10).</p><p style="padding-top: 5pt;padding-left: 184pt;text-indent: 0pt;text-align: left;"><span class="s15">CHANGED </span>Used to indicate a change to <span class="s16">NAME</span>, e.g. from the editor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 136pt;text-indent: 0pt;text-align: left;"><span class="s15">DELETED </span>Used to indicate the deletion of <span class="s16">NAME</span>, e.g. by <span class="s11">DELDEF</span>.</p><p style="padding-top: 6pt;padding-left: 185pt;text-indent: -39pt;text-align: left;"><span class="s15">CLISP </span>Used to indicate the modification of <span class="s16">NAME </span>by CLISP translation.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For backwards compatibility, <span class="s11">MARKASCHANGED </span>also accepts a <span class="s16">REASON </span>of <span class="s11">T </span>(<span class="s11">=DEFINED</span>) and <span class="s11">NIL </span>(<span class="s11">=CHANGED</span>). New programs should avoid using these values.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The variable <span class="s11">MARKASCHANGEDFNS </span>is a list of functions that <span class="s11">MARKASCHANGED </span>calls (with arguments <span class="s16">NAME</span>, <span class="s16">TYPE</span>, and <span class="s16">REASON</span>). Functions can be added to this list to &quot;advise&quot; <span class="s11">MARKASCHANGED </span>to do additional work for all types of objects. The <span class="s11">WHENCHANGED </span>file manager type property (see the Defining New File Manager Types section) can be used to specify additional actions when <span class="s11">MARKASCHANGED </span>gets called on specific types of objects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>UNMARKASCHANGED </b><i>NAME TYPE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Unmarks <span class="s16">NAME </span>of type <span class="s16">TYPE </span>as being changed. Returns <span class="s16">NAME </span>if <span class="s16">NAME </span>was marked as changed and is now unmarked, <span class="s11">NIL </span>otherwise. <span class="s11">UNMARKASCHANGED </span>is undoable.</p><p class="s11" style="padding-top: 6pt;padding-left: 77pt;text-indent: -24pt;line-height: 17pt;text-align: justify;">(<b>FILEPKGCHANGES </b><i>TYPE LST</i>) <span class="p">[NoSpread Function] If </span><i>LST </i><span class="p">is not specified (as opposed to being </span>NIL<span class="p">), returns a list of those objects of type</span></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s16">TYPE </span>that have been marked as changed but not yet associated with their corresponding files (see the File Manager Types section). If <span class="s16">LST </span>is specified, <span class="s11">FILEPKGCHANGES </span>sets the corresponding list. <span class="s11">(FILEPKGCHANGES) </span>returns a list of <i>all </i>objects marked as changed as a list of elements of the form <span class="s11">(</span><span class="s16">TYPENAME </span><span class="s11">. </span><span class="s16">CHANGEDOBJECTS</span><span class="s11">)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Some properties (e.g. <span class="s11">EXPR</span>, <span class="s11">ADVICE</span>, <span class="s11">MACRO</span>, <span class="s11">I.S.OPR</span>, etc.) are used to implement other file manager types. For example, if you change the value of the property <span class="s11">I.S.OPR</span>, you are really changing an object of type <span class="s11">I.S.OPR</span>. The effect is the same as though you had redefined the i.s.opr via a direct call to the function <span class="s11">I.S.OPR</span>. If a property whose value has been changed or added does not correspond to a specific file manager type, then it is marked as a changed object of type <span class="s11">PROPS </span>whose <i>name </i>is <span class="s11">(</span><span class="s16">VARIABLENAME PROPNAME</span><span class="s11">) </span>(except if the property name has a property <span class="s11">PROPTYPE </span>with value <span class="s11">IGNORE</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Similarly, if you change a variable which implements the file manager type <span class="s11">ALISTS </span>(as indicated by the appearance of the property <span class="s11">VARTYPE </span>with value <span class="s11">ALIST </span>on the variable’s property list), only those entries that are actually changed are marked as being changed objects of type <span class="s11">ALISTS</span>. The &quot;name&quot; of the object will be <span class="s11">(</span><span class="s16">VARIABLENAME KEY</span><span class="s11">) </span>where <span class="s16">KEY </span>is <span class="s11">CAR </span>of the entry on the alist that is being marked. If the variable corresponds to a specific file manager type other than <span class="s11">ALISTS</span>, e.g., <span class="s11">USERMACROS</span>, <span class="s11">LISPXMACROS</span>, etc., then an object of that type is marked. In this case, the name of the changed object will be <span class="s11">CAR </span>of the corresponding entry on the alist. For example, if you edit <span class="s11">LISPXMACROS </span>and change a definition for <span class="s11">PL</span>, then the object <span class="s11">PL </span>of type <span class="s11">LISPXMACROS </span>is marked as being changed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Noticing Files                                                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Already existing files are &quot;noticed&quot; by <span class="s11">LOAD </span>or <span class="s11">LOADFROM </span>(or by <span class="s11">LOADFNS </span>or <span class="s11">LOADVARS </span>when the <span class="s16">VARS </span>argument is <span class="s11">T</span>. New files are noticed when they are constructed by <span class="s11">MAKEFILE</span>, or when definitions are first associated with them via <span class="s11">FILES? </span>or <span class="s11">ADDTOFILES?</span>. Noticing a file updates certain lists and properties so that the file manager functions know to include the file in their operations. For example, <span class="s11">CLEANUP </span>will only dump files that have been noticed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You can explicitly tell the file manager to notice a newly-created file by defining the filecoms for the file, and calling <span class="s11">ADDFILE</span>:</p><p class="s11" style="padding-top: 9pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">(<b>ADDFILE </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Tells the file manager that <i>FILE </i>should be recognized as a file; it adds <span class="s16">FILE </span>to <span class="s11">FILELST</span>, and also sets up the <span class="s11">FILE </span>property of <span class="s16">FILE </span>to reflect the current set of changes which are &quot;registered against&quot; <span class="s16">FILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The file manager uses information stored on the property list of the root name of noticed files. The following property names are used:</p><p class="s15" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">FILE <span class="p">[Property Name]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">When a file is noticed, the property <span class="s11">FILE</span>, value <span class="s11">((</span><span class="s16">FILECOMS </span><span class="s11">. </span><span class="s16">LOADTYPE</span><span class="s11">)) </span>is added to the property list of its root name. <span class="s16">FILECOMS </span>is the variable containing the filecoms of the file. <span class="s16">LOADTYPE </span>indicates <i>how </i>the file was loaded, e.g., completely loaded, only partially loaded as with <span class="s11">LOADFNS</span>, loaded as a compiled file, etc.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The property <span class="s11">FILE </span>is used to determine whether or not the corresponding file has been modified since the last time it was loaded or dumped. <span class="s11">CDR </span>of the <span class="s11">FILE </span>property records by type those items that have been changed since the last <span class="s11">MAKEFILE</span>. Whenever a file is dumped, these items are moved to the property <span class="s11">FILECHANGES</span>, and <span class="s11">CDR </span>of the <span class="s11">FILE </span>property is reset to <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 102pt;text-indent: 0pt;text-align: justify;">FILECHANGES <span class="p">[Property Name]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The property <span class="s11">FILECHANGES </span>contains a list of all changed items since the file was loaded (there may have been several sequences of editing and rewriting the file). When a file is dumped, the changes in <span class="s11">CDR </span>of the <span class="s11">FILE </span>property are added to the <span class="s11">FILECHANGES </span>property.</p><p class="s15" style="padding-top: 10pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">FILEDATES <span class="p">[Property Name]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The property <span class="s11">FILEDATES </span>contains a list of version numbers and corresponding file dates for this file. These version numbers and dates are used for various integrity checks in connection with <i>re</i>making a file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">FILEMAP <span class="p">[Property Name]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The property <span class="s11">FILEMAP </span>is used to store the filemap for the file. This is used to directly load individual functions from the middle of a file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">To compute the root name, <span class="s11">ROOTFILENAME </span>is applied to the name of the file as indicated in the <span class="s11">FILECREATED </span>expression appearing at the front of the file, since this name corresponds to the name the file was originally made under. The file manager detects that the file being noticed is a compiled file (regardless of its name), by the appearance of more than one <span class="s11">FILECREATED </span>expressions. In this case, each of the files mentioned in the following <span class="s11">FILECREATED </span>expressions are noticed. For example, if you perform <span class="s11">(BCOMPL ’(FOO FIE))</span>, and subsequently loads <span class="s11">FOO.DCOM</span>, both <span class="s11">FOO </span>and <span class="s11">FIE </span>will be noticed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">When a file is noticed, its root name is added to the list <span class="s11">FILELST</span>:</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">FILELST <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Contains a list of the root names of the files that have been noticed.</p><p class="s15" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">LOADEDFILELST <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Contains a list of the actual names of the files as loaded by <span class="s11">LOAD</span>, <span class="s11">LOADFNS</span>, etc. For example, if you perform <span class="s11">(LOAD ’&lt;NEWLISP&gt;EDITA.COM;3), EDITA </span>will be added to <span class="s11">FILELST</span>, but <span class="s11">&lt;NEWLISP&gt;EDITA.COM;3 </span>is added to <span class="s11">LOADEDFILELST</span>.</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">LOADEDFILELST <span class="p">is not used by the file manager; it is maintained solely for your benefit.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Distributing Change Information                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Periodically, the function <span class="s11">UPDATEFILES </span>is called to find which file(s) contain the elements that have been changed. <span class="s11">UPDATEFILES </span>is called by <span class="s11">FILES?</span>, <span class="s11">CLEANUP</span>, and <span class="s11">MAKEFILES</span>, i.e., any procedure that requires the <span class="s11">FILE </span>property to be up to date. This procedure is followed rather than updating the <span class="s11">FILE </span>property after each change because scanning <span class="s11">FILELST </span>and examining each file manager command can be a time-consuming process; this is not so noticeable when performed in conjunction with a large operation like loading or writing a file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">UPDATEFILES <span class="p">operates by scanning </span>FILELST <span class="p">and interrogating the file manager commands for each file. When (if) any files are found that contain the corresponding typed definition, the name of the element is added to the value of the property </span>FILE <span class="p">for the corresponding file. Thus, after </span>UPDATEFILES <span class="p">has completed operating, the files that need to be dumped are simply those files on </span>FILELST <span class="p">for which </span>CDR <span class="p">of their </span>FILE <span class="p">property is non-</span>NIL<span class="p">. For example, if you load the file </span>FOO <span class="p">containing definitions for </span>FOO1<span class="p">, </span>FOO2<span class="p">, and </span>FOO3<span class="p">, edit </span>FOO2<span class="p">, and then call </span>UPDATEFILES<span class="p">, </span>(GETPROP ’FOO ’FILE) <span class="p">will be </span>((FOOCOMS . T) (FNS FOO2))<span class="p">. If any objects marked as changed have not been transferred to the </span>FILE <span class="p">property for some file, e.g., you define a new function but forget (or declines) to add it to the file manager commands for the corresponding file, then both </span>FILES? <span class="p">and</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">CLEANUP <span class="p">will print warning messages, and then call </span>ADDTOFILES? <span class="p">to permit you to specify on which files these items belong.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: left;">You can also invoke <span class="s11">UPDATEFILES </span>directly:</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>UPDATEFILES </b><i>— —</i>)                                              <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(UPDATEFILES) <span class="p">will update the </span>FILE <span class="p">properties of the noticed files.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">File Manager Types                                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In addition to the definitions of functions and values of variables, source files in Interlisp can contain a variety of other information, e.g. property lists, record declarations, macro definitions, hash arrays, etc. In order to treat such a diverse assortment of data uniformly from the standpoint of file operations, the file manager uses the concept of a <i>typed definition</i>, of which a function definition is just one example. A typed definition associates with a name (usually a symbol), a definition of a given type (called the file manager type). Note that the same name may have several definitions of different types. For example, a symbol may have both a function definition and a variable definition. The file manager also keeps track of the file that a particular typed definition is stored on, so one can think of a typed definition as a relation between four elements: a name, a definition, a type, and a file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A file manager type is an abstract notion of a class of objects which share the property that every object of the same file manager type is stored, retrieved, edited, copied etc., by the file manager in the same way. Each file manager type is identified by a symbol, which can be given as an argument to the functions that manipulate typed definitions. You may define new file manager types, as described in the Defining New Package Types section.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">FILEPKGTYPES                                                   <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The value of <span class="s11">FILEPKGTYPES </span>is a list of all file manager types, including any that you may have defined.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The file manager is initialized with the following built-in file manager types:</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">ADVICE                                                  <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Used to access &quot;advice&quot; modifying a function (see Chapter 15).</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">ALISTS                                                  <span class="p">[File Manager Type]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Used to access objects stored on an association list that is the value of a symbol (see Chapter 3).</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A variable is declared to have an association list as its value by putting on its property list the property <span class="s11">VARTYPE </span>with value <span class="s11">ALIST</span>. In this case, each dotted pair on the list is an object of type <span class="s11">ALISTS</span>. When the value of such a variable is changed, only those entries in the association list that are actually changed or added are marked as changed objects of</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="p">type </span>ALISTS <span class="p">(with &quot;name&quot; </span>(SYMBOL <i>KEY</i>)<span class="p">). Objects of type </span>ALISTS <span class="p">are dumped via the</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">ALISTS <span class="p">or </span>ADDVARS <span class="p">file manager commands.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">Note that some association lists are used to &quot;implement&quot; other file manager types. For example, the value of the global variable </span>USERMACROS <span class="p">implements the file manager type </span>USERMACROS <span class="p">and the values of </span>LISPXMACROS <span class="p">and </span>LISPXHISTORYMACROS <span class="p">implement the file manager type </span>LISPXMACROS<span class="p">. This is indicated by putting on the property list of the variable the property </span>VARTYPE <span class="p">with value a list of the form </span>(ALIST <i>FILEPKGTYPE</i>)<span class="p">. For example, </span>(GETPROP ’LISPXHISTORYMACROS ’VARTYPE) =&gt; (ALIST LISPXMACROS)<span class="p">.</span></p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">COURIERPROGRAMS <span class="p">[File Manager Type]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Used to access Courier programs (see Chapter 31)<span class="s10">.</span></p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">EXPRESSIONS <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Used to access lisp expressions that are put on a file by using the <span class="s11">REMEMBER </span>programmers assistant command (Chapter 13), or by explicitly putting the <span class="s11">P </span>file manager command on the filecoms.</p><p class="s15" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">FIELDS <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Used to access fields of records. The &quot;definition&quot; of an object of type <span class="s11">FIELDS </span>is a list of all the record declarations which contain the name. See Chapter 8.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">FILEPKGCOMS <span class="p">[File Manager Type]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Used to access file manager commands and types. A single name can be defined both as a file manager type and a file manager command. The &quot;definition&quot; of an object of type <span class="s11">FILEPKGCOMS </span>is a list structure of the form <span class="s11">((COM . </span><span class="s16">COMPROPS</span><span class="s11">) (TYPE . </span><span class="s16">TYPEPROPS</span><span class="s11">))</span>, where <span class="s16">COMPROPS </span>is a property list specifying how the name is defined as a file manager command by <span class="s11">FILEPKGCOM </span>(see the Defining New File Manager Commands section), and <span class="s16">TYPEPROPS </span>is a property list specifying how the name is defined as a file manager type by <span class="s11">FILEPKGTYPE </span>(see the Defining New File Manager Types section).</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">FILES <span class="p">[File Manager Type]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Used to access files. This file manager type is most useful for renaming files. The &quot;definition&quot; of a file is not a useful structure.</p><p class="s15" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">FILEVARS <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Used to access Filevars (see the FileVars section).</p><p class="s15" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">FNS <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Used to access function definitions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">I.S.OPRS                                                <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Used to access the definitions of iterative statement operators (see Chapter 9).</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">LISPXMACROS                                             <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Used to access programmer’s assistant commands defined on the variables <span class="s11">LISPXMACROS</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">and <span class="s11">LISPXHISTORYMACROS </span>(see Chapter 13).</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">MACROS                                                  <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Used to access macro definitions (see Chapter 10).</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">PROPS                                                   <span class="p">[File Manager Type]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">Used to access objects stored on the property list of a symbol (see Chapter 2). When a property is changed or added, an object of type </span>PROPS<span class="p">, with &quot;name&quot; </span>(SYMBOL <i>PROPNAME</i>) <span class="p">is marked as being changed.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">Note that some symbol properties are used to implement other file manager types. For example, the property </span>MACRO <span class="p">implements the file manager type </span>MACROS<span class="p">, the property </span>ADVICE <span class="p">implements </span>ADVICE<span class="p">, etc. This is indicated by putting the property </span>PROPTYPE<span class="p">, with value of the file manager type on the property list of the property name. For example, </span>(GETPROP ’MACRO ’PROPTYPE) =&gt; MACROS<span class="p">. When such a property is changed or added, an object of the corresponding file manager type is marked. If </span>(GETPROP <i>PROPNAME </i>’PROPTYPE) =&gt; IGNORE<span class="p">, the change is ignored. The </span>FILE<span class="p">, </span>FILEMAP<span class="p">, </span>FILEDATES<span class="p">, etc. properties are all handled this way. (</span>IGNORE <span class="p">cannot be the name of a file manager type implemented as a property).</span></p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">RECORDS                                                 <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Used to access record declarations (see Chapter 8).</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">RESOURCES                                               <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Used to access resources (see Chapter 12).</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TEMPLATES                                               <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Used to access Masterscope templates (see Chapter 19).</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">USERMACROS                                              <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Used to access user edit macros (see Chapter 16).</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">VARS                                                    <span class="p">[File Manager Type]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Used to access top-level variable values.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Functions for Manipulating Typed Definitions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The functions described below can be used to manipulate typed definitions, without needing to know how the manipulations are done. For example, <span class="s11">(GETDEF ’FOO ’FNS) </span>will return the function definition of <span class="s11">FOO</span>, <span class="s11">(GETDEF ’FOO ’VARS) </span>will return the variable value of <span class="s11">FOO</span>, etc. All of the functions use the following conventions:</p><ol id="l37"><ol id="l38"><li><p style="padding-top: 8pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">All functions which make destructive changes are undoable.</p></li><li><p style="padding-top: 9pt;padding-left: 66pt;text-indent: -12pt;line-height: 93%;text-align: justify;">Any argument that expects a list of symbols will also accept a single symbol, operating as though it were enclosed in a list. For example, if the argument <span class="s16">FILES </span>should be a list of files, it may also be a single file.</p></li><li><p class="s16" style="padding-top: 9pt;padding-left: 66pt;text-indent: -12pt;text-align: justify;">TYPE <span class="p">is a file manager type. </span>TYPE <span class="s11">= NIL </span><span class="p">is equivalent to </span>TYPE <span class="s11">= FNS</span><span class="p">. The singular form of a file manager type is also recognized, e.g. </span>TYPE <span class="s11">= VAR </span><span class="p">is equivalent to </span>TYPE <span class="s11">= VARS</span><span class="p">.</span></p></li><li><p class="s16" style="padding-top: 9pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">FILES <span class="s11">= NIL </span><span class="p">is equivalent to </span>FILES <span class="s11">= FILELST</span><span class="p">.</span></p></li><li><p class="s16" style="padding-top: 9pt;padding-left: 66pt;text-indent: -12pt;text-align: justify;"><span class="s46">	</span>SOURCE <span class="p">is used to indicate the source of a definition, that is, where the definition should be found. </span>SOURCE <span class="p">can be one of:</span></p></li></ol></ol><p class="s15" style="padding-top: 6pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">CURRENT <span class="p">Get the definition currently in effect.</span></p><p style="padding-top: 6pt;padding-left: 135pt;text-indent: 0pt;text-align: left;"><span class="s15">SAVED </span>Get the &quot;saved&quot; definition, as stored by <span class="s11">SAVEDEF</span>.</p><p class="s15" style="padding-top: 6pt;padding-left: 140pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FILE <span class="p">Get the definition contained on the (first) file determined by</span></p><p class="s11" style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: left;">WHEREIS<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;text-align: justify;">WHEREIS <span class="p">is called with </span><i>FILES </i>= T<span class="p">, so that if the </span>WHEREIS <span class="p">library package is loaded, the </span>WHEREIS <span class="p">data base will be used to find the file containing the definition.</span></p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: -17pt;line-height: 94%;text-align: justify;"><span class="s15">? </span>Get the definition currently in effect if there is one, else the saved definition if there is one, otherwise the definition from a file determined by <span class="s11">WHEREIS</span>. Like specifying <span class="s11">CURRENT</span>, <span class="s11">SAVED</span>, and <span class="s11">FILE </span>in order, and taking the first definition that is found.</p><p style="padding-top: 6pt;padding-left: 118pt;text-indent: 0pt;line-height: 11pt;text-align: left;">a file name</p><p style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">a list of file names Get the definition from the first of the indicated files that</p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: left;">contains one.</p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: -28pt;text-align: justify;"><span class="s15">NIL </span>In most cases, giving <span class="s16">SOURCE </span><span class="s11">= NIL </span>(or not specifying it at all) is the same as giving <span class="s11">?</span>, to get either the current, saved, or filed definition. However, with <span class="s11">HASDEF</span>, <span class="s16">SOURCE </span><span class="s11">= NIL </span>is interpreted as equal to <span class="s16">SOURCE </span><span class="s11">= CURRENT</span>, which only tests if there is a current definition.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The operation of most of the functions described below can be changed or extended by modifying the appropriate properties for the corresponding file manager type using the function <span class="s11">FILEPKGTYPE</span>, described in the Defining New File Manager Types section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">(<b>GETDEF </b><i>NAME TYPE SOURCE OPTIONS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the definition of <span class="s16">NAME</span>, of type <span class="s16">TYPE</span>, from <span class="s16">SOURCE</span>. For most types, <span class="s11">GETDEF </span>returns the expression which would be pretty printed when dumping <span class="s16">NAME </span>as <span class="s16">TYPE</span>. For example, for <span class="s16">TYPE </span><span class="s11">= FNS</span>, an <span class="s11">EXPR </span>definition is returned, for <span class="s16">TYPE </span><span class="s11">= VARS</span>, the value of <span class="s16">NAME </span>is returned, etc.</p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">OPTIONS <span class="p">is a list which specifies certain options:</span></p><p style="padding-top: 8pt;padding-left: 222pt;text-indent: -49pt;line-height: 94%;text-align: justify;"><span class="s15">NOERROR </span><span class="s11">GETDEF </span>causes an error if an appropriate definition cannot be found, unless <span class="s16">OPTIONS </span>is or contains <span class="s11">NOERROR</span>. In this case, <span class="s11">GETDEF </span>returns the value of the <span class="s11">NULLDEF </span>file manager type property (see the Defining New File Manager Types section), usually <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 222pt;text-indent: -41pt;line-height: 94%;text-align: justify;">a string If <span class="s16">OPTIONS </span>is or contains a string, that string will be returned if no definition is found (and <span class="s11">NOERROR </span>is not among the options). The caller can thus determine whether a definition was found, even for types for which <span class="s11">NIL </span>or <span class="s11">NOBIND </span>are acceptable definitions.</p><p style="padding-top: 8pt;padding-left: 222pt;text-indent: -44pt;text-align: justify;"><span class="s15">NOCOPY </span><span class="s11">GETDEF </span>returns a copy of the definition unless <span class="s16">OPTIONS </span>is or contains <span class="s11">NOCOPY</span>.</p><p style="padding-top: 8pt;padding-left: 222pt;text-indent: -33pt;line-height: 94%;text-align: justify;"><span class="s15">EDIT </span>If <span class="s16">OPTIONS </span>is or contains <span class="s11">EDIT</span>, <span class="s11">GETDEF </span>returns a copy of the definition unless it is possible to edit the definition &quot;in place.&quot; With some file manager types, such as functions, it is meaningful (and efficient) to edit the definition by destructively modifying the list structure, without calling <span class="s11">PUTDEF</span>. However, some file manager types (like records) need to be &quot;installed&quot; with <span class="s11">PUTDEF </span>after they are edited. The default <span class="s11">EDITDEF </span>(see the Defining New File Manager Types section) calls <span class="s11">GETDEF </span>with <span class="s16">OPTIONS </span>of <span class="s11">(EDIT NOCOPY)</span>, so it doesn’t use a copy unless it has to, and only calls <span class="s11">PUTDEF </span>if the result of editing is not <span class="s11">EQUAL </span>to the old definition.</p><p style="padding-top: 6pt;padding-left: 222pt;text-indent: -44pt;text-align: justify;"><span class="s15">NODWIM </span>A <span class="s11">FNS </span>definition will be dwimified if it is likely to contain CLISP unless <span class="s16">OPTIONS </span>is or contains <span class="s11">NODWIM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">(<b>PUTDEF </b><i>NAME TYPE DEFINITION REASON</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Defines <span class="s16">NAME </span>of type <span class="s16">TYPE </span>with <span class="s16">DEFINITION</span>. For <span class="s16">TYPE </span><span class="s11">= FNS</span>, does a <span class="s11">DEFINE</span>; for</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><i>TYPE </i>= VARS<span class="p">, does a </span>SAVESET<span class="p">, etc.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For <span class="s16">TYPE </span><span class="s11">= FILES</span>, <span class="s11">PUTDEF </span>establishes the command list, notices <span class="s16">NAME</span>, and then calls <span class="s11">MAKEFILE </span>to actually dump the file <span class="s16">NAME</span>, copying functions if necessary from the &quot;old&quot; file (supplied as part of <span class="s16">DEFINITION</span>).</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">PUTDEF </span>calls <span class="s11">MARKASCHANGED </span>(see the Mrking Changes section) to mark <span class="s16">NAME </span>as changed, giving a reason of <span class="s16">REASON</span>. If <span class="s16">REASON </span>is <span class="s11">NIL</span>, the default is <span class="s11">DEFINED</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If <span class="s16">TYPE </span><span class="s11">= FNS</span>, <span class="s11">PUTDEF </span>prints a warning if you try to redefine a function on the list</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">UNSAFE.TO.MODIFY.FNS <span class="p">(see Chapter 10).</span></p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>HASDEF </b><i>NAME TYPE SOURCE SPELLFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns <span class="s11">(OR </span><span class="s16">NAME </span><span class="s11">T) </span>if <span class="s16">NAME </span>is the name of something of type <span class="s16">TYPE</span>. If not, attempts spelling correction if <span class="s16">SPELLFLG </span><span class="s11">= T</span>, and returns the spelling-corrected <span class="s16">NAME</span>. Otherwise returns <span class="s11">NIL</span>. <span class="s11">HASDEF </span>for type FNS (or NIL) indicates that <span class="s16">NAME </span>has an editable source definition. If <span class="s16">NAME </span>is a function that exists on a file for which you have loaded only the compiled version and not the source, <span class="s11">HASDEF </span>returns NIL.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">(HASDEF NIL <i>TYPE</i>) <span class="p">returns </span>T <span class="p">if </span>NIL <span class="p">has a valid definition.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">SOURCE </span><span class="s11">= NIL</span>, <span class="s16">HASDEF </span>interprets this as equal to <span class="s16">SOURCE </span><span class="s11">= CURRENT</span>, which only tests if there is a current definition.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>TYPESOF </b><i>NAME POSSIBLETYPES IMPOSSIBLETYPES SOURCE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns a list of the types in <span class="s16">POSSIBLETYPES </span>but not in <span class="s16">IMPOSSIBLETYPES </span>for which</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">NAME </span>has a definition. <span class="s11">FILEPKGTYPES </span>is used if <span class="s16">POSSIBLETYPES </span>is <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>COPYDEF </b><i>OLD NEW TYPE SOURCE OPTIONS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Defines <span class="s16">NEW </span>to have a copy of the definition of <span class="s16">OLD </span>by doing <span class="s11">PUTDEF </span>on a copy of the definition retrieved by <span class="s11">(GETDEF </span><span class="s16">OLD TYPE SOURCE OPTIONS</span><span class="s11">)</span>. <span class="s16">NEW </span>is substituted for <span class="s16">OLD </span>in the copied definition, in a manner that may depend on the <span class="s16">TYPE</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, <span class="s11">(COPYDEF ’PDQ ’RST ’FILES) </span>sets up <span class="s11">RSTCOMS </span>to be a copy of <span class="s11">PDQCOMS</span>, changes things like <span class="s11">(VARS * PDQVARS) </span>to be <span class="s11">(VARS * RSTVARS) </span>in <span class="s11">RSTCOMS</span>, and performs a <span class="s11">MAKEFILE </span>on <span class="s11">RST </span>such that the appropriate definitions get copied from <span class="s11">PDQ</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">COPYDEF </span>disables the <span class="s11">NOCOPY </span>option of <span class="s11">GETDEF</span>, so <i>NEW </i>will always have a <i>copy </i>of the definition of <span class="s16">OLD</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s11">COPYDEF </span>substitutes <span class="s16">NEW </span>for <span class="s16">OLD </span>throughout the definition of <span class="s16">OLD</span>. This is usually the right thing to do, but in some cases, e.g., where the old name appears within a quoted expression but was not used in the same context, you must re-edit the definition.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>DELDEF </b><i>NAME TYPE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Removes the definition of <span class="s16">NAME </span>as a <span class="s16">TYPE </span>that is currently in effect.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>SHOWDEF </b><i>NAME TYPE FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Prettyprints the definition of <span class="s16">NAME </span>as a <span class="s16">TYPE </span>to <span class="s16">FILE</span>. This shows you how <span class="s16">NAME </span>would be written to a file. Used by <span class="s11">ADDTOFILES? </span>(see the Storing Files section).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>EDITDEF </b><i>NAME TYPE SOURCE EDITCOMS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Edits the definition of <span class="s16">NAME </span>as a <span class="s16">TYPE</span>. Essentially performs</p><p class="s11" style="padding-top: 5pt;padding-left: 173pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PUTDEF <i>NAME TYPE</i></p><p class="s11" style="padding-left: 222pt;text-indent: -32pt;line-height: 88%;text-align: left;">(EDITE (GETDEF <i>NAME TYPE SOURCE</i>) <i>EDITCOMS</i>))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>SAVEDEF </b><i>NAME TYPE DEFINITION</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Sets the &quot;saved&quot; definition of <span class="s16">NAME </span>as a <span class="s16">TYPE </span>to <span class="s16">DEFINITION</span>. If <span class="s16">DEFINITION </span><span class="s11">= NIL</span>, the current definition of <span class="s16">NAME </span>is saved.</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span><i>TYPE </i>= FNS <span class="p">(or </span>NIL<span class="p">), the function definition is saved on </span><i>NAME</i><span class="p">’s property list under the property </span>EXPR<span class="p">, or </span>CODE <span class="p">(depending on the </span>FNTYP <span class="p">of the function definition). If </span>(GETD <i>NAME</i>) <span class="p">is non-</span>NIL<span class="p">, but </span>(FNTYP <i>FN</i>) = NIL<span class="p">, </span>SAVEDEF <span class="p">saves the definition on the property name </span>LIST<span class="p">. This can happen if a function was somehow defined with an illegal expr definition, such as </span>(LAMMMMDA (X) ...)<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s16">TYPE </span><span class="s11">= VARS</span>, the definition is stored as the value of the <span class="s11">VALUE </span>property of <span class="s16">NAME</span>. For other types, the definition is stored in an internal data structure, from where it can be retrieved by <span class="s11">GETDEF </span>or <span class="s11">UNSAVEDEF</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>UNSAVEDEF </b><i>NAME TYPE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Restores the &quot;saved&quot; definition of <span class="s16">NAME </span>as a <span class="s16">TYPE</span>, making it be the current definition. Returns <span class="s16">PROP</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TYPE </span><span class="s11">= FNS </span>(or <span class="s11">NIL</span>), <span class="s11">UNSAVEDEF </span>unsaves the function definition from the <span class="s11">EXPR </span>property if any, else <span class="s11">CODE</span>, and returns the property name used. <span class="s11">UNSAVEDEF </span>also recognizes <span class="s16">TYPE </span><span class="s11">= EXPR</span>, <span class="s11">CODE</span>, or <span class="s11">LIST</span>, meaning to unsave the definition only from the corresponding property only.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">DFNFLG </span>is not <span class="s11">T </span>(see Chapter 10), the current definition of <span class="s16">NAME</span>, if any, is saved using <span class="s11">SAVEDEF</span>. Thus one can use <span class="s11">UNSAVEDEF </span>to switch back and forth between two definitions.</p><p class="s11" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>LOADDEF </b><i>NAME TYPE SOURCE</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;"><span class="p">Equivalent to </span>(PUTDEF <i>NAME TYPE </i>(GETDEF <i>NAME TYPE SOURCE</i>))<span class="p">. </span>LOADDEF <span class="p">is</span></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">essentially a generalization of <span class="s11">LOADFNS</span>, e.g. it enables loading a single record declaration from a file. <span class="s11">(LOADDEF </span><span class="s16">FN</span><span class="s11">) </span>will give <span class="s16">FN </span>an <span class="s11">EXPR </span>definition, either obtained from its property list or a file, unless it already has one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>CHANGECALLERS </b><i>OLD NEW TYPES FILES METHOD</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Finds all of the places where <span class="s16">OLD </span>is used as any of the types in <span class="s16">TYPES </span>and changes those places to use <span class="s16">NEW</span>. For example, <span class="s11">(CHANGECALLERS ’NLSETQ ’ERSETQ) </span>will change all calls to <span class="s11">NLSETQ </span>to be calls to <span class="s11">ERSETQ</span>. Also changes occurrences of <span class="s16">OLD </span>to <span class="s16">NEW </span>inside the filecoms of any file, inside record declarations, properties, etc.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">CHANGECALLERS </span>attempts to determine if <span class="s16">OLD </span>might be used as more than one type; for example, if it is both a function and a record field. If so, rather than performing the transformation <span class="s16">OLD </span><span class="s11">-&gt; </span><span class="s16">NEW </span>automatically, you are allowed to edit all of the places where <span class="s16">OLD </span>occurs. For each occurrence of <span class="s16">OLD</span>, you are asked whether you want to make the replacement. If you respond with anything except <span class="s11">Yes </span>or <span class="s11">No</span>, the editor is invoked on the expression containing that occurrence.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">There are two different methods for determining which functions are to be examined. If <span class="s16">METHOD </span><span class="s11">= EDITCALLERS</span>, <span class="s11">EDITCALLERS </span>is used to search <span class="s16">FILES </span>(see Chapter 16). If <span class="s16">METHOD </span><span class="s11">= MASTERSCOPE</span>, then the Masterscope database is used instead. <span class="s16">METHOD </span><span class="s11">= NIL </span>defaults to <span class="s11">MASTERSCOPE </span>if the value of the variable <span class="s11">DEFAULTRENAMEMETHOD </span>is <span class="s11">MASTERSCOPE </span>and a Masterscope database exists, otherwise it defaults to <span class="s11">EDITCALLERS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>RENAME </b><i>OLD NEW TYPES FILES METHOD</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">First performs <span class="s11">(COPYDEF </span><span class="s16">OLD NEW TYPE</span><span class="s11">) </span>for all <span class="s16">TYPE </span>inside <span class="s16">TYPES</span>. It then calls <span class="s11">CHANGECALLERS </span>to change all occurrences of <span class="s16">OLD </span>to <span class="s16">NEW</span>, and then &quot;deletes&quot; <span class="s16">OLD </span>with <span class="s11">DELDEF</span>. For example, if you have a function <span class="s11">FOO </span>which you now wish to call <span class="s11">FIE</span>, simply perform <span class="s11">(RENAME ’FOO ’FIE)</span>, and <span class="s11">FIE </span>will be given <span class="s11">FOO</span>’s definition, and all places that <span class="s11">FOO </span>are called will be changed to call <span class="s11">FIE </span>instead.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s16">METHOD </span>is interpreted the same as the <span class="s16">METHOD </span>argument to <span class="s11">CHANGECALLERS</span>, above.</p><p class="s16" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s11">(</span><b>COMPARE </b>NAME<span class="s18">1 </span>NAME<span class="s18">2 </span>TYPE SOURCE<span class="s18">1 </span>SOURCE<span class="s18">2</span><span class="s11">) </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Compares the definition of <span class="s16">NAME</span><span class="s18">1 </span>with that of <span class="s16">NAME</span><span class="s18">2</span>, by calling <span class="s11">COMPARELISTS</span></p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span class="p">(Chapter 3) on </span><span class="s11">(GETDEF </span>NAME<span class="s18">1 </span>TYPE SOURCE<span class="s18">1</span><span class="s11">) </span><span class="p">and </span><span class="s11">(GETDEF </span>NAME<span class="s18">2 </span>TYPE SOURCE<span class="s18">2</span><span class="s11">)</span><span class="p">,</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">which prints their differences on the terminal.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, if the current value of the variable <span class="s11">A </span>is <span class="s11">(A B C (D E F) G)</span>, and the value of the variable <span class="s11">B </span>on the file <span class="s11">&lt;lisp&gt;FOO </span>is <span class="s11">(A B C (D F E) G)</span>, then:</p><p class="s19" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(COMPARE ’A ’B ’VARS ’CURRENT ’&lt;lisp&gt;FOO)</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 88%;text-align: left;">A from CURRENT and B from &lt;lisp&gt;TEST differ: (E -&gt; F) (F -&gt; E)</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 9pt;text-align: left;">T</p><p class="s11" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>COMPAREDEFS </b><i>NAME TYPE SOURCES</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Calls <span class="s11">COMPARELISTS </span>(Chapter 3) on all pairs of definitions of <span class="s16">NAME </span>as a <span class="s16">TYPE </span>obtained from the various <span class="s16">SOURCES </span>(interpreted as a list of source specifications).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Defining New File Manager Types</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">All manipulation of typed definitions in the file manager is done using the type-independent functions <span class="s11">GETDEF</span>, <span class="s11">PUTDEF</span>, etc. Therefore, to define a new file manager type, it is only necessary to specify (via the function <span class="s11">FILEPKGTYPE</span>) what these functions should do when dealing with a typed definition of the new type. Each file manager type has the following properties, whose values are functions or lists of functions:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">These functions are defined to take a <span class="s16">TYPE </span>argument so that you may have the same function for more than one type.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">GETDEF                                           <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Value is a function of three arguments, <span class="s16">NAME</span>, <span class="s16">TYPE</span>, and <span class="s16">OPTIONS</span>, which should return the current definition of <span class="s16">NAME </span>as a type <span class="s16">TYPE</span>.  Used by <span class="s11">GETDEF </span>(see the Functions for Manipulating Typed Definitions section), which passes its <span class="s16">OPTIONS </span>argument.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If there is no <span class="s11">GETDEF </span>property, a file manager command for dumping <span class="s16">NAME </span>is created (by <span class="s11">MAKENEWCOM</span>). This command is then used to write the definition of <span class="s16">NAME </span>as a type <span class="s16">TYPE </span>onto the file <span class="s11">FILEPKG.SCRATCH </span>(in Medley, this file is created on the <span class="s11">{CORE} </span>device). This expression is then read back in and returned as the current definition.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">In some situations, the function <span class="s11">HASDEF </span>needs to call <span class="s11">GETDEF </span>to determine whether a definition exists. In this case, <span class="s16">OPTIONS </span>will include the symbol <span class="s11">HASDEF</span>, and it is permissable for a <span class="s11">GETDEF </span>function to return <span class="s11">T </span>or <span class="s11">NIL</span>, rather than creating a complex structure which will not be used.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">NULLDEF                                          <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The value of the <span class="s11">NULLDEF </span>property is returned by <span class="s11">GETDEF </span>(see the Functions for Manipulating Typed Definitions section) when there is no definition and the <span class="s11">NOERROR </span>option is supplied.  For example, the <span class="s11">NULLDEF </span>of <span class="s11">VARS </span>is <span class="s11">NOBIND</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">FILEGETDEF                                       <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">This enables you to provide a way of obtaining definitions from a file that is more efficient than the default procedure used by <span class="s11">GETDEF </span>(see the Functions for Manipulating Typed Definitions section). Value is a function of four arguments, <span class="s16">NAME</span>, <span class="s16">TYPE</span>, <span class="s16">FILE</span>, and <span class="s16">OPTIONS</span>. The function is applied by <span class="s11">GETDEF </span>when it is determined that a typed definition is needed from a particular file. The function must open and search the given file and return any <span class="s16">TYPE </span>definition for <span class="s16">NAME </span>that it finds.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">CANFILEDEF                                       <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If the value of this property is non-<span class="s11">NIL</span>, this indicates that definitions of this file manager type are not loaded when a file is loaded with <span class="s11">LOADFROM </span>(see the Loading Files section). The default is <span class="s11">NIL</span>.  Initially, only <span class="s11">FNS </span>has this property set to non-<span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">PUTDEF <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Value is a function of three arguments, <span class="s16">NAME</span>, <span class="s16">TYPE</span>, and <span class="s16">DEFINITION</span>, which should store <span class="s16">DEFINITION </span>as the definition of <span class="s16">NAME </span>as a type <span class="s16">TYPE</span>. Used by <span class="s11">PUTDEF </span>(see the Functions for Manipulating Typed Definitions section).</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">HASDEF <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Value is a function of three arguments, <span class="s16">NAME</span>, <span class="s16">TYPE</span>, and <span class="s16">SOURCE</span>, which should return <span class="s11">(OR </span><span class="s16">NAME </span><span class="s11">T) </span>if <span class="s16">NAME </span>is the name of something of type <span class="s16">TYPE</span>. <span class="s16">SOURCE </span>is as interpreted by <span class="s11">HASDEF </span>(see the Functions for Manipulating Typed Definitions section), which uses this property.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">EDITDEF <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Value is a function of four arguments, <span class="s16">NAME</span>, <span class="s16">TYPE</span>, <span class="s16">SOURCE</span>, and <span class="s16">EDITCOMS</span>, which should edit the definition of <span class="s16">NAME </span>as a type <span class="s16">TYPE </span>from the source <span class="s16">SOURCE</span>, interpreting the edit commands <span class="s16">EDITCOMS</span>. If sucessful, should return <span class="s16">NAME </span>(or a spelling-corrected <span class="s16">NAME</span>). If it returns <span class="s11">NIL</span>, the &quot;default&quot; editor is called. Used by <span class="s11">EDITDEF </span>(see the Functions for Manipulating Typed Definitions section).</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">DELDEF <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Value is a function of two arguments, <span class="s16">NAME</span>, and <span class="s16">TYPE</span>, which removes the definition of <span class="s16">NAME </span>as  a  <span class="s16">TYPE </span>that is currently in effect. Used by <span class="s11">DELDEF </span>(see the Functions for Manipulating Typed Definitions section).</p><p class="s15" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">NEWCOM <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Value is a function of four arguments, <span class="s16">NAME</span>, <span class="s16">TYPE</span>, <span class="s16">LISTNAME</span>, and <span class="s16">FILE</span>. Specifies how to make a new (instance of a) file manager command to dump <span class="s16">NAME</span>, an object of type <span class="s16">TYPE</span>. The function should return the new file manager command. Used by <span class="s11">ADDTOFILE </span>and <span class="s11">SHOWDEF</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">LISTNAME </span>is non-<span class="s11">NIL</span>, this means that you specified <span class="s16">LISTNAME </span>as the filevar in interaction with <span class="s11">ADDTOFILES? </span>(see the FileVars section).</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">If no </span>NEWCOM <span class="p">is specified, the default is to call </span>DEFAULTMAKENEWCOM<span class="p">, which will construct and return a command of the form </span>(<i>TYPE NAME</i>)<span class="p">. You can advise or redefine </span>DEFAULTMAKENEWCOM <span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: justify;">WHENCHANGED <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Value is a list of functions to be applied to <span class="s16">NAME</span>, <span class="s16">TYPE</span>, and <span class="s16">REASON </span>when <span class="s16">NAME</span>, an instance of type <span class="s16">TYPE</span>, is changed or defined (see <span class="s11">MARKASCHANGED</span>, in the Marking Changes section). Used for various applications, e.g. when an object of type <span class="s11">I.S.OPRS </span>changes, it is necessary to clear the corresponding translatons from <span class="s11">CLISPARRAY</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The <span class="s11">WHENCHANGED </span>functions are called before the object is marked as changed, so that it can, in fact, decide that the object is <i>not </i>to be marked as changed, and execute <span class="s11">(RETFROM ’MARKASCHANGED)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;text-align: right;">The <span class="s16">REASON </span>argument passed to <span class="s11">WHENCHANGED </span>functions is either <span class="s11">DEFINED </span>or <span class="s11">CHANGED</span>.</p><p class="s15" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">WHENFILED <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Value is a list of functions to be applied to <span class="s16">NAME</span>, <span class="s16">TYPE</span>, and <span class="s16">FILE </span>when <span class="s16">NAME</span>, an instance of type <span class="s16">TYPE</span>, is added to <span class="s16">FILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">WHENUNFILED <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Value is a list of functions to be applied to <span class="s16">NAME</span>, <span class="s16">TYPE</span>, and <span class="s16">FILE </span>when <span class="s16">NAME</span>, an instance of type <span class="s16">TYPE</span>, is removed from <span class="s16">FILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">DESCRIPTION <span class="p">[File Manager Type Property]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Value is a string which describes instances of this type. For example, for type <span class="s11">RECORDS</span>, the value of <span class="s11">DESCRIPTION </span>is the string <span class="s11">&quot;record declarations&quot;</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The function <span class="s11">FILEPKGTYPE </span>is used to define new file manager types, or to change the properties of existing types. It is possible to redefine the attributes of system file manager types, such as <span class="s11">FNS </span>or <span class="s11">PROPS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>FILEPKGTYPE </b>TYPE PROP<span class="s18">1 </span>VAL<span class="s18">1 </span>... PROP<span class="s18">N </span>VAL<span class="s18">N</span><span class="s11">)           </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Nospread function for defining new file manager types, or changing properties of existing file manager types. <span class="s16">PROP</span><span class="s18">i </span>is one of the property names given above; <span class="s16">VAL</span><span class="s18">i </span>is the value to be given to that property. Returns <span class="s16">TYPE</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(FILEPKGTYPE <i>TYPE PROP</i>) <span class="p">returns the value of the property </span><i>PROP</i><span class="p">, without changing it.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">(FILEPKGTYPE <i>TYPE</i>) <span class="p">returns a property list of all of the defined properties of </span><i>TYPE</i><span class="p">, using the property names as keys.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Specifying <span class="s16">TYPE </span>as the symbol <span class="s11">TYPE </span>can be used to define one file manager type as a synonym of another. For example, <span class="s11">(FILEPKGTYPE ’R ’TYPE ’RECORDS) </span>defines <span class="s11">R </span>as a synonym for the file manager type <span class="s11">RECORDS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">File Manager Commands                                                                                                                          </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The basic mechanism for creating symbolic files is the function <span class="s11">MAKEFILE </span>(see the Storing Files section). For each file, the file manager has a data structure known as the &quot;filecoms&quot;, which specifies what typed descriptions are contained in the file. A filecoms is a list of file manager commands, each of which specifies objects of a certain file manager type which should be dumped. For example, the filecoms</p><p class="s11" style="padding-top: 5pt;padding-left: 174pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((FNS FOO)</p><p class="s11" style="padding-left: 190pt;text-indent: 0pt;line-height: 88%;text-align: left;">(VARS FOO BAR BAZ) (RECORDS XYZZY))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">has a <span class="s11">FNS</span>, a <span class="s11">VARS</span>, and a <span class="s11">RECORDS </span>file manager command. This filecoms specifies that the function definition for <span class="s11">FOO</span>, the variable values of <span class="s11">FOO</span>, <span class="s11">BAR</span>, and <span class="s11">BAZ</span>, and the record declaration for <span class="s11">XYZZY </span>should be dumped.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">By convention, the filecoms of a file <span class="s16">X </span>is stored as the value of the symbol <span class="s16">X</span><span class="s11">COMS</span>. For example, <span class="s11">(MAKEFILE ’FOO.;27) </span>will use the value of <span class="s11">FOOCOMS </span>as the filecoms. This variable can be directly manipulated, but the file manager contains facilities which make constructing and updating filecoms easier, and in some cases automatic (see the Functions for Manipulating File Command Lists section).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A file manager command is an instruction to <span class="s11">MAKEFILE </span>to perform an explicit, well-defined operation, usually printing an expression. Usually there is a one-to-one correspondence between file manager types and file manager commands; for each file manager type, there is a file manager command which is used for writing objects of that type to a file, and each file manager command is used to write objects of a particular type. However, in some cases, the same file manager type can be dumped by several different file manager commands. For example, the file manager commands <span class="s11">PROP</span>, <span class="s11">IFPROP</span>, and <span class="s11">PROPS </span>all dump out objects with the file manager type <span class="s11">PROPS</span>. This means if you change an object of file manager type <span class="s11">PROPS </span>via <span class="s11">EDITP</span>, a typed-in call to <span class="s11">PUTPROP</span>, or via an explicit call to <span class="s11">MARKASCHANGED</span>, this object can be written out with any of the above three commands. Thus, when the file manager attempts to determine whether this typed object is contained on a particular file, it must look at instances of all three file manager commands <span class="s11">PROP</span>, <span class="s11">IFPROP</span>, and <span class="s11">PROPS</span>, to see if the corresponding atom and property are specified. It is also permissible for a single file manager command to dump several different file manager types. For example, you can define a file manager command which dumps both a function definition and its macro. Conversely, some file manager comands do not dump any file manager types at all, such as the <span class="s11">E </span>command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">For each file manager command, the file manager must be able to determine what typed definitions the command will cause to be printed so that the file manager can determine on what file (if any) an object of a given type is contained (by searching through the filecoms). Similarly, for each file manager type, the file manager must be able to construct a command that will print out an object of that type. In other words, the file manager must be able to map file manager commands into file manager types, and vice versa. Information can be provided to the file manager about a particular file manager command via the function <span class="s11">FILEPKGCOM </span>(see the Defining New File Manager Commands section), and information about a particular file manager type via the function <span class="s11">FILEPKGTYPE </span>(see the prior section). In the absence of other information, the default is simply that a file manager command of the form <span class="s11">(</span><span class="s16">X NAME</span><span class="s11">) </span>prints out the definition of <span class="s16">NAME </span>as a type <span class="s16">X</span>, and, conversely, if <span class="s16">NAME </span>is an object of type <span class="s16">X</span>, then <span class="s16">NAME </span>can be written out by a command of the form <span class="s11">(</span><span class="s16">X NAME</span><span class="s11">)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If a file manager function is given a command or type that is not defined, it attempts spelling correction using <span class="s11">FILEPKGCOMSPLST </span>as a spelling list (unless <span class="s11">DWIMFLG </span>or <span class="s11">NOSPELLFLG = NIL</span>; see Chapter 20).  If successful, the corrected version of the list of file manager commands is written (again) on the output file, since at this point, the uncorrected list of file manager commands would already have been printed on the output file. When the file is loaded, this will result in <span class="s16">FILE</span><span class="s11">COMS </span>being reset, and may cause a message to be printed, e.g., <span class="s11">(FOOCOMS RESET)</span>. The value of <span class="s11">FOOCOMS </span>would then be the corrected version. If the spelling correction is unsuccessful, the file manager functions generate an error, <span class="s11">BAD FILE PACKAGE COMMAND</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">File package commands can be used to save on the output file definitions of functions, values of variables, property lists of atoms, advised functions, edit macros, record declarations, etc. The interpretation of each file manager command is documented in the following sections.</p><p class="s16" style="padding-top: 10pt;padding-left: 126pt;text-indent: -24pt;text-align: left;"><span class="s11">(</span><b>USERMACROS </b>SYMBOL<span class="s18">1 </span>... SYMBOL<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Each symbol <span class="s16">SYMBOL</span><span class="s18">i </span>is the name of a user edit macro. Writes expressions to add the edit macro definitions of <span class="s16">SYMBOL</span><span class="s18">i </span>to <span class="s11">USERMACROS</span>, and adds the names of the commands to the appropriate spelling lists.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">SYMBOL</span><span class="s18">i </span>is not a user macro, a warning message &quot;<span class="s11">no EDIT MACRO for </span><span class="s16">SYMBOL</span><span class="s18">i</span>&quot; is printed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Functions and Macros</p><p class="s16" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>FNS </b>FN<span class="s18">1 </span>... FN<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Writes a <span class="s11">DEFINEQ </span>expression with the function definitions of <span class="s16">FN</span><span class="s18">1 </span><span class="s11">... </span><span class="s16">FN</span><span class="s18">N</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">You should never print a <span class="s11">DEFINEQ </span>expression directly onto a file (by using the <span class="s11">P </span>file manager command, for example), because <span class="s11">MAKEFILE </span>generates the filemap of function definitions from the <span class="s11">FNS </span>file manager commands (see the File Maps section).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>ADVISE </b>FN<span class="s18">1 </span>... FN<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For each function <span class="s16">FN</span><span class="s18">i</span>, writes expressions to reinstate the function to its advised state when the file is loaded. See Chapter 15.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">When advice is applied to a function programmatically or by hand, it is additive. That is, if a function already has some advice, further advice is added to the already-existing advice. However, when advice is applied to a function as a result of loading a file with an <span class="s11">ADVISE </span>file manager command, the new advice replaces any earlier advice. <span class="s11">ADVISE </span>works this way to prevent problems with loading different versions of the same advice. If you really want to apply additive advice, a file manager command such as <span class="s11">(P (ADVISE</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">...)) <span class="p">should be used (see the Miscellaneous File Manager Commands section).</span></p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>ADVICE </b>FN<span class="s18">1 </span>... FN<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For each function <span class="s16">FN</span><span class="s18">i</span>, writes a <span class="s11">PUTPROPS </span>expression which will put the advice back on the property list of the function. You can then use <span class="s11">READVISE </span>(see Chapter 15) to reactivate the advice.</p><p class="s16" style="padding-top: 10pt;padding-left: 126pt;text-indent: -24pt;text-align: left;"><span class="s11">(</span><b>MACROS </b>SYMBOL<span class="s18">1 </span>... SYMBOL<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Each <span class="s16">SYMBOL</span><span class="s18">i </span>is a symbol with a <span class="s11">MACRO </span>definition (and / or a <span class="s11">DMACRO</span>, <span class="s11">10MACRO</span>, etc.). Writes out an expression to restore all of the macro properties for each <span class="s16">SYMBOL</span><span class="s18">i</span>, embedded in a <span class="s11">DECLARE: EVAL@COMPILE </span>so the macros will be defined when the file is compiled. See Chapter 10.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Variables</p><p class="s16" style="padding-top: 4pt;padding-left: 78pt;text-indent: -24pt;line-height: 19pt;text-align: justify;"><span class="s11">(</span><b>VARS </b>VAR<span class="s18">1 </span>... VAR<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command] For each </span>VAR<span class="s18">i</span><span class="p">, writes an expression to set its top level value when the file is loaded. If</span></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">VAR</span><span class="s18">i </span>is atomic, <span class="s11">VARS </span>writes out an expression to set <span class="s16">VAR</span><span class="s18">i </span>to the top-level value it had at the time the file was written. If <span class="s16">VAR</span><span class="s18">i </span>is non-atomic, it is interpreted as <span class="s11">(</span><span class="s16">VAR FORM</span><span class="s11">)</span>, and <span class="s11">VARS </span>write out an expression to set <span class="s16">VAR </span>to the value of <span class="s16">FORM </span>(evaluated when the file is loaded).</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">VARS <span class="p">prints out expressions using </span>RPAQQ <span class="p">and </span>RPAQ<span class="p">, which are like </span>SETQQ <span class="p">and </span>SETQ <span class="p">except that they also perform some special operations with respect to the file manager (see the Functions Used within Source Files section).</span></p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">VARS <span class="p">cannot be used for putting arbitrary variable values on files. For example, if the value of a variable is an array (or many other data types), a symbol which represents the array is dumped in the file instead of the array itself. The </span>HORRIBLEVARS <span class="p">file manager command provides a way of saving and reloading variables whose values contain re- entrant or circular list structure, user data types, arrays, or hash arrays.</span></p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>INITVARS </b>VAR<span class="s18">1 </span>... VAR<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">INITVARS <span class="p">is used for initializing variables, setting their values only when they are currently </span>NOBIND<span class="p">. A variable value defined in an </span>INITVARS <span class="p">command will not change an already established value. This means that re-loading files to get some other information will not automatically revert to the initialization values.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The format of an <span class="s11">INITVARS </span>command is just like <span class="s11">VARS</span>. The only difference is that if <span class="s16">VAR</span><span class="s18">i </span>is atomic, the current value is not dumped; instead <span class="s11">NIL </span>is defined as the initialization value. Therefore, <span class="s11">(INITVARS FOO (FUM 2)) </span>is the same as <span class="s11">(VARS (FOO NIL)(FUM 2))</span>, if <span class="s11">FOO </span>and <span class="s11">FUM </span>are both <span class="s11">NOBIND</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">INITVARS <span class="p">writes out an </span>RPAQ? <span class="p">expression on the file instead of </span>RPAQ <span class="p">or </span>RPAQQ.</p><p class="s11" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>ADDVARS </b>(<i>VAR</i><i>1 </i>. <i>LST</i><i>1</i>)<i>...</i>(<i>VAR</i><i>N </i>. <i>LST</i><i>N</i>)) <span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">For each <span class="s11">(</span><span class="s16">VAR</span><span class="s18">i </span><b>. </b><span class="s16">LST</span><span class="s18">i</span><span class="s11">)</span>, writes an <span class="s11">ADDTOVAR </span>(see the Functions Used Within Source Files section) to add each element of <span class="s16">LST</span><span class="s18">i </span>to the list that is the value of <span class="s16">VAR</span><span class="s18">i </span>at the time the file is loaded. The new value of <span class="s16">VAR</span><span class="s18">i </span>will be the union of its old value and <span class="s16">LST</span><span class="s18">i</span>. If the value of <span class="s16">VAR</span><span class="s18">i </span>is <span class="s11">NOBIND</span>, it is first set to <span class="s11">NIL</span>.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">For example, <span class="s11">(ADDVARS (DIRECTORIES LISP LISPUSERS)) </span>will add <span class="s11">LISP </span>and</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">LISPUSERS <span class="p">to the value of </span>DIRECTORIES<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">LST</span><span class="s18">i </span>is not specified, <span class="s16">VAR</span><span class="s18">i </span>is initialized to <span class="s11">NIL </span>if its current value is <span class="s11">NOBIND</span>. In other words, <span class="s11">(ADDVARS (</span><span class="s16">VAR</span><span class="s11">)) </span>will initialize <span class="s16">VAR </span>to <span class="s11">NIL </span>if <span class="s16">VAR </span>has not previously been set.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>APPENDVARS </b>(<i>VAR</i><i>1 </i>. <i>LST</i><i>1</i>) <i>... </i>(<i>VAR</i><i>N </i>. <i>LST</i><i>N</i>)) <span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The same as <span class="s11">ADDVARS</span>, except that the values are added to the end of the lists (using <span class="s11">APPENDTOVAR</span>, in the Functions Used Within Source Files section), rather than at the beginning.</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>UGLYVARS </b>VAR<span class="s18">1 </span>... VAR<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">VARS</span>, except that the value of each <span class="s16">VAR</span><span class="s18">i </span>may contain structures for which <span class="s11">READ </span>is not an inverse of <span class="s11">PRINT</span>, e.g. arrays, readtables, user data types, etc. Uses <span class="s11">HPRINT </span>(see Chapter 25).</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>HORRIBLEVARS </b>VAR<span class="s18">1 </span>... VAR<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">UGLYVARS</span>, except structures may also contain circular pointers. Uses <span class="s11">HPRINT </span>(see Chapter 25). The values of <span class="s16">VAR</span><span class="s18">1 </span><span class="s11">... </span><span class="s16">VAR</span><span class="s18">N </span>are printed in the same operation, so that they may contain pointers to common substructures.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s11">UGLYVARS </span>does not do any checking for circularities, which results in a large speed and internal-storage advantage over <span class="s11">HORRIBLEVARS</span>. Thus, if it is known that the data structures do <i>not </i>contain circular pointers, <span class="s11">UGLYVARS </span>should be used instead of <span class="s11">HORRIBLEVARS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>ALISTS </b><span class="s11">(</span>VAR<span class="s18">1 </span>KEY<span class="s18">1 </span>KEY<span class="s18">2 </span><span class="s11">...)</span>...<span class="s11">(</span>VAR<span class="s18">N </span>KEY<span class="s18">3 </span>KEY<span class="s18">4 </span><span class="s11">...)) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">VAR</span><span class="s18">i </span>is a variable whose value is an association list, such as <span class="s11">EDITMACROS</span>, <span class="s11">BAKTRACELST</span>, etc. For each <span class="s16">VAR</span><span class="s18">i</span>, <span class="s11">ALISTS </span>writes out expressions which will restore the values associated with the specified keys. For example, <span class="s11">(ALISTS (BREAKMACROS BT BTV)) </span>will dump the definition for the <span class="s11">BT </span>and <span class="s11">BTV </span>commands on <span class="s11">BREAKMACROS</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Some association lists (<span class="s11">USERMACROS</span>, <span class="s11">LISPXMACROS</span>, etc.) are used to implement other file manager types, and they have their own file manager commands.</p><p class="s16" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>SPECVARS </b>VAR<span class="s18">1 </span>... VAR<span class="s18">N</span><span class="s11">)                           </span><span class="p">[File Manager Command]</span></p><p class="s16" style="padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>LOCALVARS </b>VAR<span class="s18">1 </span>... VAR<span class="s18">N</span><span class="s11">)                          </span><span class="p">[File Manager Command]</span></p><p class="s16" style="padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>GLOBALVARS </b>VAR<span class="s18">1 </span>... VAR<span class="s18">N</span><span class="s11">)                         </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Outputs the corresponding compiler declaration embedded in a <span class="s11">DECLARE: DOEVAL@COMPILE DONTCOPY</span>. See Chapter 18.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>CONSTANTS </b>VAR<span class="s18">1 </span>... VAR<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">VARS</span>, for each <span class="s16">VAR</span><span class="s18">i </span>writes an expression to set its top level value when the file is loaded. Also writes a <span class="s11">CONSTANTS </span>expression to declare these variables as constants (see Chapter 18). Both of these expressions are wrapped in a <span class="s11">(DECLARE: EVAL@COMPILE</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">...) <span class="p">expression, so they can be used by the compiler.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">VARS</span>, <span class="s16">VAR</span><span class="s18">i </span>can be non-atomic, in which case it is interpreted as <span class="s11">(</span><span class="s16">VAR FORM</span><span class="s11">)</span>, and passed to <span class="s11">CONSTANTS </span>(along with the variable being initialized to <span class="s16">FORM</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Symbol Properties</p><p class="s11" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>PROP </b><i>PROPNAME SYMBOL</i><i>1 </i>... <i>SYMBOL</i><i>N</i>) <span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Writes a <span class="s11">PUTPROPS </span>expression to restore the value of the <span class="s16">PROPNAME </span>property of each symbol <span class="s16">SYMBOL</span><span class="s18">i </span>when the file is loaded.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">PROPNAME </span>is a list, expressions will be written for each property on that list. If <span class="s16">PROPNAME </span>is the symbol <span class="s11">ALL</span>, the values of all user properties (on the property list of each <span class="s16">SYMBOL</span><span class="s18">i</span>) are saved. <span class="s11">SYSPROPS </span>is a list of properties used by system functions. Only properties <i>not </i>on that list are dumped when the <span class="s11">ALL </span>option is used.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">SYMBOL</span><span class="s18">i </span>does not have the property <span class="s16">PROPNAME </span>(as opposed to having the property with value <span class="s11">NIL</span>), a warning message <span class="s11">&quot;NO </span><span class="s16">PROPNAME </span><span class="s11">PROPERTY FOR </span><span class="s16">SYMBOL</span><span class="s18">i</span><span class="s11">&quot; </span>is printed. The command <span class="s11">IFPROP </span>can be used if it is not known whether or not an atom will have the corresponding property.</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>IFPROP </b>PROPNAME SYMBOL<span class="s18">1 </span>... SYMBOL<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Same as the <span class="s11">PROP </span>file manager command, except that it only saves the properties that actually appear on the property list of the corresponding atom. For example, if <span class="s11">FOO1 </span>has property <span class="s11">PROP1 </span>and <span class="s11">PROP2</span>, <span class="s11">FOO2 </span>has <span class="s11">PROP3</span>, and <span class="s11">FOO3 </span>has property <span class="s11">PROP1 </span>and <span class="s11">PROP3</span>, then <span class="s11">(IFPROP (PROP1 PROP2 PROP3) FOO1 FOO2 FOO3) </span>will save only those five property values.</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>PROPS </b><span class="s11">(</span>SYMBOL<span class="s18">1 </span>PROPNAME<span class="s18">1</span><span class="s11">)</span>...<span class="s11">(</span>SYMBOL<span class="s18">N </span>PROPNAME<span class="s18">N</span><span class="s11">)) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Similar to <span class="s11">PROP </span>command. Writes a <span class="s11">PUTPROPS </span>expression to restore the value of</p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">PROPNAME<span class="s18">i </span><span class="p">for each </span>SYMBOL<span class="s18">i </span><span class="p">when the file is loaded.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">As with the <span class="s11">PROP </span>command, if <span class="s16">SYMBOL</span><span class="s18">i </span>does not have the property <span class="s16">PROPNAME </span>(as opposed to having the property with <span class="s11">NIL </span>value), a warning message <span class="s11">&quot;NO </span><span class="s16">PROPNAME</span><span class="s18">i </span><span class="s11">PROPERTY FOR </span><span class="s16">SYMBOL</span><span class="s18">i</span><span class="s11">&quot; </span>is printed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Miscellaneous File Manager Commands</p><p class="s16" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>RECORDS </b>REC<span class="s18">1 </span>... REC<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Each <span class="s16">REC</span><span class="s18">i </span>is the name of a record (see Chapter 8). Writes expressions which will redeclare the records when the file is loaded.</p><p class="s16" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>INITRECORDS </b>REC<span class="s18">1 </span>... REC<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">RECORDS</span>, <span class="s11">INITRECORDS </span>writes expressions on a file that will, when loaded, perform whatever initialization / allocation is necessary for the indicated records.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">However, the record declarations themselves are not written out. This facility is useful for building systems on top of Interlisp, in which the implementor may want to eliminate the record declarations from a production version of the system, but the allocation for these records must still be done.</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>LISPXMACROS </b>SYMBOL<span class="s18">1 </span>... SYMBOL<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Each <span class="s16">SYMBOL</span><span class="s18">i </span>is defined on <span class="s11">LISPXMACROS </span>or <span class="s11">LISPXHISTORYMACROS </span>(see Chapter 13). Writes expressions which will save and restore the definition for each macro, as well as making the necessary additions to <span class="s11">LISPXCOMS</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>I.S.OPRS </b>OPR<span class="s18">1 </span>... OPR<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Each <span class="s16">OPR</span><span class="s18">i </span>is the name of a user-defined i.s.opr (see Chapter 9). Writes expressions which will redefine the i.s.oprs when the file is loaded.</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>RESOURCES </b>RESOURCE<span class="s18">1 </span>... RESOURCE<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Each <span class="s16">RESOURCES</span><span class="s18">i </span>is the name of a resource (see Chapter 12). Writes expressions which will redeclare the resource when the file is loaded.</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>INITRESOURCES </b>RESOURCE<span class="s18">1 </span>... RESOURCE<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Parallel to <span class="s11">INITRECORDS</span>, <span class="s11">INITRESOURCES </span>writes expressions on a file to perform whatever initialization / allocation is necessary for the indicated resources, without writing the resource declaration itself.</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>COURIERPROGRAMS </b>NAME<span class="s18">1 </span>... NAME<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Each <span class="s16">NAME</span><span class="s18">i </span>is the name of a Courier program (see Chapter 31). Writes expressions which will redeclare the Courier program when the file is loaded.</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>TEMPLATES </b>SYMBOL<span class="s18">1 </span>... SYMBOL<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Each <span class="s16">SYMBOL</span><span class="s18">i </span>is a symbol which has a Masterscope template (see Chapter 19). Writes expressions which will restore the templates when the file is loaded.</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>FILES </b>FILE<span class="s18">1 </span>... FILE<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Used to specify auxiliary files to be loaded in when the file is loaded. Dumps an expression calling <span class="s11">FILESLOAD </span>(see the Loading Files section), with <span class="s16">FILE</span><span class="s18">1 </span><span class="s11">... </span><span class="s16">FILE</span><span class="s18">N </span>as the arguments. <span class="s11">FILESLOAD </span>interprets <span class="s16">FILE</span><span class="s18">1 </span><span class="s11">... </span><span class="s16">FILE</span><span class="s18">N </span>as files to load, possibly interspersed with lists used to specify certain loading options.</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>FILEPKGCOMS </b>SYMBOL<span class="s18">1 </span>... SYMBOL<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Each symbol <span class="s16">SYMBOL</span><span class="s18">i </span>is either the name of a user-defined file manager command or a user-defined file manager type (or both). Writes expressions which will restore each command / type.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">SYMBOL</span><span class="s18">i </span>is not a file manager command or type, a warning message <span class="s11">&quot;no FILE PACKAGE COMMAND for </span><span class="s16">SYMBOL</span><span class="s18">i</span><span class="s11">&quot; </span>is printed.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>* . </b><i>TEXT</i>) <span class="p">[File Manager Command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Used for inserting comments in a file. The file manager command is simply written on the output file; it will be ignored when the file is loaded.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the first element of <span class="s16">TEXT </span>is another <span class="s11">*</span>, a form-feed is printed on the file before the comment.</p><p class="s16" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s11">(</span><b>P </b>EXP<span class="s18">1 </span>... EXP<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">Writes each of the expressions </span>EXP<span class="s18">1 </span><span class="s11">... </span>EXP<span class="s18">N </span><span class="p">on the output file, where they will be evaluated when the file is loaded.</span></p><p class="s16" style="padding-top: 5pt;padding-left: 78pt;text-indent: -24pt;line-height: 19pt;text-align: left;"><span class="s11">(</span><b>E </b>FORM<span class="s18">1 </span>... FORM<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command] Each of the forms </span>FORM<span class="s18">1 </span><span class="s11">... </span>FORM<span class="s18">N </span><span class="p">is evaluated at </span><span class="s9">output </span><span class="p">time, when </span><span class="s11">MAKEFILE</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">interpretes this file manager command.</p><p class="s16" style="padding-top: 10pt;padding-left: 78pt;text-indent: -24pt;line-height: 137%;text-align: left;"><span class="s11">(</span><b>COMS </b>COM<span class="s18">1 </span>... COM<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command] Each of the commands </span>COM<span class="s18">1 </span><span class="s11">... </span>COM<span class="s18">N </span><span class="p">is interpreted as a file manager command.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: -24pt;text-align: left;"><span class="s11">(</span><b>ORIGINAL </b>COM<span class="s18">1 </span>... COM<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Each of the commands <span class="s16">COM</span><span class="s18">i </span>will be interpreted as a file manager command without regard to any file manager macros (as defined by the <span class="s11">MACRO </span>property of the <span class="s11">FILEPKGCOM </span>function, in the Defining New File Manager Commands section). Useful for redefining a built-in file manager command in terms of itself.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Some of the &quot;built-in&quot; file manager commands are defined by file manager macros, so interpreting them (or new user-defined file manager commands) with <span class="s11">ORIGINAL </span>will fail. <span class="s11">ORIGINAL </span>was never intended to be used outside of a file manager command macro.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">DECLARE:</p><p class="s11" style="padding-top: 8pt;padding-left: 78pt;text-indent: -24pt;text-align: left;">(<b>DECLARE: </b>. <i>FILEPKGCOMS/FLAGS</i>) <span class="p">[File Manager Command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Normally expressions written onto a symbolic file are evaluated when loaded; copied to the compiled file when the symbolic file is compiled (see Chapter 18); and not evaluated at compile time. <span class="s11">DECLARE: </span>allows you to override these defaults.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">FILEPKGCOMS/FLAGS </span>is a list of file manager commands, possibly interspersed with &quot;tags&quot;. The output of those file manager commands within <span class="s16">FILEPKGCOMS/FLAGS </span>is embedded in a <span class="s11">DECLARE: </span>expression, along with any tags that are specified. For example, <span class="s11">(DECLARE: EVAL@COMPILE DONTCOPY (FNS ...) (PROP ...)) </span>would produce <span class="s11">(DECLARE: EVAL@COMPILE DONTCOPY (DEFINEQ ...) (PUTPROPS</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="s11">...)). DECLARE: </span>is <i>defined </i>as an nlambda nospread function, which processes its arguments by evaluating or not evaluating each expression depending on the setting of internal state variables. The initial setting is to evaluate, but this can be overridden by specifying the <span class="s11">DONTEVAL@LOAD </span>tag.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="s11">DECLARE: </span>expressions are specially processed by the compiler. For the purposes of compilation, <span class="s11">DECLARE: </span>has two principal applications: to specify forms that are to be evaluated at compile time, presumably to affect the compilation, e.g., to set up macros; and / or to indicate which expressions appearing in the symbolic file are <i>not </i>to be copied to the output file. (Normally, expressions are <i>not </i>evaluated and <i>are </i>copied.) Each expression in <span class="s11">CDR </span>of a <span class="s11">DECLARE: </span>form is either evaluated / not-evaluated and copied / not-copied depending on the settings of two internal state variables, initially set for copy and not- evaluate. These state variables can be reset for the remainder of the expressions in the <span class="s11">DECLARE: </span>by means of the tags <span class="s11">DONTCOPY</span>, <span class="s11">EVAL@COMPILE</span>, etc.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The tags are:</p><p class="s15" style="padding-top: 9pt;padding-left: 173pt;text-indent: 0pt;text-align: left;">EVAL@LOAD</p><p style="padding-top: 1pt;padding-left: 233pt;text-indent: -71pt;text-align: left;"><span class="s15">DOEVAL@LOAD </span>Evaluate the following forms when the file is loaded (unless overridden by <span class="s11">DONTEVAL@LOAD</span>).</p><p class="s15" style="padding-top: 8pt;padding-left: 233pt;text-indent: -82pt;text-align: justify;">DONTEVAL@LOAD <span class="p">Do not evaluate the following forms when the file is loaded.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 233pt;text-indent: -82pt;line-height: 92%;text-align: justify;">EVAL@LOADWHEN <span class="p">This tag can be used to provide conditional evaluation. The value of the expression immediately following the tag determines whether or not to evaluate subsequent expressions when loading. </span><span class="s11">... EVAL@LOADWHEN T</span></p><p class="s11" style="padding-left: 233pt;text-indent: 0pt;line-height: 12pt;text-align: left;">... <span class="p">is equivalent to </span>... EVAL@LOAD ...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">COPY</p><p class="s15" style="padding-left: 233pt;text-indent: -44pt;line-height: 106%;text-align: left;">DOCOPY <span class="p">When compiling, copy the following forms into the compiled file</span><span class="s10">.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 233pt;text-indent: -55pt;text-align: left;">DONTCOPY <span class="p">When compiling, do not copy the following forms into the compiled file.</span></p><p style="padding-top: 6pt;padding-left: 233pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Note: If the file manager commands following <span class="s11">DONTCOPY </span>include record declarations for datatypes, or records with initialization forms, it is necessary to include a <span class="s11">INITRECORDS </span>file manager command (see the prior section) outside of the <span class="s11">DONTCOPY </span>form so that the initialization information is copied. For example, if <span class="s11">FOO </span>was defined as a datatype,</p><p class="s11" style="padding-top: 8pt;padding-left: 233pt;text-indent: 0pt;line-height: 88%;text-align: left;">(DECLARE: DONTCOPY (RECORDS FOO)) (INITRECORDS FOO)</p><p style="padding-top: 7pt;padding-left: 234pt;text-indent: 0pt;text-align: justify;">would copy the data type declaration for <span class="s11">FOO</span>, but would not copy the whole record declaration.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 185pt;text-indent: -55pt;text-align: left;"><span class="s15">COPYWHEN </span>When compiling, if the next form evaluates to non-<span class="s11">NIL</span>, copy the following forms into the compiled file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 109pt;text-indent: 0pt;text-align: left;">EVAL@COMPILE</p><p class="s15" style="padding-left: 98pt;text-indent: 0pt;text-align: left;">DOEVAL@COMPILE <span class="p">When compiling, evaluate the following forms.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 1pt;text-indent: 0pt;text-align: center;">DONTEVAL@COMPILE  <span class="p">When compiling, do not evaluate the following forms.</span></p><p style="padding-top: 7pt;padding-left: 87pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s15">EVAL@COMPILEWHEN </span>When compiling, if the next form evaluates to non-<span class="s11">NIL</span>,</p><p style="padding-left: 1pt;text-indent: 0pt;line-height: 12pt;text-align: center;">evaluate the following forms.</p><p style="padding-top: 6pt;padding-left: 186pt;text-indent: -39pt;line-height: 94%;text-align: justify;"><span class="s15">FIRST </span>For expressions that are to be copied to the compiled file, the tag <span class="s11">FIRST </span>can be used to specify that the following expressions in the <span class="s11">DECLARE: </span>are to appear at the front of the compiled file, before anything else except the <span class="s11">FILECREATED </span>expressions (see the Symbolic File Format section). For example, <span class="s11">(DECLARE: COPY FIRST (P</span></p><p class="s11" style="padding-top: 1pt;padding-left: 186pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">(PRINT <i>MESS1 </i>T)) NOTFIRST (P (PRINT <i>MESS2</i></p><p class="s11" style="padding-left: 185pt;text-indent: 0pt;text-align: justify;">T))) <span class="p">will cause </span>(PRINT <i>MESS1 </i>T) <span class="p">to appear first in the compiled file, followed by any functions, then </span>(PRINT MESS2 T)<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 130pt;text-indent: 0pt;text-align: left;"><span class="s15">NOTFIRST </span>Reverses the effect of <span class="s11">FIRST</span>.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The value of <span class="s11">DECLARETAGSLST </span>is a list of all the tags used in <span class="s11">DECLARE: </span>expressions. If a tag not on this list appears in a <span class="s11">DECLARE: </span>file manager command, spelling correction is performed using <span class="s11">DECLARETAGSLST </span>as a spelling list.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Note that the function <span class="s11">LOADCOMP </span>(see the Loading Files section) provides a convenient way of obtaining information from the <span class="s11">DECLARE: </span>expressions in a file, without reading in the entire file. This information may be used for compiling other files.</p><p class="s16" style="padding-top: 10pt;padding-left: 78pt;text-indent: -24pt;text-align: left;"><span class="s11">(</span><b>BLOCKS </b>BLOCK<span class="s18">1 </span>... BLOCK<span class="s18">N</span><span class="s11">) </span><span class="p">[File Manager Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For each <span class="s16">BLOCK</span><span class="s18">i</span>, writes a <span class="s11">DECLARE: </span>expression which the block compile functions interpret as a block declaration. See Chapter 18.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Exporting Definitions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When building a large system in Interlisp, it is often the case that there are record definitions, macros and the like that are needed by several different system files when running, analyzing and compiling the source code of the system, but which are not needed for running the compiled code. By using the <span class="s11">DECLARE: </span>file manager command with tag <span class="s11">DONTCOPY </span>(see the prior section), these definitions can be kept out of the compiled files, and hence out of the system constructed by loading the compiled files files into Interlisp. This saves loading time, space in the resulting system, and whatever other overhead might be incurred by keeping those definitions around, e.g., burden on the record package to consider more possibilities in translating record accesses, or conflicts between system record fields and user record fields.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">However, if the implementor wants to debug or compile code in the resulting system, the definitions are needed. And even if the definitions <i>had </i>been copied to the compiled files, a similar problem arises if one wants to work on system code in a regular Interlisp environment where none of the system files had been loaded. One could mandate that any definition needed by more than one file in the system should reside on a distinguished file of definitions, to be loaded into any environment where the system files are worked on. Unfortunately, this would keep the definitions away from where they logically belong.  The <span class="s11">EXPORT </span>mechanism is designed to solve this problem.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">To use the mechanism, the implementor identifies any definitions needed by files other than the one in which the definitions reside, and wraps the corresponding file manager commands in the <span class="s11">EXPORT </span>file manager command. Thereafter, <span class="s11">GATHEREXPORTS </span>can be used to make a single file containing all the exports.</p><p class="s11" style="padding-top: 5pt;padding-left: 126pt;text-indent: -24pt;line-height: 19pt;text-align: left;">(<b>EXPORT </b><i>COM</i><i>1 </i><i>... COM</i><i>N</i>) <span class="p">[File Manager Command] This command is used for &quot;exporting&quot; definitions. Like </span>COM<span class="p">, each of the commands </span><i>COM</i><i>1</i></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">... <i>COM</i><i>N </i><span class="p">is interpreted as a file manager command. The commands are also flagged in the file as being &quot;exported&quot; commands, for use with </span>GATHEREXPORTS<span class="p">.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>GATHEREXPORTS </b><i>FROMFILES TOFILE FLG</i>)                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">FROMFILES </span>is a list of files containing <span class="s11">EXPORT </span>commands. <span class="s11">GATHEREXPORTS </span>extracts all the exported commands from those files and produces a loadable file <span class="s16">TOFILE </span>containing them. If <span class="s16">FLG </span><span class="s11">= EVAL</span>, the expressions are evaluated as they are gathered; i.e., the exports are effectively loaded into the current environment as well as being written to <span class="s16">TOFILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>IMPORTFILE </b><i>FILE RETURNFLG</i>)                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">RETURNFLG </span>is <span class="s11">NIL</span>, this loads any exported definitions from <span class="s16">FILE </span>into the current environment. If <span class="s16">RETURNFLG </span>is <span class="s11">T</span>, this returns a list of the exported definitions (evaluable expressions) without actually evaluating them.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>CHECKIMPORTS </b><i>FILES NOASKFLG</i>)                                  <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Checks each of the files in <span class="s16">FILES </span>to see if any exists in a version newer than the one from which the exports in memory were taken (<span class="s11">GATHEREXPORTS </span>and <span class="s11">IMPORTFILE </span>note the creation dates of the files involved), or if any file in the list has not had its exports loaded at all. If there are any such files, you are asked for permission to <span class="s11">IMPORTFILE </span>each such file. If <span class="s16">NOASKFLG </span>is non-<span class="s11">NIL</span>, <span class="s11">IMPORTFILE </span>is performed without asking.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, suppose file <span class="s11">FOO </span>contains records <span class="s11">R1</span>, <span class="s11">R2</span>, and <span class="s11">R3</span>, macros <span class="s11">BAR </span>and <span class="s11">BAZ</span>, and constants <span class="s11">CON1 </span>and <span class="s11">CON2</span>. If the definitions of <span class="s11">R1</span>, <span class="s11">R2</span>, <span class="s11">BAR</span>, and <span class="s11">BAZ </span>are needed by files other than <span class="s11">FOO</span>, then the file commands for <span class="s11">FOO </span>might contain the command</p><p class="s11" style="padding-top: 6pt;padding-left: 178pt;text-indent: -16pt;line-height: 88%;text-align: left;">(DECLARE: EVAL@COMPILE DONTCOPY (EXPORT (RECORDS R1 R2)</p><p class="s11" style="padding-left: 178pt;text-indent: 43pt;line-height: 88%;text-align: left;">(MACROS BAR BAZ)) (RECORDS R3)</p><p class="s11" style="padding-left: 178pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(CONSTANTS BAZ))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">None of the commands inside this <span class="s11">DECLARE: </span>would appear on <span class="s11">FOO</span>’s compiled file, but <span class="s11">(GATHEREXPORTS ’(FOO) ’MYEXPORTS) </span>would copy the record definitions for <span class="s11">R1 </span>and <span class="s11">R2 </span>and the macro definitions for <span class="s11">BAR </span>and <span class="s11">BAZ </span>to the file <span class="s11">MYEXPORTS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">FileVars</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">In each of the file manager commands described above, if the symbol <span class="s11">* </span>follows the command type, the form following the <span class="s11">*</span>, i.e., <span class="s11">CADDR </span>of the command, is evaluated and its value used in executing the command, e.g., <span class="s11">(FNS * (APPEND FNS1 FNS2))</span>. When this form is a symbol, e.g. <span class="s11">(FNS * FOOFNS)</span>, we say that the variable is a &quot;filevar&quot;. Note that <span class="s11">(COMS * </span><span class="s16">FORM</span><span class="s11">) </span>provides a way of <i>computing </i>what should be done by <span class="s11">MAKEFILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Example:</p><p class="s19" style="padding-top: 7pt;padding-left: 114pt;text-indent: -36pt;line-height: 88%;text-align: left;"><span class="s21"> </span><span class="s11">(SETQ FOOFNS ’(FOO1 FOO2 FOO3)) (FOO1 FOO2 FOO3)</span></p><p class="s19" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s21"> </span><span class="s11">(SETQ FOOCOMS</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">’((FNS * FOOFNS) (VARS FIE)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(PROP MACRO FOO1 FOO2) (P (MOVD ’FOO1 ’FIE1))]</p><p class="s19" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s21"> </span><span class="s11">(MAKEFILE ’FOO)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">would create a file <span class="s11">FOO </span>containing:</p><p class="s11" style="padding-top: 8pt;padding-left: 78pt;text-indent: 0pt;line-height: 88%;text-align: left;">(FILECREATED &quot;<i>time and date the file was made</i>&quot; . &quot;<i>other information</i>&quot;)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(PRETTYCOMPRINT FOOCOMS)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(RPAQQ FOOCOMS ((FNS * FOOFNS) ...) (RPAQQ FOOFNS (FOO1 FOO3 FOO3))</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(DEFINEQ &quot;<i>definitions of </i>FOO1<i>, </i>FOO2<i>, and </i>FOO3&quot;) (RPAQQ FIE &quot;<i>value of </i>FIE&quot;)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: left;">(PUTPROPS FOO1 MACRO <i>PROPVALUE</i>) (PUTPROPS FOO2 MACRO <i>PROPVALUE</i>) (MOVD (QUOTE FOO1) (QUOTE FIE1)) STOP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">For the <span class="s11">PROP </span>and <span class="s11">IFPROP </span>commands (see the Litatom Properties section), the <span class="s11">* </span>follows the property name instead of the command, e.g., <span class="s11">(PROP MACRO * FOOMACROS)</span>. Also, in the form <span class="s11">(* * comment ...)</span>, the word <span class="s11">comment </span>is not treated as a filevar.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Defining New File Manager Commands</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A file manager command is defined by specifying the values of certain properties. You can specify the various attributes of a file manager command for a new command, or respecify them for an existing command.  The following properties are used:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">MACRO <span class="p">[File Manager Command Property]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Defines how to dump the file manager command. Used by <span class="s11">MAKEFILE</span>. Value is a pair <span class="s11">(</span><span class="s16">ARGS </span><span class="s11">. </span><span class="s16">COMS</span><span class="s11">)</span>. The &quot;arguments&quot; to the file manager command are substituted for <span class="s16">ARGS </span>throughout <span class="s16">COMS</span>, and the result treated as a list of file manager commands. For example, following <span class="s11">(FILEPKGCOM ’FOO ’MACRO ’((X Y) . </span><span class="s16">COMS</span><span class="s11">))</span>, the file manager command <span class="s11">(FOO A B) </span>will cause <span class="s11">A </span>to be substituted for <span class="s11">X </span>and <span class="s11">B </span>for <span class="s11">Y </span>throughout <span class="s16">COMS</span>, and then <span class="s16">COMS </span>treated as a list of commands.</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="p">The substitution is carried out by </span>SUBPAIR <span class="p">(see Chapter 3), so that the &quot;argument list&quot; for the macro can also be atomic. For example, if </span>(X . <i>COMS</i>) <span class="p">was used instead of </span>((X Y)</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">. <i>COMS</i>)<span class="p">, then the command </span>(FOO A B) <span class="p">would cause </span>(A B) <span class="p">to be substituted for </span>X</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">throughout <span class="s16">COMS</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Filevars are evaluated <i>before </i>substitution. For example, if the symbol <span class="s11">* </span>follows <span class="s16">NAME </span>in the command, <span class="s11">CADDR </span>of the command is evaluated substituting in <span class="s16">COMS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 102pt;text-indent: 0pt;text-align: justify;">ADD <span class="p">[File Manager Command Property]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Specifies how (if possible) to add an instance of an object of a particular type to a given file manager command. Used by <span class="s11">ADDTOFILE</span>. Value is <span class="s16">FN</span>, a function of three arguments, <span class="s16">COM</span>, a file manager command <span class="s11">CAR </span>of which is <span class="s11">EQ </span>to <span class="s16">COMMANDNAME</span>, <span class="s16">NAME</span>, a typed object, and <span class="s16">TYPE</span>, its type. <span class="s16">FN </span>should return <span class="s11">T </span>if it (undoably) adds <span class="s16">NAME </span>to <span class="s16">COM</span>, <span class="s11">NIL </span>if not. If no <span class="s11">ADD </span>property is specified, then the default is (1) if <span class="s11">(CAR </span><span class="s16">COM</span><span class="s11">) = </span><span class="s16">TYPE </span>and <span class="s11">(CADR </span><span class="s16">COM</span><span class="s11">) = *, </span>and <span class="s11">(CADDR </span><span class="s16">COM</span><span class="s11">) </span>is a filevar (i.e. a literal atom), add <span class="s16">NAME </span>to the value of the filevar, or (2) if <span class="s11">(CAR </span><span class="s16">COM</span><span class="s11">) = </span><span class="s16">TYPE </span>and <b>(</b><span class="s11">CADR </span><span class="s16">COM</span><span class="s11">) </span>is not <span class="s11">*</span>, add <span class="s16">NAME </span>to <span class="s11">(CDR </span><span class="s16">COM</span><span class="s11">)</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Actually, the function is given a fourth argument, <span class="s16">NEAR</span>, which if non-<span class="s11">NIL</span>, means the function should try to add the item after <span class="s16">NEAR</span>. See discussion of <span class="s11">ADDTOFILES?</span>, in the Storing Files section.</p><p class="s15" style="padding-top: 10pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">DELETE <span class="p">[File Manager Command Property]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Specifies how (if possible) to delete an instance of an object of a particular type from a given file manager command. Used by <span class="s11">DELFROMFILES</span>. Value is <span class="s16">FN</span>, a function of three arguments, <span class="s16">COM</span>, <span class="s16">NAME</span>, and <span class="s16">TYPE</span>, same as for <span class="s11">ADD</span>. <span class="s16">FN </span>should return <span class="s11">T </span>if it (undoably) deletes <span class="s16">NAME </span>from <span class="s16">COM</span>, <span class="s11">NIL </span>if not. If no <span class="s11">DELETE </span>property is specified, then the default is either <span class="s11">(CAR </span><span class="s16">COM</span><span class="s11">) = </span><span class="s16">TYPE </span>and <span class="s11">(CADR </span><span class="s16">COM</span><span class="s11">) = *</span>, and <span class="s11">(CADDR </span><span class="s16">COM</span><span class="s11">) </span>is a filevar (i.e. a literal atom), and <span class="s16">NAME </span>is contained in the value of the filevar, then remove <span class="s16">NAME </span>from the filevar, or if <span class="s11">(CAR </span><span class="s16">COM</span><span class="s11">) = </span><span class="s16">TYPE </span>and <span class="s11">(CADR </span><span class="s16">COM</span><span class="s11">) </span>is not <span class="s11">*</span>, and <span class="s16">NAME </span>is contained in <span class="s11">(CDR </span><span class="s16">COM</span><span class="s11">)</span>, then remove <span class="s16">NAME </span>from <span class="s11">(CDR </span><span class="s16">COM</span><span class="s11">)</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s16">FN </span>returns the value of <span class="s11">ALL</span>, it means that the command is now &quot;empty&quot;, and can be deleted entirely from the command list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">CONTENTS <span class="p">[File Manager Command Property]</span></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">CONTAIN <span class="p">[File Manager Command Property]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Determines whether an instance of an object of a given type is contained in a given file manager command. Used by <span class="s11">WHEREIS </span>and <span class="s11">INFILECOMS?</span>. Value is <span class="s16">FN</span>, a function of three arguments, <span class="s16">COM</span>, a file manager command <span class="s11">CAR </span>of which is <span class="s11">EQ </span>to <span class="s16">COMMANDNAME</span>, <span class="s16">NAME</span>, and <span class="s16">TYPE</span>. The interpretation of <span class="s16">NAME </span>is as follows: if <span class="s16">NAME </span>is <span class="s11">NIL</span>, <span class="s16">FN </span>should return a list of elements of type <span class="s16">TYPE </span>contained in <span class="s16">COM</span>. If <span class="s16">NAME </span>is <span class="s11">T</span>, <span class="s16">FN </span>should return <span class="s11">T </span>if there are <i>any </i>elements of type <span class="s16">TYPE </span>in <span class="s16">COM</span>. If <span class="s16">NAME </span>is an atom other than <span class="s11">T </span>or <span class="s11">NIL</span>, return <span class="s11">T </span>if <span class="s16">NAME </span>of type <span class="s16">TYPE </span>is contained in <span class="s16">COM</span>. Finally, if <span class="s16">NAME </span>is a list, return a list of those elements of type <span class="s16">TYPE </span>contained in <span class="s16">COM </span>that are also contained in <span class="s16">NAME</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">It is sufficient for the <span class="s11">CONTENTS </span>function to simply return the list of items of type <span class="s16">TYPE </span>in command <span class="s16">COM</span>, i.e. it can in fact ignore the <span class="s16">NAME </span>argument. The <span class="s16">NAME </span>argument is supplied mainly for those situations where producing the entire list of items involves significantly more computation or creates more storage than simply determining whether a particular item (or any item) of type <span class="s16">TYPE </span>is contained in the command.</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">If a </span>CONTENTS <span class="p">property is specified and the corresponding function application returns </span>NIL <span class="p">and </span>(CAR <i>COM</i>) = <i>TYPE</i><span class="p">, then the operation indicated by </span><i>NAME </i><span class="p">is performed on the value of </span>(CADDR <i>COM</i>)<span class="p">, if </span>(CADR <i>COM</i>) = *<span class="p">, otherwise on </span>(CDR <i>COM</i>)<span class="p">. In other words, by specifying a </span>CONTENTS <span class="p">property that returns </span>NIL<span class="p">, e.g. the function </span>NILL<span class="p">, you specify that a file manager command of name </span>FOO <span class="p">produces objects of file manager type </span>FOO <span class="p">and only objects of type </span>FOO<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the <span class="s11">CONTENTS </span>property is not provided, the command is simply expanded according to its <span class="s11">MACRO </span>definition, and each command on the resulting command list is then interrogated.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">COMMANDNAME </span>is a file manager command that is used frequently, its expansion by the various parts of the system that need to interrogate files can result in a large number of <span class="s11">CONS</span>es and garbage collections. By informing the file manager as to what this command actually does and does not produce via the <span class="s11">CONTENTS </span>property, this expansion is avoided. For example, suppose you have a file manager command called <span class="s11">GRAMMARS </span>which dumps various property lists but no functions. The file manager could ignore this command when seeking information about <span class="s11">FNS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The function <span class="s11">FILEPKGCOM </span>is used to define new file manager commands, or to change the properties of existing commands. It is possible to redefine the attributes of system file manager commands, such as <span class="s11">FNS </span>or <span class="s11">PROPS</span>, and to cause unpredictable results.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s11">(</span><b>FILEPKGCOM </b>COMMANDNAME PROP<span class="s18">1 </span>VAL<span class="s18">1 </span>... PROP<span class="s18">N </span>VAL<span class="s18">N</span><span class="s11">) </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Nospread function for defining new file manager commands, or changing properties of existing file manager commands. <span class="s16">PROP</span><span class="s18">i </span>is one of of the property names described above; <span class="s16">VAL</span><span class="s18">i </span>is the value to be given that property of the file manager command <span class="s16">COMMANDNAME</span>. Returns <span class="s16">COMMANDNAME</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">(FILEPKGCOM <i>COMMANDNAME PROP</i>) <span class="p">returns the value of the property </span><i>PROP</i><span class="p">, without changing it.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(FILEPKGCOM <i>COMMANDNAME</i>) <span class="p">returns a property list of all of the defined properties of</span></p><p class="s16" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">COMMANDNAME<span class="p">, using the property names as keys.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Specifying <span class="s16">TYPE </span>as the symbol <span class="s11">COM </span>can be used to define one file manager command as a synonym of another. For example, <span class="s11">(FILEPKGCOM ’INITVARIABLES ’COM ’INITVARS) </span>defines <span class="s11">INITVARIABLES </span>as a synonym for the file manager command <span class="s11">INITVARS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Functions for Manipulating File Command Lists                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The following functions may be used to manipulate filecoms. The argument <span class="s16">COMS </span>does <i>not </i>have to correspond to the filecoms for some file. For example, <span class="s16">COMS </span>can be the list of commands generated as a result of expanding a user-defined file manager command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The following functions will accept a file manager command as a valid value for their <span class="s16">TYPE </span>argument, even if it does not have a corresponding file manager type. User-defined file manager commands are expanded as necessary.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>INFILECOMS</b>? <i>NAME TYPE COMS</i>)                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">COMS </span>is a list of file manager commands, or a variable whose value is a list of file manager commands. <span class="s16">TYPE </span>is a file manager type. <span class="s11">INFILECOMS? </span>returns <span class="s11">T </span>if <span class="s16">NAME </span>of type <span class="s16">TYPE </span>is &quot;contained&quot; in <span class="s16">COMS</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NAME </span><span class="s11">= NIL</span>, <span class="s11">INFILECOMS? </span>returns a list of all elements of type <span class="s16">TYPE</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NAME </span><span class="s11">= T</span>, <span class="s11">INFILECOMS? </span>returns <span class="s11">T </span>if there are <i>any </i>elements of type <span class="s16">TYPE </span>in <span class="s16">COMS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>ADDTOFILE </b><i>NAME TYPE FILE NEAR LISTNAME</i>)                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Adds <span class="s16">NAME </span>of type <span class="s16">TYPE </span>to the file manager commands for <span class="s16">FILE</span>. If <span class="s16">NEAR </span>is given and it is the name of an item of type <span class="s16">TYPE </span>already on <span class="s16">FILE</span>, then <span class="s16">NAME </span>is added to the command that dumps <span class="s16">NEAR</span>. If <span class="s16">LISTNAME </span>is given and is the name of a list of items of <span class="s16">TYPE </span>items on <span class="s16">FILE</span>, then <span class="s16">NAME </span>is added to that list. Uses <span class="s11">ADDTOCOMS </span>and <span class="s11">MAKENEWCOM</span>. Returns <span class="s16">FILE</span>. <span class="s11">ADDTOFILE </span>is undoable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>DELFROMFILES </b><i>NAME TYPE FILES</i>)                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Deletes all instances of <span class="s16">NAME </span>of type <span class="s16">TYPE </span>from the filecoms for each of the files on <span class="s16">FILES</span>.  If <span class="s16">FILES </span>is a non-<span class="s11">NIL </span>symbol, <span class="s11">(LIST </span><span class="s16">FILES</span><span class="s11">) </span>is used.  <span class="s16">FILES </span><span class="s11">= NIL </span>defaults to <span class="s11">FILELST</span>. Returns a list of files from which <span class="s16">NAME </span>was actually removed. Uses <span class="s11">DELFROMCOMS</span>.  <span class="s11">DELFROMFILES </span>is undoable.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Deleting a function will also remove the function from any <span class="s11">BLOCKS </span>declarations in the filecoms.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>ADDTOCOMS </b><i>COMS NAME TYPE NEAR LISTNAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Adds <span class="s16">NAME </span>as a <span class="s16">TYPE </span>to <span class="s16">COMS</span>, a list of file manager commands or a variable whose value is a list of file manager commands. Returns <span class="s11">NIL </span>if <span class="s11">ADDTOCOMS </span>was unable to find a command appropriate for adding <span class="s16">NAME </span>to <span class="s16">COMS</span>. <span class="s16">NEAR </span>and <span class="s16">LISTNAME </span>are described in the discussion of <span class="s11">ADDTOFILE</span>. <span class="s11">ADDTOCOMS </span>is undoable.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The exact algorithm for adding commands depends the particular command itself. See discussion of the <span class="s11">ADD </span>property, in the description of <span class="s11">FILEPKGCOM</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">ADDTOCOMS <span class="p">will not attempt to add an item to any command which is inside of a </span>DECLARE: <span class="p">unless you specified a specific name via the </span>LISTNAME <span class="p">or </span>NEAR <span class="p">option of </span>ADDTOFILES?<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>DELFROMCOMS </b><i>COMS NAME TYPE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Deletes <span class="s16">NAME </span>as a <span class="s16">TYPE </span>from <span class="s16">COMS</span>. Returns <span class="s11">NIL </span>if <span class="s11">DELFROMCOMS </span>was unable to modify</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">COMS </span>to delete <span class="s16">NAME</span>. <span class="s11">DELFROMCOMS </span>is undoable.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>MAKENEWCOM </b><i>NAME TYPE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns a file manager command for dumping <span class="s16">NAME </span>of type <span class="s16">TYPE</span>. Uses the procedure described in the discussion of <span class="s11">NEWCOM</span>, in the Defining New File Manager Types section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>MOVETOFILE </b><i>TOFILE NAME TYPE FROMFILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Moves the definition of <span class="s16">NAME </span>as a <span class="s16">TYPE </span>from <span class="s16">FROMFILE </span>to <span class="s16">TOFILE </span>by modifying the file commands in the appropriate way (with <span class="s11">DELFROMFILES </span>and <span class="s11">ADDTOFILE</span>).</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Note that if <span class="s16">FROMFILE </span>is specified, the definition will be retrieved from that file, even if there is another definition currently in your environment.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FILECOMSLST </b><i>FILE TYPE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns a list of all objects of type <span class="s16">TYPE </span>in <span class="s16">FILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>FILEFNSLST </b><i>FILE</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="p">Same as </span>(FILECOMSLST <i>FILE </i>’FNS)<span class="p">.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>FILECOMS </b><i>FILE TYPE</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="p">Returns </span>(PACK* <i>FILE </i>(OR <i>TYPE </i>’COMS))<span class="p">. Note that </span>(FILECOMS ’FOO) <span class="p">returns the symbol </span>FOOCOMS<span class="p">, not the value of </span>FOOCOMS<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>SMASHFILECOMS </b><i>FILE</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">Maps down </span>(FILECOMSLST <i>FILE </i>’FILEVARS) <span class="p">and sets to </span>NOBIND <span class="p">all filevars (see the FileVars section), i.e., any variable used in a command of the form </span>(<i>COMMAND </i>* <i>VARIABLE</i>)<span class="p">. Also sets </span>(FILECOMS <i>FILE</i>) <span class="p">to </span>NOBIND<span class="p">. Returns </span><i>FILE</i><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Symbolic File Format                                                                                                                                </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The file manager manipulates symbolic files in a particular format. This format is defined so that the information in the file is easily readable when the file is listed, as well as being easily manipulated by the file manager functions. In general, there is no reason for you to manually change the contents of a symbolic file. However, to allow you to extend the file manager, this section describes some of the functions used to write symbolic files, and other matters related to their format.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(<b>PRETTYDEF </b><i>PRTTYFNS PRTTYFILE PRTTYCOMS REPRINTFNS SOURCEFILE CHANGES</i>)</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 11pt;text-align: left;">[Function]</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Writes a symbolic file in <span class="s11">PRETTYPRINT </span>format for loading, using <span class="s11">FILERDTBL </span>as its read table. <span class="s11">PRETTYDEF </span>returns the name of the symbolic file that was created.</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">PRETTYDEF <span class="p">operates under a </span>RESETLST <span class="p">(see Chapter 14), so if an error occurs, or a Control-D is typed, all files that </span>PRETTYDEF <span class="p">has opened will be closed, the (partially complete) file being written will be deleted, and any undoable operations executed will be undone. The </span>RESETLST <span class="p">also means that any </span>RESETSAVE<span class="p">s executed in the file manager commands will also be protected.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s16">PRTTYFNS </span>is an optional list of function names. It is equivalent to including <span class="s11">(FNS * </span><span class="s16">PRTTYFNS</span><span class="s11">) </span>in the file manager commands in <span class="s16">PRTTYCOMS</span>. <span class="s16">PRTTYFNS </span>is an anachronism from when <span class="s11">PRETTYDEF </span>did not use a list of file manager commands, and should be specified as <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">PRTTYFILE </span>is the name of the file on which the output is to be written. <span class="s16">PRTTYFILE </span>has to be a symbnol. If <span class="s16">PRTTYFILE </span><span class="s11">= NIL</span>, the primary output file is used. <span class="s16">PRTTYFILE </span>is opened if not already open, and it becomes the primary output file. <span class="s16">PRTTYFILE </span>is closed at end of <span class="s11">PRETTYDEF</span>, and the primary output file is restored.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">PRTTYCOMS </span>is a list of file manager commands interpreted as described in the File Manager Commands section. If <span class="s16">PRTTYCOMS </span>is atomic, its top level value is used and an <span class="s11">RPAQQ </span>is written which will set that atom to the list of commands when the file is subsequently loaded. A <span class="s11">PRETTYCOMPRINT </span>expression (see below) will also be written which informs you of the named atom or list of commands when the file is subsequently loaded. In addition, if any of the functions in the file are nlambda functions, <span class="s11">PRETTYDEF </span>will automatically print a <span class="s11">DECLARE: </span>expression suitable for informing the compiler about these functions, in case you recompile the file without having first loaded the nlambda functions (see Chapter 18).</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">REPRINTFNS </span>and <span class="s16">SOURCEFILE </span>are for use in conjunction with remaking a file (see the Remaking a Symbolic File section). <span class="s16">REPRINTFNS </span>can be a list of functions to be prettyprinted, or <span class="s11">EXPRS</span>, meaning prettyprint all functions with <span class="s11">EXPR </span>definitions, or <span class="s11">ALL </span>meaning prettyprint all functions either defined as <span class="s11">EXPR</span>s, or with <span class="s11">EXPR </span>properties. Note that doing a remake with <span class="s16">REPRINTFNS </span><span class="s11">= NIL </span>makes sense if there have been changes in the file, but not to any of the functions, e.g., changes to variables or property lists. <span class="s16">SOURCEFILE </span>is the name of the file from which to copy the definitions for those functions that are <i>not </i>going to be prettyprinted, i.e., those not specified by <span class="s16">REPRINTFNS</span>. <span class="s16">SOURCEFILE </span><span class="s11">= T </span>means to use most recent version (i.e., highest number) of</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s16">PRTTYFILE</span>, the second argument to <span class="s11">PRETTYDEF</span>. If <span class="s16">SOURCEFILE </span>cannot be found,</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PRETTYDEF <span class="p">prints the message </span>&quot;<i>FILE </i>NOT FOUND, SO IT WILL BE WRITTEN</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s11">ANEW&quot;, </span>and proceeds as it does when <span class="s16">REPRINTFNS </span>and <span class="s16">SOURCEFILE </span>are both <span class="s11">NIL</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">PRETTYDEF <span class="p">calls </span>PRETTYPRINT <span class="p">with its second argument </span><i>PRETTYDEFLG </i>= T<span class="p">, so whenever </span>PRETTYPRINT <span class="p">starts a new function, it prints (on the terminal) the name of that function if more than 30 seconds (real time) have elapsed since the last time it printed the name of a function.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note that normally if <span class="s11">PRETTYPRINT </span>is given a symbol which is not defined as a function but is known to be on one of the files noticed by the file manager, <span class="s11">PRETTYPRINT </span>will load in the definition (using <span class="s11">LOADFNS</span>) and print it. This is not done when <span class="s11">PRETTYPRINT </span>is called from <span class="s11">PRETTYDEF</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">In Medley the <span class="s11">SYSPRETTYFLG </span>is ignored in the Interlisp exec.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>PRINTFNS </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s16">X </span>is a list of functions. <span class="s11">PRINTFNS </span>prettyprints a <span class="s11">DEFINEQ </span>epression that defines the functions to the primary output stream using the primary read table. Used by <span class="s11">PRETTYDEF </span>to implement the <span class="s11">FNS </span>file manager command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>PRINTDATE </b><i>FILE CHANGES</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Prints the <span class="s11">FILECREATED </span>expression at beginning of <span class="s11">PRETTYDEF </span>files. <span class="s16">CHANGES </span>used by the file manager.</p><p class="s11" style="padding-top: 10pt;padding-left: 77pt;text-indent: -24pt;text-align: left;">(<b>FILECREATED </b><i>X</i>) <span class="p">[NLambda NoSpread Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">Prints a message (using </span>LISPXPRINT<span class="p">) followed by the time and date the file was made, which is </span>(CAR <i>X</i>)<span class="p">. The message is the value of </span>PRETTYHEADER<span class="p">, initially </span>&quot;FILE CREATED&quot;<span class="p">. If </span>PRETTYHEADER = NIL<span class="p">, nothing is printed. </span>(CDR <i>X</i>) <span class="p">contains information about the file, e.g., full name, address of file map, list of changed items, etc. </span>FILECREATED <span class="p">also stores the time and date the file was made on the property list of the file under the property </span>FILEDATES <span class="p">and performs other initialization for the file manager.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>PRETTYCOMPRINT </b><i>X</i>) <span class="p">[NLambda Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Prints <span class="s16">X </span>(unevaluated) using <span class="s11">LISPXPRINT</span>, unless <span class="s11">PRETTYHEADER = NIL</span>.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">PRETTYHEADER <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Value is the message printed by <span class="s11">FILECREATED</span>. <span class="s11">PRETTYHEADER </span>is initially <span class="s11">&quot;FILE CREATED&quot;</span>. If <span class="s11">PRETTYHEADER = NIL</span>, neither <span class="s11">FILECREATED </span>nor <span class="s11">PRETTYCOMPRINT </span>will</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">print anything. Thus, setting <span class="s11">PRETTYHEADER </span>to <span class="s11">NIL </span>will result in &quot;silent loads&quot;.</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PRETTYHEADER <span class="p">is reset to </span>NIL <span class="p">during greeting (see Chapter 12).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FILECHANGES </b><i>FILE TYPE</i>)                                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns a list of the changed objects of file manager type <span class="s16">TYPE </span>from the <span class="s11">FILECREATED </span>expression of <span class="s16">FILE</span>. If <span class="s16">TYPE </span><span class="s11">= NIL</span>, returns an alist of all of the changes, with the file manager types as the <span class="s11">CAR</span>s of the elements..</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FILEDATE </b><i>FILE</i>)                                                <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the file date contained in the <span class="s11">FILECREATED </span>expression of <span class="s16">FILE</span>.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>LISPSOURCEFILEP </b><i>FILE</i>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns a non-<span class="s11">NIL </span>value if <span class="s16">FILE </span>is in file manager format and has a file map, <span class="s11">NIL</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Copyright Notices</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The system has a facility for automatically printing a copyright notice near the front of files, right after the <span class="s11">FILECREATED </span>expression, specifying the years it was edited and the copyright owner. The format of the copyright notice is:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">(* Copyright (c) 1981 by Foo Bars Corporation)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Once a file has a copyright notice then every version will have a new copyright notice inserted into the file without your intervention. (The copyright information necessary to keep the copyright up to date is stored at the end of the file.).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Any year the file has been edited is considered a &quot;copyright year&quot; and therefore kept with the copyright information. For example, if a file has been edited in 1981, 1982, and 1984, then the copyright notice would look like:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">(* Copyright (c) 1981,1982,1984 by Foo Bars Corporation)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">When a file is made, if it has no copyright information, the system will ask you to specify the copyright owner (if <span class="s11">COPYRIGHTFLG = T</span>). You may specify one of the names from <span class="s11">COPYRIGHTOWNERS</span>, or give one of the following responses:</p><ul id="l39"><li><p style="padding-top: 7pt;padding-left: 108pt;text-indent: -6pt;line-height: 91%;text-align: left;">Type a left-square-bracket. The system will then prompt for an arbitrary string which will be used as the owner-string</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -6pt;line-height: 91%;text-align: left;">Type a right-square-bracket, which specifies that you really do not want a copyright notice.</p></li><li><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -24pt;text-align: left;">Type <span class="s11">&quot;NONE&quot; </span>which specifies that this file should never have a copyright notice.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, if <span class="s11">COPYRIGHTOWNERS </span>has the value</p><p class="s11" style="padding-top: 6pt;padding-left: 167pt;text-indent: -5pt;line-height: 88%;text-align: left;">((BBN &quot;Bolt Beranek and Newman Inc.&quot;) (XEROX &quot;Xerox Corporation&quot;))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">then for a new file <span class="s11">FOO </span>the following interaction will take place:</p><p class="s11" style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: justify;">Do you want to Copyright FOO? Yes Copyright owner: <i>(user typed ?) </i>one of:</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 88%;text-align: justify;">BBN - Bolt Beranek and Newman Inc. XEROX - Xerox Corporation</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">NONE - no copyright ever for this file</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">[ - new copyright owner -- type one line of text</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">] - no copyright notice for this file now</p><p class="s11" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Copyright owner: BBN</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">Then &quot;Foo Bars Corporation&quot; in the above copyright notice example would have been &quot;Bolt Beranek and Newman Inc.&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">The following variables control the operation of the copyright facility:</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">COPYRIGHTFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The value of <span class="s11">COPYRIGHTFLG </span>determines whether copyright information is maintained in files. Its value is interpreted as follows:</p><p style="padding-top: 6pt;padding-left: 168pt;text-indent: -28pt;line-height: 93%;text-align: justify;"><span class="s15">NIL </span>The system will preserve old copyright information, but will not ask you about copyrighting new files. This is the default value of <span class="s11">COPYRIGHTFLG</span>.</p><p class="s15" style="padding-top: 7pt;padding-left: 168pt;text-indent: -17pt;text-align: left;">T <span class="p">When a file is made, if it has no copyright information, the system will ask you to specify the copyright owner.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 168pt;text-indent: -39pt;text-align: left;">NEVER <span class="p">The system will neither prompt for new copyright information nor preserve old copyright information.</span></p><p style="padding-top: 6pt;padding-left: 168pt;text-indent: -49pt;line-height: 94%;text-align: justify;"><span class="s15">DEFAULT </span>The value of <span class="s11">DEFAULTCOPYRIGHTOWNER </span>(below) is used for putting copyright information in files that don’t have any other copyright. The prompt <span class="s11">&quot;Copyright owner for file xx:&quot; </span>will still be printed, but the default will be filled in immediately.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">COPYRIGHTOWNERS <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">COPYRIGHTOWNERS </span>is a list of entries of the form <span class="s11">(</span><span class="s16">KEY OWNERSTRING</span><span class="s11">)</span>, where <span class="s16">KEY </span>is used as a response to <span class="s11">ASKUSER </span>and <span class="s16">OWNERSTRING </span>is a string which is the full identification of the owner.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DEFAULTCOPYRIGHTOWNER <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If you do not respond in <span class="s11">DWIMWAIT </span>seconds to the copyright query, the value of</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">DEFAULTCOPYRIGHTOWNER <span class="p">is used.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Functions Used Within Source Files</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following functions are normally only used within symbolic files, to set variable values, property values, etc.  Most of these have special behavior depending on file manager variables.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>RPAQ </b><i>VAR VALUE</i>)                                       <span class="p">[NLambda Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">An nlambda function like <span class="s11">SETQ </span>that sets the top level binding of <span class="s16">VAR </span>(unevaluated) to</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">VALUE<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>RPAQQ </b><i>VAR VALUE</i>)                                      <span class="p">[NLambda Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">An nlambda function like <span class="s11">SETQQ </span>that sets the top level binding of <span class="s16">VAR </span>(unevaluated) to</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">VALUE <span class="p">(unevaluated).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>RPAQ? </b><i>VAR VALUE</i>)                                      <span class="p">[NLambda Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Similar to <span class="s11">RPAQ</span>, except that it does nothing if <span class="s16">VAR </span>already has a top level value other than</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s11">NOBIND</span>. Returns <span class="s16">VALUE </span>if <span class="s16">VAR </span>is reset, otherwise <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">RPAQ</span>, <span class="s11">RPAQQ</span>, and <span class="s11">RPAQ? </span>generate errors if <span class="s16">X </span>is not a symbol. All are affected by the value of <span class="s11">DFNFLG </span>(see Chapter 10). If <span class="s11">DFNFLG = ALLPROP </span>(and the value of <span class="s16">VAR </span>is other than <span class="s11">NOBIND</span>), instead of setting <span class="s16">X</span>, the corresponding value is stored on the property list of <span class="s16">VAR </span>under the property <span class="s11">VALUE</span>. All are undoable.</p><p class="s16" style="padding-top: 6pt;padding-left: 125pt;text-indent: -24pt;line-height: 19pt;text-align: left;"><span class="s11">(</span><b>ADDTOVAR </b>VAR X<span class="s18">1 </span>X<span class="s18">2 </span>... X<span class="s18">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function] Each </span>X<span class="s18">i </span><span class="p">that is not a member of the value of </span>VAR <span class="p">is added to it, i.e. after </span><span class="s11">ADDTOVAR</span></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">completes, the value of <span class="s16">VAR </span>will be <span class="s11">(UNION (LIST </span><span class="s16">X</span><span class="s18">1 </span><span class="s16">X</span><span class="s18">2 </span><span class="s11">... </span><span class="s16">X</span><span class="s18">N</span><span class="s11">) </span><span class="s16">VAR</span><span class="s11">)</span>. <span class="s11">ADDTOVAR </span>is used by <span class="s11">PRETTYDEF </span>for implementing the <span class="s11">ADDVARS </span>command. It performs some file manager related operations, i.e. &quot;notices&quot; that <span class="s16">VAR </span>has been changed. Returns the atom <span class="s16">VAR </span>(not the value of <span class="s16">VAR</span>).</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>APPENDTOVAR </b>VAR X<span class="s18">1 </span>X<span class="s18">2 </span>... X<span class="s18">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">ADDTOVAR</span>, except that the values are added to the end tof the list, rather than at the beginning.</p><p class="s16" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>PUTPROPS </b>ATM PROP<span class="s18">1 </span>VAL<span class="s18">1 </span>... PROP<span class="s18">N </span>VAL<span class="s18">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Nlambda nospread version of <span class="s11">PUTPROP </span>(none of the arguments are evaluated). For <span class="s16">i </span><span class="s11">= 1...</span><span class="s16">N</span>, puts property <span class="s16">PROP</span><span class="s18">i</span>, value <span class="s16">VALi</span>, on the property list of <span class="s16">ATM</span>. Performs some file manager related operations, i.e., &quot;notices&quot; that the corresponding properties have been changed.</p><p class="s11" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>SAVEPUT </b><i>ATM PROP VAL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">PUTPROP</span>, but marks the corresponding property value as having been changed (used by the file manager).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">File Maps</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A file map is a data structure which contains a symbolic ’map’ of the contents of a file. Currently, this consists of the begin and end byte address (see <span class="s11">GETFILEPTR</span>, in Chapter 25) for each <span class="s11">DEFINEQ </span>expression in the file, the begin and end address for each function definition within the <span class="s11">DEFINEQ</span>, and the begin and end address for each compiled function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">MAKEFILE<span class="p">, </span>PRETTYDEF<span class="p">, </span>LOADFNS<span class="p">, </span>RECOMPILE<span class="p">, and numerous other system functions depend heavily on the file map for efficient operation. For example, the file map enables </span>LOADFNS <span class="p">to load selected function definitions simply by setting the file pointer to the corresponding address using </span>SETFILEPTR<span class="p">, and then performing a single </span>READ<span class="p">. Similarly, the file map is heavily used by the &quot;remake&quot; option of </span>MAKEFILE <span class="p">(see the Remaking a Symbolic File section): those function definitions that have been changed since the previous version are prettyprinted; the rest are simply copied from the old file to the new one, resulting in a considerable speedup.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Whenever a file is written by <span class="s11">MAKEFILE</span>, a file map for the new file is built. Building the map in this case essentially comes for free, since it requires only reading the current file pointer before and after each definition is written or copied. However, building the map does require that <span class="s11">PRETTYPRINT </span><i>know </i>that it is printing a <span class="s11">DEFINEQ </span>expression. For this reason, you should never print a <span class="s11">DEFINEQ </span>expression onto a file yourself, but should instead always use the <span class="s11">FNS </span>file manager command (see the Functions and Macros section).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The file map is stored on the property list of the root name of the file, under the property <span class="s11">FILEMAP</span>. In addition, <span class="s11">MAKEFILE </span>writes the file map on the file itself. For cosmetic reasons, the file map is written as the last expression in the file. However, the <i>address </i>of the file map in the file is (over)written into the <span class="s11">FILECREATED </span>expression that appears at the beginning of the file so that the file map can be rapidly accessed without having to scan the entire file. In most cases, <span class="s11">LOAD </span>and <span class="s11">LOADFNS </span>do not have to build the file map at all, since a file map will usually appear in the corresponding file, unless the file was written with <span class="s11">BUILDMAPFLG = NIL</span>, or was written outside of Interlisp.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Currently, file maps for <i>compiled </i>files are not written onto the files themselves. However, <span class="s11">LOAD </span>and <span class="s11">LOADFNS </span>will build maps for a compiled file when it is loaded, and store it on the property <span class="s11">FILEMAP</span>. Similary, <span class="s11">LOADFNS </span>will obtain and use the file map for a compiled file, when available.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The use and creation of file maps is controlled by the following variables:</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">BUILDMAPFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Whenever a file is read by <span class="s11">LOAD </span>or <span class="s11">LOADFNS</span>, or written by <span class="s11">MAKEFILE</span>, a file map is automatically built unless <span class="s11">BUILDMAPFLG = NIL</span>. (<span class="s11">BUILDMAPFLG </span>is initially <span class="s11">T</span>.)</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">While building the map will not help the first reference to a file, it will help in future references. For example, if you perform <span class="s11">(LOADFROM ’FOO) </span>where <span class="s11">FOO </span>does not contain a file map, the <span class="s11">LOADFROM </span>will be (slightly) slower than if <span class="s11">FOO </span>did contain a file map, but subsequent calls to <span class="s11">LOADFNS </span>for this version of <span class="s11">FOO </span>will be able to use the map that was built as the result of the <span class="s11">LOADFROM</span>, since it will be stored on <span class="s11">FOO</span>’s <span class="s11">FILEMAP </span>property.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">USEMAPFLG                                                      <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">USEMAPFLG = T </span>(the initial setting), the functions that use file maps will first check the <span class="s11">FILEMAP </span>property to see if a file map for this file was previously obtained or built. If not, the first expression on the file is checked to see if it is a <span class="s11">FILECREATED </span>expression that also contains the address of a file map. If the file map is not on the <span class="s11">FILEMAP </span>property or in the file, a file map will be built (unless <span class="s11">BUILDMAPFLG = NIL</span>).</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s11">USEMAPFLG = NIL</span>, the <span class="s11">FILEMAP </span>property and the file will not be checked for the file map. This allows you to recover in those cases where the file and its map for some reason do not agree. For example, if you use a text editor to change a symbolic file that contains a map (not recommended), inserting or deleting just one character will throw that map off. The functions which use file maps contain various integrity checks to enable them to detect that something is wrong, and to generate the error <span class="s11">FILEMAP DOES NOT AGREE WITH CONTENTS OF </span><span class="s16">FILE</span>. In such cases, you can set <span class="s11">USEMAPFLG </span>to <span class="s11">NIL</span>, causing the map contained in the file to be ignored, and then reexecute the operation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l40"><li><p class="s6" style="padding-top: 4pt;padding-left: 28pt;text-indent: -22pt;text-align: left;"><a name="bookmark19">COMPILER</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="602" height="3" alt="image" src="Image_051.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The compiler is contained in the standard Medley system. It may be used to compile functions defined in Medley, or to compile definitions stored in a file. The resulting compiled code may be stored as it is compiled, so as to be available for immediate use, or it may be written onto a file for subsequent loading.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The most common way to use the compiler is to use one of the file package functions, such as <span class="s11">MAKEFILE </span>(Chapter 17), which automatically updates source files, and produces compiled versions. However, it is also possible to compile individual functions defined in Medley, by directly calling the compiler using functions such as <span class="s11">COMPILE</span>. No matter how the compiler is called, the function <span class="s11">COMPSET </span>is called which asks you certain questions concerning the compilation. (<span class="s11">COMPSET </span>sets the free variables <span class="s11">LAPFLG</span>, <span class="s11">STRF</span>, <span class="s11">SVFLG</span>, <span class="s11">LCFIL </span>and <span class="s11">LSTFIL </span>which determine various modes of operation.) Those that can be answered &quot;yes&quot; or &quot;no&quot; can be answered with <span class="s11">YES</span>, <span class="s11">Y</span>, or <span class="s11">T </span>for &quot;yes&quot;; and <span class="s11">NO</span>, <span class="s11">N</span>, or <span class="s11">NIL </span>for &quot;no&quot;. The questions are:</p><p style="padding-top: 8pt;padding-left: 162pt;text-indent: -55pt;text-align: justify;"><span class="s15">LISTING? </span>This asks whether to generate a listing of the compiled code. The <span class="s11">LAP </span>and machine code are usually not of interest but can be helpful in debugging macros. Possible answers are:</p><ol id="l41"><li><p style="padding-top: 7pt;padding-left: 210pt;text-indent: -17pt;text-align: left;">Prints output of pass 1, the <span class="s11">LAP </span>macro code</p></li><li><p style="padding-top: 7pt;padding-left: 210pt;text-indent: -17pt;text-align: left;">Prints output of pass 2, the machine code</p><p class="s15" style="padding-top: 7pt;padding-left: 181pt;text-indent: 0pt;text-align: left;">YES <span class="p">Prints output of both passes</span></p><p class="s15" style="padding-top: 7pt;padding-left: 187pt;text-indent: 0pt;text-align: left;">NO <span class="p">Prints no listings</span></p><p style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;text-align: justify;">The variable <span class="s11">LAPFLG </span>is set to the answer.</p><p style="padding-top: 8pt;padding-left: 162pt;text-indent: -39pt;line-height: 94%;text-align: justify;"><span class="s15">FILE: </span>This question (which only appears if the answer to <span class="s11">LISTING? </span>is affirmative) ask where the compiled code listing(s) should be written. Answering <span class="s11">T </span>will print the listings at the terminal. The variable <span class="s11">LSTFIL </span>is set to the answer.</p><p style="padding-top: 8pt;padding-left: 161pt;text-indent: -60pt;line-height: 93%;text-align: justify;"><span class="s15">REDEFINE? </span>This question asks whether the functions compiled should be redefined to their compiled definitions. If this is answered <span class="s11">YES</span>, the compiled code is stored and the function definition changed, otherwise the function definition remains unchanged.</p><p style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The compiler does <i>not </i>respect the value of <span class="s11">DFNFLG </span>(Chapter 10) when it redefines functions to their compiled definitions. Therefore, if you set <span class="s11">DFNFLG </span>to <span class="s11">PROP </span>to completely avoid inadvertantly redefining something in your running system, you <i>must </i>not answer <span class="s11">YES </span>to this question.</p><p style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;text-align: justify;">The variable <span class="s11">STRF </span>is set to <span class="s11">T </span>(if this is answered <span class="s11">YES</span>) or <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 209pt;text-indent: -71pt;line-height: 94%;text-align: justify;"><span class="s15">SAVE EXPRS? </span>This question asks whether the original defining <span class="s11">EXPR</span>s of functions should be saved. If answered <span class="s11">YES</span>, then before redefining a function to its compiled definition, the <span class="s11">EXPR </span>definition is saved on the property list of the function name. Otherwise they are discarded.</p><p style="padding-top: 6pt;padding-left: 209pt;text-indent: 0pt;line-height: 92%;text-align: justify;">It is very useful to save the <span class="s11">EXPR </span>definitions, just in case the compiled function needs to be changed. The editing functions will retrieve this saved definition if it exists, rather than reading from a source file.</p><p style="padding-top: 6pt;padding-left: 209pt;text-indent: 0pt;text-align: justify;">The variable <span class="s11">SVFLG </span>is set to <span class="s11">T </span>(if this is answered <span class="s11">YES</span>) or <span class="s11">NIL</span>.</p><p style="padding-top: 8pt;padding-left: 209pt;text-indent: -76pt;line-height: 93%;text-align: justify;"><span class="s15">OUTPUT FILE? </span>This question asks whether (and where) the compiled definitions should be written into a file for later loading. If you answer with the name of a file, that file will be used. If you answer <span class="s11">Y </span>or <span class="s11">YES</span>, you will be asked the name of the file. If the file named is already open, it will continue to be used. If you answer <span class="s11">T </span>or <span class="s11">TTY</span><span class="s15">:</span>, the output will be typed on the teletype (not particularly useful). If you answer <span class="s11">N</span>, <span class="s11">NO</span>, or <span class="s11">NIL</span>, output will <i>not </i>be done.</p><p style="padding-top: 6pt;padding-left: 209pt;text-indent: 0pt;text-align: justify;">The variable <span class="s11">LCFIL </span>is set to the name of the file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">To make answering these questions easier, there are four other possible answers to the <span class="s11">LISTING?</span></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">question, which specify common compiling modes:</p><p class="s15" style="padding-top: 7pt;padding-left: 209pt;text-indent: -17pt;text-align: left;">S S<span class="p">ame as last setting. Uses the same answers to compiler questions as given for the last compilation.</span></p><p style="padding-top: 7pt;padding-left: 181pt;text-indent: 10pt;line-height: 164%;text-align: left;"><span class="s15">F </span>Compile to <span class="s15">F</span>ile, without redefining functions. <span class="s15">ST ST</span>ore new definitions, saving <span class="s11">EXPR </span>definitions<span class="s10">. </span><span class="s15">STF ST</span>ore new definitions; <span class="s15">F</span>orget <span class="s11">EXPR </span>definitions.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Implicit in these answers are the answers to the questions on disposition of compiled code and <span class="s11">EXPR </span>definitions, so the questions <span class="s11">REDEFINE? </span>and <span class="s11">SAVE EXPRS? </span>would not be asked if these answers were given.  <span class="s11">OUTPUT FILE? </span>would still be asked, however.  For example:</p><p class="s19" style="padding-top: 8pt;padding-left: 173pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">COMPILE((FACT FACT1 FACT2)) LISTING? ST</span></p><p class="s11" style="padding-left: 173pt;text-indent: 0pt;line-height: 88%;text-align: left;">OUTPUT FILE? FACT.DCOM (FACT COMPILING)</p><p class="s11" style="padding-left: 173pt;text-indent: 0pt;line-height: 9pt;text-align: left;">.</p><p class="s11" style="padding-left: 173pt;text-indent: 0pt;line-height: 9pt;text-align: left;">.</p><p class="s11" style="padding-left: 173pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(FACT REDEFINED)</p><p class="s11" style="padding-left: 173pt;text-indent: 0pt;line-height: 9pt;text-align: left;">.</p><p class="s11" style="padding-left: 173pt;text-indent: 0pt;line-height: 9pt;text-align: left;">.</p><p class="s11" style="padding-left: 173pt;text-indent: 0pt;line-height: 88%;text-align: left;">(FACT2 REDEFINED) (FACT FACT1 FACT2)</p><p class="s19" style="padding-left: 173pt;text-indent: 0pt;line-height: 9pt;text-align: left;"></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">This process caused the functions <span class="s11">FACT</span>, <span class="s11">FACT1</span>, and <span class="s11">FACT2 </span>to be compiled, redefined, and the compiled definitions also written on the file <span class="s11">FACT.DCOM </span>for subsequent loading.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Compiler Printout                                                                                                                                      </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">In Medley, for each function <span class="s16">FN </span>compiled, whether by <span class="s11">TCOMPL</span>, <span class="s11">RECOMPILE</span>, or <span class="s11">COMPILE</span>, the compiler prints:</p><p class="s11" style="padding-top: 8pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">(<i>FN </i>(<i>ARG</i><i>1 </i>... <i>ARG</i><i>N</i>) (uses: <i>VAR</i><i>1 </i>... <i>VAR</i><i>N</i>) (calls: <i>FN</i><i>1 </i>... <i>FN</i><i>N</i>))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">The message is printed at the beginning of the second pass of the compilation of <span class="s16">FN</span>. <span class="s11">(</span><span class="s16">ARG</span><span class="s18">1 </span><span class="s15">... </span><span class="s16">ARG</span><span class="s18">N</span><span class="s11">) </span>is the list of arguments to <span class="s16">FN</span>; following uses: are the free variables referenced or set in <span class="s16">FN </span>(not including global variables); following calls<span class="s11">: </span>are the undefined functions called within <span class="s16">FN</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">If the compilation of <span class="s16">FN </span>causes the generation of one or more auxilary functions, a compiler message will be printed for these functions before the message for <span class="s16">FN</span>, e.g.,</p><p class="s11" style="padding-top: 8pt;padding-left: 114pt;text-indent: 0pt;line-height: 108%;text-align: left;">(FOOA0027 (X) (uses: XX)) (FOO (A B))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">When compiling a block, the compiler first prints </span>(<i>BLKNAME BLKFN</i><i>1 </i><i>BLKFN</i><i>2 </i>...)<span class="p">. Then the normal message is printed for the entire block. The names of the arguments to the block are generated by suffixing </span># <span class="p">and a number to the block name, e.g., </span>(FOOBLOCK (FOOBLOCK#0 FOOBLOCK#1) <i>FREE- VARIABLES</i>)<span class="p">. Then a message is printed for each </span><span class="s9">entry </span><span class="p">to the block.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">In addition to the above output, both <span class="s11">RECOMPILE </span>and <span class="s11">BRECOMPILE </span>print the name of each function that is being copied from the old compiled file to the new compiled file. The normal compiler message is printed for each function that is actually compiled.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The compiler prints out error messages when it encounters problems compiling a function. For example:</p><p class="s11" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">----- In BAZ:</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">***** (BAZ - illegal RETURN)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="36" height="1" alt="image" src="Image_052.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The above error message indicates that an <span class="s11">illegal RETURN </span>compiler error occurred while trying to compile  the  function <span class="s11">BAZ</span>.  Some  compiler  errors  cause  the  compilation  to  terminate,  producing nothing; however, there are other compiler errors which do not stop compilation. The compiler error messages are described in the last section of this chapter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Compiler printout and error messages go to the file <span class="s11">COUTFILE</span>, initially <span class="s11">T</span>. <span class="s11">COUTFILE </span>can also be set to the name of a file opened for output, in which case all compiler printout will go to <span class="s11">COUTFILE</span>, i.e.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the compiler will compile &quot;silently.&quot; However, any error messages will be printed to both <span class="s11">COUTFILE</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">as well as <span class="s11">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Global Variables                                                                                                                                        </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">Variables that appear on the list </span>GLOBALVARS<span class="p">, or have the property </span>GLOBALVAR <span class="p">with value </span>T<span class="p">, or are declared with the </span>GLOBALVARS <span class="p">file package command, are called global variables. Such variables are always accessed through their top level value when they are used freely in a compiled function. In other words, a reference to the value of a global variable is equivalent to calling </span>GETTOPVAL <span class="p">on the variable, regardless of whether or not it is bound in the current access chain. Similarly, </span>(SETQ <i>VARIABLE VALUE</i>) <span class="p">will compile as </span>(SETTOPVAL (QUOTE <i>VARIABLE</i>) <i>VALUE</i>)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">All system parameters, unless otherwise specified, are declared as global variables. Thus, <i>rebinding </i>these variables in a deep bound system like Medley will not affect the behavior of the system: instead, the variables must be <i>reset </i>to their new values, and if they are to be restored to their original values, reset again. For example, you might write</p><p class="s11" style="padding-top: 8pt;padding-left: 162pt;text-indent: 0pt;line-height: 94%;text-align: left;">(SETQ <i>GLOBALVARIABLE NEWVALUE</i>) <i>FORM</i></p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(SETQ <i>GLOBALVARIABLE OLDVALUE</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">In this case, if an error occurred during the evaluation of <span class="s16">FORM</span>, or a Control-D was typed, the global variable would not be restored to its original value. The function <span class="s11">RESETVAR </span>provides a convenient way of resetting global variables in such a way that their values are restored even if an error occurred or Control-D is typed.</p><p style="padding-top: 6pt;padding-left: 138pt;text-indent: -30pt;line-height: 91%;text-align: left;">Note: The variables that a given function accesses as global variables can be determined by using the function <span class="s11">CALLS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Local Variables and Special Variables                                                                                                    </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In normal compiled and interpreted code, all variable bindings are accessible by lower level functions because the variable’s name is associated with its value. We call such variables <i>special </i>variables, or specvars. As mentioned earlier, the block compiler normally does <i>not </i>associate names with variable values. Such unnamed variables are not accessible from outside the function which binds them and are therefore <i>local </i>to that function. We call such unnamed variables local variables, or localvars.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The time economies of local variables can be achieved without block compiling by use of declarations. Using local variables will increase the speed of compiled code; the price is the work of writing the necessary specvar declarations for those variables which need to be accessed from outside the block.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">LOCALVARS <span class="p">and </span>SPECVARS <span class="p">are variables that affect compilation. During regular compilation,</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">SPECVARS <span class="p">is normally </span>T<span class="p">, and </span>LOCALVARS <span class="p">is </span>NIL <span class="p">or a list. This configuration causes all variables</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">bound in the functions being compiled to be treated as special <i>except </i>those that appear on <span class="s11">LOCALVARS</span>. During block compilation, <span class="s11">LOCALVARS </span>is normally <span class="s11">T </span>and <span class="s11">SPECVARS </span>is <span class="s11">NIL </span>or a list. All variables are then treated as local <i>except </i>those that appear on <span class="s11">SPECVARS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Declarations to set <span class="s11">LOCALVARS </span>and <span class="s11">SPECVARS </span>to other values, and therefore affect how variables are treated, may be used at several levels in the compilation process with varying scope.</p><ol id="l42"><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -6pt;text-align: justify;">The declarations may be included in the filecoms of a file, by using the <span class="s11">LOCALVARS </span>and <span class="s11">SPECVARS </span>file package commands. The scope of the declaration is then the entire file:</p><p class="s11" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">... (LOCALVARS . T) (SPECVARS X Y) ...</p></li><li><p style="padding-top: 7pt;padding-left: 60pt;text-indent: -6pt;line-height: 91%;text-align: left;">The declarations may be included in block declarations; the scope is then the block, e.g.,</p><p class="s11" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;line-height: 108%;text-align: left;">(BLOCKS ((FOOBLOCK FOO FIE (SPECVARS . T) (LOCALVARS X)))</p></li><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -6pt;text-align: justify;">The declarations may also appear in individual functions, or in <span class="s11">PROG</span>’s or <span class="s11">LAMBDA</span>’s within a function, using the <span class="s11">DECLARE </span>function. In this case, the scope of the declaration is the function or the <span class="s11">PROG </span>or <span class="s11">LAMBDA </span>in which it appears. <span class="s11">LOCALVARS </span>and <span class="s11">SPECVARS </span>declarations must appear immediately after the variable list in the function, <span class="s11">PROG</span>, or <span class="s11">LAMBDA</span>, but intervening comments are permitted. For example:</p><p class="s11" style="padding-top: 8pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(DEFINEQ ((FOO</p><p class="s11" style="padding-left: 138pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LAMBDA (X Y)</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">(DECLARE (LOCALVARS Y)) (PROG (X Y Z)</p><p class="s11" style="padding-left: 186pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(DECLARE (LOCALVARS X))</p><p class="s11" style="padding-left: 186pt;text-indent: 0pt;line-height: 10pt;text-align: left;">... ]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">If the above function is compiled (non-block), the outer <span class="s11">X </span>will be special, the <span class="s11">X </span>bound in the <span class="s11">PROG </span>will be local, and both bindings of <span class="s11">Y </span>will be local.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Declarations for <span class="s11">LOCALVARS </span>and <span class="s11">SPECVARS </span>can be used in two ways: either to cause variables to be treated the same whether the function(s) are block compiled or compiled normally, or to affect one compilation mode while not affecting the default in the other mode. For example:</p><p class="s11" style="padding-top: 7pt;padding-left: 96pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LAMBDA (X Y)</p><p class="s11" style="padding-left: 138pt;text-indent: 0pt;line-height: 88%;text-align: left;">(DECLARE (SPECVARS . T)) (PROG (Z) ... ]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">will cause <span class="s11">X</span>, <span class="s11">Y</span>, and <span class="s11">Z </span>to be specvars for both block and normal compilation while</p><p class="s11" style="padding-top: 7pt;padding-left: 96pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LAMBDA (X Y)</p><p class="s11" style="padding-left: 138pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(DECLARE (SPECVARS X))</p><p class="s11" style="padding-left: 138pt;text-indent: 0pt;line-height: 10pt;text-align: left;">... ]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">will make <span class="s11">X </span>a specvar when block compiling, but when regular compiling the declaration will have no effect, because the default value of specvars would be <span class="s11">T</span>, and therefore <i>both </i><span class="s11">X </span>and <span class="s11">Y </span>will be specvars by default.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Although <span class="s11">LOCALVARS </span>and <span class="s11">SPECVARS </span>declarations have the same form as other components of block declarations such as <span class="s11">(LINKFNS . T)</span>, their operation is somewhat different because the two variables are not independent. <span class="s11">(SPECVARS . T) </span>will cause <span class="s11">SPECVARS </span>to be set to <span class="s11">T</span>, and <span class="s11">LOCALVARS </span>to be set to <span class="s11">NIL</span>. <span class="s11">(SPECVARS V1 V2 ...) </span>will have <i>no </i>effect if the value of <span class="s11">SPECVARS </span>is <span class="s11">T</span>, but if it is a list (or <span class="s11">NIL</span>), <span class="s11">SPECVARS </span>will be set to the union of its prior value and <span class="s11">(V1 V2 ...)</span>. The operation of <span class="s11">LOCALVARS </span>is analogous. Thus, to affect both modes of compilation one of the two (<span class="s11">LOCALVARS </span>or <span class="s11">SPECVARS</span>) must be declared <span class="s11">T </span>before specifying a list for the other.</p><p style="padding-top: 7pt;padding-left: 138pt;text-indent: -30pt;line-height: 91%;text-align: justify;">Note: The variables that a given function binds as local variables or accesses as special variables can be determined by using the function <span class="s11">CALLS</span>.</p><p style="padding-top: 7pt;padding-left: 138pt;text-indent: -30pt;line-height: 93%;text-align: justify;">Note: <span class="s11">LOCALVARS </span>and <span class="s11">SPECVARS </span>declarations affect the compilation of local variables within a function, but the arguments to functions are always accessible as specvars. This can be changed by redefining the following function:</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>DASSEM.SAVELOCALVARS </b><i>FN</i>)                                      <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">This function is called by the compiler to determine whether argument information for <span class="s16">FN </span>should be written on the compiled file for <span class="s16">FN</span>. If it returns <span class="s11">NIL</span>, the argument information is <i>not </i>saved, and the function is stored with arguments <span class="s11">U</span>, <span class="s11">V</span>, <span class="s11">W</span>, etc instead of the originals.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Initially, <span class="s11">DASSEM.SAVELOCALVARS </span>is defined to return <span class="s11">T</span>. <span class="s11">(MOVD ’NILL ’DASSEM.SAVELOCALVARS) </span>causes the compiler to retain no local variable or argument names. Alternatively, <span class="s11">DASSEM.SAVELOCALVARS </span>could be redefined as a more complex predicate, to allow finer discrimination.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Constants                                                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Interlisp allows the expression of constructions which are intended to be description of their constant values. The following functions are used to define constant values. The function <span class="s11">SELECTC </span>provides a mechanism for comparing a value to a number of constants.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>CONSTANT </b><i>X</i>)                                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">This function enables you to define that the expression <span class="s16">X </span>should be treated as a &quot;constant&quot; value. When <span class="s11">CONSTANT </span>is interpreted, <span class="s16">X </span>is evaluted each time it is encountered. If the <span class="s11">CONSTANT </span>form is compiled, however, the expression will be evaluated only once.</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">If the value of </span><i>X </i><span class="p">has a readable print name, then it will be evaluated at compile-time, and the value will be saved as a literal in the compiled function’s definition, as if </span>(QUOTE <i>VALUE-OF-EXPRESSION</i>) <span class="p">had appeared instead of </span>(CONSTANT <i>EXPRESSION</i>)<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If the value of <span class="s16">X </span>does not have a readable print name, then the expression <span class="s16">X </span>itself will be saved with the function, and it will be evaluated when the function is first loaded. The</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">value will then be stored in the function’s literals, and will be retrieved on future references.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If a program needed a list of 30 <span class="s11">NIL</span>s, you could specify <span class="s11">(CONSTANT (to 30 collect NIL)) </span>instead of <span class="s11">(QUOTE (NIL NIL ...))</span>. The former is more concise and displays the important parameter much more directly than the latter.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">CONSTANT <span class="p">can also be used to denote values that cannot be quoted directly, such as</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(CONSTANT (PACK NIL))<span class="p">, </span>(CONSTANT (ARRAY 10))<span class="p">. It is also useful to</span></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">parameterize quantities that are constant at run time but may differ at compile time, e.g., <span class="s11">(CONSTANT BITSPERWORD) </span>in a program is exactly equivalent to 36, if the variable <span class="s11">BITSPERWORD </span>is bound to 36 when the <span class="s11">CONSTANT </span>expression is evaluated at compile time.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Whereas the function <span class="s11">CONSTANT </span>attempts to evaluate the expression as soon as possible (compile-time, load-time, or first-run-time), other options are available, using the folowing two function:</p><p class="s11" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>LOADTIMECONSTANT </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">CONSTANT</span>, except that the evaluation of <span class="s16">X </span>is deferred until the compiled code for the containing function is loaded in. For example, <span class="s11">(LOADTIMECONSTANT (DATE)) </span>will return the date the code was loaded. If <span class="s11">LOADTIMECONSTANT </span>is interpreted, it merely returns the value of <span class="s16">X</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>DEFERREDCONSTANT </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Similar to <span class="s11">CONSTANT</span>, except that the evaluation of <span class="s16">X </span>is always deferred until the compiled function is first run. This is useful when the storage for the constant is excessive so that it shouldn’t be allocated until (unless) the function is actually invoked. If <span class="s11">DEFERREDCONSTANT </span>is interpreted, it merely returns the value of <span class="s16">X</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 28pt;text-indent: 0pt;text-align: right;"><span class="s11">(</span><b>CONSTANTS </b>VAR<span class="s18">1 </span>VAR<span class="s18">2 </span>... VAR<span class="s18">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Defines <span class="s16">VAR</span><span class="s18">1</span>, <span class="s11">... </span><span class="s16">VAR</span><span class="s18">N </span>(unevaluated) to be compile-time constants. Whenever the compiler encounters a (free) reference to one of these constants, it will compile the form <span class="s11">(CONSTANT </span><span class="s16">VAR</span><span class="s18">i</span><span class="s11">) </span>instead.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 14pt;text-align: left;">If <span class="s16">VAR</span><span class="s18">i </span>is a list of the form <span class="s11">(</span><span class="s16">VAR FORM</span><span class="s11">)</span>, a free reference to the variable will compile as</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(CONSTANT <i>FORM</i>)<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: left;">The compiler prints a warning if user code attempts to bind a variable previously declared as a constant.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Constants can be saved using the <span class="s11">CONSTANTS </span>file package command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Compiling Function Calls                                                                                                                         </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When compiling the call to a function, the compiler must know the type of the function, to determine how the arguments should be prepared (evaluated / unevaluated, spread / nospread). There are three seperate cases: lambda, nlambda spread, and nlambda nospread functions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">To determine which of these three cases is appropriate, the compiler will first look for a definition among the functions in the file that is being compiled. The function can be defined anywhere in any of the files given as arguments to <span class="s11">BCOMPL</span>, <span class="s11">TCOMPL</span>, <span class="s11">BRECOMPILE or RECOMPILE</span>. If the function is not contained in the file, the compiler will look for other information in the variables <span class="s11">NLAMA</span>, <span class="s11">NLAML</span>, and <span class="s11">LAMS</span>, which can be set by you:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">NLAMA                                                          <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">(For <span class="s11">NLAM</span>bda <span class="s11">A</span>toms) A list of functions to be treated as nlambda nospread functions by the compiler.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">NLAML                                                          <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">(For <span class="s11">NLAM</span>bda <span class="s11">L</span>ist) A list of functions to be treated as nlambda spread functions by the compiler.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">LAMS                                                           <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">A list of functions to be treated as lambda functions by the compiler. Note that including functions on <span class="s11">LAMS </span>is only necessary to override in-core nlambda definitions, since in the absence of other information, the compiler assumes the function is a lambda.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If the function is not contained in a file, or on the lists <span class="s11">NLAMA</span>, <span class="s11">NLAML</span>, or <span class="s11">LAMS</span>, the compiler will look for a current definition in the Interlisp system, and use its type. If there is no current definition, next <span class="s11">COMPILEUSERFN </span>is called:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">COMPILEUSERFN                                                  <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">When compiling a function call, if the function type cannot be found by looking in files, the variables </span>NLAMA<span class="p">, </span>NLAML<span class="p">, or </span>LAMS<span class="p">, or at a current definition, then if the value of </span>COMPILEUSERFN <span class="p">is not </span>NIL<span class="p">, the compiler calls (the value of) </span>COMPILEUSERFN <span class="p">giving it as arguments </span>CDR <span class="p">of the form and the form itself, i.e., the compiler does </span>(APPLY* COMPILEUSERFN (CDR <i>FORM</i>) <i>FORM</i>)<span class="p">. If a non-</span>NIL <span class="p">value is returned, it is compiled instead of </span><i>FORM</i><span class="p">. If </span>NIL <span class="p">is returned, the compiler compiles the original expression as a call to a lambda spread that is not yet defined.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">COMPILEUSERFN <span class="p">is only called when the compiler encounters a </span><span class="s9">list </span>CAR <span class="p">of which is not the name of a defined function. You can instruct the compiler about how to compile other data types via </span>COMPILETYPELST<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">CLISP uses <span class="s11">COMPILEUSERFN </span>to tell the compiler how to compile iterative statements, <span class="s11">IF- THEN-ELSE </span>statements, and pattern match constructs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the compiler cannot determine the function type by any of the means above, it assumes that the function is a lambda function, and its arguments are to be evaluated.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If there are nlambda functions called from the functions being compiled, and they are only defined in a separate file, they must be included on <span class="s11">NLAMA </span>or <span class="s11">NLAML</span>, or the compiler will incorrectly assume that their arguments are to be evaluated, and compile the calling function correspondingly. This is only necessary if the compiler does not &quot;know&quot; about the function. If the function is defined at compile time, or is handled via a macro, or is contained in the same group of files as the functions that call it, the compiler will automatically handle calls to that function correctly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">FUNCTION and Functional Arguments                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">Compiling the function <span class="s11">FUNCTION </span>may involve creating and compiling a seperate &quot;auxiliary function&quot;, which will be called at run time. An auxiliary function is named by attaching a <span class="s11">GENSYM </span>to the end of the name of the function in which they appear, e.g., <span class="s11">FOOA0003</span>. For example, suppose <span class="s11">FOO </span>is defined as <span class="s11">(LAMBDA (X) ... (FOO1 X (FUNCTION ...)) ...) </span>and compiled. When <span class="s11">FOO </span>is run, <span class="s11">FOO1 </span>will be called with two arguments, <span class="s11">X</span>, and <span class="s11">FOOA000</span><span class="s16">N </span>and <span class="s11">FOO1 </span>will call <span class="s11">FOOA000</span><span class="s16">N </span>each time it uses its functional argument.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">Compiling <span class="s11">FUNCTION </span>will <i>not </i>create an auxiliary function if it is a functional argument to a function that compiles open, such as most of the mapping functions (<span class="s11">MAPCAR</span>, <span class="s11">MAPLIST</span>, etc.). A considerable savings in time could be achieved by making <span class="s11">FOO1 </span>compile open via a computed macro, e.g.</p><p class="s11" style="padding-top: 8pt;padding-left: 95pt;text-indent: 0pt;text-align: left;">(PUTPROP ’FOO1 ’MACRO</p><p class="s11" style="padding-left: 130pt;text-indent: 0pt;line-height: 10pt;text-align: left;">’(Z (LIST (SUBST (CADADR Z)</p><p class="s11" style="padding-left: 185pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(QUOTE FN)</p><p class="s16" style="padding-left: 161pt;text-indent: 24pt;line-height: 88%;text-align: left;">DEF<span class="s11">) (CAR Z)))</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;"><span class="s16">DEF </span>is the definition of <span class="s11">FOO1 </span>as a function of just its first argument, and <span class="s11">FN </span>is the name used for its functional argument in its definition. In this case, <span class="s11">(FOO1 X (FUNCTION ...)) </span>would compile as an expression, containing the argument to <span class="s11">FUNCTION </span>as an open <span class="s11">LAMBDA </span>expression. Thus you save not only the function call to <span class="s11">FOO1</span>, but also each of the function calls to its functional argument. For example, if <span class="s11">FOO1 </span>operates on a list of length ten, eleven function calls will be saved. Of course, this savings in time costs space, and you must decide which is more important.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Open Functions                                                                                                                                         </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">When a function is called from a compiled function, a system routine is invoked that sets up the parameter and control push lists as necessary for variable bindings and return information. If the amount of time spent <i>inside </i>the function is small, this function calling time will be a significant percentage of the total time required to use the function. Therefore, many &quot;small&quot; functions, e.g., <span class="s11">CAR</span>, <span class="s11">CDR</span>, <span class="s11">EQ</span>, <span class="s11">NOT</span>, <span class="s11">CONS </span>are always compiled &quot;open&quot;, i.e., they do not result in a function call. Other larger</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">functions such as <span class="s11">PROG</span>, <span class="s11">SELECTQ, MAPC</span>, etc. are compiled open because they are frequently used. You can make other functions compile open via <span class="s11">MACRO </span>definitions. You can also affect the compiled code via <span class="s11">COMPILEUSERFN </span>and <span class="s11">COMPILETYPELST</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">COMPILETYPELST                                                                                                                                    </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 80pt;text-indent: 0pt;line-height: 91%;text-align: center;">Most  of  the  compiler’s  mechanism  deals  with  how  to  handle  forms  (lists)  and  variables  (symbols). You can affect the compiler’s behaviour with respect to lists and literal atoms in a number of  ways,</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">e.g. macros, declarations, <span class="s11">COMPILEUSERFN</span>, etc. <span class="s11">COMPILETYPELST </span>allows you to tell the compiler what to do when it encounters a data type <i>other </i>than a list or an atom. It is the facility in the compiler that corresponds to <span class="s11">DEFEVAL </span>for the interpreter.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">COMPILETYPELST                                                 <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">A list of elements of the form </span>(<i>TYPENAME </i>. <i>FUNCTION</i>)<span class="p">. Whenever the compiler encounters a datum that is not a list and not an atom (or a number) in a context where the datum is being evaluated, the type name of the datum is looked up on </span>COMPILETYPELST<span class="p">. If an entry appears </span>CAR <span class="p">of which is equal to the type name, </span>CDR <span class="p">of that entry is applied to the datum.  If the value returned by this application is </span><span class="s9">not </span>EQ <span class="p">to the datum, then that value is compiled instead. If the value </span><span class="s9">is </span>EQ <span class="p">to the datum, or if there is no entry on </span>COMPILETYPELST <span class="p">for this type name, the compiler simply compiles the datum as </span>(QUOTE <i>DATUM</i>)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 47pt;text-indent: 0pt;text-align: center;">Compiling CLISP                                                                                                                                       </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">Since the compiler does not know about CLISP, in order to compile functions containing CLISP constructs, the definitions must first be <span class="s11">DWIMIFY</span>ed. You can automate this process in several ways:</p><ol id="l43"><ol id="l44"><li><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -24pt;line-height: 12pt;text-align: justify;">If the variable <span class="s11">DWIMIFYCOMPFLG </span>is <span class="s11">T</span>, the compiler will always <span class="s11">DWIMIFY</span></p><p style="padding-left: 107pt;text-indent: 0pt;line-height: 12pt;text-align: left;">expressions before compiling them. <span class="s11">DWIMIFYCOMPFLG </span>is initially <span class="s11">NIL</span>.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -6pt;text-align: justify;">If a file has the property <span class="s11">FILETYPE </span>with value <span class="s11">CLISP </span>on its property list, <span class="s11">TCOMPL</span>, <span class="s11">BCOMPL</span>, <span class="s11">RECOMPILE</span>, and <span class="s11">BRECOMPILE </span>will operate as though <span class="s11">DWIMIFYCOMPFLG </span>is <span class="s11">T </span>and <span class="s11">DWIMIFY </span>all expressions before compiling.</p></li><li><p style="padding-top: 7pt;padding-left: 108pt;text-indent: -6pt;text-align: justify;">If the function definition has a local <span class="s11">CLISP </span>declaration, including a null declaration, i.e., just <span class="s11">(CLISP:)</span>, the definition will be automatically <span class="s11">DWIMIFY</span>ed before compiling.</p></li></ol></ol><p style="padding-top: 7pt;padding-left: 150pt;text-indent: -24pt;text-align: justify;">Note: <span class="s11">COMPILEUSERFN </span>is defined to call <span class="s11">DWIMIFY </span>on iterative statements, <span class="s11">IF- THEN </span>statements, and <span class="s11">fetch</span>, <span class="s11">replace</span>, and <span class="s11">match </span>expressions, i.e., any CLISP construct which can be recognized by its <span class="s11">CAR </span>of form. Thus, if the only CLISP constructs in a function appear inside of iterative statements, <span class="s11">IF </span>statements, etc., the function does not have to be dwimified before compiling.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s11">DWIMIFY </span>is ever unsuccessful in processing a CLISP expression, it will print the error message <span class="s11">UNABLE TO DWIMIFY </span>followed by the expression, and go into a break unless <span class="s11">DWIMESSGAG = T</span>. In this case, the expression is just compiled as is, i.e. as though CLISP had not been enabled.  You can exit the break in one of these ways:</p><ol id="l45"><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -6pt;text-align: left;">Type <span class="s11">OK </span>to the break, which will cause the compiler to try again, e.g. you could define some missing records while in the break, and then continue</p></li><li><p style="padding-top: 6pt;padding-left: 59pt;text-indent: -6pt;text-align: left;">Type <span class="s19"></span>, which will cause the compiler to simply compile the expression as is, i.e. as though CLISP had not been enabled in the first place</p></li><li><p style="padding-top: 6pt;padding-left: 59pt;text-indent: -3pt;text-align: left;">Return an expression to be compiled in its place by using the <span class="s11">RETURN </span>break command.</p><p style="padding-top: 6pt;padding-left: 102pt;text-indent: -24pt;line-height: 93%;text-align: justify;">Note: <span class="s11">TCOMPL</span>, <span class="s11">BCOMPL</span>, <span class="s11">RECOMPILE</span>, and <span class="s11">BRECOMPILE </span>all scan the entire file before doing any compiling, and take note of the names of all functions that are defined in the file as well as the names of all variables that are set by adding them to <span class="s11">NOFIXFNSLST </span>and <span class="s11">NOFIXVARSLST</span>, respectively. Thus, if a function is not currently defined, but <i>is </i>defined in the file being compiled, when <span class="s11">DWIMIFY </span>is called before compiling, it will not attempt to interpret the function name as CLISP when it appears as <span class="s11">CAR </span>of a form. <span class="s11">DWIMIFY </span>also takes into account variables that have been declared to be <span class="s11">LOCALVARS</span>, or <span class="s11">SPECVARS</span>, either via block declarations or <span class="s11">DECLARE </span>expressions in the function being compiled, and does not attempt spelling correction on these variables. The declaration <span class="s11">USEDFREE </span>may also be used to declare variables simply used freely in a function. These variables will also be left alone by <span class="s11">DWIMIFY</span>. Finally, <span class="s11">NOSPELLFLG </span>is reset to <span class="s11">T </span>when compiling functions from a file (as opposed to from their in-core definition) so as to suppress spelling correction.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Compiler Functions                                                                                                                                  </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Normally, the compiler is envoked through file package commands that keep track of the state of functions, and manage a set of files, such as <span class="s11">MAKEFILE</span>. However, it is also possible to explicitly call the compiler using one of a number of functions. Functions may be compiled from in-core definitions (via <span class="s11">COMPILE</span>), or from definitions in files (<span class="s11">TCOMPL</span>), or from a combination of in-core and file definitions (<span class="s11">RECOMPILE</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">TCOMPL <span class="p">and </span>RECOMPILE <span class="p">produce &quot;compiled&quot; files. Compiled files usually have the same name as the symbolic file they were made from, suffixed with </span>DCOM <span class="p">(the compiled file extension is stored as the value of the variable </span>COMPILE.EXT<span class="p">). The file name is constructed from the name field only, e.g., </span>(TCOMPL ’&lt;BOBROW&gt;FOO.TEM;3) <span class="p">produces </span>FOO.DCOM <span class="p">on the connected directory. The version number will be the standard default.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">A &quot;compiled file&quot; contains the same expressions as the original symbolic file, except for the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l46"><li><p style="padding-left: 108pt;text-indent: -3pt;text-align: justify;">A special <span class="s11">FILECREATED </span>expression appears at the front of the file which contains information used by the file package, and which causes the message <span class="s11">COMPILED ON </span><span class="s16">DATE </span>to be printed when the file is loaded (the actual string printed is the value of <span class="s11">COMPILEHEADER</span>).</p></li><li><p style="padding-top: 7pt;padding-left: 108pt;text-indent: -6pt;text-align: justify;">Every <span class="s11">DEFINEQ </span>in the symbolic file is replaced by the corresponding compiled definitions in the compiled file.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -6pt;text-align: justify;">Expressions following a <span class="s11">DONTCOPY </span>tag inside of a <span class="s11">DECLARE</span><b>: </b>that appears in the symbolic file are not copied to the compiled file.</p></li></ol></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The compiled definitions appear at the front of the compiled file, i.e., before the other expressions in the symbolic file, <i>regardless of where they appear in the symbolic file. </i>The only exceptions are expressions that follow a <span class="s11">FIRST </span>tag inside of a <span class="s11">DECLARE</span><b>:</b>. This &quot;compiled&quot; file can be loaded into any Interlisp system with <span class="s11">LOAD</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 150pt;text-indent: -24pt;line-height: 94%;text-align: justify;"><span class="p">Note: When a function is compiled from its in-core definition (as opposed to being compiled from a definition in a file), and the function has been modified by </span>BREAK<span class="p">, </span>TRACE<span class="p">, </span>BREAKIN<span class="p">, or </span>ADVISE<span class="p">, it is first restored to its original state, and a message is printed out, e.g., </span>FOO UNBROKEN<span class="p">. If the function is not defined by an expr definition, the value of the function’s </span>EXPR <span class="p">property is used for the compilation, if there is one. If there is no </span>EXPR <span class="p">property, and the compilation is being performed by </span>RECOMPILE<span class="p">, the definition of the function is obtained from the file (using </span>LOADFNS<span class="p">). Otherwise, the compiler prints </span>(<span class="s9">FN </span>NOT COMPILEABLE)<span class="p">, and goes on to the next function.</span></p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>COMPILE </b><i>X FLG</i>)                                                <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">X </span>is a list of functions (if atomic, <span class="s11">(LIST </span><span class="s16">X</span><span class="s11">) </span>is used). <span class="s11">COMPILE </span>first asks the standard compiler questions, and then compiles each function on <span class="s16">X</span>, using its in-core definition. Returns <span class="s16">X</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If compiled definitions are being written to a file, the file is closed unless <span class="s16">FLG </span><span class="s11">= T</span>.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>COMPILE1 </b><i>FN DEF</i>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Compiles <span class="s16">DEF</span>, redefining <span class="s16">FN </span>if <span class="s11">STRF = T </span>(<span class="s11">STRF </span>is one of the variables set by <span class="s11">COMPSET</span>). <span class="s11">COMPILE1 </span>is used by <span class="s11">COMPILE</span>, <span class="s11">TCOMPL</span>, and <span class="s11">RECOMPILE.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">DWIMIFYCOMPFLG </span>is <span class="s11">T</span>, or <span class="s16">DEF </span>contains a CLISP declaration, <span class="s16">DEF </span>is dwimified before compiling.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>TCOMPL </b><i>FILES</i>)                                                 <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">TCOMPL <span class="p">is used to &quot;compile files&quot;; given a symbolic </span>LOAD <span class="p">file (e.g., one created by </span>MAKEFILE<span class="p">), it produces a &quot;compiled file&quot;. </span><i>FILES </i><span class="p">is a list of symbolic files to be compiled (if atomic, </span>(LIST <i>FILES</i>) <span class="p">is used). </span>TCOMPL <span class="p">asks the standard compiler questions, except for &quot;</span>OUTPUT FILE:<span class="p">&quot;. The output from the compilation of each symbolic file is written on a file of the same name suffixed with </span>DCOM<span class="p">, e.g., </span>(TCOMPL ’(SYM1 SYM2)) <span class="p">produces two files, </span>SYM1.DCOM <span class="p">and </span>SYM2.DCOM<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">TCOMPL <span class="p">processes the files one at a time, reading in the entire file. For each </span>FILECREATED <span class="p">expression, the list of functions that were marked as changed by the file package is noted, and the </span>FILECREATED <span class="p">expression is written onto the output file. For each </span>DEFINEQ <span class="p">expression, </span>TCOMPL <span class="p">adds any nlambda functions defined in the </span>DEFINEQ <span class="p">to </span>NLAMA <span class="p">or </span>NLAML<span class="p">, and adds lambda functions to </span>LAMS<span class="p">, so that calls to these functions will be compiled correctly. </span>NLAMA<span class="p">, </span>NLAML<span class="p">, and </span>LAMS <span class="p">are rebound to their top level values (using </span>RESETVAR<span class="p">) by all of the compiling functions, so that any additions to these lists while inside of these functions will not propagate outside. Expressions beginning with </span>DECLARE: <span class="p">are processed specially. All other expressions are collected to be subsequently written onto the output file.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">After processing the file in this fashion, <span class="s11">TCOMPL </span>compiles each function, except for those functions which appear on the list <span class="s11">DONTCOMPILEFNS </span>(initially <span class="s11">NIL</span>), and writes the compiled definition onto the output file. <span class="s11">TCOMPL </span>then writes onto the output file the other expressions found in the symbolic file. <span class="s11">DONTCOMPILEFNS </span>might be used for functions that compile open, since their definitions would be superfluous when operating with the compiled file. Note that <span class="s11">DONTCOMPILEFNS </span>can be set via block declarations.</p><p style="padding-top: 7pt;padding-left: 132pt;text-indent: -30pt;text-align: justify;">Note: If the rootname of a file has the property <span class="s11">FILETYPE </span>with value <span class="s11">CLISP</span>, or value a list containing <span class="s11">CLISP</span>, <span class="s11">TCOMPL </span>rebinds <span class="s11">DWIMIFYCOMPFLG </span>to <span class="s11">T </span>while compiling the functions on <span class="s16">FILE</span>, so the compiler will <span class="s11">DWIMIFY </span>all expressions before compiling them.</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">TCOMPL <span class="p">returns a list of the names of the output files. All files are properly terminated and closed. If the compilation of any file is aborted via an error or Control-D, all files are properly closed, and the (partially complete) compiled file is deleted.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>RECOMPILE </b><i>PFILE CFILE FNS</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The purpose of <span class="s11">RECOMPILE </span>is to allow you to update a compiled file without recompiling every function in the file. <span class="s11">RECOMPILE </span>does this by using the results of a previous compilation. It produces a compiled file similar to one that would have been produced by <span class="s11">TCOMPL</span>, but at a considerable savings in time by only compiling selected functions, and copying the compiled definitions for the remainder of the functions in the file from an earlier <span class="s11">TCOMPL </span>or <span class="s11">RECOMPILE </span>file.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s16">PFILE </span>is the name of the <b>P</b>retty file (source file) to be compiled; <span class="s16">CFILE </span>is the name of the <b>C</b>ompiled file containing compiled definitions that may be copied. <span class="s16">FNS </span>indicates which functions in <span class="s16">PFILE </span>are to be recompiled, e.g., have been changed or defined for the first time since <span class="s16">CFILE </span>was made. Note that <span class="s16">PFILE</span>, not <span class="s16">FNS</span>, drives <span class="s11">RECOMPILE</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s11">RECOMPILE </span>asks the standard compiler questions, except for &quot;<span class="s11">OUTPUT FILE:</span>&quot;. As with <span class="s11">TCOMPL</span>, the output automatically goes to <span class="s16">PFILE</span><span class="s11">.DCOM</span>. <span class="s11">RECOMPILE </span>processes <span class="s16">PFILE </span>the same as does <span class="s11">TCOMPL </span>except that <span class="s11">DEFINEQ </span>expressions are not actually read into core. Instead, <span class="s11">RECOMPILE </span>uses the filemap to obtain a list of the functions contained in <span class="s16">PFILE</span>. The filemap enables <span class="s11">RECOMPILE </span>to skip over the <span class="s11">DEFINEQ</span>s in the file by simply resetting the file pointer, so that in most cases the scan of the symbolic file is very fast (the only processing required is the reading of the non-<span class="s11">DEFINEQ</span>s and the processing of the <span class="s11">DECLARE: </span>expressions as with <span class="s11">TCOMPL</span>). A map is built if the symbolic file does not</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">already contain one, for example if it was written in an earlier system, or with</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">BUILDMAPFLG = NIL<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">After this initial scan of <span class="s16">PFILE</span>, <span class="s11">RECOMPILE </span>then processes the functions defined in the file. For each function in <span class="s16">PFILE</span>, <span class="s11">RECOMPILE </span>determines whether or not the function is to be (re)compiled. Functions that are members of <span class="s11">DONTCOMPILEFNS </span>are simply ignored. Otherwise, a function is recompiled if :</p><ol id="l47"><li><p class="s16" style="padding-top: 6pt;padding-left: 180pt;text-indent: -18pt;text-align: left;">FNS <span class="p">is a list and the function is a member of that list</span></p></li><li><p class="s11" style="padding-top: 6pt;padding-left: 180pt;text-indent: -18pt;text-align: left;"><i>FNS </i>= T <span class="p">or </span>EXPRS <span class="p">and the function is defined by an expr definition</span></p></li><li><p class="s16" style="padding-top: 6pt;padding-left: 180pt;text-indent: -18pt;line-height: 12pt;text-align: left;">FNS <span class="s11">= CHANGES </span><span class="p">and the function is marked as having been changed in the</span></p><p class="s11" style="padding-left: 179pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FILECREATED <span class="p">expression in </span><i>PFILE</i></p></li><li><p class="s16" style="padding-top: 6pt;padding-left: 180pt;text-indent: -18pt;text-align: left;">FNS <span class="s11">= ALL</span></p></li></ol><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If a function is not to be recompiled, <span class="s11">RECOMPILE </span>obtains its compiled definition from <span class="s16">CFILE</span>, and copies it (and all generated subfunctions) to the output file, <span class="s16">PFILE</span><span class="s11">.DCOM</span>. If the function does not appear on <span class="s16">CFILE</span>, <span class="s11">RECOMPILE </span>simply recompiles it. Finally, after processing all functions, <span class="s11">RECOMPILE </span>writes out all other expressions that were collected in the prescan of <span class="s16">PFILE</span>.</p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: -30pt;line-height: 92%;text-align: justify;">Note: If <span class="s16">FNS </span><span class="s11">= ALL</span>, <span class="s16">CFILE </span>is superfluous, and does not have to be specified. This option may be used to compile a symbolic file that has never been compiled before, but which has already been loaded (since using <span class="s11">TCOMPL </span>would require reading the file in a second time).</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">CFILE </span><span class="s11">= NIL</span>, <span class="s16">PFILE</span><span class="s11">.DCOM </span>(the old version of the output file) is used for copying <i>from</i>. If both <span class="s16">FNS </span>and <span class="s16">CFILE </span>are <span class="s11">NIL</span>, <span class="s16">FNS </span>is set to the value of <span class="s11">RECOMPILEDEFAULT</span>, which is initially <span class="s11">CHANGES</span>. Thus you can perform his edits, dump the file, and then simply <span class="s11">(RECOMPILE ’</span><span class="s16">FILE</span><span class="s11">) </span>to update the compiled file.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The value of <span class="s11">RECOMPILE </span>is the file name of the new compiled file, <span class="s16">PFILE</span><span class="s11">.DCOM</span>. If <span class="s11">RECOMPILE </span>is aborted due to an error or Control-D, the new (partially complete) compiled file will be closed and deleted.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">RECOMPILE <span class="p">is designed to allow you to conveniently and </span><span class="s9">efficiently </span><span class="p">update a compiled file, even when the corresponding symbolic file has not been (completely) loaded. For example, you can perform a </span>LOADFROM <span class="p">to &quot;notice&quot; a symbolic file, edit the functions he wants to change (the editor will automatically load those functions not already loaded), call </span>MAKEFILE <span class="p">to update the symbolic file (</span>MAKEFILE <span class="p">will copy the unchanged functions from the old symbolic file), and then perform </span>(RECOMPILE <i>PFILE</i>)<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -30pt;line-height: 94%;text-align: justify;">Note: Since <span class="s11">PRETTYDEF </span>automatically outputs a suitable <span class="s11">DECLARE: </span>expression to indicate which functions in the file (if any) are defined as <span class="s11">NLAMBDA</span>s, calls to these functions will be handled correctly, even though the <span class="s11">NLAMBDA </span>functions themselves may never be loaded, or even looked at, by <span class="s11">RECOMPILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Block Compiling                                                                                                                                        </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In Interlisp-10, block compiling provides a way of compiling several functions into a single block. Function calls between the component functions of the block are very fast. Thus, compiling a block consisting of just a single recursive function may be yield great savings if the function calls itself many times. The output of a block compilation is a single, usually large, function. Calls from within the block to functions outside of the block look like regular function calls. A block can be entered via several different functions, called entries. These must be specified when the block is compiled.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">In Medley, block compiling is handled somewhat differently; block compiling provides a mechanism for hiding function names internal to a block, but it does not provide a performance improvement. Block compiling in Medley works by automatically renaming the block functions with special names, and calling these functions with the normal function-calling mechanisms. Specifically, a function <span class="s16">FN </span>is renamed to <span class="s11">\</span><span class="s16">BLOCK-NAME</span><span class="s11">/</span><span class="s16">FN</span>. For example, function <span class="s11">FOO </span>in block <span class="s11">BAR </span>is renamed to <span class="s11">\BAR/FOO</span>. Note that it is possible with this scheme to break functions internal to a block.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Block Declarations</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Block compiling a file frequently involves giving the compiler a lot of information about the nature and structure of the compilation, e.g., block functions, entries, specvars, etc. To help with this, there is the <span class="s11">BLOCKS </span>file package command, which has the form:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">(BLOCKS <i>BLOCK</i><i>1</i>... <i>BLOCK</i><i>N</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">where each <span class="s16">BLOCK</span><span class="s18">i </span>is a block declaration. The <span class="s11">BLOCKS </span>command outputs a <span class="s11">DECLARE: </span>expression, which is noticed by <span class="s11">BCOMPL </span>and <span class="s11">BRECOMPILE</span>. <span class="s11">BCOMPL </span>and <span class="s11">BRECOMPILE </span>are sensitive to these declarations and take the appropriate action.</p><p style="padding-top: 6pt;padding-left: 101pt;text-indent: -24pt;line-height: 93%;text-align: justify;">Note: Masterscope includes a facility for checking the block declarations of a file or files for various anomalous conditions, e.g. functions in block declarations which aren’t on the file(s), functions in <span class="s11">ENTRIES </span>not in the block, variables that may not need to be <span class="s11">SPECVARS </span>because they are not used freely below the places they are bound, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">A block declaration is a list of the form:</p><p class="s11" style="padding-top: 6pt;padding-left: 113pt;text-indent: 0pt;line-height: 93%;text-align: left;">(<i>BLKNAME BLKFN</i><i>1 </i>... <i>BLKFN</i><i>M</i></p><p class="s11" style="padding-left: 120pt;text-indent: 0pt;text-align: left;">(<i>VAR</i><i>1 </i>. <i>VALUE</i><i>1</i>) ... (<i>VAR</i><i>N </i>. <i>VALUE</i><i>N</i>))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">BLKNAME <span class="p">is the name of a block. </span>BLKFN<span class="s18">1 </span><span class="s11">... </span>BLKFN<span class="s18">M </span><span class="p">are the functions in the block and correspond to </span>BLKFNS <span class="p">in the call to </span><span class="s11">BLOCKCOMPILE</span><span class="p">. The (</span>VAR<span class="s18">i </span><span class="s11">. </span>VALUE<span class="s18">i</span><span class="p">) expressions indicate the settings for variables affecting the compilation of that block. If </span>VALUE<span class="s18">i </span><span class="p">is atomic, then </span>VAR<span class="s44">i </span><span class="p">is set to </span>VALUE<span class="s18">i</span><span class="p">, otherwise </span>VAR<span class="s18">i </span><span class="p">is set to the </span><span class="s11">UNION </span><span class="p">of </span>VALUE<span class="s18">i </span><span class="p">and the current value of the variable </span>VAR<span class="s18">i</span><span class="p">. Also, expressions of the form </span><span class="s11">(</span>VAR <span class="s11">* </span>FORM<span class="s11">) </span><span class="p">will cause </span>FORM <span class="p">to be evaluated and the resulting list used as described above (e.g. </span><span class="s11">(GLOBALVARS * MYGLOBALVARS)</span><span class="p">).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, consider the block declaration below. The block name is <span class="s11">EDITBLOCK</span>, it includes a number of functions (<span class="s11">EDITL0, EDITL1, ... EDITH</span>), and it sets the variables <span class="s11">ENTRIES</span>, <span class="s11">SPECVARS</span>, <span class="s11">RETFNS</span>, and <span class="s11">GLOBALVARS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(EDITBLOCK</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">EDITL0 EDITL1 UNDOEDITL EDITCOM EDITCOMA EDITMAC EDITCOMS EDIT]UNDO UNDOEDITCOM EDITH (ENTRIES EDITL0 ## UNDOEDITL)</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">(SPECVARS L COM LCFLG #1 #2 #3 LISPXBUFS) (RETFNS EDITL0)</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(GLOBALVARS EDITCOMSA EDITCOMSL EDITOPS))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Whenever <span class="s11">BCOMPL </span>or <span class="s11">BRECOMPILE </span>encounter a block declaration, they rebind <span class="s11">RETFNS</span>, <span class="s11">SPECVARS</span>, <span class="s11">GLOBALVARS</span>, <span class="s11">BLKLIBRARY</span>, and <span class="s11">DONTCOMPILEFNS </span>to their top level values, bind <span class="s11">BLKAPPLYFNS </span>and <span class="s11">ENTRIES </span>to <span class="s11">NIL</span>, and bind <span class="s11">BLKNAME </span>to the first element of the declaration. They then scan the rest of the declaration, setting these variables as described above. When the declaration is exhausted, the block compiler is called and given <span class="s11">BLKNAME</span>, the list of block functions, and <span class="s11">ENTRIES</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">If a function appears in a block declaration, but is not defined in one of the files, then if it has an in- core definition, this definition is used and a message printed </span>NOT ON FILE<span class="s17">, </span>COMPILING IN CORE DEFINITION<span class="p">. Otherwise, the message </span>NOT COMPILEABLE<span class="p">, is printed and the block declaration processed as though the function were not on it, i.e. calls to the function will be compiled as external function calls.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Since all compiler variables are rebound for each block declaration, the declaration only has to set those variables it wants <i>changed</i>. Furthermore, setting a variable in one declaration has no effect on the variable’s value for another declaration.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">After finishing all blocks, <span class="s11">BCOMPL </span>and <span class="s11">BRECOMPILE </span>treat any functions in the file that did not appear in a block declaration in the same way as do <span class="s11">TCOMPL </span>and <span class="s11">RECOMPILE</span>. If you wish a function compiled separately as well as in a block, or if you wish to compile some functions (not blockcompile), with some compiler variables changed, you can use a special pseudo-block declaration of the form</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">(NIL <i>BLKFN</i><i>1 </i>... <i>BLKFN</i><i>M </i>(<i>VAR</i><i>1 </i>. <i>VALUE</i><i>1</i>) ... (<i>VAR</i><i>N </i>. <i>VALUE</i><i>N</i>))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">which means that </span>BLKFN<span class="s18">1 </span><span class="s11">... </span>BLKFN<span class="s18">M </span><span class="p">should be compiled after first setting </span>VAR<span class="s18">1 </span><span class="s11">... </span>VAR<span class="s18">N </span><span class="p">as described above.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The following variables control other aspects of compiling a block:</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">RETFNS                                                         <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Value is a list of internal block functions whose names must appear on the stack, e.g., if the function is to be returned from <span class="s11">RETFROM</span>, <span class="s11">RETTO</span>, <span class="s11">RETEVAL</span>, etc. Usually, internal calls between functions in a block are not put on the stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">BLKAPPLYFNS <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Value is a list of internal block functions called by other functions in the same block using</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">BLKAPPLY <span class="p">or </span>BLKAPPLY* <span class="p">for efficiency reasons.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Normally, a call to <span class="s11">APPLY </span>from inside a block would be the same as a call to any other function outside of the block. If the first argument to <span class="s11">APPLY </span>turned out to be one of the entries to the block, the block would have to be reentered. <span class="s11">BLKAPPLYFNS </span>enables a program to compute the name of a function in the block to be called next, without the overhead of leaving the block and reentering it. This is done by including on the list <span class="s11">BLKAPPLYFNS </span>those functions which will be called in this fashion, and by using <span class="s11">BLKAPPLY </span>in place of <span class="s11">APPLY</span>, and <span class="s11">BLKAPPLY* </span>in place of <span class="s11">APPLY*</span>. If <span class="s11">BLKAPPLY </span>or <span class="s11">BLKAPPLY* </span>is given a function not on <span class="s11">BLKAPPLYFNS</span>, the effect is the same as a call to <span class="s11">APPLY </span>or <span class="s11">APPLY* </span>and no error is generated. Note however, that <span class="s11">BLKAPPLYFNS </span>must be set at <i>compile </i>time, not run time, and furthermore, that all functions on <span class="s11">BLKAPPLYFNS </span>must be in the block, or an error is generated (at compile time), <span class="s11">NOT ON BLKFNS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">BLKAPPLYFNS <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Value is a list of functions that are considered to be in the &quot;block library&quot; of functions that should automatically be included in the block if they are called within the block.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Compiling a function open via a macro provides a way of eliminating a function call. For block compiling, the same effect can be achieved by including the function in the block. A further advantage is that the code for this function will appear only once in the block, whereas when a function is compiled open, its code appears at each place where it is called.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The block library feature provides a convenient way of including functions in a block. It is just a convenience since you can always achieve the same effect by specifying the function(s) in question as one of the block functions, provided it has an expr definition at compile time. The block library feature simply eliminates the burden of supplying this definition.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">To use the block library feature, place the names of the functions of interest on the list <span class="s11">BLKLIBRARY</span>, and their expr definitions on the property list of the functions under the property <span class="s11">BLKLIBRARYDEF</span>. When the block compiler compiles a form, it first checks to see if the function being called is one of the block functions. If not, and the function is on <span class="s11">BLKLIBRARY</span>, its definition is obtained from the property value of <span class="s11">BLKLIBRARYDEF</span>, and it is automatically included as part of the block.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Block Compiling Functions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">There are three user level functions for block compiling, <span class="s11">BLOCKCOMPILE</span>, <span class="s11">BCOMPL</span>, and <span class="s11">BRECOMPILE</span>, corresponding to <span class="s11">COMPILE</span>, <span class="s11">TCOMPL</span>, and <span class="s11">RECOMPILE</span>. Note that all of the remarks on macros, globalvars, compiler messages, etc., all apply equally for block compiling. Using block declarations, you can intermix in a single file functions compiled normally and block compiled functions<span class="s10">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>BLOCKCOMPILE </b><i>BLKNAME BLKFNS ENTRIES FLG</i>)                      <span class="p">[Function]</span></p><p class="s16" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">BLKNAME <span class="p">is the name of a block, </span>BLKFNS <span class="p">is a list of the functions comprising the block, and </span>ENTRIES <span class="p">a list of entries to the block.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Each of the entries must also be on <span class="s16">BLKFNS </span>or an error is generated, <span class="s11">NOT ON BLKFNS</span>. If only one entry is specified, the block name can also be one of the <span class="s16">BLKFNS</span>, e.g., <span class="s11">(BLOCKCOMPILE ’FOO ’(FOO FIE FUM) ’(FOO))</span>. However, if more than one entry is specified, an error will be generated, <span class="s11">CAN’T BE BOTH AN ENTRY AND THE BLOCK NAME</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If <span class="s16">ENTRIES </span>is <span class="s11">NIL</span>, <span class="s11">(LIST </span><span class="s16">BLKNAME</span><span class="s11">) </span>is used, e.g., <span class="s11">(BLOCKCOMPILE ’COUNT ’(COUNT COUNT1))</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">BLKFNS </span>is <span class="s11">NIL</span>, <span class="s11">(LIST </span><span class="s16">BLKNAME</span><span class="s11">) </span>is used, e.g., <span class="s11">(BLOCKCOMPILE ’EQUAL)</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">BLOCKCOMPILE <span class="p">asks the standard compiler questions, and then begins compiling. As with </span>COMPILE<span class="p">, if the compiled code is being written to a file, the file is closed unless </span><i>FLG</i></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">= T</span>. The value of <span class="s11">BLOCKCOMPILE </span>is a list of the entries, or if <span class="s16">ENTRIES </span><span class="s11">= NIL</span>, the value is <span class="s16">BLKNAME</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The output of a call to <span class="s11">BLOCKCOMPILE </span>is one function definition for <span class="s16">BLKNAME</span>, plus definitions for each of the functions on <span class="s16">ENTRIES </span>if any. These entry functions are very short functions which immediately call <span class="s16">BLKNAME</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>BCOMPL </b><i>FILES CFILE</i>)                                           <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">FILES </span>is a list of symbolic files (if atomic, <span class="s11">(LIST </span><span class="s16">FILES</span><span class="s11">) </span>is used). <span class="s11">BCOMPL </span>differs from <span class="s11">TCOMPL </span>in that it compiles all of the files at once, instead of one at a time, in order to permit one block to contain functions in several files. (If you have several files to be <span class="s11">BCOMPL</span>ed <i>separately</i>, you must make several calls to <span class="s11">BCOMPL</span>.) Output is to <span class="s16">CFILE </span>if given, otherwise to a file whose name is <b>(</b><span class="s11">CAR </span><span class="s16">FILES</span><span class="s11">) </span>suffixed with <span class="s11">DCOM</span>. For example, <span class="s11">(BCOMPL ’(EDIT WEDIT)) </span>produces one file, <span class="s11">EDIT.DCOM</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">BCOMPL <span class="p">asks the standard compiler questions, except for &quot;</span>OUTPUT FILE:<span class="p">&quot;, then processes each file exactly the same as </span>TCOMPL<span class="p">. </span>BCOMPL <span class="p">next processes the block declarations as described above. Finally, it compiles those functions not mentioned in one of the block declarations, and then writes out all other expressions.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <i>any </i>of the files have property <span class="s11">FILETYPE </span>with value <span class="s11">CLISP</span>, or a list containing <span class="s11">CLISP</span>, then <span class="s11">DWIMIFYCOMPFLG </span>is rebound to <span class="s11">T </span>for <i>all </i>of the files.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The value of <span class="s11">BCOMPL </span>is the output file (the new compiled file). If the compilation is aborted due to an error or Control-D, all files are closed and the (partially complete) output file is deleted.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">It is permissible to <span class="s11">TCOMPL </span>files set up for <span class="s11">BCOMPL</span>; the block declarations will simply have no effect. Similarly, you can <span class="s11">BCOMPL </span>a file that does not contain any block declarations and the result will be the same as having <span class="s11">TCOMPL</span>ed it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>BRECOMPILE </b><i>FILES CFILE FNS —</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">BRECOMPILE <span class="p">plays the same role for </span>BCOMPL <span class="p">that </span>RECOMPILE <span class="p">plays for </span>TCOMPL<span class="p">. Its purpose is to allow you to update a compiled file without requiring an entire </span>BCOMPL<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">FILES </span>is a list of symbolic files (if atomic, <span class="s11">(LIST </span><span class="s16">FILES</span><span class="s11">) </span>is used). <span class="s16">CFILE </span>is the compiled file produced by <span class="s11">BCOMPL </span>or a previous <span class="s11">BRECOMPILE </span>that contains compiled definitions that may be copied.  The interpretation of <span class="s16">FNS </span>is the same as with <span class="s11">RECOMPILE</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">BRECOMPILE <span class="p">asks the standard compiler questions, except for &quot;</span>OUTPUT FILE:<span class="p">&quot;. As with</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s11">BCOMPL</span>, output automatically goes to <span class="s16">FILE</span><b>.</b><span class="s11">DCOM</span>, where <span class="s16">FILE </span>is the first file in <span class="s16">FILES</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">BRECOMPILE </span>processes each file the same as <span class="s11">RECOMPILE</span>, then processes each block declaration. If <i>any </i>of the functions in the block are to be recompiled, the entire block must be (is) recompiled. Otherwise, the block is copied from <span class="s16">CFILE </span>as with <span class="s11">RECOMPILE</span>. For pseudo-block declarations of the form <span class="s11">(NIL </span><span class="s16">FN</span><span class="s18">1 </span><span class="s11">...)</span>, all variable assignments are made, but only those functions indicated by <span class="s16">FNS </span>are recompiled.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">After completing the block declarations, <span class="s11">BRECOMPILE </span>processes all functions that do not appear in a block declaration, recompiling those dictated by <span class="s16">FNS</span>, and copying the compiled definitions of the remaining from <span class="s16">CFILE</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Finally, <span class="s11">BRECOMPILE </span>writes onto the output file the &quot;other expressions&quot; collected in the initial scan of <span class="s16">FILES</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The value of <span class="s11">BRECOMPILE </span>is the output file (the new compiled file). If the compilation is aborted due to an error or Control-D, all files are closed and the (partially complete) output file is deleted.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">CFILE </span><span class="s11">= NIL</span>, the old version of <span class="s16">FILE</span><span class="s11">.DCOM </span>is used, as with <span class="s11">RECOMPILE</span>. In addition, if <span class="s16">FNS </span>and <span class="s16">CFILE </span>are both <span class="s11">NIL</span>, <span class="s16">FNS </span>is set to the value of <span class="s11">RECOMPILEDEFAULT</span>, initially <span class="s11">CHANGES</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Compiler Error Messages                                                                                                                         </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Messages describing errors in the function being compiled are also printed on the terminal. These messages are always preceded by <span class="s11">*****</span>. Unless otherwise indicated below, the compilation will continue.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<i>FN </i>NOT ON FILE, COMPILING IN CORE DEFINITION)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">From calls to <span class="s11">BCOMPL </span>and <span class="s11">BRECOMPILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<i>FN </i>NOT COMPILEABLE)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">An <span class="s11">EXPR </span>definition for <span class="s16">FN </span>could not be found. In this case, no code is produced for <span class="s16">FN</span>, and the compiler proceeds to the next function to be compiled, if any.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 8pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<i>FN </i>NOT FOUND)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Occurs when <span class="s11">RECOMPILE </span>or <span class="s11">BRECOMPILE </span>try to copy the compiled definition of <span class="s16">FN </span>from <span class="s16">CFILE</span>, and cannot find it. In this case, no code is copied and the compiler proceeds to the next function to be compiled, if any.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">(<i>FN </i>NOT ON BLKFNS)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">FN </span>was specified as an entry to a block, or else was on <span class="s11">BLKAPPLYFNS</span>, but did not appear on the <span class="s16">BLKFNS</span>. In this case, no code is produced for the entire block and the compiler proceeds to the next function to be compiled, if any.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">(<i>FN </i>CAN’T BE BOTH AN ENTRY AND THE BLOCK NAME)</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In this case, no code is produced for the entire block and the compiler proceeds <span class="s10">to </span>the next function to be compiled, if any.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">(<i>BLKNAME </i>- USED BLKAPPLY WHEN NOT APPLICABLE)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s11">BLKAPPLY </span>is used in the block <span class="s16">BLKNAME</span>, but there are no <span class="s11">BLKAPPLYFNS </span>or <span class="s11">ENTRIES</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">declared for the block.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">(<i>VAR </i>SHOULD BE A SPECVAR - USED FREELY BY <i>FN</i>)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">While compiling a block, the compiler has already generated code to bind <span class="s16">VAR </span>as a <span class="s11">LOCALVAR</span>, but now discovers that <span class="s16">FN </span>uses <span class="s16">VAR </span>freely. <span class="s16">VAR </span>should be declared a <span class="s11">SPECVAR </span>and the block recompiled.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">((* --) COMMENT USED FOR VALUE)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">A comment appears in a context where its value is being used, e.g. <span class="s11">(LIST X (* --) Y)</span>. The compiled function will run, but the value at the point where the comment was used is undefined.</p><p class="s11" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">((<i>FORM</i>) - NON-ATOMIC CAR OF FORM)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If you intended to treat the value of <span class="s16">FORM </span>as a function, you should use <span class="s11">APPLY* </span>(Chapter 10). <span class="s16">FORM </span>is compiled as if <span class="s11">APPLY* </span>had been used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">((SETQ <i>VAR EXPR </i>--) BAD SETQ)</p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">SETQ <span class="p">of more than two arguments.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<i>FN </i>- USED AS ARG TO NUMBER FN?)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The value of a predicate, such as <span class="s11">GREATERP </span>or <span class="s11">EQ</span>, is used as an argument to a function that expects numbers, such as <span class="s11">IPLUS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">(<i>FN </i>- NO LONGER INTERPRETED AS FUNCTIONAL ARGUMENT)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The compiler has assumed <span class="s16">FN </span>is the name of a function. If you intended to treat the <i>value </i>of <span class="s16">FN </span>as a function, <span class="s11">APPLY* </span>(Chapter 10) should be used. This message is printed when <span class="s16">FN </span>is not defined, and is also a local variable of the function being compiled.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<i>FN </i>- ILLEGAL RETURN)</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">RETURN <span class="p">encountered when not in </span>PROG<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<i>TG </i>- ILLEGAL GO)</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">GO <span class="p">encountered when not in a </span>PROG<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<i>TG </i>- MULTIPLY DEFINED TAG)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">TG </span>is a <span class="s11">PROG </span>label that is defined more than once in a single <span class="s11">PROG</span>. The second definition is ignored.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<i>TG </i>- UNDEFINED TAG)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s16">TG </span>is a <span class="s11">PROG </span>label that is referenced but not defined in a <span class="s11">PROG</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<i>VAR </i>- NOT A BINDABLE VARIABLE)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s16">VAR </span>is <span class="s11">NIL</span>, <span class="s11">T</span>, or else not a literal atom.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<i>VAR VAL </i>-- BAD PROG BINDING)</p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="p">Occurs when there is a prog binding of the form </span>(<i>VAR VAL</i><i>1 </i>... <i>VAL</i><i>N</i>)<span class="p">.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<i>TG </i>- MULTIPLY DEFINED TAG, LAP)</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s16">TG </span>is a label that was encountered twice during the second pass of the compilation. If this error occurs with no indication of a multiply defined tag during pass one, the tag is in a <span class="s11">LAP </span>macro.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<i>TG </i>- UNDEFINED TAG, LAP)</p><p class="s16" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">TG <span class="p">is a label that is referenced during the second pass of compilation and is not defined.</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s11">LAP </span>treats <span class="s16">TG </span>as though it were a <span class="s11">COREVAL</span>, and continues the compilation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<i>TG </i>- MULTIPLY DEFINED TAG, ASSEMBLE)</p><p class="s16" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">TG <span class="p">is a label that is defined more than once in an assemble form.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<i>TG </i>- UNDEFINED TAG, ASSEMBLE)</p><p class="s16" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">TG <span class="p">is a label that is referenced but not defined in an assemble form.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<i>OP </i>- OPCODE? - ASSEMBLE)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s16">OP </span>appears as <span class="s11">CAR </span>of an assemble statement, and is illegal.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(NO BINARY CODE GENERATED OR LOADED FOR <i>FN</i>)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">A previous error condition was sufficiently serious that binary code for <span class="s16">FN </span>cannot be loaded without causing an error.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li></ol></li><li><p class="s6" style="padding-top: 4pt;padding-left: 28pt;text-indent: -22pt;text-align: left;"><a name="bookmark20">DWIM</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="605" height="3" alt="image" src="Image_053.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">A surprisingly large percentage of the errors made by Interlisp users are of the type that could be corrected by another Lisp programmer without any information about the purpose of the program or expression in question, e.g., misspellings, certain kinds of parentheses errors, etc. To correct these types of errors we have implemented in Medley a <span class="s11">DWIM </span>facility, short for Do-What-I-Mean. <span class="s11">DWIM </span>is called automatically whenever an error occurs in the evaluation of an Interlisp expression. (Currently, <span class="s11">DWIM </span>only operates on unbound atoms and undefined function errors.) <span class="s11">DWIM </span>then proceeds to try to correct the mistake using the current context of computation plus information about what you had previously been doing (and what mistakes you had been making) as guides to the remedy of the error. If <span class="s11">DWIM </span>is able to make the correction, the computation continues as though no error had occurred. Otherwise, the procedure is the same as though <span class="s11">DWIM </span>had not intervened: a break occurs, or an unwind to the last <span class="s11">ERRORSET </span>(see Chapter 14). The following protocol illustrates the operation of <span class="s11">DWIM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">For example, suppose you define the factorial function <span class="s11">(FACT N</span>) as follows:</p><p class="s19" style="padding-top: 4pt;padding-left: 102pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">DEFINEQ((FACT (LAMBDA (N) (COND</span></p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;line-height: 88%;text-align: left;">((ZEROP N0 1) ((T (ITIMS N (FACCT 9SUB1 N] (FACT)</p><p class="s19" style="padding-top: 3pt;padding-left: 102pt;text-indent: 0pt;text-align: left;"></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Note that the definition of <span class="s11">FACT </span>contains several mistakes: <span class="s11">ITIMES </span>and <span class="s11">FACT </span>have been misspelled; the <span class="s11">0 </span>in <span class="s11">N0 </span>was intended to be a right parenthesis, but the Shift key was not pressed; similarly, the <span class="s11">9 </span>in <span class="s11">9SUB1 </span>was intended to be a left parenthesis; and finally, there is an extra left parenthesis in front of the <span class="s11">T </span>that begins the final clause in the conditional.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 78pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">PRETTYPRNT((FACCT]</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=PRETTYPRINT</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">=FACT</p><p class="s11" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(FACT</p><p class="s11" style="padding-left: 135pt;text-indent: -10pt;line-height: 88%;text-align: left;">[LAMBDA (N) (COND</p><p class="s11" style="padding-left: 146pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((ZEROP N0 1)</p><p class="s11" style="padding-left: 157pt;text-indent: 0pt;line-height: 8pt;text-align: left;">((T (ITIMS N (FACCT 9SUB1 N])</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">(FACT)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 78pt;text-indent: 0pt;text-align: left;"></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">After defining <span class="s11">FACT</span>, you want to look at its definition using <span class="s11">PRETTYPRINT</span>, which you unfortunately misspell. Since there is no function <span class="s11">PRETTYPRNT </span>in the system, an undefined function error occurs, and <span class="s11">DWIM </span>is called. <span class="s11">DWIM </span>invokes its spelling corrector, which searches a list of functions frequently used (by <i>this </i>user) for the best possible match. Finding one that is extremely close, <span class="s11">DWIM </span>proceeds on the assumption that <span class="s11">PRETTYPRNT </span>meant <span class="s11">PRETTYPRINT</span>, notifies you of this, and calls <span class="s11">PRETTYPRINT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 5pt;padding-left: 48pt;text-indent: 0pt;line-height: 87%;text-align: left;">INTERLISP-D REFERENCE MANUAL DWIM</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">At this point, <span class="s11">PRETTYPRINT </span>would normally print <span class="s11">(FACCT NOT PRINTABLE) </span>and exit, since <span class="s11">FACCT </span>has no definition.  Note that this is <i>not </i>an Interlisp error condition, so that <span class="s11">DWIM </span>would not be called as described above.  However, it is obviously not what you <i>meant</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">This sort of mistake is corrected by having <span class="s11">PRETTYPRINT </span>itself explicitly invoke the spelling corrector portion of <span class="s11">DWIM </span>whenever given a function with no <span class="s11">EXPR </span>definition. Thus, with the aid of DWIM <span class="s11">PRETTYPRINT </span>is able to determine that you want to see the definition of the function <span class="s11">FACT</span>, and proceeds accordingly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 125pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">FACT(3]</span></p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 9pt;text-align: left;">N0 [IN FACT] -&gt; N ) ? YES</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 9pt;text-align: left;">[IN FACT] (COND -- ((T --))) -&gt;</p><p class="s11" style="padding-left: 161pt;text-indent: 70pt;line-height: 88%;text-align: left;">(COND -- (T --)) ITIMS [IN FACT] -&gt; ITIMES FACCT [IN FACT] -&gt; FACT</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 9pt;text-align: left;">9SUB1 [IN FACT] -&gt; ( SUB1 ? YES</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: left;">6</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 125pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">PP FACT</span></p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(FACT</p><p class="s11" style="padding-left: 183pt;text-indent: -10pt;line-height: 88%;text-align: left;">[LAMBDA (N) (COND</p><p class="s11" style="padding-left: 205pt;text-indent: -10pt;line-height: 88%;text-align: left;">((ZEROP N) 1)</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 8pt;text-align: center;">(T (ITIMES N (FACT (SUB1 N])</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;text-align: left;">FACT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 125pt;text-indent: 0pt;text-align: left;"></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">You now call <span class="s11">FACT</span>. During its execution, five errors occur, and <span class="s11">DWIM </span>is called five times. At each point, the error is corrected, a message is printed describing the action taken, and the computation is allowed to continue as if no error had occurred. Following the last correction, <span class="s11">6 </span>is printed, the value of <span class="s11">(FACT 3)</span>. Finally, you prettyprint the new, now correct, definition of <span class="s11">FACT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">In this particular example, you were operating in <span class="s11">TRUSTING </span>mode, which gives <span class="s11">DWIM </span>carte blanche for most corrections. You can also operate in <span class="s11">CAUTIOUS </span>mode, in which case <span class="s11">DWIM </span>will inform you of intended corrections before they are made, and allow you to approve or disapprove of them. If <span class="s11">DWIM </span>was operating in <span class="s11">CAUTIOUS </span>mode in the example above, it would proceed as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">FACT(3)</span></p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">N0 [IN FACT] -&gt; N ) ? YES</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">U.D.F. T [IN FACT] FIX? YES [IN FACT] (COND -- ((T --))) -&gt;</p><p class="s11" style="padding-left: 232pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(COND -- (T --))</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">ITIMS [IN FACT] -&gt; ITIMES ? ...YES FACCT [IN FACT] -&gt; FACT ? ...YES 9SUB1 [IN FACT] -&gt; ( SUB1 ? NO U.B.A.</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(9SUB1 BROKEN)</p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">For most corrections, if you do not respond in a specified interval of time, <span class="s11">DWIM </span>automatically proceeds with the correction, so that you need intervene only when you do not approve. In the example, you responded to the first, second, and fifth questions; <span class="s11">DWIM </span>responded for you on the third and fourth.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">DWIM <span class="p">uses </span>ASKUSER <span class="p">for its interactions with you (see Chapter 26). Whenever an interaction is about to take place and you have typed ahead, </span>ASKUSER <span class="p">types several bells to warn you to stop typing, then clears and saves the input buffers, restoring them after the interaction is complete. Thus if you typed ahead before a </span>DWIM <span class="p">interaction, </span>DWIM <span class="p">will not confuse your type-ahead with the answer to its question, nor will your type-ahead be lost. The bells are printed by the function </span>PRINTBELLS<span class="p">, which can be advised or redefined for specialized applications, e.g. to flash the screen for a display terminal.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A great deal of effort has gone into making <span class="s11">DWIM </span>&quot;smart&quot;, and experience with a large number of users indicates that <span class="s11">DWIM </span>works very well; <span class="s11">DWIM </span>seldom fails to correct an error you feel it should have, and almost never mistakenly corrects an error. However, it is important to note that even when <span class="s11">DWIM </span><i>is </i>wrong, no harm is done: since an error had occurred, you would have had to intervene anyway if <span class="s11">DWIM </span>took no action. Thus, if <span class="s11">DWIM </span>mistakenly corrects an error, you simply interrupt or abort the computation, reverse the <span class="s11">DWIM </span>change using <span class="s11">UNDO </span>(see Chapter 13), and make the correction you would have had to make without <span class="s11">DWIM</span>. An exception is if <span class="s11">DWIM</span>’s correction mistakenly caused a destructive computation to be initiated, and information was lost before you could interrupt. We have not yet had such an incident occur.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>DWIM </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Used to enable / disable <span class="s11">DWIM</span>. If <span class="s16">X </span>is the symbol <span class="s11">C</span>, <span class="s11">DWIM </span>is enabled in <span class="s11">CAUTIOUS </span>mode, so that <span class="s11">DWIM </span>will ask you before making corrections. If <span class="s16">X </span>is <span class="s11">T</span>, <span class="s11">DWIM </span>is enabled in <span class="s11">TRUSTING </span>mode, so <span class="s11">DWIM </span>will make most corrections automatically. If <span class="s16">X </span>is <span class="s11">NIL</span>, <span class="s11">DWIM </span>is disabled. Medley initially has <span class="s11">DWIM </span>enabled in <span class="s11">CAUTIOUS </span>mode.</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">DWIM <span class="p">returns </span>CAUTIOUS<span class="p">, </span>TRUSTING <span class="p">or </span>NIL<span class="p">, depending to what mode it has just been put into.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">For corrections to expressions typed in for immediate execution (typed into <span class="s11">LISPX</span>, Chapter 13), <span class="s11">DWIM </span>always acts as though it were in <span class="s11">TRUSTING </span>mode, i.e., no approval necessary. For certain types of corrections, e.g., run-on spelling corrections, 9-0 errors, etc., <span class="s11">DWIM </span>always acts like it was in <span class="s11">CAUTIOUS </span>mode, and asks for approval. In either case, <span class="s11">DWIM </span>always informs you of its action as described below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Spelling Correction Protocol                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">One type of error that <span class="s11">DWIM </span>can correct is the misspelling of a function or a variable name. When an unbound symbol or undefined function error occurs, <span class="s11">DWIM </span>tries to correct the spelling of the bad symbol. If a symbol is found whose spelling is &quot;close&quot; to the offender, <span class="s11">DWIM </span>proceeds as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 5pt;padding-left: 48pt;text-indent: 0pt;line-height: 87%;text-align: left;">INTERLISP-D REFERENCE MANUAL DWIM</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the correction occurs in the typed-in expression, <span class="s11">DWIM </span>prints <span class="s11">=</span><span class="s16">CORRECT-SPELLING </span>and continues evaluating the expression. For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(SETQ FOO (IPLUSS 1 2))</span></p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;line-height: 88%;text-align: left;">=IPLUS 3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the correction does not occur in type-in, DWIM prints</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">BAD-SPELLING <span class="s11">[IN </span>FUNCTION-NAME<span class="s11">] -&gt; </span>CORRECT-SPELLING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The appearance of <span class="s11">-&gt; </span>is to call attention to the fact that the user’s function will be or has been changed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Then, if <span class="s11">DWIM </span>is in <span class="s11">TRUSTING </span>mode, it prints a carriage return, makes the correction, and continues the computation. If <span class="s11">DWIM </span>is in <span class="s11">CAUTIOUS </span>mode, it prints a few spaces and <span class="s11">? </span>and then wait for approval. The user then has six options:</p><ol id="l48"><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: left;">Type <span class="s11">Y</span>. <span class="s11">DWIM </span>types <span class="s11">es</span>, and proceeds with the correction.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: left;">Type <span class="s11">N</span>. <span class="s11">DWIM </span>types <span class="s11">o</span>, and does not make the correction.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: justify;">Type <span class="s19"></span>. <span class="s11">DWIM </span>does not make the correction, and furthermore guarantees that the error will not cause a break.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: left;">Type Control-E. For error correction, this has the same effect as typing <span class="s11">N</span>.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: justify;">Do nothing. In this case <span class="s11">DWIM </span>waits for <span class="s11">DWIMWAIT </span>seconds, and if you have not responded, <span class="s11">DWIM </span>will type <span class="s11">... </span>followed by the default answer.</p><p style="padding-top: 6pt;padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The default on spelling corrections is determined by the value of the variable</p><p class="s11" style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FIXSPELLDEFAULT<span class="p">, whose top level value is initially </span>Y<span class="p">.</span></p></li><li><p style="padding-top: 7pt;padding-left: 108pt;text-indent: -12pt;line-height: 91%;text-align: justify;">Type space or carriage-return. In this case DWIM will wait indefinitely. This option is intended for those cases where you want to think about your answer, and want to insure that DWIM does not get &quot;impatient&quot; and answer for you.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The procedure for spelling correction on other than Interlisp errors is analogous. If the correction is being handled as type-in, <span class="s11">DWIM </span>prints <span class="s11">= </span>followed by the correct spelling, and returns it to the function that called <span class="s11">DWIM</span>. Otherwise, <span class="s11">DWIM </span>prints the incorrect spelling, followed by the correct spelling. Then, if <span class="s11">DWIM </span>is in <span class="s11">TRUSTING </span>mode, <span class="s11">DWIM </span>prints a carriage-return and returns the correct spelling. Otherwise, <span class="s11">DWIM </span>prints a few spaces and a <span class="s11">? </span>and waits for approval. You can then respond with <span class="s11">Y</span>, <span class="s11">N</span>, Control-E, space, carriage return, or do nothing as described above.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The spelling corrector itself is not <span class="s11">ERRORSET </span>protected like the DWIM error correction routines. Therefore, typing <span class="s11">N </span>and typing Control-E may have different effects when the spelling corrector is called directly. The former simply instructs the spelling corrector to return <span class="s11">NIL</span>, and lets the calling</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">function decide what to do next; the latter causes an error which unwinds to the last <span class="s11">ERRORSET</span>, however far back that may be.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Parentheses Errors Protocol                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">When an unbound symbol or undefined error occurs, and the offending symbol contains <span class="s11">9 </span>or <span class="s11">0</span>, DWIM tries to correct errors caused by typing <span class="s11">9 </span>for left parenthesis and <span class="s11">0 </span>for right parenthesis. In these cases, the interaction with you is similar to that for spelling correction.  If the error occurs in type-in, <span class="s11">DWIM </span>types <span class="s11">=</span><span class="s16">CORRECTION</span>, and continues evaluating the expression.  For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 77pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(SETQ FOO 9IPLUS 1 2]</span></p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 88%;text-align: left;">= ( IPLUS 3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">If the correction does not occur in type-in, <span class="s11">DWIM </span>prints</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">BAD-ATOM <span class="s11">[IN </span>FUNCTION-NAME<span class="s11">] -&gt; </span>CORRECTION <span class="s11">?</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">and then waits for approval. You then have the same six options as for spelling correction, except the waiting time is 3<span class="s11">*DWIMWAIT </span>seconds. If you type <span class="s11">Y</span>, <span class="s11">DWIM </span>operates as if it were in <span class="s11">TRUSTING </span>mode, i.e., it makes the correction and prints its message.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Actually, <span class="s11">DWIM </span>uses the value of the variables <span class="s11">LPARKEY </span>and <span class="s11">RPARKEY </span>to determine the corresponding lower case character for left and right parentheses. <span class="s11">LPARKEY </span>and <span class="s11">RPARKEY </span>are initially <span class="s11">9 </span>and <span class="s11">0 </span>respectively, but they can be reset for other keyboard layouts, e.g., on some terminals left parenthesis is over <span class="s11">8</span>, and right parenthesis is over <span class="s11">9</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Undefined Function T Errors                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">When an undefined function error occurs, and the offending function is <span class="s11">T</span>, DWIM tries to correct certain types of parentheses errors involving a <span class="s11">T </span>clause in a conditional. DWIM recognizes errors of the following forms:</p><p class="s11" style="padding-top: 6pt;padding-left: 234pt;text-indent: -104pt;text-align: left;">(COND --) (T --) <span class="p">The </span>T <span class="p">clause appears outside and immediately following the </span>COND<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 21pt;text-indent: 0pt;text-align: center;">(COND -- (-- &amp; (T --)))   <span class="p">The </span>T <span class="p">clause appears inside a previous clause.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 43pt;text-indent: 0pt;line-height: 12pt;text-align: center;">(COND -- ((T --)))   <span class="p">The </span>T <span class="p">clause has an extra pair of parentheses</span></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 12pt;text-align: center;">around it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: left;">For undefined function errors that are not one of these three types, DWIM takes no corrective action at all, and the error will occur.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 5pt;padding-left: 48pt;text-indent: 0pt;line-height: 87%;text-align: left;">INTERLISP-D REFERENCE MANUAL DWIM</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If the error occurs in type-in, DWIM simply types <span class="s11">T FIXED </span>and makes the correction. Otherwise if DWIM is in <span class="s11">TRUSTING </span>mode, DWIM makes the correction and prints the message:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[IN <i>FUNCTION-NAME</i>] {BAD-COND} -&gt;</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">{CORRECTED-COND}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s11">DWIM </span>is in <span class="s11">CAUTIOUS </span>mode, DWIM prints</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 10pt;text-align: left;">UNDEFINED FUNCTION T</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[IN FUNCTION-NAME] FIX?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">and waits for approval. You then have the same options as for spelling corrections and parenthesis errors. If you type <span class="s11">Y </span>or default, <span class="s11">DWIM </span>makes the correction and prints its message.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">Having made the correction, <span class="s11">DWIM </span>must then decide how to proceed with the computation. In the first case, <span class="s11">(COND --) (T --)</span>, <span class="s11">DWIM </span>cannot know whether the <span class="s11">T </span>clause would have been executed if it had been inside of the <span class="s11">COND</span>. Therefore <span class="s11">DWIM </span>asks you <span class="s11">CONTINUE WITH T CLAUSE </span>(with a default of <span class="s11">YES</span>). If you type <span class="s11">N</span>, <span class="s11">DWIM </span>continues with the form after the <span class="s11">COND</span>, i.e., the form that originally followed the <span class="s11">T </span>clause.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">In the second case, <span class="s11">(COND -- (-- &amp; (T --)))</span>, <span class="s11">DWIM </span>has a different problem. After moving the <span class="s11">T </span>clause to its proper place, <span class="s11">DWIM </span>must return as the value of <span class="s11">&amp; </span>as the value of the <span class="s11">COND</span>. Since this value is no longer around, <span class="s11">DWIM </span>asks you <span class="s11">OK TO REEVALUATE </span>and then prints the expression corresponding to <span class="s11">&amp;</span>. If you type <span class="s11">Y</span>, or default, <span class="s11">DWIM </span>continues by reevaluating <span class="s11">&amp;</span>, otherwise <span class="s11">DWIM </span>aborts, and a <span class="s11">U.D.F. T </span>error will then occur (even though the <span class="s11">COND </span>has in fact been fixed). If <span class="s11">DWIM </span>can determine for itself that the form can safely be reevaluated, it does not consult you before reevaluating. <span class="s11">DWIM </span>can do this if the form is atomic, or <span class="s11">CAR </span>of the form is a member of the list <span class="s11">OKREEVALST</span>, and each of the arguments can safely be reevaluated. For example, <span class="s11">(SETQ X (CONS (IPLUS Y Z) W)) </span>is safe to reevaluate because <span class="s11">SETQ</span>, <span class="s11">CONS</span>, and <span class="s11">IPLUS </span>are all on <span class="s11">OKREEVALST</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">In the third case, <span class="s11">(COND -- ((T --)))</span>, there is no problem with continuation, so no further interaction is necessary.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">DWIM Operation                                                                                                                                        </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Whenever the interpreter encounters an atomic form with no binding, or a non-atomic form <span class="s11">CAR </span>of which is not a function or function object, it calls the function <span class="s11">FAULTEVAL</span>. Similarly, when <span class="s11">APPLY </span>is given an undefined function, <span class="s11">FAULTAPPLY </span>is called. When <span class="s11">DWIM </span>is enabled, <span class="s11">FAULTEVAL </span>and <span class="s11">FAULTAPPLY </span>are redefined to first call the DWIM package, which tries to correct the error. If <span class="s11">DWIM </span>cannot decide how to fix the error, or you disapprove of <span class="s11">DWIM</span>’s correction (by typing <span class="s11">N</span>), or you type Control-E, then <span class="s11">FAULTEVAL </span>and <span class="s11">FAULTAPPLY </span>cause an error or break. If you type <span class="s19"></span><span class="s21"> </span>to <span class="s11">DWIM</span>, <span class="s11">DWIM </span>exits by performing <span class="s11">(RETEVAL ’FAULTEVAL ’(ERROR!))</span>, so that an error will be generated at the position of the call to <span class="s11">FAULTEVAL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s11">DWIM </span>can (and is allowed to) correct the error, it exits by performing <span class="s11">RETEVAL </span>of the corrected form, as of the position of the call to <span class="s11">FAULTEVAL </span>or <span class="s11">FAULTAPPLY</span>. Thus in the example at the beginning of the chapter, when <span class="s11">DWIM </span>determined that <span class="s11">ITIMS </span>was <span class="s11">ITIMES </span>misspelled, <span class="s11">DWIM </span>called <span class="s11">RETEVAL </span>with <span class="s11">(ITIMES N (FACCT 9SUB1 N))</span>. Since the interpreter uses the value returned by <span class="s11">FAULTEVAL </span>exactly as though it were the value of the erroneous form, the computation will thus proceed exactly as though no error had occurred.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">In addition to continuing the computation, <span class="s11">DWIM </span>also repairs the cause of the error whenever possible; in the above example, <span class="s11">DWIM </span>also changed (with <span class="s11">RPLACA</span>) the expression <span class="s11">(ITIMS N (FACCT 9SUB1 N)) </span>that caused the error. Note that if your program had <i>computed </i>the form and called <span class="s11">EVAL</span>, it would not be possible to repair the cause of the error, although <span class="s11">DWIM </span>could correct the misspelling each time it occurred.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Error correction in <span class="s11">DWIM </span>is divided into three categories: unbound atoms, undefined <span class="s11">CAR </span>of form, and undefined function in <span class="s11">APPLY</span>. Assuming that the user approves <span class="s11">DWIM</span>’s corrections, the action taken by <span class="s11">DWIM </span>for the various types of errors in each of these categories is summarized below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">DWIM Correction: Unbound Atoms</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">If <span class="s11">DWIM </span>is called as the result of an unbound atom error, it proceeds as follows:</p><ol id="l49"><li><p class="s11" style="padding-top: 6pt;padding-left: 59pt;text-indent: -12pt;text-align: justify;"><span class="p">If the first character of the unbound atom is </span>’<span class="p">, </span>DWIM <span class="p">assumes that you (intentionally) typed </span>’<i>ATOM </i><span class="p">for </span>(QUOTE <i>ATOM</i>) <span class="p">and makes the appropriate change. No message is typed, and no approval is requested.</span></p><p style="padding-top: 6pt;padding-left: 60pt;text-indent: 0pt;text-align: justify;">If the unbound atom is just <span class="s11">’ </span>itself, <span class="s11">DWIM </span>assumes you want the <i>next </i>expression quoted, e.g., <span class="s11">(CONS X ’(A B C)) </span>will be changed to <span class="s11">(CONS X (QUOTE (A B C)))</span>. Again no message will be printed or approval asked. If no expression follows the <span class="s11">’</span>, DWIM gives up.</p><p style="padding-top: 6pt;padding-left: 89pt;text-indent: 0pt;text-align: justify;">Note: <span class="s11">’ </span>is normally defined as a read-macro character which converts <span class="s11">’FOO </span>to <span class="s11">(QUOTE FOO) </span>on input, so <span class="s11">DWIM </span>will not see the <b>’ </b>in the case of expressions that are typed-in.</p></li><li><p style="padding-top: 6pt;padding-left: 59pt;text-indent: -12pt;line-height: 94%;text-align: justify;">If CLISP (see Chapter 21) is enabled, and the atom is part of a CLISP construct, the CLISP transformation is performed and the result returned. For example, <span class="s11">N-1 </span>is transformed to <span class="s11">(SUB1 N)</span>, and <span class="s11">(... FOO_3 ...) </span>is transformed into <span class="s11">(... (SETQ FOO 3) ...)</span>.</p></li><li><p style="padding-top: 7pt;padding-left: 60pt;text-indent: -12pt;line-height: 94%;text-align: justify;">If the atom contains an <span class="s11">9 </span>(actually <span class="s11">LPARKEY </span>(see the DWIM Functions and Variables section below), <span class="s11">DWIM </span>assumes the <b>9 </b>was intended to be a left parenthesis, and calls the editor to make appropriate repairs on the expression containing the atom. DWIM assumes that you did not notice the mistake, i.e., that the entire expression was affected by the missing left parenthesis. For example, if you type <span class="s11">(SETQ X (LIST (CONS 9CAR Y) (CDR Z)) Y)</span>, the expression will be changed to <span class="s11">(SETQ X (LIST (CONS (CAR Y) (CDR Z)) Y))</span>. The <span class="s11">9 </span>does not have to be the first character of the atom: <span class="s11">DWIM </span>will handle <span class="s11">(CONS X9CAR Y) </span>correctly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 5pt;padding-left: 48pt;text-indent: 0pt;line-height: 87%;text-align: left;">INTERLISP-D REFERENCE MANUAL DWIM</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 8pt;padding-left: 107pt;text-indent: -12pt;text-align: justify;">If the atom contains a <span class="s11">0 </span>(actually <span class="s11">RPARKEY</span>, see the DWIM Functions and Variables section below), DWIM assumes the <span class="s11">0 </span>was intended to be a right parenthesis and operates as in the case above.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: justify;">If the atom begins with a <span class="s11">7</span>, the <span class="s11">7 </span>is treated as a <span class="s11">’</span>. For example, <span class="s11">7FOO </span>becomes <span class="s11">’FOO</span>, and then <span class="s11">(QUOTE FOO)</span>.</p></li><li><p style="padding-top: 7pt;padding-left: 108pt;text-indent: -12pt;line-height: 94%;text-align: justify;">The expressions on <span class="s11">DWIMUSERFORMS </span>(see the <span class="s11">DWIMUSERFORMS </span>section below) are evaluated in the order that they appear. If any of these expressions returns a non-<span class="s11">NIL </span>value, this value is treated as the form to be used to continue the computation, it is evaluated and its value is returned by <span class="s11">DWIM</span>.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;line-height: 12pt;text-align: left;">If the unbound atom occurs in a function, <span class="s11">DWIM </span>attempts spelling correction using the</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">LAMBDA <span class="p">and </span>PROG <span class="p">variables of the function as the spelling list.</span></p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: justify;">If the unbound atom occurred in a type-in to a break, <span class="s11">DWIM </span>attempts spelling correction using the <span class="s11">LAMBDA </span>and <span class="s11">PROG </span>variables of the broken function as the spelling list.</p></li><li><p style="padding-top: 7pt;padding-left: 108pt;text-indent: -12pt;text-align: justify;">Otherwise, <span class="s11">DWIM </span>attempts spelling correction using <span class="s11">SPELLINGS3 </span>(see the Spelling Lists section below).</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -17pt;text-align: left;">If all of the above fail, <span class="s11">DWIM </span>gives up.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Undefined CAR of Form</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">If DWIM is called as the result of an undefined <span class="s11">CAR </span>of form error, it proceeds as follows:</p><ol id="l50"><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: justify;">If <span class="s11">CAR </span>of the form is <span class="s11">T</span>, DWIM assumes a misplaced <span class="s11">T </span>clause and operates as described in the Undefined Function T Errors section above.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: justify;">If <span class="s11">CAR </span>of the form is <span class="s11">F/L</span>, DWIM changes the &quot;<span class="s11">F/L</span>&quot; to &quot;<span class="s11">FUNCTION(LAMBDA</span>&quot;. For example, <span class="s11">(F/L (Y) (PRINT (CAR Y))) </span>is changed to <span class="s11">(FUNCTION (LAMBDA (Y) (PRINT (CAR Y)))</span>. No message is printed and no approval requested. If you omit the variable list, <span class="s11">DWIM </span>supplies <span class="s11">(X)</span>, e.g., <span class="s11">(F/L (PRINT (CAR X))) </span>is changed to <span class="s11">(FUNCTION (LAMBDA (X) (PRINT (CAR X))))</span>. <span class="s11">DWIM </span>determines that you have supplied the variable list when more than one expression follows <span class="s11">F/L</span>, <span class="s11">CAR </span>of the first expression is not the name of a function, and every element in the first expression is atomic. For example, DWIM will supply <span class="s11">(X) </span>when correcting <span class="s11">(F/L (PRINT (CDR X)) (PRINT (CAR X)))</span>.</p></li><li><p style="padding-top: 7pt;padding-left: 108pt;text-indent: -12pt;line-height: 93%;text-align: justify;">If <span class="s11">CAR </span>of the form is a CLISP word (<span class="s11">IF</span>, <span class="s11">FOR</span>, <span class="s11">DO</span>, <span class="s11">FETCH</span>, etc.), the indicated CLISP transformation is performed, and the result is returned as the corrected form. See Chapter 21.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: justify;">If <span class="s11">CAR </span>of the form has a function definition, <span class="s11">DWIM </span>attempts spelling correction on <span class="s11">CAR </span>of the definition using as spelling list the value of <span class="s11">LAMBDASPLST</span>, initially <span class="s11">(LAMBDA NLAMBDA)</span>.</p></li><li><p style="padding-top: 7pt;padding-left: 108pt;text-indent: -12pt;text-align: justify;">If <span class="s11">CAR </span>of the form has an <span class="s11">EXPR </span>or <span class="s11">CODE </span>property, <span class="s11">DWIM </span>prints <span class="s16">CAR-OF-FORM </span><span class="s11">UNSAVED</span>, performs an <span class="s11">UNSAVEDEF</span>, and continues. No approval is requested.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 5pt;padding-left: 59pt;text-indent: -12pt;text-align: justify;">If <span class="s11">CAR </span>of the form has a <span class="s11">FILEDEF </span>property, the definition is loaded from a file (except when <span class="s11">DWIMIFY</span>ing). If the value of the property is atomic, the entire file is to be loaded. If the value is a list, <span class="s11">CAR </span>is the name of the file and <span class="s11">CDR </span>the relevant functions, and <span class="s11">LOADFNS </span>will be used. For both cases, <span class="s16">LDFLG </span>will be <span class="s11">SYSLOAD </span>(see Chapter 17). <span class="s11">DWIM </span>uses <span class="s11">FINDFILE </span>(Chapter 24), so that the file can be on any of the directories on <span class="s11">DIRECTORIES</span>, initially <span class="s11">(NIL NEWLISP LISP LISPUSERS)</span>. If the file is found, DWIM types <span class="s11">SHALL I LOAD </span>followed by the file name or list of functions. If you approve, DWIM loads the function(s) or file, and continues the computation.</p></li><li><p class="s11" style="padding-top: 6pt;padding-left: 60pt;text-indent: -12pt;text-align: justify;"><span class="p">If CLISP is enabled, and </span>CAR <span class="p">of the form is part of a CLISP construct, the indicated transformation is performed, e.g., </span>(N<span class="s19"></span>N-1) <span class="p">becomes </span>(SETQ N (SUB1 N))<span class="p">.</span></p></li><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -60pt;line-height: 12pt;text-align: right;">If <span class="s11">CAR </span>of the form contains an <span class="s11">9</span>, <span class="s11">DWIM </span>assumes a left parenthesis was intended e.g.,</p><p class="s11" style="padding-left: 60pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(CONS9CAR X)<span class="p">.</span></p></li><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -12pt;text-align: left;">If <span class="s11">CAR </span>of the form contains a <span class="s11">0</span>, <span class="s11">DWIM </span>assumes a right parenthesis was intended.</p></li><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -60pt;line-height: 12pt;text-align: right;">If <span class="s11">CAR </span>of the form is a list, DWIM attempts spelling correction on <span class="s11">CAAR </span>of the form using</p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">LAMBDASPLST <span class="p">as spelling list.  If successful, </span>DWIM <span class="p">returns the corrected expression itself.</span></p></li><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -17pt;text-align: justify;">The expressions on <span class="s11">DWIMUSERFORMS </span>are evaluated in the order they appear. If any returns a non-<span class="s11">NIL </span>value, this value is treated as the corrected form, it is evaluated, and <span class="s11">DWIM </span>returns its value.</p></li><li><p style="padding-top: 7pt;padding-left: 60pt;text-indent: -17pt;line-height: 94%;text-align: justify;">Otherwise, <span class="s11">DWIM </span>attempts spelling correction using <span class="s11">SPELLINGS2 </span>as the spelling list (see the Spelling Lists section below). When <span class="s11">DWIMIFY</span>ing, <span class="s11">DWIM </span>also attemps spelling correction on function names not defined but previously encountered, using <span class="s11">NOFIXFNSLST </span>as a spelling list (see Chapter 21).</p></li><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -17pt;text-align: left;">If all of the above fail, DWIM gives up.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Undefined Function in APPLY</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">If <span class="s11">DWIM </span>is called as the result of an undefined function in <span class="s11">APPLY </span>error, it proceeds as follows:</p><ol id="l51"><li><p style="padding-top: 6pt;padding-left: 59pt;text-indent: -12pt;text-align: justify;">If the function has a definition, DWIM attempts spelling correction on <span class="s11">CAR </span>of the definition using <span class="s11">LAMBDASPLST </span>as spelling list.</p></li><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -12pt;line-height: 12pt;text-align: left;">If the function has an <span class="s11">EXPR </span>or <span class="s11">CODE </span>property, DWIM prints <span class="s16">FN </span><span class="s11">UNSAVED</span>, performs an</p><p class="s11" style="padding-left: 60pt;text-indent: 0pt;line-height: 12pt;text-align: left;">UNSAVEDEF <span class="p">and continues. No approval is requested.</span></p></li><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -12pt;line-height: 12pt;text-align: left;">If the function has a property <span class="s11">FILEDEF</span>, DWIM proceeds as in case 6 of undefined <span class="s11">CAR</span></p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 12pt;text-align: left;">of form.</p></li><li><p class="s11" style="padding-top: 6pt;padding-left: 60pt;text-indent: -12pt;line-height: 91%;text-align: justify;"><span class="p">If the error resulted from type-in, and CLISP is enabled, and the function name contains a CLISP operator, DWIM performs the indicated transformation, e.g., type </span>FOO<span class="s19"></span>(APPEND FIE FUM)<span class="p">.</span></p></li><li><p style="padding-top: 6pt;padding-left: 60pt;text-indent: -12pt;line-height: 12pt;text-align: left;">If the function name contains an <span class="s11">9</span>, DWIM assumes a left parenthesis was intended, e.g.,</p><p class="s11" style="padding-left: 60pt;text-indent: 0pt;line-height: 12pt;text-align: left;">EDIT9FOO]<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 5pt;padding-left: 48pt;text-indent: 0pt;line-height: 87%;text-align: left;">INTERLISP-D REFERENCE MANUAL DWIM</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 8pt;padding-left: 108pt;text-indent: -12pt;line-height: 12pt;text-align: left;">If the &quot;function&quot; is a list, DWIM attempts spelling correction on <span class="s11">CAR </span>of the list using</p><p class="s11" style="padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">LAMBDASPLST <span class="p">as spelling list.</span></p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: justify;">The expressions on <span class="s11">DWIMUSERFORMS </span>are evaluated in the order they appear, and if any returns a non-<span class="s11">NIL </span>value, this value is treated as the function used to continue the computation, i.e., it will be applied to its arguments.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: left;">DWIM attempts spelling correction using <span class="s11">SPELLINGS1 </span>as the spelling list.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -12pt;text-align: left;">DWIM attempts spelling correction using <span class="s11">SPELLINGS2 </span>as the spelling list.</p></li><li><p style="padding-top: 6pt;padding-left: 108pt;text-indent: -17pt;text-align: left;">If all fail, DWIM gives up.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">DWIMUSERFORMS                                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The variable <span class="s11">DWIMUSERFORMS </span>provides a convenient way of adding to the transformations that <span class="s11">DWIM </span>performs. For example, you might want to change atoms of the form <span class="s11">$X </span>to <span class="s11">(QA4LOOKUP X)</span>. Before attempting spelling correction, but after performing other transformations (<span class="s11">F/L</span>, <span class="s11">9</span>, <span class="s11">0</span>, CLISP, etc.), <span class="s11">DWIM </span>evaluates the expressions on <span class="s11">DWIMUSERFORMS </span>in the order they appear. If any expression returns a non-<span class="s11">NIL </span>value, this value is treated as the transformed form to be used. If <span class="s11">DWIM </span>was called from <span class="s11">FAULTEVAL</span>, this form is evaluated and the resulting value is returned as the value of <span class="s11">FAULTEVAL</span>. If <span class="s11">DWIM </span>is called from <span class="s11">FAULTAPPLY</span>, this form is treated as a function to be applied to <span class="s11">FAULTARGS</span>, and the resulting value is returned as the value of <span class="s11">FAULTAPPLY</span>. If all of the expressions on <span class="s11">DWIMUSERFORMS </span>return <span class="s11">NIL</span>, <span class="s11">DWIM </span>proceeds as though <span class="s11">DWIMUSERFORMS = NIL</span>, and attempts spelling correction. Note that <span class="s11">DWIM </span>simply takes the value and returns it; the expressions on <span class="s11">DWIMUSERFORMS </span>are responsible for making any modifications to the original expression. The expressions on <span class="s11">DWIMUSERFORMS </span>should make the transformation permanent, either by associating it with <span class="s11">FAULTX </span>via <span class="s11">CLISPTRAN</span>, or by destructively changing <span class="s11">FAULTX</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">In order for an expression on <span class="s11">DWIMUSERFORMS </span>to be able to be effective, it needs to know various things about the context of the error. Therefore, several of DWIM’s internal variables have been made <span class="s11">SPECVARS </span>(see Chapter 18) and are therefore &quot;visible&quot; to <span class="s11">DWIMUSERFORMS</span>. Below are a list of those variables that may be useful.</p><p class="s15" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">FAULTX <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">For unbound atom and undefined car of form errors, <span class="s11">FAULTX </span>is the atom or form. For undefined function in <span class="s11">APPLY </span>errors, <span class="s11">FAULTX </span>is the name of the function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">FAULTARGS <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">For undefined function in <span class="s11">APPLY </span>errors, <span class="s11">FAULTARGS </span>is the list of arguments. <span class="s11">FAULTARGS</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">may be modified or reset by expressions on <span class="s11">DWIMUSERFORMS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">FAULTAPPLYFLG <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Value is <span class="s11">T </span>for undefined function in <span class="s11">APPLY </span>errors; <span class="s11">NIL </span>otherwise. The value of <span class="s11">FAULTAPPLYFLG </span><i>after </i>an expression on <span class="s11">DWIMUSERFORMS </span>returns a non-<span class="s11">NIL </span>value determines how the latter value is to be treated. Following an undefined function in <span class="s11">APPLY </span>error, if an expression on <span class="s11">DWIMUSERFORMS </span>sets <span class="s11">FAULTAPPLYFLG </span>to <span class="s11">NIL</span>, the value returned is treated as a form to be evaluated, rather than a function to be applied.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">FAULTAPPLYFLG <span class="p">is necessary to distinguish between unbound atom and undefined function in </span>APPLY <span class="p">errors, since </span>FAULTARGS <span class="p">may be </span>NIL <span class="p">and </span>FAULTX <span class="p">atomic in both cases.</span></p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">TAIL <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">For unbound atom errors, </span>TAIL <span class="p">is the tail of the expression </span>CAR <span class="p">of which is the unbound atom. </span>DWIMUSERFORMS <span class="p">expression can replace the atom by another expression by performing </span>(/RPLACA TAIL <i>EXPR</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">PARENT <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">For unbound atom errors, <span class="s11">PARENT </span>is the form in which the unbound atom appears. <span class="s11">TAIL</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">is a tail of <span class="s11">PARENT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">TYPE-IN? <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">True if the error occurred in type-in.</p><p class="s15" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">FAULTFN <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Name of the function in which error occurred. <span class="s11">FAULTFN </span>is <span class="s11">TYPE-IN </span>when the error occurred in type-in, and <span class="s11">EVAL </span>or <span class="s11">APPLY </span>when the error occurred under an explicit call to <span class="s11">EVAL </span>or <span class="s11">APPLY</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">DWIMIFYFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">True if the error was encountered while <span class="s11">DWIMIFY</span>ing (as opposed to happening while running a program).</p><p class="s15" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">EXPR <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Definition of <span class="s11">FAULTFN</span>, or argument to <span class="s11">EVAL</span>, i.e., the superform in which the error occurs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The initial value of <span class="s11">DWIMUSERFORMS </span>is <span class="s11">((DWIMLOADFNS?))</span>. <span class="s11">DWIMLOADFNS? </span>is a function for automatically loading functions from files. If <span class="s11">DWIMLOADFNSFLG </span>is <span class="s11">T </span>(its initial value), and <span class="s11">CAR </span>of the form is the name of a function, and the function is contained on a file that has been noticed by the file package, the function is loaded, and the computation continues.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 5pt;padding-left: 48pt;text-indent: 0pt;line-height: 87%;text-align: left;">INTERLISP-D REFERENCE MANUAL DWIM</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">DWIM Functions and Variables                                                                                                                </h4><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">DWIMWAIT                                                       <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Value is the number of seconds that DWIM will wait before it assumes that you are not going to respond to a question and uses the default response <span class="s11">FIXSPELLDEFAULT</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">DWIM operates by dismissing for 250 milliseconds, then checking to see if anything has been typed. If not, it dismisses again, etc. until <span class="s11">DWIMWAIT </span>seconds have elapsed. Thus, there will be a delay of at most 1 / 4 second before DWIM responds to your answer.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">FIXSPELLDEFAULT                                                <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If approval is requested for a spelling correction, and you do not respond, defaults to value of <span class="s11">FIXSPELLDEFAULT</span>, initially <span class="s11">Y</span>. <span class="s11">FIXSPELLDEFAULT </span>is rebound to <span class="s11">N </span>when <span class="s11">DWIMIFY</span>ing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">ADDSPELLFLG                                                    <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">NIL</span>, suppresses calls to <span class="s11">ADDSPELL</span>. Initially <span class="s11">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">NOSPELLFLG                                                     <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s11">T</span>, suppresses <i>all </i>spelling correction. If some other non-<span class="s11">NIL </span>value, suppresses spelling correction in programs but not type-in. <span class="s11">NOSPELLFLG </span>is initially <span class="s11">NIL</span>. It is rebound to <span class="s11">T </span>when compiling from a file.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">RUNONFLG                                                       <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">NIL</span>, suppresses run-on spelling corrections. Initially <span class="s11">NIL</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">DWIMLOADFNSFLG                                                 <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">T</span>, tells <span class="s11">DWIM </span>that when it encounters a call to an undefined function contained on a file that has been noticed by the file package, to simply load the function. <span class="s11">DWIMLOADFNSFLG </span>is initially <span class="s11">T </span>(see above).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">LPARKEY                                                        <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">RPARKEY                                                        <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">DWIM <span class="p">uses the value of the variables </span>LPARKEY <span class="p">and </span>RPARKEY <span class="p">(initially </span>9 <span class="p">and </span>0 <span class="p">respectively) to determine the corresponding lower case character for left and right parentheses. </span>LPARKEY <span class="p">and </span>RPARKEY <span class="p">can be reset for other keyboard layouts. For example, on some terminals left parenthesis is over </span>8<span class="p">, and right parenthesis is over </span>9<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">OKREEVALST                                                     <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The value of <span class="s11">OKREEVALST </span>is a list of functions that <span class="s11">DWIM </span>can safely reevaluate. If a form is atomic, or <span class="s11">CAR </span>of the form is a member of <span class="s11">OKREEVALST</span>, and each of the arguments can safely be reevaluated, then the form can be safely reevaluated. For example, <span class="s11">(SETQ X (CONS (IPLUS Y Z) W)) </span>is safe to reevaluate because <span class="s11">SETQ</span>, <span class="s11">CONS</span>, and <span class="s11">IPLUS </span>are all on <span class="s11">OKREEVALST</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">DWIMFLG <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">DWIMFLG = NIL<span class="p">, all </span>DWIM <span class="p">operations are disabled. </span>(DWIM ’C) <span class="p">and </span>(DWIM T) <span class="p">set</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">DWIMFLG <span class="p">to </span>T<span class="p">; </span>(DWIM NIL) <span class="p">sets </span>DWIMFLG <span class="p">to </span>NIL<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">APPROVEFLG <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">APPROVEFLG = T <span class="p">if </span>DWIM <span class="p">should ask the user for approval before making a correction that will modify the definition of one of his functions; </span>NIL <span class="p">otherwise.</span></p><p style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">When <span class="s11">DWIM </span>is put into <span class="s11">CAUTIOUS </span>mode with <span class="s11">(DWIM ’C)</span>, <span class="s11">APPROVEFLG </span>is set to <span class="s11">T</span>; for</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">TRUSTING <span class="p">mode, </span>APPROVEFLG <span class="p">is set to </span>NIL<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">LAMBDASPLST <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">DWIM <span class="p">uses the value of </span>LAMBDASPLST <span class="p">as the spelling list when correcting &quot;bad&quot; function definitions. Initially </span>(LAMBDA NLAMBDA)<span class="p">. You may wish to add to </span>LAMBDASPLST <span class="p">if you elect to define new &quot;function types&quot; via an appropriate </span>DWIMUSERFORMS <span class="p">entry. For example, the </span>QLAMBDA<span class="p">s of SRI’s QLISP are handled in this way.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Spelling Correction                                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The spelling corrector is given as arguments a misspelled word (word means symbol), a spelling list (a list of words), and a number: <span class="s16">XWORD</span>, <span class="s16">SPLST</span>, and <span class="s16">REL </span>respectively. Its task is to find that word on <span class="s16">SPLST </span>which is closest to <span class="s16">XWORD</span>, in the sense described below. This word is called a <i>respelling </i>of <span class="s16">XWORD</span>. <span class="s16">REL </span>specifies the minimum &quot;closeness&quot; between <span class="s16">XWORD </span>and a respelling. If the spelling corrector cannot find a word on <span class="s16">SPLST </span>closer to <span class="s16">XWORD </span>than <span class="s16">REL</span>, or if it finds two or more words equally close, its value is <span class="s11">NIL</span>, otherwise its value is the respelling. The spelling corrector can also be given an optional functional argument, <span class="s16">FN</span>, to be used for selecting out a subset of <span class="s16">SPLST</span>, i.e., only those members of <span class="s16">SPLST </span>that satisfy <span class="s16">FN </span>will be considered as possible respellings.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The exact algorithm for computing the spelling metric is described later, but briefly &quot;closeness&quot; is inversely proportional to the number of disagreements between the two words, and directly proportional to the length of the longer word. For example, <span class="s11">PRTTYPRNT </span>is &quot;closer&quot; to <span class="s11">PRETTYPRINT </span>than <span class="s11">CS </span>is to <span class="s11">CONS </span>even though both pairs of words have the same number of disagreements. The spelling corrector operates by proceeding down <span class="s16">SPLST</span>, and computing the closeness between each word and <span class="s16">XWORD</span>, and keeping a list of those that are closest. Certain differences between words are not counted as disagreements, for example a single transposition, e.g., <span class="s11">CONS </span>to <span class="s11">CNOS</span>, or a doubled letter, e.g., <span class="s11">CONS </span>to <span class="s11">CONSS</span>, etc. In the event that the spelling corrector finds a word on <span class="s16">SPLST </span>with <i>no </i>disagreements, it will stop searching and return this word as the respelling. Otherwise, the spelling corrector continues through the entire spelling list. Then if it has found one and only one &quot;closest&quot; word, it returns this word as the respelling. For example, if <span class="s16">XWORD </span>is <span class="s11">VONS</span>, the spelling corrector will probably return <span class="s11">CONS </span>as the respelling. However, if <span class="s16">XWORD </span>is <span class="s11">CONZ</span>, the spelling corrector will not be able to return a respelling, since <span class="s11">CONZ </span>is equally close to both <span class="s11">CONS </span>and <span class="s11">COND</span>. If the spelling corrector finds an acceptable respelling, it interacts with you as described earlier.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 5pt;padding-left: 48pt;text-indent: 0pt;line-height: 87%;text-align: left;">INTERLISP-D REFERENCE MANUAL DWIM</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">In the special case that the misspelled word contains one or more <span class="s11">$</span>s (escape), the spelling corrector searches for those words on <span class="s16">SPLST </span>that match <span class="s16">XWORD</span>, where a <span class="s11">$ </span>can match any number of characters (including 0), e.g., <span class="s11">FOO$ </span>matches <span class="s11">FOO1 </span>and <span class="s11">FOO</span>, but not <span class="s11">NEWFOO</span>. <span class="s11">$FOO$ </span>matches all three. Both completion and correction may be involved, e.g. <span class="s11">RPETTY$ </span>will match <span class="s11">PRETTYPRINT</span>, with one mistake. The entire spelling list is always searched, and if more than one respelling is found, the spelling corrector prints <span class="s11">AMBIGUOUS</span>, and returns <span class="s11">NIL</span>. For example, <span class="s11">CON$ </span>would be ambiguous if both <span class="s11">CONS </span>and <span class="s11">COND </span>were on the spelling list. If the spelling corrector finds one and only one respelling, it interacts with you as described earlier.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">For both spelling correction and spelling completion, regardless of whether or not you approve of the spelling corrector’s choice, the respelling is moved to the front of <span class="s16">SPLST</span>. Since many respellings are of the type with no disagreements, this procedure has the effect of considerably reducing the time required to correct the spelling of frequently misspelled words.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Synonyms</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Spelling lists also provide a way of defining synonyms for a particular context. If a dotted pair appears on a spelling list (instead of just an atom), <span class="s11">CAR </span>is interpreted as the correct spelling of the misspelled word, and <span class="s11">CDR </span>as the antecedent for that word. If <span class="s11">CAR </span>is <i>identical </i>with the misspelled word, the antecedent is returned without any interaction or approval being necessary. If the misspelled word <i>corrects </i>to <span class="s11">CAR </span>of the dotted pair, the usual interaction and approval will take place, and then the antecedent, i.e., <span class="s11">CDR </span>of the dotted pair, is returned. For example,you could make <span class="s11">IFLG </span>synonymous with <span class="s11">CLISPIFTRANFLG </span>by adding <span class="s11">(IFLG . CLISPIFTRANFLG) </span>to <span class="s11">SPELLINGS3</span>, the spelling list for unbound atoms. Similarly, you could make <span class="s11">OTHERWISE </span>mean the same as <span class="s11">ELSEIF </span>by adding <span class="s11">(OTHERWISE . ELSEIF) </span>to <span class="s11">CLISPIFWORDSPLST</span>, or make <span class="s11">L </span>be synonymous with <span class="s11">LAMBDA </span>by adding <span class="s11">(L . LAMBDA) </span>to <span class="s11">LAMBDASPLST</span>. You can also use <span class="s11">L </span>as a variable without confusion, since the association of <span class="s11">L </span>with <span class="s11">LAMBDA </span>occurs only in the appropriate context.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Spelling Lists</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Any list of atoms can be used as a spelling list, e.g., <span class="s11">BROKENFNS</span>, <span class="s11">FILELST</span>, etc. Various system packages have their own spellings lists, e.g., <span class="s11">LISPXCOMS</span>, <span class="s11">CLISPFORWORDSPLST</span>, <span class="s11">EDITCOMSA</span>, etc. These are documented under their corresponding sections, and are also indexed under &quot;spelling lists.&quot; In addition to these spelling lists, the system maintains, i.e., automatically adds to, and occasionally prunes, four lists used solely for spelling correction: <span class="s11">SPELLINGS1</span>, <span class="s11">SPELLINGS2</span>, <span class="s11">SPELLINGS3</span>, and <span class="s11">USERWORDS</span>. These spelling lists are maintained <i>only </i>when <span class="s11">ADDSPELLFLG </span>is non-<span class="s11">NIL</span>. <span class="s11">ADDSPELLFLG </span>is initially <span class="s11">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">SPELLINGS1                                                     <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">SPELLINGS1 <span class="p">is a list of functions used for spelling correction when an input is typed in apply format, and the function is undefined, e.g., </span>EDTIF(FOO)<span class="p">. </span>SPELLINGS1 <span class="p">is initialized to contain </span>DEFINEQ<span class="p">, </span>BREAK<span class="p">, </span>MAKEFILE<span class="p">, </span>EDITF<span class="p">, </span>TCOMPL<span class="p">, </span>LOAD<span class="p">, etc. Whenever </span>LISPX <span class="p">is given an input in apply format, i.e., a function and arguments, the name of the function is added to </span>SPELLINGS1 <span class="p">if the function has a definition.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, typing <span class="s11">CALLS(EDITF) </span>will cause <span class="s11">CALLS </span>to be added to <span class="s11">SPELLINGS1</span>. Thus if you typed <span class="s11">CALLS(EDITF) </span>and later typed <span class="s11">CALLLS(EDITV)</span>, since <span class="s11">SPELLINGS1 </span>would then contain <span class="s11">CALLS</span>, DWIM would be successful in correcting <span class="s11">CALLLS </span>to <span class="s11">CALLS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">SPELLINGS2 <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">SPELLINGS2 <span class="p">is a list of functions used for spelling correction for all other undefined functions. It is initialized to contain functions such as </span>ADD1<span class="p">, </span>APPEND<span class="p">, </span>COND<span class="p">, </span>CONS<span class="p">, </span>GO<span class="p">, </span>LIST<span class="p">, </span>NCONC<span class="p">, </span>PRINT<span class="p">, </span>PROG<span class="p">, </span>RETURN<span class="p">, </span>SETQ<span class="p">, etc. Whenever </span>LISPX <span class="p">is given a non-atomic form, the name of the function is added to </span>SPELLINGS2<span class="p">. For example, typing </span>(RETFROM (STKPOS (QUOTE FOO) 2)) <span class="p">to a break would add </span>RETFROM <span class="p">to </span>SPELLINGS2<span class="p">. Function names are also added to </span>SPELLINGS2 <span class="p">by </span>DEFINE<span class="p">, </span>DEFINEQ<span class="p">, </span>LOAD <span class="p">(when loading compiled code), </span>UNSAVEDEF<span class="p">, </span>EDITF<span class="p">, and </span>PRETTYPRINT<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">SPELLINGS3 <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">SPELLINGS3 <span class="p">is a list of words used for spelling correction on all unbound atoms.</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">SPELLINGS3 <span class="p">is initialized to </span>EDITMACROS<span class="p">, </span>BREAKMACROS<span class="p">, </span>BROKENFNS<span class="p">, and</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">ADVISEDFNS<span class="p">. Whenever </span>LISPX <span class="p">is given an atom to evaluate, the name of the atom is added to </span>SPELLINGS3 <span class="p">if the atom has a value. Atoms are also added to </span>SPELLINGS3 <span class="p">whenever they are edited by </span>EDITV<span class="p">, and whenever they are set via </span>RPAQ <span class="p">or </span>RPAQQ<span class="p">. For example, when a file is loaded, all of the variables set in the file are added to </span>SPELLINGS3<span class="p">. Atoms are also added to </span>SPELLINGS3 <span class="p">when they are set by a </span>LISPX <span class="p">input, e.g., typing </span>(SETQ FOO (REVERSE (SETQ FIE ...))) <span class="p">will add both </span>FOO <span class="p">and </span>FIE <span class="p">to </span>SPELLINGS3<span class="p">.</span></p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">USERWORDS <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">USERWORDS </span>is a list containing both functions and variables that you have <i>referred </i>to, e.g., by breaking or editing. <span class="s11">USERWORDS </span>is used for spelling correction by <span class="s11">ARGLIST</span>, <span class="s11">UNSAVEDEF</span>, <span class="s11">PRETTYPRINT</span>, <span class="s11">BREAK</span>, <span class="s11">EDITF</span>, <span class="s11">ADVISE</span>, etc. <span class="s11">USERWORDS </span>is initially <span class="s11">NIL</span>.</p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Function names are added to it by <span class="s11">DEFINE</span>, <span class="s11">DEFINEQ, LOAD</span>, (when loading compiled code, or loading exprs to property lists) <span class="s11">UNSAVEDEF</span>, <span class="s11">EDITF</span>, <span class="s11">EDITV</span>, <span class="s11">EDITP</span>, <span class="s11">PRETTYPRINT</span>, etc. Variable names are added to <span class="s11">USERWORDS </span>at the same time as they are added to <span class="s11">SPELLINGS3</span>. In addition, the variable <span class="s11">LASTWORD </span>is always set to the last word added to <span class="s11">USERWORDS</span>, i.e., the last function or variable referred to by the user, and the respelling of <span class="s11">NIL </span>is defined to be the value of <span class="s11">LASTWORD</span>. Thus, if you had just defined a function, you can then prettyprint it by typing <span class="s11">PP()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Each of the above four spelling lists are divided into two sections separated by a special marker (the value of the variable <span class="s11">SPELLSTR1</span>). The first section contains the &quot;permanent&quot; words; the second section contains the temporary words. New words are added to the corresponding spelling list at the front of its temporary section (except that functions added to <span class="s11">SPELLINGS1 </span>or <span class="s11">SPELLINGS2 </span>by <span class="s11">LISPX </span>are always added to the end of the permanent section. If the word is already in the temporary section, it is moved to the front of that section; if the word is in the permanent section, no action is taken. If the length of the temporary section then exceeds a specified number, the last (oldest) word in the temporary section is forgotten, i.e., deleted. This procedure prevents the spelling lists from becoming cluttered with unimportant words that are no longer being used, and thereby slowing down spelling</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 5pt;padding-left: 48pt;text-indent: 0pt;line-height: 87%;text-align: left;">INTERLISP-D REFERENCE MANUAL DWIM</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">correction time. Since the spelling corrector usually moves each word selected as a respelling to the front of its spelling list, the word is thereby moved into the permanent section. Thus once a word is misspelled and corrected, it is considered important and will never be forgotten.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The spelling correction algorithm will not alter a spelling list unless it contains the special marker (the value of <span class="s11">SPELLSTR1</span>). This provides a way to ensure that a spelling list will not be altered.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">#SPELLINGS1                                                    <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">#SPELLINGS2                                                    <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">#SPELLINGS3                                                    <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">#USERWORDS                                                     <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The maximum length of the temporary section for <span class="s11">SPELLINGS1</span>, <span class="s11">SPELLINGS2</span>, <span class="s11">SPELLINGS3 </span>and <span class="s11">USERWORDS </span>is given by the value of <span class="s11">#SPELLINGS1</span>, <span class="s11">#SPELLINGS2</span>, <span class="s11">#SPELLINGS3</span>, and <span class="s11">#USERWORDS</span>, initialized to 30, 30, 30, and 60 respectively.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">You can alter these values to modify the performance behavior of spelling correction.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Generators for Spelling Correction</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">For some applications, it is more convenient to <i>generate </i>candidates for a respelling one by one, rather than construct a complete list of all possible candidates, e.g., spelling correction involving a large directory of files, or a natural language data base. For these purposes, <span class="s16">SPLST </span>can be an array (of any size). The first element of this array is the generator function, which is called with the array itself as its argument. Thus the function can use the remainder of the array to store &quot;state&quot; information, e.g., the last position on a file, a pointer into a data structure, etc. The value returned by the function is the next candidate for respelling. If <span class="s11">NIL </span>is returned, the spelling &quot;list&quot; is considered to be exhausted, and the closest match is returned. If a candidate is found with no disagreements, it is returned immediately without waiting for the &quot;list&quot; to exhaust.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s16">SPLST </span>can also be a generator, i.e. the value of the function <span class="s11">GENERATOR </span>(Chapter 11). The generator <span class="s16">SPLST </span>will be started up whenever the spelling corrector needs the next candidate, and it should return candidates via the function <span class="s11">PRODUCE</span>. For example, the following could be used as a &quot;spelling list&quot; which effectively contains all functions in the system:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[GENERATOR</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(MAPATOMS (FUNCTION (LAMBDA (X) (if (GETD X) then (PRODUCE</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">X]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Spelling Corrector Algorithm</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The basic philosophy of <span class="s11">DWIM </span>spelling correction is to count the number of disagreements between two words, and use this number divided by the length of the longer of the two words as a measure of their relative disagreement. One minus this number is then the relative agreement or closeness. For example, <span class="s11">CONS </span>and <span class="s11">CONX </span>differ only in their last character. Such substitution errors count as one disagreement, so that the two words are in 75% agreement. Most calls to the spelling corrector specify a relative agreement of 70, so that a single substitution error is permitted in words of four characters</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">or longer. However, spelling correction on shorter words is possible since certain types of differences such as single transpositions are not counted as disagreements. For example, <span class="s11">AND </span>and <span class="s11">NAD </span>have a relative agreement of 100. Calls to the spelling corrector from DWIM use the value of <span class="s11">FIXSPELLREL</span>, which is initially 70. Note that by setting <span class="s11">FIXSPELLREL </span>to 100, only spelling corrections with &quot;zero&quot; mistakes, will be considered, e.g., transpositions, double characters, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The central function of the spelling corrector is <span class="s11">CHOOZ</span>. <span class="s11">CHOOZ </span>takes as arguments: a word, a minimum relative agreement, a spelling list, and an optional functional argument, <span class="s16">XWORD</span>, <span class="s16">REL</span>, <span class="s16">SPLST</span>, and <span class="s16">FN </span>respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;"><span class="s11">CHOOZ </span>proceeds down <span class="s16">SPLST </span>examining each word. Words not satisfying <span class="s16">FN </span>(if <span class="s16">FN </span>is non-<span class="s11">NIL</span>), or those obviously too long or too short to be sufficiently close to <span class="s16">XWORD </span>are immediately rejected. For example, if <span class="s16">REL </span><span class="s11">= 70</span>, and <span class="s16">XWORD </span>is 5 characters long, words longer than 7 characters will be rejected.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Special treatment is necessary for words shorter than <span class="s16">XWORD</span>, since doubled letters are not counted as disagreements. For example, <span class="s11">CONNSSS </span>and <span class="s11">CONS </span>have a relative agreement of 100. <span class="s11">CHOOZ </span>handles this by counting the number of doubled characters in <span class="s16">XWORD </span>before it begins scanning <span class="s16">SPLST</span>, and taking this into account when deciding whether to reject shorter words.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TWORD</span>, the current word on <span class="s16">SPLST</span>, is not rejected, <span class="s11">CHOOZ </span>computes the number of disagreements between it and <span class="s16">XWORD </span>by calling a subfunction, <span class="s11">SKOR</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">SKOR <span class="p">operates by scanning both words from left to right one character at a time. </span>SKOR <span class="p">operates on the list of character codes for each word. This list is computed by </span>CHOOZ <span class="p">before calling </span>SKOR<span class="p">. Characters are considered to agree if they are the same characters or appear on the same key (i.e., a shift mistake). The variable </span>SPELLCASEARRAY <span class="p">is a </span>CASEARRAY <span class="p">which is used to determine equivalence classes for this purpose. It is initialized to equivalence lowercase and upper case letters, as well as the standard key transitions: for example, </span>1 <span class="p">with </span>!<span class="p">, </span>3 <span class="p">with </span>#<span class="p">, etc.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If the first character in <span class="s16">XWORD </span>and <span class="s16">TWORD </span>do <i>not </i>agree, <span class="s11">SKOR </span>checks to see if either character is the same as one previously encountered, and not accounted-for at that time. (In other words, transpositions are not handled by lookahead, but by <i>lookback</i>.) A displacement of two or fewer positions is counted as a tranposition; a displacement by more than two positions is counted as a disagreement.In either case, both characters are now considered as accounted for and are discarded, and <span class="s11">SKOR</span>ing continues.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">If the first character in <span class="s16">XWORD </span>and <span class="s16">TWORD </span>do not agree, and neither agree with previously unaccounted-for characters, and <span class="s16">TWORD </span>has more characters remaining than <span class="s16">XWORD</span>, <span class="s11">SKOR </span>removes and saves the first character of <span class="s16">TWORD</span>, and continues by comparing the rest of <span class="s16">TWORD </span>with <span class="s16">XWORD </span>as described above. If <span class="s16">TWORD </span>has the same or fewer characters remaining than <span class="s16">XWORD</span>, the procedure is the same except that the character is removed from <span class="s16">XWORD</span>.  In this case, a special check is first made to see if that character is equal to the <i>previous </i>character in <span class="s16">XWORD</span>, or to the <i>next </i>character in <span class="s16">XWORD</span>, i.e., a double character typo, and if so, the character is considered accounted-for, and not counted as a disagreement. In this case, the &quot;length&quot; of <span class="s16">XWORD </span>is also decremented. Otherwise making <span class="s16">XWORD</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 5pt;padding-left: 48pt;text-indent: 0pt;line-height: 87%;text-align: left;">INTERLISP-D REFERENCE MANUAL DWIM</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">sufficiently long by adding double characters would make it be arbitrarily close to <span class="s16">TWORD</span>, e.g.,</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">XXXXXX <span class="p">would correct to </span>PP<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">When <span class="s11">SKOR </span>has finished processing both <span class="s16">XWORD </span>and <span class="s16">TWORD </span>in this fashion, the value of <span class="s11">SKOR </span>is the number of unaccounted-for characters, plus the number of disagreements, plus the number of tranpositions, with two qualifications:</p><ol id="l52"><li><p style="padding-top: 6pt;padding-left: 107pt;text-indent: -12pt;line-height: 93%;text-align: justify;">If both <span class="s16">XWORD </span>and <span class="s16">TWORD </span>have a character unaccounted-for in the same position, the two characters are counted only once, i.e., substitution errors count as only one disagreement, not two</p></li><li><p style="padding-top: 6pt;padding-left: 107pt;text-indent: -12pt;line-height: 91%;text-align: justify;">If there are no unaccounted-for characters and no disagreements, transpositions are not counted.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">This permits spelling correction on very short words, such as edit commands, e.g., <span class="s11">XRT-&gt;XTR</span>. Transpositions are also not counted when <span class="s11">FASTYPEFLG = T</span>, for example, <span class="s11">IPULX </span>and <span class="s11">IPLUS </span>will be in 80% agreement with <span class="s11">FASTYPEFLG = T</span>, only 60% with <span class="s11">FASTYPEFLG = NIL</span>. The rationale behind this is that transpositions are much more common for fast typists, and should not be counted as disagreements, whereas more deliberate typists are not as likely to combine tranpositions and other mistakes in a single word, and therefore can use more conservative metric. <span class="s11">FASTYPEFLG </span>is initially <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Spelling Corrector Functions and Variables</p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>ADDSPELL </b><i>X SPLST N</i>)                                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Adds <span class="s16">X </span>to one of the spelling lists as determined by the value of <span class="s16">SPLST</span>:</p><p style="padding-top: 6pt;padding-left: 153pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><span class="s11">NIL </span>Adds <span class="s16">X </span>to <span class="s11">USERWORDS </span>and to <span class="s11">SPELLINGS2</span>.  Used by</p><p class="s11" style="padding-left: 227pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DEFINEQ<span class="p">.</span></p><ol id="l53"><ol id="l54"><li><p style="padding-top: 6pt;padding-left: 228pt;text-indent: -17pt;line-height: 12pt;text-align: left;">Adds <span class="s16">X </span>to <span class="s11">USERWORDS</span>. Used by <span class="s11">LOAD </span>when loading</p><p class="s11" style="padding-left: 227pt;text-indent: 0pt;line-height: 12pt;text-align: left;">EXPR<span class="p">s to property lists.</span></p></li><li><p style="padding-top: 6pt;padding-left: 227pt;text-indent: -17pt;text-align: left;">Adds <span class="s16">X </span>to <span class="s11">SPELLINGS1 </span>(at end of permanent section). Used by <span class="s11">LISPX</span>.</p></li><li><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -17pt;text-align: left;">Adds <span class="s16">X </span>to <span class="s11">SPELLINGS2 </span>(at end of permanent section). Used by <span class="s11">LISPX</span>.</p></li><li><p style="padding-top: 6pt;padding-left: 228pt;text-indent: -17pt;text-align: left;">Adds <span class="s16">X </span>to <span class="s11">USERWORDS </span>and <span class="s11">SPELLINGS3</span>.</p></li></ol></ol><p style="padding-top: 6pt;padding-left: 228pt;text-indent: -64pt;text-align: left;">a spelling list If <span class="s16">SPLST </span>is a spelling list, <span class="s16">X </span>is added to it. In this case, <span class="s16">N </span>is the (optional) length of the temporary section.</p><p style="padding-top: 6pt;padding-left: 228pt;text-indent: 0pt;text-align: left;">If <span class="s16">X </span>is already on the spelling list, and in its temporary section, <span class="s11">ADDSPELL </span>moves <span class="s16">X </span>to the front of that section.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="s11">ADDSPELL </span>sets <span class="s11">LASTWORD </span>to <span class="s16">X </span>when <span class="s16">SPLST </span><span class="s11">= NIL</span>, <span class="s11">0 </span>or <span class="s11">3</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s16">X </span>is not a symbol, <span class="s11">ADDSPELL </span>takes no action.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Note that the various systems calls to <span class="s11">ADDSPELL</span>, e.g., from <span class="s11">DEFINE</span>, <span class="s11">EDITF</span>, <span class="s11">LOAD</span>, etc., can all be suppressed by setting or binding <span class="s11">ADDSPELLFLG </span>to <span class="s11">NIL </span>(see the DWIM Functions and Variables section above).</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>MISSPELLED? </b><i>XWORD REL SPLST FLG TAIL FN</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">XWORD </span><span class="s11">= NIL </span>or <span class="s11">$ </span>(&lt;esc&gt;), <span class="s11">MISSPELLED? </span>prints <span class="s11">= </span>followed by the value of <span class="s11">LASTWORD</span>, and returns this as the respelling, without asking for approval. Otherwise, <span class="s11">MISSPELLED? </span>checks to see if <span class="s16">XWORD </span>is really misspelled, i.e., if <span class="s16">FN </span>applied to <span class="s16">XWORD </span>is true, or <span class="s16">XWORD </span>is already contained on <span class="s16">SPLST</span>. In this case, <span class="s11">MISSPELLED? </span>simply returns <span class="s16">XWORD</span>. Otherwise <span class="s11">MISSPELLED? </span>computes and returns <span class="s11">(FIXSPELL </span><span class="s16">XWORD REL SPLST FLG TAIL FN</span><span class="s11">)</span><span class="s10">.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FIXSPELL </b><i>XWORD REL SPLST FLG TAIL FN TIEFLG DONTMOVETOPFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The value of <span class="s11">FIXSPELL </span>is either the respelling of or <span class="s11">NIL</span>. If for some reason itself is on , then <span class="s11">FIXSPELL </span>aborts and calls <span class="s11">ERROR!</span>. If there is a possibility that is spelled correctly, <span class="s11">MISSPELLED? </span>should be used instead of <span class="s11">FIXSPELL</span>. <span class="s11">FIXSPELL </span>performs all of the interactions described earlier, including requesting your approval if necessary.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">XWORD </span><span class="s11">= NIL </span>or <span class="s11">$ </span>(escape), the respelling is the value of <span class="s11">LASTWORD</span>, and no approval is requested.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If <span class="s16">XWORD </span>contains lowercase characters, and the corresponding uppercase word is correct,</p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">i.e. on <span class="s16">SPLST </span>or satisfies <span class="s16">FN</span>, the uppercase word is returned and no interaction is performed. If <span class="s11">FIXSPELL.UPPERCASE.QUIET </span>is <span class="s11">NIL </span>(the default), a warning <span class="s11">&quot;=XX</span>&quot; is printed when coercing from &quot;<span class="s11">xx</span>&quot; to &quot;<span class="s11">XX</span>&quot;. If <span class="s11">FIXSPELL.UPPERCASE.QUIET </span>is non-<span class="s11">NIL</span>, no warning is given.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">REL </span><span class="s11">= NIL</span>, defaults to the value of <span class="s11">FIXSPELLREL </span>(initially 70).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FLG </span><span class="s11">= NIL</span>, the correction is handled in type-in mode, i.e., approval is never requested, and <span class="s16">XWORD </span>is not typed. If <span class="s16">FLG </span><span class="s11">= T</span>, <span class="s16">XWORD </span>is typed (before the <span class="s11">=</span>) and approval is requested if <span class="s11">APPROVEFLG = T</span>. If <span class="s16">FLG </span><span class="s11">= NO-MESSAGE</span>, the correction is returned with no further processing. In this case, a run-on correction will be returned as a dotted pair of the two parts of the word, and a synonym correction as a list of the form <span class="s11">(</span><span class="s16">WORD1 WORD2</span><span class="s11">)</span>, where <span class="s16">WORD1 </span>is (the corrected version of) <span class="s16">XWORD</span>, and <span class="s16">WORD2 </span>is the synonym. The effect of the function <span class="s11">CHOOZ </span>can be obtained by calling <span class="s11">FIXSPELL </span>with <span class="s16">FLG </span><span class="s11">= NO-MESSAGE</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TAIL </span>is not <span class="s11">NIL</span>, and the correction is successful, <span class="s11">CAR </span>of <span class="s16">TAIL </span>is replaced by the respelling (using / <span class="s11">RPLACA</span>).</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">FIXSPELL </span>will attempt to correct misspellings caused by running two words together, if the global variable <span class="s11">RUNONFLG </span>is non-<span class="s11">NIL </span>(default is <span class="s11">NIL</span>). In this case, approval is always requested. When a run-on error is corrected, <span class="s11">CAR </span>of <span class="s16">TAIL </span>is replaced by the two words, and the value of <span class="s11">FIXSPELL </span>is the first one. For example, if <span class="s11">FIXSPELL </span>is called to correct the edit command <span class="s11">(MOVE TO AFTERCOND 3 2) </span>with <span class="s16">TAIL </span><span class="s11">= (AFTERCOND 3 2)</span>, <span class="s16">TAIL </span>would be changed to <span class="s11">(AFTER COND 2 3)</span>, and <span class="s11">FIXSPELL </span>would return <span class="s11">AFTER </span>(subject to yourapproval where necessary). If <span class="s16">TAIL </span><span class="s11">= T</span>, <span class="s11">FIXSPELL </span>will also perform run-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 5pt;padding-left: 48pt;text-indent: 0pt;line-height: 87%;text-align: left;">INTERLISP-D REFERENCE MANUAL DWIM</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">on corrections, returning a dotted pair of the two words in the event the correction is of this type.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TIEFLG </span><span class="s11">= NIL </span>and a tie occurs, i.e., more than one word on <span class="s16">SPLST </span>is found with the same degree of &quot;closeness&quot;, <span class="s11">FIXSPELL </span>returns <span class="s11">NIL</span>, i.e., no correction. If <span class="s16">TIEFLG </span><span class="s11">= PICKONE </span>and a tie occurs, the first word is taken as the correct spelling. If <span class="s16">TIEFLG </span><span class="s11">= LIST</span>, the value of <span class="s11">FIXSPELL </span>is a list of the respellings (even if there is only one), and <span class="s11">FIXSPELL </span>will not perform any interaction with you, nor modify <span class="s16">TAIL</span>, the idea being that the calling program will handle those tasks. Similarly, if <span class="s16">TIEFLG </span><span class="s11">= EVERYTHING</span>, a list of all candidates whose degree of closeness is above <span class="s16">REL </span>will be returned, regardless of whether some are better than others.  No interaction will be performed.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If <span class="s16">DONTMOVETOPFLG </span><span class="s11">= T </span>and a correction occurs, it will <i>not </i>be moved to the front of the spelling list. Also, the spelling list will not be altered unless it contains the special marker used to separate the temporary and perminant parts of the system spelling lists (the value of <span class="s11">SPELLSTR1</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FNCHECK </b><i>FN NOERRORFLG SPELLFLG PROPFLG TAIL</i>)                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The task of <span class="s11">FNCHECK </span>is to check whether <span class="s16">FN </span>is the name of a function and if not, to correct its spelling. If <span class="s16">FN </span>is the name of a function or spelling correction is successful, <span class="s11">FNCHECK </span>adds the (corrected) name of the function to <span class="s11">USERWORDS </span>using <span class="s11">ADDSPELL</span>, and returns it as its value.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Since <span class="s11">FNCHECK </span>is called by many low level functions such as <span class="s11">ARGLIST</span>, <span class="s11">UNSAVEDEF</span>, etc., spelling correction only takes place when <span class="s11">DWIMFLG = T</span>, so that these functions can operate in a small Interlisp system which does not contain <span class="s11">DWIM</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">NOERRORFLG </span>informs <span class="s11">FNCHECK </span>whether or not the calling function wants to handle the unsuccessful case: if <span class="s16">NOERRORFLG </span>is <span class="s11">T</span>, <span class="s11">FNCHECK </span>simply returns <span class="s11">NIL</span>, otherwise it prints <span class="s11">fn NOT A FUNCTION </span>and generates a non-breaking error.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FN </span>does not have a definition, but does have an <span class="s11">EXPR </span>property, then spelling correction is not attempted. Instead, if <span class="s16">PROPFLG </span><span class="s11">= T</span>, <span class="s16">FN </span>is considered to be the name of a function, and is returned. If <span class="s16">PROPFLG </span><span class="s11">= NIL</span>, <span class="s16">FN </span>is <i>not </i>considered to be the name of a function, and <span class="s11">NIL </span>is returned or an error generated, depending on the value of <span class="s16">NOERRORFLG</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">FNCHECK </span>calls <span class="s11">MISSPELLED? </span>to perform spelling correction, so that if <span class="s16">FN </span><span class="s11">= NIL</span>, the value of <span class="s11">LASTWORD </span>will be returned. <span class="s16">SPELLFLG </span>corresponds to <span class="s11">MISSPELLED?</span>’s fourth argument, <span class="s16">FLG</span>. If <span class="s16">SPELLFLG </span><span class="s11">= T</span>, approval will be asked if <span class="s11">DWIM </span>was enabled in <span class="s11">CAUTIOUS </span>mode, i.e., if <span class="s11">APPROVEFLG = T</span>. <span class="s16">TAIL </span>corresponds to the fifth argument to <span class="s11">MISSPELLED?</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">FNCHECK <span class="p">is currently used by </span>ARGLIST<span class="p">, </span>UNSAVEDEF<span class="p">, </span>PRETTYPRINT<span class="p">, </span>BREAK0<span class="p">, </span>BREAKIN<span class="p">,</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">ADVISE<span class="p">, and </span>CALLS<span class="p">. For example, </span>BREAK0 <span class="p">calls </span>FNCHECK <span class="p">with </span><i>NOERRORFLG </i>= T <span class="p">since if </span>FNCHECK <span class="p">cannot produce a function, </span>BREAK0 <span class="p">wants to define a dummy one. </span>CALLS <span class="p">however calls </span>FNCHECK <span class="p">with </span><i>NOERRORFLG </i>= NIL<span class="p">, since it cannot operate without a function.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Many other system functions call <span class="s11">MISSPELLED? </span>or <span class="s11">FIXSPELL </span>directly. For example, <span class="s11">BREAK1 </span>calls <span class="s11">FIXSPELL </span>on unrecognized atomic inputs before attempting to evaluate them, using as a spelling list a list of all break commands. Similarly, <span class="s11">LISPX </span>calls <span class="s11">FIXSPELL </span>on atomic inputs using a list of all <span class="s11">LISPX </span>commands. When <span class="s11">UNBREAK </span>is given</p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">the name of a function that is not broken, it calls <span class="s11">FIXSPELL </span>with two different spelling lists, first with <span class="s11">BROKENFNS</span>, and if that fails, with <span class="s11">USERWORDS</span>. <span class="s11">MAKEFILE </span>calls <span class="s11">MISSPELLED? </span>using <span class="s11">FILELST </span>as a spelling list. Finally, <span class="s11">LOAD</span>, <span class="s11">BCOMPL</span>, <span class="s11">BRECOMPILE</span>, <span class="s11">TCOMPL</span>, and <span class="s11">RECOMPILE </span>all call <span class="s11">MISSPELLED? </span>if their input file(s) won’t open.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-top: 4pt;padding-left: 29pt;text-indent: -23pt;text-align: left;"><a name="bookmark21">CLISP</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="605" height="3" alt="image" src="Image_054.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The syntax of Lisp is very simple. It can be described concisely, but it makes Lisp difficult to read and write without tools. Unlike many languages, there are no reserved words in Lisp such as <span class="s11">IF</span>, <span class="s11">THEN</span>, <span class="s11">FOR</span>, <span class="s11">DO</span>, etc., nor reserved characters like <span class="s11">+</span>, <span class="s11">-</span>, <span class="s11">=</span>, <span class="s19"></span>, etc. The only components of the language are atoms and delimiters. This eliminates the need for parsers and precedence rules, and makes Lisp programs easy to mainpuilate. For example, a Lisp interpreter can be written in one or two pages of Lisp code. This makes Lisp the most suitable programming language for writing programs that deal with other programs as data.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Human language is based on more complicated structures and relies more on special words to carry the meaning. The definiton of the factorial function looks like this in Lisp:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(COND ((ZEROP N) 1) (T (TIMES N (FACTORIAL ((SUB1 N))))))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This definition is easy to read for a machine but difficult to read for a human. CLISP is designed to make Interlisp programs easier to read and write. CLISP does this by translating various operators, conditionals, and iterative statements to Interlisp.  For example, factorial can be written in CLISP:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(IF N = 0 THEN 1 ELSE N*(FACTORIAL N-1))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">CLISP will translate this expression to the form in the example above. The translation will take place when the form is read so there are no performance penalties.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You should view CLISP as a shothand for produceing Lisp programs. CLISP makes a program easy to read and sometimes more compact.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">CLISP is implemented via the error correction machinery in Interlisp (see Chapter 20). Any expression that Interlisp thinks is well-formed will never be seen by CLISP This means that interpreted programs that do not use CLISP constructs do not pay for its availability by slower execution time. In fact, the Interlisp interpreter does not know about CLISP at all. When the interpreter finds an error it calls an error routine which in turn invokes the Do-What-I-Mean (DWIM) analyzer. The DWIM analyzer knows how to deal with CLISP expressions. If the expression in question turns out to be a CLISP construct, the translated form is returned to the interpreter. In addition, the original CLISP expression is modified so that it <i>becomes </i>the correctly translated Interlisp form.  In this way, the analysis and translation are done only once.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Integrating CLISP into Medley makes possible Do-What-I-Mean features for CLISP constructs as well as for pure Lisp expressions. For example, if you have defined a function named <span class="s11">GET-PARENT</span>, CLISP would know not to attempt to interpret the form <span class="s11">(GET-PARENT) </span>as an arithmetic infix operation. (Actually, CLISP would never get to see this form, since it does not contain any errors.) If you mistakenly write <span class="s11">(GET-PRAENT)</span>, CLISP would know you meant <span class="s11">(GET-PARENT)</span>, and not <span class="s11">(DIFFERENCE GET PRAENT)</span>, by using the information that <span class="s11">PARENT </span>is not the name of a variable, and that <span class="s11">GET-PARENT </span>is the name of a user function whose spelling is &quot;very close&quot; to that of <span class="s11">GET-</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">PRAENT<span class="p">. Similarly, by using information about the program’s environment not readily available to a preprocessor, CLISP can successfully resolve the following sorts of ambiguities:</span></p><ol id="l55"><li><p class="s11" style="padding-top: 6pt;padding-left: 114pt;text-indent: -18pt;text-align: justify;">(LIST X*FACT N)<span class="p">, where </span>FACT <span class="p">is the name of a variable, means </span>(LIST (X*FACT) N)<span class="p">.</span></p></li><li><p style="padding-top: 7pt;padding-left: 114pt;text-indent: -18pt;text-align: justify;"><span class="s11">(LIST X*FACT N)</span>, where <span class="s11">FACT </span>is <i>not </i>the name of a variable but instead is the name of a function, means <span class="s11">(LIST X*(FACT N))</span>, i.e., <span class="s11">N </span>is <span class="s11">FACT</span>’s argument.</p></li><li><p class="s11" style="padding-top: 7pt;padding-left: 114pt;text-indent: -18pt;text-align: justify;">(LIST X*FACT(N))<span class="p">, </span>FACT <span class="p">the name of a function (and not the name of a variable), means </span>(LIST X*(FACT N))<span class="p">.</span></p></li><li><p style="padding-top: 6pt;padding-left: 114pt;text-indent: -18pt;text-align: left;">Cases 1, 2 and 3 with <span class="s11">FACT </span>misspelled!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The first expression is correct both from the standpoint of CLISP syntax and semantics so the change would be made notification. In the other cases, you would be informed or consulted about what was taking place. For example, suppose you write the expression <span class="s11">(LIST X*FCCT N). </span>Assume also that there was both a function named <span class="s11">FACT </span>and a variable named <span class="s11">FCT</span>.</p><ol id="l56"><li><p style="padding-top: 7pt;padding-left: 114pt;text-indent: -18pt;text-align: justify;">You will first be asked if <span class="s11">FCCT </span>is a misspelling of <span class="s11">FCT</span>. If you say <span class="s11">YES</span>, the expression will be interpreted as <span class="s11">(LIST (X*FCT) N)</span>. If you say <span class="s11">NO</span>, you will be asked if <span class="s11">FCCT </span>was a misspelling of <span class="s11">FACT</span>, i.e., if you intended <span class="s11">X*FCCT N </span>to mean <span class="s11">X*(FACT N).</span></p></li><li><p style="padding-top: 7pt;padding-left: 114pt;text-indent: -18pt;text-align: justify;">If you say <span class="s11">YES </span>to this question, the indicated transformation will be performed. If you say <span class="s11">NO</span>, the system will ask if <span class="s11">X*FCCT </span>should be treated as CLISP, since <span class="s11">FCCT </span>is not the name of a (bound) variable.</p></li><li><p style="padding-top: 6pt;padding-left: 114pt;text-indent: -18pt;text-align: justify;"><span class="s46">	</span>If you say <span class="s11">YES</span>, the expression will be transformed, if <span class="s11">NO</span>, it will be left alone, i.e., as <span class="s11">(LIST X*FCCT N)</span>. Note that we have not even considered the case where <span class="s11">X*FCCT </span>is itself a misspelling of a variable name, e.g., a variable named <span class="s11">XFCT </span>(as with <span class="s11">GET- PRAENT)</span>. This sort of transformation will be considered after you said <span class="s11">NO </span>to <span class="s11">X*FCCT N -&gt; X*(FACT N)</span>.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The question of whether <span class="s11">X*FCCT </span>should be treated as CLISP is important because Interlisp users may have programs that employ identifiers containing CLISP operators. Thus, if CLISP encounters the expression <span class="s11">A/B </span>in a context where either <span class="s11">A </span>or <span class="s11">B </span>are not the names of variables, it will ask you if <span class="s11">A/B </span>is intended to be CLISP, in case you really do have a free variable named <span class="s11">A/B</span>.</p><p style="padding-top: 7pt;padding-left: 138pt;text-indent: -30pt;line-height: 92%;text-align: justify;">Note: Through the discussion above, we speak of CLISP or DWIM asking you. Actually, if you typed in the expression in question for immediate execution, you are simply informed of the transformation, on the grounds that you would prefer an occasional misinterpretation rather than being continuously bothered, especially since you can always retype what you intended if a mistake occurs, and ask the programmer’s assistant to <span class="s11">UNDO </span>the effects of the mistaken operations if necessary. For transformations on expressions in your programs, you can tell CLISP whether you wish to operate in <span class="s11">CAUTIOUS </span>or <span class="s11">TRUSTING </span>mode. In the former case (most typical) you will be asked to approve transformations, in the latter, CLISP will operate as it does on type-in, i.e., perform the transformation after informing you.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">CLISP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">CLISP can also handle parentheses errors caused by typing <span class="s11">8 </span>or <span class="s11">9 </span>for <span class="s11">( </span>or <span class="s11">)</span>. (On most terminals, <span class="s11">8 </span>and <span class="s11">9 </span>are the lowercase characters for <span class="s11">( </span>and <span class="s11">)</span>, i.e., <span class="s11">( </span>and <span class="s11">8 </span>appear on the same key, as do <span class="s11">) </span>and <span class="s11">9</span>.) For example, if you write <span class="s11">N*8FACTORIAL N-1</span>, the parentheses error can be detected and fixed before the infix operator <span class="s11">* </span>is converted to the Interlisp function <span class="s11">TIMES</span>. CLISP is able to distinguish this situation from cases like <span class="s11">N*8*X </span>meaning <span class="s11">(TIMES N 8 X)</span>, or <span class="s11">N*8X</span>, where <span class="s11">8X </span>is the name of a variable, again by using information about the programming environment. In fact, by integrating CLISP with DWIM, CLISP has been made sufficiently tolerant of errors that almost everything can be misspelled! For example, CLISP can successfully translate the definition of <span class="s11">FACTORIAL</span>:</p><p class="s11" style="padding-top: 8pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">(IFF N = 0 THENN1 ESLE N*8FACTTORIALNN-1)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">to the corresponding <span class="s11">COND</span>, while making five spelling corrections and fixing the parenthesis error. CLISP also contains a facility for converting from Interlisp back to CLISP, so that after running the above incorrect definition of <span class="s11">FACTORIAL</span>, you could &quot;clispify&quot; the now correct version to obtain <span class="s11">(IF N = 0 THEN 1 ELSE N*(FACTORIAL N-1))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This sort of robustness prevails throughout CLISP. For example, the iterative statement permits you to say things like:</p><p class="s11" style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">(FOR OLD X FROM M TO N DO (PRINT X) WHILE (PRIMEP X))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 29pt;text-indent: 0pt;text-align: justify;"><span class="p">However, you can also write </span>OLD (X<span class="s19"></span>M), (OLD X<span class="s19"></span>M)<span class="p">, </span>(OLD (X<span class="s19"></span>M))<span class="p">, permute the order of the operators, e.g., </span>(DO PRINT X TO N FOR OLD X<span class="s19"></span>M WHILE PRIMEP X)<span class="p">, omit either or both sets of parentheses, misspell any or all of the operators </span>FOR<span class="p">, </span>OLD<span class="p">, </span>FROM<span class="p">, </span>TO<span class="p">, </span>DO<span class="p">, or </span>WHILE<span class="p">, or leave out the word </span>DO <span class="p">entirely! And, of course, you can also misspell </span>PRINT<span class="p">, </span>PRIMEP<span class="p">, </span>M <span class="p">or </span>N<span class="p">! In this example, the only thing you could not misspell is the first </span>X<span class="p">, since it specifies the </span><span class="s9">name </span><span class="p">of the variable of iteration. The other two instances of </span>X <span class="p">could be misspelled.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">CLISP is well integrated into Medley. For example, the above iterative statement translates into an equivalent Interlisp form using <span class="s11">PROG</span>, <span class="s11">COND</span>, <span class="s11">GO</span>, etc. When the interpreter subsequently encounters this CLISP expression, it automatically obtains and evaluates the translation. Similarly, the compiler &quot;knows&quot; to compile the translated form. However, if you <span class="s11">PRETTYPRINT </span>your program, <span class="s11">PRETTYPRINT </span>&quot;knows&quot; to print the original CLISP at the corresponding point in your function. Similarly, when you edit your program, the editor keeps the translation invisible to you. If you modify the CLISP, the translation is automatically discarded and recomputed the next time the expression is evaluated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In short, CLISP is not a language at all, but rather a system. It plays a role analagous to that of the programmer’s assistant (Chapter 13). Whereas the programmer’s assistant is an invisible intermediary agent between your console requests and the Interlisp executive, CLISP sits between your programs and the Interlisp interpreter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Only a small effort has been devoted to defining the core syntax of CLISP. Instead, most of the effort has been concentrated on providing a facility which &quot;makes sense&quot; out of the input expressions using context information as well as built-in and acquired information about user and system programs. It has been said that communication is based on the intention of the speaker to produce an effect in the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">recipient. CLISP operates under the assumption that what you say is <i>intended </i>to represent a meaningful operation, and therefore tries very hard to make sense out of it. The motivation behind CLISP is not to provide you with many different ways of saying the same thing, but to enable you to worry less about the <i>syntactic </i>aspects of your communication with the system. In other words, it gives you a new degree of freedom by permitting you to concentrate more on the problem at hand, rather than on translation into a formal and unambiguous language.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">DWIM and CLISP are invoked on iterative statements because <span class="s11">CAR </span>of the iterative statement is not the name of a function, and hence generates an error. If you define a function by the same name as an i.s. operator, e.g., <span class="s11">WHILE</span>, <span class="s11">TO</span>, etc., the operator will no longer have the CLISP interpretation when it appears as <span class="s11">CAR </span>of a form, although it will continue to be treated as an i.s. operator if it appears in the interior of an i.s. To alert you, a warning message is printed, e.g., <span class="s11">(WHILE DEFINED, THEREFORE DISABLED IN CLISP)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">CLISP Interaction with User                                                                                                                     </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Syntactically and semantically well formed CLISP transformations are always performed without informing you. Other CLISP transformations described in the previous section, e.g., misspellings of operands, infix operators, parentheses errors, unary minus - binary minus errors, all follow the same protocol as other DWIM transformations (Chapter 19). That is, if DWIM has been enabled in <span class="s11">TRUSTING </span>mode, or the transformation is in an expression you typed in for immediate execution, your approval is not requested, but you are informed. However, if the transformation involves a user program, and DWIM was enabled in <span class="s11">CAUTIOUS </span>mode, you will be asked to approve. If you say <span class="s11">NO</span>, the transformation is not performed. Thus, in the previous section, phrases such as &quot;one of these (transformations) succeeds&quot; and &quot;the transformation <span class="s11">LAST-ELL -&gt; LAST-EL </span>would be found&quot; etc., all mean if you are in <span class="s11">CAUTIOUS </span>mode and the error is in a program, the corresponding transformation will be performed only if you approve (or defaults by not responding). If you say <span class="s11">NO</span>, the procedure followed is the same as though the transformation had not been found. For example, if <span class="s11">A*B </span>appears in the function <span class="s11">FOO</span>, and <span class="s11">B </span>is not bound (and no other transformations are found) you would be asked <span class="s11">A*B [IN FOO] TREAT AS CLISP ? </span>(The waiting time on such interactions is three times as long as for simple corrections, i.e., <span class="s11">3*DWIMWAIT</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">In certain situations, DWIM asks for approval even if DWIM is enabled in <span class="s11">TRUSTING </span>mode. For example, you are always asked to approve a spelling correction that might also be interpreted as a CLISP transformation, as in <span class="s11">LAST-ELL -&gt; LAST-EL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If you approved, <span class="s11">A*B </span>would be transformed to <span class="s11">(ITIMES A B)</span>, which would then cause a <span class="s11">U.B.A.B. </span>error in the event that the program was being run (remember the entire discussion also applies to DWIMifying).  If you said <span class="s11">NO, A*B </span>would be left alone.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If the value of <span class="s11">CLISPHELPFLG = NIL </span>(initally <span class="s11">T</span>), you will not be asked to approve any CLISP transformation. Instead, in those situations where approval would be required, the effect is the same as though you had been asked and said <span class="s11">NO</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">CLISP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">CLISP Character Operators                                                                                                                      </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">CLISP recognizes a number of special characters operators, both prefix and infix, which are translated into common expressions. For example, the character <span class="s11">+ </span>is recognized to represent addition, so CLISP translates the symbol <span class="s11">A+B </span>to the form <span class="s11">(IPLUS A B)</span>. Note that CLISP is invoked, and this translation is made, only if an error occurs, such as an unbound atom error or an undefined function error for the perfectly legitamate symbol <span class="s11">A+B</span>. Therefore you may choose not to use these facilities with no penalty, similar to other CLISP facilities.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">You have a lot of flexability in using CLISP character operators. A list can always be substituted for a symbol, and vice versa, without changing the interpretation of a phrase. For example, if the value of <span class="s11">(FOO X) </span>is <span class="s11">A</span>, and the value of <span class="s11">(FIE Y) </span>is <span class="s11">B</span>, then <span class="s11">(LIST (FOO X)+(FIE Y)) </span>has the same value as <span class="s11">(LIST A+B)</span>. Note that the first expression is a list of <i>four </i>elements: the atom <span class="s11">&quot;LIST&quot;</span>, the list <span class="s11">&quot;(FOO X)&quot;</span>, the atom &quot;<span class="s11">+</span>&quot;, and the list <span class="s11">&quot;(FIE X)&quot;</span>, whereas the second expression, <span class="s11">(LIST A+B)</span>, is a list of only <i>two </i>elements: the symbol <span class="s11">&quot;LIST&quot; </span>and the symbol <span class="s11">&quot;A+B&quot;</span>. Since <span class="s11">(LIST (FOO X)+(FIE Y)) </span>is indistinguishable from <span class="s11">(LIST (FOO X) + (FIE Y)) </span>because spaces before or after parentheses have no effect on the Interlisp <span class="s11">READ </span>program, to be consistent, extra spaces have no effect on atomic operands either. In other words, CLISP will treat <span class="s11">(LIST A+ B)</span>, <span class="s11">(LIST A +B)</span>, and <span class="s11">(LIST A + B) </span>the same as <span class="s11">(LIST A+B)</span>.</p><p style="padding-top: 7pt;padding-left: 90pt;text-indent: -30pt;line-height: 93%;text-align: justify;">Note: CLISP does not use its own special <span class="s11">READ </span>program because this would require you to explicitly identify CLISP expressions, instead of being able to intermix Interlisp and CLISP.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">+ <span class="p">[CLISP Operator]</span></p><p class="s6" style="padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">- <span class="p">[CLISP Operator]</span></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;line-height: 11pt;text-align: left;">* <span class="p">[CLISP Operator]</span></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;line-height: 11pt;text-align: left;">/ <span class="p">[CLISP Operator]</span></p><p class="s19" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s21"> </span><span class="p">[CLISP Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">CLISP recognizes <span class="s11">+</span>, <span class="s11">-</span>, <span class="s11">*</span>, / , and <span class="s19"></span><span class="s21"> </span>as the normal arithmetic infix operators. The <span class="s11">- </span>is also recognized as the prefix operator, unary minus. These are converted to <span class="s11">PLUS</span>, <span class="s11">DIFFERENCE </span>(or in the case of unary minus, <span class="s11">MINUS</span>), <span class="s11">TIMES</span>, <span class="s11">QUOTIENT</span>, and <span class="s11">EXPT</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Normally, CLISP uses the &quot;generic&quot; arithmetic functions <span class="s11">PLUS</span>, <span class="s11">TIMES</span>, etc. CLISP contains a facility for declaring which type of arithmetic is to be used, either by making a global declaration, or by separate declarations about individual functions or variables.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">The usual precedence rules apply (although you can easily change them), i.e., </span>* <span class="p">has higher precedence than </span>+ <span class="p">so that </span>A+B*C <span class="p">is the same as </span>A+(B*C)<span class="p">, and both </span>* <span class="p">and </span>/ <span class="p">are lower than </span><span class="s19"></span><span class="s21"> </span><span class="p">so that </span>2*X<span class="s19"></span>2 <span class="p">is the same as </span>2*(X<span class="s19"></span>2)<span class="p">. Operators of the same precedence group from left to right, e.g., </span>A/B/C <span class="p">is equivalent to </span>(A/B)/C<span class="p">. Minus is binary whenever possible, i.e., except when it is the first operator in a list, as in </span>(-A) <span class="p">or </span>(-A)<span class="p">, or when it immediately follows another operator, as in </span>A*-B<span class="p">. Note that grouping with parentheses can always be used to override the normal precedence grouping, or when you are not sure how a particular expression will parse. The complete order of precedence for CLISP operators is given below.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Note that <span class="s11">+ </span>in front of a number will disappear when the number is read, e.g., <span class="s11">(FOO X</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">+2) <span class="p">is indistinguishable from </span>(FOO X 2)<span class="p">. This means that </span>(FOO X +2) <span class="p">will not be interpreted as CLISP, or be converted to </span>(FOO (IPLUS X 2))<span class="p">. Similarly, </span>(FOO X -2) <span class="p">will not be interpreted the same as </span>(FOO X-2)<span class="p">. To circumvent this, always type a space between the </span>+ <span class="p">or </span>- <span class="p">and a number if an infix operator is intended, e.g., write </span>(FOO X + 2)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">=                                                         <span class="p">[CLISP Operator]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">GT                                                        <span class="p">[CLISP Operator]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">LT                                                        <span class="p">[CLISP Operator]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">GE                                                        <span class="p">[CLISP Operator]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">LE                                                        <span class="p">[CLISP Operator]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">These are infix operators for &quot;Equal&quot;, &quot;Greater Than&quot;, &quot;Less Than&quot;, &quot;Greater Than or Equal&quot;, and &quot;Less Than or Equal&quot;.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">GT<span class="p">, </span>LT<span class="p">, </span>GE<span class="p">, and </span>LE <span class="p">are all affected by the same declarations as </span>+ <span class="p">and </span>*<span class="p">, with the initial default to use </span>GREATERP <span class="p">and </span>LESSP<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Note that only single character operators, e.g., <span class="s11">+</span>, <span class="s19"></span>, <span class="s11">=</span>, etc., can appear in the <i>interior </i>of an atom. All other operators must be set off from identifiers with spaces. For example, <span class="s11">XLTY </span>will not be recognized as CLISP. In some cases, DWIM will be able to diagnose this situation as a run-on spelling error, in which case after the atom is split apart, CLISP will be able to perform the indicated transformation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A number of Lisp functions, such as <span class="s11">EQUAL</span>, <span class="s11">MEMBER</span>, <span class="s11">AND</span>, <span class="s11">OR</span>, etc., can also be treated as CLISP infix operators. New infix operators can be easily added (see the CLISP Internal Convetions section below). Spelling correction on misspelled infix operators is peformed using <span class="s11">CLISPINFIXSPLST </span>as a spelling list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">AND <span class="p">is higher than </span>OR<span class="p">, and both </span>AND <span class="p">and </span>OR <span class="p">are lower than the other infix operators, so </span>(X OR Y AND Z) <span class="p">is the same as </span>(X OR (Y AND Z))<span class="p">, and </span>(X AND Y EQUAL Z) <span class="p">is the same as </span>(X AND (Y EQUAL Z))<span class="p">. All of the infix predicates have lower precedence than Interlisp forms, since it is far more common to apply a predicate to two forms, than to use a Boolean as an argument to a function. Therefore, </span>(FOO X GT FIE Y) <span class="p">is translated as </span>((FOO X) GT (FIE Y))<span class="p">, rather than as </span>(FOO (X GT (FIE Y)))<span class="p">. However, you can easily change this.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">:                                                         <span class="p">[CLISP Operator]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">X</span><span class="s11">:</span><span class="s16">N </span>extracts the <span class="s16">N</span>th element of the list <span class="s16">X</span>. <span class="s11">FOO:3 </span>specifies the third element of <span class="s11">FOO</span>, or <span class="s11">(CADDR FOO)</span>. If <span class="s16">N </span>is less than zero, this indicates elements counting from the end of the list; i.e. <span class="s11">FOO:-1 </span>is the last element of <span class="s11">FOO</span>. <span class="s11">: </span>operators can be nested, so <span class="s11">FOO:1:2 </span>means the second element of the first element of <span class="s11">FOO</span>, or <span class="s11">(CADAR FOO)</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The : operator can also be used for extracting substructures of records (see Chapter 8). Record operations are implemented by replacing expressions of the form <span class="s11">X:FOO </span>by (fetch <span class="s11">FOO </span>of <span class="s11">X</span>). Both lower- and uppercase are acceptable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">CLISP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">: <span class="p">is also used to indicate operations in the pattern match facility (see Chapter 12). </span>X:(&amp; ’A -- ’B) <span class="p">translates to (match </span>X <span class="p">with </span>(&amp; ’A -- ’B)<span class="p">)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">. <span class="p">[CLISP Operator]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">In combination with :, a period can be used to specify the &quot;data path&quot; for record operations. For example, if <span class="s11">FOO </span>is a field of the <span class="s11">BAR </span>record, <span class="s11">X:BAR.FOO </span>is translated into (fetch (<span class="s11">BAR FOO) </span>of <span class="s11">X</span>). Subrecord fields can be specified with multiple periods: <span class="s11">X:BAR.FOO.BAZ </span>translates into (fetch <span class="s11">(BAR FOO BAZ) </span>of <span class="s11">X</span>).</p><p style="padding-top: 7pt;padding-left: 132pt;text-indent: -30pt;line-height: 94%;text-align: justify;">Note: If a record contains fields with periods in them, <span class="s11">CLISPIFY </span>will not translate a record operation into a form using periods to specify the data path. For example, <span class="s11">CLISPIFY </span>will NOT translate <span class="s11">(fetch A.B of X) </span>into <span class="s11">X:A.B</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">:: <span class="p">[CLISP Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">X</span><span class="s15">:</span><span class="s16">N</span>, returns the <span class="s16">N</span>th <i>tail </i>of the list <span class="s16">X</span>. For example, <span class="s11">FOO::3 </span>is <span class="s11">(CDDDR FOO)</span>, and <span class="s11">FOO::- 1 </span>is <span class="s11">(LAST FOO)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s21"> </span><span class="p">[CLISP Operator]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="s19"></span><span class="s21"> </span><span class="p">is used to indicate assignment. For example, </span>X<span class="s19"></span>Y <span class="p">translates to </span>(SETQ X Y)<span class="p">. If </span>X <span class="p">does not have a value, and is not the name of one of the bound variables of the function in which it appears, spelling correction is attempted. However, since this may simply be a case of assigning an initial value to a new free variable, DWIM will always ask for approval before making the correction.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">In conjunction with <span class="s15">: </span>and <span class="s15">::</span>, <span class="s19"></span><span class="s21"> </span>can also be used to perform a more general type of assignment, involving structure modification. For example, <span class="s11">X:2</span><span class="s19"></span><span class="s11">Y </span>means &quot;make the second element of <span class="s11">X </span><i>be </i><span class="s11">Y&quot;</span>, in Interlisp terms <span class="s11">(RPLACA (CDR X) Y)</span>. Note that the <i>value </i>of this operation is the value of <span class="s11">RPLACA</span>, which is <span class="s11">(CDR X)</span>, rather than <span class="s11">Y</span>. Negative numbers can also be used, e.g., <span class="s11">X:-2_Y</span>, which translates to <span class="s11">(RPLACA (NLEFT X 2) Y)</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">You can indicate you want <span class="s11">/RPLACA </span>and <span class="s11">/RPLACD </span>used (undoable version of <span class="s11">RPLACA </span>and <span class="s11">RPLACD</span>, see Chapter 13), or <span class="s11">FRPLACA </span>and <span class="s11">FRPLACD </span>(fast versions of <span class="s11">RPLACA </span>and <span class="s11">RPLACD</span>, see Chapter 3), by means of CLISP declarations. The initial default is to use <span class="s11">RPLACA </span>and <span class="s11">RPLACD</span>.</p><p class="s19" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s21"> </span><span class="p">is also used to indicate assignment in record operations (</span><span class="s11">X:FOO</span><span class="s11">Y </span><span class="p">translates to</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(replace FOO of X with Y)<span class="p">.), and pattern match operations (Chapter 12).</span></p><p class="s11" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s19"></span><span class="s21"> </span><span class="p">has different precedence on the left from on the right. On the left,</span><span class="s19"></span><span class="s21"> </span><span class="p">is a &quot;tight&quot; operator, i.e., high precedence, so that </span>A+B<span class="s19"></span>C <span class="p">is the same as </span>A+(B<span class="s19"></span>C)<span class="p">. On the right, </span><span class="s19"></span><span class="s21"> </span><span class="p">has broader scope so that </span>A<span class="s19"></span>B+C <span class="p">is the same as </span>A<span class="s19"></span>(B+C)<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">On type-in, </span>$<span class="s19"></span><i>FORM </i><span class="p">(where </span>$ <span class="p">is the escape key) is equivalent to set the &quot;last thing mentioned&quot;, i.e., is equivalent to </span>(SET LASTWORD <i>FORM</i>) <span class="p">(see Chapter 20). For example,</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">immediately after examining the value of <span class="s11">LONGVARIABLENAME</span>, you could set it by typing</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">$<span class="s19"></span><span class="s21"> </span><span class="p">followed by a form.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="p">Note that an atom of the form </span>X<span class="s19"></span>Y<span class="p">, appearing at the top level of a </span>PROG<span class="p">, will not be recognized as an assignment statement because it will be interpreted as a </span>PROG <span class="p">label by the Interlisp interpreter, and therefore will not cause an error, so </span>DWIM <span class="p">and CLISP will never get to see it.  Instead, one must write </span>(X<span class="s19"></span>Y)<span class="s10">.</span></p><p class="s15" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt; <span class="p">[CLISP Operator]</span></p><p class="s15" style="padding-left: 101pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&gt; <span class="p">[CLISP Operator]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Angle brackets are used in CLISP to indicate list construction. The appearance of a <span class="s10">&quot;</span><span class="s11">&lt;</span>&quot; corresponds to a &quot;<span class="s11">(</span><span class="s10">&quot; </span>and indicates that a list is to be constructed containing all the elements up to the corresponding &quot;<span class="s11">&gt;</span>&quot;. For example, <span class="s11">&lt;A B &lt;C&gt;&gt; </span>translates <span class="s10">to </span><span class="s11">(LIST A B (LIST C))</span><span class="s10">. </span><span class="s11">! </span>can be used to indicate that the next expression is to be inserted in the list as a <i>segment</i>, e.g., <span class="s11">&lt;A B ! C&gt; </span>translates to <span class="s11">(CONS A (CONS B C)) </span>and <span class="s11">&lt;! A ! B C&gt; </span>to <span class="s11">(APPEND A B (LIST C))</span>. <span class="s11">!! </span>is used to indicate that the next expression is to be inserted as a segment, and furthermore, all list structure to its right in the angle brackets is to be physically attached to it, e.g., <span class="s11">&lt;!! A B&gt; </span>translates to <span class="s11">(NCONC1 A B)</span>, and <span class="s11">&lt;!!A !B</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">!C&gt; <span class="p">to </span>(NCONC A (APPEND B C))<span class="p">. Not </span>(NCONC (APPEND A B) C)<span class="p">, which would</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">have the same value, but would attach <span class="s11">C </span>to <span class="s11">B</span>, and not attach either to <span class="s11">A</span>. Note that <span class="s11">&lt;</span>, <span class="s11">!</span>,</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">!!<span class="p">, and </span>&gt; <span class="p">need not be separate atoms, for example, </span>&lt;A B ! C&gt; <span class="p">may be written equally well as </span>&lt; A B !C &gt;<span class="p">. Also, arbitrary Interlisp or CLISP forms may be used within angle brackets. For example, one can write </span>&lt;FOO<span class="s19"></span>(FIE X) ! Y&gt; <span class="p">which translates to </span>(CONS (SETQ FOO (FIE X)) Y)<span class="p">. </span>CLISPIFY <span class="p">converts expressions in </span>CONS<span class="p">, </span>LIST<span class="p">, </span>APPEND<span class="p">, </span>NCONC<span class="p">, </span>NCONC1<span class="p">, </span>/NCONC<span class="p">, and </span>/NCONC1 <span class="p">into equivalent CLISP expressions using </span>&lt;<span class="p">, </span>&gt;<span class="p">, </span>!<span class="p">, and </span>!!<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: -30pt;line-height: 94%;text-align: justify;">Note: brackets differ from other CLISP operators. For example, <span class="s11">&lt;A B ’C&gt; </span>translates to <span class="s11">(LIST A B (QUOTE C)) </span>even though following <span class="s11">’</span>, all <i>operators </i>are ignored for the rest of the identifier. (This is true only if a previous unmatched <b>&lt; </b>has been seen, e.g., <span class="s11">(PRINT ’A&gt;B) </span>will print the atom <span class="s11">A&gt;B</span>.) Note however that <span class="s11">&lt;A B ’ C&gt; D&gt; </span>is equivalent to <span class="s11">(LIST A B (QUOTE C&gt;) D)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">&#39; <span class="p">[CLISP Operator]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">CLISP recognizes <span class="s11">’ </span>as a prefix operator. <span class="s11">’ </span>means <span class="s11">QUOTE </span>when it is the first character in an identifier, and is ignored when it is used in the interior of an identifier. Thus, <span class="s11">X = ’Y </span>means <span class="s11">(EQ X (QUOTE Y))</span>, but <span class="s11">X = CAN’T </span>means <span class="s11">(EQ X CAN’T)</span>, <i>not </i><span class="s11">(EQ X CAN)</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">followed by <span class="s11">(QUOTE T)</span>. This enables users to have variable and function names with <b>’</b></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">in them (so long as the <b>’ </b>is not the first character).</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Following <span class="s11">’</span>, all operators are ignored for the rest of the identifier, e.g., <span class="s11">’*A </span>means <span class="s11">(QUOTE *A)</span>, and <span class="s11">’X=Y </span>means <span class="s11">(QUOTE X=Y)</span>, not <span class="s11">(EQ (QUOTE X) Y)</span>. To write <span class="s11">(EQ (QUOTE X) Y)</span>, one writes <span class="s11">Y=’X</span>, or <span class="s11">’X =Y</span>. This is one place where an extra space does make a difference.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">CLISP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="p">On type-in, </span>’$ <span class="p">(escape) is equivalent to </span>(QUOTE <i>VALUE-OF-LASTWORD</i>) <span class="p">(see Chapter 19). For example, after calling </span>PRETTYPRINT <span class="p">on </span>LONGFUNCTION<span class="p">, you could move its definition to </span>FOO <span class="p">by typing </span>(MOVD ’$ ’FOO)<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note that this is not <span class="s11">(MOVD $ ’FOO)</span>, which would be equivalent to <span class="s11">(MOVD LONGFUNCTION ’FOO)</span>, and would (probably) cause a <span class="s11">U.B.A. LONGFUNCTION </span>error, nor <span class="s11">MOVD($ FOO)</span>, which would actually move the definition of <span class="s11">$ </span>to <span class="s11">FOO</span>, since DWIM and the spelling corrector would never be invoked.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">~ <span class="p">[CLISP Operator]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">CLISP recognizes <span class="s11">~ </span>as a prefix operator meaning <span class="s11">NOT</span>. <span class="s11">~ </span>can negate a form, as in</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">~(ASSOC X Y)<span class="p">, or </span>~X<span class="p">, or negate an infix operator, e.g., </span>(A ~GT B) <span class="p">is the same as </span>(A LEQ B)<span class="p">. Note that </span>~A = B <span class="p">means </span>(EQ (NOT A) B)<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">When <span class="s11">~ </span>negates an operator, e.g., <span class="s11">~=</span>, <span class="s11">~LT</span>, the two operators are treated as a single operator whose precedence is that of the second operator. When <span class="s11">~ </span>negates a function, e.g., <span class="s11">(~FOO X Y)</span>, it negates the whole form, i.e., <span class="s11">(~(FOO X Y))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Order of Precedence of CLISP Operators:</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">’</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">:</p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s21"> </span><span class="p">(left precedence)</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: left;">- <span class="p">(unary), </span>~</p><p class="s19" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;"></p><p class="s11" style="padding-top: 1pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">*, /</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">+, - <span class="p">(binary)</span></p><p class="s19" style="padding-left: 113pt;text-indent: 0pt;text-align: left;"><span class="s21"> </span><span class="p">(right precedence)</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">=</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Interlisp forms</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">LT, GT, EQUAL, MEMBER, <span class="p">etc</span><span class="s10">.</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 108%;text-align: left;">AND OR</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 10pt;text-align: left;">IF, THEN, ELSEIF, ELSE</p><p style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: left;">iterative statement operators</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Declarations                                                                                                                                               </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">CLISP declarations are used to affect the choice of Interlisp function used as the translation of a particular operator. For example, </span>A+B <span class="p">can be translated as either </span>(PLUS A B)<span class="p">, </span>(FPLUS A B)<span class="p">, or </span>(IPLUS A B)<span class="p">, depending on the declaration in effect. Similarly </span>X:1<span class="s19"></span>Y <span class="p">can mean </span>(RPLACA X Y)<span class="p">, </span>(FRPLACA X Y)<span class="p">, or </span>(/RPLACA X Y)<span class="p">, and </span>&lt;!! A B&gt; <span class="p">either </span>(NCONC1 A B) <span class="p">or </span>(/NCONC1 A B)<span class="p">.</span></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Note that the choice of function on all CLISP transformations are affected by the CLISP declaration in</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">effect, i.e., iterative statements, pattern matches, record operations, as well as infix and prefix operators.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>CLISPDEC </b><i>DECLST</i>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Puts into effect the declarations in <span class="s16">DECLST</span>. <span class="s11">CLISPDEC </span>performs spelling corrections on words not recognized as declarations. <span class="s11">CLISPDEC </span>is undoable.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">You can makes (changes) a global declaration by calling <span class="s11">CLISPDEC </span>with <span class="s16">DECLST </span>a list of declarations, e.g., <span class="s11">(CLISPDEC ’(FLOATING UNDOABLE))</span>. Changing a global declaration does not affect the speed of subsequent CLISP transformations, since all CLISP transformation are table driven (i.e., property list), and global declarations are accomplished by making the appropriate internal changes to CLISP at the time of the declaration. If a function employs <i>local </i>declarations (described below), there will be a slight loss in efficiency owing to the fact that for each CLISP transformation, the declaration list must be searched for possibly relevant declarations.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Declarations are implemented in the order that they are given, so that later declarations override earlier ones. For example, the declaration <span class="s11">FAST </span>specifies that <span class="s11">FRPLACA</span>, <span class="s11">FRPLACD</span>, <span class="s11">FMEMB</span>, and <span class="s11">FLAST </span>be used in place of <span class="s11">RPLACA</span>, <span class="s11">RPLACD</span>, <span class="s11">MEMB</span>, and <span class="s11">LAST</span>; the declaration <span class="s11">RPLACA </span>specifies that <span class="s11">RPLACA </span>be used. Therefore, the declarations <span class="s11">(FAST RPLACA RPLACD) </span>will cause <span class="s11">FMEMB</span>, <span class="s11">FLAST</span>, <span class="s11">RPLACA</span>, and <span class="s11">RPLACD </span>to be used.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The initial global declaration is <span class="s11">MIXED </span>and <span class="s11">STANDARD</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The table below gives the declarations available in CLISP, and the Interlisp functions they indicate:</p><p style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Declaration:     Interlisp Functions to be used:</p><p class="s11" style="padding-top: 7pt;padding-bottom: 1pt;padding-left: 225pt;text-indent: 0pt;text-align: left;">MIXED PLUS, MINUS, DIFFERENCE, TIMES,</p><table style="border-collapse:collapse;margin-left:171.734pt" cellspacing="0"><tr style="height:14pt"><td style="width:86pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:162pt"><p class="s26" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">QUOTIENT, LESSP, GREATERP</p></td><td style="width:45pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:32pt"><td style="width:86pt"><p class="s26" style="padding-top: 3pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">INTEGER <span class="s41">or </span>FIXED</p></td><td style="width:162pt"><p class="s26" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;line-height: 113%;text-align: left;">IPLUS, IMINUS, IDIFFERENCE, IQUOTIENT, ILESSP, IGREATERP</p></td><td style="width:45pt"><p class="s26" style="padding-top: 5pt;padding-right: 2pt;text-indent: 0pt;text-align: right;">ITIMES,</p></td></tr><tr style="height:26pt"><td style="width:86pt"><p class="s26" style="padding-top: 4pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">FLOATING</p></td><td style="width:162pt"><p class="s26" style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FPLUS, FMINUS, FDIFFERENCE, FQUOTIENT, LESSP, FGREATERP</p></td><td style="width:45pt"><p class="s26" style="padding-top: 4pt;padding-right: 2pt;text-indent: 0pt;text-align: right;">FTIMES,</p></td></tr></table><p class="s11" style="padding-left: 208pt;text-indent: 21pt;line-height: 19pt;text-align: left;">FAST FRPLACA, FRPLACD, FMEMB, FLAST, FASSOC UNDOABLE /RPLACA, /RPLACD, /NCONC, /NCONC1,</p><p class="s11" style="padding-top: 1pt;padding-left: 264pt;text-indent: 0pt;text-align: left;">/MAPCONC, /MAPCON</p><p class="s11" style="padding-top: 8pt;padding-left: 264pt;text-indent: -55pt;line-height: 113%;text-align: left;">STANDARD RPLACA, RPLACD, MEMB, LAST, ASSOC, NCONC, NCONC1, MAPCONC, MAPCON</p><p class="s11" style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;line-height: 12pt;text-align: left;">RPLACA<span class="p">, </span>RPLACD<span class="p">,</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">/RPLACA<span class="p">, etc.     corresponding function</span></p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: left;"><span class="p">You can also make local declarations affecting a selected function or functions by inserting an expression of the form </span>(CLISP: . <i>DECLARATIONS</i>) <span class="p">immediately following the</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">CLISP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">argument list, i.e., as <span class="s11">CADDR </span>of the definition. Such local declarations take precedence over global declarations. Declarations affecting selected variables can be indicated by lists, where the first element is the name of a variable, and the rest of the list the declarations for that variable. For example, <span class="s11">(CLISP: FLOATING (X INTEGER)) </span>specifies that in this function integer arithmetic be used for computations involving <span class="s11">X</span>, and floating arithmetic for all other computations, where &quot;involving&quot; means where the variable itself is an operand. For example, with the declaration <span class="s11">(FLOATING (X INTEGER)) </span>in effect, <span class="s11">(FOO X)+(FIE X) </span>would translate to <span class="s11">FPLUS</span>, i.e., use floating arithmetic, even though <span class="s11">X </span>appears somewhere inside of the operands, whereas <span class="s11">X+(FIE X) </span>would translate to <span class="s11">IPLUS</span>. If there are declarations involving <i>both </i>operands, e.g., <span class="s11">X+Y</span>, with <span class="s11">(X FLOATING) (Y INTEGER)</span>, whichever appears first in the declaration list will be used.</p><p class="s11" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">You can also make local record declarations by inserting a record declaration, e.g., </span>(RECORD --)<span class="p">, </span>(ARRAYRECORD --)<span class="p">, etc., in the local declaration list. In addition, a local declaration of the form </span>(RECORDS A B C) <span class="p">is equivalent to having copies of the global declarations </span>A<span class="p">, </span>B<span class="p">, and </span>C <span class="p">in the local declaration. Local record declarations override global record declarations for the function in which they appear. Local declarations can also be used to override the global setting of certain DWIM / CLISP parameters effective only for transformations within that function, by including in the local declaration an expression of the form </span>(<i>VARIABLE </i>= <i>VALUE</i>)<span class="p">, e.g., </span>(PATVARDEFAULT = QUOTE)<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The <span class="s11">CLISP: </span>expression is converted to a comment of a special form recognized by CLISP. Whenever a CLISP transformation that is affected by declarations is about to be performed in a function, this comment will be searched for a relevant declaration, and if one is found, the corresponding function will be used. Otherwise, if none are found, the global declaration(s) currently in effect will be used.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Local declarations are effective in the order that they are given, so that later declarations can be used to override earlier ones, e.g., <span class="s11">(CLISP: FAST RPLACA RPLACD) </span>specifies that <span class="s11">FMEMB</span>, <span class="s11">FLAST</span>, <span class="s11">RPLACA</span>, and <span class="s11">RPLACD </span>be used. An exception to this is that declarations for specific variables take precedence of general, function-wide declarations, regardless of the order of appearance, as in <span class="s11">(CLISP: (X INTEGER) FLOATING)</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">CLISPIFY <span class="p">also checks the declarations in effect before selecting an infix operator to ensure that the corresponding CLISP construct would in fact translate back to this form. For example, if a </span>FLOATING <span class="p">declaration is in effect, </span>CLISPIFY <span class="p">will convert </span>(FPLUS X Y) <span class="p">to </span>X+Y<span class="p">, but leave </span>(IPLUS X Y) <span class="p">as is. If </span>(FPLUS X Y) <span class="p">is </span>CLISPIFY<span class="p">ed while a </span>FLOATING <span class="p">declaration is under effect, and then the declaration is changed to </span>INTEGER<span class="p">, when </span>X+Y <span class="p">is translated back to Interlisp, it will become </span>(IPLUS X Y)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">CLISP Operation                                                                                                                                        </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">CLISP is a part of the basic Medley system. Without any special preparations, you can include CLISP constructs in programs, or type them in directly for evaluation (in <span class="s11">EVAL </span>or <span class="s11">APPLY </span>format), then, when the &quot;error&quot; occurrs, and DWIM is called, it will destructively transform the CLISP to the equivalent Interlisp expression and evaluate the Interlisp expression. CLISP transformations, like all DWIM</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">corrections, are undoable. User approval is not requested, and no message is printed. This entire discussion also applies to CLISP transformation initiated by calls to DWIM from <span class="s11">DWIMIFY</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">However, if a CLISP construct contains an error, an appropriate diagnostic is generated, and the form is left unchanged. For example, if you write <span class="s11">(LIST X+Y*)</span>, the error diagnostic <span class="s11">MISSING OPERAND AT X+Y* IN (LIST X+Y*) </span>would be generated. Similarly, if you write <span class="s11">(LAST+EL X)</span>, CLISP knows that <span class="s11">((IPLUS LAST EL) X) </span>is not a valid Interlisp expression, so the error diagnostic <span class="s11">MISSING OPERATOR IN (LAST+EL X) </span>is generated. (For example, you might have meant to say <span class="s11">(LAST+EL*X)</span>.)  If <span class="s11">LAST+EL </span>were the name of a defined function, CLISP would never see this form.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Since the bad CLISP transformation might not be CLISP at all, for example, it might be a misspelling of a user function or variable, DWIM holds all CLISP error messages until after trying other corrections. If one of these succeeds, the CLISP message is discarded. Otherwise, if all fail, the message is printed (but no change is made). For example, suppose you type <span class="s11">(R/PLACA X Y)</span>. CLISP generates a diagnostic, since <span class="s11">((IQUOTIENT R PLACA) X Y) </span>is obviously not right. However, since <span class="s11">R/PLACA </span>spelling corrects to <span class="s11">/RPLACA</span>, this diagnostic is never printed.</p><p style="padding-top: 6pt;padding-left: 137pt;text-indent: -30pt;text-align: justify;">Note: CLISP error messages are not printed on type-in. For example, typing <span class="s11">X+*Y </span>will just produce a <span class="s11">U.B.A. X+*Y </span>message.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If a CLISP infix construct is well formed from a syntactic standpoint, but one or both of its operands are atomic and not bound, it is possible that either the operand is misspelled, e.g., you wrote <span class="s11">X+YY </span>for <span class="s11">X+Y</span>, or that a CLISP transformation operation was not intended at all, but that the entire expression is a misspelling. For the purpose of <span class="s11">DWIMIFY</span>ing, &quot;not bound&quot; means no top level value, not on list of bound variables built up by <span class="s11">DWIMIFY </span>during its analysis of the expression, and not on <span class="s11">NOFIXVARSLST</span>, i.e., not previously seen.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">For example, if you have a variable named <span class="s11">LAST-EL</span>, and write <span class="s11">(LIST LAST-ELL)</span>. Therefore, CLISP computes, but does not actually perform, the indicated infix transformation. DWIM then continues, and if it is able to make another correction, does so, and ignores the CLISP interpretation. For example, with <span class="s11">LAST-ELL</span>, the transformation <span class="s11">LAST-ELL -&gt; LAST-EL </span>would be found.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If no other transformation is found, and DWIM is about to interpret a construct as CLISP for which one of the operands is not bound, DWIM will ask you whether CLISP was intended, in this case by printing <span class="s11">LAST-ELL TREAT AS CLISP ?</span>.</p><p style="padding-top: 7pt;padding-left: 138pt;text-indent: -30pt;line-height: 94%;text-align: justify;">Note: If more than one infix operator was involved in the CLISP construct, e.g., <span class="s11">X+Y+Z</span>, or the operation was an assignment to a variable already noticed, or <span class="s11">TREATASCLISPFLG </span>is <span class="s11">T </span>(initially <span class="s11">NIL</span>), you will simply be informed of the correction, e.g., <span class="s11">X+Y+Z TREATED AS CLISP</span>. Otherwise, even if DWIM was enabled in <span class="s11">TRUSTING </span>mode, you will be asked to approve the correction.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The same sort of procedure is followed with 8 and 9 errors. For example, suppose you write <span class="s11">FOO8*X </span>where <span class="s11">FOO8 </span>is not bound. The CLISP transformation is noted, and DWIM proceeds. It next asks you to approve <span class="s11">FOO8*X -&gt; FOO ( *X</span>. For example, this would make sense if you have (or plan to define) a function named <span class="s11">*X</span>. If you refuses, you are asked whether <span class="s11">FOO8*X </span>is to be treated as CLISP.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">CLISP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Similarly, if <span class="s11">FOO8 </span>were the name of a variable, and you write <span class="s11">FOOO8*X</span>, you will first be asked to approve <span class="s11">FOOO8*X -&gt; FOOO ( XX</span>, and if you refuse, then be offered the <span class="s11">FOOO8 -&gt; FOO8 </span>correction. The 8-9 transformation is tried before spelling correction since it is empirically more likely that an unbound atom or undefined function containing an 8 or a 9 is a parenthesis error, rather than a spelling error.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">CLISP also contains provision for correcting misspellings of infix operators (other than single characters), <span class="s11">IF </span>words, and i.s. operators. This is implemented in such a way that the user who does not misspell them is not penalized. For example, if you write <span class="s11">IF N = 0 THEN 1 ELSSE N*(FACT N-1) </span>CLISP does <i>not </i>operate by checking each word to see if it is a misspelling of <span class="s11">IF</span>, <span class="s11">THEN</span>, <span class="s11">ELSE</span>, or <span class="s11">ELSEIF</span>, since this would seriously degrade CLISP’s performance on <i>all </i><span class="s11">IF </span>statements. Instead, CLISP assumes that all of the <span class="s11">IF </span>words are spelled correctly, and transforms the expression to <span class="s11">(COND ((ZEROP N) 1 ELSSE N*(FACT N-1)))</span>. Later, after DWIM cannot find any other interpretation for <span class="s11">ELSSE</span>, and using the fact that this atom originally appeared in an <span class="s11">IF </span>statement, DWIM attempts spelling correction, using <span class="s11">(IF THEN ELSE ELSEIF) </span>for a spelling list. When this is successful, DWIM &quot;fails&quot; all the way back to the original <span class="s11">IF </span>statement, changes <span class="s11">ELSSE </span>to <span class="s11">ELSE</span>, and starts over. Misspellings of <span class="s11">AND</span>, <span class="s11">OR</span>, <span class="s11">LT</span>, <span class="s11">GT</span>, etc. are handled similarly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">CLISP also contains many Do-What-I-Mean features besides spelling corrections. For example, the form <span class="s11">(LIST +X Y) </span>would generate a <span class="s11">MISSING OPERATOR </span>error. However, <span class="s11">(LIST -X Y) </span>makes sense, if the minus is unary, so DWIM offers this interpretation to you. Another common error, especially for new users, is to write <span class="s11">(LIST X*FOO(Y)) </span>or <span class="s11">(LIST X*FOO Y)</span>, where <span class="s11">FOO </span>is the name of a function, instead of <span class="s11">(LIST X*(FOO Y))</span>. Therefore, whenever an operand that is not bound is also the name of a function (or corrects to one), the above interpretations are offered.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">CLISP Translations                                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The translation of CLISP character operators and the CLISP word <span class="s11">IF </span>are handled by <i>replacing </i>the CLISP expression with the corresponding Interlisp expression, and discarding the original CLISP. This is done because (1) the CLISP expression is easily recomputable (by <span class="s11">CLISPIFY</span>) and (2) the Interlisp expressions are simple and straightforward. Another reason for discarding the original CLISP is that it may contain errors that were corrected in the course of translation (e.g., <span class="s11">FOO</span><span class="s19"></span><span class="s11">FOOO:1, N*8FOO X)</span>, etc.). If the original CLISP were retained, either you would have to go back and fix these errors by hand, thereby negating the advantage of having DWIM perform these corrections, or else DWIM would have to keep correcting these errors over and over.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">Note that <span class="s11">CLISPIFY </span>is sufficiently fast that it is practical for you to configure your Interlisp system so that all expressions are automatically <span class="s11">CLISPIFY</span>ed immediately before they are presented to you. For example, you can define an edit macro to use in place of <span class="s11">P </span>which calls <span class="s11">CLISPIFY </span>on the current expression before printing it. Similarly, you can inform <span class="s11">PRETTYPRINT </span>to call <span class="s11">CLISPIFY </span>on each expression before printing it, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Where (1) or (2) are not the case, e.g., with iterative statements, pattern matches, record expressions, etc. the original CLISP <i>is </i>retained (or a slightly modified version thereof), and the translation is stored</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">elsewhere (by the function <span class="s11">CLISPTRAN</span>, in the Miscellaneous Functions and Variables), usually in the hash array <span class="s11">CLISPARRAY</span>. The interpreter automatically checks this array when given a form <span class="s11">CAR </span>of which is not a function. Similarly, the compiler performs a <span class="s11">GETHASH </span>when given a form it does not recognize to see if it has a translation, which is then compiled instead of the form. Whenever you <i>change </i>a CLISP expresson by editing it, the editor automatically deletes its translation (if one exists), so that the next time it is evaluated or <span class="s11">DWIMIFI</span>ed, the expression will be retranslated (if the value of <span class="s11">CLISPRETRANFLG </span>is <span class="s11">T</span>, <span class="s11">DWIMIFY </span>will also (re)translate any expressions which have translations stored remotely, see the CLISPIFY section). The function <span class="s11">PPT </span>and the edit commands <span class="s11">PPT </span>and <span class="s11">CLISP: </span>are available for examining translations (see the Miscellaneous Functions and Variables section).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="p">You can also indicate that you want the original CLISP retained by embedding it in an expression of the form </span>(CLISP . <i>CLISP-EXPRESSION</i>)<span class="p">, e.g., </span>(CLISP X:5:3) <span class="p">or </span>(CLISP &lt;A B C ! D&gt;)<span class="p">. In</span></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">such cases, the translation will be stored remotely as described above. Furthermore, such expressions will be treated as CLISP even if infix and prefix transformations have been disabled by setting </span>CLISPFLG <span class="p">to </span>NIL <span class="p">(see the Miscellaneous Functions and Variables section). In other words, you can instruct the system to interpret as CLISP infix or prefix constructs only those expressions that are specifically flagged as such. You can also include CLISP declarations by writing </span>(CLISP <i>DECLARATIONS </i>. <i>FORM</i>)<span class="p">, e.g., </span>(CLISP (CLISP: FLOATING) ...)<span class="p">. These declarations will be used in place of any CLISP declarations in the function definition. This feature provides a way of including CLISP declarations in macro definitions.</span></p><p style="padding-top: 6pt;padding-left: 137pt;text-indent: -30pt;line-height: 93%;text-align: justify;">Note: CLISP translations can also be used to supply an interpretation for function objects, as well as forms, either for function objects that are used openly, i.e., appearing as <span class="s11">CAR </span>of form, function objects that are explicitly <span class="s11">APPLY</span>ed, as with arguments to mapping functions, or function objects contained in function definition cells. In all cases, if <span class="s11">CAR </span>of the object is not <span class="s11">LAMBDA </span>or <span class="s11">NLAMBDA, </span>the interpreter and compiler will check <span class="s11">CLISPARRAY</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">DWIMIFY                                                                                                                                                     </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s11">DWIMIFY </span>is effectively a preprocessor for CLISP. <span class="s11">DWIMIFY </span>operates by scanning an expression as though it were being interpreted, and for each form that would generate an error, calling DWIM to &quot;fix&quot; it. <span class="s11">DWIMIFY </span>performs <i>all </i>DWIM transformations, not just CLISP transformations, so it does spelling correction, fixes 8-9 errors, handles <span class="s11">F/L</span>, etc. Thus you will see the same messages, and be asked for approval in the same situations, as you would if the expression were actually run. If DWIM is unable to make a correction, no message is printed, the form is left as it was, and the analysis proceeds.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">DWIMIFY <span class="p">knows exactly how the interpreter works. It knows the syntax of </span>PROG<span class="p">s, </span>SELECTQ<span class="p">s, </span>LAMBDA <span class="p">expressions, </span>SETQ<span class="p">s, et al. It knows how variables are bound, and that the argument of </span>NLAMBDA<span class="p">s are not evaluated (you can inform </span>DWIMIFY <span class="p">of a function or macro’s nonstandard binding or evaluation by giving it a suitable </span>INFO <span class="p">property, see below). In the course of its analysis of a particular expression, </span>DWIMIFY <span class="p">builds a list of the bound variables from the </span>LAMBDA <span class="p">expressions and </span>PROG<span class="p">s that it encounters. It uses this list for spelling corrections. </span>DWIMIFY <span class="p">also knows not to try to</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">CLISP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">&quot;correct&quot; variables that are on this list since they would be bound if the expression were actually being run. However, note that <span class="s11">DWIMIFY </span>cannot, a priori, know about variables that are used freely but would be bound in a higher function if the expression were evaluated in its normal context. Therefore, <span class="s11">DWIMIFY </span>will try to &quot;correct&quot; these variables. Similarly, <span class="s11">DWIMIFY </span>will attempt to correct forms for which <span class="s11">CAR </span>is undefined, even when the form is not in error from your standpoint, but the corresponding function has simply not yet been defined.</p><p style="padding-top: 6pt;padding-left: 90pt;text-indent: -30pt;text-align: left;">Note: <span class="s11">DWIMIFY </span>rebinds <span class="s11">FIXSPELLDEFAULT </span>to <span class="s11">N</span>, so that if you are not at the terminal when <span class="s11">DWIMIFY</span>ing (or compiling), spelling corrections will not be performed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">DWIMIFY </span>will also inform you when it encounters an expression with too <i>many </i>arguments (unless <span class="s11">DWIMCHECK#ARGSFLG = NIL</span>), because such an occurrence, although does not cause an error in the Interlisp interpreter, nevertheless is frequently symptomatic of a parenthesis error. For example, if you wrote <span class="s11">(CONS (QUOTE FOO X)) </span>instead of <span class="s11">(CONS (QUOTE FOO) X), DWIMIFY </span>will print:</p><p class="s11" style="padding-top: 8pt;padding-left: 78pt;text-indent: 0pt;line-height: 88%;text-align: left;">POSSIBLE PARENTHESIS ERROR IN (QUOTE FOO X)</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 9pt;text-align: left;">TOO MANY ARGUMENTS (MORE THAN 1)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;"><span class="s11">DWIMIFY </span>will also check to see if a <span class="s11">PROG </span>label contains a clisp character (unless <span class="s11">DWIMCHECKPROGLABELSFLG = NIL</span>, or the label is a member of <span class="s11">NOFIXVARSLST</span>), and if so, will alert you by printing the message <span class="s11">SUSPICIOUS PROG LABEL</span>, followed by the label. The <span class="s11">PROG </span>label will <i>not </i>be treated as CLISP.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Note that in most cases, an attempt to transform a form that is already as you intended will have no effect (because there will be nothing to which that form could reasonably be transformed). However, in order to avoid needless calls to DWIM or to avoid possible confusion, you can inform <span class="s11">DWIMIFY </span><i>not </i>to attempt corrections or transformations on certain functions or variables by adding them to the list <span class="s11">NOFIXFNSLST </span>or <span class="s11">NOFIXVARSLST </span>respectively. Note that you could achieve the same effect by simply setting the corresponding variables, and giving the functions dummy definitions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">DWIMIFY <span class="p">will never attempt corrections on global variables, i.e., variables that are a member of the list </span>GLOBALVARS<span class="p">, or have the property </span>GLOBALVAR <span class="p">with value </span>T<span class="p">, on their property list. Similarly, </span>DWIMIFY <span class="p">will not attempt to correct variables declared to be </span>SPECVARS <span class="p">in block declarations or via </span>DECLARE <span class="p">expressions in the function body. You can also declare variables that are simply used freely in a function by using the </span>USEDFREE <span class="p">declaration.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">DWIMIFY <span class="p">and </span>DWIMIFYFNS <span class="p">(used to </span>DWIMIFY <span class="p">several functions) maintain two internal lists of those functions and variables for which corrections were unsuccessfully attempted. These lists are initialized to the values of </span>NOFIXFNSLST <span class="p">and </span>NOFIXVARSLST<span class="p">. Once an attempt is made to fix a particular function or variable, and the attempt fails, the function or variable is added to the corresponding list, so that on subsequent occurrences (within this call to </span>DWIMIFY <span class="p">or </span>DWIMIFYFNS<span class="p">), no attempt at correction is made. For example, if </span>FOO <span class="p">calls </span>FIE <span class="p">several times, and </span>FIE <span class="p">is undefined at the time </span>FOO <span class="p">is </span>DWIMIFY<span class="p">ed, </span>DWIMIFY <span class="p">will not bother with </span>FIE <span class="p">after the first occurrence. In other words, once </span>DWIMIFY <span class="p">&quot;notices&quot; a function or variable, it no longer attempts to correct it. </span>DWIMIFY <span class="p">and </span>DWIMIFYFNS <span class="p">also &quot;notice&quot; free variables that are set in the expression being processed.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Moreover, once <span class="s11">DWIMIFY </span>&quot;notices&quot; such functions or variables, it subsequently treats them the same as though they were actually defined or set.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note that these internal lists are local to each call to <span class="s11">DWIMIFY </span>and <span class="s11">DWIMIFYFNS</span>, so that if a function containing <span class="s11">FOOO</span>, a misspelled call to <span class="s11">FOO</span>, is <span class="s11">DWIMIFY</span>ed before <span class="s11">FOO </span>is defined or mentioned, if the function is <span class="s11">DWIMIFY</span>ed again after <span class="s11">FOO </span>has been defined, the correction will be made.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">You can undo selected transformations performed by <span class="s11">DWIMIFY</span>, as described in Chapter 13.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>DWIMIFY </b><i>X QUIETFLG L</i>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Performs all DWIM and CLISP corrections and transformations on <span class="s16">X </span>that would be performed if <span class="s16">X </span>were run, and prints the result unless <span class="s16">QUIETFLG </span><span class="s11">= T</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is an atom and <span class="s16">L </span>is <span class="s11">NIL</span>, <span class="s16">X </span>is treated as the name of a function, and its entire definition is <span class="s11">DWIMIFY</span>ed. If <span class="s16">X </span>is a list or <span class="s16">L </span>is not <span class="s11">NIL</span>, <span class="s16">X </span>is the expression to be <span class="s11">DWIMIFY</span>ed. If <span class="s16">L </span>is not <span class="s11">NIL</span>, it is the edit push-down list leading to <span class="s16">X</span>, and is used for determining context, i.e., what bound variables would be in effect when <span class="s16">X </span>was evaluated, whether <span class="s16">X </span>is a form or sequence of forms, e.g., a <span class="s11">COND </span>clause, etc.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is an iterative statement and <span class="s16">L </span>is <span class="s11">NIL</span>, <span class="s11">DWIMIFY </span>will also print the translation, i.e., what is stored in the hash array.</p><p class="s16" style="padding-top: 9pt;padding-left: 126pt;text-indent: -24pt;text-align: left;"><span class="s11">(</span><b>DWIMIFYFNS </b>FN<span class="s32">1 </span>... FN<span class="s32">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">DWIMIFY<span class="p">s each of the functions given. If only one argument is given, it is evalued. If its value is a list, the functions on this list are </span>DWIMIFY<span class="p">ed. If only one argument is given, it is atomic, its value is not a list, and it is the name of a known file, </span>DWIMIFYFNS <span class="p">will operate on </span>(FILEFNSLST <i>FN</i><i>1</i>)<span class="p">, e.g. </span>(DWIMIFYFNS FOO.LSP) <span class="p">will </span>DWIMIFY <span class="p">every function in the file </span>FOO.LSP<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Every 30 seconds, <span class="s11">DWIMIFYFNS </span>prints the name of the function it is processing, a la</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PRETTYPRINT<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Value is a list of the functions <span class="s11">DWIMIFY</span>ed.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">DWIMINMACROSFLG                                                <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Controls how <span class="s11">DWIMIFY </span>treats the arguments in a &quot;call&quot; to a macro, i.e., where the <span class="s11">CAR </span>of the form is undefined, but has a macro definition. If <span class="s11">DWIMINMACROSFLG </span>is <span class="s11">T</span>, then macros are treated as <span class="s11">LAMBDA </span>functions, i.e., the arguments are assumed to be evaluated, which means that <span class="s11">DWIMIFY </span>will descend into the argument list. If <span class="s11">DWIMINMACROSFLG </span>is <span class="s11">NIL</span>, macros are treated as <span class="s11">NLAMBDA </span>functions. <span class="s11">DWIMINMACROSFLG </span>is initially <span class="s11">T</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">INFO                                                      <span class="p">[Property  Name]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Used to inform <span class="s11">DWIMIFY </span>of nonstandard behavior of particular forms with respect to evaluation, binding of arguments, etc. The <span class="s11">INFO </span>property of a symbol is a single atom or list of atoms chosen from among the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">CLISP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -33pt;line-height: 92%;text-align: justify;"><span class="s15">EVAL </span>Informs <span class="s11">DWIMIFY </span>(and CLISP and Masterscope) that an nlambda function <i>does </i>evaluate its arguments. Can also be placed on a macro name to override the behavior of <span class="s11">DWIMINMACROSFLG = NIL</span>.</p><p style="padding-top: 5pt;padding-left: 179pt;text-indent: -44pt;text-align: justify;"><span class="s15">NOEVAL </span>Informs <span class="s11">DWIMIFY </span>that a macro does <i>not </i>evaluate all of its arguments, even when <span class="s11">DWIMINMACROSFLG = T</span>.</p><p class="s11" style="padding-top: 5pt;padding-left: 179pt;text-indent: -39pt;line-height: 94%;text-align: justify;"><b>BINDS </b><span class="p">Placed on the </span>INFO <span class="p">property of a function or the </span>CAR <span class="p">of a special form to inform </span>DWIMIFY <span class="p">that the function or form binds variables. In this case, </span>DWIMIFY <span class="p">assumes that </span>CADR <span class="p">of the form is the variable list, i.e., a list of symbols, or lists of the form </span>(<i>VAL VALUE</i>)<span class="p">. </span>LAMBDA<span class="p">, </span>NLAMBDA<span class="p">, </span>PROG<span class="p">, and</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">RESETVARS <span class="p">are handled in this fashion.</span></p><p style="padding-top: 5pt;padding-left: 180pt;text-indent: -44pt;line-height: 94%;text-align: justify;"><span class="s15">LABELS </span>Informs <span class="s11">CLISPIFY </span>that the form interprets top-level symbols as labels, so that <span class="s11">CLISPIFY </span>will never introduce an atom (by packing) at the top level of the expression. <span class="s11">PROG </span>is handled in this fashion.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">NOFIXFNSLST <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">List of functions that <span class="s11">DWIMIFY </span>will not try to correct.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">NOFIXVARSLST <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">List of variables that <span class="s11">DWIMIFY </span>will not try to correct.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">NOSPELLFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s11">T</span>, <span class="s11">DWIMIFY </span>will not perform any spelling corrections. Initially <span class="s11">NIL</span>. <span class="s11">NOSPELLFLG </span>is reset to <span class="s11">T </span>when compiling functions whose definitions are obtained from a file, as opposed to being in core.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">CLISPHELPFLG <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s11">NIL</span>, <span class="s11">DWIMIFY </span>will not ask you for approval of any CLISP transformations. Instead, in those situations where approval would be required, the effect is the same as though you had been asked and said <span class="s11">NO</span>. Initially <span class="s11">T</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DWIMIFYCOMPFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If <span class="s11">T</span>, <span class="s11">DWIMIFY </span>is called before compiling an expression. Initially <span class="s11">NIL</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DWIMCHECK#ARGSFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If <span class="s11">T</span>, causes <span class="s11">DWIMIFY </span>to check for too many arguments in a form. Initially <span class="s11">T</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DWIMCHECKPROGLABELSFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If <span class="s11">T</span>, causes <span class="s11">DWIMIFY </span>to check whether a <span class="s11">PROG </span>label contains a CLISP character. Initially</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">T<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">DWIMESSGAG                                                     <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s11">T</span>, suppresses all <span class="s11">DWIMIFY </span>error messages. Initially <span class="s11">NIL</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">CLISPRETRANFLG                                                 <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">If <span class="s11">T</span>, informs <span class="s11">DWIMIFY </span>to (re)translate all expressions which have remote translations in the CLISP hash array. Initially <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">CLISPIFY                                                                                                                                                    </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">CLISPIFY </span>converts Interlisp expressions to CLISP. Note that the expression given to <span class="s11">CLISPIFY </span>need <i>not </i>have originally been input as CLISP, i.e., <span class="s11">CLISPIFY </span>can be used on functions that were written before CLISP was even implemented. <span class="s11">CLISPIFY </span>is cognizant of declaration rules as well as all of the precedence rules. For example, <span class="s11">CLISPIFY </span>will convert <span class="s11">(IPLUS A (ITIMES B C)) </span>into <span class="s11">A+B*C</span>, but <span class="s11">(ITIMES A (IPLUS B C)) </span>into <span class="s11">A*(B+C)</span>. <span class="s11">CLISPIFY </span>handles such cases by first <span class="s11">DWIMIFY</span>ing the expression. <span class="s11">CLISPIFY </span>also knows how to handle expressions consisting of a mixture of Interlisp and CLISP, e.g., <span class="s11">(IPLUS A B*C) </span>is converted to <span class="s11">A+B*C</span>, but <span class="s11">(ITIMES A B+C) </span>to <span class="s11">(A*(B+C))</span>. <span class="s11">CLISPIFY </span>converts calls to the six basic mapping functions, <span class="s11">MAP</span>, <span class="s11">MAPC</span>, <span class="s11">MAPCAR</span>, <span class="s11">MAPLIST</span>, <span class="s11">MAPCONC</span>, and <span class="s11">MAPCON</span>, into equivalent iterative statements. It also converts certain easily recognizable internal <span class="s11">PROG </span>loops to the corresponding iterative statements. <span class="s11">CLISPIFY </span>can convert all iterative statements input in CLISP back to CLISP, regardless of how complicated the translation was, because the original CLISP is saved.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">CLISPIFY <span class="p">is not destructive to the original Interlisp expression, i.e., </span>CLISPIFY <span class="p">produces a new expression without changing the original. The new expression may however contain some &quot;pieces&quot; of the original, since </span>CLISPIFY <span class="p">attempts to minimize the number of </span>CONS<span class="p">es by not copying structure whenever possible.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">CLISPIFY <span class="p">will not convert expressions appearing as arguments to </span>NLAMBDA <span class="p">functions, except for those functions whose </span>INFO <span class="p">property is or contains the atom </span>EVAL<span class="p">. </span>CLISPIFY <span class="p">also contains built in information enabling it to process special forms such as </span>PROG<span class="p">, </span>SELECTQ<span class="p">, etc. If the </span>INFO <span class="p">property is or contains the atom </span>LABELS<span class="p">, </span>CLISPIFY <span class="p">will never create an atom (by packing) at the top level of the expression.  </span>PROG <span class="p">is handled in this fashion.</span></p><p style="padding-top: 7pt;padding-left: 138pt;text-indent: -30pt;text-align: justify;">Note: Disabling a CLISP operator with <span class="s11">CLDISABLE </span>(see the Miscellaneous Functions and Variables section) will also disable the corresponding <span class="s11">CLISPIFY </span>transformation. Thus, if <span class="s19"></span><span class="s21"> </span>is &quot;turned off&quot;, <span class="s11">A</span><span class="s19"></span><span class="s11">B </span>will not transform to <span class="s11">(SETQ A B)</span>, nor vice versa.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>CLISPIFY </b><i>X EDITCHAIN</i>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Clispifies <span class="s16">X</span>. If <span class="s16">X </span>is an atom and <span class="s16">EDITCHAIN </span>is <span class="s11">NIL</span>, <span class="s16">X </span>is treated as the name of a function, and its definition (or <span class="s11">EXPR </span>property) is clispified. After <span class="s11">CLISPIFY </span>has finished, <span class="s16">X </span>is redefined (using <span class="s11">/PUTD</span>) with its new CLISP definition. The value of <span class="s11">CLISPIFY </span>is <span class="s16">X</span>. If <span class="s16">X</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">CLISP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">is atomic and not the name of a function, spelling correction is attempted. If this fails, an error is generated.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is a list, or <span class="s16">EDITCHAIN </span>is not <span class="s11">NIL</span>, <span class="s16">X </span>itself is the expression to be clispified. If <span class="s16">EDITCHAIN </span>is not <span class="s11">NIL</span>, it is the edit push-down list leading to <span class="s16">X </span>and is used to determine context as with <span class="s11">DWIMIFY</span>, as well as to obtain the local declarations, if any. The value of <span class="s11">CLISPIFY </span>is the clispified version of <span class="s16">X</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: -24pt;line-height: 137%;text-align: left;">(<b>CLISPIFYFNS </b><i>FN</i><i>1 </i><i>... FN</i><i>N</i>) <span class="p">[NLambda NoSpread Function] Like </span>DWIMIFYFNS <span class="p">except calls </span>CLISPIFY <span class="p">instead of </span>DWIMIFY<span class="p">.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">CL:FLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Affects <span class="s11">CLISPIFY</span>’s handling of forms beginning with <span class="s11">CAR</span>, <span class="s11">CDR</span>, <span class="s11">... CDDDDR</span>, as well as pattern match and record expressions. If <span class="s11">CL:FLG </span>is <span class="s11">NIL</span>, these are not transformed into the equivalent <b>: </b>expressions. This will prevent <span class="s11">CLISPIFY </span>from constructing any expression employing a <b>: </b>infix operator, e.g., <span class="s11">(CADR X) </span>will not be transformed to <span class="s11">X:2</span>. If <span class="s11">CL:FLG </span>is <span class="s11">T</span>, <span class="s11">CLISPIFY </span>will convert to <b>: </b>notation only when the argument is atomic or a simple list (a function name and one atomic argument). If <span class="s11">CL:FLG </span>is <span class="s11">ALL</span>, <span class="s11">CLISPIFY </span>will convert to <b>: </b>expressions whenever possible.</p><p class="s11" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">CL:FLG <span class="p">is initially </span>T<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">CLREMPARSFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s11">T</span>, <span class="s11">CLISPIFY </span>will remove parentheses in certain cases from simple forms, where &quot;simple&quot; means a function name and one or two atomic arguments. For example, <span class="s11">(COND ((ATOM X) --)) </span>will <span class="s11">CLISPIFY </span>to <span class="s11">(IF ATOM X THEN --)</span>. However, if <span class="s11">CLREMPARSFLG </span>is set to <span class="s11">NIL</span>, <span class="s11">CLISPIFY </span>will produce <span class="s11">(IF (ATOM X) THEN --)</span>. Regardless of the flag setting, the expression can be input in either form.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">CLREMPARSFLG <span class="p">is initially </span>NIL<span class="p">.</span></p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">CLISPIFYPACKFLG <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">CLISPIFYPACKFLG <span class="p">affects the treatment of infix operators with atomic operands. If </span>CLISPIFYPACKFLG <span class="p">is </span>T<span class="p">, </span>CLISPIFY <span class="p">will pack these into single atoms, e.g., </span>(IPLUS A (ITIMES B C)) <span class="p">becomes </span>A+B*C<span class="p">. If </span>CLISPIFYPACKFLG <span class="p">is </span>NIL<span class="p">, no packing is done, e.g., the above becomes </span>A + B * C<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">CLISPIFYPACKFLG <span class="p">is initially </span>T<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">CLISPIFYUSERFN <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s11">T</span>, causes the function <span class="s11">CLISPIFYUSERFN</span>, which should be a function of one argument, to be called on each form (list) not otherwise recognized by <span class="s11">CLISPIFY</span>. If a non-<span class="s11">NIL </span>value is returned, it is treated as the clispified form. Initially <span class="s11">NIL</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note that <span class="s11">CLISPIFYUSERFN </span>must be both set and defined to use this feature.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">FUNNYATOMLST                                                   <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Suppose you have variables named <span class="s11">A</span>, <span class="s11">B</span>, and <span class="s11">A*B</span>. If <span class="s11">CLISPIFY </span>were to convert <span class="s11">(ITIMES A B) </span>to <span class="s11">A*B</span>, <span class="s11">A*B </span>would not translate back correctly to <span class="s11">(ITIMES A B)</span>, since it would be the name of a variable, and therefore would not cause an error. You can prevent this from happening by adding <span class="s11">A*B </span>to the list <span class="s11">FUNNYATOMLST</span>. Then, <span class="s11">(ITIMES A B) </span>would <span class="s11">CLISPIFY </span>to <span class="s11">A * B</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Note that <span class="s11">A*B</span>’s appearance on <span class="s11">FUNNYATOMLST </span>would <i>not </i>enable DWIM and CLISP to decode <span class="s11">A*B+C </span>as <span class="s11">(IPLUS A*B C)</span>; <span class="s11">FUNNYATOMLST </span>is used only by <span class="s11">CLISPIFY</span>. Thus, if an identifier contains a CLISP character, it should always be separated (with spaces) from other operators. For example, if <span class="s11">X* </span>is a variable, you should write <span class="s11">(SETQ X* </span><span class="s16">FORM</span><span class="s11">) </span>in CLISP as <span class="s11">X* </span><span class="s19"></span><span class="s16">FORM</span>, not <span class="s11">X*</span><span class="s19"></span><span class="s16">FORM</span>. In general, it is best to avoid use of identifiers containing CLISP character operators as much as possible.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Miscellaneous Functions and Variables                                                                                                 </h4><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">CLISPFLG                                                       <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">If <span class="s11">CLISPFLG = NIL</span>, disables all CLISP infix or prefix transformations (but does not affect</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">IF/THEN/ELSE <span class="p">statements, or iterative statements).</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s11">CLISPFLG = TYPE-IN</span>, CLISP transformations are performed only on expressions that are typed in for evaluation, i.e., not on user programs.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">If <span class="s11">CLISPFLG = T</span>, CLISP transformations are performed on all expressions.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The initial value for <span class="s11">CLISPFLG </span>is <span class="s11">T</span>. <span class="s11">CLISPIFY</span>ing anything will cause <span class="s11">CLISPFLG </span>to be set to <span class="s11">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">CLISPCHARS                                                     <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">A list of the operators that can appear in the interior of an atom. Currently <span class="s11">(+ - * / </span><span class="s19"></span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">~ ’ = <span class="s19"></span><span class="s21"> </span>: &lt; &gt; +- ~= @ !)<span class="p">.</span></p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">CLISPCHARRAY                                                   <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">A bit table of the characters on <span class="s11">CLISPCHARS </span>used for calls to <span class="s11">STRPOSL </span>(Chapter 4). <span class="s11">CLISPCHARRAY </span>is initialized by performing <span class="s11">(SETQ CLISPCHARRAY (MAKEBITTABLE CLISPCHARS))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">CLISPINFIXSPLST                                                <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">A list of infix operators used for spelling correction.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">CLISPARRAY                                                     <span class="s10">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Hash array used for storing CLISP translations. <span class="s11">CLISPARRAY </span>is checked by <span class="s11">FAULTEVAL</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">and <span class="s11">FAULTAPPLY </span>on erroneous forms before calling DWIM, and by the compiler.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">CLISP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CLEARCLISPARRAY </b><i>NAME --</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Macro and CLISP expansions are cached in <span class="s11">CLISPARRAY</span>, the systems CLISP hash array. When anything changes that would invalidate an expansion, it needs to be removed from the cache. <span class="s11">CLEARCLISPARRAY </span>does this for you. The system does this automatically whenever you define redefine a CLISP or macro form. If you have changed something that a CLISP word or a macro depends on the system will not be able to detect this, so you will have to invalidate the cahce by calling <span class="s11">CLEARCLISPARRAY. </span>You can clear the whole cache by calling <span class="s11">(CLRHASH CLISPARRAY).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CLISPTRAN </b><i>X TRAN</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Gives <span class="s16">X </span>the translation <span class="s16">TRAN </span>by storing (key <span class="s16">X</span>, value <span class="s16">TRAN</span>) in the hash array <span class="s11">CLISPARRAY</span>. <span class="s11">CLISPTRAN </span>is called for all CLISP translations, via a non-linked, external function call, so it can be advised.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CLISPDEC </b><i>DECLST</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Puts into effect the declarations in <span class="s16">DECLST</span>. <span class="s11">CLISPDEC </span>performs spelling corrections on words not recognized as declarations. <span class="s11">CLISPDEC </span>is undoable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CLDISABLE </b><i>OP</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Disables the CLISP operator <span class="s16">OP</span>. For example, <span class="s11">(CLDISABLE ’-) </span>makes <span class="s11">- </span>be just another character. <span class="s11">CLDISABLE </span>can be used on all CLISP operators, e.g., infix operators, prefix operators, iterative statement operators, etc. <span class="s11">CLDISABLE </span>is undoable.</p><p style="padding-top: 7pt;padding-left: 132pt;text-indent: -30pt;line-height: 92%;text-align: justify;">Note: Simply removing a character operator from <span class="s11">CLISPCHARS </span>will prevent it from being treated as a CLISP operator when it appears as part of an atom, but it will continue to be an operator when it appears as a separate atom, e.g. (<span class="s11">FOO + X</span>) vs <span class="s11">FOO+X</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">CLISPIFTRANFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Affects handling of translations of <span class="s11">IF-THEN-ELSE </span>statements (see Chapter 9). If <span class="s11">T</span>, the translations are stored elsewhere, and the (modified) CLISP retained. If <span class="s11">NIL</span>, the corresponding <span class="s11">COND </span>expression replaces the CLISP. Initially <span class="s11">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">CLISPIFYPRETTYFLG <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If non-<span class="s11">NIL</span>, causes <span class="s11">PRETTYPRINT </span>(and therefore <span class="s11">PP </span>and <span class="s11">MAKEFILE</span>) to <span class="s11">CLISPIFY </span>selected function definitions before printing them according to the following interpretations of <span class="s11">CLISPIFYPRETTYFLG</span>:</p><p class="s15" style="padding-top: 6pt;padding-left: 181pt;text-indent: 0pt;text-align: left;">ALL <span class="p">Clispify all functions.</span></p><p style="padding-top: 6pt;padding-left: 152pt;text-indent: 0pt;text-align: left;"><span class="s15">T </span>or <span class="s15">EXPRS </span>Clispify all functions currently defined as <span class="s11">EXPR</span>s.</p><p class="s15" style="padding-top: 6pt;padding-left: 209pt;text-indent: -49pt;text-align: left;">CHANGES <span class="p">Clispify all functions marked as having been changed.</span></p><p style="padding-top: 6pt;padding-left: 179pt;text-indent: 0pt;text-align: left;">a list Clispify all functions in that list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">CLISPIFYPRETTYFLG <span class="p">is (temporarily) reset to </span>T <span class="p">when </span>MAKEFILE <span class="p">is called with the option </span>CLISPIFY<span class="p">, and reset to </span>CHANGES <span class="p">when the file being dumped has the property </span>FILETYPE <span class="p">value </span>CLISP<span class="p">. </span>CLISPIFYPRETTYFLG <span class="p">is initially </span>NIL<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: -30pt;line-height: 93%;text-align: justify;">Note: If <span class="s11">CLISPIFYPRETTYFLG </span>is non-<span class="s11">NIL</span>, and the only transformation performed by <span class="s11">DWIM </span>are well formed <span class="s11">CLISP </span>transformations, i.e., no spelling corrections, the function will <i>not </i>be marked as changed, since it would only have to be re-clispified and re-prettyprinted when the file was written out.</p><p class="s11" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">(<b>PPT </b><i>X</i>) <span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Both a function and an edit macro for prettyprinting translations. It performs a <span class="s11">PP </span>after first resetting <span class="s11">PRETTYTRANFLG </span>to <span class="s11">T</span>, thereby causing any translations to be printed instead of the corresponding CLISP.</p><p class="s15" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">CLISP: <span class="p">[Editor Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Edit macro that obtains the translation of the correct expression, if any, from</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">CLISPARRAY<span class="p">, and calls </span>EDITE <span class="p">on it.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 102pt;text-indent: 0pt;text-align: justify;">CL <span class="p">[Editor Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Edit macro. Replaces current expression with <span class="s11">CLISPIFY</span>ed current expression. Current expression can be an element or tail.</p><p class="s15" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">DW <span class="p">[Editor Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Edit macro. <span class="s11">DWIMIFY</span>s current expression, which can be an element (atom or list) or tail.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Both <span class="s11">CL </span>and <span class="s11">DW </span>can be called when the current expression is either an element or a tail and will work properly. Both consult the declarations in the function being edited, if any, and both are undoable.</p><p class="s11" style="padding-top: 10pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">(<b>LOWERCASE </b><i>FLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">FLG </span><span class="s11">= T</span>, <span class="s11">LOWERCASE </span>makes the necessary internal modifications so that <span class="s11">CLISPIFY </span>will use lower case versions of <span class="s11">AND</span>, <span class="s11">OR</span>, <span class="s11">IF</span>, <span class="s11">THEN</span>, <span class="s11">ELSE</span>, <span class="s11">ELSEIF</span>, and all i.s. operators. This produces more readable output. Note that you can always type in <i>either </i>upper or lower case (or a combination), regardless of the action of <span class="s11">LOWERCASE</span>. If <span class="s16">FLG </span><span class="s11">= NIL</span>, <span class="s11">CLISPIFY </span>will use uppercase versions of <span class="s11">AND</span>, <span class="s11">OR</span>, et al. The value of <span class="s11">LOWERCASE </span>is its previous &quot;setting&quot;. <span class="s11">LOWERCASE </span>is undoable. The initial setting for <span class="s11">LOWERCASE </span>is <span class="s11">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">CLISP Internal Conventions                                                                                                                     </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">CLISP is almost entirely table driven by the property lists of the corresponding infix or prefix operators. For example, much of the information used for translating the <span class="s11">+ </span>infix operator is stored on the property list of the symbol &quot;<span class="s11">+</span>&quot;. Thus it is relatively easy to add new infix or prefix operators or change old ones, simply by adding or changing selected property values. (There <i>is </i>some built in</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">CLISP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;">information for handling minus, <span class="s11">:</span>, <span class="s11">’</span>, and <span class="s11">~</span>, i.e., you could not yourself add such &quot;special&quot; operators, although you can disable or redefine them.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Global declarations operate by changing the <span class="s11">LISPFN </span>and <span class="s11">CLISPINFIX </span>properties of the appropriate operators.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">CLISPTYPE <span class="p">[Property Name]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The property value of the property <span class="s11">CLISPTYPE </span>is the precedence number of the operator: higher values have higher precedence, i.e., are tighter. Note that the actual value is unimportant, only the value relative to other operators. For example, <span class="s11">CLISPTYPE </span>for <b>:</b>, <span class="s19"></span>, and <span class="s11">* </span>are 14, 6, and 4 respectively. Operators with the same precedence group left to right, e.g., <span class="s11">/ </span>also has precedence 4, so <span class="s11">A/B*C </span>is <span class="s11">(A/B)*C</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">An operator can have a different left and right precedence by making the value of <span class="s11">CLISPTYPE </span>be a dotted pair of two numbers, e.g., <span class="s11">CLISPTYPE </span>of <span class="s19"></span><span class="s21"> </span>is <span class="s11">(8 . -12)</span>. In this case, <span class="s11">CAR </span>is the left precedence, and <span class="s11">CDR </span>the right, i.e., <span class="s11">CAR </span>is used when comparing with operators on the <i>left</i>, and <span class="s11">CDR </span>with operators on the <i>right</i>. For example, <span class="s11">A*B</span><span class="s19"></span><span class="s11">C+D </span>is parsed as <span class="s11">A*(B</span><span class="s19"></span><span class="s11">(C+D)) </span>because the left precedence of <span class="s19"></span><span class="s21"> </span>is 8, which is higher than that of <span class="s11">*</span>, which is 4. The right precedence of <span class="s19"></span><span class="s21"> </span>is -12, which is lower than that of <span class="s11">+</span>, which is 2.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If the <span class="s11">CLISPTYPE </span>property for any operator is removed, the corresponding CLISP transformation is disabled, as well as the inverse <span class="s11">CLISPIFY </span>transformation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;text-align: justify;">UNARYOP <span class="p">[Property Name]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The value of property <span class="s11">UNARYOP </span>must be <span class="s11">T </span>for unary operators or brackets. The operand is always on the right, i.e., unary operators or brackets are always prefix operators.</p><p class="s15" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">BROADSCOPE <span class="p">[Property Name]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The value of property <span class="s11">BROADSCOPE </span>is <span class="s11">T </span>if the operator has lower precedence than Interlisp forms, e.g., <span class="s11">LT</span>, <span class="s11">EQUAL</span>, <span class="s11">AND</span>, etc. For example, <span class="s11">(FOO X AND Y) </span>parses as <span class="s11">((FOO X) AND Y)</span>. If the <span class="s11">BROADSCOPE </span>property were removed from the property list of <span class="s11">AND</span>, <span class="s11">(FOO X AND Y) </span>would parse as <span class="s11">(FOO (X AND Y))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: justify;">LISPFN <span class="p">[Property Name]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The value of the property <span class="s11">LISPFN </span>is the name of the function to which the infix operator translates. For example, the value of <span class="s11">LISPFN </span>for <span class="s19"></span><span class="s21"> </span>is <span class="s11">EXPT</span>, for <span class="s11">’ QUOTE</span>, etc. If the value of the property <span class="s11">LISPFN </span>is <span class="s11">NIL</span>, the infix operator itself is also the function, e.g., <span class="s11">AND</span>, <span class="s11">OR</span>, <span class="s11">EQUAL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;text-align: justify;">SETFN <span class="p">[Property Name]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">If </span>FOO <span class="p">has a </span>SETFN <span class="p">property </span>FIE<span class="p">, then </span>(FOO --)<span class="s19"></span>X <span class="p">translates to </span>(FIE -- X)<span class="p">. For example, if you make </span>ELT <span class="p">be an infix operator, e.g. </span>#<span class="p">, by putting appropriate </span>CLISPTYPE <span class="p">and </span>LISPFN <span class="p">properties on the property list of </span># <span class="p">then you can also make </span># <span class="p">followed by </span><span class="s19"></span><span class="s21"> </span><span class="p">translate to </span>SETA<span class="p">, e.g., </span>X#N<span class="s19"></span>Y <span class="p">to </span>(SETA X N Y)<span class="p">, by putting </span>SETA <span class="p">on the property list of</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">ELT <span class="p">under the property </span>SETFN<span class="p">. Putting the list </span>(ELT) <span class="p">on the property list of </span>SETA <span class="p">under property </span>SETFN <span class="p">will enable </span>SETA <span class="p">forms to </span>CLISPIFY <span class="p">back to </span>ELT<span class="p">’s.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">CLISPINFIX                                                <span class="p">[Property  Name]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The value of this property is the CLISP infix to be used in <span class="s11">CLISPIFY</span>ing. This property is stored on the property list of the corresponding Interlisp function, e.g., the value of property <span class="s11">CLISPINFIX </span>for <span class="s11">EXPT </span>is <span class="s19"></span><span class="s11">, </span>for <span class="s11">QUOTE </span>is <span class="s11">’ </span>etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">CLISPWORD                                                 <span class="p">[Property  Name]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Appears on the property list of clisp operators which can appear as <span class="s11">CAR </span>of a form, such as <span class="s11">FETCH</span>, <span class="s11">REPLACE</span>, <span class="s11">IF</span>, iterative statement operators, etc. Value of property is of the form <span class="s11">(</span><span class="s16">KEYWORD </span><span class="s11">. </span><span class="s16">NAME</span><span class="s11">)</span>, where <span class="s16">NAME </span>is the lowercase version of the operator, and <span class="s16">KEYWORD </span>is its type, e.g. <span class="s11">FORWORD</span>, <span class="s11">IFWORD</span>, <span class="s11">RECORDWORD</span>, etc.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">KEYWORD </span>can also be the name of a function. When the atom appears as <span class="s11">CAR </span>of a form, the function is applied to the form and the result taken as the correct form. In this case, the function should either physically change the form, or call <span class="s11">CLISPTRAN </span>to store the translation.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">As an example, to make <span class="s11">&amp; </span>be an infix character operator meaning <span class="s11">OR</span>, you could do the following:</p><p class="s19" style="padding-top: 3pt;padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(PUTPROP ’&amp; ’CLISPTYPE (GETPROP ’OR ’CLISPTYPE))</span></p><p class="s19" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s11">(PUTPROP ’&amp; ’LISPFN ’OR)</span></p><p class="s19" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s11">(PUTPROP ’&amp; ’BROADSCOPE T)</span></p><p class="s19" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s11">(PUTPROP ’OR ’CLISPINFIX ’&amp;)</span></p><p class="s19" style="padding-left: 197pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s11">(SETQ CLISPCHARS (CONS ’&amp; CLISPCHARS))</span></p><p class="s19" style="padding-left: 197pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(SETQ CLISPCHARRAY (MAKEBITTABLE CLISPCHARS))</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-left: 29pt;text-indent: -23pt;text-align: left;"><a name="bookmark22">PERFORMANCE ISSUES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="605" height="3" alt="image" src="Image_055.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This chapter describes a number of areas that often contribute to performance problems in Medley programs. Many performance problems can be improved by optimizing the use of storage, since allocating and reclaiming large amounts of storage is expensive. Another tactic that can sometimes yield performance improvements is to change the use of variable bindings on the stack to reduce variable lookup time. There are a number of tools that can be used to determine which parts of a computation cause performance bottlenecks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Storage Allocation and Garbage Collection                                                                                           </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">As an Medley application program runs, it creates data structures (allocated out of free storage space), manipulates them, and then discards them. If there were no way to reclaim this space, over time the Medley memory would fill up, and the computation would come to a halt. Actually, long before this could happen the system would probably become intolerably slow, due to “data fragmentation,” which occurs when the data currently in use are spread over many virtual memory pages, so that most of the computer time must be spent swapping disk pages into physical memory. The problem of fragmentation will occur in any situation where the virtual memory is significantly larger than the real physical memory. To reduce swapping, you want to keep the &quot;working set&quot; (the set of pages containing actively referenced data) as small as possible.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You can write programs that don’t generate much “garbage” data, or which recycle data, but such programs tend to be complex and hard to debug. Spending effort writing such programs defeats the whole point of using a system with automatic storage allocation. An important part of any Lisp implementation is the “garbage collector” that finds discarded data and reclaims its space.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are several well-known approaches to garbage collection. One method is the traditional mark- and-sweep, which identifies “garbage” data by marking all accessible data structures, and then sweeping through the data spaces to find all unmarked objects (i.e., not referenced by any other object). This method is guaranteed to reclaim all garbage, but it takes time proportional to the number of allocated objects, which may be very large. Also, the time that a mark-and-sweep garbage collection takes is independent of the amount of garbage collected; it is possible to sweep through the whole virtual memory, and only recover a small amount of garbage.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For interactive applications, it is not acceptable to have long interruptions in a computation for to garbage collect. Medley solves this problem by using a reference-counting garbage collector. With this scheme, there is a table containing counts of how many times each object is referenced. This table is updated as pointers are created and discarded, incurring a small overhead distributed over the computation as a whole. (Note: References from the stack are not counted, but are handled separately at &quot;sweep&quot; time; thus the vast majority of data manipulations do not cause updates to this table.) At opportune moments, the garbage collector scans this table, and reclaims all objects that are no longer accessible (have a reference count of zero). The pause while objects are reclaimed is only the time for scanning the reference count tables (small) plus time proportional to the amount of garbage that has to</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">be collected (typically less than a second). “Opportune” times occur when a certain number of cells have been allocated or when the system has been waiting for you to type something for long enough. The frequency of garbage collection is controlled by the functions and variables described below. For the best system performance, it is desirable to adjust these parameters for frequent, short garbage collections, which will not interrupt interactive applications for very long, and which will have the added benefit of reducing data fragmentation, keeping the working set small.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">One problem with the Medley garbage collector is that not all garbage is guaranteed to be collected. Circular data structures, which point to themselves directly or indirectly, are never reclaimed, since their reference counts are always at least one. With time, this unreclaimable garbage may increase the working set to unacceptable levels. Some users have worked with the same Medley virtual memory for a very long time, but it is a good idea to occasionally save all of your functions in files, reinitialize Medley, and rebuild your system. Many users end their working day by issuing a command to rebuild their system and then leaving the machine to perform this task in their absence. If the system seems to be spending too much time swapping (an indication of fragmented working set), this procedure is definitely recommended.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Another limitation of the reference-counting garbage collector is that the table in which reference counts are maintained is of fixed size. For typical Lisp objects that are pointed to from exactly one place (e.g., the individual conses in a list), no burden is placed on this table, since objects whose reference count is 1 are not explicitly represented in the table. However, large, &quot;rich&quot; data structures, with many interconnections, backward links, cross references, etc, can contribute many entries to the reference count table. For example, if you created a data structure that functioned as a doubly-linked list, such a structure would contribute an entry (reference count 2) for each element.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When the reference count table fills up, the garbage collector can no longer maintain consistent reference counts, so it stops doing so altogether. At this point, a window appears on the screen with the following message, and the debugger is entered:</p><p class="s11" style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Internal garbage collector tables have overflowed, due</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">to too many pointers with reference count greater than 1.</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 108%;text-align: left;">*** The garbage collector is now disabled. *** Save your work and reload as soon as possible.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">[This message is slightly misleading, in that it should say &quot;count not equal to 1&quot;. In the current implementation, the garbage collection of a large pointer array whose elements are not otherwise pointed to can place a special burden on the table, as each element’s reference count simultaneously drops to zero and is thus added to the reference count table for the short period before the element is itself reclaimed.]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If you exit the debugger window (e.g., with the RETURN command), your computation can proceed; however, the garbage collector is no longer operating. Thus, your virtual memory will become cluttered with objects no longer accessible, and if you continue for long enough in the same virtual memory image you will eventually fill up the virtual memory backing store and grind to a halt.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PERFORMANCE ISSUES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Garbage collection in Medley is controlled by the following functions and variables:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>RECLAIM</b>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Initiates a garbage collection. Returns 0.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>RECLAIMMIN </b><i>N</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Sets the frequency of garbage collection. Interlisp keeps track of the number of cells of any type that have been allocated; when it reaches a given number, a garbage collection occurs.  If <span class="s16">N </span>is non-<span class="s11">NIL</span>, this number is set to <span class="s16">N</span>.  Returns the current setting of the number.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">RECLAIMWAIT <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Medley will invoke a <span class="s11">RECLAIM </span>if the system is idle and waiting for your input for</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">RECLAIMWAIT <span class="p">seconds (currently set for 4 seconds).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>GCGAG </b><i>MESSAGE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Sets the behavior that occurs while a garbage collection is taking place. If <span class="s16">MESSAGE </span>is non-<span class="s11">NIL</span>, the cursor is complemented during a <span class="s11">RECLAIM</span>; if <span class="s16">MESSAGE </span><span class="s11">= NIL</span>, nothing happens. The value of <span class="s11">GCGAG </span>is its previous setting.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>GCTRP</b>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns the number of cells until the next garbage collection, according to the</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">RECLAIMMIN <span class="p">number.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">The amount of storage allocated to different data types, how much of that storage is in use, and the amount of data fragmentation can be determined using the following function:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>STORAGE </b><i>TYPES PAGETHRESHOLD</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">STORAGE </span>prints out a summary, for each data type, of the amount of space allocated to the data type, and how much of that space is currently in use. If <span class="s16">TYPES </span>is non-<span class="s11">NIL</span>, <span class="s11">STORAGE </span>only lists statistics for the specified types. <span class="s16">TYPES </span>can be a symbol or a list of types. If <span class="s16">PAGETHRESHOLD </span>is non-<span class="s11">NIL</span>, then <span class="s11">STORAGE </span>only lists statistics for types that have at least <span class="s16">PAGETHRESHOLD </span>pages allocated to them.</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">STORAGE <span class="p">prints out a table with the column headings </span>Type, Assigned, Free Items, In use, <span class="p">and </span>Total alloc. Type <span class="p">is the name of the data type. </span>Assigned <span class="p">is how much of your virtual memory is set aside for items of this type. Currently, memory is allocated in quanta of two pages (1024 bytes). The numbers under </span>Assigned <span class="p">show the number of pages and the total number of items that fit on those pages. </span>Free Items <span class="p">shows how many items are available to be allocated (using the </span>create <span class="p">construct, Chapter 8); these constitute the &quot;free list&quot; for that data type. </span>In use <span class="p">shows how many items of this type are currently in use, i.e., have pointers to them and hence have not been garbage collected. If this number is higher than your program seems to warrant, you may want to look for storage leaks. The sum of </span>Free Items <span class="p">and </span>In use <span class="p">is always the same</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">as the total <span class="s11">Assigned </span>items. <span class="s11">Total alloc </span>is the total number of items of this type that have ever been allocated (see <span class="s11">BOXCOUNT</span>, in the Performance Measuring section below).</p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: -30pt;line-height: 93%;text-align: justify;">Note: The information about the number of items of type <span class="s11">LISTP </span>is only approximate, because list cells are allocated in a special way that precludes easy computation of the number of items per page.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -30pt;line-height: 91%;text-align: justify;">Note: When a data type is redeclared, the data type name is reassigned. Pages which were assigned to instances of the old data type are labeled <span class="s11">**DEALLOC**</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">At the end of the table printout, <span class="s11">STORAGE </span>prints a &quot;Data Spaces Summary&quot; listing the number of pages allocated to the major data areas in the virtual address space: the space for fixed-length items (including datatypes), the space for variable-length items, and the space for symbols. Variable-length data types such as arrays have fixed-length &quot;headers,&quot; which is why they also appear in the printout of fixed-length data types. Thus, the line printed for the <span class="s11">BITMAP </span>data type says how many bitmaps have been allocated, but the &quot;assigned pages&quot; column counts only the headers, not the space used by the variable- length part of the bitmap. This summary also lists &quot;Remaining Pages&quot; in relation to the largest possible virtual memory, not the size of the virtual memory backing file in use. This file may fill up, causing a <span class="s11">STORAGE FULL </span>error, long before the &quot;Remaining Pages&quot; numbers reach zero.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">STORAGE <span class="p">also prints out information about the sizes of the entries on the variable-length data free list. The block sizes are broken down by the value of the variable </span>STORAGE.ARRAYSIZES<span class="p">, initially </span>(4 16 64 256 1024 4096 16384 NIL)<span class="p">, which</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">yields a printout of the form:</p><p class="s11" style="padding-top: 7pt;padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">variable-datum free list:</p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">le 4 26 items; 104 cells.</p><table style="border-collapse:collapse;margin-left:177.501pt" cellspacing="0"><tr style="height:10pt"><td style="width:54pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">le 16</p></td><td style="width:21pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">72</p></td><td style="width:41pt"><p class="s26" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">items;</p></td><td style="width:35pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">783</p></td><td style="width:38pt"><p class="s26" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">cells.</p></td></tr><tr style="height:9pt"><td style="width:54pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">le 64</p></td><td style="width:21pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">36</p></td><td style="width:41pt"><p class="s26" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">items;</p></td><td style="width:35pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">964</p></td><td style="width:38pt"><p class="s26" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">cells.</p></td></tr><tr style="height:9pt"><td style="width:54pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">le 256</p></td><td style="width:21pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">28</p></td><td style="width:41pt"><p class="s26" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">items;</p></td><td style="width:35pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">3155</p></td><td style="width:38pt"><p class="s26" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">cells.</p></td></tr><tr style="height:9pt"><td style="width:54pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">le 1024</p></td><td style="width:21pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">3</p></td><td style="width:41pt"><p class="s26" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">items;</p></td><td style="width:35pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">1175</p></td><td style="width:38pt"><p class="s26" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">cells.</p></td></tr><tr style="height:9pt"><td style="width:54pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">le 4096</p></td><td style="width:21pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">5</p></td><td style="width:41pt"><p class="s26" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">items;</p></td><td style="width:35pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">8303</p></td><td style="width:38pt"><p class="s26" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">cells.</p></td></tr><tr style="height:9pt"><td style="width:54pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">le 16384</p></td><td style="width:21pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">3</p></td><td style="width:41pt"><p class="s26" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">items;</p></td><td style="width:35pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">17067</p></td><td style="width:38pt"><p class="s26" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">cells.</p></td></tr><tr style="height:10pt"><td style="width:54pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">others</p></td><td style="width:21pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">1</p></td><td style="width:41pt"><p class="s26" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">items;</p></td><td style="width:35pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">17559</p></td><td style="width:38pt"><p class="s26" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">cells.</p></td></tr></table><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">This information can be useful in determining if the variable-length data space is fragmented. If most of the free space is composed of small items, then the allocator may not be able to find room for large items, and will extend the variable datum space. If this is extended too much, this could cause an <span class="s11">ARRAYS FULL </span>error, even if there is a lot of space left in little chunks.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>STORAGE.LEFT</b>)                                                 <span class="p">[Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">Provides a programmatic way of determining how much storage is left in the major data areas in the virtual address space. Returns a list of the form </span>(<i>MDSFREE MDSFRAC 8MBFRAC ATOMFREE ATOMFRAC</i>)<span class="p">, where the elements are interpreted as follows:</span></p><p class="s42" style="padding-top: 7pt;padding-left: 240pt;text-indent: -49pt;line-height: 93%;text-align: justify;">MDSFREE <span class="p">The number of free pages left in the main data space (which includes both fixed-length and variable-length data types).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PERFORMANCE ISSUES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s42" style="padding-left: 191pt;text-indent: -49pt;text-align: left;">MDSFRAC <span class="p">The fraction of the total possible main data space that is free.</span></p><p class="s42" style="padding-top: 6pt;padding-left: 191pt;text-indent: -49pt;text-align: left;">8MBFRAC <span class="p">The fraction of the total main data space that is free, relative to eight megabytes.</span></p><p style="padding-top: 6pt;padding-left: 191pt;text-indent: 0pt;line-height: 92%;text-align: justify;">This number is useful when using Medley on some early computers where the hardware limits the address space to eight megabytes. The function <span class="s11">32MBADDRESSABLE </span>returns non-<span class="s11">NIL </span>if the currently running Medley system can use the full 32 megabyte address space.</p><p class="s42" style="padding-top: 5pt;padding-left: 136pt;text-indent: 0pt;text-align: justify;">ATOMFREE <span class="p">The number of free pages left in the symbol space.</span></p><p class="s42" style="padding-top: 6pt;padding-left: 136pt;text-indent: 0pt;text-align: justify;">ATOMFRAC <span class="p">The fraction of the total symbol space that is free.</span></p><p style="padding-top: 7pt;padding-left: 89pt;text-indent: -30pt;line-height: 93%;text-align: justify;">Note: Another important space resource is the amount of the virtual memory backing file in use (see <span class="s11">VMEMSIZE</span>, Chapter 12). The system will crash if the virtual memory file is full, even if the address space is not exhausted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Variable Bindings                                                                                                                                      </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Different implementations of Lisp use different methods of accessing free variables. The binding of variables occurs when a function or a <span class="s11">PROG </span>is entered. For example, if the function <span class="s11">FOO </span>has the definition <span class="s11">(LAMBDA (A B) </span><span class="s16">BODY</span><span class="s11">)</span>, the variables <span class="s11">A </span>and <span class="s11">B </span>are bound so that any reference to <span class="s11">A </span>or <span class="s11">B </span>from <span class="s16">BODY </span>or any function called from <span class="s16">BODY </span>will refer to the arguments to the function <span class="s11">FOO </span>and not to the value of <span class="s11">A </span>or <span class="s11">B </span>from a higher level function. All variable names (symbols) have a top level value cell which is used if the variable has not been bound in any function. In discussions of variable access, it is useful to distinguish between three types of variable access: local, special and global. Local variable access is the use of a variable that is bound within the function from which it is used. Special variable access is the use of a variable that is bound by another function. Global variable access is the use of a variable that has not been bound in any function. We will often refer to a variable all of whose accesses are local as a &quot;local variable.&quot; Similarly, a variable all of whose accesses are global we call a &quot;global variable.&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In a “deep” bound system, a variable is bound by saving on the stack the variable’s name together with a value cell which contains that variable’s new value. When a variable is accessed, its value is found by searching the stack for the most recent binding (occurrence) and retrieving the value stored there. If the variable is not found on the stack, the variable’s top level value cell is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In a “shallow” bound system, a variable is bound by saving on the stack the variable name and the variable’s old value and putting the new value in the variable’s top level value cell. When a variable is accessed, its value is always found in its top level value cell.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The deep binding scheme has one disadvantage: the amount of cpu time required to fetch the value of a variable depends on the stack distance between its use and its binding. The compiler can determine</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">local variable accesses and compiles them as fetches directly from the stack. Thus this computation cost only arises in the use of variable not bound in the local frame (&quot;free&quot; variables). The process of finding the value of a free variable is called free variable lookup.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In a shallow bound system, the amount of cpu time required to fetch the value of a variable is constant regardless of whether the variable is local, special or global. The disadvantages of this scheme are that the actual binding of a variable takes longer (thus slowing down function call), the cells that contain the current in use values are spread throughout the space of all symbol value cells (thus increasing the working set size of functions) and context switching between processes requires unwinding and rewinding the stack (thus effectively prohibiting the use of context switching for many applications).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley uses deep binding, because of the working set considerations and the speed of context switching. The free variable lookup routine is microcoded, thus greatly reducing the search time. In benchmarks, the largest percentage of free variable lookup time was 20 percent of the total ellapsed time; the normal time was between 5 and 10 percent.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Because of the deep binding, you can sometimes significantly improve performance by declaring global variables. If a variable is declared global, the compiler will compile an access to that variable as a retrieval of its top level value, completely bypassing a stack search. This should be done only for variables that are never bound in functions, such as global databases and flags.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">Global variable declarations should be done using the </span>GLOBALVARS <span class="p">file manager command (Chapter 17). Its form is </span>(GLOBALVARS <i>VAR</i><i>1 </i>... <i>VAR</i><i>N</i>)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Another way of improving performance is to declare variables as local within a function. Normally, all variables bound within a function have their names put on the stack, and these names are scanned during free variable lookup. If a variable is declared to be local within a function, its name is not put on the stack, so it is not scanned during free variable lookup, which may increase the speed of lookups. The compiler can also make some other optimizations if a variable is known to be local to a function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">A variable may be declared as local within a function by including the form </span>(DECLARE (LOCALVARS <i>VAR</i><i>1 </i>... <i>VAR</i><i>N</i>)) <span class="p">following the argument list in the definition of the function. Local variable declarations only effect the compilation of a function. Interpreted functions put all of their variable names on the stack, regardless of any declarations.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Performance Measuring                                                                                                                           </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This section describes functions that gather and display statistics about a computation, such as as the elapsed time, and the number of data objects of different types allocated. <span class="s11">TIMEALL </span>and <span class="s11">TIME </span>gather statistics on the evaluation of a specified form. <span class="s11">BREAKDOWN </span>gathers statistics on individual functions called during a computation. These functions can be used to determine which parts of a computation are consuming the most resources (time, storage, etc.), and could most profitably be improved.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PERFORMANCE ISSUES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>TIMEALL </b><i>TIMEFORM NUMBEROFTIMES TIMEWHAT INTERPFLG</i>) <span class="p">[NLambda Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Evaluates the form <span class="s16">TIMEFORM </span>and prints statistics on time spent in various categories (elapsed, keyboard wait, swapping time, gc) and data type allocation.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For more accurate measurement on small computations, <span class="s16">NUMBEROFTIMES </span>may be specified (its default is 1) to cause <span class="s16">TIMEFORM </span>to be executed <span class="s16">NUMBEROFTIMES </span>times. To improve the accuracy of timing open-coded operations in this case, <span class="s11">TIMEALL </span>compiles a form to execute <span class="s16">TIMEFORM NUMBEROFTIMES </span>times (unless <span class="s16">INTERPFLG </span>is non-<span class="s11">NIL</span>), and then times the execution of the compiled form.</p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -30pt;line-height: 94%;text-align: justify;">Note: If <span class="s11">TIMEALL </span>is called with <span class="s16">NUMBEROFTIMES </span>&gt; 1, the dummy form is compiled with compiler optimizations on. This means that it is not meaningful to use <span class="s11">TIMEALL </span>with very simple forms that are optimized out by the compiler. For example, <span class="s11">(TIMEALL ’(IPLUS 2 3) 1000) </span>will time a compiled function which simply returns the number 5, since <span class="s11">(IPLUS 2 3) </span>is optimized to the integer 5.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">TIMEWHAT </span>restricts the statistics to specific categories. It can be an atom or list of datatypes to monitor, and / or the atom <span class="s11">TIME </span>to monitor time spent. Note that ordinarily, <span class="s11">TIMEALL </span>monitors all time and datatype usage, so this argument is rarely needed.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">TIMEALL </span>returns the value of the last evaluation of <span class="s16">TIMEFORM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>TIME </b><i>TIMEX TIMEN TIMETYP</i>) <span class="p">[NLambda Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s11">TIME </span>evaluates the form <span class="s16">TIMEX</span>, and prints out the number of <span class="s11">CONS </span>cells allocated and computation time. Garbage collection time is subtracted out. This function has been largely replaced by <span class="s11">TIMEALL</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TIMEN </span>is greater than 1, <span class="s16">TIMEX </span>is executed <span class="s16">TIMEN </span>times, and <span class="s11">TIME </span>prints out (number of conses) / <span class="s16">TIMEN</span>, and (computation time) / <span class="s16">TIMEN</span>. If <span class="s16">TIMEN </span><span class="s11">= NIL</span>, it defaults to 1. This is useful for more accurate measurement on small computations.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TIMETYP </span>is 0, <span class="s11">TIME </span>measures and prints total <i>real </i>time as well as computation time. If <span class="s16">TIMETYP </span><span class="s11">= 3</span>, <span class="s11">TIME </span>measures and prints garbage collection time as well as computation time. If <span class="s16">TIMETYP </span><span class="s11">= T</span>, <span class="s11">TIME </span>measures and prints the number of pagefaults.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">TIME </span>returns the value of the last evaluation of <span class="s16">TIMEX</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>BOXCOUNT </b><i>TYPE N</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the number of data objects of type <span class="s16">TYPE </span>allocated since this Interlisp system was created. <span class="s16">TYPE </span>can be any data type name (see <span class="s11">TYPENAME</span>, Chapter 8). If <span class="s16">TYPE </span>is <span class="s11">NIL</span>, it defaults to <span class="s11">FIXP</span>. If <span class="s16">N </span>is non-<span class="s11">NIL</span>, the corresponding counter is reset to <span class="s16">N</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>CONSCOUNT </b><i>N</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the number of <span class="s11">CONS </span>cells allocated since this Interlisp system was created. If <span class="s16">N </span>is non-<span class="s11">NIL</span>, resets the counter to <span class="s16">N</span>. Equivalent to <span class="s11">(BOXCOUNT ’LISTP </span><span class="s16">N</span><span class="s11">)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PAGEFAULTS</b>)                                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Returns the number of page faults since this Interlisp system was created.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">BREAKDOWN                                                                                                                                            </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">TIMEALL <span class="p">collects statistics for whole computations. </span>BREAKDOWN <span class="p">is available to analyze the breakdown of computation time (or any other measureable quantity) function by function.</span></p><p class="s16" style="padding-top: 10pt;padding-left: 125pt;text-indent: -24pt;text-align: left;"><span class="s11">(</span><b>BREAKDOWN </b>FN<span class="s32">1 </span>... FN<span class="s32">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">You call <span class="s11">BREAKDOWN </span>giving it a list of function names (unevaluated). These functions are modified so that they keep track of various statistics.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">To remove functions from those being monitored, simply <span class="s11">UNBREAK </span>(Chapter 15) the functions, thereby restoring them to their original state. To add functions, call <span class="s11">BREAKDOWN </span>on the new functions. This will not reset the counters for any functions not on the new list. However <span class="s11">(BREAKDOWN) </span>will zero the counters of all functions being monitored.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The procedure used for measuring is such that if one function calls other and both are &quot;broken down&quot;, then the time (or whatever quantity is being measured) spent in the inner function is <i>not </i>charged to the outer function as well.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">BREAKDOWN </span>will <i>not </i>give accurate results if a function being measured is not returned from normally, e.g., a lower <span class="s11">RETFROM </span>(or <span class="s11">ERROR</span>) bypasses it. In this case, all of the time (or whatever quantity is being measured) between the time that function is entered and the time the next function being measured is entered will be charged to the first function.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>BRKDWNRESULTS </b><i>RETURNVALUESFLG</i>)                                <span class="p">[Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">BRKDWNRESULTS <span class="p">prints the analysis of the statistics requested as well as the number of calls to each function. If </span><i>RETURNVALUESFLG </i><span class="p">is non-</span>NIL<span class="p">, </span>BRKDWNRESULTS <span class="p">will not to print the results, but instead return them in the form of a list of elements of the form </span>(<i>FNNAME #CALLS VALUE</i>)<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Example:</p><p class="s19" style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s21"> </span><span class="s11">(BREAKDOWN SUPERPRINT SUBPRINT COMMENT1) (SUPERPRINT SUBPRINT COMMENT1)</span></p><p class="s19" style="padding-left: 180pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s11">(PRETTYDEF ’(SUPERPRINT) ’FOO)</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FOO.;3</p><p class="s19" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(BRKDWNRESULTS)</span></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:10pt"><td style="width:59pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">SUPERPRINT</p></td><td style="width:46pt"><p class="s26" style="padding-right: 10pt;text-indent: 0pt;line-height: 9pt;text-align: right;">8.261</p></td><td style="width:89pt"><p class="s26" style="padding-right: 13pt;text-indent: 0pt;line-height: 9pt;text-align: right;">365 0.023</p></td><td style="width:27pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">20</p></td></tr><tr style="height:9pt"><td style="width:59pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">SUBPRINT</p></td><td style="width:46pt"><p class="s26" style="padding-right: 10pt;text-indent: 0pt;line-height: 8pt;text-align: right;">31.910</p></td><td style="width:89pt"><p class="s26" style="padding-right: 13pt;text-indent: 0pt;line-height: 8pt;text-align: right;">141 0.226</p></td><td style="width:27pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">76</p></td></tr><tr style="height:9pt"><td style="width:59pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">COMMENT1</p></td><td style="width:46pt"><p class="s26" style="padding-right: 10pt;text-indent: 0pt;line-height: 8pt;text-align: right;">1.612</p></td><td style="width:89pt"><p class="s26" style="padding-right: 13pt;text-indent: 0pt;line-height: 8pt;text-align: right;">8 0.201</p></td><td style="width:27pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">4</p></td></tr><tr style="height:9pt"><td style="width:59pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">TOTAL</p></td><td style="width:46pt"><p class="s26" style="padding-right: 10pt;text-indent: 0pt;line-height: 8pt;text-align: right;">41.783</p></td><td style="width:89pt"><p class="s26" style="padding-right: 13pt;text-indent: 0pt;line-height: 8pt;text-align: right;">514 0.081</p></td><td style="width:27pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:10pt"><td style="width:59pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">NIL</p></td><td style="width:46pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:89pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:27pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">FUNCTIONS TIME #CALLS PER CALL %</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 8pt;padding-left: 180pt;text-indent: 0pt;text-align: left;"><span class="s11">(BRKDWNRESULTS T)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PERFORMANCE ISSUES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((SUPERPRINT 365 8261) (SUBPRINT 141 31910)</p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(COMMENT1 8 1612))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">BREAKDOWN <span class="p">can be used to measure other statistics, by setting the following variables:</span></p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">BRKDWNTYPE <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">To use <span class="s11">BREAKDOWN </span>to measure other statistics, before calling <span class="s11">BREAKDOWN</span>, set the variable <span class="s11">BRKDWNTYPE </span>to the quantity of interest, e.g., <span class="s11">TIME</span>, <span class="s11">CONSES</span>, etc, or a list of such quantities. Whenever <span class="s11">BREAKDOWN </span>is called with <span class="s11">BRKDWNTYPE </span>not <span class="s11">NIL</span>, <span class="s11">BREAKDOWN </span>performs the necessary changes to its internal state to conform to the new analysis. In particular, if this is the first time an analysis is being run with a particular statistic, a measuring function will be defined, and the compiler will be called to compile it. The functions being broken down will be redefined to call this measuring function. When <span class="s11">BREAKDOWN </span>is through initializing, it sets <span class="s11">BRKDWNTYPE </span>back to <span class="s11">NIL</span>. Subsequent calls to <span class="s11">BREAKDOWN </span>will measure the new statistic until <span class="s11">BRKDWNTYPE </span>is again set and a new <span class="s11">BREAKDOWN </span>performed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">BRKDWNTYPES <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The list <span class="s11">BRKDWNTYPES </span>contains the information used to analyze new statistics. Each entry on <span class="s11">BRKDWNTYPES </span>should be of the form <span class="s11">(</span><span class="s16">TYPE FORM FUNCTION</span><span class="s11">)</span>, where <span class="s16">TYPE </span>is a statistic name (as would appear in <span class="s11">BRKDWNTYPE</span>), <span class="s16">FORM </span>computes the statistic, and <span class="s16">FUNCTION </span>(optional) converts the value of form to some more interesting quantity. For example, <span class="s11">(TIME (CLOCK 2) (LAMBDA (X) (FQUOTIENT X 1000))) </span>measures</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">computation time and reports the result in seconds instead of milliseconds. <span class="s11">BRKDWNTYPES </span>currently contains entries for <span class="s11">TIME</span>, <span class="s11">CONSES</span>, <span class="s11">PAGEFAULTS</span>, <span class="s11">BOXES</span>, and <span class="s11">FBOXES</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Example:</p><p class="s19" style="padding-top: 6pt;padding-left: 132pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">(SETQ BRKDWNTYPE ’(TIME CONSES)) (TIME CONSES)</span></p><p class="s19" style="padding-left: 132pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s11">(BREAKDOWN MATCH CONSTRUCT)</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(MATCH CONSTRUCT)</p><p class="s19" style="padding-left: 132pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s11">(FLIP ’(A B C D E F G H C Z) ’(.. $1 .. #2 ..) ’(.. #3 ..))</span></p><p class="s11" style="padding-left: 132pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(A B D E F G H Z)</p><p class="s19" style="padding-left: 132pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s11">(BRKDWNRESULTS)</span></p><table style="border-collapse:collapse;margin-left:129.502pt" cellspacing="0"><tr style="height:10pt"><td style="width:57pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FUNCTIONS</p></td><td style="width:43pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">TIME</p></td><td style="width:43pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">#CALLS</p></td><td style="width:54pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">PER CALL</p></td><td style="width:19pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">%</p></td></tr><tr style="height:9pt"><td style="width:57pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">MATCH</p></td><td style="width:43pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">0.036</p></td><td style="width:43pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;line-height: 7pt;text-align: left;">1</p></td><td style="width:54pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;line-height: 7pt;text-align: left;">0.036</p></td><td style="width:19pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 7pt;text-align: right;">54</p></td></tr><tr style="height:10pt"><td style="width:57pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">CONSTRUCT</p></td><td style="width:43pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">0.031</p></td><td style="width:43pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;line-height: 8pt;text-align: left;">1</p></td><td style="width:54pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;line-height: 8pt;text-align: left;">0.031</p></td><td style="width:19pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">46</p></td></tr><tr style="height:8pt"><td style="width:57pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">TOTAL</p></td><td style="width:43pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">0.067</p></td><td style="width:43pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;line-height: 6pt;text-align: left;">2</p></td><td style="width:54pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;line-height: 6pt;text-align: left;">0.033</p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:10pt"><td style="width:57pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FUNCTIONS</p></td><td style="width:43pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">CONSES</p></td><td style="width:43pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">#CALLS</p></td><td style="width:54pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">PER CALL</p></td><td style="width:19pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">%</p></td></tr><tr style="height:9pt"><td style="width:57pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">MATCH</p></td><td style="width:43pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">32</p></td><td style="width:43pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;line-height: 7pt;text-align: left;">1</p></td><td style="width:54pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">32.000</p></td><td style="width:19pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 7pt;text-align: right;">40</p></td></tr><tr style="height:9pt"><td style="width:57pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">CONSTRUCT</p></td><td style="width:43pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">49</p></td><td style="width:43pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;line-height: 7pt;text-align: left;">1</p></td><td style="width:54pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">49.000</p></td><td style="width:19pt"><p class="s26" style="padding-right: 2pt;text-indent: 0pt;line-height: 7pt;text-align: right;">60</p></td></tr><tr style="height:9pt"><td style="width:57pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">TOTAL</p></td><td style="width:43pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">81</p></td><td style="width:43pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;line-height: 7pt;text-align: left;">2</p></td><td style="width:54pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">40.500</p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:10pt"><td style="width:57pt"><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">NIL</p></td><td style="width:43pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:43pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:54pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="padding-top: 3pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Occasionally, a function being analyzed is sufficiently fast that the overhead involved in measuring it obscures the actual time spent in the function. If you were using <span class="s11">TIME</span>, you would specify a value for <span class="s16">TIMEN </span>greater than 1 to give greater accuracy. A similar option is available for <span class="s11">BREAKDOWN</span>. You can specify that a function(s) be executed a multiple</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">number of times for each measurement, and the average value reported, by including a number in the list of functions given to <span class="s11">BREAKDOWN</span>. For example, <span class="s11">BREAKDOWN(EDITCOM EDIT4F 10 EDIT4E EQP) </span>means normal breakdown for <span class="s11">EDITCOM </span>and <span class="s11">EDIT4F </span>but executes (the body of) <span class="s11">EDIT4E </span>and <span class="s11">EQP </span>10 times each time they are called. Of course, the functions so measured must not cause any harmful side effects, since they are executed more than once for each call. The printout from <span class="s11">BRKDWNRESULTS </span>will look the same as though each function were run only once, except that the measurement will be more accurate.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Another way of obtaining more accurate measurement is to expand the call to the measuring function in-line. If the value of <span class="s11">BRKDWNCOMPFLG </span>is non-<span class="s11">NIL </span>(initially <span class="s11">NIL</span>), then whenever a function is broken-down, it will be redefined to call the measuring function, and then recompiled. The measuring function is expanded in-line via an appropriate macro. In addition, whenever <span class="s11">BRKDWNTYPE </span>is reset, the compiler is called for <i>all </i>functions for which <span class="s11">BRKDWNCOMPFLG </span>was set at the time they were originally broken- down, i.e. the setting of the flag at the time a function is broken-down determines whether the call to the measuring code is compiled in-line.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">GAINSPACE                                                                                                                                               </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If you have large programs and databases, you may sometimes find yourself in a situation where you need to obtain more space, and are willing to pay the price of eliminating some or all of the context information that the various user-assistance facilities such as the programmer’s assistant, file package, CLISP, etc., have accumulated during the course of his session. The function <span class="s11">GAINSPACE </span>provides an easy way to selectively throw away accumulated data:</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>GAINSPACE</b>)                                                    <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: left;">Prints a list of deletable objects, allowing you to specify at each point what should be discarded and what should be retained.  For example:</p><p class="s19" style="padding-top: 5pt;padding-left: 180pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s11">(GAINSPACE)</span></p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 9pt;text-align: left;">purge history lists ? Yes</p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 88%;text-align: left;">purge everything, or just the properties, e.g., SIDE, LISPXPRINT, etc. ?</p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 9pt;text-align: left;">just the properties</p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 88%;text-align: left;">discard definitions on property lists ? Yes discard old values of variables ? Yes</p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 9pt;text-align: left;">erase properties ? No</p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">erase CLISP translations? Yes</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">GAINSPACE </span>is driven by the list <span class="s11">GAINSPACEFORMS</span>. Each element on <span class="s11">GAINSPACEFORMS </span>is of the form <span class="s11">(</span><span class="s16">PRECHECK MESSAGE FORM KEYLST</span><span class="s11">)</span>. If <span class="s16">PRECHECK</span>, when evaluated, returns <span class="s11">NIL</span>, <span class="s11">GAINSPACE </span>skips to the next entry. For example, you will not be asked whether or not to purge the history list if it is not enabled. Otherwise, <span class="s11">ASKUSER </span>(Chapter 26) is called with the indicated <span class="s16">MESSAGE </span>and the (optional) <span class="s16">KEYLST</span>. If you respond <span class="s11">No</span>, i.e., <span class="s11">ASKUSER </span>returns <span class="s11">N</span>, <span class="s11">GAINSPACE </span>skips to the next entry. Otherwise, <span class="s16">FORM </span>is evaluated with the variable <span class="s11">RESPONSE </span>bound to the value of <span class="s11">ASKUSER</span>. In the above example, the <span class="s16">FORM </span>for the &quot;<span class="s11">purge history lists</span>&quot; question calls <span class="s11">ASKUSER </span>to ask</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PERFORMANCE ISSUES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&quot;<span class="s11">purge everything, ...</span>&quot; only if you had responded <span class="s11">Yes</span>. If you had responded with</p><p class="s11" style="padding-left: 29pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Everything<span class="p">, the second question would not have been asked.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The &quot;<span class="s11">erase properties</span>&quot; question is driven by a list <span class="s11">SMASHPROPSMENU</span>. Each element on this list is of the form <span class="s11">(</span><span class="s16">MESSAGE </span><span class="s11">. </span><span class="s16">PROPS</span><span class="s11">)</span>. You are prompted with <span class="s16">MESSAGE </span>(by <span class="s11">ASKUSER</span>), and if your response is <span class="s11">Yes</span>, <span class="s16">PROPS </span>is added to the list <span class="s11">SMASHPROPS</span>. The &quot;<span class="s11">discard definitions on property lists</span>&quot; and &quot;<span class="s11">discard old values of variables</span>&quot; questions also add to <span class="s11">SMASHPROPS</span>. You will not be prompted for any entry on <span class="s11">SMASHPROPSMENU </span>for which all of the corresponding properties are already on <span class="s11">SMASHPROPS</span>. <span class="s11">SMASHPROPS </span>is initially set to the value of <span class="s11">SMASHPROPSLST</span>. This permits you to specify in advance those properties which you always want discarded, and not be asked about them subsequently. After finishing all the entries on <span class="s11">GAINSPACEFORMS</span>, <span class="s11">GAINSPACE </span>checks to see if the value of <span class="s11">SMASHPROPS </span>is non-<span class="s11">NIL</span>, and if so, does a <span class="s11">MAPATOMS</span>, i.e., looks at every atom in the system, and erases the indicated properties.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">You can change or add new entries to <span class="s11">GAINSPACEFORMS </span>or <span class="s11">SMASHPROPSMENU</span>, so that <span class="s11">GAINSPACE</span></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">can also be used to purge structures that your programs have accumulated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Using Data Types Instead of Records                                                                                                     </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If a program uses large numbers of large data structures, there are several advantages to representing them as user data types rather than as list structures. The primary advantage is increased speed: accessing and setting the fields of a data type can be significantly faster than walking through a list with repeated <span class="s11">CAR</span>s and <span class="s11">CDR</span>s.  Also,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Compiled code for referencing data types is usually smaller. Finally, by reducing the number of objects created (one object against many list cells), this can reduce the expense of garbage collection.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">User data types are declared by using the <span class="s11">DATATYPE </span>record type (Chapter 8). If a list structure has been defined using the <span class="s11">RECORD </span>record type (Chapter 8), and all accessing operations are written using the record package’s <span class="s11">fetch</span>, <span class="s11">replace</span>, and <span class="s11">create </span>operations, changing from <span class="s11">RECORD</span>s to <span class="s11">DATATYPE</span>s only requires editing the record declaration (using <span class="s11">EDITREC</span>, Chapter 8) to replace declaration type <span class="s11">RECORD </span>by <span class="s11">DATATYPE</span>, and recompiling.</p><p style="padding-top: 7pt;padding-left: 89pt;text-indent: -30pt;line-height: 91%;text-align: justify;">Note: There are some minor disadvantages: First, there is an upper limit on the number of data types that can exist. Also, space for data types is allocated two pages at a time. Each data type which has any instances allocated has at least two pages assigned to it, which may be wasteful of space if there are only a few examples of a given data type. These problems should not effect most applications programs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Using “Fast” and “Destructive” Functions                                                                                            </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Among the functions used for manipulating objects of various data types, there are a number of functions which have &quot;fast&quot; and &quot;destructive&quot; versions. You should be aware of what these functions do, and when they should be used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">“Fast” functions: By convention, a function named by prefixing an existing function name with <span class="s11">F </span>indicates that the new function is a &quot;fast&quot; version of the old. These usually have the same definitions as the slower versions, but they compile open and run without any &quot;safety&quot; error checks.  For example, <span class="s11">FNTH </span>runs faster than <span class="s11">NTH</span>, however, it does not make as many checks (for lists ending with anything but <span class="s11">NIL</span>, etc). If these functions are given arguments that are not in the form that they expect, their behavior is unpredictable; they may run forever, or cause a system error. In general, you should only use &quot;fast&quot;  functions in code that has already been completely debugged, to speed it up.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: left;">“Destructive” functions: By convention, a function named by prefixing an existing function with <span class="s11">D </span>indicates the new function is a &quot;destructive&quot; version of the old one, which does not make any new structure but cannibalizes its argument(s).  For example, <span class="s11">REMOVE </span>returns a copy of a list with a particular element removed, but <span class="s11">DREMOVE </span>actually changes the list structure of the list. (Unfortunately, not all destructive functions follow this naming convention: the destructive version of <span class="s11">APPEND </span>is <span class="s11">NCONC</span>.)  You should be careful when using destructive functions that they do not inadvertantly change data structures.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h1 style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 47pt;text-indent: -41pt;text-align: left;"><a name="bookmark23">PERFORMANCE ISSUES</a></h1></li></ol></li></ol></li></ol><p style="padding-left: 6pt;text-indent: 0pt;line-height: 6pt;text-align: left;"><span><img width="640" height="8" alt="image" src="Image_056.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">This chapter describes a number of areas that often contribute to performance problems in Interlisp-D programs. Many performance problems can be improved by optimizing</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">the use of storage, since allocating and reclaiming large amounts of storage is</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">expensive. Another tactic that can sometimes yield performance improvements is to</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">change the use of variable bindings on the stack to reduce variable lookup time. There are a number of tools that can be used to determine which parts of a computation cause performance bottlenecks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Storage Allocation and Garbage Collection                                                  </h2><p class="s5" style="padding-top: 9pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">As an Interlisp-D applications program runs, it creates data structures (allocated out of free storage space), manipulates them, and then discards them. If there were no way of reclaiming this space, over time the Interlisp-D memory (both the physical memory in</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">the machine and the virtual memory stored on the disk) would fill up, and the</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">computation would come to a halt. Actually, long before this could happen the system would probably become intolerably slow, due to &quot;data fragmentation,&quot; which occurs</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">when the data currently in use are spread over many virtual memory pages, so that most of the computer time must be spent swapping disk pages into physical memory. The problem of fragmentation will occur in any situation where the virtual memory is significantly larger than the real physical memory. To reduce swapping, it is desirable</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">to keep the &quot;working set&quot; (the set of pages containing actively referenced data) as small as possible.</p><p class="s5" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">It is possible to write programs that don’t generate much &quot;garbage&quot; data, or which</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">recycle data, but such programs tend to be overly complicated and difficult to debug. Spending effort writing such programs defeats the whole point of using a system with automatic storage allocation. An important part of any Lisp implementation is the</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">&quot;garbage collector&quot; which identifies discarded data and reclaims its space. There are several well-known approaches to garbage collection. One method is the traditional mark-and-sweep garbage collection algorithm, which identifies &quot;garbage&quot; data by</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">marking all accessible data structures, and then sweeping through the data spaces to find all unmarked objects (i.e., not referenced by any other object). Although this</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">method is guaranteed to reclaim all garbage, it takes time proportional to the number of allocated objects, which may be very large. (Some allocated objects will have been</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">marked during the &quot;mark&quot; phase, and the remainder will be collected during the</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">&quot;sweep&quot; phase; so all will have to be touched in some way.) Also, the time that a mark- and-sweep garbage collection takes is independent of the amount of garbage collected; it</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">is possible to sweep through the whole virtual memory, and only recover a small amount of garbage.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">For interactive applications, it is not acceptable to have long interruptions in a</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">computation for the purpose of garbage collection. Interlisp-D solves this problem by using a reference-counting garbage collector. With this scheme, there is a table</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">containing counts of how many times each object is referenced. This table is</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">incrementally updated as pointers are created and discarded, incurring a small</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">overhead distributed over the computation as a whole. (Note: References from the stack are not counted, but are handled separately at &quot;sweep&quot; time; thus the vast majority of</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">data manipulations do not cause updates to this table.) At opportune moments, the</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">garbage collector scans this table, and reclaims all objects that are no longer accessible (have a reference count of zero). The pause while objects are reclaimed is only the time for scanning the reference count tables (small) plus time proportional to the amount of garbage that has to be collected (typically less than a second). &quot;Opportune&quot; times occur when a certain number of cells have been allocated or when the system has been</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">waiting for the user to type something for long enough. The frequency of garbage collection is controlled by the functions and variables described below. For the best system performance, it is desirable to adjust these parameters for frequent, short</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">garbage collections, which will not interrupt interactive applications for very long, and which will have the added benefit of reducing data fragmentation, keeping the working set small.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">One problem with the Interlisp-D garbage collector is that not all garbage is guaranteed to be collected. Circular data structures, which point to themselves directly or</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">indirectly, are never reclaimed, since their reference counts are always at least one. With time, this unreclaimable garbage may increase the working set to unacceptable levels. Some users have worked with the same Interlisp-D virtual memory for a very long time, but it is a good idea to occasionally save all of your functions in files,</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">reinitialize Interlisp-D, and rebuild your system. Many users end their working day by issuing a command to rebuild their system and then leaving the machine to perform</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">this task in their absence. If the system seems to be spending too much time swapping (an indication of fragmented working set), this procedure is definitely recommended.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Garbage collection in Interlisp-D is controlled by the following functions and variables:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">(RECLAIM) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Initiates a garbage collection. Returns 0.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">(RECLAIMMIN <span class="s33">N</span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Sets the frequency of garbage collection. Interlisp keeps track of the number of cells of any type that have been allocated; when it reaches a given number, a</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: left;">garbage collection occurs. If <i>N </i>is non-<span class="s12">NIL</span>, this number is set to <i>N </i>. Returns the current setting of the number.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">RECLAIMWAIT                                                 <span class="s5">[Variable]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">Interlisp-D will invoke a <span class="s12">RECLAIM </span>if the system is idle and waiting for your input for <span class="s12">RECLAIMWAIT </span>seconds (currently set for 4 seconds).</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(GCGAG <span class="s33">MESSAGE </span>)                                           <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Sets the behavior that occurs while a garbage collection is taking place. If</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><i>MESSAGE </i>is non-<span class="s12">NIL</span>, the cursor is complemented during a <span class="s12">RECLAIM</span>; if</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><i>MESSAGE </i>=<span class="s12">NIL</span>, nothing happens. The value of <span class="s12">GCGAG </span>is its previous setting.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(GCTRP)                                                    <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Returns the number of cells until the next garbage collection, according to the</p><p class="s12" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">RECLAIMMIN <span class="s5">number.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">The amount of storage allocated to different data types, how much of that storage is in use, and the amount of data fragmentation can be determined using the following</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(STORAGE <span class="s33">TYPES PAGETHRESHOLD </span>)                            <span class="s5">[Function]</span></p><p class="s12" style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">STORAGE <span class="s5">prints out a summary, for each data type, of the amount of space</span></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">allocated to the data type, and how much of that space is currently in use. If</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;"><i>TYPES </i>is non-<span class="s12">NIL</span>, <span class="s12">STORAGE </span>only lists statistics for the specified types. <i>TYPES </i>can be a litatom or a list of types. If <i>PAGETHRESHOLD </i>is non-<span class="s12">NIL</span>, then <span class="s12">STORAGE </span>only lists statistics for types that have at least <i>PAGETHRESHOLD</i></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">pages allocated to them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;"><span class="s12">STORAGE </span>prints out a table with the column headings <b>Type </b>, <b>Assigned </b>, <b>Free</b></p><p class="s38" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">Items <span class="s5">, </span>In use <span class="s5">, and </span>Total alloc <span class="s5">. </span>Type <span class="s5">is the name of the data type. </span>Assigned</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">is how much of your virtual memory is set aside for items of this type.</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">Currently, memory is allocated in quanta of two pages (1024 bytes). The</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">numbers under <b>Assigned </b>show the number of pages and the total number of</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">items that fit on those pages. <b>Free Items </b>shows how many items are available to be allocated (using the <b>create </b>construct, Chapter 8); these constitute the</p><p class="s5" style="padding-left: 161pt;text-indent: 0pt;text-align: left;">&quot;free list&quot; for that data type. <b>In use </b>shows how many items of this type are currently in use, i.e., have pointers to them and hence have not been garbage collected. If this number is higher than your program seems to warrant, you may want to look for storage leaks. The sum of <b>Free Items </b>and <b>In use </b>is</p><p class="s5" style="padding-left: 161pt;text-indent: 0pt;text-align: left;">always the same as the total <b>Assigned </b>items. <b>Total alloc </b>is the total number of items of this type that have ever been allocated (see <span class="s12">BOXCOUNT</span>, in the</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">Performance Measuring section below).</p><p class="s5" style="padding-top: 7pt;padding-left: 198pt;text-indent: -35pt;line-height: 106%;text-align: left;">Note: The information about the number of items of type <span class="s12">LISTP </span>is only approximate, because list cells are allocated in a special way that precludes easy computation of the number of items per page.</p><p class="s5" style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Note: When a data type is redeclared, the data type name is reassigned.</p><p class="s5" style="padding-left: 198pt;text-indent: 0pt;text-align: left;">Pages which were assigned to instances of the old data type are labeled</p><p class="s38" style="padding-left: 197pt;text-indent: 0pt;text-align: left;">**DEALLOC** <span class="s5">.</span></p><p class="s5" style="padding-top: 7pt;padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: left;">At the end of the table printout, <span class="s12">STORAGE </span>prints a &quot;Data Spaces Summary&quot; listing the number of pages allocated to the major data areas in the virtual</p><p class="s5" style="padding-left: 161pt;text-indent: 0pt;text-align: left;">address space: the space for fixed-length items (including datatypes), the space for variable-length items, and the space for litatoms. Variable-length data types such as arrays have fixed-length &quot;headers,&quot; which is why they also appear in the printout of fixed-length data types. Thus, the line printed for the <span class="s12">BITMAP </span>data type says how many bitmaps have been allocated, but the &quot;assigned pages&quot;</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">column counts only the headers, not the space used by the variable-length part of the bitmap. This summary also lists &quot;Remaining Pages&quot; in relation to the</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;line-height: 106%;text-align: left;">largest possible virtual memory, not the size of the virtual memory backing file in use. This file may fill up, causing a <span class="s47">STORAGE FULL </span>error, long before the &quot;Remaining Pages&quot; numbers reach zero.</p><p class="s12" style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">STORAGE <span class="s5">also prints out information about the sizes of the entries on the</span></p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;line-height: 106%;text-align: left;">variable-length data free list. The block sizes are broken down by the value of the variable <span class="s12">STORAGE.ARRAYSIZES</span>, initially <span class="s12">(4 16 64 256 1024 4096 16384 NIL)</span>, which yields a printout of the form:</p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:11pt"><td style="width:57pt"><p class="s48" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">le 4</p></td><td style="width:75pt"><p class="s48" style="padding-right: 8pt;text-indent: 0pt;line-height: 10pt;text-align: right;">26 items;</p></td><td style="width:36pt"><p class="s48" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">104</p></td><td style="width:41pt"><p class="s48" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">cells.</p></td></tr><tr style="height:10pt"><td style="width:57pt"><p class="s48" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">le 16</p></td><td style="width:75pt"><p class="s48" style="padding-right: 8pt;text-indent: 0pt;line-height: 9pt;text-align: right;">72 items;</p></td><td style="width:36pt"><p class="s48" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">783</p></td><td style="width:41pt"><p class="s48" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">cells.</p></td></tr><tr style="height:10pt"><td style="width:57pt"><p class="s48" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">le 64</p></td><td style="width:75pt"><p class="s48" style="padding-right: 8pt;text-indent: 0pt;line-height: 9pt;text-align: right;">36 items;</p></td><td style="width:36pt"><p class="s48" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">964</p></td><td style="width:41pt"><p class="s48" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">cells.</p></td></tr><tr style="height:10pt"><td style="width:57pt"><p class="s48" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">le 256</p></td><td style="width:75pt"><p class="s48" style="padding-right: 8pt;text-indent: 0pt;line-height: 9pt;text-align: right;">28 items;</p></td><td style="width:36pt"><p class="s48" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">3155</p></td><td style="width:41pt"><p class="s48" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">cells.</p></td></tr><tr style="height:11pt"><td style="width:57pt"><p class="s48" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">le 1024</p></td><td style="width:75pt"><p class="s48" style="padding-right: 8pt;text-indent: 0pt;line-height: 10pt;text-align: right;">3 items;</p></td><td style="width:36pt"><p class="s48" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">1175</p></td><td style="width:41pt"><p class="s48" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">cells.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><p class="s47" style="padding-top: 5pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">variable-datum free list:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-top: 5pt;padding-left: 150pt;text-indent: 0pt;line-height: 11pt;text-align: left;">le 4096 5 items; 8303 cells.</p><p class="s47" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">le 16384 3 items; 17067 cells.</p><p class="s47" style="padding-left: 150pt;text-indent: 0pt;line-height: 11pt;text-align: left;">others 1 items; 17559 cells.</p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">This information can be useful in determining if the variable-length data space is fragmented. If most of the free space is composed of small items, then the</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">allocator may not be able to find room for large items, and will extend the</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">variable datum space. If this is extended too much, this could cause an <span class="s12">ARRAYS FULL </span>error, even if there is a lot of space left in little chunks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">(STORAGE.LEFT) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Provides a programmatic way of determining how much storage is left in the major data areas in the virtual address space. Returns a list of the form</p><p class="s12" style="padding-left: 161pt;text-indent: 0pt;text-align: left;">(<span class="s33">MDSFREE MDSFRAC 8MBFRAC ATOMFREE ATOMFRAC</span>)<span class="s5">, where the</span></p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">elements are interpreted as follows:</p><p class="s33" style="padding-top: 7pt;padding-left: 246pt;text-indent: -70pt;text-align: left;">MDSFREE <span class="s5">The number of free pages left in the main data space (which includes both fixed-length and variable-length data types).</span></p><p class="s33" style="padding-top: 7pt;padding-left: 176pt;text-indent: 0pt;text-align: left;">MDSFRAC <span class="s5">The fraction of the total possible main data space that is free.</span></p><p class="s33" style="padding-top: 7pt;padding-left: 246pt;text-indent: -68pt;text-align: left;">8MBFRAC <span class="s5">The fraction of the total main data space that is free, relative to eight megabytes.</span></p><p class="s5" style="padding-top: 7pt;padding-left: 245pt;text-indent: 0pt;text-align: justify;">This number is useful when using Interlisp-D on some early computers where the hardware limits the address space to</p><p class="s5" style="padding-left: 246pt;text-indent: 0pt;line-height: 107%;text-align: justify;">eight megabytes. The function <span class="s12">32MBADDRESSABLE </span>returns non-<span class="s12">NIL </span>if the currently running Interlisp-D system can use the full 32 megabyte address space.</p><p class="s33" style="padding-top: 6pt;padding-left: 168pt;text-indent: 0pt;text-align: left;">ATOMFREE <span class="s5">The number of free pages left in the litatom space.</span></p><p class="s33" style="padding-top: 7pt;padding-left: 169pt;text-indent: 0pt;text-align: left;">ATOMFRAC <span class="s5">The fraction of the total litatom space that is free.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">Note: Another important space resource is the amount of the virtual memory backing</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">file in use (see <span class="s12">VMEMSIZE</span>, Chapter 12). The system will crash if the virtual memory file is full, even if the address space is not exhausted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Variable Bindings                                                                                             </h2><p class="s12" style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;line-height: 106%;text-align: left;"><span class="s5">Different implementations of lisp use different methods of accessing free variables. The binding of variables occurs when a function or a </span>PROG <span class="s5">is entered. For example, if the function </span>FOO <span class="s5">has the definition </span>(LAMBDA (A B) <span class="s33">BODY </span>)<span class="s5">, the variables </span>A <span class="s5">and </span>B <span class="s5">are</span></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">bound so that any reference to <span class="s12">A </span>or <span class="s12">B </span>from <i>BODY </i>or any function called from <i>BODY </i>will refer to the arguments to the function <span class="s12">FOO </span>and not to the value of <span class="s12">A </span>or <span class="s12">B </span>from a higher</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">level function. All variable names (litatoms) have a top level value cell which is used if the variable has not been bound in any function. In discussions of variable access, it is useful to distinquish between three types of variable access: local, special and global.</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">Local variable access is the use of a variable that is bound within the function from which it is used. Special variable access is the use of a variable that is bound by</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">another function. Global variable access is the use of a variable that has not been</p><p class="s5" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">bound in any function. We will often refer to a variable all of whose accesses are local as a &quot;local variable.&quot; Similarly, a variable all of whose accesses are global we call a &quot;global variable.&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">In a &quot;deep&quot; bound system, a variable is bound by saving on the stack the variable’s name together with a value cell which contains that variable’s new value. When a variable is accessed, its value is foun d by searching the stack for the most recent</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">binding (occurrence) and retrieving the value stored there. If the variable is not foun d on the stack, the variable’s top level value cell is used.</p><p class="s5" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">In a &quot;shallow&quot; bound system, a variable is bound by saving on the stack the variable name and the variable’s old value and putting the new value in the variable’s top level</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">value cell. When a variable is accessed, its value is always foun d in its top level value cell.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">The deep binding scheme has one disadvantage: the amount of cpu time required to fetch the value of a variable depends on the stack distance between its use and its</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">binding. The compiler can determine local variable accesses and compiles them as fetches directly from the stack. Thus this computation cost only arises in the use of</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">variable not bound in the local frame (&quot;free&quot; variables). The process of finding the value of a free variable is called free variable lookup.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">In a shallow bound system, the amount of cpu time required to fetch the value of a</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">variable is constant regardless of whether the variable is local, special or global. The disadvantages of this scheme are that the actual binding of a variable takes longer</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">(thus slowing down function call), the cells that contain the current in use values are</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">spread throughout the space of all litatom value cells (thus increasing the working set size of functions) and context switching between processes requires unwinding and</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">rewinding the stack (thus effectively prohibiting the use of context switching for many applications).</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Interlisp-D uses deep binding, because of the working set considerations and the speed of context switching. The free variable lookup routine is microcoded, thus greatly</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">reducing the search time. In benchmarks, the largest percentage of free variable lookup time was 20 percent of the total ellapsed time; the normal time was between 5 and 10</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">percent.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">One consequence of Interlisp-D’s deep binding scheme is that users may significantly</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">improve performance by declaring global variables in certain situations. If a variable is declared global, the compiler will compile an access to that variable as a retrieval of its top level value, completely bypassing a stack search. This should be done only for</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">variables that are never bound in functions, such as global databases and flags.</p><p class="s12" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;"><span class="s5">Global variable declarations should be done using the </span>GLOBALVARS <span class="s5">file package command (Chapter 17). Its form is </span>(GLOBALVARS <span class="s33">VAR </span><span class="s49">1 </span><span class="s38">... </span><span class="s33">VAR </span><span class="s49">N</span>)<span class="s5">.</span></p><p class="s5" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Another way of improving performance is to declare variables as local within a function.</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">Normally, all variables bound within a function have their names put on the stack, and these names are scanned during free variable lookup. If a variable is declared to be</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">local within a function, its name is not put on the stack, so it is not scanned during free variable lookup, which may increase the speed of lookups. The compiler can also make some other optimizations if a variable is known to be local to a function.</p><p class="s33" style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 107%;text-align: left;"><span class="s5">A variable may be declared as local within a function by including the form </span><span class="s12">(DECLARE (LOCALVARS </span>VAR <span class="s49">1 </span><b>... </b>VAR <span class="s49">N</span><span class="s12">)) </span><span class="s5">following the argument list in the definition of the</span></p><p class="s5" style="padding-left: 125pt;text-indent: 0pt;line-height: 11pt;text-align: left;">function. Local variable declarations only effect the compilation of a function.</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">Interpreted functions put all of their variable names on the stack, regardless of any declarations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Performance Measuring                                                                                  </h2><p class="s5" style="padding-top: 9pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">This section describes functions that gather and display statistics about a computation, such as as the elapsed time, and the number of data objects of different types allocated. <span class="s12">TIMEALL </span>and <span class="s12">TIME </span>gather statistics on the evaluation of a specified form. <span class="s12">BREAKDOWN </span>gathers statistics on individual functions called during a computation. These functions can be used to determine which parts of a computation are consuming the most</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">resources (time, storage, etc.), and could most profitably be improved.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(TIMEALL <span class="s33">TIMEFORM NUMBEROFTIMES TIMEWHAT INTERPFLG — </span>)</p><p class="s5" style="padding-left: 96pt;text-indent: 0pt;line-height: 11pt;text-align: left;">[NLambda Function]</p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Evaluates the form <i>TIMEFORM </i>and prints statistics on time spent in various categories (elapsed, keyboard wait, swapping time, gc) and data type allocation.</p><p class="s5" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">For more accurate measurement on small computations, <i>NUMBEROFTIMES</i></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">may be specified (its default is 1) to cause <i>TIMEFORM </i>to be executed</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><i>NUMBEROFTIMES </i>times. To improve the accuracy of timing open-coded operations in this case, <span class="s12">TIMEALL </span>compiles a form to execute <i>TIMEFORM</i></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;"><i>NUMBEROFTIMES </i>times (unless <i>INTERPFLG </i>is non-<span class="s12">NIL</span>), and then times the execution of the compiled form.</p><p class="s5" style="padding-top: 6pt;padding-left: 149pt;text-indent: -35pt;line-height: 107%;text-align: left;">Note: If <span class="s12">TIMEALL </span>is called with <i>NUMBEROFTIMES </i>&gt;1, the dummy form is compiled with compiler optimizations on. This means that it is not</p><p class="s5" style="padding-left: 150pt;text-indent: 0pt;line-height: 106%;text-align: left;">meaningful to use <span class="s12">TIMEALL </span>with very simple form s that are optimized out by the compiler. For example, <span class="s12">(TIMEALL ’(IPLUS 2 3) 1000) </span>will time a compiled function which simply returns the number 5, since <span class="s12">(IPLUS 2 3) </span>is optimized to the integer 5.</p><p class="s5" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;line-height: 106%;text-align: left;"><i>TIMEWHAT </i>restricts the statistics to specific categories. It can be an atom or list of datatypes to monitor, and/or the atom <span class="s12">TIME </span>to monitor time spent. Note that ordinarily, <span class="s12">TIMEALL </span>monitors all time and datatype usage, so this</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">argument is rarely needed.</p><p class="s5" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s12">TIMEALL </span>returns the value of the last evaluation of <i>TIMEFORM </i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 114pt;text-indent: -36pt;text-align: left;">(TIME <span class="s33">TIMEX TIMEN TIMETYP </span>) <span class="s5">[NLambda Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s12">TIME </span>evaluates the form <i>TIMEX </i>, and prints out the number of <span class="s12">CONS </span>cells allocated and computation time. Garbage collection time is subtracted out. This function has been largely replaced by <span class="s12">TIMEALL</span>.</p><p class="s5" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">If <i>TIMEN </i>is greater than 1, <i>TIMEX </i>is executed <i>TIMEN </i>times, and <span class="s12">TIME </span>prints out (number of conses)/ <i>TIMEN </i>, and (com putation time)/ <i>TIMEN </i>. If</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;"><i>TIMEN </i>=<span class="s12">NIL</span>, it defaults to 1. This is useful for more accurate measurement on small computations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: left;">If <i>TIMETYP </i>is 0, <span class="s12">TIME </span>measures and prints total <i>real </i>time as well as computation time. If <i>TIMETYP </i>= 3, <span class="s12">TIME </span>measures and prints garbage</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: left;">collection time as well as computation time. If <i>TIMETYP </i>=<span class="s12">T</span>, <span class="s12">TIME </span>measures and prints the number of pagefaults.</p><p class="s5" style="padding-top: 6pt;padding-left: 161pt;text-indent: 0pt;text-align: left;"><span class="s12">TIME </span>returns the value of the last evaluation of <i>TIMEX </i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 105pt;text-indent: 0pt;text-align: center;">(BOXCOUNT <span class="s33">TYPE  N </span>)                                          <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 106%;text-align: left;">Returns the number of data objects of type <i>TYPE </i>allocated since this Interlisp system was created. <i>TYPE </i>can be any data type name (see <span class="s12">TYPENAME</span>, Chapter 8). If <i>TYPE </i>is <span class="s12">NIL</span>, it defaults to <span class="s12">FIXP</span>. If <i>N </i>is non-<span class="s12">NIL</span>, the corresponding</p><p class="s5" style="padding-left: 161pt;text-indent: 0pt;text-align: left;">counter is reset to <i>N </i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 105pt;text-indent: 0pt;text-align: center;">(CONSCOUNT <span class="s33">N</span>)                                            <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 161pt;text-indent: 0pt;line-height: 107%;text-align: left;">Returns the number of <span class="s12">CONS </span>cells allocated since this Interlisp system was created. If <i>N </i>is non-<span class="s12">NIL</span>, resets the counter to <i>N </i>. Equivalent to <span class="s12">(BOXCOUNT ’LISTP </span><i>N</i><span class="s12">)</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 105pt;text-indent: 0pt;text-align: center;">(PAGEFAULTS)                                               <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Returns the number of page faults since this Interlisp system was created.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">BREAKDOWN                                                                                                   </h2><p class="s12" style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">TIMEALL <span class="s5">collects statistics for whole computations. </span>BREAKDOWN <span class="s5">is available to analyze the breakdown of computation time (or any other measureable quantity) function by</span></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;">function.</p><p class="s12" style="padding-top: 7pt;padding-left: 133pt;text-indent: 0pt;line-height: 18pt;text-align: center;">(BREAKDOWN <span class="s33">FN </span><span class="s49">1 </span><span class="s33">... FN</span><span class="s49">N</span>)                    <span class="s5">[NLambda NoSpread Function] The user calls </span>BREAKDOWN <span class="s5">giving it a list of function names (unevaluated).</span></p><p class="s5" style="padding-top: 1pt;padding-left: 161pt;text-indent: 0pt;text-align: center;">These functions are modified so that they keep track of various statistics.</p><p class="s5" style="padding-top: 7pt;padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: left;">To remove functions from those being monitored, simply <span class="s12">UNBREAK </span>(Chapter 15) the functions, thereby restoring them to their original state. To add functions, call <span class="s12">BREAKDOWN </span>on the new functions. This will not reset the counters for any functions not on the new list. However <span class="s12">(BREAKDOWN) </span>will zero the counters of all functions being monitored.</p><p class="s5" style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">The procedure used for measuring is such that if one function calls other and both are &quot;broken down&quot;, then the time (or whatever quantity is being measured) spent in the inner function is <i>not </i>charged to the outer function as well.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s12">BREAKDOWN </span>will <i>not </i>give accurate results if a function being measured is not</p><p class="s5" style="padding-left: 113pt;text-indent: 0pt;line-height: 106%;text-align: left;">returned from normally, e.g., a lower <span class="s12">RETFROM </span>(or <span class="s12">ERROR</span>) bypasses it. In this case, all of the time (or whatever quantity is being measured) between the time that function is entered and the time the next function being measured is</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;">entered will be charged to the first function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">(BRKDWNRESULTS <span class="s33">RETURNVALUESFLG </span>) <span class="s5">[Function]</span></p><p class="s12" style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;line-height: 107%;text-align: left;">BRKDWNRESULTS <span class="s5">prints the analysis of the statistics requested as well as the number of calls to each function. If </span><span class="s33">RETURNVALUESFLG </span><span class="s5">is non-</span>NIL<span class="s5">, </span>BRKDWNRESULTS <span class="s5">will not to print the results, but instead return them in the form of a list of elements of the form </span>(<span class="s33">FNNAME #CALLS VALUE </span>)<span class="s5">.</span></p><p class="s5" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Example:</p><p class="s4" style="padding-top: 7pt;padding-left: 149pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s5"> </span><span class="s12">(BREAKDOWN SUPERPRINT SUBPRINT COMMENT1) (SUPERPRINT SUBPRINT COMMENT1)</span></p><p class="s4" style="padding-left: 149pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s12">(PRETTYDEF ’(SUPERPRINT) ’FOO) FOO.;3</span></p><p class="s4" style="padding-left: 149pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s12">(BRKDWNRESULTS)</span></p><p class="s12" style="padding-left: 149pt;text-indent: 0pt;line-height: 88%;text-align: left;">FUNCTIONS TIME #CALLS PER CALL % SUPERPRINT 8.261 365 0.023 20</p><table style="border-collapse:collapse;margin-left:147.5pt" cellspacing="0"><tr style="height:11pt"><td style="width:60pt"><p class="s50" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">SUBPRINT</p></td><td style="width:57pt"><p class="s50" style="padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: right;">31.910</p></td><td style="width:99pt"><p class="s50" style="padding-right: 14pt;text-indent: 0pt;line-height: 10pt;text-align: right;">141 0.226</p></td><td style="width:29pt"><p class="s50" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">76</p></td></tr><tr style="height:10pt"><td style="width:60pt"><p class="s50" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">COMMENT1</p></td><td style="width:57pt"><p class="s50" style="padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: right;">1.612</p></td><td style="width:99pt"><p class="s50" style="padding-right: 14pt;text-indent: 0pt;line-height: 9pt;text-align: right;">8 0.201</p></td><td style="width:29pt"><p class="s50" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">4</p></td></tr><tr style="height:10pt"><td style="width:60pt"><p class="s50" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">TOTAL</p></td><td style="width:57pt"><p class="s50" style="padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: right;">41.783</p></td><td style="width:99pt"><p class="s50" style="padding-right: 14pt;text-indent: 0pt;line-height: 9pt;text-align: right;">514 0.081</p></td><td style="width:29pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:60pt"><p class="s50" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">NIL</p></td><td style="width:57pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:99pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:29pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p class="s4" style="padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s12">(BRKDWNRESULTS T)</span></p><p class="s12" style="padding-left: 149pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((SUPERPRINT 365 8261) (SUBPRINT 141 31910) (COMMENT1 8</p><p class="s12" style="padding-left: 149pt;text-indent: 0pt;line-height: 11pt;text-align: left;">1612))</p><p class="s12" style="padding-top: 8pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">BREAKDOWN <span class="s5">can be used to measure other statistics, by setting the following variables:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">BRKDWNTYPE <span class="s5">[Variable]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: justify;">To use <span class="s12">BREAKDOWN </span>to measure other statistics, before calling <span class="s12">BREAKDOWN</span>, set</p><p class="s5" style="padding-left: 113pt;text-indent: 0pt;line-height: 107%;text-align: justify;">the variable <span class="s12">BRKDWNTYPE </span>to the quantity of interest, e.g., <span class="s12">TIME</span>, <span class="s12">CONSES</span>, etc, or a list of such quantities. Whenever <span class="s12">BREAKDOWN </span>is called with <span class="s12">BRKDWNTYPE </span>not <span class="s12">NIL</span>, <span class="s12">BREAKDOWN </span>perform s the necessary changes to its internal state to conform to the new analysis. In particular, if this is the first time an analysis is being</p><p class="s5" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">run with a particular statistic, a measuring function will be defined, and the compiler will be called to compile it. The functions being broken down will be redefined to call this measuring function. When <span class="s12">BREAKDOWN </span>is through</p><p class="s5" style="padding-left: 113pt;text-indent: 0pt;line-height: 107%;text-align: left;">initializing, it sets <span class="s12">BRKDWNTYPE </span>back to <span class="s12">NIL</span>. Subsequent calls to <span class="s12">BREAKDOWN </span>will measure the new statistic until <span class="s12">BRKDWNTYPE </span>is again set and a new <span class="s12">BREAKDOWN </span>performed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">BRKDWNTYPES <span class="s5">[Variable]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">The list <span class="s12">BRKDWNTYPES </span>contains the information used to analyze new statistics.</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: left;">Each entry on <span class="s12">BRKDWNTYPES </span>should be of the form <b>( </b><i>TYPE FORM FUNCTION </i><b>)</b>, where <i>TYPE </i>is a statistic name (as would appear in <span class="s12">BRKDWNTYPE</span>), <i>FORM</i></p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: justify;">computes the statistic, and <i>FUNCTION </i>(op tional) converts the value of form to some more interesting quantity. For example, <span class="s12">(TIME (CLOCK 2) (LAMBDA</span></p><p class="s12" style="padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: justify;">(X) (FQUOTIENT X 1000))) <span class="s5">measures computation time and reports the result in seconds instead of milliseconds. </span>BRKDWNTYPES <span class="s5">currently contains entries for </span>TIME<span class="s5">, </span>CONSES<span class="s5">, </span>PAGEFAULTS<span class="s5">, </span>BOXES<span class="s5">, and </span>FBOXES<span class="s5">.</span></p><p class="s5" style="padding-top: 7pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Example:</p><p class="s4" style="padding-top: 7pt;padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s12">(SETQ BRKDWNTYPE ’(TIME CONSES)) (TIME CONSES)</span></p><p class="s4" style="padding-left: 198pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="s12">(BREAKDOWN MATCH CONSTRUCT) (MATCH CONSTRUCT)</span></p><p class="s4" style="padding-left: 198pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s12">(FLIP ’(A B C D E F G H C Z) ’(.. $1 .. #2 ..) ’(.. #3</span></p><p class="s12" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">..))</p><p class="s12" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(A B D E F G H Z)</p><p class="s4" style="padding-left: 198pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s12">(BRKDWNRESULTS)</span></p><p class="s12" style="padding-left: 198pt;text-indent: 0pt;line-height: 11pt;text-align: left;">FUNCTIONS TIME #CALLS PER CALL %</p><table style="border-collapse:collapse;margin-left:195.501pt" cellspacing="0"><tr style="height:11pt"><td style="width:63pt"><p class="s50" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">MATCH</p></td><td style="width:48pt"><p class="s50" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0.036</p></td><td style="width:48pt"><p class="s50" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">1</p></td><td style="width:60pt"><p class="s50" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0.036</p></td><td style="width:20pt"><p class="s50" style="padding-left: 4pt;padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">54</p></td></tr><tr style="height:11pt"><td style="width:63pt"><p class="s50" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">CONSTRUCT</p></td><td style="width:48pt"><p class="s50" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0.031</p></td><td style="width:48pt"><p class="s50" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">1</p></td><td style="width:60pt"><p class="s50" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0.031</p></td><td style="width:20pt"><p class="s50" style="padding-left: 4pt;padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">46</p></td></tr><tr style="height:9pt"><td style="width:63pt"><p class="s50" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">TOTAL</p></td><td style="width:48pt"><p class="s50" style="padding-left: 6pt;text-indent: 0pt;line-height: 7pt;text-align: left;">0.067</p></td><td style="width:48pt"><p class="s50" style="padding-left: 12pt;text-indent: 0pt;line-height: 7pt;text-align: left;">2</p></td><td style="width:60pt"><p class="s50" style="padding-left: 12pt;text-indent: 0pt;line-height: 7pt;text-align: left;">0.033</p></td><td style="width:20pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:63pt"><p class="s50" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">FUNCTIONS</p></td><td style="width:48pt"><p class="s50" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">CONSES</p></td><td style="width:48pt"><p class="s50" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">#CALLS</p></td><td style="width:60pt"><p class="s50" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">PER CALL</p></td><td style="width:20pt"><p class="s50" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: center;">%</p></td></tr><tr style="height:10pt"><td style="width:63pt"><p class="s50" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">MATCH</p></td><td style="width:48pt"><p class="s50" style="padding-left: 6pt;text-indent: 0pt;line-height: 8pt;text-align: left;">32</p></td><td style="width:48pt"><p class="s50" style="padding-left: 12pt;text-indent: 0pt;line-height: 8pt;text-align: left;">1</p></td><td style="width:60pt"><p class="s50" style="padding-left: 6pt;text-indent: 0pt;line-height: 8pt;text-align: left;">32.000</p></td><td style="width:20pt"><p class="s50" style="padding-left: 4pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">40</p></td></tr><tr style="height:10pt"><td style="width:63pt"><p class="s50" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">CONSTRUCT</p></td><td style="width:48pt"><p class="s50" style="padding-left: 6pt;text-indent: 0pt;line-height: 8pt;text-align: left;">49</p></td><td style="width:48pt"><p class="s50" style="padding-left: 12pt;text-indent: 0pt;line-height: 8pt;text-align: left;">1</p></td><td style="width:60pt"><p class="s50" style="padding-left: 6pt;text-indent: 0pt;line-height: 8pt;text-align: left;">49.000</p></td><td style="width:20pt"><p class="s50" style="padding-left: 4pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">60</p></td></tr><tr style="height:10pt"><td style="width:63pt"><p class="s50" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">TOTAL</p></td><td style="width:48pt"><p class="s50" style="padding-left: 6pt;text-indent: 0pt;line-height: 8pt;text-align: left;">81</p></td><td style="width:48pt"><p class="s50" style="padding-left: 12pt;text-indent: 0pt;line-height: 8pt;text-align: left;">2</p></td><td style="width:60pt"><p class="s50" style="padding-left: 6pt;text-indent: 0pt;line-height: 8pt;text-align: left;">40.500</p></td><td style="width:20pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:63pt"><p class="s50" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">NIL</p></td><td style="width:48pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:48pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:60pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:20pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p class="s5" style="padding-top: 4pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Occasionally, a function being analyzed is sufficiently fast that the overhead</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">involved in measuring it obscures the actual time spent in the function. If you were using <span class="s12">TIME</span>, you would specify a value for <i>TIMEN </i>greater than 1 to give</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: left;">greater accuracy. A similar option is available for <span class="s12">BREAKDOWN</span>. You can specify that a function(s) be executed a multiple number of times for each</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">measurement, and the average value reported, by including a number in the list of functions given to <span class="s12">BREAKDOWN</span>. For example, <span class="s12">BREAKDOWN(EDITCOM EDIT4F</span></p><p class="s12" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">10 EDIT4E EQP) <span class="s5">means normal breakdown for </span>EDITCOM <span class="s5">and </span>EDIT4F <span class="s5">but</span></p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;line-height: 106%;text-align: left;">executes (the body of) <span class="s12">EDIT4E </span>and <span class="s12">EQP </span>10 times each time they are called. Of course, the functions so measured must not cause any harmful side effect s, since they are executed more than once for each call. The printout from <span class="s12">BRKDWNRESULTS </span>will look the same as though each function were run only once, except that the measurement will be more accurate.</p><p class="s5" style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Another way of obtaining more accurate measurement is to expand the call to the measuring function in-line. If the value of <span class="s12">BRKDWNCOMPFLG </span>is non-<span class="s12">NIL</span></p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">(initially <span class="s12">NIL</span>), then whenever a function is broken-down, it will be redefined to</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">call the measuring function, and then recompiled. The measuring function is</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">expanded in-line via an appropriate macro. In addition, whenever <span class="s12">BRKDWNTYPE</span></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 106%;text-align: left;">is reset, the compiler is called for <i>all </i>functions for which <span class="s12">BRKDWNCOMPFLG </span>was set at the time they were originally broken-down, i.e. the setting of the flag at the time a function is broken-down determines whether the call to the</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;">measuring code is compiled in-line.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">GAINSPACE                                                                                                      </h2><p class="s5" style="padding-top: 9pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If you have large programs and databases, you may sometimes find yourself in a situation where you need to obtain more space, and are willing to pay the price of eliminating some or all of the context information that the various user-assistance facilities such as the programmer’s assistant, file package, CLISP, etc., have</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;line-height: 107%;text-align: left;">accumulated during the course of his session. The function <span class="s12">GAINSPACE </span>provides an easy way to selectively throw away accumulated data:</p><p class="s12" style="padding-top: 9pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">(GAINSPACE) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Prints a list of deletable objects, allowing you to specify at each point what should be discarded and what should be retained. For example:</p><p class="s4" style="padding-top: 6pt;padding-left: 150pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s12">(GAINSPACE)</span></p><p class="s12" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">purge history lists ? Yes</p><p class="s12" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">purge everything, or just the properties, e.g., SIDE, LISPXPRINT, etc. ?</p><p class="s12" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">just the properties</p><p class="s12" style="padding-left: 150pt;text-indent: 0pt;line-height: 88%;text-align: left;">discard definitions on property lists ? Yes discard old values of variables ? Yes</p><p class="s12" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">erase properties ? No</p><p class="s12" style="padding-left: 150pt;text-indent: 0pt;line-height: 11pt;text-align: left;">erase CLISP translations? Yes</p><p class="s12" style="padding-top: 8pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">GAINSPACE <span class="s5">is driven by the list </span>GAINSPACEFORMS<span class="s5">. Each element on </span>GAINSPACEFORMS</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">is of the form <span class="s12">(</span><i>PRECHECK MESSAGE FORM KEYLS T </i><span class="s12">)</span>. If <i>PRECHECK </i>, when</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;line-height: 106%;text-align: left;">evaluated, returns <span class="s12">NIL</span>, <span class="s12">GAINSPACE </span>skips to the next entry. For example, you will not be asked whether or not to purge the history list if it is not enabled. Otherwise, <span class="s12">ASKUSER </span>(Chapter 26) is called with the indicated <i>MESSAGE </i>and the (op tional)</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;"><i>KEYLS T </i>. If you respond <span class="s47">No</span>, i.e., <span class="s12">ASKUSER </span>returns <span class="s12">N</span>, <span class="s12">GAINSPACE </span>skips to the next</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;line-height: 107%;text-align: left;">entry. Otherwise, <i>FORM </i>is evaluated with the variable <span class="s12">RESPONSE </span>bound to the value of <span class="s12">ASKUSER</span>. In the above example, the <i>FORM </i>for the &quot;<span class="s47">purge history lists</span>&quot;</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;line-height: 107%;text-align: left;">question calls <span class="s12">ASKUSER </span>to ask &quot;<span class="s47">purge everything, ...</span>&quot; only if you had responded <span class="s47">Yes</span>. If you had responded with <span class="s47">Everything</span>, the second question would not have been asked.</p><p class="s12" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 107%;text-align: left;"><span class="s5">The &quot;</span><b>erase properties</b><span class="s5">&quot; question is driven by a list </span>SMASHPROPSMENU<span class="s5">. Each element on this list is of the form </span>(<span class="s33">MESSAGE </span>. <span class="s33">PROPS </span>)<span class="s5">. You are prompted with </span><span class="s33">MESSAGE</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">(by <span class="s12">ASKUSER</span>), and if your response is <span class="s47">Ye</span><b>s</b>, <i>PROPS </i>is added to the list <span class="s12">SMASHPROPS</span>.</p><p class="s5" style="padding-left: 125pt;text-indent: 0pt;line-height: 107%;text-align: left;">The &quot;<span class="s47">discard definitions on property lists</span>&quot; and &quot;<span class="s47">discard old values of variables</span>&quot; questions also add to <span class="s12">SMASHPROPS</span>. You will not be prompted for any entry on <span class="s12">SMASHPROPSMENU </span>for which all of the corresponding properties are already on <span class="s12">SMASHPROPS</span>. <span class="s12">SMASHPROPS </span>is initially set to the value of <span class="s12">SMASHPROPSLST</span>. This</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">permits you to specify in advance those properties which you always want discarded, and not be asked about them subsequently. After finishing all the entries on <span class="s12">GAINSPACEFORMS</span>, <span class="s12">GAINSPACE </span>checks to see if the value of <span class="s12">SMASHPROPS </span>is non-<span class="s12">NIL</span>, and if so, does a <span class="s12">MAPATOMS</span>, i.e., looks at every atom in the system, and erases the</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">indicated properties.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">You can change or add new entries to <span class="s12">GAINSPACEFORMS </span>or <span class="s12">SMASHPROPSMENU</span>, so that</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">GAINSPACE <span class="s5">can also be used to purge structures that your programs have accumulated.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Using Data Types Instead of Records                                                            </h2><p class="s5" style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">If a program uses large numbers of large data structures, there are several advantages to representing them as user data types rather than as list structures. The primary</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">advantage is increased speed: accessing and setting the fields of a data type can be significantly faster than walking through a list with repeated <span class="s12">CAR</span>s and <span class="s12">CDR</span>s. Also,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">compiled code for referencing data types is usually smaller. Finally, by reducing the number of objects created (one object against many list cells), this can reduce the</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">expense of garbage collection.</p><p class="s5" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 107%;text-align: left;">User data types are declared by using the <span class="s12">DATATYPE </span>record type (Chapter 8). If a list structure has been defined using the <span class="s12">RECORD </span>record type (Chapter 8), and all accessing operations are written using the record package’s <span class="s47">fetch</span>, <span class="s47">replace</span>, and <span class="s47">create</span></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;line-height: 107%;text-align: left;">operations, changing from <span class="s12">RECORD</span>s to <span class="s12">DATATYPE</span>s only requires editing the record declaration (using <span class="s12">EDITREC</span>, Chapter 8) to replace declaration type <span class="s12">RECORD </span>by <span class="s12">DATATYPE</span>, and recompiling.</p><p class="s5" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Note: There are some minor disadvantages with allocating new data types: First, there is an upper limit on the number of data types which can exist. Also, space for data</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">types is allocated a page at a time, so each data type has at least one page assigned to</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">it, which may be wasteful of space if there are only a few examples of a given data type. These problems should not effect most applications programs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Using Incomplete File Names                                                                         </h2><p class="s5" style="padding-top: 9pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Currently, Interlisp allows you to specify an open file by giving the file name. If the file name is incomplete (it doesn’t have the device/host, directory, name, extension, and</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">version number all supplied), the system converts it to a complete file name, by</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">supplying defaults and searching through directories (which may be on remote file</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">servers), and then searches the open streams for one corresponding to that file name.</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">This file name-com pletion process happens whenever any I/O function is given an</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">incomplete file name, which can cause a serious performance problem if I/O operations are done repeatedly. In general, it is much faster to convert an incomplete file name to a stream once, and use the stream from then on. For example, suppose a file is opened with <span class="s12">(SETQ STRM (OPENSTREAM ’MYNAME ’INPUT))</span>. After doing this, <span class="s12">(READC</span></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 107%;text-align: justify;">’MYNAME) <span class="s5">and </span>(READC STRM) <span class="s5">would both work, but </span>(READC ’MYNAME) <span class="s5">would take longer (sometimes orders of magnitude longer). This could seriously effect the</span></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">performance if a program which is doing many I/O operations.</p><p class="s5" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">At some point in the future, when multiple streams are supported to a single file, the feature of mapping file names to streams will be removed. This is yet another reason why programs should use streams as handles to open files, instead of file names.</p><p class="s5" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">For more information on efficiency considerations when using files, see Chapter 24.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 12pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Using &quot;Fast&quot; and &quot;Destructive&quot; Functions                                                    </h2><p class="s5" style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Among the functions used for manipulating objects of various data types, there are a</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">number of functions which have &quot;fa st&quot; and &quot;destructive&quot; versions. You should be aware of what these functions do, and when they should be used.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">&quot;Fast&quot; functions: By convention, a function named by prefixing an existing function</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">name with <span class="s12">F </span>indicates that the new function is a &quot;fa st&quot; version of the old. These usually have the same definitions as the slower versions, but they compile open and run</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">without any &quot;safety&quot; error checks. For example, <span class="s12">FNTH </span>runs faster than <span class="s12">NTH</span>, however, it does not make as many checks (for lists ending with anything but <span class="s12">NIL</span>, etc). If these</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">functions are given arguments that are not in the form that they expect, their behavior is unpredictable; they may run forever, or cause a system error. In general, you should only use &quot;fa st&quot; functions in code that has already been completely debugged, to speed it up.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">&quot;Destructive&quot; functions: By convention, a function named by prefixing an existing function with <span class="s12">D </span>indicates the new function is a &quot;destructive&quot; version of the old one,</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">which does not make any new structure but cannibalizes its argument(s). For example,</p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">REMOVE <span class="s5">returns a copy of a list with a particular element removed, but </span>DREMOVE</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">actually changes the list structure of the list. (Unfortunately, not all destructive</p><p class="s5" style="padding-left: 77pt;text-indent: 0pt;line-height: 106%;text-align: left;">functions follow this naming convention: the destructive version of <span class="s12">APPEND </span>is <span class="s12">NCONC</span>.) You should be careful when using destructive functions that they do not inadvertantly change data structures.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l57"><li><p class="s6" style="padding-left: 29pt;text-indent: -23pt;text-align: left;"><a name="bookmark24">PROCESSES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="605" height="3" alt="image" src="Image_057.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The Medley Process mechanism provides an environment in which multiple Lisp processes can run in parallel. Each executes in its own stack space, but all share a global address space. The current process implementation is cooperative; i.e., process switches happen voluntarily, either when the process in control has nothing to do or when it is in a convenient place to pause. There is no preemption or guaranteed service, so you cannot run something demanding (e.g., Chat) at the same time as something that runs for long periods without yielding control. Keyboard input and network operations block with great frequency, so processes currently work best for highly interactive tasks (editing, making remote files).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In Medley, the process mechanism is already turned on, and is expected to stay on during normal operations, as some system facilities (in particular, most network operations) require it. However, under exceptional conditions, the following function can be used to turn the world off and on:</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>PROCESSWORLD </b><i>FLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Starts up the process world, or if <span class="s16">FLG </span><span class="s11">= OFF</span>, kills all processes and turns it off. Normally does not return. The environment starts out with two processes: a top-level <span class="s11">EVALQT </span>(the initial &quot;tty&quot; process) and the &quot;background&quot; process, which runs the window mouse handler and other system background tasks.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">PROCESSWORLD <span class="p">is intended to be called at the top level of Interlisp, not from within a program. It does not toggle some sort of switch; rather, it constructs some new processes in a new part of the stack, leaving any callers of </span>PROCESSWORLD <span class="p">in a now inaccessible part of the stack. Calling </span>(PROCESSWORLD ’OFF) <span class="p">is the only way the call to </span>PROCESSWORLD <span class="p">ever returns.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>HARDRESET</b>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Resets the whole world, and rebuilds the stack from scratch. This is &quot;harder&quot; than doing <span class="s11">RESET </span>to every process, because it also resets system internal processes (such as the keyboard handler).</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">HARDRESET <span class="p">automatically turns the process world on (or resets it if it was on), unless the variable </span>AUTOPROCESSFLG <span class="p">is </span>NIL<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Creating and Destroying Processes                                                                                                       </h4><p class="s16" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s11">(</span><b>ADD.PROCESS </b>FORM PROP<span class="s32">1 </span>VALUE<span class="s32">1 </span>... PROP<span class="s32">N </span>VALUE<span class="s32">N</span><span class="s11">) </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Creates a new process evaluating <span class="s16">FORM</span>, and returns its process handle. The process’s stack environment is the top level, i.e., the new process does not have access to the environment in which <span class="s11">ADD.PROCESS </span>was called; all such information must be passed as arguments in <span class="s16">FORM</span>. The process runs until <span class="s16">FORM </span>returns or the process is explicitly deleted. An untrapped error within the process also deletes the process (unless its <span class="s11">RESTARTABLE </span>property is <span class="s11">T</span>), in which case a message is printed to that effect.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The remaining arguments are alternately property names and values. Any property / value pairs acceptable to <span class="s11">PROCESSPROP </span>may be given, but the following two are directly relevant to <span class="s11">ADD.PROCESS</span>:</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -33pt;line-height: 92%;text-align: justify;"><span class="s15">NAME </span>Value can be a symbol or a string; if not given, the process name is taken from <span class="s11">(CAR </span><span class="s16">FORM</span><span class="s11">)</span>. <span class="s11">ADD.PROCESS </span>may pack the name with a number to make it unique. Process names are treated as case-insensitive strings. This name is solely for the convenience of manipulating processes at Lisp type-in; e.g., the name can be given as the <span class="s16">PROC </span>argument to most process functions, and the name appears in menus of processes. However, programs should normally only deal in process handles, both for efficiency and to avoid the confusion that can result if two processes have the same defining form.</p><p style="padding-top: 6pt;padding-left: 228pt;text-indent: -49pt;line-height: 93%;text-align: justify;"><span class="s15">SUSPEND </span>If the value is non-<span class="s11">NIL</span>, the new process is created but then immediately suspended; i.e., the process does not actually run until woken by a <span class="s11">WAKE.PROCESS </span>(below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PROCESSPROP </b><i>PROC PROP NEWVALUE</i>)                       <span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Used to get or set the values of certain properties of process <span class="s16">PROC</span>, in a manner analogous to <span class="s11">WINDOWPROP</span>. If <span class="s16">NEWVALUE </span>is supplied (including if it is <span class="s11">NIL</span>), property <span class="s16">PROP </span>is given that value. In all cases, returns the old value of the property. The following properties have special meaning for processes; all others are uninterpreted:</p><p class="s15" style="padding-top: 6pt;padding-left: 228pt;text-indent: -33pt;text-align: justify;">NAME <span class="p">Value is a symbol used for identifying the process to the user.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 156pt;text-indent: 37pt;text-align: left;">FORM <span class="p">Value is the Lisp form used to start the process (readonly).</span></p><p class="s15" style="padding-top: 6pt;padding-left: 228pt;text-indent: -71pt;text-align: left;">RESTARTABLE <span class="p">Value is a flag indicating the disposition of the process following errors or hard resets:</span></p><p class="s11" style="padding-top: 6pt;padding-left: 228pt;text-indent: 0pt;line-height: 94%;text-align: justify;">NIL <span class="p">or </span>NO <span class="p">(the default): If an untrapped error (or Control- E or Control-D) causes its form to be exited, the process is deleted. The process is also deleted if a </span>HARDRESET <span class="p">(or Control-D from </span>RAID<span class="p">) occurs, causing the entire Process world to be reinitialized.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 228pt;text-indent: 0pt;line-height: 94%;text-align: justify;">T <span class="p">or </span>YES<span class="p">: The process is automatically restarted on errors or </span>HARDRESET<span class="p">. This is the normal setting for persistent &quot;background&quot; processes, such as the mouse process, that can safely restart themselves on errors.</span></p><p style="padding-top: 6pt;padding-left: 228pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">HARDRESET</span>: The process is deleted as usual if an error causes its form to be exited, but it <i>is </i>restarted on a <span class="s11">HARDRESET</span>. This setting is preferred for persistent processes for which an error is an unusual condition, one</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PROCESSES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 91%;text-align: justify;">that might repeat itself if the process were simply blindly restarted.</p><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -71pt;text-align: justify;"><span class="s15">RESTARTFORM </span>If the value is non<b>-</b><span class="s11">NIL</span>, it is the form used if the process is restarted (instead of the value of the <span class="s11">FORM </span>property). Of course, the process must also have a non-<span class="s11">NIL RESTARTABLE </span>prop for this to have any effect.</p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: -66pt;line-height: 93%;text-align: justify;"><span class="s15">BEFOREEXIT </span>If the value is the atom <span class="s11">DON’T</span>, it will not be interrupted by a <span class="s11">LOGOUT</span>. If <span class="s11">LOGOUT </span>is attempted before the process finishes, a message will appear saying that Interlisp is waiting for the process to finish. If you want the <span class="s11">LOGOUT </span>to proceed without waiting, you must use the process status window (from the background menu) to delete the process.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -60pt;text-align: justify;"><span class="s15">AFTEREXIT </span>Value indicates the disposition of the process following a resumption of Lisp after some exit (<span class="s11">LOGOUT</span>, <span class="s11">SYSOUT</span>, <span class="s11">MAKESYS</span>). Possible values are:</p><p class="s11" style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">DELETE<span class="p">: Delete the process.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: justify;">SUSPEND<span class="p">: Suspend the process; i.e., do not let it run until it is explicitly woken.</span></p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 91%;text-align: justify;">An event: Cause the process to be suspended waiting for the event (See the Events section below).</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -55pt;line-height: 94%;text-align: justify;"><span class="s15">INFOHOOK </span>Value is a function or form used to provide information about the process, in conjunction with the <span class="s11">INFO </span>command in the process status window (see the Process Status Window section below).</p><p class="s15" style="padding-top: 6pt;padding-left: 180pt;text-indent: -44pt;line-height: 92%;text-align: justify;">WINDOW <span class="p">Value is a window associated with the process, the process’s &quot;main&quot; window. Used to switch the tty process to this process when you click in this window (see the Switching the TTY Process section below).</span></p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Setting the <span class="s11">WINDOW </span>property does not set the primary I / O stream (<span class="s11">NIL</span>) or the terminal I / O stream (<span class="s11">T</span>) to the window. When a process is created, I / O operations to the <span class="s11">NIL </span>or <span class="s11">T </span>stream will cause a new window to appear. <span class="s11">TTYDISPLAYSTREAM </span>(see Chapter 26) should be used to set the terminal I / O stream of a process to a specific window.</p><p class="s15" style="padding-top: 6pt;padding-left: 180pt;text-indent: -66pt;line-height: 93%;text-align: justify;">TTYENTRYFN <span class="p">Value is a function that is applied to the process when the process is made the tty process (see the Switching the TTY Process section below).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 227pt;text-indent: -60pt;line-height: 93%;text-align: justify;">TTYEXITFN <span class="p">Value is a function that is applied to the process when the process ceases to be the tty process (see the Switching the TTY Process section below).</span></p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>THIS.PROCESS</b>)                                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the handle of the currently running process, or <span class="s11">NIL </span>if the Process world is turned off.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>DEL.PROCESS </b><i>PROC</i>)                                             <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Deletes process <span class="s16">PROC</span>. <span class="s16">PROC </span>may be a process handle (returned by <span class="s11">ADD.PROCESS</span>), or its name. If <span class="s16">PROC </span>is the currently running process, <span class="s11">DEL.PROCESS </span>does not return!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PROCESS.RETURN </b><i>VALUE</i>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Terminates the currently running process, causing it to &quot;return&quot; <span class="s16">VALUE</span>. There is an implicit <span class="s11">PROCESS.RETURN </span>around the <span class="s16">FORM </span>argument given to <span class="s11">ADD.PROCESS</span>, so that normally a process can finish by simply returning; <span class="s11">PROCESS.RETURN </span>is supplied for earlier termination.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PROCESS.RESULT </b><i>PROCESS WAITFORRESULT</i>)                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">PROCESS </span>has terminated, returns the value, if any, that it returned. This is either the value of a <span class="s11">PROCESS.RETURN </span>or the value returned from the form given to <span class="s11">ADD.PROCESS</span>. If the process was aborted, the value is <span class="s11">NIL</span>. If <span class="s16">WAITFORRESULT </span>is true, <span class="s11">PROCESS.RESULT </span>blocks until <span class="s16">PROCESS </span>finishes, if necessary; otherwise, it returns <span class="s11">NIL </span>immediately if <span class="s16">PROCESS </span>is still running. <span class="s16">PROCESS </span>must be the actual process handle returned from <span class="s11">ADD.PROCESS</span>, not a process name, as the association between handle and name disappears when the process finishes (and the process handle itself is then garbage collected if no one else has a pointer to it).</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PROCESS.FINISHEDP </b><i>PROCESS</i>)                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">True if <span class="s16">PROCESS </span>has terminated. The value returned is an indication of how it finished:</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">NORMAL <span class="p">or </span>ERROR<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PROCESSP </b><i>PROC</i>)                                                <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">True if <span class="s16">PROC </span>is the handle of an active process, i.e., one that has not yet finished.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>RELPROCESSP </b><i>PROCHANDLE</i>)                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">True if <span class="s16">PROCHANDLE </span>is the handle of a deleted process. This is analogous to <span class="s11">RELSTKP</span>. It differs from <span class="s11">PROCESS.FINISHEDP </span>in that it never causes an error, while <span class="s11">PROCESS.FINISHEDP </span>can cause an error if its <span class="s16">PROC </span>argument is not a process at all.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>RESTART.PROCESS </b><i>PROC</i>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Unwinds <span class="s16">PROC </span>to its top level and reevaluates its form. This is effectively a</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">DEL.PROCESS <span class="p">followed by the original </span>ADD.PROCESS<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PROCESSES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>MAP.PROCESSES </b><i>MAPFN</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Maps over all processes, calling <span class="s16">MAPFN </span>with three arguments: the process handle, its name, and its form.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>FIND.PROCESS </b><i>PROC ERRORFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">PROC </span>is a process handle or the name of a process, returns the process handle for it, else <span class="s11">NIL</span>. If <span class="s16">ERRORFLG </span>is <span class="s11">T</span>, generates an error if <span class="s16">PROC </span>is not, and does not name, a live process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Process Control Constructs                                                                                                                    </h4><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>BLOCK </b><i>MSECSWAIT TIMER</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Yields control to the next waiting process, assuming any is ready to run. If <span class="s16">MSECSWAIT </span>is specified, it is a number of milliseconds to wait before returning, or <span class="s11">T</span>, meaning wait forever (until explicitly woken). Alternatively, <span class="s16">TIMER </span>can be given as a millisecond timer (as returned by <span class="s11">SETUPTIMER</span>, Chapter 12) of an absolute time at which to wake up. In any of those cases, the process enters the <i>waiting </i>state until the time limit is up. <span class="s11">BLOCK </span>with no arguments leaves the process in the <i>runnable </i>state, i.e., it returns as soon as every other runnable process of the same priority has had a chance.</p><p class="s11" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">BLOCK <span class="p">can be aborted by interrupts such as Control-D, Control-E, or Control-B. </span>BLOCK <span class="p">will return before its timeout is completed, if the process is woken by </span>WAKE.PROCESS<span class="p">, </span>PROCESS.EVAL<span class="p">, or </span>PROCESS.APPLY<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>DISMISS </b><i>MSECSWAIT TIMER NOBLOCK</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">DISMISS <span class="p">is used to dismiss the current process for a given period of time. Similar to</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">BLOCK<span class="p">, except that:</span></p><ul id="l58"><li><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: -12pt;text-align: left;">DISMISS <span class="p">is guaranteed not to return until the specified time has elapsed</span></p></li><li><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -12pt;text-align: left;"><span class="s16">MSECSWAIT </span>cannot be <span class="s11">T </span>to wait forever</p></li><li><p style="padding-top: 6pt;padding-left: 125pt;text-indent: -12pt;text-align: left;">If <span class="s16">NOBLOCK </span>is <span class="s11">T</span>, <span class="s11">DISMISS </span>will not allow other processes to run, but will busy-wait until the amount of time given has elapsed.</p></li></ul><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>WAKE.PROCESS </b><i>PROC STATUS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Explicitly wakes process <span class="s16">PROC</span>, i.e., makes it <i>runnable</i>, and causes its call to <span class="s11">BLOCK </span>(or other waiting function) to return <span class="s16">STATUS</span>. This is one simple way to notify a process of some happening; however, note that if <span class="s11">WAKE.PROCESS </span>is applied to a process more than once before the process actually gets its turn to run, it sees only the latest <span class="s16">STATUS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SUSPEND.PROCESS </b><i>PROC</i>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Blocks process <span class="s16">PROC </span>indefinitely, i.e., <span class="s16">PROC </span>will not run until it is woken by a</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">WAKE.PROCESS<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following three functions allow access to the stack context of some other process. They require a little bit of care, and are computationally non-trivial, but they do provide a more powerful way of manipulating another process than <span class="s11">WAKE.PROCESS </span>allows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PROCESS.EVALV </b><i>PROC VAR</i>)                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Performs <span class="s11">(EVALV </span><span class="s16">VAR</span><span class="s11">) </span>in the stack context of <span class="s16">PROC</span>.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PROCESS.EVAL </b><i>PROC FORM WAITFORRESULT</i>)                         <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Evaluates <span class="s16">FORM </span>in the stack context of <span class="s16">PROC</span>. If <span class="s16">WAITFORRESULT </span>is true, blocks until the evaluation returns a result, else allows the current process to run in parallel with the evaluation. Any errors that occur will be in the context of <span class="s16">PROC</span>, so be careful. In particular, note that</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(PROCESS.EVAL <i>PROC </i>’(NLSETQ (FOO)))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">and</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(NLSETQ (PROCESS.EVAL <i>PROC </i>’(FOO)))</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">behave quite differently if <span class="s11">FOO </span>causes an error. And it is quite permissible to intentionally cause an error in proc by performing</p><p class="s11" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(PROCESS.EVAL <i>PROC </i>’(ERROR!))</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WAITFORRESULT </span>is true and the computation in the other process aborts or the other process is killed <span class="s11">PROCESS.EVAL </span>returns <span class="s11">:ABORTED</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">After <span class="s16">FORM </span>is evaluated in <span class="s16">PROC</span>, the process <span class="s16">PROC </span>is woken up, even if it was running <span class="s11">BLOCK </span>or <span class="s11">AWAIT.EVENT</span>. This is necessary because an event of interest may have occurred while the process was evaluating <span class="s16">FORM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PROCESS.APPLY </b><i>PROC FN ARGS WAITFORRESULT</i>)                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Performs <span class="s11">(APPLY </span><span class="s16">FN ARGS</span><span class="s11">) </span>in the stack context of <span class="s16">PROC</span>. Note the same warnings as with <span class="s11">PROCESS.EVAL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Events                                                                                                                                                        </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">An &quot;event&quot; is a synchronizing primitive used to coordinate related processes, typically producers and consumers. Consumer processes can &quot;wait&quot; on events, and producers &quot;notify&quot; events.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PROCESSES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CREATE.EVENT </b><i>NAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns an instance of the <span class="s11">EVENT </span>datatype, to be used as the event argument to functions listed below. <span class="s16">NAME </span>is arbitrary, and is used for debugging or status information.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>AWAIT.EVENT </b><i>EVENT TIMEOUT TIMERP</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Suspends the current process until <span class="s16">EVENT </span>is notified, or until a timeout occurs. If <span class="s16">TIMEOUT </span>is <span class="s11">NIL</span>, there is no timeout. Otherwise, timeout is either a number of milliseconds to wait, or, if <span class="s16">TIMERP </span>is <span class="s11">T</span>, a millisecond timer set to expire at the desired time using <span class="s11">SETUPTIMER </span>(see Chapter 12).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>NOTIFY.EVENT </b><i>EVENT ONCEONLY</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If there are processes waiting for <span class="s16">EVENT </span>to occur, causes those processes to be placed in the running state, with <span class="s16">EVENT </span>returned as the value from <span class="s11">AWAIT.EVENT</span>. If <span class="s16">ONCEONLY </span>is true, only runs the first process waiting for the event (this should only be done if the programmer knows that there can only be one process capable of responding to the event at once).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The meaning of an event is up to the programmer. In general, however, the notification of an event is merely a hint that something of interest to the waiting process has happened; the process should still verify that the conceptual event actually occurred. That is, <i>the process should be written so that it operates correctly even if woken up before the timeout and in the absence of the notified event. </i>In particular, the completion of <span class="s11">PROCESS.EVAL </span>and related operations in effect wakes up the process in which they were performed, since there is no secure way of knowing whether the event of interest occurred while the process was busy performing the <span class="s11">PROCESS.EVAL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There is currently one class of system-defined events, used with the network code. Each Pup and NS socket has associated with it an event that is notified when a packet arrives on the socket; the event can be obtained by calling <span class="s11">PUPSOCKETEVENT </span>or <span class="s11">NSOCKETEVENT</span>, respectively (see Chapter 30).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Monitors                                                                                                                                                     </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">It is often the case that cooperating processes perform operations on shared structures, and some mechanism is needed to prevent more than one process from altering the structure at the same time. Some languages have a construct called a monitor, a collection of functions that access a common structure with mutual exclusion provided and enforced by the compiler via the use of monitor locks. Medley has taken this implementation notion as the basis for a mutual exclusion capability suitable for a dynamically-scoped environment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A monitorlock is an object created by you and associated with (e.g., stored in) some shared structure that is to be protected from simultaneous access. To access the structure, a program waits for the lock to be free, then takes ownership of the lock, accesses the structure, then releases the lock. The functions and macros below are used:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>CREATE.MONITORLOCK </b><i>NAME</i>)                                      <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns an instance of the <span class="s11">MONITORLOCK </span>datatype, to be used as the lock argument to functions listed below.  <span class="s16">NAME </span>is arbitrary, and is used for debugging or status information.</p><p class="s16" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>WITH.MONITOR </b>LOCK FORM<span class="s32">1 </span>... FORM<span class="s32">N</span><span class="s11">)                              </span><span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Evaluates <span class="s16">FORM</span><span class="s32">1 </span><span class="s11">... </span><span class="s16">FORM</span><span class="s32">N </span>while owning <span class="s16">LOCK</span>, and returns the value of <span class="s16">FORM</span><span class="s32">N</span>. This construct is implemented so that the lock is released even if the form is exited via error (currently implemented with <span class="s11">RESETLST</span>).</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Ownership of a lock is dynamically scoped: if the current process already owns the lock (e.g., if the caller was itself inside a <span class="s11">WITH.MONITOR </span>for this lock), <span class="s11">WITH.MONITOR </span>does not wait for the lock to be free before evaluating <span class="s16">FORM</span><span class="s32">1 </span><span class="s11">... </span><span class="s16">FORM</span><span class="s32">N</span>.</p><p class="s16" style="padding-top: 11pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>WITH.FAST.MONITOR </b>LOCK FORM<span class="s32">1 </span>... FORM<span class="s32">N</span><span class="s11">)                         </span><span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">WITH.MONITOR</span>, but implemented without the <span class="s11">RESETLST</span>. User interrupts (e.g., Control-E) are inhibited during the evaluation of <span class="s16">FORM</span><span class="s32">1 </span><span class="s11">... </span><span class="s16">FORM</span><span class="s32">N</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">Programming restriction: the evaluation of </span>FORM<span class="s32">1 </span><span class="s11">... </span>FORM<span class="s32">N </span><span class="p">must not error (the lock would not be released). This construct is mainly useful when the forms perform a small, safe computation that never errors and need never be interrupted.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>MONITOR.AWAIT.EVENT </b><i>RELEASELOCK EVENT TIMEOUT TIMERP</i>)         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For use in blocking inside a monitor. Performs <span class="s11">(AWAIT.EVENT </span><span class="s16">EVENT TIMEOUT TIMERP</span><span class="s11">)</span>, but releases <span class="s16">RELEASELOCK </span>first, and reobtains the lock (possibly waiting) on wakeup.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Typical use for <span class="s11">MONITOR.AWAIT.EVENT</span>: A function wants to perform some operation on <span class="s16">FOO</span>, but only if it is in a certain state. It has to obtain the lock on the structure to make sure that the state of the structure does not change between the time it tests the state and performs the operation. If the state turns out to be bad, it then waits for some other process to make the state good, meanwhile releasing the lock so that the other process can alter the structure.</p><p class="s11" style="padding-top: 5pt;padding-left: 204pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(WITH.MONITOR <i>FOO-LOCK</i></p><p class="s11" style="padding-left: 210pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(until <i>CONDITION-OF-FOO</i></p><p class="s11" style="padding-left: 204pt;text-indent: 9pt;line-height: 88%;text-align: left;">do (MONITOR.AWAIT.EVENT <i>FOO-LOCK EVENT-FOO- CHANGED TIMEOUT</i>))</p><p class="s16" style="padding-left: 219pt;text-indent: 0pt;line-height: 10pt;text-align: left;">OPERATE-ON-FOO<span class="s11">)</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">It is sometimes convenient for a process to have <span class="s11">WITH.MONITOR </span>at its top level and then do all its interesting waiting using <span class="s11">MONITOR.AWAIT.EVENT</span>. Not only is this often cleaner, but in the present implementation in cases where the lock is frequently accessed, it saves the <span class="s11">RESETLST </span>overhead of <span class="s11">WITH.MONITOR</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Programming restriction: There must not be an <span class="s11">ERRORSET </span>between the enclosing <span class="s11">WITH.MONITOR </span>and the call to <span class="s11">MONITOR.AWAIT.EVENT </span>such that the <span class="s11">ERRORSET </span>would catch an <span class="s11">ERROR! </span>and continue inside the monitor, for the lock would not have been</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PROCESSES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">reobtained. (The reason for this restriction is that, although <span class="s11">MONITOR.AWAIT.EVENT </span>won’t itself error, you could have caused an error with an interrupt, or a <span class="s11">PROCESS.EVAL </span>in the context of the waiting process that produced an error.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">On rare occasions it may be useful to manipulate monitor locks directly. The following two functions are used in the implementation of <span class="s11">WITH.MONITOR</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>OBTAIN.MONITORLOCK </b><i>LOCK DONTWAIT UNWINDSAVE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Takes possession of <span class="s16">LOCK</span>, waiting if necessary until it is free, unless <span class="s16">DONTWAIT </span>is true, in which case it returns <span class="s11">NIL </span>immediately. If <span class="s16">UNWINDSAVE </span>is true, performs a <span class="s11">RESETSAVE </span>to be unwound when the enclosing <span class="s11">RESETLST </span>exits. Returns <span class="s16">LOCK </span>if <span class="s16">LOCK </span>was successfully obtained, <span class="s11">T </span>if the current process already owned <span class="s16">LOCK</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>RELEASE.MONITORLOCK </b><i>LOCK EVENIFNOTMINE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Releases <span class="s16">LOCK </span>if it is owned by the current process, and wakes up the next process, if any, waiting to obtain the lock.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">EVENIFNOTMINE </span>is non-<span class="s11">NIL</span>, the lock is released even if it is not owned by the current process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">When a process is deleted, any locks it owns are released.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Global Resources                                                                                                                                      </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The biggest source of problems in the multi-processing environment is the matter of global resources. Two processes cannot both use the same global resource if there can be a process switch in the middle of their use (currently this means calls to <span class="s11">BLOCK</span>, but ultimately with a preemptive scheduler means anytime). Thus, user code should be wary of its own use of global variables, if it ever makes sense for the code to be run in more than one process at a time. &quot;State&quot; variables private to a process should generally be bound in that process; structures that are shared among processes (or resources used privately but expensive to duplicate per process) should be protected with monitor locks or some other form of synchronization.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Aside from user code, however, there are many <i>system </i>global variables and resources. Most of these arise historically from the single-process Interlisp-10 environment, and will eventually be changed in Medley to behave appropriately in a multi-processing environment. Some have already been changed, and are described below. Two other resources not generally thought of as global variables— the keyboard and the mouse—are particularly idosyncratic, and are discussed in the next section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span><img width="547" height="9" alt="image" src="Image_058.png"/></span></p><p style="padding-top: 1pt;padding-left: 30pt;text-indent: 3pt;text-align: justify;">are allocated per process in Medley: primary input and output (the streams affected by <span class="s11">INPUT </span>and <span class="s11">OUTPUT</span>), terminal input and output (the streams designated by the name <span class="s11">T</span>), the primary read table and primary terminal table, and dribble files. Thus, each process can print to its own primary output,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">print to the terminal, read from a different primary input, all without interfering with another process’s reading and printing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Each process begins life with its primary and terminal input / output streams set to a dummy stream. If the process attempts input or output using any of those dummy streams, e.g., by calling <span class="s11">(READ T)</span>, or <span class="s11">(PRINT &amp; T)</span>, a tty window is automatically created for the process, and that window becomes the primary input / output and terminal input / output for the process. The default tty window is created at or near the region specified in the variable <span class="s11">DEFAULTTTYREGION</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">A process can, of course, call <span class="s11">TTYDISPLAYSTREAM </span>explicitly to give itself a tty window of its own choosing, in which case the automatic mechanism never comes into play. Calling <span class="s11">TTYDISPLAYSTREAM </span>when a process has no tty window not only sets the terminal streams, but also sets the primary input and output streams to be that window, assuming they were still set to the dummy streams.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>HASTTYWINDOWP </b><i>PROCESS</i>)                                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">T </span>if the process <span class="s16">PROCESS </span>has a tty window; <span class="s11">NIL </span>otherwise. If <span class="s16">PROCESS </span>is <span class="s11">NIL</span>, it defaults to the current process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Other system resources that are typically changed by <span class="s11">RESETFORM</span>, <span class="s11">RESETLST</span>, or <span class="s11">RESETVARS </span>are all global entities. In the multiprocessing environment, these constructs are suspect, as there is no provision for &quot;undoing&quot; them when a process switch occurs. For example, in the current release of Medley, it is not possible to set the print radix to 8 inside only one process, as the print radix is a global entity.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Note that <span class="s11">RESETFORM </span>and similar expressions are perfectly valid in the process world, and even quite useful, when they manipulate things strictly within one process. The process world is arranged so that deleting a process also unwinds any <span class="s11">RESETxxx </span>expressions that were performed in the process and are still waiting to be unwound, exactly as if a Control-D had reset the process to the top. Additionally, there is an implicit <span class="s11">RESETLST </span>at the top of each process, so that <span class="s11">RESETSAVE </span>can be used as a way of providing &quot;cleanup&quot; functions for when a process is deleted. For these, the value of <span class="s11">RESETSTATE </span>(see Chapter 14) is <span class="s11">NIL </span>if the process finished normally, <span class="s11">ERROR </span>if it was aborted by an error, <span class="s11">RESET </span>if the process was explicitly deleted, and <span class="s11">HARDRESET </span>if the process is being restarted after a <span class="s11">HARDRESET </span>or a <span class="s11">RESTART.PROCESS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Typein and the TTY Process                                                                                                                    </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">There is one global resource, the keyboard, that is particularly problematic to share among processes. Consider, for example, having two processes both performing <span class="s11">(READ T)</span>. Since the keyboard input routines block while there is no input, both processes would spend most of their time blocking, and it would simply be a matter of chance which process received each character of type-in.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PROCESSES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">To resolve such dilemmas, the system designates a distinguished process, termed the <i>tty process</i>, that is assumed to be the process that is involved in terminal interaction. Any type-in from the keyboard goes to that process. If a process other than the tty process requests keyboard input, it blocks until it becomes the tty process. When the tty process is switched (in any of the ways described further below), any typeahead that occurred before the switch is saved and associated with the current tty process. Thus, it is always the case that keystrokes are sent to the process that is the tty process at the time of the keystrokes, regardless of when that process actually gets around to reading them.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">BACKGROUNDFNS <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A list of functions to call &quot;in the background&quot;. The system runs a process (called &quot;BACKGROUND&quot;) whose sole task is to call each of the functions on the list BACKGROUNDFNS repeatedly. Each element is the name of a function of no arguments. This is a good place to put cheap background tasks that only do something once in a while and hence do not want to spend their own separate process on it. However, note that it is considered good citizenship for a background function with a time-consuming task to spawn a separate process to do it, so that the other background functions are not delayed.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">TTYBACKGROUNDFNS <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This list is like BACKGROUNDFNS, but the functions are only called while in a tty input wait. That is, they always run in the tty process, and only when the user is not actively typing. For example, the flashing caret is implemented by a function on this list. Again, functions on this list should spend very little time (much less than a second), or else spawn a separate process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">It is less immediately obvious how to handle keyboard interrupt characters, as their action is asynchronous and not always tied to type-in. Interrupt handling is described in the Handling of Interrupts section below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 9pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Switching the TTY Process</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Any process can make itself be the tty process by calling <span class="s11">TTY.PROCESS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>TTY.PROCESS </b><i>PROC</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the handle of the current tty process. In addition, if <span class="s16">PROC </span>is non-<span class="s11">NIL</span>, makes it be the tty process. The special case of <span class="s16">PROC </span><span class="s11">= T </span>is interpreted to mean the executive process; this is sometimes useful when a process wants to explicitly give up being the tty process.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>TTY.PROCESSP </b><i>PROC</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">True if <span class="s16">PROC </span>is the tty process; <span class="s16">PROC </span>defaults to the running process. Thus,</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(TTY.PROCESSP) <span class="p">is true if the caller is the tty process.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;text-align: justify;">(<b>WAIT.FOR.TTY </b><i>MSECS NEEDWINDOW</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Efficiently waits until <span class="s11">(TTY.PROCESSP) </span>is true. <span class="s11">WAIT.FOR.TTY </span>is called internally by the system functions that read from the terminal; user code thus need only call it in special cases.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">MSECS </span>is non-<span class="s11">NIL</span>, it is the number of milliseconds to wait before timing out. If <span class="s11">WAIT.FOR.TTY </span>times out before <span class="s11">(TTY.PROCESSP) </span>is true, it returns <span class="s11">NIL</span>, otherwise it returns <span class="s11">T</span>. If <span class="s16">MSECS </span>is <span class="s11">NIL</span>, <span class="s11">WAIT.FOR.TTY </span>will not time out.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NEEDWINDOW </span>is non-<span class="s11">NIL</span>, <span class="s11">WAIT.FOR.TTY </span>opens a <span class="s11">TTY </span>window for the current process if one isn’t already open.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">WAIT.FOR.TTY <span class="p">spawns a new mouse process if called under the mouse process (see</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">SPAWN.MOUSE<span class="p">, in the Keeping the Mouse Alive section below).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">In some cases, such as in functions invoked as a result of mouse action or a user’s typed-in call, it is reasonable for the function to invoke <span class="s11">TTY.PROCESS </span>itself so that it can take subsequent user type in. In other cases, however, this is too undisciplined; it is desirable to let you designate which process type-in should be directed to. This is most conveniently done by mouse action.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The system supports the model that &quot;to type to a process, you click in its window.&quot; To cooperate with this model, any process desiring keyboard input should put its process handle as the <span class="s11">PROCESS </span>property of its window(s). To handle the common case, the function <span class="s11">TTYDISPLAYSTREAM </span>does this automatically when the ttydisplaystream is switched to a new window. A process can own any number of windows; clicking in any of those windows gives the process the tty.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This mechanism suffices for most casual process writers. For example, if a process wants all its input / output interaction to occur in a particular window that it has created, it should just make that window be its tty window by calling <span class="s11">TTYDISPLAYSTREAM</span>. Thereafter, it can <span class="s11">PRINT </span>or <span class="s11">READ </span>to / from the <span class="s11">T </span>stream; if the process is not the tty process at the time that it calls <span class="s11">READ</span>, it will block until the user clicks in the window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For those needing tighter control over the tty, the default behavior can be overridden or supplemented. The remainder of this section describes the mechanisms involved.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">There is a window property <span class="s11">WINDOWENTRYFN </span>that controls whether and how to switch the tty to the process owning a window. The mouse handler, before invoking any normal <span class="s11">BUTTONEVENTFN</span>, specifically notices the case of a button going down in a window that belongs to a process (i.e., has a <span class="s11">PROCESS </span>window property) that is not the tty process. In this case, it invokes the window’s <span class="s11">WINDOWENTRYFN </span>of one argument <span class="s11">(WINDOW)</span>.  <span class="s11">WINDOWENTRYFN </span>defaults to <span class="s11">GIVE.TTY.PROCESS</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;text-align: justify;">(<b>GIVE.TTY.PROCESS </b><i>WINDOW</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WINDOW </span>has a <span class="s11">PROCESS </span>property, performs <span class="s11">(TTY.PROCESS (WINDOWPROP </span><span class="s16">WINDOW </span><b>’</b><span class="s11">PROCESS)) </span>and then invokes <span class="s16">WINDOW</span>’s <span class="s11">BUTTONEVENTFN </span>function (or <span class="s11">RIGHTBUTTONFN </span>if the right button is down).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PROCESSES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">There are some cases where clicking in a window does not always imply that the user wants to talk to that window. For example, clicking in a text editor window with a shift key held down means to &quot;shift-select&quot; some piece of text into the input buffer of the <i>current </i>tty process. The editor supports this by supplying a <span class="s11">WINDOWENTRYFN </span>that performs <span class="s11">GIVE.TTY.PROCESS </span>if no shift key is down, but goes into its shift-select mode, without changing the tty process, if a shift key is down. The shift-select mode performs a <span class="s11">BKSYSBUF </span>of the selected text when the shift key is let up, the <span class="s11">BKSYSBUF </span>feeding input to the current tty process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">Sometimes a process wants to be notified when it becomes the tty process, or stops being the tty process. To support this, there are two process properties, </span>TTYEXITFN <span class="p">and </span>TTYENTRYFN<span class="p">. The actions taken by </span>TTY.PROCESS <span class="p">when it switches the tty to a new process are as follows: the former tty process’s </span>TTYEXITFN <span class="p">is called with two arguments </span>(<i>OLDTTYPROCESS NEWTTYPROCESS</i>)<span class="p">; the new process is made the tty process; finally, the new tty process’s </span>TTYENTRYFN <span class="p">is called with two arguments </span>(<i>NEWTTYPROCESS OLDTTYPROCESS</i>)<span class="p">. Normally the </span>TTYENTRYFN <span class="p">and </span>TTYEXITFN <span class="p">need only their first argument, but the other process involved in the switch is supplied for completeness. In the present system, most processes want to interpret the keyboard in the same way, so it is considered the responsibility of any process that changes the keyboard interpretation to restore it to the normal state by its </span>TTYEXITFN<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A window is &quot;owned&quot; by the last process that anyone gave as the window’s <span class="s11">PROCESS </span>property. Ordinarily there is no conflict here, as processes tend to own disjoint sets of windows (though, of course, cooperating processes can certainly try to confuse each other). The only likely problem arises with that most global of windows, <span class="s11">PROMPTWINDOW</span>. Programs should not be tempted to read from <span class="s11">PROMPTWINDOW</span>. This is not usually necessary anyway, as the first attempt to read from <span class="s11">T </span>in a process that has not set its <span class="s11">TTYDISPLAYSTREAM </span>to its own window causes a tty window to be created for the process (see the Global Resources section above).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Handling of Interrupts</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">At the time that a keyboard interrupt character (see Chapter 29) is struck, any process could be running, and some decision must be made as to which process to actually interrupt. To the extent that keyboard interrupts are related to type-in, most interrupts are taken in the tty process; however, the following are handled specially:</p><p class="s15" style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">RESET <span class="p">(initially Control-D)</span></p><p class="s15" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">ERROR <span class="p">(initially Control-E) These interrupts are taken in the mouse</span></p><p style="padding-left: 234pt;text-indent: 0pt;line-height: 91%;text-align: justify;">process, if the mouse is not in its idle state; otherwise they are taken in the tty process. Thus, Control-E can be used to abort some mouse-invoked window action, such as the Shape command. As a consequence, note that if the mouse invokes some lengthy computation that the user thinks of as &quot;background&quot;, Control-E still aborts it, even though that may not have been what the user intended. Such lengthy computations, for various reasons, should generally be</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 281pt;text-indent: 0pt;line-height: 92%;text-align: justify;">performed by spawning a separate process to perform them. The <span class="s11">RESET </span>interrupt in a process other than the executive is interpreted exactly as if an error unwound the process to its top level: if the process was designated <span class="s11">RESTARTABLE </span>= <span class="s11">T</span>, it is restarted; otherwise it is killed.</p><p class="s15" style="padding-top: 6pt;padding-left: 166pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">HELP <span class="p">(initially Control-G) A menu of processes is presented to the user,</span></p><p style="padding-left: 281pt;text-indent: 0pt;line-height: 91%;text-align: justify;">who is asked to select which one the interrupt should occur in. The current tty process appears with a * next to its name at the top of the menu. The menu also includes an entry &quot;[Spawn Mouse]&quot;, for the common case of needing a mouse because the mouse process is currently tied up running someone’s <span class="s11">BUTTONEVENTFN</span>; selecting this entry spawns a new mouse process, and no break occurs.</p><p style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s15">BREAK </span>(initially Control-B) Performs the <span class="s11">HELP </span>interrupt in the mouse</p><p style="padding-left: 281pt;text-indent: 0pt;line-height: 91%;text-align: justify;">process, if the mouse is not in its idle state; otherwise it is performed in the tty process.</p><p style="padding-top: 6pt;padding-left: 138pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><span class="s15">RUBOUT </span>(initially <span class="s11">DELETE</span>)     This    interrupt    clears    typeahead    in   <i>all</i></p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">processes.</p><p class="s15" style="padding-top: 7pt;padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: left;">RAID<span class="s11">, </span>STACK OVERFLOW</p><p style="padding-left: 281pt;text-indent: -76pt;line-height: 92%;text-align: justify;"><span class="s15">STORAGE FULL </span>These interrupts always occur in whatever process was running at the time the interrupt struck. In the cases of <span class="s11">STACK OVERFLOW </span>and <span class="s11">STORAGE FULL</span>, this means that the interrupt is more likely to strike in the offending process (especially if it is a &quot;runaway&quot; process that is not blocking). Note, however, that this process is still not necessarily the guilty party; it could be an innocent bystander that just happened to use up the last of a resource prodigiously consumed by some other process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Keeping the Mouse Alive                                                                                                                          </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Since the window mouse handler runs in its own process, it is not available while a window’s <span class="s11">BUTTONEVENTFN </span>function (or any of the other window functions invoked by mouse action) is running. This leads to two sorts of problems: (1) a long computation underneath a <span class="s11">BUTTONEVENTFN </span>deprives the user of the mouse for other purposes, and (2) code that runs as a <span class="s11">BUTTONEVENTFN</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PROCESSES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">cannot rely on other <span class="s11">BUTTONEVENTFN</span>s running, which means that there some pieces of code that run differently from normal when run under the mouse process. These problems are addressed by the following functions:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>SPAWN.MOUSE </b><i>—</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Spawns another mouse process, allowing the mouse to run even if it is currently &quot;tied up&quot; under the current mouse process. This function is intended mainly to be typed in at the Lisp executive when you notice the mouse is busy.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>ALLOW.BUTTON.EVENTS</b>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Performs a <span class="s11">(SPAWN.MOUSE) </span>only when called underneath the mouse process. This should be called (once, on entry) by any function that relies on <span class="s11">BUTTONEVENTFN</span>s for completion, if there is any possibility that the function will itself be invoked by a mouse function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">It never hurts, at least logically, to call <span class="s11">SPAWN.MOUSE </span>or <span class="s11">ALLOW.BUTTON.EVENTS </span>needlessly, as the mouse process arranges to quietly kill itself if it returns from the user’s <span class="s11">BUTTONEVENTFN </span>and finds that another mouse process has sprung up in the meantime. (There is, of course, some computational expense.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Process Status Window                                                                                                                           </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The background menu command <span class="s11">PSW </span>(see Chapter 27) and the function <span class="s11">PROCESS.STATUS.WINDOW </span>(below) create a &quot;Process Status Window&quot;, that allows you to examine and manipulate all of the existing processes:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 122pt;text-indent: 0pt;text-align: left;"><span><img width="202" height="184" alt="image" src="Image_059.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The window consists of two menus. The top menu lists all the processes at the moment. Commands in the bottom menu operate on the process selected in the top menu (<span class="s11">EXEC </span>in the example above). The commands are:</p><p class="s15" style="padding-top: 6pt;padding-left: 96pt;text-indent: 0pt;text-align: justify;">BT<span class="p">, </span>BTV<span class="p">, </span>BTV*<span class="p">, </span>BTV! <span class="p">Displays a backtrace of the selected process.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 239pt;text-indent: -33pt;text-align: justify;">WHO? <span class="p">Changes the selection to the tty process, i.e., the one currently in control of the keyboard.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 240pt;text-indent: -37pt;text-align: justify;">KBD<span class="s19"></span><span class="s21"> </span><span class="p">Associates the keyboard with the selected process; i.e., makes the selected process be the tty process.</span></p><p style="padding-top: 6pt;padding-left: 240pt;text-indent: -33pt;text-align: justify;"><span class="s15">INFO </span>If the selected process has an <span class="s11">INFOHOOK </span>property, calls it. The hook may be a function, which is then applied to two arguments, the process and the button (<span class="s11">LEFT </span>or <span class="s11">MIDDLE</span>) used to invoke <span class="s11">INFO</span>, or a form, which is simply <span class="s11">EVAL</span>’ed. The <span class="s11">APPLY </span>or <span class="s11">EVAL </span>happens in the context of the selected process, using <span class="s11">PROCESS.APPLY </span>or <span class="s11">PROCESS.EVAL</span>. The <span class="s11">INFOHOOK </span>process property can be set using <span class="s11">PROCESSPROP </span>(see the Creating and Destroying Processes section above).</p><p class="s15" style="padding-top: 6pt;padding-left: 240pt;text-indent: -39pt;line-height: 93%;text-align: justify;">BREAK <span class="p">Enter a break under the selected process. This has the side effect of waking the process with the value returned from the break.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 206pt;text-indent: 0pt;text-align: justify;">KILL <span class="p">Deletes the selected process.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">RESTART  <span class="p">Restarts the selected process.</span></p><p style="padding-top: 6pt;padding-left: 240pt;text-indent: -33pt;text-align: justify;"><span class="s15">WAKE </span>Wakes the selected process. Prompts for a value to wake it with (see <span class="s11">WAKE.PROCESS</span>).</p><p class="s15" style="padding-top: 7pt;padding-left: 240pt;text-indent: -49pt;text-align: left;">SUSPEND <span class="p">Suspends the selected process; i.e., causes it to block indefinitely (until explicitly woken).</span></p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PROCESS.STATUS.WINDOW </b><i>WHERE</i>)                                  <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Puts up a process status window that provides several debugging commands for manipulating running processes. If the window is already up, <span class="s11">PROCESS.STATUS.WINDOW </span>refreshes it. If <span class="s16">WHERE </span>is a position, the window is placed in that position; otherwise, you are prompted for a position.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Currently, the process status window runs under the mouse process, like other menus, so if the mouse is unavailable (e.g., a mouse function is performing an extensive computation), you may be unable to use the process status window (you can try <span class="s11">SPAWN.MOUSE</span>, of course).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Non-Process Compatibility                                                                                                                      </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This section describes some considerations for authors of programs that ran in the old single-process Medley environment, and now want to make sure they run properly in the multi-processing world. The biggest problem to watch out for is code that runs underneath the mouse handler. Writers of mouse handler functions should remember that in the process world the mouse handler runs in its own process, and hence (a) you cannot depend on finding information on the stack (stash it in the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">PROCESSES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">window instead), and (b) while your function is running, the mouse is not available (if you have any non-trivial computation to do, spawn a process to do it, notify one of your existing processes to do it, or use <span class="s11">PROCESS.EVAL </span>to run it under some other process).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The following functions are meaningful even if the process world is not on: <span class="s11">BLOCK </span>(invokes the system background routine, which includes handling the mouse); <span class="s11">TTY.PROCESS</span>, <span class="s11">THIS.PROCESS </span>(both return <span class="s11">NIL</span>); and <span class="s11">TTY.PROCESSP </span>(returns <span class="s11">T</span>, i.e., anyone is allowed to take tty input). In addition, the following two functions exist in both worlds:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>EVAL.AS.PROCESS </b><i>FORM</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">Same as </span>(ADD.PROCESS <i>FORM </i>’RESTARTABLE ’NO)<span class="p">, when processes are running, </span>EVAL <span class="p">when not. This is highly recommended for mouse functions that perform any non-trivial activity.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: -24pt;line-height: 17pt;text-align: left;">(<b>EVAL.IN.TTY.PROCESS </b><i>FORM WAITFORRESULT</i>) <span class="p">[Function] Same as </span>(PROCESS.EVAL (TTY.PROCESS) <i>FORM WAITFORRESULT</i>)<span class="p">, when processes</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">are running, <span class="s11">EVAL </span>when not.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Most of the process functions that do not take a process argument can be called even if processes aren’t running. <span class="s11">ADD.PROCESS </span>creates, but does not run, a new process (it runs when <span class="s11">PROCESSWORLD </span>is called).</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h1 style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 47pt;text-indent: -41pt;text-align: left;"><a name="bookmark25">PROCESSES</a></h1></li></ol><p style="padding-left: 6pt;text-indent: 0pt;line-height: 6pt;text-align: left;"><span><img width="640" height="8" alt="image" src="Image_060.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">The Interlisp-D Process mechanism provides an environment in which multiple Lisp processes can run in parallel. Each executes in its own stack space, but all share a global address space. The current process implementation is cooperative; i.e., process switches happen voluntarily, either when the process in control has nothing to do or</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">when it is in a convenient place to pause. There is no preemption or guaranteed service, so you cannot run something demanding (e.g., Chat) at the same time as something</p><p class="s5" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">that runs for long periods without yielding control. Keyboard input and network operations block with great frequency, so processes currently work best for highly interactive tasks (editing, making remote files).</p><p class="s5" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">In Interlisp-D, the process mechanism is already turned on, and is expected to stay on during normal operations, as some system facilities (in particular, most network</p><p class="s5" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">operations) require it. However, under exceptional conditions, the following function can be used to turn the world off and on:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">(PROCESSWORLD <span class="s33">FLG</span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Starts up the process world, or if <i>FLG </i>= <span class="s12">OFF</span>, kills all processes and turns it off.</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Normally does not return. The environment starts out with two processes: a</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">top-level <span class="s12">EVALQT </span>(the initial &quot;tty&quot; process) and the &quot;background&quot; process, which runs the window mouse handler and other system background tasks.</p><p class="s12" style="padding-top: 6pt;padding-left: 113pt;text-indent: 0pt;line-height: 106%;text-align: left;">PROCESSWORLD <span class="s5">is intended to be called at the top level of Interlisp, not from within a program. It does not toggle some sort of switch; rather, it constructs some new processes in a new part of the stack, leaving any callers of </span>PROCESSWORLD <span class="s5">in a now inaccessible part of the stack. Calling </span>(PROCESSWORLD ’OFF) <span class="s5">is the only way the call to </span>PROCESSWORLD <span class="s5">ever</span></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">returns.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(HARDRESET) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Resets the whole world, and rebuilds the stack from scratch. This is &quot;harder&quot; than doing <span class="s12">RESET </span>to every process, because it also resets system internal</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">processes (such as the keyboard handler).</p><p class="s12" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">HARDRESET <span class="s5">automatically turns the process world on (or resets it if it was on), unless the variable </span>AUTOPROCESSFLG <span class="s5">is </span>NIL<span class="s5">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 12pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Creating and Destroying Processes                                                               </h2><p class="s33" style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="s12">(ADD.PROCESS </span>FORM PROP <span class="s49">1 </span>VALUE <span class="s49">1 </span>... PROP<span class="s49">N </span>VALUE <span class="s49">N</span><span class="s12">) </span><span class="s5">[NoSpread Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: justify;">Creates a new process evaluating <i>FORM </i>, and returns its process handle. The process’s stack environment is the top level, i.e., the new process does not have access to the environment in which <span class="s12">ADD.PROCESS </span>was called; all such</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: justify;">information must be passed as arguments in <i>FORM </i>. The process runs until</p><p class="s33" style="padding-left: 162pt;text-indent: 0pt;text-align: justify;">FORM <span class="s5">returns or the process is explicitly deleted. An untrapped error within</span></p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: justify;">the process also deletes the process (unless its <span class="s12">RESTARTABLE </span>property is <span class="s12">T</span>), in which case a message is printed to that effect.</p><p class="s5" style="padding-top: 6pt;padding-left: 161pt;text-indent: 0pt;line-height: 106%;text-align: left;">The remaining arguments are alternately property names and values. Any property/value pairs acceptable to <span class="s12">PROCESSPROP </span>may be given, but the following two are directly relevant to <span class="s12">ADD.PROCESS</span>:</p><p class="s12" style="padding-top: 7pt;padding-left: 191pt;text-indent: 0pt;text-align: left;">NAME <span class="s5">Value should be a litatom; if not given, the process name is</span></p><p class="s5" style="padding-left: 233pt;text-indent: 0pt;text-align: left;">taken from <span class="s12">(CAR </span><i>FORM </i><span class="s12">)</span>. <span class="s12">ADD.PROCESS </span>may pack the name with a number to make it unique. This name is solely for the convenience of manipulating processes at Lisp typein; e.g., the name can be given as the <i>PROC </i>argument to most process</p><p class="s5" style="padding-left: 233pt;text-indent: 0pt;text-align: left;">functions, and the name appears in menus of processes.</p><p class="s5" style="padding-left: 234pt;text-indent: 0pt;text-align: left;">However, programs should normally only deal in process</p><p class="s5" style="padding-left: 234pt;text-indent: 0pt;text-align: left;">handles, both for efficiency and to avoid the confusion that can result if two processes have the same defining form.</p><p class="s12" style="padding-top: 7pt;padding-left: 173pt;text-indent: 0pt;text-align: left;">SUSPEND <span class="s5">If the value is non-</span>NIL<span class="s5">, the new process is created but then</span></p><p class="s5" style="padding-left: 234pt;text-indent: 0pt;text-align: left;">immediately suspended; i.e., the process does not actually run until woken by a <span class="s12">WAKE.PROCESS </span>(below).</p><p class="s12" style="padding-top: 10pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">(PROCESSPROP <span class="s33">PROC PROP NEWVALUE </span>) <span class="s5">[NoSpread Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Used to get or set the values of certain properties of process <i>PROC</i>, in a manner analogous to <span class="s12">WINDOWPROP</span>. If <i>NEWVALUE </i>is supplied (including if it is <span class="s12">NIL</span>),</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">property <i>PROP </i>is given that value. In all cases, returns the old value of the property. The following properties have special meaning for processes; all others are uninterpreted:</p><p class="s12" style="padding-top: 7pt;padding-left: 258pt;text-indent: -42pt;line-height: 107%;text-align: left;">NAME <span class="s5">Value is a litatom used for identifying the process to the user.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 216pt;text-indent: 0pt;text-align: left;">FORM <span class="s5">Value is the Lisp form used to start the process (readonly).</span></p><p class="s12" style="padding-top: 7pt;padding-left: 258pt;text-indent: -84pt;line-height: 107%;text-align: left;">RESTARTABLE <span class="s5">Value is a flag indicating the disposition of the process following errors or hard resets:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 210pt;text-indent: 0pt;line-height: 107%;text-align: justify;">NIL <span class="s5">or </span>NO <span class="s5">(the default): If an untrapped error (or Control-E or Control-D) causes its form to be exited, the process is</span></p><p class="s5" style="padding-left: 210pt;text-indent: 0pt;line-height: 107%;text-align: justify;">deleted. The process is also deleted if a <span class="s12">HARDRESET </span>(or Control-D from <span class="s12">RAID</span>) occurs, causing the entire Process world to be reinitialized.</p><p class="s12" style="padding-top: 6pt;padding-left: 209pt;text-indent: 0pt;line-height: 106%;text-align: left;">T <span class="s5">or </span>YES<span class="s5">: The process is automatically restarted on errors or </span>HARDRESET<span class="s5">. This is the normal setting for persistent &quot;background&quot; processes, such as the mouse process, that can safely restart themselves on errors.</span></p><p class="s5" style="padding-top: 7pt;padding-left: 209pt;text-indent: 0pt;line-height: 106%;text-align: left;"><span class="s12">HARDRESET</span>: The process is deleted as usual if an error causes its form to be exited, but it <i>is </i>restarted on a <span class="s12">HARDRESET</span>. This setting is preferred for persistent</p><p class="s5" style="padding-left: 210pt;text-indent: 0pt;text-align: justify;">processes for which an error is an unusual condition, one that might repeat itself if the process were simply blindly restarted.</p><p class="s12" style="padding-top: 7pt;padding-left: 209pt;text-indent: -84pt;line-height: 107%;text-align: left;">RESTARTFORM <span class="s5">If the value is non</span><span class="s38">-</span>NIL<span class="s5">, it is the form used if the process is restarted (instead of the value of the </span>FORM <span class="s5">property). Of course, the process must also have a non- </span>NIL RESTARTABLE <span class="s5">prop for this to have any effect.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 210pt;text-indent: -78pt;line-height: 107%;text-align: left;">BEFOREEXIT <span class="s5">If the value is the atom </span>DON’T<span class="s5">, it will not be interrupted by a </span>LOGOUT<span class="s5">. If </span>LOGOUT <span class="s5">is attempted before the process</span></p><p class="s5" style="padding-left: 209pt;text-indent: 0pt;text-align: left;">finishes, a message will appear saying that Interlisp is</p><p class="s5" style="padding-left: 210pt;text-indent: 0pt;line-height: 107%;text-align: left;">waiting for the process to finish. If you want the <span class="s12">LOGOUT </span>to proceed without waiting, you must use the process status</p><p class="s5" style="padding-left: 210pt;text-indent: 0pt;line-height: 11pt;text-align: left;">window (from the background menu) to delete the process.</p><p class="s12" style="padding-top: 7pt;padding-left: 209pt;text-indent: -72pt;line-height: 107%;text-align: left;">AFTEREXIT <span class="s5">Value indicates the disposition of the process following a resumption of Lisp after some exit ( </span>LOGOUT<span class="s5">, </span>SYSOUT<span class="s5">, </span>MAKESYS<span class="s5">). Possible values are:</span></p><p class="s12" style="padding-top: 7pt;padding-left: 209pt;text-indent: 0pt;text-align: left;">DELETE<span class="s5">: Delete the process.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 210pt;text-indent: 0pt;line-height: 107%;text-align: left;">SUSPEND<span class="s5">: Suspend the process; i.e., do not let it run until it is explicitly woken.</span></p><p class="s5" style="padding-top: 6pt;padding-left: 210pt;text-indent: 0pt;text-align: left;">An event: Cause the process to be suspended waiting for the event (See the Events section below).</p><p class="s12" style="padding-top: 7pt;padding-left: 143pt;text-indent: 0pt;text-align: left;">INFOHOOK <span class="s5">Value is a function or form used to provide information</span></p><p class="s5" style="padding-left: 210pt;text-indent: 0pt;line-height: 107%;text-align: left;">about the process, in conjunction with the <span class="s12">INFO </span>command in the process status window (see the Process Status</p><p class="s5" style="padding-left: 210pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Window section below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 204pt;text-indent: 0pt;text-align: left;">WINDOW <span class="s5">Value is a window associated with the process, the</span></p><p class="s5" style="padding-left: 258pt;text-indent: 0pt;text-align: left;">process’s &quot;main&quot; window. Used to switch the tty process to this process when you click in this window (see the</p><p class="s5" style="padding-left: 258pt;text-indent: 0pt;text-align: left;">Switching the TTY Process section below).</p><p class="s5" style="padding-top: 7pt;padding-left: 258pt;text-indent: 0pt;text-align: left;">Setting the <span class="s12">WINDOW </span>property does not set the primary I/O</p><p class="s5" style="padding-left: 258pt;text-indent: 0pt;line-height: 107%;text-align: left;">stream ( <span class="s12">NIL</span>) or the terminal I/O stream ( <span class="s12">T</span>) to the window. When a process is created, I/O operations to the <span class="s12">NIL </span>or <span class="s12">T </span>stream will cause a new window to appear.</p><p class="s12" style="padding-left: 258pt;text-indent: 0pt;line-height: 107%;text-align: left;">TTYDISPLAYSTREAM <span class="s5">(see Chapter 28) should be used to set the terminal i/o stream of a process to a specific window.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 258pt;text-indent: -78pt;line-height: 106%;text-align: left;">TTYENTRYFN <span class="s5">Value is a function that is applied to the process when the process is made the tty process (see the Switching the TTY Process section below).</span></p><p class="s12" style="padding-top: 6pt;padding-left: 258pt;text-indent: -72pt;line-height: 106%;text-align: justify;">TTYEXITFN <span class="s5">Value is a function that is applied to the process when the process ceases to be the tty process (see the Switching the TTY Process section below).</span></p><p class="s12" style="padding-top: 9pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">(THIS.PROCESS) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: left;">Returns the handle of the currently running process, or <span class="s12">NIL </span>if the Process world is turned off.</p><p class="s12" style="padding-top: 9pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">(DEL.PROCESS <span class="s33">PROC —</span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 161pt;text-indent: 0pt;line-height: 106%;text-align: left;">Deletes process <i>PROC</i>. <i>PROC </i>may be a process handle (returned by <span class="s12">ADD.PROCESS</span>), or its name. If <i>PROC </i>is the currently running process, <span class="s12">DEL.PROCESS </span>does not return!</p><p class="s12" style="padding-top: 10pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">(PROCESS.RETURN <span class="s33">VALUE </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 106%;text-align: left;">Terminates the currently running process, causing it to &quot;return&quot; <i>VALUE </i>. There is an implicit <span class="s12">PROCESS.RETURN </span>around the <i>FORM </i>argument given to <span class="s12">ADD.PROCESS</span>, so that normally a process can finish by simply returning; <span class="s12">PROCESS.RETURN </span>is supplied for earlier termination.</p><p class="s12" style="padding-top: 10pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(PROCESS.RESULT <span class="s33">PROCESS WAITFORRE SULT </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 106%;text-align: left;">If <i>PROCESS </i>has terminated, returns the value, if any, that it returned. This is either the value of a <span class="s12">PROCESS.RETURN </span>or the value returned from the form given to <span class="s12">ADD.PROCESS</span>. If the process was aborted, the value is <span class="s12">NIL</span>. If</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: left;"><i>WAITFORRE SULT </i>is true, <span class="s12">PROCESS.RESULT </span>blocks until <i>PROCESS </i>finishes, if necessary; otherwise, it returns <span class="s12">NIL </span>immediately if <i>PROCESS </i>is still</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">running. <i>PROCESS </i>must be the actual process handle returned from</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">ADD.PROCESS<span class="s5">, not a process name, as the association between handle and name disappears when the process finishes (and the process handle itself is then</span></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;">garbage collected if no one else has a pointer to it).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(PROCESS.FINISHEDP <span class="s33">PROCESS </span>)                               <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">True if <i>PROCESS </i>has terminated. The value returned is an indication of how it finished: <span class="s12">NORMAL </span>or <span class="s12">ERROR</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(PROCESSP <span class="s33">PROC</span>)                                        <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">True if <i>PROC </i>is the handle of an active process, i.e., one that has not yet finished.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(RELPROCESSP <span class="s33">PROCHANDLE </span>)                                 <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;line-height: 106%;text-align: left;">True if <i>PROCHANDLE </i>is the handle of a deleted process. This is analogous to <span class="s12">RELSTKP</span>. It differ s from <span class="s12">PROCESS.FINISHEDP </span>in that it never causes an error, while <span class="s12">PROCESS.FINISHEDP </span>can cause an error if its <i>PROC </i>argument is not a</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">process at all.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(RESTART.PROCESS <span class="s33">PROC</span>)                                  <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Unwinds <i>PROC </i>to its top level and reevaluates its form. This is effectively a</p><p class="s12" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">DEL.PROCESS <span class="s5">followed by the original </span>ADD.PROCESS<span class="s5">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(MAP.PROCESSES <span class="s33">MAPFN </span>)                                     <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Maps over all processes, calling <i>MAPFN </i>with three arguments: the process handle, its name, and its form.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(FIND.PROCESS <span class="s33">PROC ERRORFLG </span>)                             <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">If <i>PROC </i>is a process handle or the name of a process, returns the process</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">handle for it, else <span class="s12">NIL</span>. If <i>ERRORFLG </i>is <span class="s12">T</span>, generates an error if <i>PROC </i>is not, and does not name, a live process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Process Control Constructs                                                                            </h2><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(BLOCK <span class="s33">MSECSWAIT TIMER </span>)                                   <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Yields control to the next waiting process, assuming any is ready to run. If</p><p class="s33" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">MSECSWAIT <span class="s5">is specified, it is a number of milliseconds to wait before</span></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">returning, or <span class="s12">T</span>, meaning wait forever (until explicitly woken). Alternatively,</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><i>TIMER </i>can be given as a millisecond timer (as returned by <span class="s12">SETUPTIMER</span>,</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Chapter 12) of an absolute time at which to wake up. In any of those cases, the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">process enters the <i>waiting </i>state until the time limit is up. <span class="s12">BLOCK </span>with no</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">arguments leaves the process in the <i>runnable </i>state, i.e., it returns as soon as every other runnable process of the same priority has had a chance.</p><p class="s12" style="padding-top: 7pt;padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: left;">BLOCK <span class="s5">can be aborted by interrupts such as Control-D, Control-E, or Control-B. </span>BLOCK <span class="s5">will return before its timeout is completed, if the process is woken by </span>WAKE.PROCESS<span class="s5">, </span>PROCESS.EVAL<span class="s5">, or </span>PROCESS.APPLY<span class="s5">.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(DISMISS <span class="s33">MSECSWAIT TIMER NOBLOCK </span>) <span class="s5">[Function]</span></p><p class="s12" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: left;">DISMISS <span class="s5">is used to dismiss the current process for a given period of time. Similar to </span>BLOCK<span class="s5">, except that:</span></p><ul id="l59"><li><p class="s12" style="padding-top: 7pt;padding-left: 174pt;text-indent: -10pt;text-align: left;">DISMISS <span class="s5">is guaranteed not to return until the specified time has elapsed</span></p></li><li><p class="s5" style="padding-top: 7pt;padding-left: 174pt;text-indent: -11pt;text-align: left;"><i>MSECSWAIT </i>cannot be <span class="s12">T </span>to wait forever</p></li><li><p class="s5" style="padding-top: 7pt;padding-left: 174pt;text-indent: -11pt;line-height: 107%;text-align: left;">If <i>NOBLOCK </i>is <span class="s12">T</span>, <span class="s12">DISMISS </span>will not allow other processes to run, but will busy-wait until the amount of time given has elapsed.</p></li></ul><p class="s12" style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(WAKE.PROCESS <span class="s33">PROC S TATUS </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 106%;text-align: left;">Explicitly wakes process <i>PROC</i>, i.e., makes it <i>runnable </i>, and causes its call to <span class="s12">BLOCK </span>(or other waiting function) to return <i>S TATUS </i>. This is one simple way to notify a process of some happening; however, note that if <span class="s12">WAKE.PROCESS </span>is</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">applied to a process more than once before the process actually gets its turn to run, it sees only the latest <i>S TATUS </i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">(SUSPEND.PROCESS <span class="s33">PROC</span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Blocks process <i>PROC </i>indefinitely, i.e., <i>PROC </i>will not run until it is woken by a</p><p class="s12" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">WAKE.PROCESS<span class="s5">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">The following three functions allow access to the stack context of some other process.</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">They require a little bit of care, and are computationally non-trivial, but they do provide a more powerful way of manipulating another process than <span class="s12">WAKE.PROCESS </span>allows.</p><p class="s12" style="padding-top: 10pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(PROCESS.EVALV <span class="s33">PROC VAR </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Perform s <span class="s12">(EVALV </span><i>VAR </i><span class="s12">) </span>in the stack context of <i>PROC</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">(PROCESS.EVAL <span class="s33">PROC FORM WAITFORRE SULT </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Evaluates <i>FORM </i>in the stack context of <i>PROC</i>. If <i>WAITFORRE SULT </i>is true, blocks until the evaluation returns a result, else allows the current process to</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">run in parallel with the evaluation. Any errors that occur will be in the context of <i>PROC</i>, so be careful. In particular, note that</p><p class="s12" style="padding-top: 7pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">(PROCESS.EVAL <span class="s33">PROC </span>’(NLSETQ (FOO)))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 4pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">and</p><p class="s12" style="padding-top: 7pt;padding-left: 150pt;text-indent: 0pt;text-align: left;">(NLSETQ (PROCESS.EVAL <span class="s33">PROC </span>’(FOO)))</p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">behave quite differently if <span class="s12">FOO </span>causes an error. And it is quite permissible to intentionally cause an error in proc by performing</p><p class="s12" style="padding-top: 6pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">(PROCESS.EVAL <span class="s33">PROC </span>’(ERROR!))</p><p class="s5" style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">If errors are possible and <i>WAITFORRE SULT </i>is true, the caller should almost certainly make sure that <i>FORM </i>traps the errors; otherwise the caller could end up waiting forever if <i>FORM </i>unwinds back into the pre-existing stack context of <i>PROC</i>.</p><p class="s5" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;line-height: 106%;text-align: left;">After <i>FORM </i>is evaluated in <i>PROC</i>, the process <i>PROC </i>is woken up, even if it was running <span class="s12">BLOCK </span>or <span class="s12">AWAIT.EVENT</span>. This is necessary because an event of interest may have occurred while the process was evaluating <i>FORM </i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">(PROCESS.APPLY <span class="s33">PROC FN ARGS WAITFORRE SULT </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">Perform s <span class="s12">(APPLY </span><i>FN ARGS</i><span class="s12">) </span>in the stack context of <i>PROC</i>. Note the same warnings as with <span class="s12">PROCESS.EVAL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Events                                                                                                                </h2><p class="s5" style="padding-top: 9pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">An &quot;event&quot; is a synchronizing primitive used to coordinate related processes, typically producers and consumers. Consumer processes can &quot;wait&quot; on events, and producers &quot;notify&quot; events.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(CREATE.EVENT <span class="s33">NAME </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">Returns an instance of the <span class="s12">EVENT </span>datatype, to be used as the event argument to functions listed below. <i>NAME </i>is arbitrary, and is used for debugging or status</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 11pt;text-align: left;">information.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(AWAIT.EVENT <span class="s33">EVENT TIMEOUT TIMERP </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Suspends the current process until <i>EVENT </i>is notified, or until a timeout occurs. If <i>TIMEOUT </i>is <span class="s12">NIL</span>, there is no timeout. Otherwise, timeout is either a number of milliseconds to wait, or, if <i>TIMERP </i>is <span class="s12">T</span>, a millisecond timer set to expire at</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">the desired time using <span class="s12">SETUPTIMER </span>(see Chapter 12).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(NOTIFY.EVENT <span class="s33">EVENT ONCEONLY </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">If there are processes waiting for <i>EVENT </i>to occur, causes those processes to be placed in the running state, with <i>EVENT </i>returned as the value from <span class="s12">AWAIT.EVENT</span>. If <i>ONCEONLY </i>is true, only runs the first process waiting for</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">the event (this should only be done if the programmer knows that there can only be one process capable of responding to the event at once).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">The meaning of an event is up to the programmer. In general, however, the notification of an event is merely a hint that something of interest to the waiting process has</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">happened; the process should still verify that the conceptual event actually occurred.</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">That is, <i>the process should be written so that it operates correctly even if woken up before the timeout and in the absence of the notified event. </i>In particular, the completion of <span class="s12">PROCESS.EVAL </span>and related operations in effect wakes up the process in which they</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">were performed, since there is no secure way of knowing whether the event of interest occurred while the process was busy performing the <span class="s12">PROCESS.EVAL</span>.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">There is currently one class of system-defined events, used with the network code.</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 106%;text-align: left;">Each Pup and NS socket has associated with it an event that is notified when a packet arrives on the socket; the event can be obtained by calling <span class="s12">PUPSOCKETEVENT </span>or <span class="s12">NSOCKETEVENT</span>, respectively (see Chapter 32).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Monitors                                                                                                            </h2><p class="s5" style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">It is often the case that cooperating processes perform operations on shared structures, and some mechanism is needed to prevent more than one process from altering the</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">structure at the same time. Some languages have a construct called a monitor, a collection of functions that access a common structure with mutual exclusion provided and enforced by the compiler via the use of monitor locks. Interlisp-D has taken this implementation notion as the basis for a mutual exclusion capability suitable for a</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">dynamically-scoped environment.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">A monitorlock is an object created by you and associated with (e.g., stored in) some shared structure that is to be protected from simultaneous access. To access the</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">structure, a program waits for the lock to be free, then takes ownership of the lock, accesses the structure, then releases the lock. The functions and macros below are used:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">(CREATE.MONITORLOCK <span class="s33">NAME — </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: left;">Returns an instance of the <span class="s12">MONITORLOCK </span>datatype, to be used as the lock argument to functions listed below. <i>NAME </i>is arbitrary, and is used for</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;">debugging or status information.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 125pt;text-indent: 0pt;text-align: left;"><span class="s12">(WITH.MONITOR </span>LOCK FORM <span class="s49">1 </span>... FORM <span class="s49">N</span><span class="s12">) </span><span class="s5">[Macro]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Evaluates <i>FORM </i><i>1 </i>... <i>FORM </i><i>N </i>while owning <i>LOCK </i>, and returns the value of</p><p class="s5" style="padding-left: 161pt;text-indent: 0pt;text-align: left;"><i>FORM </i><i>N </i>. This construct is implemented so that the lock is released even if the form is exited via error (currently implemented with <span class="s12">RESETLST</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">Ownership of a lock is dynamically scoped: if the current process already owns the lock (e.g., if the caller was itself inside a <span class="s12">WITH.MONITOR </span>for this lock),</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s12">WITH.MONITOR </span>does not wait for the lock to be free before evaluating <i>FORM </i><i>1 </i>...</p><p class="s33" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">FORM <span class="s49">N </span><span class="s5">.</span></p><p class="s33" style="padding-top: 10pt;padding-left: 77pt;text-indent: 0pt;text-align: left;"><span class="s12">(WITH.FAST.MONITOR </span>LOCK FORM <span class="s49">1 </span>... FORM <span class="s49">N</span><span class="s12">) </span><span class="s5">[Macro]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;line-height: 107%;text-align: left;">Like <span class="s12">WITH.MONITOR</span>, but implemented without the <span class="s12">RESETLST</span>. User interrupts (e.g., Control-E) are inhibited during the evaluation of <i>FORM </i><i>1 </i>... <i>FORM </i><i>N </i>.</p><p class="s5" style="padding-top: 6pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">Programming restriction: the evaluation of <i>FORM </i><i>1 </i>... <i>FORM </i><i>N </i>must not error (the lock would not be released). This construct is mainly useful when the form s perform a small, safe computation that never errors and need never be</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">interrupted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(MONITOR.AWAIT.EVENT <span class="s33">RELEASELOCK EVENT  TIMEOUT TIMERP </span>)  <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">For  use in blocking inside a  monitor.  Perform s <span class="s12">(AWAIT.EVENT </span><i>EVENT</i></p><p class="s33" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">TIMEOUT TIMERP <span class="s12">)</span><span class="s5">, but releases </span>RELEASELOCK <span class="s5">first, and reobtains the lock (possibly waiting) on wakeup.</span></p><p class="s5" style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;text-align: justify;">Typical use for <span class="s12">MONITOR.AWAIT.EVENT</span>: A function wants to perform some</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">operation on <i>FOO </i>, but only if it is in a certain state. It has to obtain the lock on the structure to make sure that the state of the structure does not change</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">between the time it tests the state and perform s the operation. If the state</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">turns out to be bad, it then waits for some other process to make the state good, meanwhile releasing the lock so that the other process can alter the structure.</p><p class="s12" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">(WITH.MONITOR <span class="s33">FOO-LOCK</span></p><p class="s12" style="padding-left: 218pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(until <span class="s33">CONDITION-OF-FOO</span></p><p class="s12" style="padding-left: 210pt;text-indent: 11pt;line-height: 91%;text-align: left;">do (MONITOR.AWAIT.EVENT <span class="s33">FOO-LOCK EVENT-FOO- CHANGED TIMEOUT </span>))</p><p class="s33" style="padding-left: 230pt;text-indent: 0pt;line-height: 11pt;text-align: left;">OPERATE-ON-FOO <span class="s12">)</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 106%;text-align: left;">It is sometimes convenient for a process to have <span class="s12">WITH.MONITOR </span>at its top level and then do all its interesting waiting using <span class="s12">MONITOR.AWAIT.EVENT</span>. Not only is this often cleaner, but in the present implementation in cases where the lock is frequently accessed, it saves the <span class="s12">RESETLST </span>overhead of <span class="s12">WITH.MONITOR</span>.</p><p class="s5" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Programming restriction: There must not be an <span class="s12">ERRORSET </span>between the</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: justify;">enclosing <span class="s12">WITH.MONITOR </span>and the call to <span class="s12">MONITOR.AWAIT.EVENT </span>such that the <span class="s12">ERRORSET </span>would catch an <span class="s12">ERROR! </span>and continue inside the monitor, for the lock would not have been reobtained. (The reason for this restriction is that,</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: justify;">although <span class="s12">MONITOR.AWAIT.EVENT </span>won’t itself error, you could have caused an error with an interrupt, or a <span class="s12">PROCESS.EVAL </span>in the context of the waiting</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">process that produced an error.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">On rare occasions it may be useful to manipulate monitor locks directly. The following two functions are used in the implementation of <span class="s12">WITH.MONITOR</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(OBTAIN.MONITORLOCK <span class="s33">LOCK DONTWAIT UNWINDSAVE </span>)           <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Takes possession of <i>LOCK </i>, waiting if necessary until it is free, unless</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><i>DONTWAIT </i>is true, in which case it returns <span class="s12">NIL </span>immediately. If</p><p class="s5" style="padding-left: 47pt;text-indent: 0pt;text-align: center;"><i>UNWINDSAVE </i>is true, perform s a  <span class="s12">RESETSAVE </span>to be unwound when the</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">enclosing <span class="s12">RESETLST </span>exits. Returns <i>LOCK </i>if <i>LOCK </i>was successfully obtained, <span class="s12">T</span></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">if the current process already owned <i>LOCK </i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(RELEASE.MONITORLOCK <span class="s33">LOCK EVENIFNOTMINE </span>)                 <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Releases <i>LOCK </i>if it is owned by the current process, and wakes up the next process, if any, waiting to obtain the lock.</p><p class="s5" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">If <i>EVENIFNOTMINE </i>is non-<span class="s12">NIL</span>, the lock is released even if it is not owned by the current process.</p><p class="s5" style="padding-top: 9pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">When a process is deleted, any locks it owns are released.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Global Resources                                                                                             </h2><p class="s5" style="padding-top: 9pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The biggest source of problems in the multi-processing environment is the matter of global resources. Two processes cannot both use the same global resource if there can</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;line-height: 107%;text-align: left;">be a process switch in the middle of their use (currently this means calls to <span class="s12">BLOCK</span>, but ultimately with a preemptive scheduler means anytime). Thus, user code should be</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">wary of its own use of global variables, if it ever makes sense for the code to be run in more than one process at a time. &quot;State&quot; variables private to a process should generally be bound in that process; structures that are shared among processes (or resources used privately but expensive to duplicate per process) should be protected with monitor locks or some other form of synchronization.</p><p class="s5" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Aside from user code, however, there are many <i>system </i>global variables and resources. Most of these arise historically from the single-process Interlisp-10 environment, and will eventually be changed in Interlisp-D to behave appropriately in a multi-processing environment. Some have already been changed, and are described below. Two other</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">resources not generally thought of as global variables—the keyboard and the mouse— are particularly idosyncratic, and are discussed in the next section.</p><p class="s5" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The following resources, which are global in Interlisp-10, are allocated per process in</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Interlisp-D: primary input and output (the streams affected by <b>IN P UT </b>and <b>OUTP UT</b>), terminal input and output (the streams designated by the name <b>T</b>), the primary read</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">table and primary terminal table, and dribble files. Thus, each process can print to its own primary output, print to the terminal, read from a different primary input, all</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">without interfering with another process’s reading and printing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">Each process begins life with its primary and terminal input/output streams set to a dummy stream. If the process attempts input or output using any of those dummy</p><p class="s5" style="padding-left: 125pt;text-indent: 0pt;line-height: 107%;text-align: left;">streams, e.g., by calling <span class="s12">(READ T)</span>, or <span class="s12">(PRINT &amp; T)</span>, a tty window is automatically created for the process, and that window becomes the primary input/output and</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">terminal input/output for the process. The default tty window is created at or near the region specified in the variable <span class="s12">DEFAULTTTYREGION</span>.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">A process can, of course, call <span class="s12">TTYDISPLAYSTREAM </span>explicitly to give itself a tty window of its own choosing, in which case the automatic mechanism never comes into play.</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 106%;text-align: left;">Calling <span class="s12">TTYDISPLAYSTREAM </span>when a process has no tty window not only sets the terminal streams, but also sets the primary input and output streams to be that window, assuming they were still set to the dummy streams.</p><p class="s12" style="padding-top: 9pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">(HASTTYWINDOWP <span class="s33">PROCESS </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Returns <span class="s12">T </span>if the process <i>PROCESS </i>has a tty window; <span class="s12">NIL </span>otherwise. If</p><p class="s5" style="padding-left: 162pt;text-indent: 0pt;text-align: left;"><i>PROCESS </i>is <span class="s12">NIL</span>, it defaults to the current process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">Other system resources that are typically changed by <span class="s12">RESETFORM</span>, <span class="s12">RESETLST</span>, or</p><p class="s12" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">RESETVARS <span class="s5">are all global entities. In the multiprocessing environment, these</span></p><p class="s5" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">constructs are suspect, as there is no provision for &quot;undoing&quot; them when a process</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">switch occurs. For example, in the current release of Interlisp-D, it is not possible to set the print radix to 8 inside only one process, as the print radix is a global entity.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">Note that <span class="s12">RESETFORM </span>and similar expressions are perfectly valid in the process world, and even quite useful, when they manipulate things strictly within one process. The</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 106%;text-align: left;">process world is arranged so that deleting a process also unwinds any <span class="s12">RESETxxx </span>expressions that were performed in the process and are still waiting to be unwound, exactly as if a Control-D had reset the process to the top. Additionally, there is an</p><p class="s5" style="padding-left: 125pt;text-indent: 0pt;line-height: 107%;text-align: left;">implicit <span class="s12">RESETLST </span>at the top of each process, so that <span class="s12">RESETSAVE </span>can be used as a way of providing &quot;cleanu p&quot; functions for when a process is deleted. For these, the value of <span class="s12">RESETSTATE </span>(see Chapter 14) is <span class="s12">NIL </span>if the process finished normally, <span class="s12">ERROR </span>if it was aborted by an error, <span class="s12">RESET </span>if the process was explicitly deleted, and <span class="s12">HARDRESET </span>if the process is being restarted after a <span class="s12">HARDRESET </span>or a <span class="s12">RESTART.PROCESS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Typein and the TTY Process                                                                           </h2><p class="s5" style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">There is one global resource, the keyboard, that is particularly problematic to share</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">among processes. Consider, for example, having two processes both performing <span class="s12">(READ T)</span>. Since the keyboard input routines block while there is no input, both processes would spend most of their time blocking, and it would simply be a matter of chance</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;">which process received each character of typein.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">To resolve such dilemmas, the system designates a distinguished process, termed the</p><p class="s33" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">tty process <span class="s5">, that is assumed to be the process that is involved in terminal interaction.</span></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Any typein from the keyboard goes to that process. If a process other than the tty</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">process requests keyboard input, it blocks until it becomes the tty process. When the</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">tty process is switched (in any of the ways described further below), any typeahead that occurred before the switch is saved and associated with the current tty process. Thus, it is always the case that keystrokes are sent to the process that is the tty process at the</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">time of the keystrokes, regardless of when that process actually gets around to reading them.</p><p class="s5" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">It is less immediately obvious how to handle keyboard interrupt characters, as their</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">action is asynchronous and not always tied to typein. Interrupt handling is described in the Handling of Interrupts section below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s51" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">Switching the TTY Process</p><p class="s5" style="padding-top: 8pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Any process can make itself be the tty process by calling <span class="s12">TTY.PROCESS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">(TTY.PROCESS <span class="s33">PROC</span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">Returns the handle of the current tty process. In addition, if <i>PROC </i>is non-<span class="s12">NIL</span>, makes it be the tty process. The special case of <i>PROC </i>= <span class="s12">T </span>is interpreted to</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">mean the executive process; this is sometimes useful when a process wants to explicitly give up being the tty process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">(TTY.PROCESSP <span class="s33">PROC</span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">True if <i>PROC </i>is the tty process; <i>PROC </i>defaults to the running process. Thus,</p><p class="s12" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">(TTY.PROCESSP) <span class="s5">is true if the caller is the tty process.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">(WAIT.FOR.TTY <span class="s33">MSECS NEEDWINDOW </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Efficiently waits until <span class="s12">(TTY.PROCESSP) </span>is true. <span class="s12">WAIT.FOR.TTY </span>is called</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">internally by the system functions that read from the terminal; user code thus need only call it in special cases.</p><p class="s5" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">If <i>MSECS </i>is non-<span class="s12">NIL</span>, it is the number of milliseconds to wait before timing out. If <span class="s12">WAIT.FOR.TTY </span>times out before <span class="s12">(TTY.PROCESSP) </span>is true, it returns <span class="s12">NIL</span>,</p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">otherwise it returns <span class="s12">T</span>. If <i>MSECS </i>is <span class="s12">NIL</span>, <span class="s12">WAIT.FOR.TTY </span>will not time out.</p><p class="s5" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">If <i>NEEDWINDOW </i>is non-<span class="s12">NIL</span>, <span class="s12">WAIT.FOR.TTY </span>opens a TTY window for the current process if one isn’t already open.</p><p class="s12" style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">WAIT.FOR.TTY <span class="s5">spawns a new mouse process if called under the mouse process (see </span>SPAWN.MOUSE<span class="s5">, in the Keeping the Mouse Alive section below).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 106%;text-align: left;">In some cases, such as in functions invoked as a result of mouse action or a user’s typed- in call, it is reasonable for the function to invoke <span class="s12">TTY.PROCESS </span>itself so that it can take subsequent user type in. In other cases, however, this is too undisciplined; it is</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">desirable to let the user designate which process typein should be directed to. This is most conveniently done by mouse action.</p><p class="s5" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">The system supports the model that &quot;to type to a process, you click in its window.&quot; To cooperate with this model, any process desiring keyboard input should put its process handle as the <span class="s12">PROCESS </span>property of its window(s). To handle the common case, the</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">function <span class="s12">TTYDISPLAYSTREAM </span>does this automatically when the ttydisplaystream is</p><p class="s5" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">switched to a new window. A process can own any number of windows; clicking in any of those windows gives the process the tty.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">This mechanism suffices for most casual process writers. For example, if a process wants all its input/output interaction to occur in a particular window that it has</p><p class="s5" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">created, it should just make that window be its tty window by calling</p><p class="s12" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">TTYDISPLAYSTREAM<span class="s5">. Thereafter, it can </span>PRINT <span class="s5">or </span>READ <span class="s5">to/from the </span>T <span class="s5">stream; if the</span></p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">process is not the tty process at the time that it calls <span class="s12">READ</span>, it will block until the user clicks in the window.</p><p class="s5" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">For those needing tighter control over the tty, the default behavior can be overridden or supplemented. The remainder of this section describes the mechanisms involved.</p><p class="s5" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">There is a window property <span class="s12">WINDOWENTRYFN </span>that controls whether and how to switch the tty to the process owning a window. The mouse handler, before invoking any</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">normal <span class="s12">BUTTONEVENTFN</span>, specifically notices the case of a button going down in a</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">window that belongs to a process (i.e., has a <span class="s12">PROCESS </span>window property) that is not the tty process. In this case, it invokes the window’s <span class="s12">WINDOWENTRYFN </span>of one argument (<i>WINDOW </i>). <span class="s12">WINDOWENTRYFN </span>defaults to <span class="s12">GIVE.TTY.PROCESS</span>:</p><p class="s12" style="padding-top: 10pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(GIVE.TTY.PROCESS <span class="s33">WINDOW </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If <i>WINDOW </i>has a <span class="s12">PROCESS </span>property, perform s <span class="s12">(TTY.PROCESS (WINDOWPROP </span><i>WINDOW </i><b>’</b><span class="s12">PROCESS)) </span>and then invokes <i>WINDOW</i>’s <span class="s12">BUTTONEVENTFN </span>function (or <span class="s12">RIGHTBUTTONFN </span>if the right button is down).</p><p class="s5" style="padding-top: 10pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">There are some cases where clicking in a window does not always imply that the user</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">wants to talk to that window. For example, clicking in a text editor window with a shift key held down means to &quot;shift-select&quot; some piece of text into the input buffer of the</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;text-align: left;"><i>current </i>tty process. The editor supports this by supplying a <span class="s12">WINDOWENTRYFN </span>that</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">perform s <span class="s12">GIVE.TTY.PROCESS </span>if no shift key is down, but goes into its shift-select mode, without changing the tty process, if a shift key is down. The shift-select mode perform s</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">a <span class="s12">BKSYSBUF </span>of the selected text when the shift key is let up, the <span class="s12">BKSYSBUF </span>feeding input to the current tty process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Sometimes a process wants to be notified when it becomes the tty process, or stops</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">being the tty process. To support this, there are two process properties, <span class="s12">TTYEXITFN </span>and</p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">TTYENTRYFN<span class="s5">. The actions taken by </span>TTY.PROCESS <span class="s5">when it switches the tty to a new</span></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;line-height: 107%;text-align: left;">process are as follows: the former tty process’s <span class="s12">TTYEXITFN </span>is called with two arguments (<i>OLDTTYPROCESS NEWTTYPROCESS </i>); the new process is made the tty process;</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">finally, the new tty process’s <span class="s12">TTYENTRYFN </span>is called with two arguments</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(<i>NEWTTYPROCESS OLDTTYPROCESS </i>). Normally the <span class="s12">TTYENTRYFN </span>and <span class="s12">TTYEXITFN</span></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">need only their first argument, but the other process involved in the switch is supplied for completeness. In the present system, most processes want to interpret the keyboard in the same way, so it is considered the responsibility of any process that changes the</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">keyboard interpretation to restore it to the normal state by its <span class="s12">TTYEXITFN</span>.</p><p class="s5" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 106%;text-align: left;">A window is &quot;owned&quot; by the last process that anyone gave as the window’s <span class="s12">PROCESS </span>property. Ordinarily there is no conflict here, as processes tend to own disjoint sets of windows (though, of course, cooperating processes can certainly try to confuse each</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;line-height: 107%;text-align: left;">other). The only likely problem arises with that most global of windows, <span class="s12">PROMPTWINDOW</span>. Programs should not be tempted to read from <span class="s12">PROMPTWINDOW</span>. This is not usually necessary anyway, as the first attempt to read from <span class="s12">T </span>in a process that has not set its <span class="s12">TTYDISPLAYSTREAM </span>to its own window causes a tty window to be created for the process (see the Global Resources section above).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s51" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">Handling of Interrupts</p><p class="s5" style="padding-top: 8pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">At the time that a keyboard interrupt character (see Chapter 30) is struck, any process could be running, and some decision must be made as to which process to actually</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">interrupt. To the extent that keyboard interrupts are related to typein, most interrupts are taken in the tty process; however, the following are handled specially:</p><p class="s12" style="padding-top: 7pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">RESET <span class="s5">(initially Control-D)</span></p><p class="s12" style="padding-left: 103pt;text-indent: 0pt;text-align: left;">ERROR <span class="s5">(initially Control-E) These interrupts are taken in the mouse process, if</span></p><p class="s5" style="padding-left: 246pt;text-indent: 0pt;text-align: left;">the mouse is not in its idle state; otherwise they are taken in the tty process. Thus, Control-E can be</p><p class="s5" style="padding-left: 246pt;text-indent: 0pt;text-align: left;">used to abort some mouse-invoked window action, such as the Shape command. As a consequence, note that if the mouse invokes some lengthy</p><p class="s5" style="padding-left: 246pt;text-indent: 0pt;text-align: left;">computation that the user thinks of as</p><p class="s5" style="padding-left: 246pt;text-indent: 0pt;text-align: left;">&quot;background&quot;, Control-E still aborts it, even though that may not have been what the user intended.</p><p class="s5" style="padding-left: 246pt;text-indent: 0pt;text-align: left;">Such lengthy computations, for various reasons, should generally be performed by spawning a</p><p class="s5" style="padding-left: 246pt;text-indent: 0pt;line-height: 106%;text-align: left;">separate process to perform them. The <span class="s12">RESET </span>interrupt in a process other than the executive is interpreted exactly as if an error unwound the</p><p class="s5" style="padding-left: 246pt;text-indent: 0pt;line-height: 11pt;text-align: left;">process to its top level: if the process was</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 294pt;text-indent: 0pt;line-height: 107%;text-align: left;">designated <span class="s12">RESTARTABLE </span>= <span class="s12">T</span>, it is restarted; otherwise it is killed.</p><p class="s12" style="padding-top: 6pt;padding-left: 157pt;text-indent: 0pt;text-align: left;">HELP <span class="s5">(initially Control-G) A menu of processes is presented to the user, who is</span></p><p class="s5" style="padding-left: 294pt;text-indent: 0pt;text-align: left;">asked to select which one the interrupt should occur in. The current tty process appears with a *</p><p class="s5" style="padding-left: 294pt;text-indent: 0pt;text-align: left;">next to its name at the top of the menu. The menu also includes an entry &quot;[Sp awn Mouse]&quot;, for the common case of needing a mouse because the</p><p class="s5" style="padding-left: 294pt;text-indent: 0pt;text-align: left;">mouse process is currently tied up running</p><p class="s5" style="padding-left: 294pt;text-indent: 0pt;text-align: left;">someone’s <span class="s12">BUTTONEVENTFN</span>; selecting this entry</p><p class="s5" style="padding-left: 294pt;text-indent: 0pt;text-align: left;">spawns a new mouse process, and no break occurs.</p><p class="s12" style="padding-top: 7pt;padding-left: 151pt;text-indent: 0pt;text-align: left;">BREAK <span class="s5">(initially Control-B) Perform s the </span>HELP <span class="s5">interrupt in the mouse process,</span></p><p class="s5" style="padding-left: 294pt;text-indent: 0pt;text-align: left;">if the mouse is not in its idle state; otherwise it is performed in the tty process.</p><p class="s5" style="padding-top: 7pt;padding-left: 155pt;text-indent: 0pt;text-align: left;"><span class="s12">RUBOUT </span>(initially <span class="s12">DELETE</span>) This interrupt clears typeahead in <i>all </i>processes.</p><p class="s12" style="padding-top: 8pt;padding-left: 155pt;text-indent: 0pt;line-height: 11pt;text-align: left;">RAID, STACK OVERFLOW</p><p class="s12" style="padding-left: 294pt;text-indent: -90pt;line-height: 107%;text-align: left;">STORAGE FULL <span class="s5">These interrupts always occur in whatever process was running at the time the interrupt struck. In</span></p><p class="s5" style="padding-left: 294pt;text-indent: 0pt;line-height: 107%;text-align: left;">the cases of <span class="s12">STACK OVERFLOW </span>and <span class="s12">STORAGE FULL</span>, this means that the interrupt is more likely to</p><p class="s5" style="padding-left: 294pt;text-indent: 0pt;text-align: left;">strike in the offending process (especially if it is a &quot;runaway&quot; process that is not blocking). Note, however, that this process is still not necessarily</p><p class="s5" style="padding-left: 294pt;text-indent: 0pt;text-align: justify;">the guilty party; it could be an innocent bystander that just happened to use up the last of a resource prodigiously consumed by some other process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Keeping the Mouse Alive                                                                                 </h2><p class="s5" style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Since the window mouse handler runs in its own process, it is not available while a</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 106%;text-align: justify;">window’s <span class="s12">BUTTONEVENTFN </span>function (or any of the other window functions invoked by mouse action) is running. This leads to two sorts of problems: (1) a long computation underneath a <span class="s12">BUTTONEVENTFN </span>deprives the user of the mouse for other purposes, and</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: left;">(2) code that runs as a <span class="s12">BUTTONEVENTFN </span>cannot rely on other <span class="s12">BUTTONEVENTFN</span>s running, which means that there some pieces of code that run differently from normal when run</p><p class="s5" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">under the mouse process. These problems are addressed by the following functions:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(SPAWN.MOUSE <i>—</i>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">Spawns another mouse process, allowing the mouse to run even if it is currently &quot;tied up&quot; under the current mouse process. This function is intended mainly to be typed in at the Lisp executive when the user notices the mouse is busy.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(ALLOW.BUTTON.EVENTS) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;line-height: 106%;text-align: left;">Perform s a <span class="s12">(SPAWN.MOUSE) </span>only when called underneath the mouse process. This should be called (once, on entry) by any function that relies on <span class="s12">BUTTONEVENTFN</span>s for completion, if there is any possibility that the function will itself be invoked by a mouse function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;line-height: 106%;text-align: justify;">It never hurts, at least logically, to call <span class="s12">SPAWN.MOUSE </span>or <span class="s12">ALLOW.BUTTON.EVENTS </span>needlessly, as the mouse process arranges to quietly kill itself if it returns from the user’s <span class="s12">BUTTONEVENTFN </span>and finds that another mouse process has sprung up in the meantime. (There is, of course, some computational expense.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Process Status Window                                                                                   </h2><p class="s5" style="padding-top: 9pt;padding-left: 77pt;text-indent: 0pt;line-height: 107%;text-align: left;">The background menu command <span class="s12">PSW </span>(see Chapter 28) and the function <span class="s12">PROCESS.STATUS.WINDOW </span>(below) create a &quot;Process Status Window&quot;, that allows the user to examine and manipulate all of the existing processes:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 181pt;text-indent: 0pt;text-align: left;"><span><img width="269" height="245" alt="image" src="Image_061.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;line-height: 106%;text-align: left;">The window consists of two menus. The top menu lists all the processes at the moment. Commands in the bottom menu operate on the process selected in the top menu ( <span class="s12">EXEC </span>in the example above). The commands are:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">BT<span class="s5">, </span>BTV<span class="s5">, </span>BTV*<span class="s5">, </span>BTV!   <span class="s5">Displays  a  backtrace of  the selected process.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 246pt;text-indent: -42pt;line-height: 107%;text-align: left;">WHO? <span class="s5">Changes the selection to the tty process, i.e., the one currently in control of the keyboard.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 246pt;text-indent: -46pt;line-height: 107%;text-align: left;">KBD<span class="s4"></span><span class="s5"> Associates the keyboard with the selected process; i.e., makes the selected process be the tty process.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;text-align: left;">INFO <span class="s5">If the selected process has an </span>INFOHOOK <span class="s5">property, calls it.</span></p><p class="s5" style="padding-left: 246pt;text-indent: 0pt;text-align: left;">The hook may be a function, which is then applied to two</p><p class="s5" style="padding-left: 246pt;text-indent: 0pt;line-height: 107%;text-align: left;">arguments, the process and the button ( <span class="s12">LEFT </span>or <span class="s12">MIDDLE</span>) used to invoke <span class="s12">INFO</span>, or a form, which is simply <span class="s12">EVAL</span>’ed. The <span class="s12">APPLY </span>or <span class="s12">EVAL </span>happens in the context of the selected process, using <span class="s12">PROCESS.APPLY </span>or <span class="s12">PROCESS.EVAL</span>. The <span class="s12">INFOHOOK</span></p><p class="s5" style="padding-left: 246pt;text-indent: 0pt;line-height: 107%;text-align: left;">process property can be set using <span class="s12">PROCESSPROP </span>(see the Creating and Destroying Processes section above).</p><p class="s12" style="padding-top: 6pt;padding-left: 246pt;text-indent: -48pt;line-height: 106%;text-align: left;">BREAK <span class="s5">Enter a break under the selected process. This has the side effect of waking the process with the value returned from the break.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;text-align: left;">KILL <span class="s5">Deletes the selected process.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">RESTART   <span class="s5">Restarts the selected process.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 246pt;text-indent: -42pt;line-height: 107%;text-align: left;">WAKE <span class="s5">Wakes the selected process. Prompts for a value to wake it with (see </span>WAKE.PROCESS<span class="s5">).</span></p><p class="s12" style="padding-top: 7pt;padding-left: 246pt;text-indent: -60pt;line-height: 107%;text-align: left;">SUSPEND <span class="s5">Suspends the selected process; i.e., causes it to block indefinitely (until explicitly woken).</span></p><p class="s12" style="padding-top: 9pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(PROCESS.STATUS.WINDOW <span class="s33">WHERE </span>) <span class="s5">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Puts up a process status window that provides several debugging commands for manipulating running processes. If the window is already up, <span class="s12">PROCESS.STATUS.WINDOW </span>refreshes it. If <i>WHERE </i>is a position, the window is placed in that position; otherwise, the user is prompted for a position.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">Currently, the process status window runs under the mouse process, like other menus, so if the mouse is unavailable (e.g., a mouse function is performing an extensive computation), you may be unable to use the process status window (you can try <span class="s12">SPAWN.MOUSE</span>, of course).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Non-Process Compatibility                                                                             </h2><p class="s5" style="padding-top: 9pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">This section describes some considerations for authors of programs that ran in the old single-process Interlisp-D environment, and now want to make sure they run properly in the Multi-processing world. The biggest problem to watch out for is code that runs underneath the mouse handler. Writers of mouse handler functions should remember that in the process world the mouse handler runs in its own process, and hence (a) you</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">cannot depend on finding information on the stack (stash it in the window instead), and</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(b) while your function is running, the mouse is not available (if you have any non-</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">trivial computation to do, spawn a process to do it, notify one of your existing processes to do it, or use <span class="s12">PROCESS.EVAL </span>to run it under some other process).</p><p class="s5" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The following functions are meaningful even if the process world is not on: <span class="s12">BLOCK</span></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(invokes the system background routine, which includes handling the mouse); <span class="s12">TTY.PROCESS</span>, <span class="s12">THIS.PROCESS </span>(both return <span class="s12">NIL</span>); and <span class="s12">TTY.PROCESSP </span>(returns <span class="s12">T</span>, i.e., anyone is allowed to take tty input). In addition, the following two functions exist in both worlds:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(EVAL.AS.PROCESS <span class="s33">FORM </span>) <span class="s5">[Function]</span></p><p class="s12" style="padding-top: 5pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><span class="s5">Same as </span>(ADD.PROCESS <span class="s33">FORM </span>’RESTARTABLE ’NO)<span class="s5">, when processes are</span></p><p class="s5" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">running, <span class="s12">EVAL </span>when not. This is highly recommended for mouse functions that perform any non-trivial activity.</p><p class="s12" style="padding-top: 4pt;padding-left: 114pt;text-indent: -36pt;line-height: 18pt;text-align: left;">(EVAL.IN.TTY.PROCESS <span class="s33">FORM WAITFORRE SULT </span>) <span class="s5">[Function] Same as </span>(PROCESS.EVAL (TTY.PROCESS) <span class="s33">FORM WAITFORRE SULT </span>)<span class="s5">, when</span></p><p class="s5" style="padding-top: 1pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">processes are running, <span class="s12">EVAL </span>when not.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Most of the process functions that do not take a process argument can be called even if processes aren’t running. <span class="s12">ADD.PROCESS </span>creates, but does not run, a new process (it</p><p class="s5" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">runs when <span class="s12">PROCESSWORLD </span>is called).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l60"><li><p class="s6" style="padding-left: 28pt;text-indent: -22pt;text-align: left;"><a name="bookmark26">STREAMS AND FILES</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="605" height="3" alt="image" src="Image_062.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A stream is an object that provides an interface to a physical or logical device. The stream object contains local data and methods that operate on the stream object. Medley’s general-purpose I / O functions take a stream as one of their arguments. Not every device is capable of implementing every I / O operation, while some devices offer special functions for that device alone. Such restrictions and extensions are noted in the documentation of each device. The majority of the streams used in Medley fall into two categories: file streams and image streams.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A file is a sequence of data stored on some device that allows the data to be retrieved at a later time. Files are identified by a name specifying their storage devices. Input or output to a file is performed through a stream to the file, using <span class="s11">OPENSTREAM </span>(below). In addition, there are functions that manipulate the files themselves, rather than their data content.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">An image stream is an output stream to a display device, such as the display screen or a printer. In addition to the standard output operations, an image stream implements a variety of graphics operations, such as drawing lines and displaying characters in multiple fonts. Unlike a file, the &quot;content&quot; of an image stream cannot be retrieved.  Image streams are described in Chapter 26.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This chapter describes operations specific to file devices: how to name files, how to open streams to files, and how to manipulate files on their devices.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Opening and Closing File Streams                                                                                                          </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">To perform input from or output to a file, you must create a stream to the file, using <span class="s11">OPENSTREAM</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>OPENSTREAM </b><i>FILE ACCESS RECOG PARAMETERS —</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Opens and returns a stream for the file specified by <span class="s16">FILE</span>, a file name. <span class="s16">FILE </span>can be either a string or a symbol. The syntax and manipulation of file names is described at length in the <span class="s11">FILENAMES </span>section below. Incomplete file names are interpreted with respect to the connected directory (below).</p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">RECOG <span class="p">specifies the recognition mode of </span>FILE <span class="p">(below). If </span>RECOG <span class="s11">= NIL</span><span class="p">, it defaults according to the value of </span>ACCESS<span class="p">.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">ACCESS <span class="p">specifies the &quot;access rights&quot; to be used when opening the file. Possible values are:</span></p><p style="padding-top: 8pt;padding-left: 126pt;text-indent: -39pt;text-align: justify;"><span class="s11">INPUT </span>Only input operations are permitted on the already existing file. Starts reading at the beginning of the file. <span class="s16">RECOG </span>defaults to <span class="s11">OLD</span>.</p><p style="padding-top: 8pt;padding-left: 126pt;text-indent: -44pt;line-height: 94%;text-align: justify;"><span class="s11">OUTPUT </span>Only output operations are permitted on the initially empty file. Starts writing at the beginning of the file. While the file is open, other users or processes are unable to open the file for either input or output. <span class="s16">RECOG </span>defaults to <span class="s11">NEW</span>.</p><p style="padding-top: 8pt;padding-left: 126pt;text-indent: -33pt;text-align: justify;"><span class="s11">BOTH </span>Both input and output operations are permitted on the file. Starts reading or writing at the beginning of the file. <span class="s16">RECOG </span>defaults to <span class="s11">OLD/NEW</span>. <span class="s16">ACCESS </span><span class="s11">= BOTH </span>implies random access (Chapter 25), and may not be possible for files on some devices<span class="s10">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: -44pt;text-align: justify;"><span class="s11">APPEND </span>Only sequential output operations are permitted on the file. Starts writing at the end of the file. <span class="s16">RECOG </span>defaults to <span class="s11">OLD/NEW</span>. <span class="s16">ACCESS </span><span class="s11">= APPEND </span>may not be allowed for files on some devices.</p><p style="padding-top: 7pt;padding-left: 179pt;text-indent: -30pt;line-height: 93%;text-align: justify;">Note: <span class="s16">ACCESS </span><span class="s11">= OUTPUT </span>implies that you intend to write a new or different file, even if a version number was specified and the corresponding file already exists.  Any previous contents of the file are discarded, and the file is empty immediately after the <span class="s11">OPENSTREAM</span>. If you want to write on an already existing file while preserving the old contents, the file must be opened for access <span class="s11">BOTH </span>or <span class="s11">APPEND</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">PARAMETERS </span>is a list of pairs <span class="s11">(</span><span class="s16">ATTRIB VALUE</span><span class="s11">)</span>, where <span class="s16">ATTRIB </span>is a file attribute (see <span class="s11">SETFILEINFO </span>below). A non-list <span class="s16">ATTRIB </span>in <span class="s16">PARAMETERS </span>is treated as the pair <span class="s11">(</span><span class="s16">ATTRIB </span><span class="s11">T)</span>. Generally speaking, attributes that belong to the permanent file (e.g., <span class="s11">TYPE</span>) can only be set when creating a new file, while attributes that belong only to a particular opening of a file (e.g., <span class="s11">ENDOFSTREAMOP</span>) can be set on any call to <span class="s11">OPENSTREAM</span>. Not all devices honor all attributes; those not recognized by a particular device are simply ignored.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">In addition to the attributes permitted by <span class="s11">SETFILEINFO</span>, the following attributes are accepted by <span class="s11">OPENSTREAM </span>as values of <span class="s16">ATTRIB </span>in its <span class="s16">PARAMETERS </span>argument:</p><p style="padding-top: 7pt;padding-left: 174pt;text-indent: -103pt;line-height: 93%;text-align: justify;"><span class="s11">DON’T.CHANGE.DATE </span>If <span class="s16">VALUE </span>is non-<span class="s11">NIL</span>, the file’s creation date is not changed when the file is opened. This option is meaningful only for old files opened for <span class="s11">BOTH </span>access. You should use this only for specialized applications where the caller does not want the file system to believe the file’s content has been changed.</p><p style="padding-top: 8pt;padding-left: 174pt;text-indent: -66pt;line-height: 93%;text-align: justify;"><span class="s11">SEQUENTIAL </span>If <span class="s16">VALUE </span>is non-<span class="s11">NIL</span>, this opening of the file need support only sequential access; i.e., the caller intends never to use <span class="s11">SETFILEPTR</span>. For some devices, sequential access to files is much more efficient than random access. Note that the device may choose to ignore this attribute and still open the file in a manner that permits random access. Also note that this attribute does not make sense with <span class="s16">ACCESS </span><span class="s11">= BOTH</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FILE </span>is not recognized by the file system, <span class="s11">OPENSTREAM </span>causes the error <span class="s11">FILE NOT FOUND</span>. Ordinarily, this error is intercepted via an entry on <span class="s11">ERRORTYPELST </span>(Chapter 24), which causes <span class="s11">SPELLFILE </span>(see the Searching File Directories below) to be called. <span class="s11">SPELLFILE </span>searches alternate directories and possibly attempts spelling correction on the file name. Only if <span class="s11">SPELLFILE </span>is unsuccessful will the <span class="s11">FILE NOT FOUND </span>error actually occur.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FILE </span>exists but cannot be opened, <span class="s11">OPENSTREAM </span>causes one of several other errors: <span class="s11">FILE WON’T OPEN </span>if the file is already opened for conflicting access by someone else; <span class="s11">PROTECTION VIOLATION </span>if the file is protected against the operation; <span class="s11">FILE SYSTEM RESOURCES EXCEEDED </span>if there is no more room in the file system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 336pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CLOSEF </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Closes <span class="s16">FILE </span>and returns its full file name. Generates an error, <span class="s11">FILE NOT OPEN</span>, if <span class="s16">FILE </span>does not designate an open stream. After closing a stream, no further input / output operations are permitted on it.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">FILE </span>is <span class="s11">NIL</span>, it is defaulted to the primary input stream if that is not the terminal stream, or else the primary output stream if that is not the terminal stream. If both primary input and output streams are the terminal input / output streams, <span class="s11">CLOSEF </span>returns <span class="s11">NIL</span>. If <span class="s11">CLOSEF </span>closes either the primary input stream or the primary output stream (either explicitly or in the <span class="s16">FILE </span><span class="s11">= NIL </span>case), it resets the primary stream for that direction to be the corresponding terminal stream. See Chapter 25 for information on the primary input / output streams.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">WHENCLOSE <span class="p">(below) allows you to &quot;advise&quot; </span>CLOSEF <span class="p">to perform various operations when a file is closed.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Because of buffering, the contents of a file open for output are not guaranteed to be written to the actual physical file device until <span class="s11">CLOSEF </span>is called. Buffered data can be forced out to a file without closing the file by using the function <span class="s11">FORCEOUTPUT </span>(Chapter 25).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Some network file devices perform their transactions in the background. As a result, it is possible for a file to be closed by <span class="s11">CLOSEF </span>and yet not be &quot;fully&quot; closed for a small time period afterward. During this time the file appears to be busy and cannot be opened for conflicting access by others.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>CLOSEF? </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Closes <span class="s16">FILE </span>if it is open, returning the value of <span class="s11">CLOSEF</span>; otherwise does nothing and returns <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In the present implementation of Medley, all open streams to files are kept in a registry of &quot;open files&quot;. This registry does not include nameless streams, such as string streams (below), display streams (Chapter 28), and the terminal input and output streams; nor streams explicitly hidden from you, such as dribble streams (Chapter 30). This registry may not persist in future implementations of Medley, but at the present time it is accessible by the following two functions:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>OPENP </b><i>FILE ACCESS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">ACCESS </span>is an access mode for a stream opening (see <span class="s11">OPENSTREAM</span>), or <span class="s11">NIL </span>for any access.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If <span class="s16">FILE </span>is a stream, returns its full name if it is open for the specified access, otherwise</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">NIL<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If <span class="s16">FILE </span>is a file name (a symbol), <span class="s16">FILE </span>is processed according to the rules of file recognition (below). If a stream open to a file by that name is registered and open for the specified access, then the file’s full name is returned. If the file name is not recognized, or no stream is open to the file with the specified access, <span class="s11">NIL </span>is returned.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FILE </span>is <span class="s11">NIL</span>, returns a list of the full names of all registered streams that are open for the specified access.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>CLOSEALL </b><i>ALLFLG</i>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Closes all streams in the value of (<span class="s11">OPENP</span>). Returns a list of the files closed.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="s11">WHENCLOSE </span>(below) allows certain files to be &quot;protected&quot; from <span class="s11">CLOSEALL</span>. If <span class="s16">ALLFLG </span>is <span class="s11">T</span>, all files, including those protected by <span class="s11">WHENCLOSE</span>, are closed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">File Names                                                                                                                                                 </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A file name in Medley is a string or symbol whose characters specify a &quot;path&quot; to the actual file: on what host or device the file resides, in which directory, and so forth. Because Medley supports a variety of non-local file devices, parts of the path could be device-dependent. However, it is desirable for programs to be able to manipulate file names in a device-independent manner. To this end, Medley specifies a uniform file name syntax over all devices; the functions that perform the actual file manipulation for a particular device are responsible for any translation to that device’s naming conventions.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">A file name is composed of a collection of <i>fields</i>, some of which have specific meanings. The functions described below refer to each field by a <i>field name</i>, a literal atom from among the following: <span class="s11">HOST</span>, <span class="s11">DEVICE</span>, <span class="s11">DIRECTORY</span>, <span class="s11">NAME</span>, <span class="s11">EXTENSION</span>, and <span class="s11">VERSION</span>. The standard syntax for a file name is</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">{HOST}DEVICE:&lt;DIRECTORY&gt;NAME.EXTENSION;VERSION<span class="p">. Some host’s file systems do not use all of those fields in their file names.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: -33pt;text-align: left;">HOST <span class="p">Specifies the host whose file system contains the file. In the case of local file devices, the &quot;host&quot; is the name of the device, e.g., </span>DSK <span class="p">or </span>FLOPPY<span class="p">.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 174pt;text-indent: -44pt;line-height: 92%;text-align: justify;">DEVICE <span class="p">Specifies, for those hosts that divide their file system’s name space among mutiple physical devices, the device or logical structure on which the file resides. This should not be confused with Medley’s abstract &quot;file device&quot;, which denotes either a host or a local physical device and is specified by the </span>HOST <span class="p">field.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 174pt;text-indent: -60pt;line-height: 93%;text-align: justify;">DIRECTORY <span class="p">Specifies the &quot;directory&quot; containing the file. A directory usually is a grouping of a possibly large set of loosely related files, e.g., the personal files of a particular user, or the files belonging to some project. The </span>DIRECTORY <span class="p">field usually consists of a principal directory and zero or more subdirectories that together describe a path through a file system’s hierarchy. Each subdirectory name is set off from the previous directory or subdirectory by the character &quot;</span>&gt;<span class="p">&quot;; e.g., &quot;</span>LISP&gt;LIBRARY&gt;NEW<span class="p">&quot;.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 174pt;text-indent: -33pt;text-align: left;">NAME <span class="p">This field carries no specific meaning, but generally names a set of files thought of as being different renditions of the &quot;same&quot; abstract file.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 174pt;text-indent: -60pt;line-height: 93%;text-align: justify;">EXTENSION <span class="p">This field also carries no specific meaning, but generally distinguishes the form of files having the same name. Most files systems have some &quot;conventional&quot; extensions that denote something about the content of the file. For example, in Medley, the extension </span>DCOM<span class="p">, </span>LCOM <span class="p">or </span>DFASL <span class="p">denotes files containing compiled function definitions.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 336pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 7pt;padding-left: 125pt;text-indent: -49pt;line-height: 93%;text-align: justify;">VERSION <span class="p">A number used to distinguish the versions or &quot;generations&quot; of the files having a common name and extension. The version number is incremented each time a new file by the same name is created.</span></p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Most functions that take as input &quot;a directory&quot; accept either a directory name (the contents of the <span class="s11">DIRECTORY </span>field of a file name) or a &quot;full&quot; directory specification—a file name fragment consisting of only the fields <span class="s11">HOST</span>, <span class="s11">DEVICE</span>, and <span class="s11">DIRECTORY</span>. In particular, the &quot;connected directory&quot; (see below) consists, in general, of all three fields.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For convenience in dealing with certain operating systems, Medley also recognizes [] and () as host delimiters (synonymous with {}), and / as a directory delimiter (synonymous with &lt; at the beginning of a directory specification and <b>&gt; </b>to terminate directory or subdirectory specification). For example, a file on a Unix file server <span class="s11">UNX </span>with the name <span class="s11">/usr/foo/bar/stuff.tedit</span>, whose <span class="s11">DIRECTORY </span>field is thus <span class="s11">usr/foo/bar</span>, could be specified as <span class="s11">{UNX}/usr/foo/bar/stuff.tedit</span>, or <span class="s11">(UNX)&lt;usr/foo/bar&gt;stuff.tedit</span>, or several other variations. Note that when using <span class="s11">[] </span>or <span class="s11">() </span>as host delimiters, they usually must be escaped with the reader’s escape character if the file name is expressed as a symbol rather than a string.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Different hosts have different requirements for vaild characters in file names. In Medley, all characters are valid. However, in order to be able to parse a file name into its component fields, it is necessary that those characters that are conventionally used as file name delimiters be quoted when they appear inside of fields where there could be ambiguity. The file name quoting character is &quot; ’ &quot; (single quote). Thus, the following characters must be quoted when not used as delimeters: &gt;, :, ;, / , and ’ itself. The character . (period) need only be quoted if it is to be considered a part of the <span class="s11">EXTENSION </span>field. The characters }, ], and ) need only be quoted in a file name when the host field of the name is introduced by {, [, and (, respectively. The characters {, [, (, and &lt; need only be quoted if they appear as the first character of a file name fragment, where they would otherwise be assumed to introduce the <span class="s11">HOST </span>or <span class="s11">DIRECTORY </span>fields.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following functions are the standard way to manipulate file names in Medley. Their operation is purely syntactic—they perform no file system operations themselves.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>UNPACKFILENAME.STRING </b><i>FILENAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Parses <span class="s16">FILENAME</span>, returning a list in property list format of alternating field names and field contents. The field contents are returned as strings. If it is a stream, its full name is used.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Only those fields actually present in <span class="s16">FILENAME </span>are returned. A field is considered present if its delimiting punctuation is present, even if the field itself is empty. Empty fields are denoted by &quot;&quot; (the empty string).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Examples:</p><p class="s11" style="padding-top: 6pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(UNPACKFILENAME.STRING &quot;FOO.BAR&quot;) =&gt; (NAME &quot;FOO&quot; EXTENSION &quot;BAR&quot;)</p><p class="s11" style="padding-top: 5pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(UNPACKFILENAME.STRING &quot;FOO.;2&quot;) =&gt; (NAME &quot;FOO&quot; EXTENSION &quot;&quot; VERSION &quot;2&quot;)</p><p class="s11" style="padding-top: 5pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(UNPACKFILENAME.STRING &quot;FOO;&quot;) =&gt; (NAME &quot;FOO&quot; VERSION &quot;&quot;)</p><p class="s11" style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">(UNPACKFILENAME.STRING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 190pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;{ERIS}&lt;LISP&gt;CURRENT&gt;IMTRAN.DCOM;21&quot;)</p><p class="s11" style="padding-left: 206pt;text-indent: -27pt;line-height: 88%;text-align: left;">=&gt; (HOST &quot;ERIS&quot; DIRECTORY &quot;LISP&gt;CURRENT&quot; NAME &quot;IMTRAN&quot; EXTENSION &quot;DCOM&quot; VERSION &quot;21&quot;)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>UNPACKFILENAME </b><i>FILE</i>)                                          <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Old version of <span class="s11">UNPACKFILENAME.STRING </span>that returns the field values as atoms, rather than as strings. <span class="s11">UNPACKFILENAME.STRING </span>is now considered the &quot;correct&quot; way of unpacking file names, because it does not lose information when the contents of a field are numeric. For example,</p><p class="s11" style="padding-top: 6pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(UNPACKFILENAME ’STUFF.TXT) =&gt; (NAME STUFF EXTENSION TXT)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">but</p><p class="s11" style="padding-top: 6pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(UNPACKFILENAME ’STUFF.029) =&gt; (NAME STUFF EXTENSION 29)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Explicitly omitted fields are denoted by the atom <span class="s11">NIL</span>, rather than the empty string.</p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: -30pt;line-height: 94%;text-align: justify;">Note: Both <span class="s11">UNPACKFILENAME </span>and <span class="s11">UNPACKFILENAME.STRING </span>leave the trailing colon on the device field, so that the Tenex device <span class="s11">NIL: </span>can be distinguished from the absence of a device. Although <span class="s11">UNPACKFILENAME.STRING </span>is capable of making the distinction, it retains this behavior for backward compatibility. Thus,</p><p class="s11" style="padding-top: 6pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(UNPACKFILENAME.STRING ’{TOAST}DSK:FOO) =&gt; (HOST &quot;TOAST&quot; DEVICE &quot;DSK:&quot; NAME &quot;FOO&quot;)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">(<b>FILENAMEFIELD </b><i>FILENAME FIELDNAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns, as an atom, the contents of the <span class="s16">FIELDNAME </span>field of <span class="s16">FILENAME</span>. If <span class="s16">FILENAME </span>is a stream, its full name is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 102pt;text-indent: 0pt;line-height: 77%;text-align: left;"><span class="s11">(</span><b>PACKFILENAME.STRING </b>FIELD<span class="s32">1 </span>CONTENTS<span class="s32">1 </span>... FIELD<span class="s32">N </span>CONTENTS<span class="s32">N</span><span class="s11">) </span><span class="p">[NoSpread</span></p><p style="padding-left: 107pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Function]</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: left;">Takes a sequence of alternating field names and field contents (atoms or strings), and returns the corresponding file name, as a string.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">PACKFILENAME.STRING </span>is given a single argument, it is interpreted as a list of alternating field names and field contents. Thus <span class="s11">PACKFILENAME.STRING </span>and <span class="s11">UNPACKFILENAME.STRING </span>operate as inverses.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">If the same field name is given twice, the <i>first </i>occurrence is used.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">The contents of the field name <span class="s11">DIRECTORY </span>may be either a directory name or a full directory specification as described above.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">PACKFILENAME.STRING <span class="p">also accepts the &quot;field name&quot; </span>BODY <span class="p">to mean that its contents should itself be unpacked and spliced into the argument list at that point. This feature, in conjunction with the rule that fields early in the argument list override later duplicates, is useful for altering existing file names. For example, to provide a default field, place </span>BODY</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 336pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">first in the argument list, then the default fields. To override a field, place the new fields first and <span class="s11">BODY </span>last.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 153%;text-align: left;">If the value of the <span class="s11">BODY </span>field is a stream, its full name is used. Examples:</p><p class="s11" style="padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’DIRECTORY &quot;LISP&quot; ’NAME &quot;NET&quot;)</p><p class="s11" style="padding-left: 158pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;&lt;LISP&gt;NET&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’NAME &quot;NET&quot; ’DIRECTORY &quot;{DSK}&lt;LISPFILES&gt;&quot;)</p><p class="s11" style="padding-left: 158pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{DSK}&lt;LISPFILES&gt;NET&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’DIRECTORY &quot;{DSK}&quot; ’BODY &quot;{TOAST}&lt;FOO&gt;BAR&quot;)</p><p class="s11" style="padding-left: 158pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{DSK}BAR&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’DIRECTORY &quot;FRED&quot; ’BODY &quot;{TOAST}&lt;FOO&gt;BAR&quot;)</p><p class="s11" style="padding-left: 158pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{TOAST}&lt;FRED&gt;BAR&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’BODY &quot;{TOAST}&lt;FOO&gt;BAR&quot; ’DIRECTORY &quot;FRED&quot;)</p><p class="s11" style="padding-left: 158pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{TOAST}&lt;FOO&gt;BAR&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’VERSION NIL ’BODY &quot;{TOAST}&lt;FOO&gt;BAR.DCOM;2&quot;)</p><p class="s11" style="padding-left: 158pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{TOAST}&lt;FOO&gt;BAR.DCOM&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’BODY &quot;{TOAST}&lt;FOO&gt;BAR.DCOM&quot; ’VERSION 1)</p><p class="s11" style="padding-left: 158pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{TOAST}&lt;FOO&gt;BAR.DCOM;1&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’BODY &quot;{TOAST}&lt;FOO&gt;BAR.DCOM;&quot; ’VERSION 1)</p><p class="s11" style="padding-left: 158pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{TOAST}&lt;FOO&gt;BAR.DCOM;&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’BODY &quot;BAR.;1&quot; ’EXTENSION &quot;DCOM&quot;)</p><p class="s11" style="padding-left: 158pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;BAR.;1&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’BODY &quot;BAR;1&quot; ’EXTENSION &quot;DCOM&quot;)</p><p class="s11" style="padding-left: 158pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;BAR.DCOM;1&quot;</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In the last two examples, note that in one case the extension is explicitly present in the body (as indicated by the preceding period), while in the other there is no indication of an extension, so the default is used.</p><p class="s16" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s11">(</span><b>PACKFILENAME </b>FIELD<span class="s32">1 </span>CONTENTS<span class="s32">1 </span>... FIELD<span class="s32">N </span>CONTENTS<span class="s32">N</span><span class="s11">) </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The same as <span class="s11">PACKFILENAME.STRING</span>, except that it returns the file name as a symbol, instead of a string.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 30pt;text-indent: -24pt;text-align: left;">Incomplete File Names                                                                                                                             </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In general, it is not necessary to pass a complete file name (one containing all the fields listed above) to functions that take a file name as an argument. Interlisp supplies suitable defaults for certain fields (below).  Functions that return names of actual files, however, always return the full file name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the version field is omitted from a file name, Interlisp performs version recognition, as described below.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If the host, device and / or directory field are omitted from a file name, Interlisp uses the currently connected directory. You can change the currently connected directory by by calling <span class="s11">CNDIR </span>(below) or using the programmer’s assistant command <span class="s11">CONN</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Defaults are added to the partially specified name &quot;left to right&quot; until a host, device or directory field is encountered. Thus, if the connected directory is <span class="s11">{TWENTY}PS:&lt;FRED&gt;</span>, then</p><p class="s11" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">BAR.DCOM <span class="p">means</span></p><p class="s11" style="padding-left: 27pt;text-indent: 0pt;line-height: 10pt;text-align: center;">{TWENTY}PS:&lt;FRED&gt;BAR.DCOM</p><p class="s11" style="padding-top: 2pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">&lt;GRANOLA&gt;BAR.DCOM <span class="p">means</span></p><p class="s11" style="padding-left: 44pt;text-indent: 0pt;line-height: 10pt;text-align: center;">{TWENTY}PS:&lt;GRANOLA&gt;BAR.DCOM</p><p class="s11" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;line-height: 12pt;text-align: center;">MTA0:&lt;GRANOLA&gt;BAR.DCOM <span class="p">means</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">{TWENTY}MTA0:&lt;GRANOLA&gt;BAR.DCOM</p><p class="s11" style="padding-top: 2pt;padding-left: 26pt;text-indent: 0pt;line-height: 12pt;text-align: center;">{THIRTY}&lt;GRANOLA&gt;BAR.DCOM <span class="p">means</span></p><p class="s11" style="padding-left: 27pt;text-indent: 0pt;line-height: 10pt;text-align: center;">{THIRTY}&lt;GRANOLA&gt;BAR.DCOM</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In addition, if the partially specified name contains a subdirectory, but no principal directory, then the subdirectory is appended to the connected directory. For example,</p><p class="s11" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">ISO&gt;BAR.DCOM <span class="p">means</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">{TWENTY}PS:&lt;FRED&gt;ISO&gt;BAR.DCOM</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Or, if the connected directory is the Unix directory <span class="s11">{UNX}/usr/fred/</span>, then <span class="s11">iso/bar.dcom </span>means</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">{UNX}/usr/fred/iso/bar.dcom<span class="p">, but </span>/other/bar.dcom <span class="p">means </span>{UNX}/other/bar.dcom<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>CNDIR </b><i>HOST/DIR</i>)                                               <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Connects to the directory <span class="s16">HOST/DIR</span>, which can either be a directory name or a full directory specification including host and / or device. If the specification includes just a host, and the host supports directories, the directory is defaulted to the value of <span class="s11">(USERNAME)</span>; if the host is omitted, connection is made to another directory on the same host as before. If <span class="s16">HOST/DIR </span>is <span class="s11">NIL</span>, connects to the value of <span class="s11">LOGINHOST/DIR</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">CNDIR </span>returns the full name of the now-connected directory. Causes an error, <span class="s11">Non- existent directory</span>, if <span class="s16">HOST/DIR </span>is not a valid directory.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Note that <span class="s11">CNDIR </span>does not necessarily require or provide any directory access privileges. Access privileges are checked when a file is opened.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">CONN <i>HOST/DIR                                        </i><span class="p">[Prog. Asst. Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Command form of <span class="s11">CNDIR </span>for use at the executive. Connects to <span class="s16">HOST/DIR</span>, or to the value of <span class="s11">LOGINHOST/DIR </span>if <span class="s16">HOST/DIR </span>is omitted. This command is undoable. —Undoing it causes the system to connect to the previously connected directory.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">LOGINHOST/DIR                                                  <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">CONN <span class="p">with no argument connects to the value of the variable </span>LOGINHOST/DIR<span class="p">, initially</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">{DSK}<span class="p">, but usually reset in your greeting file (Chapter 12).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 336pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>DIRECTORYNAME </b><i>DIRNAME STRPTR</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">DIRNAME </span>is <span class="s11">T</span>, returns the full specification of the currently connected directory. If <span class="s16">DIRNAME </span>is <span class="s11">NIL</span>, returns the value of <span class="s11">LOGINHOST/DIR</span>. For any other value of <span class="s16">DIRNAME</span>, returns a full directory specification if <span class="s16">DIRNAME </span>designates an existing directory (satisfies <span class="s11">DIRECTORYNAMEP</span>), otherwise <span class="s11">NIL</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">STRPTR </span>is <span class="s11">T</span>, the value is returned as an atom, otherwise it is returned as a string.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>DIRECTORYNAMEP </b><i>DIRNAME HOSTNAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns <span class="s11">T </span>if <span class="s16">DIRNAME </span>is a valid directory on host <span class="s16">HOSTNAME</span>, or on the host of the currently connected directory if <span class="s16">HOSTNAME </span>is <span class="s11">NIL</span>. <span class="s16">DIRNAME </span>may be either a directory name or a full directory specification containing host and / or device.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s16">DIRNAME </span>includes subdirectories, this function may or may not pass judgment on their validity. Some hosts support &quot;true&quot; subdirectories, distinct entities manipulable by the file system, while others only provide them as a syntactic convenience.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>HOSTNAMEP </b><i>NAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns <span class="s11">T </span>if <span class="s16">NAME </span>is recognized as a valid host or file device name at the moment</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">HOSTNAMEP <span class="p">is called.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Version Recognition                                                                                                                                 </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Most of the file devices in Interlisp support file version numbers. That is, you can have several files of the exact same name, differing only in their <span class="s11">VERSION </span>field, which is incremented for each new &quot;version&quot; of the file that is created. When the filesystem encounters a file name without a version number, it must figure out which version was intended. This process is known as <i>version recognition</i>.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">When <span class="s11">OPENSTREAM </span>opens a file for input and no version number is given, the highest existing version number is used. Similarly, when a file is opened for output and no version number is given, a new file is created with a version number one higher than the highest one currently in use with that file name. You can change he version number defaulting for <span class="s11">OPENSTREAM </span>by specifying a different value for its <span class="s16">RECOG </span>argument (see <span class="s11">FULLNAME </span>below).</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Other functions that accept file names as arguments generally perform default version recognition, which is newest version for existing files, or a new version if using the file name to create a new file. The one exception is <span class="s11">DELFILE</span>, which uses the oldest existing version of the file.</p><p style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The functions below can be used to perform version recognition without actually calling <span class="s11">OPENSTREAM </span>to open the file. Note that these functions only tell the truth at the moment they are called, and thus cannot be used to anticipate the name of the file opened by a comparable <span class="s11">OPENSTREAM</span>. They are best used as helpful hints.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FULLNAME </b><i>X RECOG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is an open stream, simply returns the full file name of the stream. Otherwise, if <span class="s16">X </span>is a file name given as a string or symbol, performs version recognition, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s16">X </span>is recognized in the recognition mode specified by <span class="s16">RECOG </span>as an abbreviation for some file, returns the file’s full name, otherwise <span class="s11">NIL</span>. <span class="s16">RECOG </span>is one of the following:</p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: -28pt;text-align: justify;"><span class="s11">OLD </span>Chooses the newest existing version of the file. Returns <span class="s11">NIL </span>if no file named <span class="s16">X </span>exists.</p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: -44pt;text-align: justify;"><span class="s11">OLDEST </span>Chooses the oldest existing version of the file. Returns <span class="s11">NIL </span>if no file named <span class="s16">X </span>exists.</p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: -28pt;line-height: 94%;text-align: justify;"><span class="s11">NEW </span>Chooses a new version of the file. If versions of <span class="s16">X </span>already exist, then chooses a version number one higher than highest existing version; otherwise chooses version 1. For some file systems, <span class="s11">FULLNAME </span>returns <span class="s11">NIL </span>if you do not have the access rights necessary to create a new file named <span class="s16">X</span>.</p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: -49pt;line-height: 93%;text-align: justify;"><span class="s11">OLD/NEW </span>Tries <span class="s11">OLD</span>, then <span class="s11">NEW</span>. Choose the newest existing version of the file, if any; otherwise chooses version 1. This usually only makes sense if you intend to open <span class="s16">X </span>for access <span class="s11">BOTH</span>.</p><p style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;text-align: justify;"><span class="s16">RECOG </span><span class="s11">= NIL </span>defaults to <span class="s11">OLD</span>. For all other values of <span class="s16">RECOG</span>, generates an error <span class="s11">ILLEGAL ARG</span>.</p><p style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>already contains a version number, the <span class="s16">RECOG </span>argument will never change it. In particular, <span class="s16">RECOG </span><span class="s11">= NEW </span>does not require that the file actually be new. For example, <span class="s11">(FULLNAME ’FOO.;2 ’NEW) </span>may return <span class="s11">{ERIS}&lt;LISP&gt;FOO.;2 </span>if that file already exists, even though <span class="s11">(FULLNAME ’FOO ’NEW) </span>would default the version to a new number, perhaps returning <span class="s11">{ERIS}&lt;LISP&gt;FOO.;5</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>INFILEP </b><i>FILE</i>)                                                 <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="p">Equivalent to </span>(FULLNAME <i>FILE </i><span class="s17">’</span>OLD)<span class="p">. Returns the full file name of the newest version of</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s16">FILE </span>if <span class="s16">FILE </span>is the name of an existing file that can be opened for input, <span class="s11">NIL </span>otherwise.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>OUTFILEP </b><i>FILE</i>)                                                <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="p">Equivalent to </span>(FULLNAME <i>FILE </i>’NEW)<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Note that <span class="s11">INFILEP</span>, <span class="s11">OUTFILEP </span>and <span class="s11">FULLNAME </span>do not open any files; they are pure predicates. They are also only hints, as they do not imply that the caller has access rights to the file. For example, <span class="s11">INFILEP </span>might return non-<span class="s11">NIL</span>, but <span class="s11">OPENSTREAM </span>might fail for the same file because you don’t have read access to it, or the file is open for output by another user. Similarly, <span class="s11">OUTFILEP </span>could return non- <span class="s11">NIL</span>, but <span class="s11">OPENSTREAM </span>could fail with a <span class="s11">FILE SYSTEM RESOURCES EXCEEDED </span>error.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Note also that in a shared file system, such as a remote file server, intervening file operations by another user could contradict the information returned by recognition. For example, a file that was <span class="s11">INFILEP </span>might be deleted, or between an <span class="s11">OUTFILEP </span>and the subsequent <span class="s11">OPENSTREAM</span>, another user might create a new version or delete the highest version, causing <span class="s11">OPENSTREAM </span>to open a different version of the file than the one returned by <span class="s11">OUTFILEP</span>. In addition, some file servers do not support recognition of files in output context. Thus, the &quot;truth&quot; about a file can only be obtained by actually opening the file; creators of files should rely on the name of the stream opened by <span class="s11">OPENSTREAM</span>, not</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 336pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="p">the value returned from these recognition functions. In particular, programmers are discouraged from using </span>OUTFILEP <span class="p">or </span>(FULLNAME <i>NAME </i>’NEW)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Using File Names Instead of Streams                                                                                                     </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In earlier implementations of Interlisp, from the days of Interlisp-10 onward, the &quot;handle&quot; used to refer to an open file was not a stream, but rather the file’s full name, represented as a symbol. When the file name was passed to any I / O function, it was mapped to a stream by looking it up in a list of open files. This scheme was sometimes convenient for typing in file commands at the executive, but was poor for serious programming in two ways. First, mapping from file name to stream on every input / output operation is inefficient. Second, and more importantly, using the file name as the handle on an open stream means that it is not possible to have more than one stream open on a given file at once.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">As of this writing, Medley is in a transition period, where it still supports the use of symbol file names as synonymous with open streams, but this use is not recommended. The remainder of this section discusses this usage of file names for the benefit of those reading older programs and wishing to convert them to work properly when this compatibility feature is removed.</p><p class="s6" style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">File Name Efficiency Considerations</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">It is possible for a program to be seriously inefficient using a file name as a stream if the program is not using the name returned by <span class="s11">OPENFILE </span>(below). Any time that an input / output function is called with a file name other than the full file name, Interlisp must perform recognition on the partial file name to determine which open file is intended. Thus if repeated operations are to be performed, it is considerably more efficient to use the full file name returned from <span class="s11">OPENFILE</span>.</p><p style="padding-top: 7pt;padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">There is a more subtle problem with partial file names, in that recognition is performed on your entire directory, not just the open files. It is possible for a file name that previously denoted one file to suddenly denote a different file. For example, suppose a program performs <span class="s11">(INFILE ’FOO)</span>, opening <span class="s11">FOO.;1</span>, and reads several expressions from <span class="s11">FOO</span>. Then you interrupt the program, create a <span class="s11">FOO.;2 </span>and resume the program (or a user at another workstation creates a <span class="s11">FOO.;2</span>). Now a call to <span class="s11">READ </span>giving it <span class="s11">FOO </span>as its <span class="s16">FILE </span>argument will generate a <span class="s11">FILE NOT OPEN </span>error, because <span class="s11">FOO </span>will be recognized as <span class="s11">FOO.;2</span>.</p><p class="s6" style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Obsolete File Opening Functions</p><p style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The following functions are now obsolete, but are provided for backwards compatibility:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>OPENFILE </b><i>FILE ACCESS RECOG PARAMETERS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Opens <span class="s16">FILE </span>with access rights as specified by <span class="s16">ACCESS</span>, and recognition mode <span class="s16">RECOG</span>, and returns the full name of the resulting stream. Equivalent to <span class="s11">(FULLNAME (OPENSTREAM </span><span class="s16">FILE ACCESS RECOG PARAMETERS</span><span class="s11">))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>INFILE </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 112%;text-align: justify;">Opens <span class="s16">FILE </span>for input, and sets it as the primary input stream. Equivalent to <span class="s11">(INPUT (OPENSTREAM </span><span class="s16">FILE </span><span class="s11">’INPUT ’OLD))</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>OUTFILE </b><i>FILE</i>)                                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Opens <span class="s16">FILE </span>for output, and sets it as the primary output stream. Equivalent to <span class="s11">(OUTPUT (OPENSTREAM </span><span class="s16">FILE </span><span class="s11">’OUTPUT ’NEW))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>IOFILE </b><i>FILE</i>)                                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Opens <span class="s16">FILE </span>for both input and output. Equivalent to <span class="s11">(OPENFILE </span><span class="s16">FILE </span><span class="s11">’BOTH ’OLD)</span>. Does not affect the primary input or output stream.</p><p class="s6" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Converting Old Programs</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">At some point in the future, the Medley file system will change so that each call to <span class="s11">OPENSTREAM </span>returns a distinct stream, even if a stream is already open to the specified file. This change is required in order to deal with files in a multiprocessing environment.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">This change will produce the following incompatibilities:</p><ol id="l61"><li><p style="padding-top: 6pt;padding-left: 114pt;text-indent: -18pt;line-height: 93%;text-align: justify;">The functions <span class="s11">OPENFILE</span>, <span class="s11">INPUT</span>, and <span class="s11">OUTPUT </span>will return a stream, not a full file name. To make this less confusing in interactive situations, streams will have a print format that reveals the underlying file’s actual name.</p></li><li><p style="padding-top: 6pt;padding-left: 114pt;text-indent: -18pt;line-height: 92%;text-align: justify;">Passing anything other than the object returned from <span class="s11">OPENFILE </span>to I / O operations will cause problems. Passing the file’s name will be significantly slower than passing the stream (even when passing the &quot;full&quot; file name), and in the case where there is more than one stream open on the file it might even act on the wrong one.</p></li><li><p class="s11" style="padding-top: 6pt;padding-left: 114pt;text-indent: -114pt;line-height: 12pt;text-align: left;">OPENP <span class="p">will return </span>NIL <span class="p">when passed the name of a file rather than the value of</span></p></li></ol></li></ol><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: left;">OPENFILE <span class="p">or </span>OPENSTREAM<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">You should consider the following advice when writing new programs and editing existing programs, so your programs will behave properly when the change occurs:</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Because of the efficiency and ambiguity considerations described earlier, users have long been encouraged to use only full file names as <span class="s16">FILE </span>arguments to I / O operations. The &quot;proper&quot; way to have done this was to bind a variable to the value returned from <span class="s11">OPENFILE </span>and pass that variable to all I / O operations; such code will continue to work. A less proper way to obtain the full file name, but one which has to date not incurred any obvious penalty, is that which binds a variable to the result of an <span class="s11">INFILEP </span>and passes that to <span class="s11">OPENFILE </span>and all I / O operations. This has worked because <span class="s11">INFILEP </span>and <span class="s11">OPENFILE </span>both return a full file name, an invalid assumption in this future world.</p><p style="padding-top: 1pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Such code should be changed to pass around the value of the <span class="s11">OPENFILE</span>, not the <span class="s11">INFILEP</span><span class="s10">.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Code that calls <span class="s11">OPENP </span>to test whether a possibly incomplete file name is already open should be recoded to pass to <span class="s11">OPENP </span>only the value returned from <span class="s11">OPENFILE </span>or <span class="s11">OPENSTREAM</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Code that uses ordinary string functions to manipulate file names, and in particular the value returned from <span class="s11">OPENFILE</span>, should be changed to use the the functions <span class="s11">UNPACKFILENAME.STRING </span>and <span class="s11">PACKFILENAME.STRING</span>. Those functions work both on file names (strings) and streams (coercing the stream to the name of its file).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Code that tests the value of <span class="s11">OUTPUT </span>for equality to some known file name or <span class="s11">T </span>should be examined carefully and, if possible, recoded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 336pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">To see more directly the effects of passing around streams instead of file names, replace your calls to <span class="s11">OPENFILE </span>with calls to <span class="s11">OPENSTREAM</span>. <span class="s11">OPENSTREAM </span>is called in exactly the same way, but returns a <span class="s11">STREAM</span>. Streams can be passed to <span class="s11">READ</span>, <span class="s11">PRINT</span>, <span class="s11">CLOSEF</span>, etc just as the file’s full name can be currently, but using them is more efficient. The function <span class="s11">FULLNAME</span>, when applied to a stream, returns its full file name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 47pt;text-indent: 0pt;text-align: center;">Using Files with Processes                                                                                                                      </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Because Medley does not yet support multiple streams per file, problems can arise if different processes attempt to access the same file. You have to be careful not to have two processes manipulating the same file at the same time, since the two processes will be sharing a single input stream and file pointer. For example, you can’t have one process <span class="s11">TCOMPL </span>a file while another process is running <span class="s11">LISTFILES </span>on it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 47pt;text-indent: 0pt;text-align: center;">File Attributes                                                                                                                                            </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Any file has a number of &quot;file attributes&quot;, such as the read date, protection, and bytesize. The exact attributes that a file can have is dependent on the file device. The functions <span class="s11">GETFILEINFO </span>and <span class="s11">SETFILEINFO </span>allow you to access file attributes:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>GETFILEINFO </b><i>FILE ATTRIB</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the current setting of the <span class="s16">ATTRIB </span>attribute of <span class="s16">FILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>SETFILEINFO </b><i>FILE ATTRIB VALUE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Sets the attribute <span class="s16">ATTRIB </span>of <span class="s16">FILE </span>to be <span class="s16">VALUE</span>. <span class="s11">SETFILEINFO </span>returns <span class="s11">T </span>if it is able to change the attribute <span class="s16">ATTRIB</span>, and <span class="s11">NIL </span>if unsuccessful, either because the file device does not recognize <span class="s16">ATTRIB </span>or because the file device does not permit the attribute to be modified.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The <span class="s16">FILE </span>argument to <span class="s11">GETFILEINFO </span>and <span class="s11">SETFILEINFO </span>can be an open stream (or an argument designating an open stream, see Chapter 25), or the name of a closed file. <span class="s11">SETFILEINFO </span>in general requires write access to the file.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The attributes recognized by <span class="s11">GETFILEINFO </span>and <span class="s11">SETFILEINFO </span>fall into two categories: <i>permanent </i>attributes, which are properties of the file, and <i>temporary </i>attributes, which are properties only of an open stream to the file. The temporary attributes are only recognized when <span class="s16">FILE </span>designates an open stream; the permanent attributes are usually equally accessible for open and closed files. However, some devices are willing to change the value of certain attributes of an open stream only when specified in the <span class="s11">PARAMETERS </span>argument to <span class="s11">OPENSTREAM </span>(see above), not on a later call to <span class="s11">SETFILEINFO</span>.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">The following are permanent attributes of a file:</p><p class="s11" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">BYTESIZE  <span class="p">The byte size of the file.  Medley currently only supports byte size 8.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -44pt;text-align: justify;">LENGTH <span class="p">The number of bytes in the file. Alternatively, the byte position of the end-of-file. Like </span>(GETEOFPTR <i>FILE</i>)<span class="p">, but </span><i>FILE </i><span class="p">does not have to be open.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 140pt;text-indent: 0pt;text-align: left;"><span class="s11">SIZE </span>The size of <span class="s16">FILE </span>in pages.</p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: -76pt;line-height: 92%;text-align: justify;"><span class="s11">CREATIONDATE </span>The date and time, as a string, that the content of <span class="s16">FILE </span>was &quot;created&quot;. The creation date changes whenever the content of the file is modified, but remains unchanged when a file is transported, unmodified, across file systems. Specifically, <span class="s11">COPYFILE </span>and <span class="s11">RENAMEFILE </span>(see below) preserve the file’s creation date. Note that this is different from the concept of &quot;creation date&quot; used by some operating systems (e.g., Tops20).</p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: -60pt;line-height: 92%;text-align: justify;"><span class="s11">WRITEDATE </span>The date and time, as a string, that the content of <span class="s16">FILE </span>was last written to this particular file system. When a file is copied, its creation date does not change, but its write date becomes the time at which the copy is made.</p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: -55pt;text-align: justify;"><span class="s11">READDATE </span>The date and time, as a string, that <span class="s16">FILE </span>was last read, or <span class="s11">NIL </span>if it has never been read.</p><p class="s11" style="padding-top: 8pt;padding-left: 108pt;text-indent: -16pt;line-height: 113%;text-align: left;">ICREATIONDATE IWRITEDATE</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">IREADDATE <span class="p">The </span>CREATIONDATE<span class="p">, </span>WRITEDATE <span class="p">and </span>READDATE<span class="p">, respectively, in</span></p><p style="padding-left: 174pt;text-indent: 0pt;text-align: justify;">integer form, as <span class="s11">IDATE </span>(Chapter 12) would return. This form is useful for comparing dates.</p><p class="s11" style="padding-top: 6pt;padding-left: 129pt;text-indent: 0pt;text-align: left;">AUTHOR <span class="p">The name of the user who last wrote the file.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: -33pt;line-height: 94%;text-align: justify;">TYPE <span class="p">The &quot;type&quot; of the file, some indication of the nature of the file’s content. The &quot;types&quot; of files allowed depends on the file device. Most devices recognize the symbol </span>TEXT <span class="p">to mean that the file contains just characters, or </span>BINARY <span class="p">to mean that the file contains arbitrary data.</span></p><p style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Some devices support a wider range of file types that distinguish among the various sorts of files one might create whose content is &quot;binary&quot;. All devices interpret any value of <span class="s11">TYPE </span>that they do not support to be <span class="s11">BINARY</span>. Thus, <span class="s11">GETFILEINFO </span>may return the more general value <span class="s11">BINARY </span>instead of the original type that was passed to <span class="s11">SETFILEINFO </span>or <span class="s11">OPENSTREAM</span>. Similarly, <span class="s11">COPYFILE</span>, while attempting to preserve the <span class="s11">TYPE </span>of the file it is copying, may turn, say, an <span class="s11">INTERPRESS </span>file into a mere <span class="s11">BINARY </span>file.</p><p style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The way in which some file devices (e.g., Xerox file servers) support a wide range of file types is by representing the type as an integer, whose interpretation is known by the client. The variable <span class="s11">FILING.TYPES </span>is used to associate symbolic types with numbers for these devices. This list initially contains some of the well-known assignments of type name to number; you can add additional elements to handle any private file types. For example, suppose there existed an NS file type <span class="s11">MAZEFILE </span>with numeric value 5678. You could add the element <span class="s11">(MAZEFILE 5678) </span>to <span class="s11">FILING.TYPES </span>and then use <span class="s11">MAZEFILE </span>as a value for the <span class="s11">TYPE </span>attribute to <span class="s11">SETFILEINFO </span>or <span class="s11">OPENSTREAM</span>. Other devices are, of</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 336pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">course, free to store <span class="s11">TYPE </span>attributes in whatever manner they wish, be it numeric or symbolic. <span class="s11">FILING.TYPES </span>is merely considered the official registry for Xerox file types.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For most file devices, the <span class="s11">TYPE </span>of a newly created file, if not specified in the <span class="s16">PARAMETERS </span>argument to <span class="s11">OPENSTREAM</span>, defaults to the value of <span class="s11">DEFAULTFILETYPE</span>, initially <span class="s11">TEXT</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following are currently recognized as temporary attributes of an open stream:</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -44pt;text-align: justify;">ACCESS <span class="p">The current access rights of the stream (see the beginning of this chapter). Can be one of </span>INPUT<span class="p">, </span>OUTPUT<span class="p">, </span>BOTH<span class="p">, </span>APPEND<span class="p">; or </span>NIL <span class="p">if the stream is not open.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -82pt;line-height: 93%;text-align: justify;">ENDOFSTREAMOP <span class="p">The action to be taken when a stream is at &quot;end of file&quot; and an attempt is made to take input from it. The value of this attribute is a function of one argument, the stream. The function can examine the stream and its calling context and take any action it wishes. If the function returns normally, its should return either </span>T<span class="p">, meaning to try the input operation again, or the byte that </span>BIN <span class="p">would have returned had there been more bytes to read. Ordinarily, one should not let the </span>ENDOFSTREAMOP <span class="p">function return unless one is only performing binary input from the file, since there is no way in general of knowing in what state the reader was at the time the end of file occurred, and hence how it will interpret a single byte returned to it.</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The default <span class="s11">ENDOFSTREAMOP </span>is a system function that causes the error <span class="s11">END OF FILE</span>. The behavior of that error can be further modified for a particular stream by using the <span class="s11">EOF </span>option of <span class="s11">WHENCLOSE </span>(see below).</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: -28pt;line-height: 94%;text-align: justify;">EOL <span class="p">The end-of-line convention for the stream. This can be </span>CR<span class="p">, </span>LF<span class="p">, or </span>CRLF<span class="p">, indicating with what byte or sequence of bytes the &quot;End Of Line&quot; character is represented on the stream. On input, that sequence of bytes on the stream is read as </span>(CHARCODE EOL) <span class="p">by </span>READCCODE <span class="p">or the string reader. On output, </span>(TERPRI) <span class="p">and </span>(PRINTCCODE (CHARCODE EOL)) <span class="p">cause that sequence of bytes to be placed on the stream.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The end of line convention is usually not apparent to you. The file system is usually aware of the convention used by a particular remote operating system, and sets this attribute accordingly.  If you believe a file actually is stored with a different convention than the default, it is possible to modify the default behavior by including the <span class="s11">EOL </span>attribute in the <span class="s16">PARAMETERS </span>argument to <span class="s11">OPENSTREAM</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: -49pt;line-height: 93%;text-align: justify;">BUFFERS <span class="p">Value is the number of 512-byte buffers that the stream maintains at one time. This attribute is only used by certain random-access devices (currently, the local disk, floppy, and Leaf servers); all others ignore it.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Streams open to files generally maintain some portion of the file buffered in memory, so that each call to an I / O function does not</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;line-height: 92%;text-align: justify;">require accessing the actual file on disk or a file server. For files being read or written sequentially, not much buffer space is needed, since once a byte is read or written, it will never need to be seen again. In the case of random access streams, buffering is more complicated, since a program may jump around in the file, using <span class="s11">SETFILEPTR </span>(Chapter 25). In this case, the more buffer space the stream has, the more likely it is that after a <span class="s11">SETFILEPTR </span>to a place in the file that has already been accessed, the stream still has that part of the file buffered and need not go out to the device again. This benefit must, of course, be traded off against the amount of memory consumed by the buffers.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">NS servers implement the following additional attributes for <span class="s11">GETFILEINFO </span>(neither of these attributes are settable with <span class="s11">SETFILEINFO</span>):</p><p class="s11" style="padding-top: 6pt;padding-left: 129pt;text-indent: 0pt;text-align: justify;">READER <span class="p">The name of the user who last read the file.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: -66pt;line-height: 94%;text-align: justify;">PROTECTION <span class="p">A list specifying the access rights to the file. Each element of the list is of the form (name nametype . rights). Name is the name of a user or group or a name pattern. Rights is one or more of the symbols </span>ALL READ WRITE DELETE CREATE <span class="p">or </span>MODIFY<span class="p">. For servers running services 10.0 or later, nametype is the symbol &quot;--&quot;. , In earlyer releases it is one of the symbols </span>INDIVIDUAL <span class="p">or </span>GROUP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Closing and Reopening Files                                                                                                                   </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The function <span class="s11">WHENCLOSE </span>permits you to associate certain operations with open streams that govern how and when the stream will be closed. You can specify that certain functions will be executed before <span class="s11">CLOSEF </span>closes the stream and / or after <span class="s11">CLOSEF </span>closes the stream. You can make a particular stream be invisible to <span class="s11">CLOSEALL</span>, so that it will remain open across user invocations of <span class="s11">CLOSEALL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(</span><b>WHENCLOSE </b>FILE PROP<span class="s32">1 </span>VAL<span class="s32">1 </span>... PROP<span class="s32">N </span>VAL<span class="s32">N</span><span class="s11">)             </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s16">FILE </span>must designate an open stream other than <span class="s11">T </span>(<span class="s11">NIL </span>defaults to the primary input stream, if other than <span class="s11">T</span>, or primary output stream if other than <span class="s11">T</span>). The remaining arguments specify properties to be associated with the full name of <span class="s16">FILE</span>. <span class="s11">WHENCLOSE </span>returns the full name of <span class="s16">FILE </span>as its value.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">WHENCLOSE <span class="p">recognizes the following property names:</span></p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: -44pt;line-height: 93%;text-align: justify;">BEFORE <i>VAL </i><span class="p">is a function that </span>CLOSEF <span class="p">will apply to the stream just before it is closed. This might be used, for example, to copy information about the file from an in-core data structure to the file just before it is closed.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -39pt;line-height: 93%;text-align: justify;">AFTER <i>VAL </i><span class="p">is a function that </span>CLOSEF <span class="p">will apply to the stream just after it is closed. This capability permits in-core data structures that know about the stream to be cleaned up when the stream is closed.</span></p><p style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><span class="s11">CLOSEALL  </span><span class="s16">VAL </span>is either <span class="s11">YES </span>or <span class="s11">NO </span>and determines whether <span class="s16">FILE </span>will be closed by</p><p class="s11" style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">CLOSEALL <span class="p">(</span>YES<span class="p">) or whether </span>CLOSEALL <span class="p">will ignore it (</span>NO<span class="p">). </span>CLOSEALL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 336pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">uses <span class="s11">CLOSEF</span>, so that any <span class="s11">AFTER </span>functions will be executed if the stream is in fact closed. Files are initialized with <span class="s11">CLOSEALL </span>set to <span class="s11">YES</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: -28pt;text-align: justify;">EOF <i>VAL </i><span class="p">is a function that will be applied to the stream when an end-of-file error occurs, and the </span>ERRORTYPELST <span class="p">entry for that error, if any, returns </span>NIL<span class="p">. The function can examine the context of the error, and can decide whether to close the stream, </span>RETFROM <span class="p">some function, or perform some other computation. If the function supplied returns normally (i.e., does not </span>RETFROM <span class="p">some function), the normal error machinery will be invoked.</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The default <span class="s11">EOF </span>behavior, unless overridden by this <span class="s11">WHENCLOSE</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">option, is to call the value of <span class="s11">DEFAULTEOFCLOSE </span>(below).</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">For some applications, the <span class="s11">ENDOFSTREAMOP </span>attribute (see above) is a more useful way to intercept the end-of-file error. The <span class="s11">ENDOFSTREAMOP </span>attribute comes into effect before the error machinery is ever activated.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Multiple <span class="s11">AFTER </span>and <span class="s11">BEFORE </span>functions may be associated with a file; they are executed in sequence with the most recently associated function executed first. The <span class="s11">CLOSEALL </span>and <span class="s11">EOF </span>values, however, will override earlier values, so only the last value specified will have an effect.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DEFAULTEOFCLOSE <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Value is the name of a function that is called by default when an end of file error occurs and no <span class="s11">EOF </span>option has been specified for the stream by <span class="s11">WHENCLOSE</span>. The initial value of <span class="s11">DEFAULTEOFCLOSE </span>is <span class="s11">NILL</span>, meaning take no special action (go ahead and cause the error). Setting it to <span class="s11">CLOSEF </span>would cause the stream to be closed before the rest of the error machinery is invoked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">I/O Operations to and from Strings                                                                                                         </h4><p style="padding-top: 5pt;padding-left: 13pt;text-indent: 0pt;text-align: center;">It is possible to treat a string as if it were the contents of a file by using the following function:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>OPENSTRINGSTREAM </b><i>STR ACCESS</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Returns a stream that can be used to access the characters of the string <span class="s16">STR</span>. <span class="s16">ACCESS </span>may be either <span class="s11">INPUT</span>, <span class="s11">OUTPUT</span>, or <span class="s11">BOTH</span>; <span class="s11">NIL </span>defaults to <span class="s11">INPUT</span>. The stream returned may be used exactly like a file opened with the same access, except that output operations may not extend past the end of the original string. Also, string streams do not appear in the value of <span class="s11">(OPENP)</span>.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">For example, after performing</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(SETQ STRM (OPENSTRINGSTREAM &quot;THIS 2 (IS A LIST)&quot;))</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">the following succession of reads could occur:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 7pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(READ STRM) =&gt; THIS (RATOM STRM) =&gt; 2</p><p class="s11" style="padding-left: 190pt;text-indent: 0pt;line-height: 88%;text-align: left;">(READ STRM) =&gt; (IS A LIST) (EOFP STRM) =&gt; T</p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Compatibility Note: In Interlisp-10 it was possible to take input from a string simply by passing the string as the <span class="s16">FILE </span>argument to an input function. In order to maintain compatibility with this feature, Medley provides the same capability. This not terribly clean feature persists in the present implementation to give users time to convert old code. This means that strings are <i>not </i>equivalent to symbols when specifying a file name as a stream argument. In a future release, the old Interlisp-10 string-reading feature will be decommissioned, and <span class="s11">OPENSTRINGSTREAM </span>will be the only way to perform I / O on a string.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Temporary Files and the CORE Device                                                                                                   </h4><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Many operating systems have a notion of &quot;scratch file&quot;, a file typically used as temporary storage for data most naturally maintained in the form of a file, rather than some other data structure. A scratch file can be used as a normal file in most respects, but is automatically deleted from the file system after its useful life is up, e.g., when the job terminates, or you log out. In normal operation, you need never explicitly delete such files, since they are guaranteed to disappear soon.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A similar functionality is provided in Medley by core-resident files. Core-resident files are on the device <span class="s11">CORE</span>. The directory structure for this device and all files on it are represented completely within your virtual memory. These files are treated as ordinary files by all file operations; their only distinguishing feature is that all trace of them disappears when the Medley image is abandoned.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Core files are opened and closed by name the same as any other file, e.g., <span class="s11">(OPENSTREAM ’{CORE}&lt;FOO&gt;FIE.DCOM ’OUTPUT)</span>. Directory names are completely optional, so files can also have names of the form <span class="s11">{CORE}NAME.EXT</span>. Core files can be enumerated by <span class="s11">DIRECTORY </span>(see below). While open, they are registered in (<span class="s11">OPENP</span>). They do consume virtual memory space, which is only reclaimed when the file is deleted. Some caution should thus be used when creating large <span class="s11">CORE </span>files. Since the virtual memory of an Medley workstation usually persists far longer than the typical process on a mainframe computer, it is still important to delete <span class="s11">CORE </span>files after they are no longer in use.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">For many applications, the name of the scratch file is irrelevant, and there is no need for anyone to have access to the file independent of the program that created it. For such applications, <span class="s11">NODIRCORE </span>files are preferable. Files created on the device lisp <span class="s11">NODIRCORE </span>are core-resident files that have no name and are registered in no directory. These files &quot;disappear&quot;, and the resources they consume are reclaimed, when all pointers to the file are dropped. Hence, such files need never be explicitly deleted or, for that matter, closed. The &quot;name&quot; of such a file is simply the stream object returned from <span class="s11">(OPENSTREAM ’{NODIRCORE} ’OUTPUT)</span>, and it is this stream object that must be passed to all</p><p style="padding-top: 1pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">input / output operations, including <span class="s11">CLOSEF </span>and any calls to <span class="s11">OPENSTREAM </span>to reopen the file.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>COREDEVICE </b><i>NAME NODIRFLG</i>)                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Creates a new device for core-resident files and assigns <span class="s16">NAME </span>as its device name. Thus, after performing <span class="s11">(COREDEVICE ’FOO)</span>, one can execute <span class="s11">(OPENSTREAM ’{FOO}BAR ’OUTPUT) </span>to open a file on that device. Medley is initialized with the single core-resident device named <span class="s11">CORE</span>, but <span class="s11">COREDEVICE </span>may be used to create any number of logically distinct core devices.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 336pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NODIRFLG </span>is non-<span class="s11">NIL</span>, a core device that acts like <span class="s11">{NODIRCORE} </span>is created.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Compatibility note: In Interlisp-10, it was possible to create scratch files by using file names with suffixes ;S or ;T. In Medley, these suffixes in file names are simply ignored when output is directed to a particular host or device. However, the function <span class="s11">PACKFILENAME.STRING </span>is defined to default the device name to <span class="s11">CORE </span>if the file has the <span class="s11">TEMPORARY </span>attribute and no explicit host is provided.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">NULL Device                                                                                                                                              </h4><p class="s11" style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;"><span class="p">The </span>NULL <span class="p">device provides a source of content-free &quot;files&quot;. </span>(OPENSTREAM ’{NULL} ’OUTPUT) <span class="p">creates a stream that discards all output directed at it. </span>(OPENSTREAM ’{NULL} <span class="s17">’</span>INPUT<span class="s17">) </span><span class="p">creates a stream that is perpetually at end-of-file (i.e., has no input).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Deleting, Copying, and Renaming Files                                                                                                  </h4><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>DELFILE </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Deletes <span class="s16">FILE </span>if possible. The file must be closed. Returns the full name of the file if deleted, else <span class="s11">NIL</span>. Recognition mode for <span class="s16">FILE </span>is <span class="s11">OLDEST</span>, i.e., if <span class="s16">FILE </span>does not have a version number specified, then <span class="s11">DELFILE </span>deletes the oldest version of the file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>COPYFILE </b><i>FROMFILE TOFILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Copies <span class="s16">FROMFILE </span>to a new file named <span class="s16">TOFILE</span>. The source and destination may be on any combination of hosts / devices. <span class="s11">COPYFILE </span>attempts to preserve the <span class="s11">TYPE </span>and <span class="s11">CREATIONDATE </span>where possible. If the original file’s file type is unknown, <span class="s11">COPYFILE </span>attempts to infer the type (file type is <span class="s11">BINARY </span>if any of its 8-bit bytes have their high bit on).</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">COPYFILE <span class="p">uses </span>COPYCHARS <span class="p">(Chapter 25) if the source and destination hosts have different EOL conventions. Thus, it is possible for the source and destination files to be of different lengths.</span></p><p style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">RENAMEFILE </span><span class="s16">OLDFILE NEWFILE</span>) [Function]</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Renames <span class="s16">OLDFILE </span>to be <span class="s16">NEWFILE</span>. Causes an error, <span class="s11">FILE NOT FOUND </span>if <span class="s16">FILE </span>does not exist. Returns the full name of the new file, if successful, else <span class="s11">NIL </span>if the rename cannot be performed.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">OLDFILE </span>and <span class="s16">NEWFILE </span>are on the same host / device, and the device implements a renaming primitive, <span class="s11">RENAMEFILE </span>can be very fast. However, if the device does not know how to rename files in place, or if <span class="s16">OLDFILE </span>and <span class="s16">NEWFILE </span>are on different devices, <span class="s11">RENAMEFILE </span>works by copying <span class="s16">OLDFILE </span>to <span class="s16">NEWFILE </span>and then deleting <span class="s16">OLDFILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Searching File Directories                                                                                                                        </h4><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">DIRECTORIES                                                    <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Global variable containing the list of directories searched (in order) by SPELLFILE and <span class="s11">FINDFILE </span>(below) when not given an explicit <span class="s16">DIRLST </span>argument. In this list, the atom <span class="s11">NIL </span>stands for the login directory (the value of <span class="s11">LOGINHOST/DIR</span>), and the atom <span class="s11">T </span>stands for the currently connected directory. Other elements should be <i>full </i>directory specifications, e.g., <span class="s11">{TWENTY}PS:&lt;LISPUSERS&gt;</span>, not merely <span class="s11">LISPUSERS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">LISPUSERSDIRECTORIES                                           <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Global variable containing a list of directories to search for &quot;library&quot; package files. Used by the <span class="s11">FILES </span>file package command (Chapter 17).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SPELLFILE </b><i>FILE NOPRINTFLG NSFLG DIRLST</i>)                       <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Searches for the file name <i>FILE</i>, possibly performing spelling correction (see Chapter 20). Returns the corrected file name, if any, otherwise <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FILE </span>has a directory field, <span class="s11">SPELLFILE </span>attempts spelling correction against the files in that particular directory. Otherwise, <span class="s11">SPELLFILE </span>searches for the file on the directory list <span class="s16">DIRLST </span>before attempting any spelling correction.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NOPRINTFLG </span>is <span class="s11">NIL</span>, <span class="s11">SPELLFILE </span>asks you to confirm any spelling correction done, and prints out any files found, even if spelling correction is not done. If <span class="s16">NOPRINTFLG </span><span class="s11">= T</span>, <span class="s11">SPELLFILE </span>does not do any printing, nor ask for approval.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NSFLG </span><span class="s11">= T </span>(or <span class="s11">NOSPELLFLG = T</span>, see Chapter 20), no spelling correction is attempted, though searching through <span class="s16">DIRLST </span>still occurs.</p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">DIRLST <span class="p">is the list of directories searched if </span>FILE <span class="p">does not have a directory field. If</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">DIRLST </span>is <span class="s11">NIL</span>, the value of the variable <span class="s11">DIRECTORIES </span>is used.</p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: -30pt;line-height: 94%;text-align: justify;">Note: If <span class="s16">DIRLST </span>is <span class="s11">NIL</span>, and <span class="s16">FILE </span>is not found by searching the directories on <span class="s11">DIRECTORIES</span>, but the root name of <span class="s16">FILE </span>has a <span class="s11">FILEDATES </span>property (Chapter 17) indicating that a file by that name has been loaded, then the directory indicated in the <span class="s11">FILEDATES </span>property is searched, too. This additional search is not done if <span class="s16">DIRLST </span>is non- <span class="s11">NIL</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">ERRORTYPELST <span class="p">(Chapter 14) initially contains the entry </span>((23 (SPELLFILE (CADR ERRORMESS) NIL NOFILESPELLFLG)))<span class="p">, which causes </span>SPELLFILE <span class="p">to be called in case of a </span>FILE NOT FOUND <span class="p">error. If the variable </span>NOFILESPELLFLG <span class="p">is </span>T <span class="p">(its initial value), then spelling correction is not done on the file name, but </span>DIRECTORIES <span class="p">is still searched. If </span>SPELLFILE <span class="p">is successful, the operation will be reexecuted with the new (corrected) file name.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 336pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FINDFILE </b><i>FILE NSFLG DIRLST</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Uses <span class="s11">SPELLFILE </span>to search for a file named <span class="s16">FILE</span>. If it finds one, returns its full name, with no user interaction. Specifically, it calls <span class="s11">(SPELLFILE </span><span class="s16">FILE </span><span class="s11">T </span><span class="s16">NSFLG DIRLST</span><span class="s11">)</span>, after first performing two simple checks: If <span class="s16">FILE </span>has an explicit directory, it checks to see if a file so named exists, and if so returns that file. If <span class="s16">DIRLST </span>is <span class="s11">NIL</span>, it looks for <span class="s16">FILE </span>on the connected directory before calling <span class="s11">SPELLFILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 30pt;text-indent: -24pt;text-align: left;">Listing File Directories                                                                                                                             </h4><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">The function <span class="s11">DIRECTORY </span>allows you to conveniently specify and / or program a variety of directory operations:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>DIRECTORY </b><i>FILES COMMANDS DEFAULTEXT DEFAULTVERS</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Returns, lists, or performs arbitrary operations on all files specified by the &quot;file group&quot; <span class="s16">FILES</span>. A file group has the form of a regular file name, except that the character <span class="s11">* </span>can be used to match any number of characters, including zero, in the file name. For example, the file group <span class="s11">A*B </span>matches all file names beginning with the character <span class="s11">A </span>and ending with the character <span class="s11">B</span>.  The file group <span class="s11">*.DCOM </span>matches all files with an extension of <span class="s11">DCOM</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">FILES </span>does not contain an explicit extension, it is defaulted to <span class="s16">DEFAULTEXT</span>; if <span class="s16">FILES </span>does not contain an explicit version, it is defaulted to <span class="s16">DEFAULTVERS</span>. <span class="s16">DEFAULTEXT </span>and <span class="s16">DEFAULTVERS </span>themselves default to <span class="s11">*</span>. If the period or semicolon preceding the omitted extension or version, respectively, is present, the field is explicitly empty and no default is used. All other unspecified fields default to <span class="s11">*</span>. Null version is interpreted as &quot;highest&quot;. Thus <span class="s16">FILES </span><span class="s11">= * </span>or <span class="s11">*.* </span>or <span class="s11">*.*;* </span>enumerates all files on the connected directory; <span class="s16">FILES</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">= *<span class="s17">. </span><span class="p">or </span>*.;* <span class="p">enumerates all versions of files with null extension; </span><i>FILES </i>= *.; <span class="p">enumerates the highest version of files with null extension; and </span><i>FILES </i>= *.*; <span class="p">enumerates the highest version of all files. If </span><i>FILES </i><span class="p">is </span>NIL<span class="p">, it defaults to </span>*.*<span class="s17">;</span>*<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 132pt;text-indent: -30pt;line-height: 91%;text-align: left;">Note: Some hosts / devices are not capable of supporting &quot;highest version&quot; in enumeration. Such hosts instead enumerate <i>all </i>versions.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For each file that matches the file group <span class="s16">FILES</span>, the &quot;file commands&quot; in <span class="s16">COMMANDS </span>are executed in order. Some of the file commands allow aborting the command processing for a given file, effectively filtering the list of files. The interpretation of the different file commands is described below. If <span class="s16">COMMANDS </span>is <span class="s11">NIL</span>, it defaults to <span class="s11">(COLLECT)</span>, which collects the matching file names in a list and returns it as the value of <span class="s11">DIRECTORY</span>.</p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">The &quot;file commands&quot; in <span class="s16">COMMANDS </span>are interpreted as follows:</p><p class="s11" style="padding-top: 8pt;padding-left: 126pt;text-indent: -17pt;line-height: 93%;text-align: justify;">P <span class="p">Prints the file’s name. For readability, </span>DIRECTORY <span class="p">strips the directory from the name, printing it once as a header in front of each set of consecutive files on the same directory.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 84pt;text-indent: 19pt;line-height: 153%;text-align: justify;">PP <span class="p">Prints the file’s name without a version number. a string Prints the string.</span></p><p class="s11" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">READDATE, WRITEDATE</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;line-height: 127%;text-align: right;">CREATIONDATE, SIZE LENGTH, BYTESIZE PROTECTION, AUTHOR</p><p class="s11" style="padding-left: 140pt;text-indent: 0pt;line-height: 10pt;text-align: left;">TYPE <span class="p">Prints the appropriate information returned by </span>GETFILEINFO <span class="p">(see</span></p><p style="padding-left: 173pt;text-indent: 0pt;line-height: 12pt;text-align: left;">above).</p><p class="s11" style="padding-top: 6pt;padding-left: 173pt;text-indent: -49pt;text-align: left;">COLLECT <span class="p">Adds the full name of this file to an accumulating list, which will be returned as the value of </span>DIRECTORY<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 173pt;text-indent: -60pt;text-align: left;">COUNTSIZE <span class="p">Adds the size of this file to an accumulating sum, which will be returned as the value of </span>DIRECTORY<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 129pt;text-indent: 0pt;text-align: justify;">DELETE <span class="p">Deletes the file.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 129pt;text-indent: 0pt;text-align: justify;">DELVER <span class="p">If this file is not the highest version of files by its name, delete it.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 173pt;text-indent: -39pt;text-align: left;">PAUSE <span class="p">Waits until you type any character before proceeding with the rest of the commands (good for display if you want to ponder).</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following commands are predicates to filter the list. If the predicate is not satisfied, then processing for this file is aborted and no further commands (such as those above) are executed for this file.</p><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -30pt;line-height: 93%;text-align: justify;">Note: if the <span class="s11">P </span>and <span class="s11">PP </span>commands appear in <span class="s16">COMMANDS </span>ahead of any of the filtering commands below except <span class="s11">PROMPT</span>, they are postponed until after the filters. Thus, assuming the caller has placed the attribute options after the filters as well, no printing occurs for a file that is filtered out. This is principally so that functions like <span class="s11">DIR </span>(below) can both request printing and pass arbitrary commands through to <span class="s11">DIRECTORY</span>, and have the printing happen in the appropriate place.</p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: -68pt;text-align: justify;"><span class="s11">PROMPT </span><span class="s16">MESS </span>Prompts with the yes / no question <span class="s16">MESS</span>; if user responds with <span class="s11">N</span>o, abort command processing for this file.</p><p class="s16" style="padding-top: 6pt;padding-left: 174pt;text-indent: -68pt;text-align: justify;"><span class="s11">OLDERTHAN </span>N <span class="p">Continue command processing if the file hasn’t been referenced (read or written) in </span>N <span class="p">days. </span>N <span class="p">can also be a string naming an explicit date and time since which the file must not have been referenced.</span></p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: -68pt;text-align: justify;"><span class="s11">NEWERTHAN </span><span class="s16">N </span>Continue command processing if the file has been written within the last <span class="s16">N </span>days. <span class="s16">N </span>can also be a string naming an explicit date and time. Note that this is not quite the complement of <span class="s11">OLDERTHAN</span>, since it ignores the read date.</p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: -46pt;text-align: left;"><span class="s11">BY </span><span class="s16">USER </span>Continue command processing if the file was last written by the given user, i.e., its <span class="s11">AUTHOR </span>attribute matches (case insensitively) <span class="s16">USER</span>.</p><p style="padding-top: 7pt;padding-left: 174pt;text-indent: -25pt;text-align: justify;"><span class="s11">@ </span><span class="s16">X X </span>is either a function of one argument (<span class="s16">FILENAME</span>), or an arbitrary expression which uses the variable <span class="s11">FILENAME </span>freely. If <span class="s16">X </span>returns <span class="s11">NIL</span>, abort command processing for this file.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following two commands apply not to any particular file, but globally to the manner in which directory information is printed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 336pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 73pt;text-indent: 0pt;text-align: left;"><span class="s11">OUT </span>FILE <span class="p">Directs output to </span>FILE<span class="p">.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 68pt;text-indent: 0pt;text-align: left;"><span class="s11">COLUMNS </span>N <span class="p">Attempts to format output in </span>N <span class="p">columns (rather than just 1).</span></p><p class="s11" style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">DIRECTORY <span class="p">uses the variable </span>DIRCOMMANDS <span class="p">as a spelling list to correct spelling and define abbreviations and synonyms (see Chapter 20). Currently the following abbreviations are recognized:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:140.301pt" cellspacing="0"><tr style="height:13pt"><td style="width:52pt"><p class="s26" style="padding-right: 5pt;text-indent: 0pt;text-align: right;">AU</p></td><td style="width:27pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">AUTHOR</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 1pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">-</p></td><td style="width:27pt"><p class="s26" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">PAUSE</p></td></tr><tr style="height:13pt"><td style="width:52pt"><p class="s26" style="padding-top: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: right;">COLLECT?</p></td><td style="width:27pt"><p class="s26" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">PROMPT &quot; ? &quot; COLLECT</p></td></tr><tr style="height:13pt"><td style="width:52pt"><p class="s26" style="padding-top: 3pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: right;">DA</p></td><td style="width:27pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:149pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:52pt"><p class="s26" style="padding-right: 5pt;text-indent: 0pt;text-align: right;">DATE</p></td><td style="width:27pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">CREATIONDATE</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 1pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">TI</p></td><td style="width:27pt"><p class="s26" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">WRITEDATE</p></td></tr><tr style="height:13pt"><td style="width:52pt"><p class="s26" style="padding-top: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: right;">DEL</p></td><td style="width:27pt"><p class="s26" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DELETE</p></td></tr><tr style="height:13pt"><td style="width:52pt"><p class="s26" style="padding-top: 3pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: right;">DEL?</p></td><td style="width:27pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:149pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:52pt"><p class="s26" style="padding-right: 5pt;text-indent: 0pt;text-align: right;">DELETE?</p></td><td style="width:27pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">PROMPT &quot; delete? &quot; DELETE</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 1pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">OLD</p></td><td style="width:27pt"><p class="s26" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">OLDERTHAN 90</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 1pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">PR</p></td><td style="width:27pt"><p class="s26" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">PROTECTION</p></td></tr><tr style="height:12pt"><td style="width:52pt"><p class="s26" style="padding-top: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: right;">SI</p></td><td style="width:27pt"><p class="s26" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">SIZE</p></td></tr><tr style="height:9pt"><td style="width:52pt"><p class="s26" style="padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: right;">VERBOSE</p></td><td style="width:27pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;line-height: 8pt;text-align: left;">AUTHOR CREATIONDATE SIZE</p></td></tr><tr style="height:10pt"><td style="width:52pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:27pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:149pt"><p class="s26" style="padding-left: 14pt;text-indent: 0pt;line-height: 9pt;text-align: left;">READDATE WRITEDATE</p></td></tr></table><p class="s11" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FILDIR </b><i>FILEGROUP</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="p">Obsolete synonym of </span>(DIRECTORY <i>FILEGROUP</i>)<span class="p">.</span></p><p class="s11" style="padding-top: 9pt;padding-left: 77pt;text-indent: -24pt;line-height: 17pt;text-align: left;">(<b>DIR </b><i>FILEGROUP COM</i><i>1 </i><i>... COM</i><i>N</i>) <span class="p">[NLambda NoSpread Function] Convenient form of </span>DIRECTORY <span class="p">for use in type-in at the executive. Performs</span></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">(DIRECTORY ’<i>FILEGROUP </i>’(P <i>COM</i><i>1 </i>... <i>COM</i><i>N</i>))<span class="p">.</span></p><p class="s16" style="padding-top: 10pt;padding-left: 77pt;text-indent: -24pt;text-align: left;"><span class="s11">(</span><b>NDIR </b>FILEGROUP COM<span class="s32">1 </span>... COM<span class="s32">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Version of <span class="s11">DIR </span>that lists the file names in a multi-column format. Also, by default only lists the most recent version of files (unless <span class="s16">FILEGROUP </span>contains an explicit version).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l62"><li><p class="s6" style="padding-top: 4pt;padding-left: 28pt;text-indent: -22pt;text-align: left;"><a name="bookmark27">STREAMS AND FILES</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="605" height="3" alt="image" src="Image_063.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley can perform input / output operations on a large variety of physical devices, including local disk drives, floppy disk drives, the keyboard and display screen, and remote file server computers accessed over a network. While the low-level details of how all these devices perform input / output vary considerably, the Interlisp-D language provides the programmer a small, common set of abstract operations whose use is largely independent of the physical input / output medium involved— operations such as <i>read</i>, <i>print</i>, <i>change font</i>, or <i>go to a new line</i>. By merely changing the targeted I / O device, a single program can be used to produce output on the display, a file, or a printer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The underlying data abstraction that permits this flexibility is the <i>stream</i>. A stream is a data object (an instance of the data type <span class="s11">STREAM</span>) that encapsulates all of the information about an input / output connection to a particular I / O device. Each of Medley’s general-purpose I / O functions takes a stream as one of its arguments. The general-purpose function then performs action specific to the stream’s device to carry out the requested operation. Not every device is capable of implementing every I / O operation, while some devices offer additional functionality by way of special functions for that device alone.  Such restrictions and extensions are noted in the documentation of each device.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The vast majority of the streams commonly used in Medley fall into two interesting categories: the <i>file stream </i>and the <i>image stream</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A file is an ordered collection of data, usually a sequence of characters or bytes, stored on a file device in a manner that allows the data to be retrieved at a later time. Floppy disks, hard disks, and remote file servers are among the devices used to store files. Files are identified by a &quot;file name&quot;, which specifies the device on which the file resides and a name unique to a specific file on that device. Input or output to a file is performed by obtaining a stream to the file, using <span class="s11">OPENSTREAM </span>(see below). In addition, there are functions that manipulate the files themselves, rather than their data content.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">An image stream is an output stream to a display device, such as the display screen or a printer. In addition to the standard output operations, such as print, an image stream implements a variety of graphics operations, such as drawing lines and displaying characters in multiple fonts. Unlike a file, the &quot;content&quot; of an image stream cannot be retrieved. Image streams are described in Chapter 26.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The creation of other kinds of streams, such as network byte-stream connections, is described in the chapters peculiar to those kinds of streams. The operations common to streams in general are described in Chapter 24. This chapter describes operations specific to file devices: how to name files, how to open streams to files, and how to manipulate files on their devices.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Opening and Closing File Streams                                                                                                          </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In order to perform input from or output to a file, it is necessary to create a stream to the file, using</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">OPENSTREAM<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(OPENSTREAM <i>FILE ACCESS RECOG PARAMETERS —</i>)                    <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Opens and returns a stream for the file specified by <span class="s16">FILE</span>, a file name. <span class="s16">FILE </span>can be either a string or a symbol. The syntax and manipulation of file names is described at length in the <span class="s11">FILENAMES </span>section below. Incomplete file names are interpreted with respect to the connected directory (below).</p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">RECOG <span class="p">specifies the recognition mode of </span>FILE<span class="p">, as described in a later section of this chapter. If </span>RECOG <span class="s11">= NIL</span><span class="p">, it defaults according to the value of </span>ACCESS<span class="p">.</span></p><p class="s16" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">ACCESS <span class="p">specifies the &quot;access rights&quot; to be used when opening the file, one of the following:</span></p><p style="padding-top: 8pt;padding-left: 210pt;text-indent: -39pt;line-height: 93%;text-align: justify;"><span class="s11">INPUT </span>Only input operations are permitted on the file. The file must already exist. Starts reading at the beginning of the file. <span class="s16">RECOG </span>defaults to <span class="s11">OLD</span>.</p><p style="padding-top: 8pt;padding-left: 210pt;text-indent: -44pt;line-height: 92%;text-align: justify;"><span class="s11">OUTPUT </span>Only output operations are permitted on the file. Starts writing at the beginning of the file, which is initially empty. While the file is open, other users or processes are unable to open the file for either input or output.  <span class="s16">RECOG </span>defaults to <span class="s11">NEW</span>.</p><p style="padding-top: 8pt;padding-left: 210pt;text-indent: -33pt;text-align: justify;"><span class="s11">BOTH </span>Both input and output operations are permitted on the file. Starts reading or writing at the beginning of the file. <span class="s16">RECOG </span>defaults to <span class="s11">OLD/NEW</span>. <span class="s16">ACCESS </span><span class="s11">= BOTH </span>implies random accessibility (Chapter 25), and thus may not be possible for files on some devices<span class="s10">.</span></p><p style="padding-top: 7pt;padding-left: 209pt;text-indent: -44pt;text-align: justify;"><span class="s11">APPEND </span>Only sequential output operations are permitted on the file. Starts writing at the <i>end </i>of the file. <span class="s16">RECOG </span>defaults to <span class="s11">OLD/NEW</span>. <span class="s16">ACCESS </span><span class="s11">= APPEND </span>may not be allowed for files on some devices.</p><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -30pt;line-height: 93%;text-align: justify;">Note: <span class="s16">ACCESS </span><span class="s11">= OUTPUT </span>implies that one intends to write a new or different file, even if a version number was specified and the corresponding file already exists. Thus any previous contents of the file are discarded, and  the  file  is  empty  immediately  after  the  <span class="s11">OPENSTREAM</span>. If  it  is desired to write on an already existing file while preserving the old contents, the file must be opened for access <span class="s11">BOTH </span>or <span class="s11">APPEND</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">PARAMETERS </span>is a list of pairs <span class="s11">(</span><span class="s16">ATTRIB VALUE</span><span class="s11">)</span>, where <span class="s16">ATTRIB </span>is any file attribute that the file system is willing to allow you to set (see <span class="s11">SETFILEINFO </span>below). A non-list <span class="s16">ATTRIB </span>in <span class="s16">PARAMETERS </span>is treated as the pair <span class="s11">(</span><span class="s16">ATTRIB </span><span class="s11">T)</span>. Generally speaking, attributes that belong to the permanent file (e.g., <span class="s11">TYPE</span>) can only be set when creating a new file, while attributes that belong only to a particular opening of a file (e.g., <span class="s11">ENDOFSTREAMOP</span>) can be set on any call to <span class="s11">OPENSTREAM</span>. Not all devices honor all attributes; those not recognized by a particular device are simply ignored.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">In addition to the attributes permitted by <span class="s11">SETFILEINFO</span>, the following tokens are accepted by <span class="s11">OPENSTREAM </span>as values of <span class="s16">ATTRIB </span>in its <span class="s16">PARAMETERS </span>argument:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><span class="s11">DON’T.CHANGE.DATE </span>If  <span class="s16">VALUE </span>is  non-<span class="s11">NIL</span>,  the  file’s  creation  date  is  not</p><p style="padding-left: 228pt;text-indent: 0pt;line-height: 92%;text-align: justify;">changed when the  file  is  opened. This  option  is meaningful only for old files being opened for access <span class="s11">BOTH</span>. This should be used only for specialized applications in which the caller does not want the file system to believe the file’s content has been changed.</p><p style="padding-top: 7pt;padding-left: 228pt;text-indent: -66pt;line-height: 92%;text-align: justify;"><span class="s11">SEQUENTIAL </span>If <span class="s16">VALUE </span>is non-<span class="s11">NIL</span>, this opening of the file need support only sequential access; i.e., the caller intends never to use <span class="s11">SETFILEPTR</span>. For some devices, sequential access to files is much more efficient than random access. Note that the device may choose to ignore this attribute and still open the file in a manner that permits random access. Also note that this attribute does not make sense with <span class="s16">ACCESS </span><span class="s11">= BOTH</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FILE </span>is not recognized by the file system, <span class="s11">OPENSTREAM </span>causes the error <span class="s11">FILE NOT FOUND</span>. Ordinarily, this error is intercepted via an entry on <span class="s11">ERRORTYPELST </span>(Chapter 24), which causes <span class="s11">SPELLFILE </span>(see the Searching File Directories section of this chapter) to be called. <span class="s11">SPELLFILE </span>searches alternate directories and possibly attempts spelling correction on the file name. Only if <span class="s11">SPELLFILE </span>is unsuccessful will the <span class="s11">FILE NOT FOUND </span>error actually occur.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FILE </span>exists but cannot be opened, <span class="s11">OPENSTREAM </span>causes one of several other errors: <span class="s11">FILE WON’T OPEN </span>if the file is already opened for conflicting access by someone else; <span class="s11">PROTECTION VIOLATION </span>if the file is protected against the operation; <span class="s11">FILE SYSTEM RESOURCES EXCEEDED </span>if there is no more room in the file system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(CLOSEF <i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Closes <span class="s16">FILE</span>, and returns its full file name. Generates an error, <span class="s11">FILE NOT OPEN</span>, if <span class="s16">FILE </span>does not designate an open stream. After closing a stream, no further input / output operations are permitted on it.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">FILE </span>is <span class="s11">NIL</span>, it is defaulted to the primary input stream if that is not the terminal stream, or else the primary output stream if that is not the terminal stream. If both primary input and output streams are the terminal input / output streams, <span class="s11">CLOSEF </span>returns <span class="s11">NIL</span>. If <span class="s11">CLOSEF </span>closes either the primary input stream or the primary output stream (either explicitly or in the <span class="s16">FILE </span><span class="s11">= NIL </span>case), it resets the primary stream for that direction to be the corresponding terminal stream. See Chapter 25 for information on the primary input / output streams.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">WHENCLOSE <span class="p">(see below) allows you to &quot;advise&quot; </span>CLOSEF <span class="p">to perform various operations when a file is closed.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Because of buffering, the contents of a file open for output are not guaranteed to be written to the actual physical file device until <span class="s11">CLOSEF </span>is called. Buffered data can be</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">forced out to a file without closing the file by using the function <span class="s11">FORCEOUTPUT </span>(Chapter 25).</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Some network file devices perform their transactions in the background. As a result, it is possible for a file to be closed by <span class="s11">CLOSEF </span>and yet not be &quot;fully&quot; closed for some small period of time afterward, during which time the file appears to still be busy, and cannot be opened for conflicting access by other users.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(CLOSEF? <i>FILE</i>)                                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Closes <span class="s16">FILE </span>if it is open, returning the value of <span class="s11">CLOSEF</span>; otherwise does nothing and returns <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In the present implementation of Medley, all streams to files are kept, while open, in a registry of &quot;open files&quot;. This registry does not include nameless streams, such as string streams (see below), display streams (Chapter 28), and the terminal input and output streams; nor streams explicitly hidden from you, such as dribble streams (Chapter 30). This registry may not persist in future implementations of Medley, but at the present time it is accessible by the following two functions:</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(OPENP <i>FILE ACCESS</i>)                                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">ACCESS </span>is an access mode for a stream opening (one of <span class="s11">INPUT</span>, <span class="s11">OUTPUT</span>, <span class="s11">BOTH</span>, or</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">APPEND<span class="p">), or </span>NIL<span class="p">, meaning any access.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s16">FILE </span>is a stream, returns its full name if it is open for the specified access, else <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If <span class="s16">FILE </span>is a file name (a symbol), <span class="s16">FILE </span>is processed according to the rules of file recognition (see below). If a stream open to a file by that name is registered and open for the specified access, then the file’s full name is returned. If the file name is not recognized, or no stream is open to the file with the specified access, <span class="s11">NIL </span>is returned.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FILE </span>is <span class="s11">NIL</span>, returns a list of the full names of all registered streams that are open for the specified access.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(CLOSEALL <i>ALLFLG</i>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Closes all streams in the value of <span class="s11">(OPENP)</span>. Returns a list of the files closed.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">WHENCLOSE <span class="p">(see below) allows certain files to be &quot;protected&quot; from </span>CLOSEALL<span class="p">. If </span><i>ALLFLG</i></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;">is <span class="s11">T</span>, all files, including those protected by <span class="s11">WHENCLOSE</span>, are closed<span class="s10">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">File Names                                                                                                                                                 </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A file name in Medley is a string or symbol whose characters specify a &quot;path&quot; to the actual file: on what host or device the file resides, in which directory, and so forth. Because Medley supports a variety of non-local file devices, parts of the path could be very device-dependent. However, it is desirable for programs to be able to manipulate file names in a device-independent manner. To this end, Medley specifies a uniform file name syntax over all devices; the functions that perform the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">actual file manipulation for a particular device are responsible for any translation to that device’s naming conventions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A file name is composed of a collection of <i>fields</i>, some of which have specific semantic interpretations. The functions described below refer to each field by a <i>field name</i>, a literal atom from among the following: <span class="s11">HOST, DEVICE</span>, <span class="s11">DIRECTORY</span>, <span class="s11">NAME</span>, <span class="s11">EXTENSION</span>, and <span class="s11">VERSION</span>. The standard syntax for a file name that contains all of those fields is</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">{HOST}DEVICE:&lt;DIRECTORY&gt;NAME.EXTENSION;VERSION<span class="p">. Some host’s file systems do not use all of those fields in their file names.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 179pt;text-indent: -33pt;line-height: 93%;text-align: justify;">HOST <span class="p">Specifies the host whose file system contains the file. In the case of local file devices, the &quot;host&quot; is the name of the device, e.g., </span>DSK <span class="p">or </span>FLOPPY<span class="p">.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 179pt;text-indent: -44pt;line-height: 92%;text-align: justify;">DEVICE <span class="p">Specifies, for those hosts that divide their file system’s name space among mutiple physical devices, the device or logical structure on which the file resides. This should not be confused with Medley’s abstract &quot;file device&quot;, which denotes either a host or a local physical device and is specified by the </span>HOST <span class="p">field.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 179pt;text-indent: -60pt;line-height: 92%;text-align: justify;">DIRECTORY <span class="p">Specifies the &quot;directory&quot; containing the file. A directory usually is a grouping of a possibly large set of loosely related files, e.g., the personal files of a particular user, or the files belonging to some project. The </span>DIRECTORY <span class="p">field usually consists of a principal directory and zero or more subdirectories that together describe a path through a file system’s hierarchy. Each subdirectory name is set off from the previous directory or subdirectory by the character &quot;</span>&gt;<span class="p">&quot;; e.g., &quot;</span>LISP&gt;LIBRARY&gt;NEW<span class="p">&quot;.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 179pt;text-indent: -33pt;line-height: 93%;text-align: justify;">NAME <span class="p">This field carries no specific meaning, but generally names a set of files thought of as being different renditions of the &quot;same&quot; abstract file.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 179pt;text-indent: -60pt;line-height: 93%;text-align: justify;">EXTENSION <span class="p">This field also carries no specific meaning, but generally distinguishes the form of files having the same name. Most files systems have some &quot;conventional&quot; extensions that denote something about the content of the file. For example, in Medley, the extension </span>DCOM <span class="p">standardly denotes a file containing compiled function definitions.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 179pt;text-indent: -49pt;line-height: 92%;text-align: justify;">VERSION <span class="p">A number used to distinguish the versions or &quot;generations&quot; of the files having a common name and extension. The version number is incremented each time a new file by the same name is created.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Most functions that take as input &quot;a directory&quot; accept either a directory name (the contents of the</p><p class="s11" style="padding-left: 29pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DIRECTORY <span class="p">field of a file name) or a &quot;full&quot; directory specification—a file name fragment consisting of</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">only the fields <span class="s11">HOST</span>, <span class="s11">DEVICE</span>, and <span class="s11">DIRECTORY</span>. In particular, the &quot;connected directory&quot; (see below) consists, in general, of all three fields.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">For convenience in dealing with certain operating systems, Medley also recognizes <span class="s11">[] </span>and <span class="s11">() </span>as host delimiters (synonymous with <span class="s11">{}</span>), and <span class="s11">/ </span>as a directory delimiter (synonymous with <span class="s11">&lt; </span>at the beginning of a directory specification and <span class="s15">&gt; </span>to terminate directory or subdirectory specification). For example, a file on a Unix file server <span class="s11">UNX </span>with the name <span class="s11">/usr/foo/bar/stuff.tedit</span>, whose <span class="s11">DIRECTORY </span>field is thus <span class="s11">usr/foo/bar</span>, could be specified as <span class="s11">{UNX}/usr/foo/bar/stuff.tedit</span>, or <span class="s11">(UNX)&lt;usr/foo/bar&gt;stuff.tedit</span>, or several other variations. Note that when using <span class="s11">[] </span>or <span class="s11">() </span>as host delimiters, they usually must be escaped with the reader’s <span class="s11">% </span>escape character if the file name is expressed as a symbol rather than a string.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Different hosts have different requirements regarding which characters are valid in file names. From Medley’s point of view, any characters are valid. However, in order to be able to parse a file name into its component fields, it is necessary that those characters that are conventionally used as file name delimiters be quoted when they appear inside of fields where there could be ambiguity. The file name quoting character is &quot;<span class="s11">’</span>&quot; (single quote). Thus, the following characters must be quoted when not used as delimeters: <span class="s11">:</span>, <span class="s11">&gt;</span>, <span class="s11">;</span>, <span class="s11">/</span>, and <span class="s11">’ </span>itself. The character <span class="s11">. </span>(period) need only be quoted if it is to be considered a part of the <span class="s11">EXTENSION </span>field. The characters <span class="s11">}</span>, <span class="s11">]</span>, and <span class="s11">) </span>need only be quoted in a file name when the host field of the name is introduced by <span class="s11">{</span>, <span class="s11">[</span>, and <span class="s11">(</span>, respectively. The characters <span class="s11">{</span>, <span class="s11">[</span>, <span class="s11">(</span>, and <span class="s11">&lt; </span>need only be quoted if they appear as the first character of a file name fragment, where they would otherwise be assumed to introduce the <span class="s11">HOST </span>or <span class="s11">DIRECTORY </span>fields.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following functions are the standard way to manipulate file names in Interlisp. Their operation is purely syntactic—they perform no file system operations themselves.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(UNPACKFILENAME.STRING <i>FILENAME</i>)                               <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Parses , returning a list in property list format of alternating field names and field contents. The field contents are returned as strings. If is a stream, its full name is used.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Only those fields actually present in are returned. A field is considered present if its delimiting punctuation (in the case of <span class="s11">EXTENSION </span>and <span class="s11">VERSION</span>, the preceding period or semicolon, respectively) is present, even if the field itself is empty. Empty fields are denoted by <span class="s11">&quot;&quot; </span>(the empty string).</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Examples:</p><p class="s11" style="padding-top: 6pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(UNPACKFILENAME.STRING &quot;FOO.BAR&quot;) =&gt; (NAME &quot;FOO&quot; EXTENSION &quot;BAR&quot;)</p><p class="s11" style="padding-top: 5pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(UNPACKFILENAME.STRING &quot;FOO.;2&quot;) =&gt; (NAME &quot;FOO&quot; EXTENSION &quot;&quot; VERSION &quot;2&quot;)</p><p class="s11" style="padding-top: 5pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(UNPACKFILENAME.STRING &quot;FOO;&quot;) =&gt; (NAME &quot;FOO&quot; VERSION &quot;&quot;)</p><p class="s11" style="padding-top: 5pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(UNPACKFILENAME.STRING &quot;{ERIS}&lt;LISP&gt;CURRENT&gt;IMTRAN.DCOM;21&quot;)</p><p class="s11" style="padding-left: 206pt;text-indent: -27pt;line-height: 88%;text-align: left;">=&gt; (HOST &quot;ERIS&quot; DIRECTORY &quot;LISP&gt;CURRENT&quot; NAME &quot;IMTRAN&quot; EXTENSION &quot;DCOM&quot; VERSION &quot;21&quot;)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(UNPACKFILENAME <i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Old version of <span class="s11">UNPACKFILENAME.STRING </span>that returns the field values as atoms, rather than as strings. <span class="s11">UNPACKFILENAME.STRING </span>is now considered the &quot;correct&quot; way of unpacking file names, because it does not lose information when the contents of a field are numeric. For example,</p><p class="s11" style="padding-top: 6pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(UNPACKFILENAME ’STUFF.TXT) =&gt; (NAME STUFF EXTENSION TXT)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">but</p><p class="s11" style="padding-top: 6pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(UNPACKFILENAME ’STUFF.029) =&gt; (NAME STUFF EXTENSION 29)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Explicitly omitted fields are denoted by the atom <span class="s11">NIL</span>, rather than the empty string.</p><p style="padding-top: 7pt;padding-left: 132pt;text-indent: -30pt;line-height: 94%;text-align: justify;">Note: Both <span class="s11">UNPACKFILENAME </span>and <span class="s11">UNPACKFILENAME.STRING </span>leave the trailing colon on the device field, so that the Tenex device <span class="s11">NIL: </span>can be distinguished from the absence of a device. Although <span class="s11">UNPACKFILENAME.STRING </span>is capable of making the distinction, it retains this behavior for backward compatibility. Thus,</p><p class="s11" style="padding-top: 5pt;padding-left: 130pt;text-indent: -16pt;line-height: 108%;text-align: left;">(UNPACKFILENAME.STRING ’{TOAST}DSK:FOO) =&gt; (HOST &quot;TOAST&quot; DEVICE &quot;DSK:&quot; NAME &quot;FOO&quot;)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(FILENAMEFIELD <i>FILENAME FIELDNAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns, as an atom, the contents of the <span class="s16">FIELDNAME </span>field of <span class="s16">FILENAME</span>. If <span class="s16">FILENAME </span>is a stream, its full name is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 77%;text-align: left;"><span class="s11">(PACKFILENAME.STRING </span>FIELD<span class="s32">1 </span>CONTENTS<span class="s32">1 </span>... FIELD<span class="s32">N </span>CONTENTS<span class="s32">N</span><span class="s11">) </span><span class="p">[NoSpread</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Function]</p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: left;">Takes a sequence of alternating field names and field contents (atoms or strings), and returns the corresponding file name, as a string.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s11">PACKFILENAME.STRING </span>is given a single argument, it is interpreted as a list of alternating field names and field contents. Thus <span class="s11">PACKFILENAME.STRING </span>and <span class="s11">UNPACKFILENAME.STRING </span>operate as inverses.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If the same field name is given twice, the <i>first </i>occurrence is used.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The contents of the field name <span class="s11">DIRECTORY </span>may be either a directory name or a full directory specification as described above.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">PACKFILENAME.STRING <span class="p">also accepts the &quot;field name&quot; </span>BODY <span class="p">to mean that its contents should itself be unpacked and spliced into the argument list at that point. This feature, in conjunction with the rule that fields early in the argument list override later duplicates, is useful for altering existing file names. For example, to provide a default field, place </span>BODY <span class="p">first in the argument list, then the default fields. To override a field, place the new fields first and </span>BODY <span class="p">last.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If the value of the <span class="s11">BODY </span>field is a stream, its full name is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Examples:</p><p class="s11" style="padding-top: 6pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’DIRECTORY &quot;LISP&quot; ’NAME &quot;NET&quot;)</p><p class="s11" style="padding-left: 206pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;&lt;LISP&gt;NET&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’NAME &quot;NET&quot; ’DIRECTORY &quot;{DSK}&lt;LISPFILES&gt;&quot;)</p><p class="s11" style="padding-left: 206pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{DSK}&lt;LISPFILES&gt;NET&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’DIRECTORY &quot;{DSK}&quot; ’BODY &quot;{TOAST}&lt;FOO&gt;BAR&quot;)</p><p class="s11" style="padding-left: 206pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{DSK}BAR&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’DIRECTORY &quot;FRED&quot; ’BODY &quot;{TOAST}&lt;FOO&gt;BAR&quot;)</p><p class="s11" style="padding-left: 206pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{TOAST}&lt;FRED&gt;BAR&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’BODY &quot;{TOAST}&lt;FOO&gt;BAR&quot; ’DIRECTORY &quot;FRED&quot;)</p><p class="s11" style="padding-left: 206pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{TOAST}&lt;FOO&gt;BAR&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’VERSION NIL ’BODY &quot;{TOAST}&lt;FOO&gt;BAR.DCOM;2&quot;)</p><p class="s11" style="padding-left: 206pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{TOAST}&lt;FOO&gt;BAR.DCOM&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’BODY &quot;{TOAST}&lt;FOO&gt;BAR.DCOM&quot; ’VERSION 1)</p><p class="s11" style="padding-left: 206pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{TOAST}&lt;FOO&gt;BAR.DCOM;1&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’BODY &quot;{TOAST}&lt;FOO&gt;BAR.DCOM;&quot; ’VERSION 1)</p><p class="s11" style="padding-left: 206pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;{TOAST}&lt;FOO&gt;BAR.DCOM;&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’BODY &quot;BAR.;1&quot; ’EXTENSION &quot;DCOM&quot;)</p><p class="s11" style="padding-left: 206pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;BAR.;1&quot;</p><p class="s11" style="padding-top: 4pt;padding-left: 190pt;text-indent: -16pt;line-height: 88%;text-align: left;">(PACKFILENAME.STRING ’BODY &quot;BAR;1&quot; ’EXTENSION &quot;DCOM&quot;)</p><p class="s11" style="padding-left: 206pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt; &quot;BAR.DCOM;1&quot;</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In the last two examples, note that in one case the extension is explicitly present in the body (as indicated by the preceding period), while in the other there is no indication of an extension, so the default is used.</p><p class="s16" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s11">(PACKFILENAME </span>FIELD<span class="s32">1 </span>CONTENTS<span class="s32">1 </span>... FIELD<span class="s32">N </span>CONTENTS<span class="s32">N</span><span class="s11">)   </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The same as <span class="s11">PACKFILENAME.STRING</span>, except that it returns the file name as a symbol, instead of a string.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Incomplete File Names                                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In general, it is not necessary to pass a complete file name (one containing all the fields listed above) to functions that take a file name as argument. Interlisp supplies suitable defaults for certain fields, as described below. Functions that return names of actual files, however, always return the fully specified name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the version field is omitted from a file name, Interlisp performs version recognition, as described below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the host, device and / or directory field are omitted from a file name, Interlisp defaults them with respect to the currently connected directory. The connected directory is changed by calling the function <span class="s11">CNDIR </span>or using the programmer’s assistant command <span class="s11">CONN</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Defaults are added to the partially specified name &quot;left to right&quot; until a host, device or directory field is encountered. Thus, if the connected directory is <span class="s11">{TWENTY}PS:&lt;FRED&gt;</span>, then</p><p class="s11" style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">BAR.DCOM <span class="p">means</span></p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 10pt;text-align: center;">{TWENTY}PS:&lt;FRED&gt;BAR.DCOM</p><p class="s11" style="padding-top: 2pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">&lt;GRANOLA&gt;BAR.DCOM <span class="p">means</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">{TWENTY}PS:&lt;GRANOLA&gt;BAR.DCOM</p><p class="s11" style="padding-top: 2pt;padding-left: 29pt;text-indent: 0pt;line-height: 12pt;text-align: center;">MTA0:&lt;GRANOLA&gt;BAR.DCOM <span class="p">means</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">{TWENTY}MTA0:&lt;GRANOLA&gt;BAR.DCOM</p><p class="s11" style="padding-top: 2pt;padding-left: 45pt;text-indent: 0pt;line-height: 12pt;text-align: center;">{THIRTY}&lt;GRANOLA&gt;BAR.DCOM <span class="p">means</span></p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 10pt;text-align: center;">{THIRTY}&lt;GRANOLA&gt;BAR.DCOM</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In addition, if the partially specified name contains a subdirectory, but no principal directory, then the subdirectory is appended to the connected directory. For example,</p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">ISO&gt;BAR.DCOM <span class="p">means</span></p><p class="s11" style="padding-left: 142pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{TWENTY}PS:&lt;FRED&gt;ISO&gt;BAR.DCOM</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Or, if the connected directory is the Unix directory <span class="s11">{UNX}/usr/fred/</span>, then <span class="s11">iso/bar.dcom </span>means</p><p class="s11" style="padding-left: 29pt;text-indent: 0pt;line-height: 12pt;text-align: center;">{UNX}/usr/fred/iso/bar.dcom<span class="p">, but </span>/other/bar.dcom <span class="p">means </span>{UNX}/other/bar.dcom<span class="p">.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(CNDIR <i>HOST/DIR</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Connects to the directory <span class="s16">HOST/DIR</span>, which can either be a directory name or a full directory specification including host and / or device. If the specification includes just a host, and the host supports directories, the directory is defaulted to the value of <span class="s11">(USERNAME)</span>; if the host is omitted, connection is made to another directory on the same host as before. If <span class="s16">HOST/DIR </span>is <span class="s11">NIL</span>, connects to the value of <span class="s11">LOGINHOST/DIR</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">CNDIR </span>returns the full name of the now-connected directory. Causes an error, <span class="s11">Non- existent directory</span>, if <span class="s16">HOST/DIR </span>is not recognized as a valid directory.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note that <span class="s11">CNDIR </span>does not necessarily require or provide any directory access privileges. Access privileges are checked when a file is opened.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">CONN <i>HOST/DIR </i><span class="p">[Prog. Asst. Command]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Convenient command form of <span class="s11">CNDIR </span>for use at the executive. Connects to <span class="s16">HOST/DIR</span>, or to the value of <span class="s11">LOGINHOST/DIR </span>if <span class="s16">HOST/DIR </span>is omitted. This command is undoable— undoing it causes the system to connect to the previously connected directory.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">LOGINHOST/DIR                                                  <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CONN <span class="p">with no argument connects to the value of the variable </span>LOGINHOST/DIR<span class="p">, initially</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">{DSK}<span class="p">, but usually reset in your greeting file (Chapter 12).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(DIRECTORYNAME <i>DIRNAME STRPTR</i>)                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">DIRNAME </span>is T, returns the full specification of the currently connected directory. If <span class="s16">DIRNAME </span>is <span class="s11">NIL</span>, returns the &quot;login&quot; directory specification (the value of <span class="s11">LOGINHOST/DIR</span>). For any other value of <span class="s16">DIRNAME</span>, returns a full directory specification if <span class="s16">DIRNAME </span>designates an existing directory (satisfies <span class="s11">DIRECTORYNAMEP</span>), otherwise <span class="s11">NIL</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s16">STRPTR </span>is <span class="s11">T</span>, the value is returned as an atom, otherwise it is returned as a string.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(DIRECTORYNAMEP <i>DIRNAME HOSTNAME</i>)                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns <span class="s11">T </span>if <span class="s16">DIRNAME </span>is recognized as a valid directory on host <span class="s16">HOSTNAME</span>, or on the host of the currently connected directory if <span class="s16">HOSTNAME </span>is <span class="s11">NIL</span>. <span class="s16">DIRNAME </span>may be either a directory name or a full directory specification containing host and / or device as well.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s16">DIRNAME </span>includes subdirectories, this function may or may not pass judgment on their validity. Some hosts support &quot;true&quot; subdirectories, distinct entities manipulable by the file system, while others only provide them as a syntactic convenience.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(HOSTNAMEP <i>NAME</i>)                                               <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns <span class="s11">T </span>if <span class="s16">NAME </span>is recognized as a valid host or file device name at the moment</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">HOSTNAMEP <span class="p">is called.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Version Recognition                                                                                                                                 </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Most of the file devices in Interlisp support file version numbers. That is, it is possible to have several files of the exact same name, differing only in their <span class="s11">VERSION </span>field, which is incremented for each new &quot;version&quot; of the file that is created. When a file name lacking a version number is presented to the file system, it is necessary to determine which version number is intended. This process is known as <i>version recognition</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">When <span class="s11">OPENSTREAM </span>opens a file for input and no version number is given, the highest existing version number is used. Similarly, when a file is opened for output and no version number is given, a new file is created with a version number one higher than the highest one currently in use with that file name. The version number defaulting for <span class="s11">OPENSTREAM </span>can be changed by specifying a different value for its <span class="s16">RECOG </span>argument, as described under <span class="s11">FULLNAME</span>, below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Other functions that accept file names as arguments generally perform the default version recognition, which is newest version for existing files, or a new version if using the file name to create a new file. The one exception is <span class="s11">DELFILE</span>, which defaults to the oldest existing version of the file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The functions below can be used to perform version recognition without actually calling <span class="s11">OPENSTREAM </span>to open the file. Note that these functions only tell the truth about the moment at which they are called, and thus cannot in general be used to anticipate the name of the file opened by a comparable <span class="s11">OPENSTREAM</span>.  They are sometimes, however, helpful hints.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(FULLNAME <i>X RECOG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is an open stream, simply returns the full file name of the stream. Otherwise, if <span class="s16">X </span>is a file name given as a string or symbol, performs version recognition, as follows:</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is recognized in the recognition mode specified by <span class="s16">RECOG </span>as an abbreviation for some file, returns the file’s full name, otherwise <span class="s11">NIL</span>. <span class="s16">RECOG </span>is one of the following:</p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">OLD  <span class="p">Choose the newest existing version of the file.   Return </span>NIL</p><p style="padding-left: 180pt;text-indent: 0pt;line-height: 12pt;text-align: left;">if no file named <span class="s16">X </span>exists.</p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">OLDEST  <span class="p">Choose the oldest existing version of the file.  Return </span>NIL</p><p style="padding-left: 180pt;text-indent: 0pt;line-height: 12pt;text-align: left;">if no file named <span class="s16">X </span>exists.</p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: -28pt;line-height: 94%;text-align: justify;"><span class="s11">NEW </span>Choose a new (not yet existing) version of the file. That is, if versions of <span class="s16">X </span>already exist, then choose a version number one higher than highest existing version; else choose version 1. For some file systems, <span class="s11">FULLNAME </span>returns <span class="s11">NIL </span>if you do not have the access rights necessary for creating a new file named <span class="s16">X</span>.</p><p style="padding-top: 7pt;padding-left: 179pt;text-indent: -49pt;line-height: 94%;text-align: justify;"><span class="s11">OLD/NEW </span>Try <span class="s11">OLD</span>, then <span class="s11">NEW</span>. That is, choose the newest existing version of the file, if any; else choose version 1. This usually only makes sense if you are intending to open <span class="s16">X </span>for access <span class="s11">BOTH</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 179pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><i>RECOG </i>= NIL <span class="p">defaults to </span>OLD<span class="p">. For all other values of</span></p><p style="padding-left: 179pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s16">RECOG</span>, generates an error <span class="s11">ILLEGAL ARG</span>.</p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">X </span>already contains a version number, the <span class="s16">RECOG </span>argument will never change it. In particular, <span class="s16">RECOG </span><span class="s11">= NEW </span>does not require that the file actually be new. For example, <span class="s11">(FULLNAME ’FOO.;2 ’NEW) </span>may return</p><p class="s11" style="padding-left: 179pt;text-indent: 0pt;text-align: justify;">{ERIS}&lt;LISP&gt;FOO.;2 <span class="p">if that file already exists, even though </span>(FULLNAME ’FOO ’NEW) <span class="p">would default the version to a new number, perhaps returning</span></p><p class="s11" style="padding-left: 179pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{ERIS}&lt;LISP&gt;FOO.;5<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(INFILEP <i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Equivalent to <span class="s11">(FULLNAME </span><span class="s16">FILE </span><b>’</b><span class="s11">OLD)</span>. That is, returns the full file name of the newest version of <span class="s16">FILE </span>if <span class="s16">FILE </span>is recognized as specifying the name of an existing file that could potentially be opened for input, <span class="s11">NIL </span>otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(OUTFILEP <i>FILE</i>)                                                <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: center;"><span class="p">Equivalent to </span>(FULLNAME <i>FILE </i>’NEW)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Note that <span class="s11">INFILEP</span>, <span class="s11">OUTFILEP </span>and <span class="s11">FULLNAME </span>do not open any files; they are pure predicates. In general they are also only hints, as they do not necessarily imply that the caller has access rights to the file. For example, <span class="s11">INFILEP </span>might return non-<span class="s11">NIL</span>, but <span class="s11">OPENSTREAM </span>might fail for the same file because the file is read-protected against you, or the file happens to be open for output by another user at the time. Similarly, <span class="s11">OUTFILEP </span>could return non-<span class="s11">NIL</span>, but <span class="s11">OPENSTREAM </span>could fail with a <span class="s11">FILE SYSTEM RESOURCES EXCEEDED </span>error.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">Note also that in a shared file system, such as a remote file server, intervening file operations by another user could contradict the information returned by recognition. For example, a file that was </span>INFILEP <span class="p">might be deleted, or between an </span>OUTFILEP <span class="p">and the subsequent </span>OPENSTREAM<span class="p">, another user might create a new version or delete the highest version, causing </span>OPENSTREAM <span class="p">to open a different version of the file than the one returned by </span>OUTFILEP<span class="p">. In addition, some file servers do not well support recognition of files in output context. Thus, in general, the &quot;truth&quot; about a file can only be obtained by actually opening the file; creators of files should rely on the name of the stream opened by </span>OPENSTREAM<span class="p">, not the value returned from these recognition functions. In particular, for the reasons described earlier, programmers are discouraged from using </span>OUTFILEP <span class="p">or </span>(FULLNAME <i>NAME </i>’NEW)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Using File Names Instead of Streams                                                                                                     </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In earlier implementations of Interlisp, from the days of Interlisp-10 onward, the &quot;handle&quot; used to refer to an open file was not a stream, but rather the file’s full name, represented as a symbol. When the file name was passed to any I / O function, it was mapped to a stream by looking it up in a list of open files. This scheme was sometimes convenient for typing in file commands at the executive, but was very poor for serious programming in two major ways. First, the mapping from file name to stream on every input / output operation is inefficient. Second, and more importantly, using the file name as the handle on an open stream means that it is not possible to have more than one stream open on a given file at once.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">As of this writing, Medley is in a transition period, where it still supports the use of symbol file names as synonymous with open streams, but this use is not recommended. The remainder of this section discusses this usage of file names for the benefit of those reading older programs and wishing to convert them as necessary to work properly when this compatibility feature is removed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">File Name Efficiency Considerations</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">It is possible for a program to be seriously inefficient using a file name as a stream if the program is not using the file’s full name, the name returned by <span class="s11">OPENFILE </span>(below). Any time that an input / output function is called with a file name other than the full file name, Interlisp must perform recognition on the partial file name in order to determine which open file is intended. Thus if repeated operations are to be performed, it is considerably more efficient to use the full file name</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">returned from <span class="s11">OPENFILE </span>than to repeatedly use the possibly incomplete name that was used to open the file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">There is a more subtle problem with partial file names, in that recognition is performed on your entire directory, not just the open files. It is possible for a file name that was previously recognized to denote one file to suddenly denote a different file. For example, suppose a program performs <span class="s11">(INFILE ’FOO)</span>, opening <span class="s11">FOO.;1</span>, and reads several expressions from <span class="s11">FOO</span>. Then you interrupt the program, create a <span class="s11">FOO.;2 </span>and resume the program (or a user at another workstation creates a <span class="s11">FOO.;2</span>). Now a call to <span class="s11">READ </span>giving it <span class="s11">FOO </span>as its <span class="s16">FILE </span>argument will generate a <span class="s11">FILE NOT OPEN </span>error, because <span class="s11">FOO </span>will be recognized as <span class="s11">FOO.;2</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Obsolete File Opening Functions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The following functions are now considered obsolete, but are provided for backwards compatibility:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(OPENFILE <i>FILE ACCESS RECOG PARAMETERS</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Opens <span class="s16">FILE </span>with access rights as specified by <span class="s16">ACCESS</span>, and recognition mode <span class="s16">RECOG</span>, and returns the full name of the resulting stream. Equivalent to <span class="s11">(FULLNAME (OPENSTREAM </span><span class="s16">FILE ACCESS RECOG PARAMETERS</span><span class="s11">))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(INFILE <i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 112%;text-align: justify;">Opens <span class="s16">FILE </span>for input, and sets it as the primary input stream. Equivalent to <span class="s11">(INPUT (OPENSTREAM </span><span class="s16">FILE </span><span class="s11">’INPUT ’OLD))</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(OUTFILE <i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Opens <span class="s16">FILE </span>for output, and sets it as the primary output stream. Equivalent to <span class="s11">(OUTPUT (OPENSTREAM </span><span class="s16">FILE </span><span class="s11">’OUTPUT ’NEW))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(IOFILE <i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Equivalent to <span class="s11">(OPENFILE </span><span class="s16">FILE </span><span class="s11">’BOTH ’OLD)</span>; opens <span class="s16">FILE </span>for both input and output. Does not affect the primary input or output stream.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Converting Old Programs</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">At some point in the future, the Medley file system will change so that each call to <span class="s11">OPENSTREAM </span>returns a distinct stream, even if a stream is already open to the specified file. This change is required in order to deal rationally with files in a multiprocessing environment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">This change will of necessity produce the following incompatibilities:</p><ol id="l63"><li><p style="padding-top: 6pt;padding-left: 66pt;text-indent: -18pt;text-align: justify;">The functions <span class="s11">OPENFILE</span>, <span class="s11">INPUT</span>, and <span class="s11">OUTPUT </span>will return a <span class="s11">STREAM</span>, not a full file name. To make this less confusing in interactive situations, <span class="s11">STREAM</span>s will have a print format that reveals the underlying file’s actual name,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 113pt;text-indent: -18pt;line-height: 93%;text-align: justify;">A greater penalty will ensue for passing as the <span class="s16">FILE </span>argument to I / O operations anything other than the object returned from <span class="s11">OPENFILE</span>. Passing the file’s name will be significantly slower than passing the stream (even when passing the &quot;full&quot; file name), and in the case where there is more than one stream open on the file it might even act on the wrong one.</p></li><li><p class="s11" style="padding-top: 6pt;padding-left: 113pt;text-indent: -18pt;text-align: justify;">OPENP <span class="p">will return </span>NIL <span class="p">when passed the name of a file rather than a stream (the value of </span>OPENFILE <span class="p">or </span>OPENSTREAM<span class="p">).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Users should consider the following advice when writing new programs and editing existing programs, in order that they will continue to operate well when this change is made:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Because of the efficiency and ambiguity considerations described earlier, users have long been encouraged to use only full file names as <i>FILE </i>arguments to I / O operations. The &quot;proper&quot; way to have done this was to bind a variable to the value returned from <span class="s11">OPENFILE </span>and pass that variable to all I / O operations; such code will continue to work. A less proper way to obtain the full file name, but one which has to date not incurred any obvious penalty, is that which binds a variable to the result of an <span class="s11">INFILEP </span>and passes that to <span class="s11">OPENFILE </span>and all I / O operations. This has worked because <span class="s11">INFILEP </span>and <span class="s11">OPENFILE </span>both return a full file name, an invalid assumption in this future world.</p><p style="padding-top: 1pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Such code should be changed to pass around the value of the <span class="s11">OPENFILE</span>, not the <span class="s11">INFILEP</span><span class="s10">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Code that calls <span class="s11">OPENP </span>to test whether a possibly incomplete file name is already open should be recoded to pass to <span class="s11">OPENP </span>only the value returned from <span class="s11">OPENFILE </span>or <span class="s11">OPENSTREAM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Code that uses ordinary string functions to manipulate file names, and in particular the value returned from <span class="s11">OPENFILE</span>, should be changed to use the the functions <span class="s11">UNPACKFILENAME.STRING </span>and <span class="s11">PACKFILENAME.STRING</span>. Those functions work both on file names (strings) and streams (coercing the stream to the name of its file).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Code that tests the value of <span class="s11">OUTPUT </span>for equality to some known file name or <span class="s11">T </span>should be examined carefully and, if possible, recoded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">To see more directly the effects of passing around <span class="s11">STREAM</span>s instead of file names, replace your calls to <span class="s11">OPENFILE </span>with calls to <span class="s11">OPENSTREAM</span>. <span class="s11">OPENSTREAM </span>is called in exactly the same way, but returns a <span class="s11">STREAM</span>. Streams can be passed to <span class="s11">READ</span>, <span class="s11">PRINT</span>, <span class="s11">CLOSEF</span>, etc just as the file’s full name can be currently, but using them is more efficient. The function <span class="s11">FULLNAME</span>, when applied to a stream, returns its full file name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Using Files with Processes                                                                                                                      </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Because Medley does not yet support multiple streams per file, problems can arise if different processes attempt to access the same file. You have to be careful not to have two processes manipulating the same file at the same time, since the two processes will be sharing a single input</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">stream and file pointer. For example, it will not work to have one process <span class="s11">TCOMPL </span>a file while another process is running <span class="s11">LISTFILES </span>on it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">File Attributes                                                                                                                                            </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Any file has a number of &quot;file attributes&quot;, such as the read date, protection, and bytesize. The exact attributes that a file can have is dependent on the file device. The functions <span class="s11">GETFILEINFO </span>and <span class="s11">SETFILEINFO </span>allow you to conveniently access file attributes:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(GETFILEINFO <i>FILE ATTRIB</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">Returns the current setting of the <span class="s16">ATTRIB </span>attribute of <span class="s16">FILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(SETFILEINFO <i>FILE ATTRIB VALUE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Sets the attribute <span class="s16">ATTRIB </span>of <span class="s16">FILE </span>to be <span class="s16">VALUE</span>. <span class="s11">SETFILEINFO </span>returns <span class="s11">T </span>if it is able to change the attribute <span class="s16">ATTRIB</span>, and <span class="s11">NIL </span>if unsuccessful, either because the file device does not recognize <span class="s16">ATTRIB </span>or because the file device does not permit the attribute to be modified.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The <span class="s16">FILE </span>argument to <span class="s11">GETFILEINFO </span>and <span class="s11">SETFILEINFO </span>can be an open stream (or an argument designating an open stream, see Chapter 25), or the name of a closed file. <span class="s11">SETFILEINFO </span>in general requires write access to the file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The attributes recognized by <span class="s11">GETFILEINFO </span>and <span class="s11">SETFILEINFO </span>fall into two categories: <i>permanent </i>attributes, which are properties of the file, and <i>temporary </i>attributes, which are properties only of an open stream to the file. The temporary attributes are only recognized when <span class="s16">FILE </span>designates an open stream; the permanent attributes are usually equally accessible for open and closed files. However, some devices are willing to change the value of certain attributes of an open stream only when specified in the <span class="s16">PARAMETERS </span>argument to <span class="s11">OPENSTREAM </span>(see above), not on a later call to <span class="s11">SETFILEINFO</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;text-align: right;">The following are currently recognized as permanent attributes of a file:</p><p class="s11" style="padding-top: 6pt;padding-left: 204pt;text-indent: -55pt;text-align: left;">BYTESIZE <span class="p">The byte size of the file. Medley currently only supports byte size 8.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 204pt;text-indent: -44pt;text-align: justify;">LENGTH <span class="p">The number of bytes in the file. Alternatively, the byte position of the end-of-file. Like </span>(GETEOFPTR <i>FILE</i>)<span class="p">, but </span><i>FILE </i><span class="p">does not have to be open.</span></p><p style="padding-top: 6pt;padding-left: 170pt;text-indent: 0pt;text-align: left;"><span class="s11">SIZE </span>The size of <span class="s16">FILE </span>in pages.</p><p style="padding-top: 7pt;padding-left: 204pt;text-indent: -76pt;line-height: 94%;text-align: justify;"><span class="s11">CREATIONDATE </span>The date and time, as a string, that the content of <span class="s16">FILE </span>was &quot;created&quot;. The creation date changes whenever the content of the file is modified, but remains unchanged when a file is transported,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 252pt;text-indent: 0pt;line-height: 92%;text-align: justify;">unmodified, across file systems. Specifically, <span class="s11">COPYFILE </span>and <span class="s11">RENAMEFILE </span>(see below) preserve the file’s creation date. Note that this is different from the concept of &quot;creation date&quot; used by some operating systems (e.g., Tops20).</p><p style="padding-top: 6pt;padding-left: 252pt;text-indent: -60pt;line-height: 93%;text-align: justify;"><span class="s11">WRITEDATE </span>The date and time, as a string, that the content of <span class="s16">FILE </span>was last written to this particular file system. When a file is copied, its creation date does not change, but its write date becomes the time at which the copy is made.</p><p style="padding-top: 6pt;padding-left: 252pt;text-indent: -55pt;text-align: justify;"><span class="s11">READDATE </span>The date and time, as a string, that <span class="s16">FILE </span>was last read, or <span class="s11">NIL </span>if it has never been read.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 186pt;text-indent: -16pt;line-height: 94%;text-align: left;">ICREATIONDATE IWRITEDATE</p><p class="s11" style="padding-left: 191pt;text-indent: 0pt;line-height: 10pt;text-align: left;">IREADDATE <span class="p">The </span>CREATIONDATE<span class="p">, </span>WRITEDATE <span class="p">and </span>READDATE<span class="p">,</span></p><p style="padding-left: 252pt;text-indent: 0pt;line-height: 93%;text-align: justify;">respectively, in integer form, as <span class="s11">IDATE </span>(Chapter 12) would return. This form is useful for comparing dates.</p><p class="s11" style="padding-top: 6pt;padding-left: 207pt;text-indent: 0pt;text-align: justify;">AUTHOR <span class="p">The name of the user who last wrote the file.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 252pt;text-indent: -33pt;line-height: 94%;text-align: justify;">TYPE <span class="p">The &quot;type&quot; of the file, some indication of the nature of the file’s content. The &quot;types&quot; of files allowed depends on the file device. Most devices recognize the symbol </span>TEXT <span class="p">to mean that the file contains just characters, or </span>BINARY <span class="p">to mean that the file contains arbitrary data.</span></p><p style="padding-top: 6pt;padding-left: 252pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Some devices support a wider range of file types that distinguish among the various sorts of files one might create whose content is &quot;binary&quot;. All devices interpret any value of <span class="s11">TYPE </span>that they do not support to be <span class="s11">BINARY</span>. Thus, <span class="s11">GETFILEINFO </span>may return the more general value <span class="s11">BINARY </span>instead of the original type that was passed to <span class="s11">SETFILEINFO </span>or <span class="s11">OPENSTREAM</span>. Similarly, <span class="s11">COPYFILE</span>, while attempting to preserve the <span class="s11">TYPE </span>of the file it is copying, may turn, say, an <span class="s11">INTERPRESS </span>file into a mere <span class="s11">BINARY </span>file.</p><p style="padding-top: 7pt;padding-left: 252pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The way in which some file devices (e.g., Xerox file servers) support a wide range of file types is by representing the type as an integer, whose interpretation is known by the client. The variable <span class="s11">FILING.TYPES </span>is used to associate symbolic types with numbers for these devices. This list initially contains some of the well-known assignments of</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 204pt;text-indent: 0pt;line-height: 94%;text-align: justify;">type name to number; you can add additional elements to handle any private file types. For example, suppose there existed an NS file type <span class="s11">MAZEFILE </span>with numeric value 5678. You could add the element <span class="s11">(MAZEFILE 5678) </span>to <span class="s11">FILING.TYPES </span>and then use <span class="s11">MAZEFILE </span>as a value for the <span class="s11">TYPE </span>attribute to <span class="s11">SETFILEINFO </span>or <span class="s11">OPENSTREAM</span>. Other devices are, of course, free to store <span class="s11">TYPE </span>attributes in whatever manner they wish, be it numeric or symbolic. <span class="s11">FILING.TYPES </span>is merely considered the official registry for Xerox file types.</p><p style="padding-top: 5pt;padding-left: 204pt;text-indent: 0pt;text-align: justify;">For most file devices, the <span class="s11">TYPE </span>of a newly created file, if not specified in the <span class="s16">PARAMETERS </span>argument to <span class="s11">OPENSTREAM</span>, defaults to the value of <span class="s11">DEFAULTFILETYPE</span>, initially <span class="s11">TEXT</span>.</p><p style="padding-top: 7pt;padding-left: 204pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following are currently recognized as temporary attributes of an open stream:</p><p class="s11" style="padding-top: 6pt;padding-left: 204pt;text-indent: -44pt;text-align: justify;">ACCESS <span class="p">The current access rights of the stream (see the beginning of this chapter). Can be one of </span>INPUT<span class="p">, </span>OUTPUT<span class="p">, </span>BOTH<span class="p">, </span>APPEND<span class="p">; or </span>NIL <span class="p">if the stream is not open.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 204pt;text-indent: -82pt;line-height: 92%;text-align: justify;">ENDOFSTREAMOP <span class="p">The action to be taken when a stream is at &quot;end of file&quot; and an attempt is made to take input from it. The value of this attribute is a function of one argument, the stream. The function can examine the stream and its calling context and take any action it wishes. If the function returns normally, its should return either </span>T<span class="p">, meaning to try the input operation again, or the byte that </span>BIN <span class="p">would have returned had there been more bytes to read. Ordinarily, one should not let the </span>ENDOFSTREAMOP <span class="p">function return unless one is only performing binary input from the file, since there is no way in general of knowing in what state the reader was at the time the end of file occurred, and hence how it will interpret a single byte returned to it.</span></p><p style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The default <span class="s11">ENDOFSTREAMOP </span>is a system function that causes the error <span class="s11">END OF FILE</span>. The behavior of that error can be further modified for a particular stream by using the <span class="s11">EOF </span>option of <span class="s11">WHENCLOSE </span>(see below).</p><p class="s11" style="padding-top: 6pt;padding-left: 204pt;text-indent: -28pt;text-align: justify;">EOL <span class="p">The end-of-line convention for the stream. This can be </span>CR<span class="p">, </span>LF<span class="p">, or </span>CRLF<span class="p">, indicating with what byte or sequence of bytes the &quot;End Of Line&quot; character is</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 252pt;text-indent: 0pt;line-height: 94%;text-align: justify;">represented on the stream. On input, that sequence of bytes on the stream is read as <span class="s11">(CHARCODE EOL) </span>by <span class="s11">READCCODE </span>or the string reader. On output, <span class="s11">(TERPRI) </span>and <span class="s11">(PRINTCCODE (CHARCODE EOL))</span></p><p style="padding-left: 252pt;text-indent: 0pt;line-height: 91%;text-align: justify;">cause that sequence of bytes to be placed on the stream.</p><p style="padding-top: 6pt;padding-left: 252pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The end of line convention is usually not apparent to you. The file system is usually aware of the convention used by a particular remote operating system, and sets this attribute accordingly. If you believe a file actually is stored with a different convention than the default, it is possible to modify the default behavior by including the <span class="s11">EOL </span>attribute in the <span class="s16">PARAMETERS </span>argument to <span class="s11">OPENSTREAM</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 252pt;text-indent: -49pt;line-height: 92%;text-align: justify;">BUFFERS <span class="p">Value is the number of 512-byte buffers that the stream maintains at one time. This attribute is only used by certain random-access devices (currently, the local disk, floppy, and Leaf servers); all others ignore it.</span></p><p style="padding-top: 6pt;padding-left: 252pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Streams open to files generally maintain some portion of the file buffered in memory, so that each call to an I / O function does not require accessing the actual file on disk or a file server. For files being read or written sequentially, not much buffer space is needed, since once a byte is read or written, it will never need to be seen again. In the case of random access streams, buffering is more complicated, since a program may jump around in the file, using <span class="s11">SETFILEPTR </span>(Chapter 25). In this case, the more buffer space the stream has, the more likely it is that after a <span class="s11">SETFILEPTR </span>to a place in the file that has already been accessed, the stream still has that part of the file buffered and need not go out to the device again. This benefit must, of course, be traded off against the amount of memory consumed by the buffers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Closing and Reopening Files                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The function <span class="s11">WHENCLOSE </span>permits you to associate certain operations with open streams that govern how and when the stream will be closed. You can specify that certain functions will be executed before <span class="s11">CLOSEF </span>closes the stream and / or after <span class="s11">CLOSEF </span>closes the stream. You can make a particular stream be invisible to <span class="s11">CLOSEALL</span>, so that it will remain open across user invocations of <span class="s11">CLOSEALL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s11">(WHENCLOSE </span>FILE PROP<span class="s32">1 </span>VAL<span class="s32">1 </span>... PROP<span class="s32">N </span>VAL<span class="s32">N</span><span class="s11">) </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s16">FILE </span>must designate an open stream other than <span class="s11">T </span>(<span class="s11">NIL </span>defaults to the primary input stream, if other than <span class="s11">T</span>, or primary output stream if other than <span class="s11">T</span>). The remaining arguments specify properties to be associated with the full name of <span class="s16">FILE</span>. <span class="s11">WHENCLOSE </span>returns the full name of <span class="s16">FILE </span>as its value.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">WHENCLOSE <span class="p">recognizes the following property names:</span></p><p class="s11" style="padding-top: 7pt;padding-left: 204pt;text-indent: -44pt;line-height: 92%;text-align: justify;">BEFORE <i>VAL </i><span class="p">is a function that </span>CLOSEF <span class="p">will apply to the stream just before it is closed. This might be used, for example, to copy information about the file from an in-core data structure to the file just before it is closed.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 204pt;text-indent: -39pt;line-height: 92%;text-align: justify;">AFTER <i>VAL </i><span class="p">is a function that </span>CLOSEF <span class="p">will apply to the stream just after it is closed. This capability permits in-core data structures that know about the stream to be cleaned up when the stream is closed.</span></p><p style="padding-top: 6pt;padding-left: 204pt;text-indent: -55pt;line-height: 94%;text-align: justify;"><span class="s11">CLOSEALL </span><span class="s16">VAL </span>is either <span class="s11">YES </span>or <span class="s11">NO </span>and determines whether <span class="s16">FILE </span>will be closed by <span class="s11">CLOSEALL </span>(<span class="s11">YES</span>) or whether <span class="s11">CLOSEALL </span>will ignore it (<span class="s11">NO</span>). <span class="s11">CLOSEALL </span>uses <span class="s11">CLOSEF</span>, so that any <span class="s11">AFTER </span>functions will be executed if the stream is in fact closed. Files are initialized with <span class="s11">CLOSEALL </span>set to <span class="s11">YES</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 204pt;text-indent: -28pt;line-height: 94%;text-align: justify;">EOF <i>VAL </i><span class="p">is a function that will be applied to the stream when an end-of-file error occurs, and the </span>ERRORTYPELST <span class="p">entry for that error, if any, returns </span>NIL<span class="p">. The function can examine the context of the error, and can decide whether to close the stream, </span>RETFROM <span class="p">some function, or perform some other computation. If the function supplied returns normally (i.e., does not </span>RETFROM <span class="p">some function), the normal error machinery will be invoked.</span></p><p style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;text-align: justify;">The default <span class="s11">EOF </span>behavior, unless overridden by this <span class="s11">WHENCLOSE </span>option, is to call the value of <span class="s11">DEFAULTEOFCLOSE </span>(below).</p><p style="padding-top: 7pt;padding-left: 204pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For some applications, the <span class="s11">ENDOFSTREAMOP </span>attribute (see above) is a more useful way to intercept the end-of-file error. The <span class="s11">ENDOFSTREAMOP </span>attribute comes into effect before the error machinery is ever activated.</p><p style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Multiple <span class="s11">AFTER </span>and <span class="s11">BEFORE </span>functions may be associated with a file; they are executed in sequence with the most recently associated function executed</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 252pt;text-indent: 0pt;line-height: 93%;text-align: justify;">first. The <span class="s11">CLOSEALL </span>and <span class="s11">EOF </span>values, however, will override earlier values, so only the last value specified will have an effect.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">DEFAULTEOFCLOSE                                                <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Value is the name of a function that is called by default when an end of file error occurs and no <span class="s11">EOF </span>option has been specified for the stream by <span class="s11">WHENCLOSE</span>. The initial value of <span class="s11">DEFAULTEOFCLOSE </span>is <span class="s11">NILL</span>, meaning take no special action (go ahead and cause the error). Setting it to <span class="s11">CLOSEF </span>would cause the stream to be closed before the rest of the error machinery is invoked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Local Hard Disk Device                                                                                                                            </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Warning: This section describes the Medley functions that control the local hard disk drive available on some computers. All of these functions may not work on all computers running Medley. For more information on using the local hard disk facilities, see the users guide for your computer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">This section describes the local file system currently supported on the Xerox 1108 and 1186 computers. The Xerox 1132 supports a simpler local file system. The functions below are no-ops on the Xerox 1132, except for <span class="s11">DISKPARTITION </span>(which returns a disk partition number), and <span class="s11">DISKFREEPAGES</span>. On the Xerox 1132, different numbered partitions are referenced by using devices such as <span class="s11">{DSK1}</span>,</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">{DSK2}<span class="p">, etc. </span>{DSK} <span class="p">always refers to the disk partition that Interlisp is running on. The 1132 local file system does not support the use of directories.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The hard disk used with the Xerox 1108 or 1186 may be partitioned into a number of named &quot;logical volumes.&quot; Logical volumes may be used to hold the Interlisp virtual memory file (see Chapter 12), or Interlisp files. For information on intializing and partitioning the hard disk, see the users guide for your computer. In order to store Interlisp files on a logical volume, it is necessary to create a lisp file directory on that volume (see <span class="s11">CREATEDSKDIRECTORY</span>, below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">So long as there exists a logical volume with a Lisp directory on it, files on this volume can be accessed by using the file device called <span class="s11">{DSK}</span>. Medley can be used to read, write, and otherwise interact with files on local disk disks through standard Interlisp input / output functions. All I / O functions such as <span class="s11">LOAD</span>, <span class="s11">OPENSTREAM</span>, <span class="s11">READ</span>, <span class="s11">PRINT</span>, <span class="s11">GETFILEINFO</span>, <span class="s11">COPYFILE</span>, etc., work with files on the local disk.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If you do not have a logical volume with a Lisp directory on it, Interlisp emulates the <span class="s11">{DSK} </span>device by a core device, a file device whose backing store is entirely within the Lisp virtual memory. However, this is not recommended because the core device only provides limited scratch space, and since the core device is contained in virtual memory, it (and the files stored on it) will be erased when the virtual memory file is reloaded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Each logical volume with a Lisp directory on it serves as a directory of the device <span class="s11">{DSK}</span>. Files are referred to by forms such as</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">{DSK}&lt;<i>VOLUMENAME</i>&gt;<i>FILENAME</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Thus, the file <span class="s11">INIT.LISP </span>on the volume <span class="s11">LISPFILES </span>would be called</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">{DSK}&lt;LISPFILES&gt;INIT.LISP<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Subdirectories within a logical volume are supported, using the &gt; character in file names to delimit subdirectory names. For example, the file name <span class="s11">{DSK}&lt;LISPFILES&gt;DOC&gt;DESIGN.TEDIT </span>designates the file names <span class="s11">DESIGN.TEDIT </span>on the subdirectory <span class="s11">DOC </span>on the logical volume <span class="s11">LISPFILES</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If a logical volume name is not specified, it defaults in an unusual but simple way: the logical volume defaults to the next logical volume that has a lisp file directory on it including or after the volume containing the currently running virtual memory. For example, if the local disk has the logical volumes <span class="s11">LISP</span>, <span class="s11">TEMP</span>, and <span class="s11">LISPFILES</span>, the <span class="s11">LISP </span>volume contains the running virtual memory, and only the <span class="s11">LISP </span>volume has a Lisp file directory on it, then <span class="s11">{DSK}INIT.LISP </span>refers to the file</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">{DSK}&lt;LispFiles&gt;INIT.LISP<span class="p">. All the functions below default logical volume names in a similar way, except for those such as </span>CREATEDSKDIRECTORY<span class="p">. To determine the current default lisp file directory, evaluate </span>(DIRECTORYNAME ’{DSK})<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(CREATEDSKDIRECTORY <i>VOLUMENAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Creates a Lisp file directory on the logical volume <span class="s16">VOLUMENAME</span>, and returns the name of the directory created. It is only necessary to create a Lisp file directory the first time the logical volume is used. After that, the system automatically recognizes and opens access to the logical volumes that have Lisp file directories on them.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(PURGEDSKDIRECTORY <i>VOLUMENAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Erases all Lisp files on the volume <span class="s16">VOLUMENAME</span>, and deletes the Lisp file directory.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(LISPDIRECTORYP <i>VOLUMENAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">T </span>if the logical volume <i>VOLUMENAME </i>has a lisp file directory on it.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(VOLUMES) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns a list of the names of all of the logical volumes on the local hard disk (whether they have lisp file directories or not).</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(VOLUMESIZE <i>VOLUMENAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the total size of the logical volume <span class="s16">VOLUMENAME </span>in disk pages.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(DISKFREEPAGES <i>VOLUMENAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the total number of free disk pages left on the logical volume <span class="s16">VOLUMENAME</span>.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(DISKPARTITION) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns the name of the logical volume containing the virtual memory file that Interlisp is currently running in (see Chapter 12).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(DSKDISPLAY <i>NEWSTATE</i>)                                          <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Controls a display window that displays information about the logical volumes on the local hard disk (logical volume names, sizes, free pages, etc.). <span class="s11">DSKDISPLAY </span>opens or closes this display window depending on the value of <span class="s16">NEWSTATE </span>(one of <span class="s11">ON</span>, <span class="s11">OFF</span>, or <span class="s11">CLOSED</span>), and returns the previous state of the display window.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">NEWSTATE </span>is <span class="s11">ON</span>, the display window is opened, and it is automatically updated whenever the file system state changes (this can slow file operations significantly). If <span class="s16">NEWSTATE </span>is <span class="s11">OFF</span>, the display window is opened, but it is not automatically updated. If <span class="s16">NEWSTATE </span>is <span class="s11">CLOSED</span>, the display window is closed. The display mode is initially set to <span class="s11">CLOSED</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Once the display window is open, you can update it or change its state with the mouse. Left-buttoning the display window updates it, and middle-buttoning the window brings up a menu that allows you to change the display state.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -30pt;line-height: 92%;text-align: justify;">Note: <span class="s11">DSKDISPLAY </span>uses the value of the variable <span class="s11">DSKDISPLAY.POSITION </span>for the position of the lower-left corner of the disk display window when it is opened. This variable is changed if the disk display window is moved.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(SCAVENGEDSKDIRECTORY <i>VOLUMENAME SILENT</i>)                       <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Rebuilds the lisp file directory for the logical volume <span class="s16">VOLUMENAME</span>. This may repair damage in the unlikely event of file system failure, signified by symptoms such as infinite looping or other strange behavior while the system is doing a directory search. Calling <span class="s11">SCAVENGEDSKDIRECTORY </span>will not harm an intact volume.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Normally, <span class="s11">SCAVENGEDSKDIRECTORY </span>prints out messages as it scavenges the directory. If</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">SILENT </span>is non-<span class="s11">NIL</span>, these messages are not printed.</p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: -30pt;line-height: 93%;text-align: justify;">Note: Some low-level disk failures may cause &quot;<span class="s11">HARD DISK ERROR</span>&quot; errors to occur. To fix such a failure, it may be necessary to log out of Interlisp, scavenge the logical volume in question using Pilot tools, and then call <span class="s11">SCAVENGEDSKDIRECTORY </span>from within Interlisp. See the users guide for your computer for more information.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Floppy Disk Device                                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Warning: This section describes the Medley functions that control the floppy disk drive available on some computers. All of these functions may not work on all computers running Medley. For more information on using the floppy disk facilities, see the users guide for your computer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The floppy disk drive is accessed through the device <span class="s11">{FLOPPY}</span>. Medley can be used to read, write, and otherwise interact with files on floppy disks through standard Interlisp input / output functions. All I / O functions such as <span class="s11">LOAD</span>, <span class="s11">OPENSTREAM</span>, <span class="s11">READ</span>, <span class="s11">PRINT</span>, <span class="s11">GETFILEINFO</span>, <span class="s11">COPYFILE</span>, etc., work with files on floppies.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note that floppy disks are a removable storage medium. Therefore, it is only meaningful to perform I / O operations to the floppy disk drive, rather than to a given floppy disk. In this section, the phrase &quot;the floppy&quot; is used to mean &quot;the floppy that is currently in the floppy disk drive.&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">For example, the following sequence could be used to open a file <span class="s11">XXX.TXT </span>on the floppy, print &quot;Hello&quot; on it, and close it:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 113pt;text-indent: -18pt;line-height: 108%;text-align: left;">(SETQ XXX (OPENSTREAM ’{FLOPPY}XXX.TXT ’OUTPUT ’NEW) (PRINT &quot;Hello&quot; XXX)</p><p class="s11" style="padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(CLOSEF XXX)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(FLOPPY.MODE <i>MODE</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Medley can currently read and write files on floppies stored in a number of different formats. At any point, the floppy is considered to be in one of four &quot;modes,&quot; which determines how it reads and writes files on the floppy. <span class="s11">FLOPPY.MODE </span>sets the floppy mode to the value of <span class="s16">MODE</span>, one of <span class="s11">PILOT</span>, <span class="s11">HUGEPILOT</span>, <span class="s11">SYSOUT</span>, or <span class="s11">CPM</span>, and returns the previous floppy mode.  The floppy modes are interpreted as follows:</p><p class="s11" style="padding-top: 8pt;padding-left: 204pt;text-indent: -39pt;line-height: 92%;text-align: justify;">PILOT <span class="p">This is the normal floppy mode, using floppies in the Xerox Pilot floppy disk format. This file format allows all of the normal Medley I / O operations. This format also supports file names with arbitrary levels of subdirectories. For example, it is possible to create a file named</span></p><p class="s11" style="padding-left: 204pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{FLOPPY}&lt;Lisp&gt;Project&gt;FOO.TXT<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 204pt;text-indent: -60pt;line-height: 92%;text-align: justify;">HUGEPILOT <span class="p">This floppy mode is used to access files that are larger than a single floppy, stored on multiple floppies. There are some restrictions with using &quot;huge&quot; files. Some I / O operations are not meaningful for &quot;huge&quot; files. When a stream is created for output in this mode, the </span>LENGTH <span class="p">file attribute must be specified when the file is opened, so that it is known how many floppies will be needed. When an output file is created, the floppy (or floppies) are automatically erased and reformatted (after confirmation from you).</span></p><p class="s11" style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;line-height: 93%;text-align: justify;">HUGEPILOT <span class="p">mode is primarily useful for saving big files to and from floppies. For example, the following could be used to copy the file</span></p><p class="s11" style="padding-left: 204pt;text-indent: 0pt;text-align: left;">{ERIS}&lt;Lisp&gt;Bigfile.txt <span class="p">onto the huge Pilot file </span>{FLOPPY}BigFile.save<span class="p">:</span></p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(FLOPPY.MODE ’HUGEPILOT)</p><p class="s11" style="padding-top: 7pt;padding-left: 204pt;text-indent: 0pt;line-height: 108%;text-align: left;">(COPYFILE ’{ERIS}&lt;Lisp&gt;Bigfile.txt ’{FLOPPY}BigFile.save)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 252pt;text-indent: 0pt;text-align: justify;">and the following would restore the file:</p><p class="s11" style="padding-top: 7pt;padding-left: 252pt;text-indent: 0pt;text-align: left;">(FLOPPY.MODE ’HUGEPILOT)</p><p class="s11" style="padding-top: 7pt;padding-left: 252pt;text-indent: 0pt;line-height: 108%;text-align: left;">(COPYFILE ’{FLOPPY}BigFile.save ’{ERIS}&lt;Lisp&gt;Bigfile.txt)</p><p style="padding-top: 6pt;padding-left: 252pt;text-indent: 0pt;line-height: 91%;text-align: justify;">During each copying operation, you will be prompted to insert &quot;the next floppy&quot; if</p><p class="s11" style="padding-left: 252pt;text-indent: 0pt;text-align: left;">{ERIS}&lt;Lisp&gt;Bigfile.txt <span class="p">takes multiple floppies.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 252pt;text-indent: -44pt;line-height: 92%;text-align: justify;">SYSOUT <span class="p">Similar to </span>HUGEPILOT <span class="p">mode, </span>SYSOUT <span class="p">mode is used for storing sysout files (Chapter 12) on multiple floppy disks. You are prompted to insert new floppies as they are needed.</span></p><p style="padding-top: 6pt;padding-left: 251pt;text-indent: 0pt;text-align: justify;">This mode is set automatically when <span class="s11">SYSOUT </span>or <span class="s11">MAKESYS </span>is done to the floppy device: <span class="s11">(SYSOUT ’{FLOPPY}) </span>or <span class="s11">(MAKESYS ’{FLOPPY})</span>. Notice</p><p style="padding-left: 252pt;text-indent: 0pt;line-height: 93%;text-align: justify;">that the file name does not need to be specifed in <span class="s11">SYSOUT </span>mode; unlike <span class="s11">HUGEPILOT </span>mode, the file name <span class="s11">Lisp.sysout </span>is always used.</p><p style="padding-top: 7pt;padding-left: 252pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note: The procedure for loading sysout files from floppies depends on the particular computer being used. For information on loading sysout files from floppies, see the users guide for your computer.</p><p style="padding-top: 6pt;padding-left: 252pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Explicitly setting the mode to <span class="s11">SYSOUT </span>is useful when copying a sysout file to or from floppies. For example, the following can be used to copy the sysout file <span class="s11">{ERIS}&lt;Lisp&gt;Lisp.sysout </span>onto floppies (it is important to set the floppy mode back when done):</p><p class="s11" style="padding-top: 7pt;padding-left: 252pt;text-indent: 0pt;text-align: left;">(FLOPPY.MODE ’SYSOUT)</p><p class="s11" style="padding-left: 252pt;text-indent: 0pt;line-height: 108%;text-align: left;">(COPYFILE ’{ERIS}&lt;Lisp&gt;Lisp.sysout ’{FLOPPY})</p><p class="s11" style="padding-left: 252pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(FLOPPY.MODE ’PILOT)</p><p class="s11" style="padding-top: 7pt;padding-left: 252pt;text-indent: -28pt;line-height: 92%;text-align: justify;">CPM <span class="p">Medley supports the single-density single-sided (SDSS) CPM floppy format (a standard used by many computers). CPM-formatted floppies are totally different than Pilot floppies, so you should call </span>FLOPPY.MODE <span class="p">to switch to </span>CPM <span class="p">mode when planning to use CPM floppies. After switching to </span>CPM <span class="p">mode, </span>FLOPPY.FORMAT <span class="p">can be used to create CPM-formatted floppies, and the usual input / output operations work with CPM floppy files.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 204pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note: There are a few limitations on CPM floppy format files: (1) CPM file names are limited to eight or fewer characters, with extensions of three or fewer characters; (2) CPM floppies do not have directories or version numbers; and (3) CPM files are padded out with blanks to make the file lengths multiples of 128.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(FLOPPY.FORMAT <i>NAME AUTOCONFIRMFLG SLOWFLG</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">FLOPPY.FORMAT <span class="p">erases and initializes the track information on a floppy disk. This must be done when new floppy disks are to be used for the first time. This can also be used to erase the information on used floppy disks.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">NAME </span>should be a string that is used as the name of the floppy (106 characters max). This name can be read and set using <span class="s11">FLOPPY.NAME </span>(below).</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">AUTOCONFIRMFLG </span>is <span class="s11">NIL</span>, you will be prompted to confirm erasing the floppy, if it appears to contain valid information. If <span class="s16">AUTOCONFIRMFLG </span>is <span class="s11">T</span>, you are not prompted to confirm.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <i>SLOWFLG </i>is <span class="s11">NIL</span>, only the Pilot records needed to give your floppy an empty directory are written. If <span class="s16">SLOWFLG </span>is <span class="s11">T</span>, <span class="s11">FLOPPY.FORMAT </span>will completely erase the floppy, writing track information and critical Pilot records on it. <span class="s16">SLOWFLG </span>should be set to <span class="s11">T </span>when formatting a brand-new floppy.</p><p style="padding-top: 7pt;padding-left: 132pt;text-indent: -30pt;line-height: 91%;text-align: justify;">Note: Formatting a floppy is a very compute-intensive operation for the I / O hardware. Therefore, the cursor may stop tracking the mouse and keystrokes may be lost while formatting a floppy. This behavior goes away when the formatting is finished.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Warning: The floppy mode set by <span class="s11">FLOPPY.MODE </span>(above) affects how <span class="s11">FLOPPY.FORMAT </span>formats the floppy. If the floppy is going to be used in Pilot mode, it should be formatted under <span class="s11">(FLOPPY.MODE ’PILOT)</span>. If it is to be used as a CMP floppy, it should be formatted under <span class="s11">(FLOPPY.MODE ’CPM)</span>. The two types of formatting are incompatible.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(FLOPPY.NAME <i>NAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NAME </span>is NIL, returns the name stored on the floppy disk. If <span class="s16">NAME </span>is non-<span class="s11">NIL</span>, then the name of the floppy disk is set to <span class="s16">NAME</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(FLOPPY.FREE.PAGES) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the number of unallocated free pages on the floppy disk in the floppy disk drive.</p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -30pt;line-height: 91%;text-align: justify;">Note: Pilot floppy files are represented by contiguous pages on a floppy disk. If you are creating and deleting a lot of files on a floppy, it is advisable to keep such a floppy less than 75 percent full.</p><p class="s11" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(FLOPPY.CAN.READP) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns non-NIL if there is a floppy in the floppy drive.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 179pt;text-indent: -30pt;line-height: 93%;text-align: justify;">Note: <span class="s11">FLOPPY.CAN.READP </span>does not provide any debouncing (protection against not fully closing the floppy drive door). It may be more useful to use <span class="s11">FLOPPY.WAIT.FOR.FLOPPY </span>(below).</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(FLOPPY.CAN.WRITEP)                                            <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns non-NIL if there is a floppy in the floppy drive and the floppy drive can write on this floppy.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">It is not possible to write on a floppy disk if the &quot;write-protect notch&quot; on the floppy disk is punched out.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(FLOPPY.WAIT.FOR.FLOPPY <i>NEWFLG</i>)                                <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NEWFLG </span>is NIL, waits until a floppy is in the floppy drive before returning.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NEWFLG </span>is T, waits until the existing floppy in the floppy drive, if any, is removed, then waits for a floppy to be inserted into the drive before returning.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(FLOPPY.SCAVENGE)                                              <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Attempts to repair a floppy whose critical records have become confused (causing errors when file operations are attempted). May also retrieve accidently-deleted files, provided they haven’t been overwritten by new files.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(FLOPPY.TO.FILE <i>TOFILE</i>)                                        <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Copies the entire contents of the floppy to the &quot;floppy image&quot; file <span class="s16">TOFILE</span>, which can be on a file server, local disk, etc. This can be used to create a centralized copy of a floppy, that different users can copy to their own floppy disks (using <span class="s11">FLOPPY.FROM.FILE</span>).</p><p style="padding-top: 7pt;padding-left: 180pt;text-indent: -30pt;line-height: 91%;text-align: justify;">Note: A floppy image file for an 8-inch floppy is about 2500 pages long, regardless of the number of pages in use on the floppy.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(FLOPPY.FROM.FILE <i>FROMFILE</i>)                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Copies the &quot;floppy image&quot; file <span class="s16">FROMFILE </span>to the floppy. <span class="s16">FROMFILE </span>must be a file produced by <span class="s11">FLOPPY.TO.FILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(FLOPPY.ARCHIVE <i>FILES NAME</i>)                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">FLOPPY.ARCHIVE </span>formats a floppy inserted into the floppy drive, giving the floppy the name <span class="s16">NAME</span><span class="s11">#1</span>. <span class="s11">FLOPPY.ARCHIVE </span>then copies each file in <span class="s16">FILES </span>to the freshly formatted floppy. If the first floppy fills up, <span class="s11">FLOPPY.ARCHIVE </span>uses multiple floppies (named <span class="s16">NAME</span><span class="s11">#2</span>, <span class="s16">NAME</span><span class="s11">#3</span>, etc.), each time prompting you to insert a new floppy.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The function <span class="s11">DIRECTORY </span>(see below) is convenient for generating a list of files to archive. For example,</p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(FLOPPY.ARCHIVE</p><p class="s11" style="padding-left: 190pt;text-indent: 0pt;line-height: 88%;text-align: left;">(DIRECTORY ’{ERIS}&lt;Lisp&gt;Project&gt;*) ’Project)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">will archive all files on the directory <span class="s11">{ERIS}&lt;Lisp&gt;Project&gt; </span>to floppies (named</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Project#1<span class="p">, </span>Project#2<span class="p">, etc.).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(FLOPPY.UNARCHIVE <i>HOST/DIRECTORY</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">FLOPPY.UNARCHIVE <span class="p">copies all files on the current floppy to the directory</span></p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">HOST/DIRECTORY<span class="p">. For example, </span><span class="s11">(FLOPPY.UNARCHIVE ’{ERIS}&lt;Lisp&gt;Project&gt;)</span></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">will copy each file on the current floppy to the directory <span class="s11">{ERIS}&lt;Lisp&gt;Project&gt;</span>. If there is more than one floppy to restore from archive, <span class="s11">FLOPPY.UNARCHIVE </span>should be called on each floppy disk.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">I/O Operations to and from Strings                                                                                                         </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">It is possible to treat a string as if it were the contents of a file by using the following function:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(OPENSTRINGSTREAM <i>STR ACCESS</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Returns a stream that can be used to access the characters of the string <span class="s16">STR</span>. <span class="s16">ACCESS </span>may be either <span class="s11">INPUT</span>, <span class="s11">OUTPUT</span>, or <span class="s11">BOTH</span>; <span class="s11">NIL </span>defaults to <span class="s11">INPUT</span>. The stream returned may be used exactly like a file opened with the same access, except that output operations may not extend past the end of the original string. Also, string streams do not appear in the value of <span class="s11">(OPENP)</span>.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">For example, after performing</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">(SETQ STRM (OPENSTRINGSTREAM &quot;THIS 2 (IS A LIST)&quot;))</p><p class="s10" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">the following succession of reads could occur:</p><p class="s11" style="padding-top: 8pt;padding-left: 142pt;text-indent: -16pt;line-height: 88%;text-align: left;">(READ STRM) =&gt; THIS (RATOM STRM) =&gt; 2</p><p class="s11" style="padding-left: 142pt;text-indent: 0pt;line-height: 88%;text-align: left;">(READ STRM) =&gt; (IS A LIST) (EOFP STRM) =&gt; T</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Compatibility Note: In Interlisp-10 it was possible to take input from a string simply by passing the string as the <span class="s16">FILE </span>argument to an input function. In order to maintain compatibility with this feature, Medley provides the same capability. This not terribly clean feature persists in the present implementation to give users time to convert old code. This means that strings are <i>not </i>equivalent to symbols when specifying a file name as a stream argument. In a future release, the old Interlisp-10 string-reading feature will be decommissioned, and <span class="s11">OPENSTRINGSTREAM </span>will be the only way to perform I / O on a string.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Temporary Files and the CORE Device                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">Many operating systems have a notion of &quot;scratch file&quot;, a file typically used as temporary storage for data most naturally maintained in the form of a file, rather than some other data structure. A scratch</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">file can be used as a normal file in most respects, but is automatically deleted from the file system after its useful life is up, e.g., when the job terminates, or you log out. In normal operation, you need never explicitly delete such files, since they are guaranteed to disappear soon.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A similar functionality is provided in Medley by core-resident files. Core-resident files are on the device <span class="s11">CORE</span>. The directory structure for this device and all files on it are represented completely within your virtual memory. These files are treated as ordinary files by all file operations; their only distinguishing feature is that all trace of them disappears when the virtual memory is abandoned.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Core files are opened and closed by name the same as any other file, e.g., <span class="s11">(OPENSTREAM ’{CORE}&lt;FOO&gt;FIE.DCOM ’OUTPUT)</span>. Directory names are completely optional, so files can also have names of the form <span class="s11">{CORE}NAME.EXT</span>. Core files can be enumerated by <span class="s11">DIRECTORY </span>(see below). While open, they are registered in <span class="s11">(OPENP)</span>. They do consume virtual memory space, which is only reclaimed when the file is deleted. Some caution should thus be used when creating large <span class="s11">CORE </span>files. Since the virtual memory of an Medley workstation usually persists far longer than the typical process on a mainframe computer, it is still important to delete <span class="s11">CORE </span>files after they are no longer in use.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">For many applications, the name of the scratch file is irrelevant, and there is no need for anyone to have access to the file independent of the program that created it. For such applications, <span class="s11">NODIRCORE </span>files are preferable. Files created on the device lisp <span class="s11">NODIRCORE </span>are core-resident files that have no name and are registered in no directory. These files &quot;disappear&quot;, and the resources they consume are reclaimed, when all pointers to the file are dropped. Hence, such files need never be explicitly deleted or, for that matter, closed. The &quot;name&quot; of such a file is simply the stream object returned from <span class="s11">(OPENSTREAM ’{NODIRCORE} ’OUTPUT)</span>, and it is this stream object that must be passed to all</p><p style="padding-top: 1pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">input / output operations, including <span class="s11">CLOSEF </span>and any <span class="s10">calls to </span><span class="s11">OPENSTREAM </span>to reopen the file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(COREDEVICE <i>NAME NODIRFLG</i>)                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Creates a new device for core-resident files and assigns <span class="s16">NAME </span>as its device name. Thus, after performing <span class="s11">(COREDEVICE ’FOO)</span>, one can execute <span class="s11">(OPENSTREAM ’{FOO}BAR ’OUTPUT) </span>to open a file on that device. Medley is initialized with the single core-resident device named <span class="s11">CORE</span>, but <span class="s11">COREDEVICE </span>may be used to create any number of logically distinct core devices.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NODIRFLG </span>is non-<span class="s11">NIL</span>, a core device that acts like <span class="s11">{NODIRCORE} </span>is created.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Compatibility note: In Interlisp-10, it was possible to create scratch files by using file names with suffixes <span class="s11">;S </span>or <span class="s11">;T</span>. In Medley, these suffixes in file names are simply ignored when output is directed to a particular host or device. However, the function <span class="s11">PACKFILENAME.STRING </span>is defined to default the device name to <span class="s11">CORE </span>if the file has the <span class="s11">TEMPORARY </span>attribute and no explicit host is provided.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">NULL Device                                                                                                                                              </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;"><span class="p">The </span>NULL <span class="p">device provides a source of content-free &quot;files&quot;. </span>(OPENSTREAM ’{NULL} ’OUTPUT) <span class="p">creates a stream that discards all output directed at it. </span>(OPENSTREAM ’{NULL} <span class="s17">’</span>INPUT<span class="s17">) </span><span class="p">creates a stream that is perpetually at end-of-file (i.e., has no input).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Deleting, Copying, and Renaming Files                                                                                                  </h4><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(DELFILE <i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Deletes <span class="s16">FILE </span>if possible. The file must be closed. Returns the full name of the file if deleted, else <span class="s11">NIL</span>. Recognition mode for <span class="s16">FILE </span>is <span class="s11">OLDEST</span>, i.e., if <span class="s16">FILE </span>does not have a version number specified, then <span class="s11">DELFILE </span>deletes the oldest version of the file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(COPYFILE <i>FROMFILE TOFILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Copies <span class="s16">FROMFILE </span>to a new file named <span class="s16">TOFILE</span>. The source and destination may be on any combination of hosts / devices. <span class="s11">COPYFILE </span>attempts to preserve the <span class="s11">TYPE </span>and <span class="s11">CREATIONDATE </span>where possible. If the original file’s file type is unknown, <span class="s11">COPYFILE </span>attempts to infer the type (file type is <span class="s11">BINARY </span>if any of its 8-bit bytes have their high bit on).</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">COPYFILE <span class="p">uses </span>COPYCHARS <span class="p">(Chapter 25) if the source and destination hosts have different </span>EOL <span class="p">conventions. Thus, it is possible for the source and destination files to be of different lengths.</span></p><p style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s11">RENAMEFILE </span><span class="s16">OLDFILE NEWFILE</span>) [Function]</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Renames <span class="s16">OLDFILE </span>to be <span class="s16">NEWFILE</span>. Causes an error, <span class="s11">FILE NOT FOUND </span>if <span class="s16">FILE </span>does not exist. Returns the full name of the new file, if successful, else NIL if the rename cannot be performed.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">OLDFILE </span>and <span class="s16">NEWFILE </span>are on the same host / device, and the device implements a renaming primitive, <span class="s11">RENAMEFILE </span>can be very fast. However, if the device does not know how to rename files in place, or if <span class="s16">OLDFILE </span>and <span class="s16">NEWFILE </span>are on different devices, <span class="s11">RENAMEFILE </span>works by copying <span class="s16">OLDFILE </span>to <span class="s16">NEWFILE </span>and then deleting <span class="s16">OLDFILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Searching File Directories                                                                                                                        </h4><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DIRECTORIES <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Global variable containing the list of directories searched (in order) by <span class="s11">SPELLFILE </span>and <span class="s11">FINDFILE </span>(below) when not given an explicit <span class="s16">DIRLST </span>argument. In this list, the atom <span class="s11">NIL </span>stands for the login directory (the value of <span class="s11">LOGINHOST/DIR</span>), and the atom <span class="s11">T </span>stands for the currently connected directory. Other elements should be <i>full </i>directory specifications, e.g., <span class="s11">{TWENTY}PS:&lt;LISPUSERS&gt;</span>, not merely <span class="s11">LISPUSERS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">LISPUSERSDIRECTORIES                                           <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Global variable containing a list of directories to search for &quot;library&quot; package files. Used by the <span class="s11">FILES </span>file package command (Chapter 17).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(SPELLFILE <i>FILE NOPRINTFLG NSFLG DIRLST</i>)                       <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Searches for the file name <i>FILE</i>, possibly performing spelling correction (see Chapter 20). Returns the corrected file name, if any, otherwise <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FILE </span>has a directory field, <span class="s11">SPELLFILE </span>attempts spelling correction against the files in that particular directory. Otherwise, <span class="s11">SPELLFILE </span>searches for the file on the directory list <span class="s16">DIRLST </span>before attempting any spelling correction.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NOPRINTFLG </span>is <span class="s11">NIL</span>, <span class="s11">SPELLFILE </span>asks you to confirm any spelling correction done, and prints out any files found, even if spelling correction is not done. If <span class="s16">NOPRINTFLG </span><span class="s11">= T</span>, <span class="s11">SPELLFILE </span>does not do any printing, nor ask for approval.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NSFLG </span><span class="s11">= T </span>(or <span class="s11">NOSPELLFLG = T</span>, see Chapter 20), no spelling correction is attempted, though searching through <span class="s16">DIRLST </span>still occurs.</p><p class="s16" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">DIRLST <span class="p">is the list of directories searched if </span>FILE <span class="p">does not have a directory field. If</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">DIRLST </span>is <span class="s11">NIL</span>, the value of the variable <span class="s11">DIRECTORIES </span>is used.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -30pt;text-align: justify;">Note: If <span class="s16">DIRLST </span>is <span class="s11">NIL</span>, and <span class="s16">FILE </span>is not found by searching the directories on <span class="s11">DIRECTORIES</span>, but the root name of <span class="s16">FILE </span>has a <span class="s11">FILEDATES </span>property (Chapter 17) indicating that a file by that name has been loaded, then the directory indicated in the <span class="s11">FILEDATES </span>property is searched, too. This additional search is not done if <span class="s16">DIRLST </span>is non- <span class="s11">NIL</span>.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">ERRORTYPELST <span class="p">(Chapter 14) initially contains the entry </span>((23 (SPELLFILE (CADR ERRORMESS) NIL NOFILESPELLFLG)))<span class="p">, which causes </span>SPELLFILE <span class="p">to be called in case of a </span>FILE NOT FOUND <span class="p">error. If the variable </span>NOFILESPELLFLG <span class="p">is </span>T <span class="p">(its initial value), then spelling correction is not done on the file name, but </span>DIRECTORIES <span class="p">is still searched. If </span>SPELLFILE <span class="p">is successful, the operation will be reexecuted with the new (corrected) file name.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(FINDFILE <i>FILE NSFLG DIRLST</i>)                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Uses <span class="s11">SPELLFILE </span>to search for a file named <span class="s16">FILE</span>. If it finds one, returns its full name, with no user interaction. Specifically, it calls <span class="s11">(SPELLFILE </span><span class="s16">FILE </span><span class="s11">T </span><span class="s16">NSFLG DIRLST</span><span class="s11">)</span>, after first performing two simple checks: If <span class="s16">FILE </span>has an explicit directory, it checks to see if a file so named exists, and if so returns that file. If <span class="s16">DIRLST </span>is <span class="s11">NIL</span>, it looks for <span class="s16">FILE </span>on the connected directory before calling <span class="s11">SPELLFILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Listing File Directories                                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">The function <span class="s11">DIRECTORY </span>allows you to conveniently specify and / or program a variety of directory operations:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(DIRECTORY <i>FILES COMMANDS DEFAULTEXT DEFAULTVERS</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Returns, lists, or performs arbitrary operations on all files specified by the &quot;file group&quot; <span class="s16">FILES</span>. A file group has the form of a regular file name, except that the character <span class="s11">* </span>can be used to match any number of characters, including zero, in the file name. For example, the file group <span class="s11">A*B </span>matches all file names beginning with the character <span class="s11">A </span>and ending with the character <span class="s11">B</span>.  The file group <span class="s11">*.DCOM </span>matches all files with an extension of <span class="s11">DCOM</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">FILES </span>does not contain an explicit extension, it is defaulted to <span class="s16">DEFAULTEXT</span>; if <span class="s16">FILES </span>does not contain an explicit version, it is defaulted to <span class="s16">DEFAULTVERS</span>. <span class="s16">DEFAULTEXT </span>and <span class="s16">DEFAULTVERS </span>themselves default to <span class="s11">*</span>. If the period or semicolon preceding the omitted extension or version, respectively, is present, the field is explicitly empty and no default is used. All other unspecified fields default to <span class="s11">*</span>. Null version is interpreted as &quot;highest&quot;. Thus <span class="s16">FILES </span><span class="s11">= * </span>or <span class="s11">*.* </span>or <span class="s11">*.*;* </span>enumerates all files on the connected directory; <span class="s16">FILES</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">= *<span class="s17">. </span><span class="p">or </span>*.;* <span class="p">enumerates all versions of files with null extension; </span><i>FILES </i>= *.; <span class="p">enumerates the highest version of files with null extension; and </span><i>FILES </i>= *.*; <span class="p">enumerates the highest version of all files. If </span><i>FILES </i><span class="p">is </span>NIL<span class="p">, it defaults to </span>*.*<span class="s17">;</span>*<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 132pt;text-indent: -30pt;line-height: 91%;text-align: left;">Note: Some hosts / devices are not capable of supporting &quot;highest version&quot; in enumeration. Such hosts instead enumerate <i>all </i>versions.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For each file that matches the file group <span class="s16">FILES</span>, the &quot;file commands&quot; in <span class="s16">COMMANDS </span>are executed in order. Some of the file commands allow aborting the command processing for a given file, effectively filtering the list of files. The interpretation of the different file commands is described below. If <span class="s16">COMMANDS </span>is <span class="s11">NIL</span>, it defaults to <span class="s11">(COLLECT)</span>, which collects the matching file names in a list and returns it as the value of <span class="s11">DIRECTORY</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">The &quot;file commands&quot; in <span class="s16">COMMANDS </span>are interpreted as follows:</p><p class="s11" style="padding-top: 8pt;padding-left: 198pt;text-indent: -17pt;line-height: 92%;text-align: justify;">P <span class="p">Prints the file’s name. For readability, </span>DIRECTORY <span class="p">strips the directory from the name, printing it once as a header in front of each set of consecutive files on the same directory.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 156pt;text-indent: 19pt;line-height: 153%;text-align: justify;">PP <span class="p">Prints the file’s name without a version number. a string Prints the string.</span></p><p class="s11" style="padding-left: 88pt;text-indent: -5pt;text-align: right;">READDATE, WRITEDATE CREATIONDATE, SIZE LENGTH, BYTESIZE</p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;line-height: 10pt;text-align: right;">PROTECTION, AUTHOR</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">TYPE  <span class="p">Prints    the    appropriate    information    returned  by</span></p><p class="s11" style="padding-left: 16pt;text-indent: 0pt;line-height: 12pt;text-align: center;">GETFILEINFO <span class="p">(see above).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 245pt;text-indent: -49pt;text-align: justify;">COLLECT <span class="p">Adds the full name of this file to an accumulating list, which will be returned as the value of </span>DIRECTORY<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 245pt;text-indent: -60pt;text-align: left;">COUNTSIZE <span class="p">Adds the size of this file to an accumulating sum, which will be returned as the value of </span>DIRECTORY<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 21pt;text-indent: 0pt;text-align: center;">DELETE  <span class="p">Deletes the file.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 245pt;text-indent: -44pt;text-align: justify;">DELVER <span class="p">If this file is not the highest version of files by its name, delete it.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 245pt;text-indent: -39pt;line-height: 93%;text-align: justify;">PAUSE <span class="p">Waits until you type any character before proceeding with the rest of the commands (good for display if you want to ponder).</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following commands are predicates to filter the list. If the predicate is not satisfied, then processing for this file is aborted and no further commands (such as those above) are executed for this file.</p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -30pt;line-height: 93%;text-align: justify;">Note: if the <span class="s11">P </span>and <span class="s11">PP </span>commands appear in <span class="s16">COMMANDS </span>ahead of any of the filtering commands below except <span class="s11">PROMPT</span>, they are postponed until after the filters. Thus, assuming the caller has placed the attribute options after the filters as well, no printing occurs for a file that is filtered out. This is principally so that functions like <span class="s11">DIR </span>(below) can both request printing and pass arbitrary commands through to <span class="s11">DIRECTORY</span>, and have the printing happen in the appropriate place.</p><p style="padding-top: 7pt;padding-left: 246pt;text-indent: -68pt;text-align: justify;"><span class="s11">PROMPT </span><span class="s16">MESS </span>Prompts with the yes / no question <span class="s16">MESS</span>; if user responds with <span class="s11">N</span>o, abort command processing for this file.</p><p class="s16" style="padding-top: 6pt;padding-left: 246pt;text-indent: -68pt;line-height: 94%;text-align: justify;"><span class="s11">OLDERTHAN </span>N <span class="p">Continue command processing if the file hasn’t been referenced (read or written) in </span>N <span class="p">days. </span>N <span class="p">can also be a string naming an explicit date and time since which the file must not have been referenced.</span></p><p style="padding-top: 6pt;padding-left: 246pt;text-indent: -68pt;line-height: 94%;text-align: justify;"><span class="s11">NEWERTHAN </span><span class="s16">N </span>Continue command processing if the file has been written within the last <span class="s16">N </span>days. <span class="s16">N </span>can also be a string naming an explicit date and time. Note that this is not quite the complement of <span class="s11">OLDERTHAN</span>, since it ignores the read date.</p><p style="padding-top: 6pt;padding-left: 246pt;text-indent: -46pt;text-align: justify;"><span class="s11">BY </span><span class="s16">USER </span>Continue command processing if the file was last written by the given user, i.e., its <span class="s11">AUTHOR </span>attribute matches (case insensitively) <span class="s16">USER</span>.</p><p style="padding-top: 7pt;padding-left: 246pt;text-indent: -25pt;line-height: 94%;text-align: justify;"><span class="s11">@ </span><span class="s16">X X </span>is either a function of one argument (<span class="s16">FILENAME</span>), or an arbitrary expression which uses the variable <span class="s11">FILENAME </span>freely. If <span class="s16">X </span>returns <span class="s11">NIL</span>, abort command processing for this file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">The following two commands apply not to any particular file, but globally to the manner in which directory information is printed.</p><p class="s16" style="padding-top: 6pt;padding-left: 145pt;text-indent: 0pt;text-align: left;"><span class="s11">OUT </span>FILE <span class="p">Directs output to </span>FILE<span class="p">.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 197pt;text-indent: -57pt;text-align: left;"><span class="s11">COLUMNS </span>N <span class="p">Attempts to format output in </span>N <span class="p">columns (rather than just 1).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">DIRECTORY <span class="p">uses the variable </span>DIRCOMMANDS <span class="p">as a spelling list to correct spelling and define abbreviations and synonyms (see Chapter 20). Currently the following abbreviations are recognized:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:140.3pt" cellspacing="0"><tr style="height:13pt"><td style="width:52pt"><p class="s26" style="padding-right: 5pt;text-indent: 0pt;text-align: right;">AU</p></td><td style="width:27pt"><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">AUTHOR</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">-</p></td><td style="width:27pt"><p class="s26" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">PAUSE</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">COLLECT?</p></td><td style="width:27pt"><p class="s26" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">PROMPT &quot; ? &quot; COLLECT</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">DA</p></td><td style="width:27pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:149pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">DATE</p></td><td style="width:27pt"><p class="s26" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">CREATIONDATE</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">TI</p></td><td style="width:27pt"><p class="s26" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">WRITEDATE</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">DEL</p></td><td style="width:27pt"><p class="s26" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">DELETE</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">DEL?</p></td><td style="width:27pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:149pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">DELETE?</p></td><td style="width:27pt"><p class="s26" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">PROMPT &quot; delete? &quot; DELETE</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">OLD</p></td><td style="width:27pt"><p class="s26" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">OLDERTHAN 90</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">PR</p></td><td style="width:27pt"><p class="s26" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">PROTECTION</p></td></tr><tr style="height:14pt"><td style="width:52pt"><p class="s26" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">SI</p></td><td style="width:27pt"><p class="s26" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">SIZE</p></td></tr><tr style="height:13pt"><td style="width:52pt"><p class="s26" style="padding-top: 2pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: right;">VERBOSE</p></td><td style="width:27pt"><p class="s26" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 9pt;text-align: left;">=&gt;</p></td><td style="width:149pt"><p class="s26" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">AUTHOR CREATIONDATE SIZE</p></td></tr></table><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: center;">READDATE WRITEDATE</p><p class="s11" style="padding-top: 8pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">(FILDIR <i>FILEGROUP</i>)                                             <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="p">Obsolete synonym of </span>(DIRECTORY <i>FILEGROUP</i>)<span class="p">.</span></p><p class="s11" style="padding-top: 9pt;padding-left: 77pt;text-indent: -24pt;line-height: 17pt;text-align: left;">(DIR <i>FILEGROUP COM</i><i>1 </i><i>... COM</i><i>N</i>) <span class="p">[NLambda NoSpread Function] Convenient form of </span>DIRECTORY <span class="p">for use in type-in at the executive. Performs</span></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: left;">(DIRECTORY ’<i>FILEGROUP </i>’(P <i>COM</i><i>1 </i>... <i>COM</i><i>N</i>))<span class="p">.</span></p><p class="s16" style="padding-top: 10pt;padding-left: 77pt;text-indent: -24pt;text-align: left;"><span class="s11">(NDIR </span>FILEGROUP COM<span class="s32">1 </span>... COM<span class="s32">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Version of <span class="s11">DIR </span>that lists the file names in a multi-column format. Also, by default only lists the most recent version of files (unless <span class="s16">FILEGROUP </span>contains an explicit version).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">File Servers                                                                                                                                                </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">A file server is a shared resource on a local communications network which provides large amounts of file storage. Different file servers honor a variety of access protocols. Medley supports the following</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">protocols: PUP-FTP, PUP-Leaf, and NS Filing. In addition, there are library packages available that support other communications protocols, such as TCP / IP and RS232.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">With the exception of the RS232-based protocols, which exist only for file transfer, these network protocols are integrated into the Medley file system to allow files on a file server to be treated in much the same way files are accessed on local devices, such as the disk. Thus, it is possible to call <span class="s11">OPENSTREAM </span>on the file <span class="s11">{ERIS}&lt;LISP&gt;FOO.DCOM;3 </span>and read from it or write to it just as if the file had been on the local disk <span class="s11">({DSK}&lt;LISP&gt;FOO.DCOM;3)</span>, rather than on a remote server named ERIS. However, the protocols vary in how much control they give the workstation over file system operations. Hence, some restrictions apply, as described in the following sections.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">PUP File Server Protocols</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are two file server protocols in the family of PUP protocols: Leaf and FTP. Some servers support both, while others support only one of them. Medley uses whichever protocol is more appropriate for the requested operation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Leaf is a random access protocol, so files opened using these protocols are <span class="s11">RANDACCESSP</span>, and thus most normal I / O operations can be performed. However, Leaf does not support directory enumeration. Hence, <span class="s11">DIRECTORY </span>cannot be used on a Leaf file server unless the server also supports FTP. In addition, Leaf does not supply easy access to a file’s attributes. <span class="s11">INFILEP </span>and <span class="s11">GETFILEINFO </span>have to open the file for input in order to obtain their information, and hence the file’s read date will change, even though the semantics of these functions do not imply it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">FTP is a file transfer protocol that only permits sequential access to files. However, most implementations of it are considerably more efficient than Leaf. Medley uses FTP in preference to Leaf whenever the call to <span class="s11">OPENSTREAM </span>requests sequential access only. In particular, the functions <span class="s11">SYSOUT </span>and <span class="s11">COPYFILE </span>open their files for sequential access. If a file server supports FTP but for some reason it is undesirable for Lisp to use it, one can set the internal variable \<span class="s11">FTPAVAILABLE </span>to <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="p">The system normally maintains a Leaf connection to a host in the background. This connection can be broken by calling </span>(BREAKCONNECTION <i>HOST</i>)<span class="p">. Any subsequent reference to files on that host will re- establish the connection. The principal use for this function arises when you interrupt a file operation in such a way that the file server thinks the file is open but Lisp thinks it is closed (or not yet open). As a result, the next time Lisp tries to open the file, it gets a file busy error.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Xerox NS File Server Protocols</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Interlisp supports file access to Xerox 803x file servers, using the Filing Protocol built on Xerox Network Systems protocols. Medley determines that a host is an NS File Server by the presense of a colon in its name, e.g., <span class="s11">{PHYLEX:}</span>. The general format of NS fileserver device names is</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">{<i>SERVERNAME:DOMAIN:ORGANIZATION</i>}<span class="p">; the device specification for an 8000-series product in general includes the ClearingHouse domain and organization. If domain and organization are not supplied directly, then they are obtained from the defaults, which themselves are found by consulting</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">the nearest ClearingHouse if you have not defined them in an init file. However, note that the server name must still have a colon in it to distinguish it from other types of host names (e.g., PUP server names).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">NS file servers in general permit arbitrary characters in file names. You should be cognizant of file name quoting conventions, and the fact that any file name presented as a symbol needs to have characters of significance to the reader, such as space, escaped with a %. Of course, one can always present the file name as a string, in which case only the quoting conventions are important.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">NS file servers support a true hierarchical file system, where subdirectories are just another kind of file, which needs to be explicitly created. In Interlisp, subdirectories are created automatically as needed: A call to <span class="s11">OPENFILE </span>to create a file in a non-existent subdirectory automatically creates the subdirectory. <span class="s11">CONN </span>to a non-existent subdirectory asks you whether to create the directory. For those using Star software, a directory corresponds to a &quot;File Drawer,&quot; while a subdirectory corresponds to a &quot;File Folder.&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Because of their hierarchical structure, NS directories can be enumeerated to arbitrary levels. The default is to enumerate all the files (the leaves of the tree), omitting the subdirectory nodes themselves. This default can be changed by the following variable:</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">FILING.ENUMERATION.DEPTH <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This variable is either a number, specifying the number of levels deep to enumeerate, or <span class="s11">T</span>, meaning enumerate to all levels. In the former case, when the enumeration reaches the specified depth, only the subdirectory name rooted at that level is listed, and none of its descendants is listed. When <span class="s11">FILING.ENUMERATION.DEPTH </span>is <span class="s11">T</span>, all files are listed, and no subdirectory names are listed. <span class="s11">FILING.ENUMERATION.DEPTH </span>is initially <span class="s11">T</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Independent of <span class="s11">FILING.ENUMERATION.DEPTH</span>, a request to enumerate the top-level of a file server’s hierarchy lists only the top level, i.e., assumes a depth of 1. For example, <span class="s11">(DIRECTORY ’{PHYLEX:}) </span>lists exactly the top-level directories of the server <span class="s11">PHYLEX:</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">NS file servers do  not  currently  support  random  access.  Therefore, <span class="s11">SETFILEPTR </span>of an NS file generally causes an error. However, <span class="s11">GETFILEPTR </span>returns the correct character position for open files on NS file servers. In addition, <span class="s11">SETFILEPTR </span>works in the special case where the file is open for input, and the file pointer is being set forward. In this case, the intervening charactgers are automatically read.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Even while Interlisp has no file open on an NS Server, the system maintains a &quot;session&quot; with the server for a while in order to improve the speed of subsequent requests to the server. While this session is open, it is possible for some nodes of the server’s file system to appear &quot;busy&quot; or inaccessible to certain clients on other workstations (such as Star). If this happens, the following function can be used to terminate any open sessions immediately.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(BREAK.NSFILING.CONNECTION <i>HOST</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Closes any open connections to NS file server <span class="s16">HOST</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Operating System Designations</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Some of the network server protocols are implemented on more than one kind of foreign host. Such hosts vary in their conventions for logging in, naming files, representing end-of-line, etc. In order for Interlisp to communicate gracefully with all these hosts, it is necessary that the variable <span class="s11">NETWORKOSTYPES </span>be  set  correctly.The  following  functions  are  now  considered  obsolete,  but  are provided for backwards compatibility:</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">NETWORKOSTYPES                                                 <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">An association-list that associates a host name with its operating system type. Elements in this list are of the form </span>(<i>HOSTNAME </i><span class="s9">. </span><i>TYPE</i>)<span class="p">. For example, </span>(MAXC2 . TENEX)<span class="p">. The operating system types currently known to Lisp are TENEX, TOPS20, UNIX, and VMS. The host names in this list should be the &quot;canonical&quot; host name, represented as an uppercase atom. For PUP and NS hosts, the function </span>CANONICAL.HOSTNAME <span class="p">(below) can be used to determine which of several aliases of a server is the canonical name.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(CANONICAL.HOSTNAME <i>HOSTNAME</i><span class="s10">)                                                                   </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the &quot;canonical&quot; name of the server <span class="s16">HOSTNAME</span>, or <span class="s11">NIL </span>if <span class="s16">HOSTNAME </span>is not the name of a server.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Logging In</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Most file servers require a user name and password for access. Medley maintains an ephemeral database of user names and passwords for each host accessed recently. The database vanishes when <span class="s11">LOGOUT</span>, <span class="s11">SAVEVM</span>, <span class="s11">SYSOUT</span>, or <span class="s11">MAKESYS </span>is executed, so that the passwords remain secure from any subsequent user of the same virtual memory image. Medley also maintains a notion of the &quot;default&quot; user name and password, which are generally those with which you initially log in.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When a file server for which the system does not yet have an entry in its password database requests a name and password, the system first tries the default user name and password. If the file server does not recognize that name / password, the system prompts you for a name and password to use for that host. It suggests a default name:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">{ERIS} Login: Green</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">which you can accept by pressing [Return}, or replace the name by typing a new name or backspacing over it. Following the name, you are prompted for a password:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">{ERIS} Login: Verdi (password)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">which is not echoed, terminated by another [Return]. This information is stored in the password database so that you are prompted only once, until the database is again cleared.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">STREAMS &amp; FILES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Medley also prompts for password information when a protection violation occurs on accessing a directory on certain kinds of servers that support password-protected directories. Some such servers allow one to protect a file in a way that is inaccessible to even its owner until the file’s protection is changed.  In such cases, no password would help, and the system causes the normal <span class="s11">PROTECTION VIOLATION </span>error.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">You can abort a password interaction by typing the <span class="s11">ERROR </span>interrupt, initially Cosntrol-E. This generally either causes a <span class="s11">PROTECTION VIOLATION </span>error, if the password was requested in order to gain access to a protected file on an otherwise accessible server; or to act as though the server did not exist, in the case where the password was needed to gain any access to the server.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(LOGIN <i>HOSTNAME FLG DIRECTORY MSG</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Forces Medley to ask for your name and password to be used when accessing host <span class="s16">HOSTNAME</span>. Any previous login information for <span class="s16">HOSTNAME </span>is overridden. If <span class="s16">HOSTNAME </span>is <span class="s11">NIL</span>, it overrides login information for all hosts and resets the default user name and password to be those typed in by you. The special value <span class="s16">HOSTNAME </span><span class="s11">= NS:: </span>is used to obtain the default user name and password for all logins for NS Servers.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If <span class="s16">FLG </span>is the atom <span class="s11">QUIET</span>, only prompts you if there is no cached information for</p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">HOSTNAME<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s16">DIRECTORY </span>is specified, it is the name of a directory on <span class="s16">HOSTNAME</span>. In this case, the information requested is the &quot;connect&quot; password for that directory. Connect passwords for any number of different directories on a host can be maintained.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">MSG </span>is non-<span class="s11">NIL</span>, it is a message (a string) to be printed before the name and password information is requested.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">LOGIN <span class="p">returns the user name with which you completed the login.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(SETPASSWORD <i>HOST USER PASSWORD DIRECTORY</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Sets the values in the internal password database exactly as if the strings <span class="s16">USER </span>and</p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PASSWORD <span class="p">were typed in via </span><span class="s11">(LOGIN </span>HOST <span class="s11">NIL </span>DIRECTORY<span class="s11">)</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(SETUSERNAME <i>NAME</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Sets the default uer name to <span class="s16">NAME</span>.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(USERNAME <i>FLG STRPTR PRESERVECASE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FLG </span><span class="s11">= NIL</span>, returns the default user name. This is the only value of <span class="s16">FLG </span>that is meaningful in Medley.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">USERNAME </span>returns the value as a string, unless <span class="s16">STRPTR </span>is <span class="s11">T</span>, in which case <span class="s11">USERNAME </span>returns the value as an atom. The name is returned in uppercase, unless <span class="s16">PRESERVECASE </span>is true.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Abnormal Conditions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If Medley tries to access a file and does not get a response from the file server in a areasonable period of time, it prints a message that the file server is not responding, and keeps trying. If the file server has actually crashed, this may continue indefinitely. A Control-E or similar interrupt aborts out of this state.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the file server crashes but is restarted before you attempt to do anything, file operations will usually proceed normally, except for a brief pause while Medley tries to re-establish any connections it had open before the crash. However, this is not always possible. For example, when a file is open for sequential output and the server crashes, there is no way to recover the output already written, since it vanished with the crash. In such cases, the system will cause an error such as <span class="s11">Connection Lost</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">LOGOUT <span class="p">closes any file server connections that are currently open. On return, it attempts to re- establish connections for any files that were open before logging out. If a file has disappeared or been modified, Medley reports this fact. Files that were open for sequential access generally cannot be reopened after </span>LOGOUT<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Interlisp supports simultaneous access to the same server from different processes and permits overlapping of Lisp computation with file server operations, allowing for improved performance. However, as a corollary of this, a file is not closed the instant that <span class="s11">CLOSEF </span>returns; Interlisp closes the file &quot;in the bckground&quot;. It is therefore very important that you exit Interlisp via <span class="s11">(LOGOUT) </span>or <span class="s11">(LOGOUT T)</span>, rather than boot the machine.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">On rare occasions, the Ethernet may appear completely unresponsive, due to Interlisp having gotten into a bad state. Type <span class="s11">(RESTART.ETHER) </span>to reinitialize Lisp’s Ethernet driver(s), just as when the Lisp system is started up following a <span class="s11">LOGOUT</span>, <span class="s11">SYSOUT</span>, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-top: 4pt;padding-left: 31pt;text-indent: -22pt;text-align: left;"><a name="bookmark28">INPUT/OUTPUT FUNCTIONS</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="605" height="3" alt="image" src="Image_064.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">This chapter describes the standard I / O functions used for reading and printing characters and Interlisp expressions on files and other streams. First, the primitive input functions are presented, then the output functions, then functions for random-access operations (such as searching a file for a given stream, or changing the &quot;next-character&quot; pointer to a position in a file).  Next, the <span class="s11">PRINTOUT </span>statement is documented (see below), which provides an easy way to write complex output operations.  Finally, read tables, used to parse characters as Interlisp expressions, are documented.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Specifying Streams for Input/Output Functions                                                                                    </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Most of the input / output functions in Interlisp-D have an argument named <span class="s16">STREAM </span>or <span class="s16">FILE</span>, specifying on which open stream the function’s action should occur (the name <span class="s16">FILE </span>is used in older functions that predate the concept of stream; the two should, however, be treated synonymously). The value of this argument should be one of the following:</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -45pt;line-height: 93%;text-align: justify;">a stream An object of type <span class="s11">STREAM</span>, as returned by <span class="s11">OPENSTREAM </span>(Chapter 23) or other stream-producing functions, is always the most precise and efficient way to designate a stream argument.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -17pt;line-height: 93%;text-align: justify;">T <span class="p">The litatom </span>T <span class="p">designates the terminal input or output stream of the currently running process, controlling input from the keyboard and output to the display screen. For functions where the direction (input or output) is ambiguous, </span>T <span class="p">is taken to designate the terminal output stream. The </span>T <span class="p">streams are always open; they cannot be closed.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The terminal output stream can be set to a given window or display stream by using <span class="s11">TTYDISPLAYSTREAM </span>(Chapter 28). The terminal input stream cannot be changed. For more information on terminal I / O, see Chapter 30.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -28pt;line-height: 93%;text-align: justify;">NIL <span class="p">The litatom </span>NIL <span class="p">designates the &quot;primary&quot; input or output stream. These streams are initially the same as the terminal input / output streams, but they can be changed by using the functions </span>INPUT <span class="p">and </span>OUTPUT<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">For functions where the direction (input or output) is ambiguous, e.g., <span class="s11">GETFILEPTR</span>, the argument <span class="s11">NIL </span>is taken to mean the primary input stream, if that stream is not identical to the terminal input stream, else the primary output stream.</p><p style="padding-top: 6pt;padding-left: 73pt;text-indent: 0pt;text-align: left;">a window Uses the display stream of the window . Valid for output only.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -55pt;line-height: 91%;text-align: justify;">a file name As of this writing, the name of an open file (as a litatom) can be used as a stream argument. However, there are inefficiencies and possible future incompatibilities associated with doing so. See Chapter 24 for details.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>GETSTREAM </b><i>FILE ACCESS</i>)                                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Coerces the argument <span class="s16">FILE </span>to a stream by the above rules. If <span class="s16">ACCESS </span>is <span class="s11">INPUT</span>, <span class="s11">OUTPUT</span>, or <span class="s11">BOTH</span>, produces the stream designated by <span class="s16">FILE </span>that is open for <span class="s16">ACCESS</span>. If <span class="s16">ACCESS</span><span class="s11">=NIL</span>, returns a stream for <span class="s16">FILE </span>open for any kind of input / output (see the list above for the ambiguous cases). If <span class="s16">FILE </span>does not designate a stream open in the specified mode, causes an error, <span class="s11">FILE NOT OPEN</span>.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>STREAMP </b><i>X</i>)                                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a <span class="s11">STREAM</span>, otherwise <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Input Functions                                                                                                                                         </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">While the functions described below can take input from any stream, some special actions occur when the input is from the terminal (the <span class="s11">T </span>input stream, see above). When reading from the terminal, the input is buffered a line at a time, unless buffering has been inhibited by <span class="s11">CONTROL </span>(Chapter 30) or the input is being read by <span class="s11">READC </span>or <span class="s11">PEEKC</span>. Using specified editing characters, you can erase a character at a time, a word at a time, or the whole line. The keys that perform these editing functions are assignable via <span class="s11">SETSYNTAX</span>, with the initial settings chosen to be those most natural for the given operating system. In Interlisp-D, the initial settings are as follows: characters are deleted one at a time by Backspace; words are erased by control-W; the whole line is erased by Control-Q.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">On the Interlisp-D display, deleting a character or a line causes the characters to be physically erased from the screen. In Interlisp-10, the deleting action can be modified for various types of display terminals by using <span class="s11">DELETECONTROL </span>(Chapter 30).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Unless otherwise indicated, when the end of file is encountered while reading from a file, all input functions generate an error, <span class="s11">END OF FILE</span>. Note that this does not close the input file. The <span class="s11">ENDOFSTREAMOP </span>stream attribute (Chapter 24) is useful for changing the behavior at end of file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Most input functions have a <span class="s16">RDTBL </span>argument, which specifies the read table to be used for input. Unless otherwise specified, if <span class="s16">RDTBL </span>is <span class="s11">NIL</span>, the primary read table is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the <span class="s16">FILE </span>or <span class="s16">STREAM </span>argument to an input function is <span class="s11">NIL</span>, the primary input stream is used.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>INPUT </b><i>FILE</i>)                                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Sets <span class="s16">FILE </span>as the primary input stream; returns the old primary input stream. <span class="s16">FILE </span>must be open for input.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(INPUT) <span class="p">returns the current primary input stream, which is not changed.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: left;">Note: If the primary input stream is set to a file, the file’s full name, rather than the stream itself, is returned. See discussion in Chapter 24.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>READ </b><i>FILE RDTBL FLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Reads one expression from <span class="s16">FILE</span>. Atoms are delimited by the break and separator characters as defined in <span class="s16">RDTBL</span>. To include a break or separator character in an atom, the character must be preceded by the character <span class="s11">%</span>, e.g., <span class="s11">AB%(C </span>is the atom <span class="s11">AB(C</span>, <span class="s11">%% </span>is the atom <span class="s11">%</span>, <span class="s11">%</span><i>control-K </i>is the atom Control-K. For input from the terminal, an atom containing an interrupt character can be input by typing instead the corresponding alphabetic character preceded by Control-V, e.g., <span class="s11">^VD </span>for Control-D.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Strings are delimited by double quotes. To input a string containing a double quote or a</p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">%, precede it by %, e.g., <span class="s11">&quot;AB%&quot;C&quot; </span>is the string <span class="s11">AB&quot;C</span>. Note that % can always be typed even if next character is not &quot;special&quot;, e.g., <span class="s11">%A%B%C </span>is read as <span class="s11">ABC</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If an atom is interpretable as a number, <span class="s11">READ </span>creates a number, e.g., <span class="s11">1E3 </span>reads as a floating point number, <span class="s11">1D3 </span>as a literal atom, <span class="s11">1.0 </span>as a number, <span class="s11">1,0 </span>as a literal atom, etc. An integer can be input in a non-decimal radix by using syntax such as <span class="s11">123Q</span>, |<span class="s11">b10101</span>,</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">|<span class="s11">5r1234 </span>(see Chapter 7). The function <span class="s11">RADIX</span>, sets the radix used to print integers.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">When reading from the terminal, all input is line-buffered to enable the action of the backspacing control characters, unless inhibited by <span class="s11">CONTROL </span>(Chapter 30). Thus no characters are actually seen by the program until a carriage-return (actually the character with terminal syntax class <span class="s11">EOL</span>, see Chapter 30), is typed. However, for reading by <span class="s11">READ</span>, when a matching right parenthesis is encountered, the effect is the same as though a carriage-return were typed, i.e., the characters are transmitted. To indicate this, Interlisp also prints a carriage-return line-feed on the terminal. The line buffer is also transmitted to <span class="s11">READ </span>whenever an <span class="s11">IMMEDIATE </span>read macro character is typed (see below).</p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><i>FLG</i>=T <span class="p">suppresses the carriage-return normally typed by </span>READ <span class="p">following a matching right parenthesis. (However, the characters are still given to </span>READ<span class="p">; i.e., you do not have to type the carriage-return.)</span></p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>RATOM </b><i>FILE RDTBL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Reads in one atom from <span class="s16">FILE</span>. Separation of atoms is defined by <span class="s16">RDTBL</span>. <span class="s11">% </span>is also defined for <span class="s11">RATOM</span>, and the remarks concerning line-buffering and editing control characters also apply.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If the characters comprising the atom would normally be interpreted as a number by <span class="s11">READ</span>, that number is returned by <span class="s11">RATOM</span>. Note however that <span class="s11">RATOM </span>takes no special action for <span class="s11">&quot; </span>whether or not it is a break character, i.e., <span class="s11">RATOM </span>never makes a string.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>RSTRING </b><i>FILE RDTBL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Reads characters from <span class="s16">FILE </span>up to, but not including, the next break or separator character, and returns them as a string. Backspace, Control-W, Control-Q, Control-V, and</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">% <span class="p">have the same effect as with </span>READ<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Note that the break or separator character that terminates a call to <span class="s11">RATOM </span>or <span class="s11">RSTRING </span>is <i>not </i>read by that call, but remains in the buffer to become the first character seen by the next reading function that</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">is called. If that function is <span class="s11">RSTRING</span>, it will return the null string. This is a common source of program bugs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>RATOMS </b><i>A FILE RDTBL</i>)                                        [Function]</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Calls <span class="s11">RATOM </span>repeatedly until the atom <span class="s16">A </span>is read. Returns a list of the atoms read, not including <span class="s16">A</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>RATEST </b><i>FLG</i>)                                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FLG </span><span class="s11">= T</span>, <span class="s11">RATEST </span>returns <span class="s11">T </span>if a separator was encountered immediately prior to the atom returned by the last <span class="s11">RATOM </span>or <span class="s11">READ</span>, <span class="s11">NIL </span>otherwise.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If <span class="s16">FLG </span><span class="s11">= NIL</span>, <span class="s11">RATEST </span>returns <span class="s11">T </span>if last atom read by <span class="s11">RATOM </span>or <span class="s11">READ </span>was a break character,</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">NIL <span class="p">otherwise.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FLG </span><span class="s11">= 1</span>, <span class="s11">RATEST </span>returns <span class="s11">T </span>if last atom read (by <span class="s11">READ </span>or <span class="s11">RATOM</span>) contained a <span class="s11">% </span>used to quote the next character (as in <span class="s11">%[ </span>or <span class="s11">%A%B%C</span>), <span class="s11">NIL </span>otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>READC </b><i>FILE RDTBL</i>)                                             <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Reads and returns the next character, including <span class="s11">%</span>, <span class="s11">&quot;</span>, etc, i.e., is not affected by break or separator characters. The action of <span class="s11">READC </span>is subject to line-buffering, i.e., <span class="s11">READC </span>does not return a value until the line has been terminated even if a character has been typed. Thus, the editing control characters have their usual effect. <span class="s16">RDTBL </span>does not directly affect the value returned, but is used as usual in line-buffering, e.g., determining when input has been terminated. If <span class="s11">(CONTROL T) </span>has been executed (Chapter 30), defeating line- buffering, the <span class="s16">RDTBL </span>argument is irrelevant, and <span class="s11">READC </span>returns a value as soon as a character is typed (even if the character typed is one of the editing characters, which ordinarily would never be seen in the input buffer).</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PEEKC </b><i>FILE</i>)                                                   <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Returns the next character, but does not actually read it and remove it from the buffer. If reading from the terminal, the character is echoed as soon as <span class="s11">PEEKC </span>reads it, even though it is then &quot;put back&quot; into the system buffer, where Backspace, Control-W, etc. could change it. Thus it is possible for the value returned by <span class="s11">PEEKC </span>to &quot;disagree&quot; in the first character with a subsequent <span class="s11">READ</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>LASTC </b><i>FILE</i>)                                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the last character read from <span class="s16">FILE</span>. <span class="s11">LASTC </span>can return an incorrect result when called immediatley following a <span class="s11">PEEKC </span>on a file that contains run-coded NS characters.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>READCCODE </b><i>FILE RDTBL</i>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the next character <i>code </i>from <span class="s16">STREAM</span>; thus, this operation is equivalent to, but more efficient than, <span class="s11">(CHCON1 (READC </span><span class="s16">FILE RDTBL</span><span class="s11">))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>PEEKCCODE </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns, without consuming, the next character <i>code </i>from <span class="s16">STREAM</span>; thus, this operation is equivalent to, but more efficient than, <span class="s11">(CHCON1 (PEEKC </span><span class="s16">FILE</span><span class="s11">))</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>BIN </b><i>STREAM</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the next byte from <span class="s16">STREAM</span>. This operation is useful for reading streams of binary, rather than character, data.</p><p style="padding-top: 9pt;padding-left: 114pt;text-indent: -36pt;text-align: left;">Note: <span class="s11">BIN </span>is similar to <span class="s11">READCCODE</span>, except that <span class="s11">BIN </span>always reads a single byte, whereas <span class="s11">READCCODE </span>reads a &quot;character&quot; that can consist of more than one byte, depending on the character and its encoding.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">READ<span class="p">, </span>RATOM<span class="p">, </span>RATOMS<span class="p">, </span>PEEKC<span class="p">, </span>READC <span class="p">all wait for input if there is none. The only way to test whether or not there is input is to use </span>READP<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>READP </b><i>FILE FLG</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">Returns </span>T <span class="p">if there is anything in the input buffer of </span><i>FILE</i><span class="p">, </span>NIL <span class="p">otherwise. This operation is only interesting for streams whose source of data is dynamic, e.g., the terminal or a byte stream over a network; for other streams, such as to files, </span>(READP <i>FILE</i>) <span class="p">is equivalent to </span>(NOT (EOFP <i>FILE</i>))<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note that because of line-buffering, <span class="s11">READP </span>may return <span class="s11">T</span>, indicating there is input in the buffer, but <span class="s11">READ </span>may still have to wait.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Frequently, the terminal’s input buffer contains a single <span class="s11">EOL </span>character left over from a previous input. For most applications, this situation wants to be treated as though the buffer were empty, and so <span class="s11">READP </span>returns <span class="s11">NIL </span>in this case. However, if <span class="s16">FLG</span><span class="s11">=T</span>, <span class="s11">READP </span>returns <span class="s11">T </span>if there is <i>any </i>character in the input buffer, including a single <span class="s11">EOL</span>. <span class="s16">FLG </span>is ignored for streams other than the terminal.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>EOFP </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns true if <span class="s16">FILE </span>is at &quot;end of file&quot;, i.e., the next call to an input function would cause an <span class="s11">END OF FILE </span>error; <span class="s11">NIL </span>otherwise. For randomly accessible files, this can also be thought of as the file pointer pointing beyond the last byte of the file. <span class="s16">FILE </span>must be open for (at least) input, or an error is generated, <span class="s11">FILE NOT OPEN</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Note that <span class="s11">EOFP </span>can return <span class="s11">NIL </span>and yet the next call to <span class="s11">READ </span>might still cause an <span class="s11">END OF FILE </span>error, because the only characters remaining in the input were separators or otherwise constituted an incomplete expression. The function <span class="s11">SKIPSEPRS </span>is sometimes more useful as a way of detecting end of file when it is known that all the expressions in the file are well formed.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>WAITFORINPUT </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Waits until input is available from <span class="s16">FILE </span>or from the terminal, i.e. from <span class="s11">T</span>. <span class="s11">WAITFORINPUT</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">is functionally equivalent to <span class="s11">(until (OR (READP T) (READP FILE)) do NIL)</span>,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">except that it does not use up machine cycles while waiting. Returns the device for which input is now available, i.e. <span class="s16">FILE </span>or <span class="s11">T</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">FILE </span>can also be an integer, in which case <span class="s11">WAITFORINPUT </span>waits until there is input available from the terminal, or until <span class="s16">FILE </span>milliseconds have elapsed. Value is <span class="s11">T </span>if input is now available, <span class="s11">NIL </span>in the case that <span class="s11">WAITFORINPUT </span>timed out.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SKREAD </b><i>FILE REREADSTRING RDTBL</i>)                               <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">&quot;Skip Read&quot;. <span class="s11">SKREAD </span>consumes characters from <span class="s16">FILE </span>as if one call to <span class="s11">READ </span>had been performed, without paying the storage and compute cost to really read in the structure. <span class="s16">REREADSTRING </span>is for the case where the caller has already performed some <span class="s11">READC</span>’s and <span class="s11">RATOM</span>’s before deciding to skip this expression. In this case, <span class="s16">REREADSTRING </span>should be the material already read (as a string), and <span class="s11">SKREAD </span>operates as though it had seen that material first, thus setting up its parenthesis count, double-quote count, etc.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The read table <span class="s16">RDTBL </span>is used for reading from <span class="s16">FILE</span>. If <span class="s16">RDTBL </span>is <span class="s11">NIL</span>, it defaults to the value of <span class="s11">FILERDTBL</span>. <span class="s11">SKREAD </span>may have difficulties if unusual read macros are defined in <span class="s16">RDTBL</span>. <span class="s11">SKREAD </span>does not recognize read macro characters in <span class="s16">REREADSTRING</span>, nor <span class="s11">SPLICE </span>or <span class="s11">INFIX </span>read macros. This is only a problem if the read macros are defined to parse subsequent input in the stream that does not follow the normal parenthesis and string-quote conventions.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">SKREAD <span class="p">returns </span>%) <span class="p">if the read terminated on an unbalanced closing parenthesis; </span>%] <span class="p">if the read terminated on an unbalanced </span>%]<span class="p">, i.e., one which also would have closed any extant open left parentheses; otherwise </span>NIL<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SKIPSEPRS </b><i>FILE RDTBL</i>)                                         <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Consumes characters from <span class="s16">FILE </span>until it encounters a non-separator character (as defined by <span class="s16">RDTBL</span>). <span class="s11">SKIPSEPRS </span>returns, but does not consume, the terminating character, so that the next call to <span class="s11">READC </span>would return the same character. If no non-separator character is found before the end of file is reached, <span class="s11">SKIPSEPRS </span>returns <span class="s11">NIL </span>and leaves the stream at end of file. This function is useful for skipping over &quot;white space&quot; when scanning a stream character by character, or for detecting end of file when reading expressions from a stream with no pre-arranged terminating expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Output Functions                                                                                                                                      </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Unless otherwise specified by <span class="s11">DEFPRINT</span>, pointers other than lists, strings, atoms, or numbers, are printed in the form <span class="s11">{</span><span class="s16">DATATYPE</span><span class="s11">} </span>followed by the octal representation of the address of the pointer (regardless of radix). For example, an array pointer might print as <span class="s11">{ARRAYP}#43,2760</span>. This printed representation is for compactness of display on your terminal, and will <i>not </i>read back in correctly; if the form above is read, it will produce the litatom <span class="s11">{ARRAYP}#43,2760</span>.</p><p style="padding-top: 7pt;padding-left: 162pt;text-indent: -36pt;line-height: 91%;text-align: left;">Note: The term &quot;end-of-line&quot; appearing in the description of an output function means the character or characters used to terminate a line in the file system being used</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;line-height: 91%;text-align: left;">by the given implementation of Interlisp. For example, in Interlisp-D end-of-line is indicated by the character carriage-return.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Some of the functions described below have a <span class="s16">RDTBL </span>argument, which specifies the read table to be used for output.  If <span class="s16">RDTBL </span>is <span class="s11">NIL</span>, the primary read table is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Most of the functions described below have an argument <span class="s16">FILE</span>, which specifies the stream on which the operation is to take place. If <span class="s16">FILE </span>is <span class="s11">NIL</span>, the primary output stream is used .</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>OUTPUT </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Sets <span class="s16">FILE </span>as the primary output stream; returns the old primary output stream. <span class="s16">FILE</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">must be open for output.</p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">(OUTPUT) <span class="p">returns the current primary output stream, which is not changed.</span></p><p style="padding-top: 7pt;padding-left: 150pt;text-indent: -36pt;line-height: 91%;text-align: left;">Note: If the primary output stream is set to a file, the file’s full name, rather than the stream itself, is returned. See the discussion in Chapter 24.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>PRIN1 </b><i>X FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Prints <span class="s16">X </span>on <span class="s16">FILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>PRIN2 </b><i>X FILE RDTBL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Prints <span class="s16">X </span>on <span class="s16">FILE </span>with <span class="s11">%</span>’s and <span class="s11">&quot;</span>’s inserted where required for it to read back in properly by <span class="s11">READ</span>, using <span class="s16">RDTBL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Both <span class="s11">PRIN1 </span>and <span class="s11">PRIN2 </span>print any kind of Lisp expression, including lists, atoms, numbers, and strings. <span class="s11">PRIN1 </span>is generally used for printing expressions where human readability, rather than machine readability, is important, e.g., when printing text rather than program fragments. <span class="s11">PRIN1 </span>does not print double quotes around strings, or <span class="s11">% </span>in front of special characters. <span class="s11">PRIN2 </span>is used for printing Interlisp expressions which can then be read back into Interlisp with <span class="s11">READ</span>; i.e., break and separator characters in atoms will be preceded by <span class="s11">%</span>’s. For example, the atom &quot;<span class="s11">()</span>&quot; is printed as <span class="s11">%(%) </span>by <span class="s11">PRIN2</span>. If the integer output radix (as set by <span class="s11">RADIX</span>) is not 10, <span class="s11">PRIN2 </span>prints the integer using the input syntax for non-decimal integers (see Chapter 7) but <span class="s11">PRIN1 </span>does not (but both print the integer in the output radix).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(<b>PRIN3 </b><i>X FILE</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(<b>PRIN4 </b><i>X FILE RDTBL</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">PRIN3 <span class="p">and </span>PRIN4 <span class="p">are the same as </span>PRIN1 <span class="p">and </span>PRIN2 <span class="p">respectively, except that they do not increment the horizontal position counter nor perform any linelength checks. They are useful primarily for printing control characters.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>PRINT </b><i>X FILE RDTBL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Prints the expression <span class="s16">X </span>using <span class="s11">PRIN2 </span>followed by an end-of-line.  Returns <span class="s16">X</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PRINTCCODE </b><i>CHARCODE FILE</i>)                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Outputs a single character whose code is <span class="s16">CHARCODE </span>to <span class="s16">FILE</span>. This is similar to <span class="s11">(PRIN1 (CHARACTER </span><span class="s16">CHARCODE</span><span class="s11">))</span>, except that numeric characters are guaranteed to print &quot;correctly&quot;; e.g., <span class="s11">(PRINTCCODE (CHARCODE 9)) </span>always prints &quot;<span class="s11">9</span>&quot;, independent of the setting of <span class="s11">RADIX</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s11">PRINTCCODE </span>may actually print more than one byte on <span class="s16">FILE</span>, due to character encoding and end of line conventions; thus, no assumptions should be made about the relative motion of the file pointer (see <span class="s11">GETFILEPTR</span>) during this operation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>BOUT </b><i>STREAM BYTE</i>)                                             <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Outputs a single 8-bit byte to <span class="s16">STREAM</span>. This is similar to <span class="s11">PRINTCCODE</span>, but for binary streams the character position in <span class="s16">STREAM </span>is not updated (as with <span class="s11">PRIN3</span>), and end of line conventions are ignored.</p><p style="padding-top: 9pt;padding-left: 198pt;text-indent: -36pt;text-align: left;">Note: <span class="s11">BOUT </span>is similar to <span class="s11">PRINTCCODE</span>, except that <span class="s11">BOUT </span>always writes a single byte, whereas <span class="s11">PRINTCCODE </span>writes a &quot;character&quot; that can consist of more than one byte, depending on the character and its encoding.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SPACES </b><i>N FILE</i>)                                                <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Prints <span class="s16">N </span>spaces. Returns <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>TERPRI </b><i>FILE</i>)                                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Prints an end-of-line character. Returns <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FRESHLINE </b><i>STREAM</i>)                                             <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Equivalent to <span class="s11">TERPRI</span>, except it does nothing if it is already at the beginning of the line. Returns <span class="s11">T </span>if it prints an end-of-line, <span class="s11">NIL </span>otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>TAB </b><i>POS MINSPACES FILE</i>)                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Prints the appropriate number of spaces to move to position <span class="s16">POS</span>. <span class="s16">MINSPACES </span>indicates how many spaces must be printed (if <span class="s11">NIL</span>, 1 is used). If the current position plus <i>MINSPACES </i>is greater than <span class="s16">POS</span>, <span class="s11">TAB </span>does a <span class="s11">TERPRI </span>and then <span class="s11">(SPACES </span><span class="s16">POS</span><span class="s11">)</span>. If <span class="s16">MINSPACES </span>is <span class="s11">T</span>, and the current position is greater than <span class="s16">POS</span>, then <span class="s11">TAB </span>does nothing.</p><p style="padding-top: 10pt;padding-left: 162pt;text-indent: -36pt;text-align: left;">Note: A sequence of <span class="s11">PRINT</span>, <span class="s11">PRIN2</span>, <span class="s11">SPACES</span>, and <span class="s11">TERPRI </span>expressions can often be more conveniently coded with a single <span class="s11">PRINTOUT </span>statement.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SHOWPRIN2 </b><i>X FILE RDTBL</i>)                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">PRIN2 </span>except if <span class="s11">SYSPRETTYFLG=T</span>, prettyprints <span class="s16">X </span>instead.  Returns <span class="s16">X</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>SHOWPRINT </b><i>X FILE RDTBL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">PRINT </span>except if <span class="s11">SYSPRETTYFLG=T</span>, prettyprints <span class="s16">X </span>instead, followed by an end-of- line.  Returns <span class="s16">X</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">SHOWPRINT <span class="p">and </span>SHOWPRIN2 <span class="p">are used by the programmer’s assistant (Chapter 13) for printing the values of expressions and for printing the history list, by various commands of the break package (Chapter 14), e.g. </span>?= <span class="p">and </span>BT <span class="p">commands, and various other system packages. The idea is that by simply settting or binding </span>SYSPRETTYFLG <span class="p">to </span>T <span class="p">(initially </span>NIL<span class="p">), you instruct the system when interacting with you to </span>PRETTYPRINT <span class="p">expressions (Chapter 26) instead of printing them.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>PRINTBELLS </b>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Used by DWIM (Chapter 19) to print a sequence of bells to alert you to stop typing. Can be advised or redefined for special applications, e.g., to flash the screen on a display terminal.</p><p class="s11" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>FORCEOUTPUT </b><i>STREAM WAITFORFINISH</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Forces any buffered output data in <span class="s16">STREAM </span>to be transmitted.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WAITFORFINISH </span>is non-<span class="s11">NIL</span>, this doesn’t return until the data has been forced out.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>POSITION </b><i>FILE N</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns the column number at which the next character will be read or printed. After a end of line, the column number is 0.  If <span class="s16">N </span>is non-<span class="s11">NIL</span>, <i>resets </i>the column number to be <span class="s16">N</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note that resetting <span class="s11">POSITION </span>only changes Lisp’s belief about the current column number; it does not cause any horizontal motion. Also note that <span class="s11">(POSITION </span><span class="s16">FILE</span><span class="s11">) </span>is <i>not </i>the same as <span class="s11">(GETFILEPTR </span><span class="s16">FILE</span><span class="s11">) </span>which gives the position in the <i>file</i>, not on the <i>line</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>LINELENGTH </b><i>N FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Sets the length of the print line for the output file <span class="s16">FILE </span>to <span class="s16">N</span>; returns the former setting of the line length. <span class="s16">FILE </span>defaults to the primary output stream. <span class="s11">(LINELENGTH NIL </span><span class="s16">FILE</span><span class="s11">) </span>returns the current setting for <span class="s16">FILE</span>. When a file is first opened, its line length is set to the value of the variable <span class="s11">FILELINELENGTH</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Whenever printing an atom or string would increase a file’s position <i>beyond </i>the line length of the file, an end of line is automatically inserted first. This action can be defeated by using <span class="s11">PRIN3 </span>and <span class="s11">PRIN4</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>SETLINELENGTH </b><i>N</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Sets the line length for the terminal by doing <span class="s11">(LINELENGTH </span><span class="s16">N </span><span class="s11">T)</span>. If <span class="s16">N </span>is <span class="s11">NIL</span>, it determines <span class="s16">N </span>by consulting the operating system’s belief about the terminal’s characteristics.  In Interlisp-D, this is a no-op.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">PRINTLEVEL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">When using Interlisp one often has to handle large, complicated lists, which are difficult to understand when printed out. <span class="s11">PRINTLEVEL </span>allows you to specify in how much detail lists should be printed.  The print functions <span class="s11">PRINT</span>, <span class="s11">PRIN1</span>, and <span class="s11">PRIN2 </span>are all affected by level parameters set by:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PRINTLEVEL </b><i>CARVAL CDRVAL</i>)                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Sets the <span class="s11">CAR </span>print level to <span class="s16">CARVAL</span>, and the <span class="s11">CDR </span>print level to <span class="s16">CDRVAL</span>. Returns a list cell whose <span class="s11">CAR </span>and <span class="s11">CDR </span>are the old settings. <span class="s11">PRINTLEVEL </span>is initialized with the value <span class="s11">(1000</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">. -1)<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="p">In order that </span>PRINTLEVEL <span class="p">can be used with </span>RESETFORM <span class="p">or </span>RESETSAVE<span class="p">, if </span><i>CARVAL </i><span class="p">is a list cell it is equivalent to </span>(PRINTLEVEL (CAR <i>CARVAL</i>) (CDR <i>CARVAL</i>))<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(PRINTLEVEL <i>N </i>NIL) <span class="p">changes the </span>CAR <span class="p">printlevel without affecting the </span>CDR <span class="p">printlevel. </span>(PRINTLEVEL NIL <i>N</i>) <span class="p">changes the </span>CDR <span class="p">printlevel with affecting the </span>CAR <span class="p">printlevel. </span>(PRINTLEVEL) <span class="p">gives the current setting without changing either.</span></p><p style="padding-top: 10pt;padding-left: 198pt;text-indent: -36pt;text-align: left;">Note: Control-P (Chapter 30) can be used to change the <span class="s11">PRINTLEVEL </span>setting dynamically, even while Interlisp is printing.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The <span class="s11">CAR </span>printlevel specifies how &quot;deep&quot; to print a list. Specifically, it is the number of unpaired left parentheses which will be printed. Below that level, all lists will be printed as <span class="s11">&amp;</span>. If the <span class="s11">CAR </span>printlevel is <i>negative</i>, the action is similar except that an end-of-line is inserted after each right parentheses that would be immediately followed by a left parenthesis.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s11">CDR </span>printlevel specifies how &quot;long&quot; to print a list. It is the number of top level list elements that will be printed before the printing is terminated with <b>--</b>. For example, if <span class="s16">CDRVAL</span><span class="s11">=2</span>, <span class="s11">(A B C D E) </span>will print as <span class="s11">(A B --)</span>. For sublists, the number of list elements printed is also affected by the depth of printing in the <span class="s11">CAR </span>direction: Whenever the <i>sum </i>of the depth of the sublist (i.e. the number of unmatched left parentheses) and the number of elements is greater than the <span class="s11">CDR </span>printlevel, <b>-- </b>is printed. This gives a &quot;triangular&quot; effect in that less is printed the farther one goes in either <span class="s11">CAR </span>or <span class="s11">CDR </span>direction. If the <span class="s11">CDR </span>printlevel is negative, then it is the same as if the <span class="s11">CDR </span>printlevel were infinite.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Examples:</p><p style="padding-top: 7pt;padding-left: 172pt;text-indent: 68pt;line-height: 170%;text-align: left;">After: <span class="s11">(A (B C (D (E F) G) H) K L) </span>prints as: <span class="s11">(PRINTLEVEL 3 -1) (A (B C (D &amp; G) H) K L) (PRINTLEVEL 2 -1) (A (B C &amp; H) K L)</span></p><p class="s11" style="padding-left: 172pt;text-indent: 0pt;line-height: 177%;text-align: left;">(PRINTLEVEL 1 -1) (A &amp; K L) (PRINTLEVEL 0 -1) &amp;</p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PRINTLEVEL 1000 2) (A (B --) --)</p><p class="s11" style="padding-top: 7pt;padding-left: 161pt;text-indent: 0pt;text-align: left;">(PRINTLEVEL 1000 3) (A (B C --) K --)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 129pt;text-indent: 0pt;text-align: left;">(PRINTLEVEL 1 3) (A &amp; K --)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">PLVLFILEFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Normally, <span class="s11">PRINTLEVEL </span>only affects terminal output. Output to all other files acts as though the print level is infinite. However, if <span class="s11">PLVLFILEFLG </span>is <span class="s11">T </span>(initially <span class="s11">NIL</span>), then <span class="s11">PRINTLEVEL </span>affects output to files as well.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following three functions are useful for printing isolated expressions at a specified print level without going to the overhead of resetting the global print level.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>LVLPRINT </b><i>X FILE CARLVL CDRLVL TAIL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Performs <span class="s11">PRINT </span>of <span class="s16">X </span>to <span class="s16">FILE</span>, using as <span class="s11">CAR </span>and <span class="s11">CDR </span>print levels the values <span class="s16">CARLVL </span>and <span class="s16">CDRLVL</span>, respectively. Uses the <span class="s11">T </span>read table. If <span class="s16">TAIL </span>is specified, and <span class="s16">X </span>is a tail of it, then begins its printing with <span class="s11">&quot;...&quot;</span>, rather than on open parenthesis.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>LVLPRIN2 </b><i>X FILE CARLVL CDRLVL TAIL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">LVLPRIN2</span>, but performs a <span class="s11">PRIN2</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>LVLPRIN1 </b><i>X FILE CARLVL CDRLVL TAIL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Similar to <span class="s11">LVLPRIN1</span>, but performs a <span class="s11">PRIN1</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Printing Numbers</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">How the ordinary printing functions (<span class="s11">PRIN1</span>, <span class="s11">PRIN2</span>, etc.) print numbers can be affected in several ways. <span class="s11">RADIX </span>influences the printing of integers, and <span class="s11">FLTFMT </span>influences the printing of floating point numbers. The setting of the variable <span class="s11">PRXFLG </span>determines how the symbol-manipulation functions handle numbers. The <span class="s11">PRINTNUM </span>package permits greater controls on the printed appearance of numbers, allowing such things as left-justification, suppression of trailing decimals, etc.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>RADIX </b><i>N</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Resets the output radix for integers to the absolute value of <span class="s16">N</span>. The value of <span class="s11">RADIX </span>is its previous setting. <span class="s11">(RADIX) </span>gives the current setting without changing it. The initial setting is 10.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Note that <span class="s11">RADIX </span>affects output <i>only</i>. There is no input radix; on input, numbers are interpreted as decimal unless they are entered in a non-decimal radix with syntax such as <span class="s11">123Q</span>, |<span class="s11">b10101</span>, |<span class="s11">5r1234 </span>(see Chapter 7). <span class="s11">RADIX </span>does not affect the behavior of <span class="s11">UNPACK</span>, etc., unless the value of <span class="s11">PRXFLG </span>(below) is <span class="s11">T</span>. For example, if <span class="s11">PRXFLG </span>is <span class="s11">NIL </span>and the radix is set to 8 with <span class="s11">(RADIX 8)</span>, the value of <span class="s11">(UNPACK 9) </span>is <span class="s11">(9)</span>, not <span class="s11">(1 1)</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Using <span class="s11">PRINTNUM </span>(below) or the <span class="s11">PRINTOUT </span>command <span class="s11">.I </span>(below) is often a more convenient and appropriate way to print a single number in a specified radix than to globally change <span class="s11">RADIX</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">(<b>FLTFMT </b><i>FORMAT</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Resets the output format for floating point numbers to the <span class="s11">FLOAT </span>format <span class="s16">FORMAT </span>(see <span class="s11">PRINTNUM </span>below for a description of <span class="s11">FLOAT </span>formats). <span class="s16">FORMAT</span><span class="s11">=T </span>specifies the default &quot;free&quot; formatting: some number of significant digits (a function of the implementation) are printed, with trailing zeros suppressed; numbers with sufficiently large or small exponents are instead printed in exponent notation.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">FLTFMT <span class="p">returns its current setting. </span>(FLTFMT) <span class="p">returns the current setting without changing it. The initial setting is </span>T<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Note: In Interlisp-D, <span class="s11">FLTFMT </span>ignores the <span class="s16">WIDTH </span>and <span class="s16">PAD </span>fields of the format (they are implemented only by <span class="s11">PRINTNUM</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Whether print name manipulation functions (<span class="s11">UNPACK</span>, <span class="s11">NCHARS</span>, etc.) use the values of <span class="s11">RADIX </span>and</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">FLTFMT <span class="p">is determined by the variable </span>PRXFLG<span class="p">:</span></p><p class="s15" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">PRXFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">PRXFLG=NIL </span>(the initial setting), then the &quot;<span class="s11">PRIN1</span>&quot; name used by <span class="s11">PACK</span>, <span class="s11">UNPACK</span>, <span class="s11">MKSTRING</span>, etc., is computed using base 10 for integers and the system default floating format for floating point numbers, independent of the current setting of <span class="s11">RADIX </span>or <span class="s11">FLTFMT</span>. If <span class="s11">PRXFLG=T</span>, then <span class="s11">RADIX </span>and <span class="s11">FLTFMT </span>do dictate the &quot;<span class="s11">PRIN1</span>&quot; name of numbers. Note that in this case, <span class="s11">PACK </span>and <span class="s11">UNPACK </span>are <i>not </i>inverses.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Examples with <span class="s11">(RADIX 8), (FLTFMT ’(FLOAT 4 2))</span>:</p><p style="padding-top: 6pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">With <span class="s11">PRXFLG=NIL,</span></p><p class="s11" style="padding-top: 6pt;padding-left: 222pt;text-indent: 0pt;line-height: 88%;text-align: left;">(UNPACK 13) =&gt; (1 3) (PACK ’(A 9)) =&gt; A9</p><p class="s11" style="padding-left: 222pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(UNPACK 1.2345) =&gt; (1 %. 2 3 4 5)</p><p style="padding-top: 4pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">With <span class="s11">PRXFLG=T,</span></p><p class="s11" style="padding-top: 6pt;padding-left: 221pt;text-indent: 0pt;line-height: 88%;text-align: left;">(UNPACK 13) =&gt; (1 5) (PACK ’(A 9)) =&gt; A11</p><p class="s11" style="padding-left: 221pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(UNPACK 1.2345) =&gt; (1 %. 2 3)</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Note that <span class="s11">PRXFLG </span>does not effect the radix of &quot;<span class="s11">PRIN2</span>&quot; names, so with <span class="s11">(RADIX 8)</span>, <span class="s11">(NCHARS 9 T)</span>, which uses <span class="s11">PRIN2 </span>names, would return 3, (since 9 would print as 11Q) for either setting of <span class="s11">PRXFLG</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Warning: Some system functions will not work correctly if <span class="s11">PRXFLG </span>is not <span class="s11">NIL</span>. Therefore, resetting the global value of <span class="s11">PRXFLG </span>is not recommended. It is much better to rebind <span class="s11">PRXFLG </span>as a <span class="s11">SPECVAR </span>for that part of a program where it needs to be non-<span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The basic function for printing numbers under format control is <span class="s11">PRINTNUM</span>. Its utility is considerably enhanced when used in conjunction with the <span class="s11">PRINTOUT </span>package, which implements a compact language for specifying complicated sequences of elementary printing operations, and makes fancy output formats easy to design and simple to program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">(<b>PRINTNUM </b>FORMAT NUMBER FILE)                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Prints <span class="s16">NUMBER </span>on <span class="s16">FILE </span>according to the format <span class="s16">FORMAT</span>. <span class="s16">FORMAT </span>is a list structure with one of the forms described below.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FORMAT </span>is a list of the form <span class="s11">(FIX </span><span class="s16">WIDTH RADIX PAD0 LEFTFLUSH</span><span class="s11">)</span>, this specifies a <span class="s11">FIX </span>format. <span class="s16">NUMBER </span>is rounded to the nearest integer, and then printed in a field <span class="s16">WIDTH </span>characters long with radix set to <span class="s16">RADIX </span>(or 10 if <span class="s16">RADIX</span><span class="s11">=NIL</span>; note that the setting from the function <span class="s11">RADIX </span>is <i>not </i>used as the default). If <span class="s16">PAD0 </span>and <span class="s16">LEFTFLUSH </span>are both <span class="s11">NIL</span>, the number is right-justified in the field, and the padding characters to the left of the leading digit are spaces. If <span class="s16">PAD0 </span>is <span class="s11">T</span>, the character &quot;<span class="s11">0</span>&quot; is used for padding. If <span class="s16">LEFTFLUSH </span>is <span class="s11">T</span>, then the number is left-justified in the field, with trailing spaces to fill out <span class="s16">WIDTH </span>characters.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The following examples illustrate the effects of the <span class="s11">FIX </span>format options on the number 9 (the vertical bars indicate the field width):</p><p class="s16" style="padding-top: 5pt;padding-left: 205pt;text-indent: 0pt;text-align: left;">FORMAT<span class="p">: </span><span class="s11">(PRINTNUM </span>FORMAT <span class="s11">9) </span><span class="p">prints:</span></p><p class="s11" style="padding-top: 3pt;padding-left: 169pt;text-indent: 32pt;line-height: 120%;text-align: left;">(FIX 2) <span class="p">| </span>9<span class="p">| </span>(FIX 2 NIL T) <span class="p">|</span>09<span class="p">|</span></p><p class="s11" style="padding-left: 175pt;text-indent: 0pt;text-align: left;">(FIX 12 8 T) <span class="p">|</span>000000000011<span class="p">|</span></p><p class="s11" style="padding-top: 2pt;padding-left: 148pt;text-indent: 0pt;text-align: left;">(FIX 5 NIL NIL T) <span class="p">|</span>9 <span class="p">|</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FORMAT </span>is a list of the form <span class="s11">(FLOAT </span><span class="s16">WIDTH DECPART EXPPART PAD0 ROUND</span><span class="s11">)</span>, this specifies a <span class="s11">FLOAT </span>format. <span class="s16">NUMBER </span>is printed as a decimal number in a field <span class="s16">WIDTH </span>characters wide, with <span class="s16">DECPART </span>digits to the right of the decimal point. If <span class="s16">EXPPART </span>is not <span class="s11">0 </span>(or <span class="s11">NIL</span>), the number is printed in exponent notation, with the exponent occupying <span class="s16">EXPPART </span>characters in the field. <span class="s16">EXPPART </span>should allow for the character <span class="s11">E </span>and an optional sign to be printed before the exponent digits. As with <span class="s11">FIX </span>format, padding on the left is with spaces, unless <span class="s16">PAD0 </span>is <span class="s11">T</span>. If <span class="s16">ROUND </span>is given, it indicates the digit position at which rounding is to take place, counting from the leading digit of the number.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Interlisp-D interprets <span class="s16">WIDTH</span><span class="s11">=NIL </span>to mean no padding, i.e., to use however much space the number needs, and interprets <span class="s16">DECPART</span><span class="s11">=NIL </span>to mean as many decimal places as needed.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The following examples illustrate the effects of the <span class="s11">FLOAT </span>format options on the number 27.689 (the vertical bars indicate the field width):</p><p class="s16" style="padding-top: 5pt;padding-left: 205pt;text-indent: 0pt;text-align: left;">FORMAT<span class="p">: </span><span class="s11">(PRINTNUM </span>FORMAT <span class="s11">27.689) </span><span class="p">prints:</span></p><p class="s11" style="padding-top: 2pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(FLOAT 7 2) <span class="p">| </span>27.69<span class="p">|</span></p><p class="s11" style="padding-top: 2pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(FLOAT 7 2 NIL 0) <span class="p">|</span>0027.69<span class="p">|</span></p><p class="s11" style="padding-top: 2pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(FLOAT 7 2 2) <span class="p">| </span>2.77E1<span class="p">|</span></p><p class="s11" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">(FLOAT 11 2 4)    <span class="p">|     </span>2.77E+01<span class="p">|</span></p><p class="s11" style="padding-top: 2pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(FLOAT 7 2 NIL NIL 1) <span class="p">| </span>30.00<span class="p">|</span></p><p class="s11" style="padding-top: 2pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(FLOAT 7 2 NIL NIL 2) <span class="p">| </span>28.00<span class="p">|</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">NILNUMPRINTFLG                                                 <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s11">PRINTNUM</span>’s <span class="s16">NUMBER </span>argument is not a number and not <span class="s11">NIL</span>, a <span class="s11">NON-NUMERIC ARG </span>error is generated. If <span class="s16">NUMBER </span>is <span class="s11">NIL</span>, the effect depends on the setting of the variable <span class="s11">NILNUMPRINTFLG</span>. If <span class="s11">NILNUMPRINTFLG </span>is <span class="s11">NIL</span>, then the error occurs as usual. If it is non-<span class="s11">NIL</span>, then no error occurs, and the value of <span class="s11">NILNUMPRINTFLG </span>is printed right- justified in the field described by <span class="s16">FORMAT</span>. This option facilitates the printing of numbers in aggregates with missing values coded as <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">User Defined Printing</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Initially, Interlisp only knows how to print in an interesting way objects of type litatom, number, string, list and stackp. All other types of objects are printed in the form <span class="s11">{datatype} </span>followed by the octal representation of the address of the pointer, a format that cannot be read back in to produce an equivalent object. When defining user data types (using the <span class="s11">DATATYPE </span>record type, Chapter 8), it is often desirable to specify as well how objects of that type should be printed, so as to make their contents readable, or at least more informative to the viewer. The function <span class="s11">DEFPRINT </span>is used to specify the printing format of a data type.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>DEFPRINT </b><i>TYPE FN</i>)                                             <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">TYPE </span>is a type name. Whenever a printing function (<span class="s11">PRINT</span>, <span class="s11">PRIN1</span>, <span class="s11">PRIN2</span>, etc.) or a function requiring a print name (<span class="s11">CHCON</span>, <span class="s11">NCHARS</span>, etc.) encounters an object of the indicated type, <span class="s16">FN </span>is called with two arguments: the item to be printed and the name of the stream, if any, to which the object is to be printed. The second argument is <span class="s11">NIL </span>on calls that request the print name of an object without actually printing it.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FN </span>returns a list of the form <span class="s11">(</span><span class="s16">ITEM1 </span><span class="s11">. </span><span class="s16">ITEM2</span><span class="s11">)</span>, <span class="s16">ITEM1 </span>is printed using <span class="s11">PRIN1 </span>(unless it is <span class="s11">NIL</span>), and then <span class="s16">ITEM2 </span>is printed using <span class="s11">PRIN2 </span>(unless it is <span class="s11">NIL</span>). No spaces are printed between the two items.  Typically, <span class="s16">ITEM1 </span>is a read macro character.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FN </span>returns <span class="s11">NIL</span>, the datum is printed in the system default manner.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">FN </span>returns <span class="s11">T</span>, nothing further is printed; <span class="s16">FN </span>is assumed to have printed the object to the stream itself. Note that this case if permitted only when the second argument passed to <span class="s16">FN </span>is non-<span class="s11">NIL</span>; otherwise, there is no destination for <span class="s16">FN </span>to do its printing, so it must return as in one of the other two cases.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Printing Unusual Data Structures</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">HPRINT <span class="p">(for &quot;Horrible Print&quot;) and </span>HREAD <span class="p">provide a mechanism for printing and reading back in general data structures that cannot normally be dumped and loaded easily, such as (possibly re- entrant or circular) structures containing user datatypes, arrays, hash tables, as well as list structures. </span>HPRINT <span class="p">will correctly print and read back in any structure containing any or all of the above, chasing all pointers down to the level of literal atoms, numbers or strings. </span>HPRINT <span class="p">currently cannot handle compiled code arrays, stack positions, or arbitrary unboxed numbers.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">HPRINT <span class="p">operates by simulating the Interlisp </span>PRINT <span class="p">routine for normal list structures. When it encounters a user datatype (see Chapter 8), or an array or hash array, it prints the data contained therein, surrounded by special characters defined as read macro characters. While chasing the pointers of a structure, it also keeps a hash table of those items it encounters, and if any item is encountered a second time, another read macro character is inserted before the first occurrence (by resetting the file pointer with </span>SETFILEPTR<span class="p">) and all subsequent occurrences are printed as a back reference using an appropriate macro character. Thus the inverse function, </span>HREAD <span class="p">merely calls the Interlisp </span>READ <span class="p">routine with the appropriate read table.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>HPRINT </b><i>EXPR FILE UNCIRCULAR DATATYPESEEN</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Prints <span class="s16">EXPR </span>on <span class="s16">FILE</span>. If <span class="s16">UNCIRCULAR </span>is non-<span class="s11">NIL</span>, <span class="s11">HPRINT </span>does no checking for any circularities in <span class="s16">EXPR </span>(but is still useful for dumping arbitrary structures of arrays, hash arrays, lists, user data types, etc., that do not contain circularities). Specifying <span class="s16">UNCIRCULAR </span>as non-<span class="s11">NIL </span>results in a large speed and internal-storage advantage.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Normally, when <span class="s11">HPRINT </span>encounters a user data type for the first time, it outputs a summary of the data type’s declaration. When this is read in, the data type is redeclared. If <span class="s16">DATATYPESEEN </span>is non-<span class="s11">NIL</span>, <span class="s11">HPRINT </span>assumes that the same data type declarations will be in force at read time as were at <span class="s11">HPRINT </span>time, and not output declarations.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">HPRINT </span>is intended primarily for output to random access files, since the algorithm depends on being able to reset the file pointer. If <span class="s16">FILE </span>is not a random access file (and <span class="s16">UNCIRCULAR </span><span class="s11">= NIL</span>), a temporary file, <span class="s11">HPRINT.SCRATCH</span>, is opened, <span class="s16">EXPR </span>is <span class="s11">HPRINT</span>ed on it, and then that file is copied to the final output file and the temporary file is deleted.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">You can not use <span class="s11">HPRINT </span>to save things that contains pointers to raw storage. Fontdescriptors contain pointers to raw storage and windows contain pointers to fontdescriptors. Netiher can therefor be saved with <span class="s11">HPRINT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>HREAD </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Reads and returns an <span class="s11">HPRINT</span>-ed expression from <span class="s16">FILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>HCOPYALL </b><i>X</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Copies data structure <span class="s16">X</span>. <span class="s16">X </span>may contain circular pointers as well as arbitrary structures.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Note: <span class="s11">HORRIBLEVARS </span>and <span class="s11">UGLYVARS </span>(Chapter 17) are two file package commands for dumping and reloading circular and re-entrant data structures. They provide a convenient interface to <span class="s11">HPRINT </span>and <span class="s11">HREAD</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">When <span class="s11">HPRINT </span>is dumping a data structure that contains an instance of an Interlisp datatype, the datatype declaration is also printed onto the file. Reading such a data structure with <span class="s11">HREAD </span>can cause problems if it redefines a system datatype. Redefining a system datatype will almost definitely cause serious errors. The Interlisp system datatypes do not change very often, but there is always a possibility when loading in old files created under an old Interlisp release.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">To prevent accidental system crashes, <span class="s11">HREAD </span>will <i>not </i>redefine datatypes. Instead, it will cause an error &quot;<span class="s11">attempt to read DATATYPE with different field</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">specification than currently defined<span class="p">&quot;. Continuing from this error will redefine the datatype.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Random Access File Operations                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For most applications, files are read starting at their beginning and proceeding sequentially, i.e., the next character read is the one immediately following the last character read. Similarly, files are written sequentially. However, for files on some devices, it is also possible to read / write characters at arbitrary positions in a file, essentially treating the file as a large block of auxiliary storage. For example, one application might involve writing an expression at the <i>beginning </i>of the file, and then reading an expression from a specified point in its <i>middle</i>. This particular example requires the file be open for <i>both </i>input and output. However, random file input or output can also be performed on files that have been opened for only input or only output.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Associated with each file is a &quot;file pointer&quot; that points to the location where the next character is to be read from or written to. The file position of a byte is the number of bytes that precede it in the file, i.e., 0 is the position of the beginning of the file. The file pointer to a file is automatically advanced after each input or output operation. This section describes functions which can be used to <i>reposition </i>the file pointer on those files that can be randomly accessed. A file used in this fashion is much like an array in that it has a certain number of addressable locations that characters can be put into or taken from. However, unlike arrays, files can be enlarged. For example, if the file pointer is positioned at the end of a file and anything is written, the file &quot;grows.&quot; It is also possible to position the file pointer <i>beyond </i>the end of file and then to write. (If the program attempts to <i>read </i>beyond the end of file, an <span class="s11">END OF FILE </span>error occurs.) In this case, the file is enlarged, and a &quot;hole&quot; is created, which can later be written into. Note that this enlargement only takes place at the <i>end </i>of a file; it is not possible to make more room in the middle of a file. In other words, if expression <span class="s11">A </span>begins at position 1000, and expression <span class="s11">B </span>at 1100, and the program attempts to overwrite <span class="s11">A </span>with expression <span class="s11">C</span>, whose printed representation is 200 bytes long, part of <span class="s11">B </span>will be altered.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Warning: File positions are always in terms of bytes, not characters. You should thus be very careful about computing the space needed for an expression. In particular, NS characters may take multiple bytes (see below). Also, the end-of-line character (see Chapter 24) may be represented by a different number of characters in different implementations. Output functions may also introduce end-of-line’s as a result of <span class="s11">LINELENGTH </span>considerations. Therefore <span class="s11">NCHARS </span>(see Chapter 2) does <i>not </i>specify how many bytes an expression takes to print, even ignoring line length considerations.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>GETFILEPTR </b><i>FILE</i>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the current position of the file pointer for <span class="s16">FILE</span>, i.e., the byte address at which the next input / output operation will commence.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SETFILEPTR </b><i>FILE ADR</i>)                                          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Sets the file pointer for <span class="s16">FILE </span>to the position <span class="s16">ADR</span>; returns <span class="s16">ADR</span>. The special value <span class="s16">ADR</span><span class="s11">=-1</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">is interpreted to mean the address of the end of file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 150pt;text-indent: -36pt;line-height: 93%;text-align: left;"><span class="p">Note: If a file is opened for output only, the end of file is initially zero, even if an old file by the same name had existed (see </span>OPENSTREAM<span class="p">, Chapter 24).  If a file is opened for both input and output, the initial file pointer is the beginning of the file, but </span>(SETFILEPTR <i>FILE </i>-1) <span class="p">sets it to the end of the file.  If the file had been opened in append mode by </span>(OPENSTREAM <i>FILE </i>’APPEND)<span class="p">, the file pointer right after opening would be set to the end of the existing file, in which case a </span>SETFILEPTR <span class="p">to position the file at the end would be unnecessary.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>GETEOFPTR </b><i>FILE</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">Returns the byte address of the end of file, i.e., the number of bytes in the file. Equivalent to performing </span>(SETFILEPTR <i>FILE </i>-1) <span class="p">and returning </span>(GETFILEPTR <i>FILE</i>) <span class="p">except that it does not change the current file pointer.</span></p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>RANDACCESSP </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">FILE </span>if <span class="s16">FILE </span>is randomly accessible, <span class="s11">NIL </span>otherwise. The file <span class="s11">T </span>is not randomly accessible, nor are certain network file connections in Interlisp-D. <span class="s16">FILE </span>must be open or an error is generated, <span class="s11">FILE NOT OPEN</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>COPYBYTES </b><i>SRCFIL DSTFIL START END</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Copies bytes from <span class="s16">SRCFIL </span>to <span class="s16">DSTFIL</span>, starting from position <span class="s16">START </span>and up to but not including position <span class="s16">END</span>. Both <span class="s16">SRCFIL </span>and <span class="s16">DSTFIL </span>must be open. Returns <span class="s11">T</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">END</span><span class="s11">=NIL</span>, <span class="s16">START </span>is interpreted as the number of bytes to copy (starting at the current position). If <span class="s16">START </span>is also <span class="s11">NIL</span>, bytes are copied until the end of the file is reached.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Warning: <span class="s11">COPYBYTES </span>does not take any account of multi-byte NS characters (see Chapter 2).  <span class="s11">COPYCHARS </span>(below) should be used whenever copying information that might include NS characters.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>COPYCHARS </b><i>SRCFIL DSTFIL START END</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">COPYBYTES </span>except that it copies NS characters (see Chapter 2), and performs the proper conversion if the end-of-line conventions of <span class="s16">SRCFIL </span>and <span class="s16">DSTFIL </span>are not the same (see Chapter 24). <span class="s16">START </span>and <span class="s16">END </span>are interpreted the same as with <span class="s11">COPYBYTES</span>, i.e., as byte (not character) specifications in <span class="s16">SRCFIL</span>. The number of bytes actually output to <span class="s16">DSTFIL </span>might be more or less than the number of bytes specified by <span class="s16">START </span>and <span class="s16">END</span>, depending on what the end-of-line conventions are. In the case where the end-of-line conventions happen to be the same, <span class="s11">COPYCHARS </span>simply calls <span class="s11">COPYBYTES</span>.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FILEPOS </b><i>STR FILE START END SKIP TAIL CASEARRAY</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Analogous to <span class="s11">STRPOS </span>(see Chapter 4), but searches a file rather than a string. <span class="s11">FILEPOS </span>searches <span class="s16">FILE </span>for the string <span class="s16">STR</span>. Search begins at <span class="s16">START </span>(or the current position of the file pointer, if <span class="s16">START</span><span class="s11">=NIL</span>), and goes to <span class="s16">END </span>(or the end of <span class="s16">FILE</span>, if <span class="s16">END</span><span class="s11">=NIL</span>). Returns the address of the start of the match, or <span class="s11">NIL </span>if not found.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">SKIP </span>can be used to specify a character which matches any character in the file. If <span class="s16">TAIL </span>is <span class="s11">T</span>, and the search is successful, the value is the address of the first character <i>after </i>the sequence of characters corresponding to <span class="s16">STR</span>, instead of the starting address of the sequence. In either case, the file is left so that the next i / o operation begins at the address returned as the value of <span class="s11">FILEPOS</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">CASEARRAY </span>should be a &quot;case array&quot; that specifies that certain characters should be transformed to other characters before matching. Case arrays are returned by <span class="s11">CASEARRAY </span>or <span class="s11">SEPRCASE </span>below. <span class="s16">CASEARRAY</span><span class="s11">=NIL </span>means no transformation will be performed.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A case array is an implementation-dependent object that is logically an array of character codes with one entry for each possible character. <span class="s11">FILEPOS </span>maps each character in the file &quot;through&quot; <span class="s16">CASEARRAY </span>in the sense that each character code is transformed into the corresponding character code from <span class="s16">CASEARRAY </span>before matching. Thus if two characters map into the same value, they are treated as equivalent by <span class="s11">FILEPOS</span>. <span class="s11">CASEARRAY </span>and <span class="s11">SETCASEARRAY </span>provide an implementation-independent interface to case arrays.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For example, to search without regard to upper and lower case differences, <span class="s16">CASEARRAY </span>would be a case array where all characters map to themselves, except for lower case characters, whose corresponding elements would be the upper case characters. To search for a delimited atom, one could use &quot; <span class="s16">ATOM </span>&quot; as the pattern, and specify a case array in which all of the break and separator characters mapped into the same code as space.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">For applications calling for extensive file searches, the function <span class="s11">FFILEPOS </span>is often faster than</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FILEPOS<span class="p">.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FFILEPOS </b><i>PATTERN FILE START END SKIP TAIL CASEARRAY</i>)          <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Like <span class="s11">FILEPOS</span>, except much faster in most applications. <span class="s11">FFILEPOS </span>is an implementation of the Boyer-Moore fast string searching algorithm. This algorithm preprocesses the string being searched for and then scans through the file in steps usually equal to the length of the string. Thus, <span class="s11">FFILEPOS </span>speeds up roughly in proportion to the length of the string, e.g., a string of length 10 will be found twice as fast as a string of length 5 in the same position.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Because of certain fixed overheads, it is generally better to use <span class="s11">FILEPOS </span>for short searches or short strings.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>CASEARRAY </b><i>OLDARRAY</i>)                                           <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Creates and returns a new case array, with all elements set to themselves, to indicate the identity mapping.  If <span class="s16">OLDARRAY </span>is given, it is reused.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SETCASEARRAY </b><i>CASEARRAY FROMCODE TOCODE</i>)                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Modifies the case array <span class="s16">CASEARRAY </span>so that character code <span class="s16">FROMCODE </span>is mapped to character code <span class="s16">TOCODE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>GETCASEARRAY </b><i>CASEARRAY FROMCODE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the character code that <span class="s16">FROMCODE </span>is mapped to in <span class="s16">CASEARRAY</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>SEPRCASE </b><i>CLFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns a new case array suitable for use by <span class="s11">FILEPOS </span>or <span class="s11">FFILEPOS </span>in which all of the break / separators of <span class="s11">FILERDTBL </span>are mapped into character code zero. If <span class="s16">CLFLG </span>is non- <span class="s11">NIL</span>, then all CLISP characters are mapped into this character as well. This is useful for finding a delimited atom in a file. For example, if <span class="s16">PATTERN </span>is <span class="s11">&quot; FOO &quot;</span>, and <span class="s11">(SEPRCASE T) </span>is used for <span class="s16">CASEARRAY</span>, then <span class="s11">FILEPOS </span>will find <span class="s11">&quot;(FOO_&quot;</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">UPPERCASEARRAY <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Value is a case array in which every lowercase character is mapped into the corresponding uppercase character. Useful for searching text files.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Input/Output Operations with Characters and Bytes                                                                            </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Interlisp-D supports the 16-bit NS character set (see Chapter 2). All of the standard string and print name functions accept litatoms and strings containing NS characters. In almost all cases, a program does not have to distinguish between NS characters or 8-bit characters. The exception to this rule is the handling of input / output operations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Interlisp-D uses two ways of writing 16-bit NS characters on files. One way is to write the full 16-bits (two bytes) every time a character is output.  The other way is to use &quot;run-encoding.&quot;  Each 16 NS character can be decoded into a character set (an integer from 0 to 254 inclusive) and a character number (also an integer from 0 to 254 inclusive). In run-encoding, the byte 255 (illegal as either a character set number or a character number) is used to signal a change to a given character set, and the following bytes are all assumed to come from the same character set (until the next change- character set sequence). Run-encoding can reduce the number of bytes required to encode a string of NS characters, as long as there are long sequences of characters from the same character set (usually the case).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note that characters are not the same as bytes. <span class="p">A single character can take anywhere from one to four bytes bytes, depending on whether it is in the same character set as the preceeding character, and whether run-encoding is enabled. Programs which assume that characters are equal to bytes must be changed to work with NS characters.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The functions <span class="s11">BIN </span>and <span class="s11">BOUT </span>(see above) should only be used to read and write single eight-bit bytes. The functions <span class="s11">READCCODE </span>and <span class="s11">PRINTCCODE </span>(see above) should be used to read and write single character codes, interpreting run-encoded NS characters. <span class="s11">COPYBYTES </span>should only be used to copy blocks of 8-bit data; <span class="s11">COPYCHARS </span>should be used to copy characters. Most I / O functions (<span class="s11">READC</span>, <span class="s11">PRIN1</span>, etc.) read or write 16-bit NS characters.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The use of NS characters has serious consequences for any program that uses file pointers to access a file in a random access manner. At any point when a file is being read or written, it has a &quot;current character set.&quot; If the file pointer is changed with <span class="s11">SETFILEPTR </span>to a part of the file with a different character set, any characters read or written may have the wrong character set. The current character set can be accessed with the following function:</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>CHARSET </b><i>STREAM CHARACTERSET</i>)                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the current character set of the stream <span class="s16">STREAM</span>. If <span class="s16">CHARACTERSET </span>is non-<span class="s11">NIL</span>, the current character set for <span class="s16">STREAM </span>is set. Note that for output streams this may cause bytes to be written to the stream.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s16">CHARACTERSET </span>is <span class="s11">T</span>, run encoding for <span class="s16">STREAM </span>is disabled: both the character set and the character number (two bytes total) will be written to the stream for each character printed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">PRINTOUT                                                                                                                                                  </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Interlisp provides many facilities for controlling the format of printed output. By executing various sequences of <span class="s11">PRIN1</span>, <span class="s11">PRIN2</span>, <span class="s11">TAB</span>, <span class="s11">TERPRI</span>, <span class="s11">SPACES</span>, <span class="s11">PRINTNUM</span>, and <span class="s11">PRINTDEF</span>, almost any effect can be achieved. <span class="s11">PRINTOUT </span>implements a compact language for specifying complicated sequences of these elementary printing functions. It makes fancy output formats easy to design and simple to program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">PRINTOUT <span class="p">is a CLISP word (like </span>FOR <span class="p">and </span>IF<span class="p">) for interpreting a special printing language in which you can describe the kinds of printing desired. The description is translated by </span>DWIMIFY <span class="p">to the appropriate sequence of </span>PRIN1<span class="p">, </span>TAB<span class="p">, etc., before it is evaluated or compiled. </span>PRINTOUT <span class="p">printing descriptions have the following general form:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 161pt;text-indent: 0pt;text-align: left;">(PRINTOUT <i>STREAM PRINTCOM</i><i>1 </i>... <i>PRINTCOM</i><i>N</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="s16">STREAM </span>is evaluated to obtain the stream to which the output from this specification is directed. The <span class="s11">PRINTOUT </span>commands are strung together, one after the other without punctuation, after <span class="s16">STREAM</span>. Some commands occupy a single position in this list, but many commands expect to find arguments following the command name in the list. The commands fall into several logical groups: one set deals with horizontal and vertical spacing, another group provides controls for certain formatting capabilities (font changes and subscripting), while a third set is concerned with various ways of actually printing items. Finally, there is a command that permits escaping to a simple Lisp evaluation in the middle of a <span class="s11">PRINTOUT </span>form. The various commands are described below. The following examples give a general flavor of how <span class="s11">PRINTOUT </span>is used:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><b>Example 1</b>: Suppose you want to print out on the terminal the values of three variables, <span class="s11">X</span>, <span class="s11">Y</span>, and <span class="s11">Z</span>, separated by spaces and followed by a carriage return. This could be done by:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">(PRIN1 X T)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 108%;text-align: left;">(SPACES 1 T) (PRIN1 Y T) (SPACES 1 T) (PRIN1 Z T) (TERPRI T)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">or by the more concise <span class="s11">PRINTOUT </span>form:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(PRINTOUT T X , Y , Z T)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Here the first <span class="s11">T </span>specifies output to the terminal, the commas cause single spaces to be printed, and the final <span class="s11">T </span>specifies a <span class="s11">TERPRI</span>. The variable names are not recognized as special <span class="s11">PRINTOUT </span>commands, so they are printed using <span class="s11">PRIN1 </span>by default.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;"><b>Example 2</b>: Suppose the values of <span class="s11">X </span>and <span class="s11">Y </span>are to be pretty-printed lined up at position 10, preceded by identifying strings. If the output is to go to the primary output stream, you could write either:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(PRIN1 &quot;X =&quot;)</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 108%;text-align: left;">(PRINTDEF X 10 T) (TERPRI )</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 108%;text-align: left;">(PRIN1 &quot;Y =&quot;) (PRINTDEF Y 10 T) (TERPRI)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">or the equivalent:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(PRINTOUT NIL &quot;X =&quot; 10 .PPV X T</p><p class="s11" style="padding-left: 130pt;text-indent: 0pt;text-align: left;">&quot;Y =&quot; 10 .PPV Y T)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Since strings are not recognized as special commands, <span class="s11">&quot;X =&quot; </span>is also printed with <span class="s11">PRIN1 </span>by default. The positive integer means <span class="s11">TAB </span>to position 10, where the <span class="s11">.PPV </span>command causes the value of <span class="s11">X </span>to be prettyprinted as a variable. By convention, special atoms used as <span class="s11">PRINTOUT </span>commands are prefixed with a period. The <span class="s11">T </span>causes a carriage return, so the <span class="s11">Y </span>information is printed on the next line.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><b>Example 3</b>. As a final example, suppose that the value of <span class="s11">X </span>is an integer and the value of <span class="s11">Y </span>is a floating-point number. <span class="s11">X </span>is to be printed right-flushed in a field of width 5 beginning at position 15, and <span class="s11">Y </span>is to be printed in a field of width 10 also starting at position 15 with 2 places to the right of the decimal point. Furthermore, suppose that the variable names are to appear in the font class named <span class="s11">BOLDFONT </span>and the values in font class <span class="s11">SMALLFONT</span>. The program in ordinary Interlisp that would accomplish these effects is too complicated to include here. With <span class="s11">PRINTOUT</span>, one could write:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(PRINTOUT NIL</p><p class="s11" style="padding-left: 130pt;text-indent: 0pt;text-align: left;">.FONT BOLDFONT &quot;X =&quot; 15</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 178pt;text-indent: 0pt;text-align: left;">.FONT SMALLFONT .I5 X T</p><p class="s11" style="padding-left: 178pt;text-indent: 0pt;text-align: left;">.FONT BOLDFONT &quot;Y =&quot; 15</p><p class="s11" style="padding-left: 178pt;text-indent: 0pt;text-align: left;">.FONT SMALLFONT .F10.2 Y T</p><p class="s11" style="padding-left: 178pt;text-indent: 0pt;text-align: left;">.FONT BOLDFONT)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The <span class="s11">.FONT </span>commands do whatever is necessary to change the font on a multi-font output device. The</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">.I5 <span class="p">command sets up a </span>FIX <span class="p">format for a call to the function </span>PRINTNUM <span class="p">(see above) to print </span>X <span class="p">in the desired format. The </span>.F10.2 <span class="p">specifies a </span>FLOAT <span class="p">format for </span>PRINTNUM<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Horizontal Spacing Commands</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The horizontal spacing commands provide convenient ways of calling <span class="s11">TAB </span>and <span class="s11">SPACES</span>. In the following descriptions, <i>N </i>stands for a literal positive integer (<i>not </i>for a variable or expression whose value is an integer).</p><p class="s11" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: left;"><b>N </b>(<i>N </i>a number) <span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Used for absolute spacing. It results in a <span class="s11">TAB </span>to position <i>N </i>(literally, a <span class="s11">(TAB </span><span class="s16">N</span><span class="s11">)</span>). If the line is currently at position <i>N </i>or beyond, the file will be positioned at position <span class="s16">N </span>on the next line.</p><p class="s15" style="padding-top: 10pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">.TAB <i>POS </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Specifies <span class="s11">TAB </span>to position (the value of) <span class="s16">POS</span>. This is one of several commands whose effect could be achieved by simply escaping to Lisp, and executing the corresponding form. It is provided as a separate command so that the <span class="s11">PRINTOUT </span>form is more concise and is prettyprinted more compactly. Note that <span class="s11">.TAB </span><i>N </i>and <i>N</i>, where <i>N </i>is an integer, are equivalent.</p><p class="s15" style="padding-top: 10pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">.TAB0 <i>POS </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Like <span class="s11">.TAB </span>except that it can result in zero spaces (i.e. the call to <span class="s11">TAB </span>specifies</p><p class="s16" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">MINSPACES<span class="s11">=</span><span class="p">0).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 102pt;text-indent: 0pt;text-align: left;"><b>-N </b>(<i>N </i>a number) <span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Negative integers indicate relative (as opposed to absolute) spacing. Translates as</p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s11">(SPACES </span>|<span class="s16">N</span>|<span class="s11">)</span>.</p><p class="s6" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">,                                                                                                      <span class="p">[PRINTOUT Command]</span></p><p class="s6" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">,,                                                                                                     <span class="p">[PRINTOUT Command]</span></p><p class="s6" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">,,,                                                                                                    <span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 3pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(1, 2 or 3 commas) Provides a short-hand way of specifying 1, 2 or 3 spaces, i.e., these</p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">commands are equivalent to <span class="s11">-1</span>, <span class="s11">-2</span>, and <span class="s11">-3</span>, respectively.</p><p class="s15" style="padding-top: 9pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">.SP <i>DISTANCE </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Translates as <span class="s11">(SPACES </span><span class="s16">DISTANCE</span><span class="s11">)</span>. Note that <span class="s11">.SP </span><span class="s16">N </span>and <span class="s11">-</span><span class="s16">N</span>, where <span class="s16">N </span>is an integer, are equivalent.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Vertical Spacing Commands</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Vertical spacing is obtained by calling <span class="s11">TERPRI </span>or printing form-feeds. The relevant commands are:</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">T <span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Translates as <span class="s11">(TERPRI)</span>, i.e., move to position 0 (the first column) of the next line. To print the letter <span class="s11">T</span>, use the string <span class="s11">&quot;T&quot;</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.SKIP <i>LINES </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Equivalent to a sequence of <span class="s16">LINES </span><span class="s11">(TERPRI)</span>’s. The <span class="s11">.SKIP </span>command allows for skipping large constant distances and for computing the distance to be skipped.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.PAGE <span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Puts a form-feed (Control-L) out on the file. Care is taken to make sure that Interlisp’s view of the current line position is correctly updated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Special Formatting Controls</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">There are a small number of commands for invoking some of the formatting capabilities of multi-font output devices. The available commands are:</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.FONT <i>FONTSPEC </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Changes printing to the font <span class="s16">FONTSPEC</span>, which can be a font descriptor, a &quot;font list&quot; such as <span class="s11">’(MODERN 10)</span>, an image stream (coerced to its current font), or a windows (coerced to the current font of its display stream). The <span class="s11">DSPFONT </span>is changed permanently. See fonts (Chapter 27) for more information.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">FONTSPEC </span>may also be a positive integer <span class="s16">N</span>, which is taken as an abbreviated reference to the font class named <span class="s11">FONT</span><i>N </i>(e.g. 1 =&gt; <span class="s11">FONT1</span>).</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.SUP <span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Specifies superscripting. All subsequent characters are printed above the base of the current line. Note that this is absolute, not relative: a <span class="s11">.SUP </span>following a <span class="s11">.SUP </span>is a no-op.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.SUB <span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Specifies subscripting. Subsequent printing is below the base of the current line. As with superscripting, the effect is absolute.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.BASE <span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Moves printing back to the base of the current line. Un-does a previous <span class="s11">.SUP </span>or <span class="s11">.SUB</span>; a no-op, if printing is currently at the base.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Printing Specifications</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The value of any expression in a <span class="s11">PRINTOUT </span>form that is not recognized as a command itself or as a command argument is printed using <span class="s11">PRIN1 </span>by default. For example, title strings can be printed by simply including the string as a separate <span class="s11">PRINTOUT </span>command, and the values of variables and forms can be printed in much the same way. Note that a literal integer, say 51, cannot be printed by including it as a command, since it would be interpreted as a <span class="s11">TAB</span>; the desired effect can be obtained by using instead the string specification &quot;51&quot;, or the form <span class="s11">(QUOTE 51)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">For those instances when <span class="s11">PRIN1 </span>is not appropriate, e.g., <span class="s11">PRIN2 </span>is required, or a list structures must be prettyprinted, the following commands are available:</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">.P2 <i>THING                                            </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Causes <span class="s16">THING </span>to be printed using <span class="s11">PRIN2</span>; translates as <span class="s11">(PRIN2 </span><span class="s16">THING</span><span class="s11">)</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">.PPF <i>THING                                           </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Causes <span class="s16">THING </span>to be prettyprinted at the current line position via <span class="s11">PRINTDEF </span>(see Chapter 26). The call to <span class="s11">PRINTDEF </span>specifies that <span class="s16">THING </span>is to be printed as if it were part of a function definition.  That is, <span class="s11">SELECTQ</span>, <span class="s11">PROG</span>, etc., receive special treatment.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">.PPV <i>THING                                           </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Prettyprints <span class="s16">THING </span>as a variable; no special interpretation is given to <span class="s11">SELECTQ</span>, <span class="s11">PROG</span>, etc.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">.PPFTL <i>THING                                         </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Like <span class="s11">.PPF</span>, but prettyprints <span class="s16">THING </span>as a <i>tail</i>, that is, without the initial and final parentheses if it is a list. Useful for prettyprinting sub-lists of a list whose other elements are formatted with other commands.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">.PPVTL <i>THING                                         </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Like <span class="s11">.PPV</span>, but prettyprints <span class="s16">THING </span>as a tail.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Paragraph Format</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Interlisp’s prettyprint routines are designed to display the structure of expressions, but they are not really suitable for formatting unstructured text. If a list is to be printed as a textual paragraph, its internal structure is less important than controlling its left and right margins, and the indentation of its first line. The <span class="s11">.PARA </span>and <span class="s11">.PARA2 </span>commands allow these parameters to be conveniently specified.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">.PARA <i>LMARG RMARG LIST                              </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Prints <span class="s16">LIST </span>in paragraph format, using <span class="s11">PRIN1</span>. Translates as <span class="s11">(PRINTPARA </span><span class="s16">LMARG RMARG LIST</span><span class="s11">) </span>(see below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">Example: <span class="s11">(PRINTOUT T 10 .PARA 5 -5 LST) </span>will print the elements of <span class="s11">LST </span>as a paragraph with left margin at 5, right margin at <span class="s11">(LINELENGTH)</span>-5, and the first line indented to 10.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">.PARA2 <i>LMARG RMARG LIST </i><span class="p">[PRINTOUT Command]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">Print as paragraph using </span>PRIN2 <span class="p">instead of </span>PRIN1<span class="p">. Translates as </span>(PRINTPARA <i>LMARG RMARG LIST </i>T)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Right-Flushing</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Two commands are provided for printing simple expressions flushed-right against a specified line position, using the function <span class="s11">FLUSHRIGHT </span>(see below). They take into account the current position, the number of characters in the print-name of the expression, and the position the expression is to be flush against, and then print the appropriate number of spaces to achieve the desired effect. Note that this might entail going to a new line before printing. Note also that right-flushing of expressions longer than a line (e.g. a large list) makes little sense, and the appearance of the output is not guaranteed.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.FR <i>POS EXPR </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Flush-right using <span class="s11">PRIN1</span>. The value of <span class="s16">POS </span>determines the position that the right end of <span class="s16">EXPR </span>will line up at. As with the horizontal spacing commands, a negative position number means |<span class="s16">POS</span>| columns from the current position, a positive number specifies the position absolutely. <span class="s16">POS</span><span class="s11">=</span>0 specifies the right-margin, i.e. is interpreted as <span class="s11">(LINELENGTH)</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.FR2 <i>POS EXPR </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Flush-right using <span class="s11">PRIN2 </span>instead of <span class="s11">PRIN1</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Centering</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Commands for centering simple expressions between the current line position and another specified position are also available.  As with right flushing, centering of large expressions is not guaranteed.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.CENTER <i>POS EXPR </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Centers <span class="s16">EXPR </span>between the current line position and the position specified by the value of <span class="s16">POS</span>. A positive <span class="s16">POS </span>is an absolute position number, a negative <span class="s16">POS </span>specifies a position relative to the current position, and 0 indicates the right-margin. Uses <span class="s11">PRIN1 </span>for printing.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.CENTER2 <i>POS EXPR </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Centers using <span class="s11">PRIN2 </span>instead of <span class="s11">PRIN1</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Numbering</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following commands provide FORTRAN-like formatting capabilities for integer and floating- point numbers. Each command specifies a printing format and a number to be printed. The format specification translates into a format-list for the function <span class="s11">PRINTNUM</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">.I<i>FORMAT NUMBER                                      </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Specifies integer printing. Translates as a call to the function <span class="s11">PRINTNUM </span>with a <span class="s11">FIX </span>format-list constructed from <span class="s16">FORMAT</span>. The atomic format is broken apart at internal periods to form the format-list. For example, <span class="s11">.I5.8.T </span>yields the format-list <span class="s11">(FIX 5 8 T)</span>, and the command sequence <span class="s11">(PRINTOUT T .I5.8.T FOO) </span>translates as <span class="s11">(PRINTNUM ’(FIX 5 8 T) FOO)</span>. This expression causes the value of <span class="s11">FOO </span>to be printed in radix 8 right-flushed in a field of width 5, with 0’s used for padding on the left. Internal <span class="s11">NIL</span>’s in the format specification may be omitted, e.g., the commands <span class="s11">.I5</span><b>..</b><span class="s11">T </span>and</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">.I5.NIL.T <span class="p">are equivalent.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The format specification <span class="s11">.I1 </span>is often useful for forcing a number to be printed in radix 10 (but not otherwise specially formatted), independent of the current setting of <span class="s11">RADIX</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">.F <i>FORMAT NUMBER                                     </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Specifies floating-number printing. Like the <span class="s11">.I </span>format command, except translates with a</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">FLOAT <span class="p">format-list.</span></p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">.N <i>FORMAT NUMBER                                    </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The <span class="s11">.I </span>and <span class="s11">.F </span>commands specify calls to <span class="s11">PRINTNUM </span>with quoted format specifications. The <span class="s11">.N </span>command translates as <span class="s11">(PRINTNUM </span><span class="s16">FORMAT NUMBER</span><span class="s11">)</span>, i.e., it permits the format to be the value of some expression. Note that, unlike the <span class="s11">.I </span>and <span class="s11">.F </span>commands, <span class="s16">FORMAT </span>is a separate element in the command list, not part of an atom beginning with <span class="s11">.N</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Escaping to Lisp</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">There are many reasons for taking control away from <span class="s11">PRINTOUT </span>in the middle of a long printing expression. Common situations involve temporary changes to system printing parameters (e.g. <span class="s11">LINELENGTH</span>), conditional printing (e.g. print <span class="s11">FOO </span>only if <span class="s11">FIE </span>is <span class="s11">T</span>), or lower-level iterative printing within a higher-level print specification.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"># <i>FORM                                               </i><span class="p">[PRINTOUT Command]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The escape command. <span class="s16">FORM </span>is an arbitrary Lisp expression that is evaluated within the context established by the <span class="s11">PRINTOUT </span>form, i.e., <span class="s16">FORM </span>can assume that the primary output stream has been set to be the <span class="s16">FILE </span>argument to <span class="s11">PRINTOUT</span>. Note that nothing is done with the <i>value </i>of <span class="s16">FORM</span>; any printing desired is accomplished by <span class="s16">FORM </span>itself, and the value is discarded.</p><p style="padding-top: 9pt;padding-left: 162pt;text-indent: -36pt;text-align: left;">Note: Although <span class="s11">PRINTOUT </span>logically encloses its translation in a <span class="s11">RESETFORM </span>(Chapter 14) to change the primary output file to the <span class="s16">FILE </span>argument (if non-<span class="s11">NIL</span>), in most</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: left;">cases it can actually pass <span class="s16">FILE </span>(or a locally bound variable if <span class="s16">FILE </span>is a non- trivial expression) to each printing function. Thus, the <span class="s11">RESETFORM </span>is only generated when the <span class="s11"># </span>command is used, or user-defined commands (below) are used. If many such occur in repeated <span class="s11">PRINTOUT </span>forms, it may be more efficient to embed them all in a single <span class="s11">RESETFORM </span>which changes the primary output file, and then specify <span class="s16">FILE</span><span class="s11">=NIL </span>in the <span class="s11">PRINTOUT </span>expressions themselves.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">User-Defined Commands</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The collection of commands and options outlined above is aimed at fulfilling all common printing needs. However, certain applications might have other, more specialized printing idioms, so a facility is provided whereby you can define new commands. This is done by adding entries to the global list <span class="s11">PRINTOUTMACROS </span>to define how the new commands are to be translated.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">PRINTOUTMACROS <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s11">PRINTOUTMACROS </span>is an association-list whose elements are of the form <b>(</b><span class="s16">COMM FN</span><span class="s11">)</span>. Whenever <span class="s16">COMM </span>appears in command position in the sequence of <span class="s11">PRINTOUT </span>commands (as opposed to an argument position of another command), <i>FN </i>is applied to the tail of the command-list (including the command).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">After inspecting as much of the tail as necessary, the function must return a list whose <span class="s11">CAR </span>is the translation of the user-defined command and its arguments, and whose <span class="s11">CDR </span>is the list of commands still remaining to be translated in the normal way.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, suppose you want to define a command &quot;<span class="s11">?</span>&quot;, which will cause its single argument to be printed with <span class="s11">PRIN1 </span>only if it is not <span class="s11">NIL</span>. This can be done by entering <span class="s11">(?</span></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">?TRAN) <span class="p">on </span>PRINTOUTMACROS<span class="p">, and defining the function </span>?TRAN <span class="p">as follows:</span></p><p class="s11" style="padding-top: 7pt;padding-left: 166pt;text-indent: -16pt;line-height: 108%;text-align: left;">(DEFINEQ (?TRAN (COMS) (CONS</p><p class="s11" style="padding-left: 198pt;text-indent: -16pt;line-height: 108%;text-align: left;">(SUBST (CADR COMS) ’ARG ’(PROG ((TEMP ARG))</p><p class="s11" style="padding-left: 182pt;text-indent: 43pt;line-height: 108%;text-align: left;">(COND (TEMP (PRIN1 TEMP))))) (CDDR COMS))]</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Note that <span class="s11">?TRAN </span>does not do any printing itself; it returns a form which, when evaluated in the proper context, will perform the desired action. This form should direct all printing to the primary output file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Special Printing Functions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The paragraph printing commands are translated into calls on the function <span class="s11">PRINTPARA</span>, which may also be called directly:</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>PRINTPARA </b><i>LMARG RMARG LIST P2FLAG PARENFLAG FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Prints <span class="s16">LIST </span>on <span class="s16">FILE </span>in line-filled paragraph format with its first element beginning at the current line position and ending at or before <span class="s16">RMARG</span>, and with subsequent lines appearing</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">between <span class="s16">LMARG </span>and <span class="s16">RMARG</span>. If <span class="s16">P2FLAG </span>is non-<span class="s11">NIL</span>, prints elements using <span class="s11">PRIN2</span>, otherwise <span class="s11">PRIN1</span>. If <span class="s16">PARENFLAG </span>is non-<span class="s11">NIL</span>, then parentheses will be printed around the elements of <span class="s16">LIST</span>.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">LMARG </span>is zero or positive, it is interpreted as an absolute column position. If it is negative, then the left margin will be at |<span class="s16">LMARG</span>|+ <span class="s11">(POSITION)</span>. If <span class="s16">LMARG</span><span class="s11">=NIL</span>, the left margin will be at <span class="s11">(POSITION)</span>, and the paragraph will appear in block format.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">RMARG </span>is positive, it also is an absolute column position (which may be greater than the current <span class="s11">(LINELENGTH)</span>). Otherwise, it is interpreted as relative to <span class="s11">(LINELENGTH)</span>, i.e., the right margin will be at <span class="s11">(LINELENGTH)</span>+| <span class="s16">RMARG</span>|. Example: <span class="s11">(TAB 10) (PRINTPARA 5 -5 LST T) </span>will <span class="s11">PRIN2 </span>the elements of <span class="s11">LST </span>in a paragraph with the first line beginning at column 10, subsequent lines beginning at column 5, and all lines ending at or before <span class="s11">(LINELENGTH)-5</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The current <span class="s11">(LINELENGTH) </span>is unaffected by <span class="s11">PRINTPARA</span>, and upon completion, <span class="s16">FILE </span>will be positioned immediately after the last character of the last item of <span class="s16">LIST</span>. <span class="s11">PRINTPARA </span>is a no-op if <span class="s16">LIST </span>is not a list.</p><p class="s11" style="padding-top: 5pt;padding-left: 102pt;text-indent: -24pt;line-height: 22pt;text-align: justify;"><span class="p">The right-flushing and centering commands translate as calls to the function </span>FLUSHRIGHT<span class="p">: </span>(<b>FLUSHRIGHT </b><i>POS X MIN P2FLAG CENTERFLAG FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">CENTERFLAG</span><span class="s11">=NIL</span>, prints <span class="s16">X </span>right-flushed against position <span class="s16">POS </span>on <span class="s16">FILE</span>; otherwise, centers <span class="s16">X </span>between the current line position and <span class="s16">POS</span>. Makes sure that it spaces over at least <span class="s16">MIN </span>spaces before printing by doing a <span class="s11">TERPRI </span>if necessary; <span class="s16">MIN</span><span class="s11">=NIL </span>is equivalent to <span class="s16">MIN</span><span class="s11">=</span>1. A positive <span class="s16">POS </span>indicates an absolute position, while a negative <span class="s16">POS </span>signifies the position which is |<span class="s16">POS</span>| to the right of the current line position. <span class="s16">POS</span><span class="s11">=</span>0 is interpreted as <span class="s11">(LINELENGTH</span>), the right margin.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">READFILE and WRITEFILE                                                                                                                      </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">For those applications where you simply want to simply read all of the expressions on a file, and not evaluate them, the function READFILE is available:</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>READFILE </b><i>FILE RDTBL ENDTOKEN</i>)                         <span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Reads successive expressions from file using <span class="s11">READ </span>(with read table <span class="s16">RDTBL</span>) until the single litatom <span class="s16">ENDTOKEN </span>is read, or an end of file encountered. Returns a list of these expressions.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s16">RDTBL </span>is not specified, it defaults to <span class="s11">FILERDTBL</span>. If <span class="s16">ENDTOKEN </span>is not specified, it defaults to the litatom <span class="s11">STOP</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>WRITEFILE </b><i>X FILE</i>)                                             <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Writes a date expression onto <span class="s16">FILE</span>, followed by successive expressions from <span class="s16">X</span>, using</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s11">FILERDTBL </span>as a read table. If <span class="s16">X </span>is atomic, its value is used. If <span class="s16">FILE </span>is not open, it is</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">opened. If <span class="s16">FILE </span>is a list, <span class="s11">(CAR </span><span class="s16">FILE</span><span class="s11">) </span>is used and the file is left opened. Otherwise, when</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><i>X </i>is finished, the litatom <span class="s11">STOP </span>is printed on <span class="s16">FILE </span>and it is closed. Returns <span class="s16">FILE</span>.</p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>ENDFILE </b><i>FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Prints <span class="s11">STOP </span>on <span class="s16">FILE </span>and closes it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Read Tables                                                                                                                                               </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Many Interlisp input functions treat certain characters in special ways. For example, <span class="s11">READ </span>recognizes that the right and left parenthesis characters are used to specify list structures, and that the quote character is used to delimit text strings. The Interlisp input and (to a certain extent) output routines are table driven by read tables. Read tables are objects that specify the syntactic properties of characters for input routines. Since the input routines parse character sequences into objects, the read table in use determines which sequences are recognized as literal atoms, strings, list structures, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Most Interlisp input functions take an optional read table argument, which specifies the read table to use when reading an expression. If <span class="s11">NIL </span>is given as the read table, the &quot;primary read table&quot; is used. If <span class="s11">T </span>is specified, the system terminal read table is used. Some functions will also accept the atom <span class="s11">ORIG </span>(<i>not </i>the <i>value </i>of <span class="s11">ORIG</span>) as indicating the &quot;original&quot; system read table. Some output functions also take a read table argument. For example, <span class="s11">PRIN2 </span>prints an expression so that it would be read in correctly using a given read table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The Interlisp-D system uses the following read tables: <span class="s11">T </span>for input / output from terminals, the value of <span class="s11">FILERDTBL </span>for input / output from files, the value of <span class="s11">EDITRDTBL </span>for input from terminals while in the tty-based editor, the value of <span class="s11">DEDITRDTBL </span>for input from terminals while in the display-based editor, and the value of <span class="s11">CODERDTBL </span>for input / output from compiled files. These five read tables are initially copies of the <span class="s11">ORIG </span>read table, with changes made to some of them to provide read macros that are specific to terminal input or file input. Using the functions described below, you may further change, reset, or copy these tables. However, in the case of <span class="s11">FILERDTBL </span>and <span class="s11">CODERDTBL</span>, you are cautioned that changing these tables may prevent the system from being able to read files made with the original tables, or prevent users possessing only the standard tables from reading files made using the modified tables.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">You can also create new read tables, and either explicitly pass them to input / output functions as arguments, or install them as the primary read table, via <span class="s11">SETREADTABLE</span>, and then not specify a <i>RDTBL </i>argument, i.e., use <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Read Table Functions</p><p class="s11" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>READTABLEP </b><i>RDTBL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">RDTBL </span>if <span class="s16">RDTBL </span>is a real read table (<i>not </i><span class="s11">T </span>or <span class="s11">ORIG</span>), otherwise <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>GETREADTABLE </b><i>RDTBL</i>)                                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">RDTBL</span><span class="s11">=NIL</span>, returns the primary read table. If <span class="s16">RDTBL</span><span class="s11">=T</span>, returns the system terminal read table. If <span class="s16">RDTBL </span>is a real read table, returns <span class="s16">RDTBL</span>. Otherwise, generates an <span class="s11">ILLEGAL READTABLE </span>error.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SETREADTABLE </b><i>RDTBL FLG</i>)                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Sets the primary read table to <span class="s16">RDTBL</span>. If <span class="s16">FLG</span><span class="s11">=T</span>, <span class="s11">SETREADTABLE </span>sets the system terminal read table, <span class="s11">T</span>. Note that you can reset the other system read tables with <span class="s11">SETQ</span>, e.g., <span class="s11">(SETQ FILERDTBL (GETREADTABLE))</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Generates an <span class="s11">ILLEGAL READTABLE </span>error if <span class="s16">RDTBL </span>is not <span class="s11">NIL</span>, <span class="s11">T</span>, or a real read table. Returns the previous setting of the primary read table, so <span class="s11">SETREADTABLE </span>is suitable for use with <span class="s11">RESETFORM </span>(Chapter 14).</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>COPYREADTABLE </b><i>RDTBL</i>)                                          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns a copy of <span class="s16">RDTBL</span>. <span class="s16">RDTBL </span>can be a real read table, <span class="s11">NIL</span>, <span class="s11">T</span>, or <span class="s11">ORIG </span>(in which case <span class="s11">COPYREADTABLE </span>returns a copy of the <i>original </i>system read table), otherwise <span class="s11">COPYREADTABLE </span>generates an <span class="s11">ILLEGAL READTABLE </span>error.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Note that <span class="s11">COPYREADTABLE </span>is the only function that <i>creates </i>a read table.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>RESETREADTABLE </b><i>RDTBL FROM</i>)                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Copies (smashes) <span class="s16">FROM </span>into <span class="s16">RDTBL</span>. <span class="s16">FROM </span>and <span class="s16">RDTBL </span>can be <span class="s11">NIL</span>, <span class="s11">T</span>, or a real read table. In addition, <span class="s16">FROM </span>can be <span class="s11">ORIG</span>, meaning use the system’s original read table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Syntax Classes</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">A read table is an object that contains information about the &quot;syntax class&quot; of each character. There are nine basic syntax classes: <span class="s11">LEFTPAREN</span>, <span class="s11">RIGHTPAREN</span>, <span class="s11">LEFTBRACKET</span>, <span class="s11">RIGHTBRACKET</span>, <span class="s11">STRINGDELIM</span>, <span class="s11">ESCAPE</span>, <span class="s11">BREAKCHAR</span>, <span class="s11">SEPRCHAR</span>, and <span class="s11">OTHER</span>, each associated with a primitive syntactic property. In addition, there is an unlimited assortment of user-defined syntax classes, known as &quot;read macros&quot;. The basic syntax classes are interpreted as follows:</p><p class="s11" style="padding-top: 6pt;padding-left: 113pt;text-indent: 0pt;text-align: justify;">LEFTPAREN <span class="p">(normally left parenthesis) Begins list structure.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 108pt;text-indent: 0pt;text-align: justify;">RIGHTPAREN <span class="p">(normally right parenthesis) Ends list structure.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;line-height: 12pt;text-align: left;">LEFTBRACKET <span class="p">(normally left bracket) Begins list structure. Also matches </span>RIGHTBRACKET</p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: left;">characters.</p><p class="s11" style="padding-top: 5pt;padding-left: 97pt;text-indent: 0pt;line-height: 12pt;text-align: left;">RIGHTBRACKET <span class="p">(normally left bracket) Ends list structure. Can close an arbitrary numbers of</span></p><p class="s11" style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: left;">LEFTPAREN <span class="p">lists, back to the last </span>LEFTBRACKET<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -71pt;text-align: justify;">STRINGDELIM <span class="p">(normally double quote) Begins and ends text strings. Within the string, all characters except for the one(s) with class </span>ESCAPE <span class="p">are treated as ordinary, i.e., interpreted as if they were of syntax class </span>OTHER<span class="p">. To include the string delimiter inside a string, prefix it with the </span>ESCAPE <span class="p">character.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 125pt;text-indent: -44pt;text-align: justify;">ESCAPE <span class="p">(normally percent sign) Inhibits any special interpretation of the next character, i.e., the next character is interpreted to be of class </span>OTHER<span class="p">, independent of its normal syntax class.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: -60pt;text-align: left;">BREAKCHAR <span class="p">(None initially) Is a break character, i.e., delimits atoms, but is otherwise an ordinary character.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 70pt;text-indent: 0pt;text-align: left;">SEPRCHAR <span class="p">(space, carriage return, etc.) Delimits atoms, and is otherwise ignored.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 87pt;text-indent: 0pt;text-align: left;">OTHER <span class="p">Characters that are not otherwise special belong to the class </span>OTHER<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Characters of syntax class <span class="s11">LEFTPAREN</span>, <span class="s11">RIGHTPAREN</span>, <span class="s11">LEFTBRACKET</span>, <span class="s11">RIGHTBRACKET</span>, and <span class="s11">STRINGDELIM </span>are all <i>break </i>characters. That is, in addition to their interpretation as delimiting list or string structures, they also terminate the reading of an atom. Characters of class <span class="s11">BREAKCHAR </span>serve <i>only </i>to terminate atoms, with no other special meaning. In addition, if a break character is the first non-separator encountered by <span class="s11">RATOM</span>, it is read as a one-character atom. In order for a break character to be included in an atom, it must be preceded by the <span class="s11">ESCAPE </span>character.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Characters of class <span class="s11">SEPRCHAR </span>also terminate atoms, but are otherwise completely ignored; they can be thought of as logically spaces. As with break characters, they must be preceded by the <span class="s11">ESCAPE </span>character in order to appear in an atom.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">For example, if <span class="s11">$ </span>were a break character and <span class="s11">* </span>a separator character, the input stream</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">ABC**DEF$GH*$$ <span class="p">would be read by six calls to </span>RATOM <span class="p">returning respectively </span>ABC<span class="p">, </span>DEF<span class="p">, </span>$<span class="p">, </span>GH<span class="p">, </span>$<span class="p">, </span>$<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Although normally there is only one character in a read table having each of the list- and string- delimiting syntax classes (such as <span class="s11">LEFTPAREN</span>), it is perfectly acceptable for any character to have any syntax class, and for more than one to have the same class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note that a &quot;syntax class&quot; is an abstraction: there is no object referencing a collection of characters called a <i>syntax class</i>. Instead, a read table provides the <i>association </i>between a character and its syntax class, and the input / output routines enforce the abstraction by using read tables to drive the parsing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The functions below are used to obtain and set the syntax class of a character in a read table. <span class="s16">CH </span>can either be a character code (a integer), or a character (a single-character atom). Single-digit integers are interpreted as character codes, rather than as characters. For example, 1 indicates Control-A, and 49 indicates the <i>character </i>1. Note that <span class="s16">CH </span>can be a full sixteen-bit NS character (see Chapter 2).</p><p style="padding-top: 7pt;padding-left: 114pt;text-indent: -36pt;line-height: 91%;text-align: justify;">Note: Terminal tables, described in Chapter 30, also associate characters with syntax classes, and they can also be manipulated with the functions below. The set of read table and terminal table syntax classes are disjoint, so there is never any ambiguity about which type of table is being referred to.</p><p class="s11" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>GETSYNTAX </b><i>CH TABLE</i><span class="s17">) </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the syntax class of <span class="s16">CH</span>, a character or a character code, with respect to <span class="s16">TABLE</span>. <span class="s16">TABLE </span>can be <span class="s11">NIL</span>, <span class="s11">T</span>, <span class="s11">ORIG</span>, or a real read table or terminal table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s16">CH </span>can also be a syntax class, in which case <span class="s11">GETSYNTAX </span>returns a list of the character codes in <span class="s16">TABLE </span>that have that syntax class.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SETSYNTAX </b><i>CHAR CLASS TABLE</i>)                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Sets the syntax class of <span class="s16">CHAR</span>, a character or character code, in <span class="s16">TABLE</span>. <span class="s16">TABLE </span>can be either <span class="s11">NIL</span>, <span class="s11">T</span>, or a real read table or terminal table. <span class="s11">SETSYNTAX </span>returns the previous syntax class of <span class="s16">CHAR</span>.  <span class="s16">CLASS </span>can be any one of the following:</p><ul id="l64"><li><p style="padding-top: 6pt;padding-left: 174pt;text-indent: -12pt;text-align: left;">The name of one of the basic syntax classes.</p></li><li><p style="padding-top: 5pt;padding-left: 174pt;text-indent: -12pt;text-align: left;">A list, which is interpreted as a read macro (see below).</p></li><li><p style="padding-top: 6pt;padding-left: 173pt;text-indent: -12pt;text-align: justify;"><span class="s11">NIL</span>, <span class="s11">T</span>, <span class="s11">ORIG</span>, or a real read table or terminal table, which means to give <span class="s16">CHAR </span>the syntax class it has in the table indicated by <span class="s16">CLASS</span>. For example, <span class="s11">(SETSYNTAX ’%( ’ORIG </span><span class="s16">TABLE</span><span class="s11">) </span>gives the left parenthesis character in <span class="s16">TABLE </span>the same syntax class that it has in the original system read table.</p></li><li><p style="padding-top: 7pt;padding-left: 174pt;text-indent: -12pt;text-align: justify;">A character code or character, which means to give <span class="s16">CHAR </span>the same syntax class as the character <span class="s16">CHAR </span>in <span class="s16">TABLE</span>. For example, <span class="s11">(SETSYNTAX ’{ ’%[ </span><span class="s16">TABLE</span><span class="s11">) </span>gives the left brace character the same syntax class as the left bracket.</p></li></ul><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SYNTAXP </b><i>CODE CLASS TABLE</i>)                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">CODE </span>is a character code; <span class="s16">TABLE </span>is <span class="s11">NIL</span>, <span class="s11">T</span>, or a real read table or terminal table. Returns <span class="s11">T</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">if <span class="s16">CODE </span>has the syntax class <span class="s16">CLASS </span>in <span class="s16">TABLE</span>; <span class="s11">NIL </span>otherwise.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">CLASS </span>can also be a read macro type (<span class="s11">MACRO</span>, <span class="s11">SPLICE</span>, <span class="s11">INFIX</span>), or a read macro option <span class="s11">(FIRST</span>, <span class="s11">IMMEDIATE</span>, etc.), in which case <span class="s11">SYNTAXP </span>returns <span class="s11">T </span>if the syntax class is a read macro with the specified property.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">SYNTAXP </span>will <i>not </i>accept a character as an argument, only a character <i>code</i>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For convenience in use with <span class="s11">SYNTAXP</span>, the atom <span class="s11">BREAK </span>may be used to refer to <i>all </i>break characters, i.e., it is the union of <span class="s11">LEFTPAREN</span>, <span class="s11">RIGHTPAREN</span>, <span class="s11">LEFTBRACKET</span>, <span class="s11">RIGHTBRACKET</span>, <span class="s11">STRINGDELIM</span>, and <span class="s11">BREAKCHAR</span>. For purely symmetrical reasons, the atom <span class="s11">SEPR </span>corresponds to all separator characters. However, since the only separator characters are those that also appear in <span class="s11">SEPRCHAR</span>, <span class="s11">SEPR </span>and <span class="s11">SEPRCHAR </span>are equivalent.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Note that <span class="s11">GETSYNTAX </span>never returns <span class="s11">BREAK </span>or <span class="s11">SEPR </span>as a value although <span class="s11">SETSYNTAX </span>and <span class="s11">SYNTAXP </span>accept them as arguments. Instead, <span class="s11">GETSYNTAX </span>returns one of the disjoint basic syntax classes that comprise <span class="s11">BREAK</span>. <span class="s11">BREAK </span>as an argument to <span class="s11">SETSYNTAX </span>is interpreted to mean <span class="s11">BREAKCHAR </span>if the character is not already of one of the <span class="s11">BREAK </span>classes. Thus, if <span class="s11">%( </span>is of class <span class="s11">LEFTPAREN</span>, then <span class="s11">(SETSYNTAX ’%( ’BREAK) </span>doesn’t do anything, since <span class="s11">%( </span>is already a break character, but <span class="s11">(SETSYNTAX ’%( ’BREAKCHAR) </span>means make <span class="s11">%( </span>be <i>just </i>a break character, and therefore disables the <span class="s11">LEFTPAREN </span>function of <span class="s11">%(</span>. Similarly, if one of the format characters is disabled completely, e.g., by <span class="s11">(SETSYNTAX ’%( ’OTHER)</span>, then <span class="s11">(SETSYNTAX ’%( ’BREAK) </span>would make <span class="s11">%( </span>be <i>only </i>a break character; it would <i>not </i>restore <span class="s11">%( </span>as <span class="s11">LEFTPAREN</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following functions provide a way of collectively accessing and setting the separator and break characters in a read table:</p><p class="s11" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>GETSEPR </b><i>RDTBL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns a list of separator character codes in <span class="s16">RDTBL</span>. Equivalent to <span class="s11">(GETSYNTAX ’SEPR</span></p><p class="s16" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">RDTBL<span class="s11">)</span><span class="p">.</span></p><p class="s11" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>GETBRK </b><i>RDTBL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns a list of break character codes in <span class="s16">RDTBL</span>. Equivalent to <span class="s11">(GETSYNTAX ’BREAK</span></p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">RDTBL<span class="s17">)</span><span class="p">.</span></p><p class="s11" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>SETSEPR </b><i>LST FLG RDTBL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Sets or removes the separator characters for <span class="s16">RDTBL</span>. <span class="s16">LST </span>is a list of charactors or character codes. <span class="s16">FLG </span>determines the action of <span class="s11">SETSEPR </span>as follows: If <span class="s16">FLG</span><span class="s11">=NIL</span>, makes <span class="s16">RDTBL </span>have exactly  the  elements  of  <span class="s16">LST </span>as  separators,  discarding  from <span class="s16">RDTBL </span>any  old  separator characters not in <span class="s16">LST</span>. If <span class="s16">FLG</span><span class="s11">=</span>0, removes from <span class="s16">RDTBL </span>as separator characters all elements of <span class="s16">LST</span>. This provides an &quot;<span class="s11">UNSETSEPR</span>&quot;. If <span class="s16">FLG</span><span class="s11">=</span>1, makes each of the characters in <span class="s16">LST </span>be a separator in <span class="s16">RDTBL</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">LST</span><span class="s11">=T</span>, the separator characters are reset to be those in the system’s read table for terminals, regardless of the value of <span class="s16">FLG</span>, i.e., <span class="s11">(SETSEPR T) </span>is equivalent to <span class="s11">(SETSEPR (GETSEPR T))</span>. If <span class="s16">RDTBL </span>is <span class="s11">T</span>, then the characters are reset to those in the original system table.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns <span class="s11">NIL</span>.</p><p class="s11" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<b>SETBRK </b><i>LST FLG RDTBL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Sets the break characters for <span class="s16">RDTBL</span>. Similar to <span class="s11">SETSEPR</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">As with <span class="s11">SETSYNTAX </span>to the <span class="s11">BREAK </span>class, if any of the list- or string-delimiting break characters are disabled by an appropriate <span class="s11">SETBRK </span>(or by making it be a separator character), its special action for <span class="s11">READ </span>will <i>not </i>be restored by simply making it be a break character again with <span class="s11">SETBRK</span>. However, making these characters be break characters when they already <i>are </i>will have no effect.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The action of the <span class="s11">ESCAPE </span>character (normally <span class="s11">%</span>) is not affected by <span class="s11">SETSEPR </span>or <span class="s11">SETBRK</span>. It can be disabled by setting its syntax to the class <span class="s11">OTHER</span>, and other characters can be used for escape on input by assigning them the class <span class="s11">ESCAPE</span>. As of this writing, however, there is no way to change the output escape character; it is &quot;hardwired&quot; as <span class="s11">%</span>. That is, on output, characters of special syntax that need to be preceded by the <span class="s11">ESCAPE </span>character will always be preceded by <span class="s11">%</span>, independent of the syntax of <span class="s11">% </span>or which, if any characters, have syntax <span class="s11">ESCAPE</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The following function can be used for defeating the action of the <span class="s11">ESCAPE </span>character or characters:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>ESCAPE </b><i>FLG RDTBL</i>)                                             <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">If <span class="s16">FLG</span><span class="s11">=NIL</span>, makes characters of class <span class="s11">ESCAPE </span>behave like characters of class <span class="s11">OTHER </span>on input. Normal setting is <span class="s11">(ESCAPE T)</span>. <span class="s11">ESCAPE </span>returns the previous setting.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Read Macros</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This is a description of the OLD-INTERLISP-T read macros. Read macros are user-defined syntax classes that can cause complex operations when certain characters are read. Read macro characters are defined by specifying as a syntax class an expression of the form:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 161pt;text-indent: 0pt;text-align: left;"><span class="s11">(</span>TYPE OPTION<span class="s32">1 </span><span class="s11">... </span>OPTION<span class="s32">N </span>FN<span class="s11">)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">where <span class="s16">TYPE </span>is one of <span class="s11">MACRO</span>, <span class="s11">SPLICE</span>, or <span class="s11">INFIX</span>, and <span class="s16">FN </span>is the name of a function or a lambda expression. Whenever <span class="s11">READ </span>encounters a read macro character, it calls the associated function, giving it as arguments the input stream and read table being used for that call to <span class="s11">READ</span>. The interpretation of the value returned depends on the type of read macro:</p><p class="s11" style="padding-top: 6pt;padding-left: 173pt;text-indent: -39pt;line-height: 93%;text-align: justify;">MACRO <span class="p">This is the simplest type of read macro. The result returned from the macro is treated as the expression to be read, instead of the read macro character. Often the macro reads more input itself. For example, in order to cause</span></p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><b>~</b><span class="s11">EXPR </span>to be read as <span class="s11">(NOT EXPR)</span>, one could define <b>~ </b>as the read macro:</p><p class="s11" style="padding-top: 5pt;padding-left: 258pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[MACRO (LAMBDA (FL RDTBL)</p><p class="s11" style="padding-left: 306pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LIST ’NOT (READ FL RDTBL]</p><p class="s11" style="padding-top: 4pt;padding-left: 129pt;text-indent: 0pt;line-height: 12pt;text-align: left;">SPLICE <span class="p">The result (which should be a list or </span>NIL<span class="p">) is spliced into the input using</span></p><p class="s11" style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">NCONC<span class="p">. For example, if </span>$ <span class="p">is defined by the read macro:</span></p><p class="s11" style="padding-top: 7pt;padding-left: 258pt;text-indent: 0pt;text-align: left;">(SPLICE (LAMBDA NIL (APPEND FOO)))</p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">and the value of <span class="s11">FOO </span>is <span class="s11">(A B C)</span>, then when you input <span class="s11">(X $ Y)</span>, the result will be <span class="s11">(X A B C Y)</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: -39pt;text-align: justify;">INFIX <span class="p">The associated function is called with a third argument, which is a list, in </span>TCONC <span class="p">format (Chapter 3), of what has been read at the current level of list nesting. The function’s value is taken as a new </span>TCONC <span class="p">list which replaces the old one. For example, the infix operator </span>+ <span class="p">could be defined by the read macro:</span></p><p class="s11" style="padding-top: 5pt;padding-left: 258pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(INFIX (LAMBDA (FL RDTBL Z)</p><p class="s11" style="padding-left: 306pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(RPLACA (CDR Z)</p><p class="s11" style="padding-left: 355pt;text-indent: -32pt;line-height: 88%;text-align: left;">(LIST (QUOTE IPLUS) (CADR Z)</p><p class="s11" style="padding-left: 355pt;text-indent: 0pt;line-height: 8pt;text-align: left;">(READ FL RDTBL)))</p><p class="s11" style="padding-left: 141pt;text-indent: 0pt;text-align: center;">Z))</p><p style="padding-top: 5pt;padding-left: 174pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If an <span class="s11">INFIX </span>read macro character is encountered <i>not </i>in a list, the third argument to its associated function is <span class="s11">NIL</span>. If the function returns <span class="s11">NIL</span>, the read macro character is essentially ignored and reading continues. Otherwise, if the function returns a <span class="s11">TCONC </span>list of one element, that element is the value of</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;">the <span class="s11">READ</span>. If it returns a <span class="s11">TCONC </span>list of more than one element, the list is the value of the <span class="s11">READ</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">The specification for a read macro character can be augmented to specify various options <span class="s16">OPTION</span><span class="s32">1</span></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">... <i>OPTION</i><i>N</i><span class="p">, e.g., </span>(MACRO FIRST IMMEDIATE <i>FN</i>)<span class="p">. The following three disjoint options specify when the read macro character is to be effective:</span></p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: -44pt;text-align: justify;">ALWAYS <span class="p">The default. The read macro character is always effective (except when preceded by the </span>% <span class="p">character), and is a break character, i.e., a member of </span>(GETSYNTAX ’BREAK <i>RDTBL</i>)<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: -39pt;line-height: 94%;text-align: justify;"><span class="s11">FIRST </span>The character is interpreted as a read macro character <i>only </i>when it is the first character seen after a break or separator character; in all other situations, the character is treated as having class <span class="s11">OTHER</span>. The read macro character is <i>not </i>a break character. For example, the quote character is a <span class="s11">FIRST </span>read macro character, so that <span class="s11">DON’T </span>is read as the single atom <span class="s11">DON’T</span>, rather than as <span class="s11">DON </span>followed by <span class="s11">(QUOTE T)</span>.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: -39pt;line-height: 92%;text-align: justify;"><span class="s11">ALONE </span>The read macro character is <i>not </i>a break character, and is interpreted as a read macro character only when the character would have been read as a separate atom if it were not a read macro character, i.e., when its immediate neighbors are both break or separator characters.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 1pt;text-align: justify;">Making a <span class="s11">FIRST </span>or <span class="s11">ALONE </span>read macro character be a break character (with <span class="s11">SETBRK</span>) disables the read macro interpretation, i.e., converts it to syntax class <span class="s11">BREAKCHAR</span>. Making an <span class="s11">ALWAYS </span>read macro character be a break character is a no-op.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The following two disjoint options control whether the read macro character is to be protected by the</p><p class="s11" style="padding-left: 29pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">ESCAPE <span class="p">character on output when a litatom containing the character is printed:</span></p><p class="s11" style="padding-top: 7pt;padding-left: 125pt;text-indent: -84pt;line-height: 94%;text-align: justify;">ESCQUOTE <span class="p">or </span>ESC <span class="p">The default. When printed with </span>PRIN2<span class="p">, the read macro character will be preceded by the output escape character (</span>%<span class="p">) as needed to permit the atom containing it to be read correctly. Note that for </span>FIRST <span class="p">macros, this means that the character need be quoted only when it is the first character of the atom.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -106pt;line-height: 94%;text-align: justify;"><span class="s11">NOESCQUOTE </span>or <span class="s11">NOESC </span>The read macro character will always be printed without an escape. For example, the <b>? </b>read macro in the <span class="s11">T </span>read table is a <span class="s11">NOESCQUOTE </span>character. Unless you are very careful what you are doing, read macro characters in <span class="s11">FILERDTBL </span>should never be <span class="s11">NOESCQUOTE</span>, since symbols that happen to contain the read macro character will not read back in correctly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 32pt;text-indent: 0pt;text-align: justify;">The following two disjoint options control when the macro’s function is actually executed:</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -100pt;text-align: justify;">IMMEDIATE <span class="p">or </span>IMMED <span class="p">The read macro character is immediately activated, i.e., the current line is terminated, as if an </span>EOL <span class="p">had been typed, a carriage-return line-feed is printed,</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;line-height: 91%;text-align: justify;">and the entire line (including the macro character) is passed to the input function.</p><p style="padding-top: 6pt;padding-left: 173pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="s11">IMMEDIATE </span>read macro characters enable you to specify a character that will take effect immediately, as soon as it is encountered in the input, rather than waiting for the line to be terminated. Note that this is not necessarily as soon as the character is <i>typed</i>. Characters that cause action as soon as they are typed are interrupt characters (see Chapter 30).</p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Note that since an <span class="s11">IMMEDIATE </span>macro causes any input before it to be sent to the reader, characters typed before an <span class="s11">IMMEDIATE </span>read macro character cannot be erased by Control-A or Control-Q once the <span class="s11">IMMEDIATE </span>character has been typed, since they have already passed through the line buffer. However, an <span class="s11">INFIX </span>read macro can still alter some of what has been typed earlier, via its third argument.</p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: -120pt;line-height: 93%;text-align: justify;">NONIMMEDIATE <span class="p">or </span>NONIMMED <span class="p">The default. The read macro character is a normal character with respect to the line buffering, and so will not be activated until a carriage-return or matching right parenthesis or bracket is seen.</span></p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;text-align: justify;">Making a read macro character be both <span class="s11">ALONE </span>and <span class="s11">IMMEDIATE </span>is a contradiction, since <span class="s11">ALONE </span>requires that the next character be input in order to see if it is a break or separator character. Thus, <span class="s11">ALONE </span>read macros are always <span class="s11">NONIMMEDIATE</span>, regardless of whether or not <span class="s11">IMMEDIATE </span>is specified.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Read macro characters can be &quot;nested&quot;. For example, if <span class="s11">= </span>is defined by</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 183pt;text-indent: -21pt;line-height: 108%;text-align: left;">(MACRO (LAMBDA (FL RDTBL) (EVAL (READ FL RDTBL))))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">and <span class="s11">! </span>is defined by</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 183pt;text-indent: -21pt;line-height: 108%;text-align: left;">(SPLICE (LAMBDA (FL RDTBL) (READ FL RDTBL)))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">then if the value of <span class="s11">FOO </span>is <span class="s11">(A B C)</span>, and <span class="s11">(X =FOO Y) </span>is input, <span class="s11">(X (A B C) Y) </span>will be returned. If</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(X !=FOO Y) <span class="p">is input, </span>(X A B C Y) <span class="p">will be returned.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note: If a read macro’s function calls <span class="s11">READ</span>, and the <span class="s11">READ </span>returns <span class="s11">NIL</span>, the function cannot distinguish the case where a <span class="s11">RIGHTPAREN </span>or <span class="s11">RIGHTBRACKET </span>followed the read macro character, (e.g. &quot;<span class="s11">(A B ’)</span>&quot;), from the case where the atom <span class="s11">NIL </span>(or &quot;<span class="s11">()</span>&quot;) actually appeared. In Interlisp-D, a <span class="s11">READ </span>inside of a read macro when the next input character is a <span class="s11">RIGHTPAREN </span>or <span class="s11">RIGHTBRACKET </span>reads the character and returns <span class="s11">NIL</span>, just as if the <span class="s11">READ </span>had not occurred inside a read macro.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If a call to <span class="s11">READ </span>from within a read macro encounters an unmatched <span class="s11">RIGHTBRACKET </span><i>within </i>a list, the bracket is simply put back into the buffer to be read (again) at the higher level. Thus, inputting an expression such as <span class="s11">(A B ’(C D] </span>works correctly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">(<b>INREADMACROP</b>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <span class="s11">NIL </span>if currently <i>not </i>under a read macro function, otherwise the number of unmatched left parentheses or brackets.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">(<b>READMACROS </b><i>FLG RDTBL</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If <span class="s16">FLG</span><span class="s11">=NIL</span>, turns off action of read macros in read table <span class="s16">RDTBL</span>. If <span class="s16">FLG</span><span class="s11">=T</span>, turns them on. Returns previous setting.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The following read macros are standardly defined in Interlisp in the <span class="s11">T </span>and <span class="s11">EDITRDTBL</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">read tables:</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -78pt;line-height: 93%;text-align: justify;">&#39; <span class="p">(single-quote) Returns the next expression, wrapped in a call to </span>QUOTE<span class="p">; e.g., </span>’FOO <span class="p">reads as </span>(QUOTE FOO)<span class="p">. The macro is defined as a </span>FIRST <span class="p">read macro, so that the quote character has no effect in the middle of a symbol. The macro is also ignored if the quote character is immediately followed by a separator character.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: -51pt;line-height: 94%;text-align: justify;"><span class="p">Control-Y Defined in </span>T <span class="p">and </span>EDITRDTBL<span class="p">. Returns the result of evaluating the next expression. For example, if the value of </span>FOO <span class="p">is </span>(A B)<span class="p">, then </span>(LIST 1 <span class="s9">control- Y</span>FOO 2) <span class="p">is read as </span>(LIST 1 (A B) 2)<span class="p">. Note that no structure is copied; the third element of that input expression is still </span>EQ <span class="p">to the value of </span>FOO<span class="p">. Control-Y can thus be used to read structures that ordinarily have no read syntax. For example, the value returned from reading </span>(KEY1 <span class="s9">Control- Y</span>(ARRAY 10)) <span class="p">has an array as its second element. Control-Y can be thought of as an &quot;un-quote&quot; character. The choice of character to perform this function is changeable with </span>SETTERMCHARS <span class="p">(see Chapter 16).</span></p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: -66pt;line-height: 91%;text-align: justify;">‘ <span class="p">(backquote) Backquote makes it easier to write programs to construct complex data structures. Backquote is like quote, except that within the backquoted expression, forms can be evaluated. The general idea is that the backquoted expression is a &quot;template&quot; containing some constant parts (as with a quoted form) and some parts to be filled in by evaluating something. Unlike with control-Y, however, the evaluation occurs not at the time the form is read, but at the time the backquoted expression is evaluated. That is, the backquote macro returns an expression which, when evaluated, produces the desired structure.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Within the backquoted expression, the character &quot;<b>,</b>&quot; (comma) introduces a form to be evaluated. The value of a form preceded by &quot;<span class="s11">,@</span>&quot; is to be spliced in, using <span class="s11">APPEND</span>. If it is permissible to destroy the list being spliced in (i.e., <span class="s11">NCONC </span>may be used in the translation), then &quot;<span class="s11">,.</span>&quot; can be used instead of &quot;<span class="s11">,@</span>&quot;.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">For example, if the value of <span class="s11">FOO </span>is <span class="s11">(1 2 3 4)</span>, then the form</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 258pt;text-indent: 0pt;text-align: left;">‘(A ,(CAR FOO) ,@(CDDR FOO) D E)</p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">evaluates to <span class="s11">(A 1 3 4 D E)</span>; it is logically equivalent to writing</p><p class="s11" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(CONS ’A</p><p class="s11" style="padding-left: 141pt;text-indent: 0pt;text-align: center;">(CONS (CAR FOO)</p><p class="s11" style="padding-left: 244pt;text-indent: 0pt;text-align: center;">(APPEND (CDDR FOO) ’(D E))))</p><p class="s11" style="padding-left: 258pt;text-indent: 0pt;text-align: left;">.</p><p style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Backquote is particularly useful for writing macros. For example, the body of a macro that refers to <span class="s11">X </span>as the macro’s argument list might be</p><p class="s11" style="padding-top: 6pt;padding-left: 258pt;text-indent: 0pt;line-height: 10pt;text-align: left;">‘(COND</p><p class="s11" style="padding-left: 274pt;text-indent: 0pt;line-height: 9pt;text-align: left;">((FIXP ,(CAR X))</p><p class="s11" style="padding-left: 274pt;text-indent: 16pt;line-height: 88%;text-align: left;">,(CADR X)) (T .,(CDDR X)))</p><p style="padding-top: 2pt;padding-left: 258pt;text-indent: 0pt;text-align: left;">which is equivalent to writing</p><p class="s11" style="padding-top: 3pt;padding-left: 258pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(LIST ’COND</p><p class="s11" style="padding-left: 317pt;text-indent: -32pt;line-height: 88%;text-align: left;">(LIST (LIST ’FIXP (CAR X)) (CADR X))</p><p class="s11" style="padding-left: 285pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(CONS ’T (CDDR X)))</p><p style="padding-top: 5pt;padding-left: 174pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note that comma does <i>not </i>have any special meaning outside of a backquote context.</p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For users without a backquote character on their keyboards, backquote can also be written as |<span class="s11">’ </span>(vertical-bar, quote).</p><p class="s11" style="padding-top: 8pt;padding-left: 174pt;text-indent: -17pt;text-align: left;">? <span class="p">Implements the </span>?= <span class="p">command for on-line help regarding the function currently being &quot;called&quot; in the typein (see Chapter 26).</span></p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: -70pt;line-height: 92%;text-align: justify;">| (vertical bar) When followed by an end of line, tab or space, | is ignored, i.e., treated as a separator character, enabling the editor’s <span class="s11">CHANGECHAR </span>feature (see Chapter 26). Otherwise it is a &quot;dispatching&quot; read macro whose meaning depends on the character(s) following it.  The following are currently defined:</p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;text-align: justify;">&#39; <span class="p">(quote) -- A synonym for backquote.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;text-align: justify;">. <span class="p">(period) -- Returns the evaluation of the next expression, i.e., this is a synonym for Control-Y.</span></p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><b>, </b>(comma) -- Returns the evaluation of the next expression <i>at load time</i>, i.e., the following expression is quoted in such a manner that the compiler treats it as a literal whose value is not determined until the compiled expression is loaded.</p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;text-align: justify;">O <span class="p">or </span>o <span class="p">(the letter O) -- Treats the next number as octal, i.e., reads it in radix 8. For example, |</span>o12 <span class="p">= </span>10 <span class="p">(decimal).</span></p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;text-align: justify;">B <span class="p">or </span>b <span class="p">-- Treats the next number as binary, i.e., reads it in radix 2. For example, |</span>b101 <span class="p">= </span>5 <span class="p">(decimal).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">I/O FUNCTIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">X <span class="p">or </span>x <span class="p">-- Treats the next number as hexadecimal, i.e., reads it in radix 16. The uppercase letters </span>A <span class="p">though </span>F <span class="p">are used as the digits after </span>9<span class="p">. For example, |</span>x1A</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">= <span class="s11">26 </span>(decimal).</p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">R <span class="p">or </span>r <span class="p">-- Reads the next number in the radix specified by the (decimal) number that appears between the | and the </span>R<span class="p">. When inputting a number in a radix above ten, the upper-case letters </span>A <span class="p">through </span>Z <span class="p">can be used as the digits after </span>9 <span class="p">(but there is no digit above </span>Z<span class="p">, so it is not possible to type all base-99 digits). For example, |</span>3r120 <span class="p">reads 120 in radix 3, returning 15.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">(, {, <span class="s17">^ </span><span class="p">-- Used internally by </span>HPRINT <span class="p">and </span>HREAD <span class="p">(see above) to print and read unusual expressions.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The dispatching characters that are letters can appear in either upper- or lowercase.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 4pt;padding-left: 28pt;text-indent: -22pt;text-align: left;"><a name="bookmark29">USER/ INPUT/OUTPUT PACKAGES</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="637" height="3" alt="image" src="Image_065.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Interlisp-D can perform input / output operations on a large variety of physical devices.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This chapter presents a number of packages that have been developed for displaying and allowing the user to enter information. These packages are used to implement the user interface of many system facilities.</p><p class="s11" style="padding-top: 6pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;">INSPECT <span class="p">(see the </span>INSPECT <span class="p">section below) provides a window-based facility for displaying and changing the fields of a data object.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 66pt;text-indent: 0pt;line-height: 93%;text-align: justify;">PROMPTFORWORD <span class="p">(see the </span>PROMPTFORWORD <span class="p">section below) is a function used for entering a simple string of characters. Basic editing and prompting facilities are provided.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 66pt;text-indent: 0pt;line-height: 93%;text-align: justify;">ASKUSER <span class="p">(see the </span>ASKUSER <span class="p">section below) provides a more complicated prompting and answering facility, allowing a series of questions to be printed. Prompts and argument completion are supported.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;">TTYIN <span class="p">(see the </span>TTYIN <span class="p">Display Typein Editor section below) is a display typein editor, that provides complex text editing facilities when entering an input line.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 66pt;text-indent: 0pt;line-height: 93%;text-align: justify;">PRETTYPRINT <span class="p">(see the Prettyprint section below) is used for printing function definitions and other list structures, using multiple fonts and indenting lines to show the structure of the list.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Inspector                                                                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The Inspector provides a display-oriented facility for looking at and changing arbitrary Interlisp-D data structures. The inspector can be used to inspect all user datatypes and many system datatypes (although some objects such as numbers have no inspectable structure). The inspector displays the field names and values of an arbitrary object in a window that allows setting of the properties and further inspection of the values. This latter feature makes it possible to &quot;walk&quot; around all of the data structures in the system at the touch of a button. In addition, the inspector is integrated with the break package to allow inspection of any object on the stack and with the display and teletype structural editors to allow the editors to be used to &quot;inspect&quot; list structures and the inspector to &quot;edit&quot; datatypes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The underlying mechanisms of the data inspector have been designed to allow their use as specialized editors in user applications. This functionality is described at the end of this section.</p><p style="padding-top: 6pt;padding-left: 114pt;text-indent: -36pt;text-align: left;">Note: Currently, the inspector does not have <span class="s11">UNDO</span>ing. Also, variables whose values are changed will not be marked as such.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Calling the Inspector</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">There are several ways to open an inspect window onto an object. In addition to calling <span class="s11">INSPECT </span>directly (below), the inspector can also be called by buttoning an Inspect command inside an existing inspector window. Finally, if a non-list is edited with <span class="s11">EDITDEF </span>(see Chapter 17), the inspector is called. This also causes the inspector to be called by the Dedit command from the display editor or the <span class="s11">EV </span>command from the teletype editor if the selected piece of structure is a non-list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>INSPECT </b><i>OBJECT ASTYPE WHERE</i>)                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Creates an inspect window onto <span class="s16">OBJECT</span>. If <span class="s16">ASTYPE </span>is given, it will be taken as the record type of <span class="s16">OBJECT</span>. This allows records to be inspected with their property names. If <span class="s16">ASTYPE </span>is <span class="s11">NIL</span>, the data type of <span class="s16">OBJECT </span>will be used to determine its property names in the inspect window.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">WHERE </span>specifies the location of the inspect window. If <span class="s16">WHERE </span>is <span class="s11">NIL</span>, the user will be prompted for a location. If <span class="s16">WHERE </span>is a window, it will be used as the inspect window. If <span class="s16">WHERE </span>is a region, the inspect window will be created in that region of the screen. If <span class="s16">WHERE </span>is a position, the inspect window will have its lower left corner at that position on the screen.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">INSPECT </span>returns the inspect window onto <span class="s16">OBJECT</span>, or <span class="s11">NIL </span>if no inspection took place.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>INSPECTCODE </b><i>FN WHERE — — — —</i>)                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Opens a window and displays the compiled code of the function <span class="s16">FN </span>using <span class="s11">PRINTCODE</span>. The window is scrollable.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">WHERE <span class="p">determines where the window should appear. It can be a position, a region, or a window. If </span>NIL<span class="p">, the user is prompted to specify the position of the window.</span></p><p style="padding-top: 7pt;padding-left: 162pt;text-indent: -36pt;line-height: 94%;text-align: justify;">Note: If the Tedit library package is loaded, <span class="s11">INSPECTCODE </span>uses it to create the code inspector window. Also, if <span class="s11">INSPECTCODE </span>is called to inspect the frame name in a break window (see Chapter 14), the location in the code that the frame’s PC indicates it was executing at the time is highlighted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Multiple Ways of Inspecting</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For some datatypes there is more than one aspect that is of interest or more than one method of inspecting the object. In these cases, the inspector will bring up a menu of the possibilities and wait for the user to select one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the object is a litatom, the commands are the types for which the litatom has definitions as determined by <span class="s11">HASDEF</span>. Some typical commands are:</p><p class="s11" style="padding-top: 6pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">FNS <span class="p">Edit the definition of the selected litatom.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="9" height="9" alt="image" src="Image_066.png"/></span></p><p class="s11" style="padding-top: 6pt;padding-left: 140pt;text-indent: 0pt;text-align: left;">VARS <span class="p">Inspect the value.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 135pt;text-indent: 0pt;text-align: left;">PROPS <span class="p">Inspect the property list.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If the object is a list, there will be choice of how to inspect the list:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 125pt;text-indent: -49pt;text-align: left;">Inspect <span class="p">Opens an inspect window in which the properties are numbers and the values are the elements of the list.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">TtyEdit <span class="p">Calls the teletype list structure editor on the list (see Chapter 16).</span></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DisplayEdit <span class="p">Calls the DEdit display editor on the list (see Chapter 16).</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -58pt;line-height: 107%;text-align: left;"><span class="p">As a </span>PLIST <span class="p">Inspects the list as a property list, if the list is in property list form: </span>((PROP<span class="s52">1 </span>VAL<span class="s52">1</span>) ... (PROP<span class="s52">N </span>VAL<span class="s52">N</span>)).</p><p class="s11" style="padding-top: 5pt;padding-left: 126pt;text-indent: -64pt;line-height: 107%;text-align: left;"><span class="p">As an </span>ALIST <span class="p">Inspects the list as an association-list, if the list is in </span>ASSOC <span class="p">list form: </span>(PROP<span class="s52">1 </span>VAL<span class="s52">1 </span>... PROP<span class="s52">N </span>VAL<span class="s52">N</span>).</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -57pt;text-align: left;">As a record Brings up a submenu with all of the <span class="s11">RECORD</span>s in the system and inspect the list with the one chosen.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -84pt;text-align: left;">As a &quot;record type&quot; Inspects the list as the record of the type named in its <span class="s11">CAR</span>, if the <span class="s11">CAR </span>of the list is the name of a <span class="s11">TYPERECORD </span>(see Chapter 8).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the object is a bitmap, the choice is between inspecting the bitmap’s contents with the bitmap editor (<span class="s11">EDITBM</span>) or inspecting the bitmap’s fields.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Other datatypes may include multiple methods for inspecting objects of that type.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Inspect Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">An inspect window displays two columns of values. The lefthand column lists the property names of the structure being inspected. The righthand column contains the values of the properties named on the left. For variable length data such as lists and arrays, the &quot;property names&quot; are numbers from 1 to the length of the inspected item and the values are the corresponding elements. For arrays, the property names are the array element numbers and the values are the corresponding elements of the array.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For large lists or arrays, or datatypes with many fields, the initial window may be too small to contain all of them. In these cases, the unseen elements can be scrolled into view (from the bottom) or the window can be reshaped to increase its size.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">In an inspect window, the <span class="s11">LEFT </span>button is used to select things, the <span class="s11">MIDDLE </span>button to invoke commands that apply to the selected item. Any property or value can be selected by pointing the cursor directly at the text representing it, and clicking the <span class="s11">LEFT </span>button. There is one selected item per window and it is marked by having its surrounding box inverted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The options offered by the <span class="s11">MIDDLE </span>button depend on whether the selection is a property or a value. If the selected item is a value, the options provide different ways of inspecting the selected structure. The exact commands that are given depend on the type of the value. An example of the menu you may see is:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 253pt;text-indent: 0pt;text-align: left;"><span><img width="75" height="62" alt="image" src="Image_067.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the selected item is a property name, the command <span class="s11">SET </span>will appear. If selected, the user will be asked to type in an expression, and the selected property will be set to the result of evaluating the read form. The evaluation of the read form and the replacement of the selected item property will appear as their own history events and are individually undoable. Properties of system datatypes cannot be set. (There are often consistency requirements which can be inadvertently violated in ways that crash the system. This may be true of some user datatypes as well, however the system doesn’t know which ones. Users are advised to exercise caution.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">It is possible to copy-select property names or values out of an inspect window. Litatoms, numbers and strings are copied as they are displayed. Unprintable objects (such as bitmaps, etc.) come out as an appropriate system expression, such that if is evaluated, the object is re-created.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Inspect Window Commands</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">By pressing the <span class="s11">MIDDLE </span>button in the title of the inspect window, a menu of commands that apply to the inspect window is brought up:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 251pt;text-indent: 0pt;text-align: left;"><span><img width="82" height="38" alt="image" src="Image_068.gif"/></span></p><p class="s15" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">ReFetch <span class="p">[Inspect Window Command]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">An inspect window is not automatically updated when the structure it is inspecting is changed. The <span class="s11">ReFetch </span>command will refetch and redisplay all of the fields of the object being inspected in the inspect window.</p><p class="s15" style="padding-top: 10pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">IT<span class="s19"></span>datum <span class="p">[Inspect Window Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Sets the variable <span class="s11">IT </span>to object being inspected in the inspect window.</p><p class="s15" style="padding-top: 10pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">IT<span class="s19"></span>selection <span class="p">[Inspect Window Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Sets the variable <span class="s11">IT </span>to the property name or value currently selected in the inspect window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Interaction With Break Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The break window facility (see Chapter 14) knows about the inspector in the sense that the backtrace frame window is an inspect window onto the frame selected from the back trace menu during a break. Thus you can call the inspector on an object that is bound on the stack by selecting its frame in the back trace menu, selecting its value with the <span class="s11">LEFT </span>button in the back trace frame window, and</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">selecting the inspect command with the <span class="s11">MIDDLE </span>button in the back trace frame window. The values of variables in frames can be set by selecting the variable name with the <span class="s11">LEFT </span>button and then the &quot;Set&quot; command with the <span class="s11">MIDDLE </span>button.</p><p style="padding-top: 7pt;padding-left: 113pt;text-indent: -36pt;line-height: 91%;text-align: justify;">Note: The inspector will only allow the setting of named variables. Even with this restriction it is still possible to crash the system by setting variables inside system frames. Exercise caution in setting variables in other than your own code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Controlling the Amount Displayed During Inspection</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The amount of information displayed during inspection can be controlled using the following variables:</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">MAXINSPECTCDRLEVEL <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The inspector prints only the first <span class="s11">MAXINSPECTCDRLEVEL </span>elements of a long list, and will make the tail containing the unprinted elements the last item. The last item can be inspected to see further elements. Initially 50.</p><p class="s15" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">MAXINSPECTARRAYLEVEL <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The inspector prints only the first <span class="s11">MAXINSPECTARRAYLEVEL </span>elements of an array. The remaining elements can be inspected by calling the function <span class="s11">(INSPECT/ARRAY ARRAY BEGINOFFSET) </span>which inspects the <span class="s11">BEGINOFFSET </span>through the <span class="s11">BEGINOFFSET + MAXINSPECTARRAYLEVEL </span>elements of <span class="s11">ARRAY</span>. Initially 300.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">INSPECTPRINTLEVEL <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">When printing the values, the inspector resets <span class="s11">PRINTLEVEL </span>(see Chapter 25) to the value of <span class="s11">INSPECTPRINTLEVEL</span>. Initially (2 . 5).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">INSPECTALLFIELDSFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s11">INSPECTALLFIELDSFLG </span>is <span class="s11">T</span>, the inspector will show computed fields (<span class="s11">ACCESSFNS</span>, Chapter 8) as well as regular fields for structures that have a record definition. Initially <span class="s11">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Inspect Macros</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The Inspector can be extended to inspect new structures and datatypes by adding entries to the list <span class="s11">INSPECTMACROS</span>. An entry should be of the form <span class="s11">(OBJECTTYPE . INSPECTINFO)</span>. <span class="s11">OBJECTTYPE </span>is used to determine the types of objects that are inspected with this macro. If <span class="s11">OBJECTTYPE </span>is a litatom, the <span class="s11">INSPECTINFO </span>will be used to inspect items whose type name is <span class="s11">OBJECTTYPE</span>. If <span class="s11">OBJECTTYPE </span>is a list of the form <span class="s11">(FUNCTION DATUM-PREDICATE)</span>, <span class="s11">DATUM-PREDICATE </span>will be <span class="s11">APPLY</span>ed to the item and if it returns non-<span class="s11">NIL</span>, the <span class="s11">INSPECTINFO </span>will be used to inspect the item.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">INSPECTINFO <span class="p">can be one of two forms. If </span>INSPECTINFO <span class="p">is a litatom, it should be a function that will be applied to three arguments (the item being inspected, </span>OBJECTTYPE<span class="p">, and the value of </span>WHERE <span class="p">passed to </span>INSPECT<span class="p">) that should do the inspection. If </span>INSPECTINFO <span class="p">is not a litatom, it should be a list</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">of <span class="s11">(PROPERTIES FETCHFN STOREFN PROPCOMMANDFN VALUECOMMANDFN TITLECOMMANDFN</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">TITLE SELECTIONFN WHERE PROPPRINTFN) <span class="p">where the elements of this list are the arguments for </span>INSPECTW<span class="p">.</span>CREATE<span class="p">, described below. From this list, the </span>WHERE <span class="p">argument will be evaluated; the others will not. If </span>WHERE <span class="p">is </span>NIL<span class="p">, the value of </span>WHERE <span class="p">that was passed to </span>INSPECT <span class="p">will be used.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Examples:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">The entry <span class="s11">((FUNCTION MYATOMP) PROPNAMES GETPROP PUTPROP) </span>on <span class="s11">INSPECTMACROS </span>would</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">cause all objects satisfying the predicate <span class="s11">MYATOMP </span>to have their properties inspected with <span class="s11">GETPROP</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">and <span class="s11">PUTPROP</span>. In this example, <span class="s11">MYATOMP </span>should make sure the object is a litatom.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The entry <span class="s11">(MYDATATYPE . MYINSPECTFN) </span>on <span class="s11">INSPECTMACROS </span>would cause all datatypes of type</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">MYDATATYPE <span class="p">to be passed to the function </span>MYINSPECTFN<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">INSPECTWs</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The inspector is built on the abstraction of an <span class="s11">INSPECTW</span>. An <span class="s11">INSPECTW </span>is a window with certain window properties that display an object and respond to selections of the object’s parts. It is characterized by an object and its list of properties. An <span class="s11">INSPECTW </span>displays the object in two columns with the property names on the left and the values of those properties on the right. An <span class="s11">INSPECTW </span>supports  the  protocol  that  the  <span class="s11">LEFT </span>mouse  button  can  be  used  to  select  any  property  name  or property value and the <span class="s11">MIDDLE </span>button calls a user provided function on the selected value or property. For the Inspector application, this function puts up a menu of the alternative ways of inspecting values or of the ways of setting properties. <span class="s11">INSPECTW</span>s are created with the following function:</p><p class="s11" style="padding-top: 10pt;padding-left: 107pt;text-indent: -6pt;line-height: 11pt;text-align: left;">(<b>INSPECTW.CREATE   </b><i>DATUM   PROPERTIES   FETCHFN   STOREFN   PROPCOMMANDFN VALUECOMMANDFN   TITLECOMMANDFN   TITLE   SELECTIONFN   WHERE   PRO</i>)<i>PPRINTFN</i></p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[Function]</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Creates an <span class="s11">INSPECTW </span>that views the object <span class="s16">DATUM</span>. If <span class="s16">PROPERTIES </span>is a list, it is taken as the list of properties of <span class="s16">DATUM </span>to display. If <span class="s16">PROPERTIES </span>is a litatom, it is <span class="s11">APPLY</span>ed to <span class="s16">DATUM </span>and the result is used as the list of properties to display.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">FETCHFN </span>is a function of two arguments <span class="s11">(OBJECT PROPERTY) </span>that should return the value of the <span class="s11">PROPERTY </span>property of <span class="s11">OBJECT</span>. The result of this function will be printed (with <span class="s11">PRIN2</span>) in the <span class="s11">INSPECTW </span>as the value.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">STOREFN </span>is a function of three arguments <span class="s11">(OBJECT PROPERTY NEWVALUE) </span>that changes the <span class="s11">PROPERTY </span>property of <span class="s11">OBJECT </span>to <span class="s11">NEWVALUE</span>. It is used by the default <span class="s16">PROPCOMMANDFN </span>and <span class="s16">VALUECOMMANDFN </span>to change the value of a property and also by the function <span class="s11">INSPECTW</span>.<span class="s11">REPLACE </span>(described below). This can be <span class="s11">NIL </span>if the user provides command functions which do not call <span class="s11">INSPECTW</span>.<span class="s11">REPLACE</span>. Each replace action will be a separate event on the history list. Users are encouraged to provide <span class="s11">UNDO</span>able <span class="s11">STOREFN</span>s.</p><p class="s16" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">PROPCOMMANDFN <span class="p">is a function of three arguments </span><span class="s11">(PROPERTY OBJECT INSPECTW)</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">which gets called when the user presses the <span class="s11">MIDDLE </span>button and the selected item in the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s11">INSPECTW </span>is a property name. <span class="s11">PROPERTY </span>will be the name of the selected property, <span class="s11">OBJECT </span>will be the datum being viewed, and <span class="s11">INSPECTW </span>will be the window. If <span class="s16">PROPCOMMANDFN </span>is a string, it will get printed in the <span class="s11">PROMPTWINDOW </span>when the <span class="s11">MIDDLE </span>button is pressed. This provides a convenient way to notify the user about disabled commands on the properties. <span class="s11">DEFAULT</span>.<span class="s11">INSPECTW</span>.<span class="s11">PROPCOMMANDFN</span>, the default <span class="s16">PROPCOMMANDFN</span>, will present a menu with the single command <span class="s11">Set </span>on it. If selected, the <span class="s11">Set </span>command will read a value from the user and set the selected property to the result of <span class="s11">EVAL</span>uating this read value.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">VALUECOMMANDFN </span>is a function of four arguments <span class="s11">(VALUE PROPERTY OBJECT INSPECTW) </span>that gets called when the user presses the <span class="s11">MIDDLE </span>button and the selected item in the <span class="s11">INSPECTW </span>is a property value. <span class="s11">VALUE </span>will be the selected value (as returned by <span class="s16">FETCHFN</span>), <span class="s11">PROPERTY </span>will be the name of the property <span class="s11">VALUE </span>is the value of, <span class="s11">OBJECT </span>will be the datum being viewed, and <span class="s11">INSPECTW </span>will be the <span class="s11">INSPECTW </span>window.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s11">DEFAULT</span>.<span class="s11">INSPECTW</span>.<span class="s11">VALUECOMMANDFN</span>, the default <span class="s16">VALUECOMMANDFN</span>, will present a menu of possible ways of inspecting the value and create a new Inspect window if one of the menu items is selected.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">TITLECOMMANDFN </span>is a function of two arguments <span class="s11">(INSPECTW OBJECT) </span>which gets called when the user presses the <span class="s11">MIDDLE </span>button and the cursor is in the title or border of the inspect window <span class="s11">INSPECTW</span>. This command function is provided so that users can implement commands that apply to the entire object. The default <span class="s16">TITLECOMMANDFN </span><span class="s11">(DEFAULT.INSPECTW.TITLECOMMANDFN) </span>presents a menu with the commands <span class="s11">ReFetch</span>, <span class="s11">IT</span><span class="s19"></span>datum, and <span class="s11">IT</span><span class="s19"></span>election .</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">TITLE </span>specifies the title of the window. If <span class="s16">TITLE </span>is <span class="s11">NIL</span>, the title of the window will be the printed form of <span class="s16">DATUM </span>followed by the string &quot; Inspector&quot;. If <span class="s16">TITLE </span>is the litatom <span class="s11">DON’T</span>, the inspect window will not have a title. If <span class="s16">TITLE </span>is any other litatom, it will be applyed to the <span class="s16">DATUM </span>and the potential inspect window (if it is known). If this result is the litatom <span class="s11">DON’T</span>, the inspect window will not have a title; otherwise the result will be used as a title. If <span class="s16">TITLE </span>is not a litatom, it will be used as the title.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">SELECTIONFN </span>is a function of three arguments <span class="s11">(PROPERTY VALUEFLG INSPECTW) </span>which gets called when the user releases the left button and the cursor is on one of the items. The <span class="s16">SELECTIONFN </span>allows a program to take action on the user’s selection of an item in the inspect window. At the time this function is called, the selected item has been &quot;selected&quot;. The function <span class="s11">INSPECTW</span>.<span class="s11">SELECTITEM </span>(described below) can be used to turn off this selection. <span class="s11">PROPERTY </span>will be the name of the property of the selected item. <span class="s16">VALUEFLG </span>will be <span class="s11">NIL </span>if the selected item is the property name; <span class="s11">T </span>if the selected item is the property value.</p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">WHERE <span class="p">indicates where the inspect window should go. Its interpretation is described in</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">INSPECT <span class="p">(see above).</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">PROPPRINTFN </span>is a function of two arguments (<span class="s11">PROPERTY DATUM) </span>which gets called to determine what to print in the property place for the property <span class="s11">PROPERTY</span>. If <span class="s16">PROPPRINTFN </span>returns <span class="s11">NIL</span>, no property name will be printed and the value will be printed to the left of the other values.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">An inspect window uses the following window property names to hold information: <span class="s16">DATUM</span>, <span class="s16">FETCHFN</span>, <span class="s16">STOREFN</span>, <span class="s16">PROPCOMMANDFN</span>, <span class="s16">VALUECOMMANDFN</span>, <span class="s16">SELECTIONFN</span>, <span class="s16">PROPPRINTFN</span>, <span class="s16">INSPECTWTITLE</span>, <span class="s16">PROPERTIES</span>, <span class="s16">CURRENTITEM </span>and <span class="s16">SELECTABLEITEMS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">INSPECTW.REDISPLAY </span><span class="s16">INSPECTW PROPS —</span><span class="s11">)                          </span><span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Updates the display of the objects being inspected in <span class="s11">INSPECTW</span>. If <span class="s16">PROPS </span>is a property name or a list of property names, only those properties are updated. If <span class="s16">PROPS </span>is <span class="s11">NIL</span>, all properties are redisplayed. This function is provided because inspect windows do not automatically update their display when the object they are showing changes.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">This function is called by the <span class="s11">ReFetch </span>command in the title command menu of an</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">INSPECTW <span class="p">(see above).</span></p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">INSPECTW.REPLACE </span><span class="s16">INSPECTW PROPERTY NEWVALUE</span>)                <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Calls the <span class="s11">STOREFN </span>of the inspect window <span class="s16">INSPECTW </span>to change the property named <span class="s16">PROPERTY </span>to the value <span class="s16">NEWVALUE </span>and updates the display of <span class="s16">PROPERTY</span>’s value in the display. This provides a functional interface for user <span class="s11">PROPCOMMANDFNs</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">INSPECTW.SELECTITEM </span><span class="s16">INSPECTW PROPERTY VALUEFLG</span>)             <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Sets the selected item in an inspect window. The item is inverted on the display and put on the window property <span class="s11">CURRENTITEM </span>of <span class="s16">INSPECTW</span>. If <span class="s16">INSPECTW </span>has a <span class="s11">CURRENTITEM</span>, it is deselected. <span class="s16">PROPERTY </span>is the name of the property of the selected item. <span class="s16">VALUEFLG </span>is <span class="s11">NIL </span>if the selected item is the property name; <span class="s11">T </span>if the selected item is the property value. If <span class="s16">PROPERTY </span>is <span class="s11">NIL</span>, no item will be selected. This provides a way of deselecting all items.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 47pt;text-indent: 0pt;text-align: center;">PROMPTFORWORD                                                                                                                                          </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">PROMPTFORWORD <span class="p">is a function that reads in a sequence of characters, generally from the keyboard, without involving </span>READ<span class="p">-like syntax. A user can supply a prompting string, as well as a &quot;candidate&quot; string, which is printed and used if the user types only a word terminator character (or doesn’t type anything before a given time limit). As soon as any characters are typed the &quot;candidate&quot; string is erased and the new input takes its place.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">PROMPTFORWORD <span class="p">accepts user type-in until one of the &quot;word terminator&quot; characters is typed. Normally, the word terminator characters are </span>EOL<span class="p">, </span>ESCAPE<span class="p">, </span>LF<span class="p">, </span>SPACE<span class="p">, or </span>TAB<span class="p">. This list can be changed using the </span>TERMINCHAR<span class="p">.</span>LST <span class="p">argument to </span>PROMPTFORWORD<span class="p">, for example if it is desirable to allow the user to input lines including spaces.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">PROMPTFORWORD <span class="p">also recognizes the following special characters:</span></p><p class="s15" style="padding-top: 8pt;padding-left: 113pt;text-indent: 0pt;line-height: 108%;text-align: left;">Control-A BACKSPACE</p><p class="s15" style="padding-left: 80pt;text-indent: 0pt;line-height: 11pt;text-align: center;">DELETE  <span class="p">Any  of  these  characters  deletes  the  last  character  typed  and appropriately</span></p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">erases it from the echo stream if it is a display stream.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 65pt;text-indent: 0pt;text-align: left;">Control-Q <span class="p">Erases all the type-in so far.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">Control-R <span class="p">Reprints the accumulated string.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 125pt;text-indent: -60pt;line-height: 92%;text-align: justify;">Control-V <span class="p">&quot;Quotes&quot; the next character: after typing Control-V, the next character typed is added to the accumulated string, regardless of any special meaning it has. Allows the user to include editing characters and word terminator characters in the accumulated string.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">Control-W <span class="p">Erases the last word.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: -17pt;text-align: justify;"><span class="s15">? </span>Calls up a &quot;help&quot; facility. The action taken is defined by the <span class="s11">GENERATE?LIST.FN </span>argument to <span class="s11">PROMPTFORWORD </span>(see below). Normally, this prints a list of possible candidates.</p><p class="s12" style="padding-top: 10pt;padding-left: 60pt;text-indent: -6pt;text-align: left;">(<span class="s15">PROMPTFORWORD </span><span class="s16">PROMPT.STR CANDIDATE.STR GENERATE?LIST.FN ECHO.CHANNEL DONTECHOTYPEIN.FLG URGENCY.OPTION TERMINCHARS.LST KEYBD.CHANNE</span>)<span class="s16">L</span></p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[Function]</p><p class="s11" style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">PROMPTFORWORD <span class="p">has a multiplicity of features, which are specified through a rather large number of input arguments, but the default settings for them (i.e., when they aren’t given, or are given as </span>NIL<span class="p">) is such to minimize the number needed in the average case, and an attempt has been made to order the more frequently non-defaulted arguments at the beginning of the argument list. The default input and echo are both to the terminal; the terminal table in effect during input allows most control characters to be </span>INDICATE<span class="p">’d.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">PROMPTFORWORD <span class="p">returns </span>NIL <span class="p">if a null string is typed; this would occur when no candidate is given and only a terminator is typed, or when the candidate is erased and a terminator is typed with no other input still un-erased. In all other cases, </span>PROMPTFORWORD <span class="p">returns a string.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">PROMPTFORWORD <span class="p">is controlled through the following arguments:</span></p><p style="padding-left: 126pt;text-indent: -66pt;text-align: justify;"><span class="s16">PROMPT.STR </span>If non-<span class="s11">NIL</span>, this is coerced to a string and used for prompting; an additional space is output after this string.</p><p style="padding-left: 126pt;text-indent: -82pt;text-align: justify;"><span class="s16">CANDIDATE.STR </span>If non-<span class="s11">NIL</span>, this is coerced to a string and offered as initial contents of the input buffer.</p><p style="padding-left: 126pt;text-indent: -98pt;line-height: 93%;text-align: justify;"><span class="s16">GENERATE?LIST.FN </span>If non-<span class="s11">NIL</span>, this is either a string to be printed out for help, or a function to be applied to <span class="s16">PROMPT.STR </span>and <span class="s16">CANDIDATE.STR </span>(after both have been coerced to strings), and which should return a list of potential candidates. The help string or list of potential candidates will then be printed on a separate line, the prompt will be restarted, and any type-in will be re-echoed.</p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">Note: If <span class="s16">GENERATE?LIST.FN </span>is a function, its value list will be cached so that it will be run at most once per call to <span class="s11">PROMPTFORWORD</span>.</p><p style="padding-left: 126pt;text-indent: -76pt;text-align: justify;"><span class="s16">ECHO.CHANNEL </span>Coerced to an output stream; <span class="s11">NIL </span>defaults to T, the &quot;terminal output stream&quot;, normally (<span class="s11">TTYDISPLAYSTREAM</span>). To achieve echoing to the &quot;current output stream&quot;, use (<span class="s11">GETSTREAM NIL ’OUTPUT</span>). If echo is to a display stream, it will have a flashing caret showing where the next input is to be echoed.</p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 11pt;text-align: right;"><span class="s16">DONTECHOTYPEIN.FLG </span>If <span class="s11">T</span>, there is no echoing of the input characters. If the value of</p><p class="s16" style="padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">DONTECHOTYPEIN.FLG <span class="p">is a single-character atom or string, that character is</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 174pt;text-indent: 0pt;text-align: justify;">echoed instead of the actual input. For example, <span class="s11">LOGIN </span>prompts for a password with <span class="s16">DONTECHOTYPEIN.FLG </span>being &quot;<span class="s11">*</span>&quot;.</p><p style="padding-left: 174pt;text-indent: -87pt;text-align: justify;"><span class="s16">URGENCY.OPTION </span>If <span class="s11">NIL</span>, <span class="s11">PROMPTFORWORD </span>quietly wait for input, as <span class="s11">READ </span>does; if a number, this is the number of seconds to wait for the user to respond (if timeout is reached, then <span class="s16">CANDIDATE.WORD </span>is returned, regardless of any other type-in activity); if <span class="s11">T</span>, this means to wait forever, but periodically flash the window to alert the user; if <span class="s11">TTY</span>, then <span class="s11">PROMPTFORWORD </span>grabs the <span class="s11">TTY </span>immediately. When <span class="s11">URGENCY.OPTION = TTY</span>, the cursor is temporarily changed to a different shape to indicate the urgent nature of the request.</p><p class="s16" style="padding-left: 81pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">TERMINCHARS.LST <span class="p">This is list of &quot;word terminator&quot; character codes; it defaults to </span><span class="s11">(CHARCODE</span></p><p class="s11" style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(EOL ESCAPE LF SPACE TAB))<span class="p">. This may also be a single character code.</span></p><p style="padding-left: 173pt;text-indent: -82pt;text-align: justify;"><span class="s16">KEYBD.CHANNEL </span>If non-<span class="s11">NIL</span>, this is coerced to a stream, and the input bytes are taken from that stream. <span class="s11">NIL </span><span class="s5">defaults to the </span>keyboard input stream. Note that this is not the same as the terminal input stream <span class="s11">T</span>, which is a buffered keyboard input stream, not suitable for use with <span class="s11">PROMPTFORWORD</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Examples:</p><p class="s12" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s13">PROMPTFORWORD</span></p><p class="s11" style="padding-left: 214pt;text-indent: 0pt;text-align: left;">&quot;What is your FOO word?&quot; ’Mumble</p><p class="s12" style="padding-left: 216pt;text-indent: 0pt;text-align: left;">(<span class="s13">FUNCTION </span>(<span class="s13">LAMBDA </span>() ’(Grumble Bletch)))</p><p class="s11" style="padding-left: 216pt;text-indent: 0pt;text-align: left;">PROMPTWINDOW NIL 30<span class="s14">)</span></p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;">This first prompts the user for input by printing the first argument as a prompt into <span class="s11">PROMPTWINDOW</span>; then the proffered default answer, <span class="s11">Mumble</span>, is printed out and the caret starts flashing just after it to indicate that the upcoming input will be echoed there. If the user fails to complete a word within 30 seconds, then the result will be the string <span class="s11">Mumble</span>.</p><p class="s11" style="padding-top: 8pt;padding-left: 197pt;text-indent: 0pt;line-height: 108%;text-align: left;">(FRESHLINE T) (LIST</p><p class="s11" style="padding-left: 214pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PROMPTFORWORD</p><p class="s11" style="padding-left: 230pt;text-indent: 0pt;line-height: 108%;text-align: left;">(CONCAT &quot;{&quot; HOST &quot;} Login:&quot;) (USERNAME NIL NIL T))</p><p class="s11" style="padding-left: 214pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PROMPTFORWORD</p><p class="s11" style="padding-left: 230pt;text-indent: 0pt;text-align: left;">&quot; (password)&quot; NIL NIL NIL ’*))</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This first prompts in whatever window is currently (<span class="s11">TTYDISPLAYSTREAM</span>), and then takes in a username; the second call prompts with (password) and takes in another word (the password) without proffering a candidate, echoing the typed-in characters as &quot;<span class="s11">*</span>&quot;.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">ASKUSER                                                                                                                                                           </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">DWIM<span class="p">, the compiler, the editor, and many other system packages all use </span>ASKUSER<span class="p">, an extremely general user interaction package, for their interactions with the user at the terminal.  </span>ASKUSER <span class="p">takes as its principal argument </span>KEYLST <span class="p">which is used to drive the interaction. </span>KEYLST <span class="p">specifies what the user can type at any given point, how </span>ASKUSER <span class="p">should respond to the various inputs, what value should be returned by </span>ASKUSER<span class="p">, and is also used to present the user at any given point with a list of the</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">possible responses. <span class="s11">ASKUSER </span>also takes other arguments which permit specifying a wait time, a default value, a message to be printed on entry, a flag indicating whether or not typeahead is to be permitted, a flag indicating whether the transaction is to be stored on the history list (see Chapter 13), a default set of options, and an (optional) input file / string.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(<span class="s15">ASKUSER </span><span class="s16">WAIT DEFAULT MESS KEYLST TYPEAHEAD LISPXPRNTFLG OPTIONSLST</span></p><p class="s16" style="padding-left: 60pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FILE<span class="s12">) </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">WAIT </span>is either <span class="s11">NIL </span>or a number (of seconds). <span class="s16">DEFAULT </span>is a single character or a sequence (list) of characters to be used as the default inputs for the case when <span class="s16">WAIT </span>is not <span class="s11">NIL </span>and more than <span class="s16">WAIT </span>seconds elapse without any input. In this case, the character(s) from <span class="s16">DEFAULT </span>are processed exactly as though they had been typed, except that <span class="s11">ASKUSER </span>first types &quot;<span class="s11">...</span>&quot;.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">MESS </span>is the initial message to be printed by <span class="s11">ASKUSER</span>, if any, and can be a string, or a list. In the latter case, each element of the list is printed, separated by spaces, and terminated with a &quot; <span class="s11">? </span>&quot;. <span class="s16">KEYLST </span>and <span class="s16">OPTIONSLST </span>are described. <span class="s16">TYPEAHEAD </span>is <span class="s11">T </span>if the user is permitted to typeahead a response to <span class="s11">ASKUSER</span>. <span class="s11">NIL </span>means any typeahead should be cleared and saved. <span class="s16">LISPXPRNTFLG </span>determines whether or not the interaction is to be recorded on the history list. <span class="s16">FILE </span>can be either <span class="s11">NIL </span>(in which case it defaults to the terminal input stream, T) or a stream.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">All input operations take place from <span class="s16">FILE </span>until an unacceptable input is encountered, i.e., one that does not conform to the protocol defined by <span class="s16">KEYLST</span>. At that point, <span class="s16">FILE </span>is set to <span class="s11">T</span>, <span class="s16">DEFAULT </span>is set to <span class="s11">NIL</span>, the input buffer is cleared, and a bell is rung. Unacceptable inputs are not echoed.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The value of <span class="s11">ASKUSER </span>is the result of packing all the keys that were matched, unless the</p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">RETURN <span class="p">option is specified (see the Options section below).</span></p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">MAKEKEYLST </span><span class="s16">LST DEFAULTKEY LCASEFLG AUTOCOMPLETEFLG</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">LST </span>is a list of atoms or strings. <span class="s11">MAKEKEYLST </span>returns an <span class="s11">ASKUSER KEYLST </span>which will permit the user to specify one of the elements on <span class="s16">LST </span>by either typing enough characters to make the choice unambiguous, or else typing a number between 1 and N, where N is the length of <span class="s16">LST</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, if <span class="s11">ASKUSER </span>is called with <span class="s11">KEYLST = (MAKEKEYLST ’(CONNECT SUPPORT COMPILE))</span>, then the user can type <span class="s11">C-O-N</span>, <span class="s11">S</span>, <span class="s11">C-O-M</span>, <span class="s11">1</span>, <span class="s11">2</span>, or <span class="s11">3 </span>to indicate one of the three choices.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">LCASEFLG </span><span class="s11">= T</span>, then echoing of upper case elements will be in lower case (but the value returned will still be one of the elements of <span class="s11">LST</span>). If <span class="s16">DEFAULTKEY </span>is non-<span class="s11">NIL</span>, it will be the last key on the <span class="s11">KEYLST</span>. Otherwise, a key which permits the user to indicate &quot;No - none of the above&quot; choices, in which case the value returned by <span class="s11">ASKUSER </span>will be <span class="s11">NIL</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">AUTOCOMPLETEFLG <span class="p">is used as the value of the </span>AUTOCOMPLETEFLG <span class="p">option of the resulting key list.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Format of KEYLST</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">KEYLST <span class="p">is a list of elements of the form </span>(KEY PROMPTSTRING . OPTIONS)<span class="p">, where </span>KEY <span class="p">is an atom or a string (equivalent), </span>PROMPTSTRING <span class="p">is an atom or a string, and </span>OPTIONS <span class="p">a list of options in property list format. The options are explained below. If an option is specified in </span>OPTIONS<span class="p">, the value of the option is the next element.  Otherwise, if the option is specified in the </span>OPTIONSLST <span class="p">argument to </span>ASKUSER<span class="p">, its value is the next element on </span>OPTIONSLST<span class="p">. Thus, </span>OPTIONSLST <span class="p">can be used to provide default options for an entire </span>KEYLST<span class="p">, rather than having to include the option at each level. If an option does not appear on either </span>OPTIONS <span class="p">or </span>OPTIONSLST<span class="p">, its value is </span>NIL<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">For convenience, an entry on <span class="s11">KEYLST </span>of the form <span class="s11">(KEY . ATOM/STRING)</span>, can be used as an abbreviation for <span class="s11">(KEY ATOM/STRING CONFIRMFLG T)</span>, and an entry of just the form <span class="s11">KEY</span>, i.e., a non-list, as an abbreviation for (<span class="s11">KEY NIL CONFIRMFLG T)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">As each character is read, it is matched against the currently active keys. A character matches a key if it is the same character as that in the corresponding position in the key, or, if the character is an alphabetic character, if the characters are the same without regard for upper / lower case differences,</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">i.e. &quot;<span class="s11">A</span>&quot; matches &quot;<span class="s11">a</span>&quot; and vice versa (unless the <span class="s11">NOCASEFLG </span>option is <span class="s11">T</span>, see the Options section below). In other words, if two characters have already been input and matched, the third character is matched with each active key by comparing it with the third character of that key. If the character matches with one or more of the keys, the entries on <span class="s11">KEYLST </span>corresponding to the remaining keys are discarded. If the character does not match with any of the keys, the character is not echoed, and a bell is rung instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">When a key is complete, <span class="s11">PROMPTSTRING </span>is printed (<span class="s11">NIL </span>is equivalent to <span class="s11">&quot;&quot;</span>, the empty string, i.e., nothing will be printed). Then, if the value of the <span class="s11">CONFIRMFLG </span>option is <span class="s11">T</span>, <span class="s11">ASKUSER </span>waits for confirmation of the key by a carriage return or space. Otherwise, the key does not require confirmation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Then, if the value of the <span class="s11">KEYLST </span>option is not <span class="s11">NIL</span>, its value becomes the new <span class="s11">KEYLST</span>, and the process recurses. Otherwise, the key is a &quot;leaf,&quot; i.e., it terminates a particular path through the original, top-level <span class="s11">KEYLST</span>, and <span class="s11">ASKUSER </span>returns the result of packing all the keys that have been matched and completed along the way (unless the <span class="s11">RETURN </span>option is used to specify some other value, as described below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example, when <span class="s11">ASKUSER </span>is called with <span class="s11">KEYLST = NIL</span>, the following <span class="s11">KEYLST </span>is used as the default:</p><p class="s11" style="padding-top: 7pt;padding-left: 27pt;text-indent: 0pt;text-align: center;">((Y &quot;escr&quot;) (N &quot;ocr&quot;))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">This <span class="s11">KEYLST </span>specifies that if (as soon as) the user types <span class="s11">Y </span>(or <span class="s11">y</span>), <span class="s11">ASKUSER </span>echoes with <span class="s11">Y</span>, prompts with escr, and returns <span class="s11">Y </span>as its value. Similarly, if the user types <span class="s11">N</span>, <span class="s11">ASKUSER </span>echoes the <span class="s11">N</span>, prompts with ocr, and returns <span class="s11">N</span>.  If the user types <span class="s11">?</span>, <span class="s11">ASKUSER </span>prints:</p><p class="s11" style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;line-height: 137%;text-align: left;">Yes No</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">to indicate his possible responses. All other inputs are unacceptable, and <span class="s11">ASKUSER </span>will ring the bell and not echo or print anything.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">For a more complicated example, the following is the <span class="s11">KEYLST </span>used for the compiler questions:</p><p class="s11" style="padding-top: 7pt;padding-left: 149pt;text-indent: 0pt;line-height: 108%;text-align: left;">((ST &quot;ore and redefine &quot; KEYLST (&quot;&quot; (F . &quot;orget exprs&quot;))</p><p class="s11" style="padding-left: 155pt;text-indent: 0pt;line-height: 108%;text-align: left;">(S . &quot;ame as last time&quot;) (F . &quot;File only&quot;)</p><p class="s11" style="padding-left: 155pt;text-indent: 0pt;line-height: 108%;text-align: left;">(T . &quot;o terminal&quot;) 1</p><p class="s11" style="padding-left: 155pt;text-indent: 0pt;line-height: 10pt;text-align: left;">2</p><p class="s11" style="padding-left: 155pt;text-indent: 0pt;text-align: left;">(Y . &quot;es&quot;)</p><p class="s11" style="padding-left: 155pt;text-indent: 0pt;text-align: left;">(N . &quot;o&quot;))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">When <span class="s11">ASKUSER </span>is called with this <span class="s11">KEYLST</span>, and the user types an <span class="s11">S</span>, two keys are matched: <span class="s11">ST </span>and <span class="s11">S</span>. The user can then type a <span class="s11">T</span>, which matches only the <span class="s11">ST </span>key, or confirm the <span class="s11">S </span>key by typing a <span class="s53">cr </span>or space. If the user confirms the S key, <span class="s11">ASKUSER </span>prompts with &quot;ame as last time&quot;, and returns S as its value. (Note that the confirming character is not included in the value.) If the user types a <span class="s11">T</span>, <span class="s11">ASKUSER </span>prompts with &quot;ore and redefine&quot;, and makes <span class="s11">(&quot;&quot; (F . &quot;orget exprs&quot;)) </span>be the new <span class="s11">KEYLST</span>, and waits for more input. The user can then type an F, or confirm the <span class="s11">&quot;&quot; </span>(which essentially</p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">starts out with all of its characters matched). If he confirms the <span class="s11">&quot;&quot;, ASKUSER </span>returns <span class="s11">ST </span>as its value the result of packing <span class="s11">ST </span>and &quot;&quot;. If he types <span class="s11">F</span>, <span class="s11">ASKUSER </span>prompts with &quot;orget exprs&quot;, and waits for confirmation again. If the user then confirms, <span class="s11">ASKUSER </span>returns <span class="s11">STF</span>, the result of packing <span class="s11">ST </span>and <span class="s11">F</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">At any point the user can type a <span class="s11">? </span>and be prompted with the possible responses. For example, if the user types <span class="s11">S </span>and then <span class="s11">?</span>, <span class="s11">ASKUSER </span>will type:</p><p class="s11" style="padding-top: 8pt;padding-left: 150pt;text-indent: 0pt;line-height: 108%;text-align: left;">STore and redefine Forget exprs STore and redefine</p><p class="s11" style="padding-left: 150pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Same as last time</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Options</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 56pt;text-indent: -44pt;text-align: justify;">KEYLST <span class="p">When a key is complete, if the value of the </span>KEYLST <span class="p">option is not </span>NIL<span class="p">, this value becomes the new </span>KEYLST <span class="p">and the process recurses. Otherwise, the key terminates a path through the original, top-level </span>KEYLST<span class="p">, and </span>ASKUSER <span class="p">returns the indicated value.</span></p><p class="s11" style="padding-left: 126pt;text-indent: -66pt;text-align: justify;">CONFIRMFLG <span class="p">If </span>T<span class="p">, the key must be confirmed with either a carriage return or a space. If the value of </span>CONFIRMFLG <span class="p">is a list, the confirming character may be any member of the list.</span></p><p class="s11" style="padding-left: 126pt;text-indent: -98pt;text-align: justify;">PROMPTCONFIRMFLG <span class="p">If </span>T<span class="p">, whenever confirmation is required, the user is prompted with the string [confirm].</span></p><p class="s11" style="padding-left: 126pt;text-indent: -60pt;text-align: justify;">NOCASEFLG <span class="p">If </span>T<span class="p">, says do not perform case independent matching on alphabetic characters. If </span>NIL<span class="p">, do perform case independent matching, i.e. &quot;</span>A<span class="p">&quot; matches with &quot;</span>a<span class="p">&quot; and vice versa.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 174pt;text-indent: -44pt;text-align: justify;">RETURN <span class="p">If non-</span>NIL<span class="p">, </span>EVAL <span class="p">of the value of the </span>RETURN <span class="p">option is returned as the value of </span>ASKUSER<span class="p">. Note that different </span>RETURN <span class="p">options can be specified for different keys. The variable </span>ANSWER <span class="p">is bound in </span>ASKUSER <span class="p">to the list of keys that have been matched. In other words, </span>RETURN (PACK ANSWER) <span class="p">would be equivalent to what </span>ASKUSER <span class="p">normally does.</span></p><p class="s11" style="padding-left: 174pt;text-indent: -60pt;line-height: 94%;text-align: justify;">NOECHOFLG <span class="p">If non-</span>NIL<span class="p">, characters that are matched (or automatically supplied as a result of typing </span>$ <span class="p">(escape) or confirming) are not echoed, nor is the confirming character, if any. The value of </span>NOECHOFLG <span class="p">is automatically </span>NIL <span class="p">when </span>ASKUSER <span class="p">is reading from a file or string. The decision about whether or not to echo a character that matches several keys is determined by the value of the </span>NOECHOFLG <span class="p">option for the first key.</span></p><p class="s11" style="padding-left: 174pt;text-indent: -82pt;line-height: 94%;text-align: justify;">EXPLAINSTRING <span class="p">If the value of the </span>EXPLAINSTRING <span class="p">option is non-</span>NIL<span class="p">, its value is printed when the user types a </span>?<span class="p">, rather than </span>KEY + PROMPTSTRING<span class="p">. </span>EXPLAINSTRING <span class="p">enables more elaborate explanations in response to a ? than what the user sees when he is prompted as a result of simply completing keys. For example: One of the entries on the </span>KEYLST <span class="p">used by </span>ADDTOFILES<span class="p">? is:</span></p><p class="s11" style="padding-top: 1pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">(] &quot;Nowherecr&quot; NOECHOFLG T</p><p class="s11" style="padding-left: 174pt;text-indent: 6pt;line-height: 108%;text-align: left;">EXPLAINSTRING &quot;] - nowhere, item is marked as a dummycr&quot;)</p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 11pt;text-align: left;">When the user types <span class="s11">]</span>, <span class="s11">ASKUSER </span>just prints Nowherecr, i.e., the <span class="s11">] </span>is not</p><p style="padding-left: 174pt;text-indent: 0pt;text-align: left;">echoed. If the user types <span class="s11">?</span>, the explanation corresponding to this entry will be:</p><p style="padding-left: 180pt;text-indent: 0pt;line-height: 11pt;text-align: left;">] - nowhere, item is marked as a dummy</p><p class="s11" style="padding-left: 174pt;text-indent: -60pt;line-height: 94%;text-align: justify;">KEYSTRING <span class="p">If non-</span>NIL<span class="p">, characters that are matched are echoed as though the value of </span>KEYSTRING <span class="p">were used in place of the key. </span>KEYSTRING <span class="p">is also used for computing the value returned. The main reason for this feature is to enable echoing in lowercase.</span></p><p class="s11" style="padding-left: 118pt;text-indent: 0pt;line-height: 11pt;text-align: left;">PROMPTON <span class="p">If non-</span>NIL<span class="p">, </span>PROMPTSTRING <span class="p">is printed only when the key is confirmed with a</span></p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">member of the value of <span class="s11">PROMPTON</span>.</p><p class="s11" style="padding-left: 174pt;text-indent: -66pt;line-height: 93%;text-align: justify;">COMPLETEON <span class="p">When a confirming character is typed, the </span>N <span class="p">characters that are automatically supplied, as specified in case (4), are echoed only when the key is confirmed with a member of the value of </span>PROMPTON<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s11">PROMPTON </span>and <span class="s11">COMPLETEON </span>options enable the user to construct a <span class="s11">KEYLST </span>which will cause <span class="s11">ASKUSER </span>to emulate the action of the <span class="s11">TENEX </span>exec. The protocol followed by the <span class="s11">TENEX </span>exec is that the user can type as many characters as he likes in specifying a command. The command can be completed with a carriage return or space, in which case no further output is forthcoming, or with a <span class="s11">$ </span>(escape), in which case the rest of the characters in the command are echoed, followed by some prompting information. The following <span class="s11">KEYLST </span>would handle the <span class="s11">TENEX COPY </span>and <span class="s11">CONNECT </span>comands:</p><p class="s11" style="padding-top: 7pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">((COPY &quot; (FILE LIST) &quot;</p><p class="s11" style="padding-left: 234pt;text-indent: 0pt;line-height: 108%;text-align: left;">PROMPTON ($) COMPLETEON ($) CONFIRMFLG ($))</p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(CONNECT &quot; (TO DIRECTORY) &quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 186pt;text-indent: 0pt;line-height: 108%;text-align: left;">PROMPTON ($) COMPLETEON ($) CONFIRMFLG ($)))</p><p class="s11" style="padding-left: 33pt;text-indent: 0pt;line-height: 11pt;text-align: left;">AUTOCOMPLETEFLG <span class="p">If the value of the </span>AUTOCOMPLETEFLG <span class="p">option is not </span>NIL<span class="p">, </span>ASKUSER <span class="p">will</span></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">automatically supply unambiguous characters whenever it can, i.e., <span class="s11">ASKUSER </span>acts as though <span class="s11">$ </span>(escape) were typed after each character (except that it does not ring the bell if there are no unambiguous characters).</p><p class="s11" style="padding-left: 126pt;text-indent: -66pt;text-align: justify;">MACROCHARS <span class="p">value is a list of dotted pairs of form </span>(CHARACTER . FORM)<span class="p">. When </span>CHARACTER <span class="p">is typed, and it does not match any of the current keys, </span>FORM <span class="p">is evaluated and nothing else happens, i.e. the matching process stays where it is. For example, </span>? <span class="p">could have been implemented using this option. Essentially </span>MACROCHARS <span class="p">provides a read macro facility while inside of </span>ASKUSER <span class="p">(since </span>ASKUSER <span class="p">does </span>READC<span class="p">’s, read macros defined via the readtable are never invoked).</span></p><p class="s11" style="padding-left: 125pt;text-indent: -98pt;line-height: 93%;text-align: justify;">EXPLAINDELIMITER <span class="s5">value is what is printed to delimit explanation in </span><span class="p">response to </span>?<span class="p">. Initially a carriage return, but can be reset, e.g. to a comma, for more linear output.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Operation</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">All input operations are executed with the terminal table in the variable <span class="s11">ASKUSERTTBL</span>, in which the following is true:</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">•</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">(CONTROL T) <span class="p">has been executed (see the Line-Buffering section of Chapter 30), so that </span>ASKUSER <span class="p">can interact with the user after each character is typed</span></p><p class="s11" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">(ECHOMODE NIL) <span class="p">has been executed (see the Terminal Control Functions section of Chapter 30), so that </span>ASKUSER <span class="p">can decide after it reads a character whether or not the character should be echoed, and with what, e.g. unacceptable inputs are never echoed.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">As each character is typed, it is matched against <span class="s11">KEYLST</span>, and appropriate echoing and / or prompting is performed. If the user types an unacceptable character, <span class="s11">ASKUSER </span>simply rings the bell and allows him to try again.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">At any point, the user can type <span class="s11">? </span>and receive a list of acceptable responses at that point (generated from <span class="s11">KEYLST</span>), or type a Control-A, Control-Q, Control-X, or delete, which causes <span class="s11">ASKUSER </span>to reinitialize, and start over.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Note that <span class="s11">?</span>, Control-A, Control-Q, and Control-X will not work if they are acceptable inputs, i.e., they match one of the keys on <span class="s11">KEYLST</span>. Delete will not work if it is an interrupt character, in which case it is not seen by <span class="s11">ASKUSER</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">When an acceptable sequence is completed, <span class="s11">ASKUSER </span>returns the indicated value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Completing a Key</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The decision about when a key is complete is more complicated than simply whether or not all of its characters have been matched. In the compiler questions example above, all of the characters in the <span class="s11">S </span>key are matched as soon as the <span class="s11">S </span>has been typed, but until the next character is typed, <span class="s11">ASKUSER </span>does not know whether the <span class="s11">S </span>completes the <span class="s11">S </span>key, or is simply the first character in the <span class="s11">ST </span>key. Therefore, a key is considered to be complete when:</p><ol id="l65"><ol id="l66"><li><p style="padding-top: 6pt;padding-left: 114pt;text-indent: -18pt;line-height: 91%;text-align: justify;">All of its characters have been matched and it is the only key left, i.e., there are no other keys for which this key is a substring.</p></li><li><p style="padding-top: 6pt;padding-left: 114pt;text-indent: -18pt;text-align: left;">All of its characters have been matched and a confirming character is typed.</p></li><li><p style="padding-top: 6pt;padding-left: 114pt;text-indent: -18pt;text-align: justify;">All of its characters have been matched, and the value of the <span class="s11">CONFIRMFLG </span>option is <span class="s11">NIL</span>, and the value of the <span class="s11">KEYLST </span>option is not <span class="s11">NIL</span>, and the next character matches one of the keys on the value of the <span class="s11">KEYLST </span>option.</p></li><li><p style="padding-top: 7pt;padding-left: 114pt;text-indent: -18pt;line-height: 93%;text-align: justify;">There is only one key left and a confirming character is typed. Note that if the value of <span class="s11">CONFIRMFLG </span>is <span class="s11">T</span>, the key still has to be confirmed, regardless of whether or not it is complete. For example, if the first entry in the above example were instead</p></li></ol></ol><p class="s11" style="padding-top: 8pt;padding-left: 114pt;text-indent: 0pt;line-height: 108%;text-align: justify;">(ST &quot;ore and redefine &quot; CONFIRMFLG T KEYLST (&quot;&quot; (F . &quot;orget exprs&quot;))</p><p style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;text-align: justify;">and the user wanted to specify the <span class="s11">STF </span>path, he would have to type <span class="s11">ST</span>, then confirm before typing <span class="s11">F</span>, even though the <span class="s11">ST </span>completed the <span class="s11">ST </span>key by the rule in Case 1. However, he would be prompted with ore and redefine as soon as he typed the <span class="s11">T</span>, and completed the <span class="s11">ST </span>key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Case 2 says that confirmation can be used to complete a key in the case where it is a substring of another key, even where the value of <span class="s11">CONFIRMFLG </span>is <span class="s11">NIL</span>. In this case, the confirming character doubles as both an indicator that the key is complete, and also to confirm it, if necessary. This situation corresponds to typing <span class="s11">Scr </span>in the above example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Case 3 says that if there were another entry whose key was <span class="s11">STX </span>in the above example, so that after the user typed <span class="s11">ST</span>, two keys, <span class="s11">ST </span>and <span class="s11">STX</span>, were still active, then typing <span class="s11">F </span>would complete the <span class="s11">ST </span>key, because <span class="s11">F </span>matches the <span class="s11">(F . &quot;orget exprs&quot;) </span>entry on the value of the <span class="s11">KEYLST </span>option of the <span class="s11">ST </span>entry.  In this case, ore and redefine would be printed before the <span class="s11">F </span>was echoed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Finally, Case 4 says that the user can use confirmation to specify completion when only one key is left, even when all of its characters have not been matched. For example, if the first key in the above example were <span class="s11">STORE</span>, the user could type <span class="s11">ST </span>and then confirm, and <span class="s11">ORE </span>would be echoed, followed by whatever prompting was specified. In this case, the confirming character also confirms the key if necessary, so that no further action is required, even when the value of <span class="s11">CONFIRMFLG </span>is <span class="s11">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Case 4 permits the user not to have to type every character in a key when the key is the only one left. Even when there are several active keys, the user can type &lt;escape&gt; to specify the next N&gt;0 common characters among the currently active keys. The effect is exactly the same as though these characters</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">had been typed. If there are no common characters in the active keys at that point, i.e. <span class="s11">N = 0</span>, the <span class="s11">$ </span>is treated as an incorrect input, and the bell is rung.  For example, if <span class="s11">KEYLST </span>is <span class="s11">(CLISPFLG CLISPIFYPACKFLG CLISPIFTRANFLG)</span>, and the user types <span class="s11">C </span>followed by <span class="s11">$, ASKUSER </span>will supply the <span class="s11">L</span>, <span class="s11">I</span>, <span class="s11">S</span>, and <span class="s11">P</span>. The user can then type <span class="s11">F </span>followed by a carriage return or space to complete and confirm <span class="s11">CLISPFLG</span>, as per Case 4, or type <span class="s11">I</span>, followed by <span class="s11">$</span>, and <span class="s11">ASKUSER </span>will supply the <span class="s11">F</span>, etc. Note that the characters supplied do not have to correspond to a terminal segment of any of the keys. Note also that the <span class="s11">$ </span>does not confirm the key, although it may complete it in the case that there is only one key active.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If the user types a confirming character when several keys are left, the next N&gt;0 common characters are still supplied, the same as with <span class="s11">$</span>. However, <span class="s11">ASKUSER </span>assumes the intent was to complete a key, i.e., Case 4 is being invoked. Therefore, after supplying the next N characters, the bell is rung to indicate that the operation was not completed. In other words, typing a confirming character has the same effect as typing an <span class="s11">$ </span>in that the next N common characters are supplied. Then, if there is only one key left, the key is complete (Case 4) and confirmation is not required. If the key is not the only key left, the bell is rung.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Special Keys</p><p class="s11" style="padding-top: 4pt;padding-left: 125pt;text-indent: -17pt;line-height: 92%;text-align: justify;">&amp; <span class="p">This can be used as a key to match with any single character, provided the character does not match with some other key at that level. For the purposes of echoing and returning a value, the effect is the same as though the character that were matched actually appeared as the key.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: -48pt;text-align: left;">&lt;escape&gt; This can be used as a key to match with the result of a single call to <span class="s11">READ</span>. For example, if the <span class="s11">KEYLST </span>were:</p><p class="s11" style="padding-top: 8pt;padding-left: 186pt;text-indent: 0pt;text-align: left;">((COPY &quot; (FILE LIST) &quot;</p><p class="s11" style="padding-left: 222pt;text-indent: 0pt;line-height: 108%;text-align: left;">PROMPTON ($) COMPLETEON ($) CONFIRMFLG ($)</p><p class="s11" style="padding-left: 222pt;text-indent: 0pt;line-height: 10pt;text-align: left;">KEYLST (($ NIL RETURN ANSWER))))</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">then if the user typed <span class="s11">COP FOOcr</span>, <span class="s11">(COPY FOO) </span>would be returned as the value of <span class="s11">ASKUSER</span>. One advantage of using <span class="s11">$</span>, rather than having the calling program perform the <span class="s11">READ</span>, is that the call to <span class="s11">READ </span>from inside <span class="s11">ASKUSER </span>is <span class="s11">ERRORSET </span>protected, so that the user can back out of this path and reinitialize <span class="s11">ASKUSER</span>, e.g. to change from a <span class="s11">COPY </span>command to a <span class="s11">CONNECT </span>command, simply by typing Control-E.</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Escape Escape This can be used as a key to match with the result of a single call to</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">READLINE<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: -33pt;line-height: 93%;text-align: justify;">A list A list can be used as a key, in which case the list / form is evaluated and its value &quot;matches&quot; the key. This feature is provided primarily as an escape hatch for including arbitrary input operations as part of an <span class="s11">ASKUSER </span>sequence. For example, the effect of <span class="s11">$$ </span>(escape, escape) could be achieved simply by using <span class="s11">(READLINE T) </span>as a key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 173pt;text-indent: -22pt;text-align: justify;">&quot;&quot; <span class="p">The empty string can be used as a key. Since it has no characters, all of its characters are automatically matched. </span>&quot;&quot; <span class="p">essentially functions as a place marker. For example, one of the entries on the </span>KEYLST <span class="p">used by </span>ADDTOFILES? <span class="p">is:</span></p><p class="s11" style="padding-top: 8pt;padding-left: 215pt;text-indent: 0pt;text-align: left;">(&quot;&quot; &quot;File/list: &quot;</p><p class="s11" style="padding-left: 215pt;text-indent: 0pt;line-height: 108%;text-align: left;">EXPLAINSTRING &quot;a file name or name of a function list&quot;</p><p class="s11" style="padding-top: 7pt;padding-left: 144pt;text-indent: 0pt;text-align: left;">KEYLST ($))</p><p style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Thus, if the user types a character that does not match any of the other keys on the <span class="s11">KEYLST</span>, then the character completes the <span class="s11">&quot;&quot; </span>key, by virtue of case (4), since the character will match with the <span class="s11">$ </span>in the inner <span class="s11">KEYLST</span>. <span class="s11">ASKUSER </span>then prints File / list: before echoing the character, then calls <span class="s11">READ</span>. The character will be read as part of the <span class="s11">READ</span>. The value returned by <span class="s11">ASKUSER </span>will be the value of the <span class="s11">READ</span>.</p><p style="padding-top: 7pt;padding-left: 198pt;text-indent: -24pt;line-height: 91%;text-align: justify;">Note: For Escape, Escape Escape, or a list, if the last character read by the input operation is a separator, the character is treated as a confirming character for the key. However, if the last character is a break character, it will be matched against the next key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Startup Protocol and Typeahead</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Interlisp permits and encourages the user to typeahead; in actual practice, the user frequently does this. This presents a problem for <span class="s11">ASKUSER</span>. When <span class="s11">ASKUSER </span>is entered and there has been typeahead, was the input intended for <span class="s11">ASKUSER</span>, or was the interaction unanticipated, and the user simply typing ahead to some other program, e.g. the programmer’s assistant? Even where there was no typeahead, i.e., the user starts typing after the call to <span class="s11">ASKUSER</span>, the question remains of whether the user had time to see the message from <span class="s11">ASKUSER </span>and react to it, or simply began typing ahead at an inauspicious moment. Thus, what is needed is an interlock mechanism which warns the user to stop typing, gives him a chance to respond to the warning, and then allows him to begin typing to <span class="s11">ASKUSER</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Therefore, when <span class="s11">ASKUSER </span>is first entered, and the interaction is to take place with a terminal, and typeahead to <span class="s11">ASKUSER </span>is not permitted, the following protocol is observed:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l67"><li><p style="padding-left: 65pt;text-indent: -18pt;text-align: justify;">If there is typeahead, <span class="s11">ASKUSER </span>clears and saves the input buffers and rings the bell to warn the user to stop typing. The buffers will be restored when <span class="s11">ASKUSER </span>completes operation and returns.</p></li><li><p style="padding-top: 6pt;padding-left: 66pt;text-indent: -18pt;text-align: justify;">If <span class="s11">MESS</span>, the message to be printed on entry, is not <span class="s11">NIL </span>(the typical case), <span class="s11">ASKUSER </span>then prints <span class="s11">MESS </span>if it is a string, otherwise <span class="s11">CAR </span>of <span class="s11">MESS</span>, if <span class="s11">MESS </span>is a list.</p></li><li><p style="padding-top: 7pt;padding-left: 66pt;text-indent: -18pt;line-height: 94%;text-align: justify;">After printing <span class="s11">MESS </span>or <span class="s11">CAR </span>of <span class="s11">MESS</span>, <span class="s11">ASKUSER </span>waits until the output has actually been printed on the terminal to make sure that the user has actually had a chance to see the output. This also give the user a chance to react. <span class="s11">ASKUSER </span>then checks to see if anything additional has been typed in the intervening period since it first warned the user in (1). If something has been typed, <span class="s11">ASKUSER </span>clears it out and again rings the bell. This latter material, i.e., that typed between the entry to <span class="s11">ASKUSER </span>and this point, is discarded and will not be restored since it is not certain whether the user simply reacted quickly to the first warning (bell) and this input is intended for <span class="s11">ASKUSER</span>, or whether the user was in the process of typing ahead when the call to <span class="s11">ASKUSER </span>occurred, and did not stop typing at the first warning, and therefore this input is a continuation of input intended for another program.</p><p style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;">Anything typed after (3) is considered to be intended for <span class="s11">ASKUSER</span>, i.e., once the user sees <span class="s11">MESS </span>or <span class="s11">CAR </span>of <span class="s11">MESS</span>, he is free to respond. For example, <span class="s11">UNDO </span>(see Chapter 13) calls <span class="s11">ASKUSER </span>when the number of undosaves are exceeded for an event with <span class="s11">MESS = (LIST NUMBER-UNDOSAVES &quot;undosaves, continue saving&quot;)</span>. Thus, the user can type a response as soon as <span class="s11">NUMBER-UNDOSAVES </span>is typed.</p></li><li><p class="s11" style="padding-top: 6pt;padding-left: 66pt;text-indent: -18pt;text-align: left;">ASKUSER <span class="p">then types the rest of </span>MESS<span class="p">, if any.</span></p></li><li><p style="padding-top: 7pt;padding-left: 66pt;text-indent: -18pt;line-height: 94%;text-align: justify;">Then <span class="s11">ASKUSER </span>goes into a wait loop until something is typed. If <span class="s11">WAIT</span>, the wait time, is not <span class="s11">NIL</span>, and nothing is typed in <span class="s11">WAIT </span>seconds, <span class="s11">ASKUSER </span>will type &quot;<span class="s11">...</span>&quot; and treat the elements of <span class="s11">DEFAULT</span>, the default value, as a list of characters, and begin processing them exactly as though they had been typed. If the user does type anything within <span class="s11">WAIT </span>seconds, he can then wait as long as he likes, i.e., once something has been typed, <span class="s11">ASKUSER </span>will not use the default value specified in <span class="s11">DEFAULT</span>.</p><p style="padding-top: 7pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;">If the user wants to consider his response for more than <span class="s11">WAIT </span>seconds, and does not want <span class="s11">ASKUSER </span>to default, he can type a carriage return or a space, which are ignored if they are not specified as acceptable inputs by <span class="s11">KEYLST </span>(see below) and they are the first thing typed.</p><p style="padding-top: 6pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;">If the calling program knows that the user is expecting an interaction with <span class="s11">ASKUSER</span>, e.g., another interaction preceded this one, it can specify in the call to <span class="s11">ASKUSER </span>that typeahead is permitted. In this case, <span class="s11">ASKUSER </span>simply notes whether there is any typeahead, then prints <span class="s11">MESS </span>and goes into a wait loop as described above.</p><p style="padding-top: 7pt;padding-left: 66pt;text-indent: 0pt;text-align: justify;">If there is typeahead that contains unacceptable input, <span class="s11">ASKUSER </span>will assume that the typeahead was not intended for <span class="s11">ASKUSER</span>, and will restore the typeahead when it completes operation and returns.</p></li><li><p style="padding-top: 6pt;padding-left: 66pt;text-indent: -18pt;line-height: 91%;text-align: justify;">Finally, if the interaction is not with the terminal, i.e., the optional input file / string is specified, <span class="s11">ASKUSER </span>simply prints <span class="s11">MESS </span>and begins reading from the file / string.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">TTYIN Display Typein Editor                                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">TTYIN <span class="p">is an Interlisp function for reading input from the terminal. It features altmode completion, spelling correction, help facility, and fancy editing, and can also serve as a glorified free text input function. This document is divided into two major sections: how to use </span>TTYIN <span class="p">from the user’s point of view, and from the programmer’s.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">TTYIN <span class="p">exists in implementations for Interlisp-10 and Interlisp-D. The two are substantially compatible, but the capabilities of the two systems differ (Interlisp-D has a more powerful display and allows greater access to the system primitives needed to control it effectively; it also has a mouse, greatly reducing the need for keyboard-oriented editing commands). Descriptions of both are included in this document for completeness, but Interlisp-D users may find large sections irrelevant.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Entering Input With TTYIN</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">There are two major ways of using <span class="s11">TTYIN</span>: set <span class="s11">LISPXREADFN </span>to <span class="s11">TTYIN</span>, so the <span class="s11">LISPX </span>executive uses it to obtain input; and call <span class="s11">TTYIN </span>from within a program to gather text input. Mostly the same rules apply to both; places where it makes a difference are mentioned below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The following characters may be used to edit your input, independent of what kind of terminal you are on. The more <span class="s11">TTYIN </span>knows about your terminal, of course, the nicer some of these will behave. Some functions are performed by one of several characters; any character that you happen to have assigned as an interrupt character will, of couse, not be read by <span class="s11">TTYIN</span>. There is a (somewhat inelegant) way of changing which characters perform which functions, described under <span class="s11">TTYINREADMACROS </span>later on.</p><p class="s15" style="padding-top: 9pt;padding-left: 113pt;text-indent: 0pt;line-height: 88%;text-align: left;">Control-A BACKSPACE</p><p class="s15" style="padding-left: 174pt;text-indent: -44pt;text-align: justify;">DELETE <span class="p">Deletes a character. At the start of the second or subsequent lines of your input, deletes the last character of the previous line.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 174pt;text-indent: -60pt;line-height: 79%;text-align: left;">Control-W <span class="p">Deletes a &quot;word&quot;. Generally this means back to the last space or parenthesis.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 174pt;text-indent: -60pt;line-height: 79%;text-align: left;">Control-Q <span class="p">Deletes the current line, or if the current line is blank, deletes the previous line.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 174pt;text-indent: -60pt;line-height: 79%;text-align: left;">Control-R <span class="p">Refreshes the current line. Two in a row refreshes the whole buffer (when doing multi-line input).</span></p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: -44pt;line-height: 79%;text-align: justify;"><span class="s15">ESCAPE </span>Tries to complete the current word from the spelling list provided to <span class="s11">TTYIN</span>, if any. In the case of ambiguity, completes as far as is uniquely determined, or rings the bell. For <span class="s11">LISPX </span>input, the spelling list may be <span class="s11">USERWORDS </span>(see discussion of <span class="s11">TTYINCOMPLETEFLG</span>.</p><p style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;line-height: 77%;text-align: justify;">Interlisp-10 only: If no spelling list was provided, but the word begins with a &quot;<span class="s11">&lt;</span>&quot;, tries directory name completion (or filename completion if there is already a matching &quot;<span class="s11">&gt;</span>&quot; in the current word).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: -17pt;line-height: 79%;text-align: justify;"><span class="s15">? </span>If typed in the middle of a word will supply alternative completions from the <span class="s11">SPLST </span>argument to <span class="s11">TTYIN </span>(if any). ?<span class="s11">ACTIVATEFLG </span>(see the Assorted Flags section below) must be true to enable this feature.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: -60pt;line-height: 77%;text-align: justify;"><span class="s15">Control-Y </span>Escapes to a Lisp user exec, from which you may return by the command <span class="s11">OK</span>. However, when in <span class="s11">READ </span>mode and the buffer is non- empty, Control-Y is treated as Lisp’s unquote macro instead, so you have to use meta-Control-Y (below) to invoke the user exec.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: -80pt;line-height: 77%;text-align: justify;"><span class="s15">LF </span>in Interlisp-10 Retrieves characters from the previous non-empty buffer when it is able to; e.g., when typed at the beginning of the line this command restores the previous line you typed at <span class="s11">TTYIN</span>; when typed in the middle of a line fills in the remaining text from the old line; when typed following</p><p class="s19" style="padding-left: 125pt;text-indent: 0pt;line-height: 10pt;text-align: justify;"><span class="s11">Q </span><span class="p">or </span><span class="s11">W </span><span class="p">restores what those commands erased.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: -17pt;line-height: 79%;text-align: justify;"><span class="s15">; </span>If typed as the first character of the line means the line is a comment; it is ignored, and <span class="s11">TTYIN </span>loops back for more input.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 74%;text-align: justify;">Note: The exact behaviour of this character is determined by the value of <span class="s11">TTYINCOMMENTCHAR </span>(see the Assorted Flags section below).</p><p class="s15" style="padding-top: 7pt;padding-left: 125pt;text-indent: -60pt;line-height: 79%;text-align: justify;">Control-X <span class="p">Goes to the end of your input (or end of expression if there is an excess right parenthesis) and returns if parentheses are balanced, beeps if not.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">During most kinds of input, <span class="s11">TTYIN </span>is in &quot;autofill&quot; mode: if a space is typed near the right margin, a carriage return is simulated to start a new line. In fact, on cursor-addressable displays, lines are always broken, if possible, so that no word straddles the end of the line. The &quot;pseudo-carriage return&quot; ending the line is still read as a space, however; i.e., the program keeps track of whether a line ends in a carriage return or is merely broken at some convenient point. You won’t get carriage returns in your strings unless you explicitly type them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Mouse Commands</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The mouse buttons are interpreted as follows during <span class="s11">TTYIN </span>input:</p><p class="s11" style="padding-top: 8pt;padding-left: 126pt;text-indent: -33pt;line-height: 79%;text-align: justify;">LEFT <span class="p">Moves the caret to where the cursor is pointing. As you hold down </span>LEFT<span class="p">, the caret moves around with the cursor; after you let up, any typein will be inserted at the new position.</span></p><p class="s11" style="padding-top: 4pt;padding-left: 81pt;text-indent: 0pt;text-align: justify;">MIDDLE <span class="p">Like </span>LEFT<span class="p">, but moves only to word boundaries.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -39pt;line-height: 77%;text-align: justify;">RIGHT <span class="p">Deletes text from the caret to the cursor, either forward or backward. While you hold down </span>RIGHT<span class="p">, the text to be deleted is complemented; when you let up, the text actually goes away. If you let up outside the scope of the text, nothing is killed (this is how to &quot;cancel&quot; the command). This is roughly the same as </span>CTRL-RIGHT <span class="p">with no initial selection (below).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If you hold down <span class="s11">CTRL </span>and / or <span class="s11">SHIFT </span>while pressing the mouse buttons, you instead get secondary selection, move selection or delete selection. You make a selection by bugging <span class="s11">LEFT </span>(to select a character) or <span class="s11">MIDDLE </span>(to select a word), and optionally extend the selection either left or right using <span class="s11">RIGHT</span>. While you are doing this, the caret does not move, but your selected text is highlighted in a manner indicating what is about to happen. When you have made your selection (all mouse buttons up now), lift up on <span class="s11">CTRL </span>and / or <span class="s11">SHIFT </span>and the action you have selected will occur, which is:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 7pt;padding-left: 173pt;text-indent: -39pt;line-height: 79%;text-align: left;">SHIFT <span class="p">The selected text as typein at the caret. The text is highlighted with a broken underline during selection.</span></p><p class="s11" style="padding-top: 4pt;padding-left: 140pt;text-indent: 0pt;text-align: left;">CTRL <span class="p">Delete the selected text. The text is complemented during selection.</span></p><p class="s11" style="padding-top: 4pt;padding-left: 108pt;text-indent: 0pt;line-height: 11pt;text-align: left;">CTRL-SHIFT <span class="p">Combines the above: delete the selected text and insert it at the caret.</span></p><p style="padding-left: 173pt;text-indent: 0pt;line-height: 11pt;text-align: left;">This is how you move text about.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">You can cancel a selection in progress by pressing <span class="s11">LEFT </span>or <span class="s11">MIDDLE </span>as if to select, and moving outside the range of the text.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The most recent text deleted by mouse command can be inserted at the caret by typing Middle-blank key (on the Xerox 1132) or the Open key (on the Xerox 1108). This is the same key that retrieves the previous buffer when issued at the end of a line.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Display Editing Commands</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">On terminals with a meta key: In Interlisp-10, <span class="s11">TTYIN </span>reads from the terminal in binary mode, allowing many more editing commands via the meta key, in the style of <span class="s11">TVEDIT </span>commands. Note that due to Tenex’s unfortunate way of handling typeahead, it is not possible to type ahead edit commands before <span class="s11">TTYIN </span>has started (i.e., before its prompt appears), because the meta bit will be thrown away. Also, since Escape has numerous other meanings in Lisp and even in <span class="s11">TTYIN </span>(for completion), this is not used as a substitute for the meta key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">In Interlisp-D: Users will probably have little use for most of these commands, as cursor positioning can often be done more conveniently, and certainly more obviously, with the mouse. Nevertheless, some commands, such as the case changing commands, can be useful. The &lt;bottom-blank&gt; key can be used as an meta key if you perform <span class="s11">(METASHIFT T) </span>(see Chapter 30). Alternatively, you can use the variable <span class="s11">EDITPREFIXCHAR </span>as described in the next paragraph.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">On display terminals without a meta key: If you want to type any of these commands, you need to prefix them with the &quot;edit prefix&quot; character. Set the variable <span class="s11">EDITPREFIXCHAR </span>to the character code of the desired prefix char. Type the edit prefix twice to give an &quot;meta-escape&quot; command. Some users of the <span class="s11">TENEX TVEDIT </span>program like to make escape (33Q) be the edit prefix, but this makes it somewhat awkward to ever use escape completion. <span class="s11">EDITPREFIXCHAR </span>is initially <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">On hardcopy terminals without a meta key: You probably want to ignore this section, since you won’t be able to see what’s going on when you issure edit commands; there is no attempt made to echo anything reasonable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In the descriptions below, &quot;current word&quot; means the word the cursor is under, or if under a space, the previous word. Currently parentheses are treated as spaces, which is usually what you want, but can occasionally cause confusion in the word deletion commands. Most commands can be preceded by numbers or escape (means infinity), only the first of which requires the meta key (or the edit prefix). Some commands also accept negative arguments, but some only look at the magnitude of the arg.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Most of these commands are taken from the display editors <span class="s11">TVEDIT </span>and / or <span class="s11">E</span>, and are confined to work within one line of text unless otherwise noted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Cursor Movement Commands:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="9" height="9" alt="image" src="Image_069.png"/></span></p><p class="s15" style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;line-height: 10pt;text-align: right;">Meta-DELETE</p><p class="s15" style="padding-left: 28pt;text-indent: 0pt;line-height: 8pt;text-align: right;">Meta-BS</p><p class="s15" style="padding-left: 69pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Meta-&lt; <span class="p">Back up one (or n) characters.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: right;">Meta-SPACE</p><p class="s15" style="padding-left: 69pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Meta-&gt; <span class="p">Moves forward one (or n) characters.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 64pt;text-indent: 5pt;line-height: 161%;text-align: left;">Meta-^ <span class="p">Moves up one (or n) lines. </span>Meta-lf <span class="p">Moves down one (or n) lines. </span>Meta-( <span class="p">Moves back one (or n) words. </span>Meta-) <span class="p">Moves ahead one (or n) words.</span></p><p class="s15" style="padding-top: 2pt;padding-left: 113pt;text-indent: -55pt;line-height: 79%;text-align: left;">Meta-TAB <span class="p">Moves to end of line; with an argument moves to nth end of line; </span>Meta-ESC- TAB <span class="p">goes to end of buffer.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Control-Meta-L <span class="p">Moves to start of line (or nth previous, or start of </span><span class="s5">buffer).</span></p><p class="s15" style="padding-top: 9pt;padding-left: 69pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Meta-{</p><p class="s15" style="padding-left: 69pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Meta-} <span class="p">Go to start and end of buffer, respectively.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 113pt;text-indent: -44pt;line-height: 77%;text-align: justify;">Meta-[ <span class="p">Moves to beginning of the current list, where cursor is currently under an element of that list or its closing paren. (See also the auto-parenthesis-matching feature below under &quot;Flags&quot;.)</span></p><p class="s15" style="padding-top: 7pt;padding-left: 69pt;text-indent: 0pt;text-align: left;">Meta-] <span class="p">Moves to end of current list.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 64pt;text-indent: 0pt;text-align: left;">Meta-Sx <span class="p">Skips ahead to next (or nth) occurrence of character x, or rings the bell.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 64pt;text-indent: 0pt;text-align: left;">Meta-Bx <span class="p">Backward search.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Buffer Modification Commands:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 113pt;text-indent: -49pt;line-height: 79%;text-align: justify;">Meta-Zx <span class="p">Zaps characters from cursor to next (or nth) occurrence of x. There is no unzap command yet.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 69pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Meta-A</p><p class="s15" style="padding-left: 113pt;text-indent: -44pt;line-height: 79%;text-align: justify;">Meta-R <span class="p">Repeat the last S, B or Z command, regardless of any intervening input (note this differs from TEdit’s A command).</span></p><p class="s15" style="padding-top: 7pt;padding-left: 69pt;text-indent: 0pt;text-align: left;">Meta-K <span class="p">Kills the character under the cursor, or n chars starting at the cursor.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 113pt;text-indent: -49pt;line-height: 79%;text-align: justify;">Meta-CR <span class="p">When the buffer is empty is the same as </span>LF<span class="p">, i.e. restores buffer’s previous contents. Otherwise is just like a </span>CR <span class="p">(except that it also terminates an insert). Thus, </span>Meta-CR CR <span class="p">will repeat the previous input (as will </span>LF CR <span class="p">without the meta key).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 7pt;padding-left: 161pt;text-indent: -44pt;line-height: 79%;text-align: justify;">Meta-O <span class="p">Does &quot;Open line&quot;, inserting a crlf after the cursor, i.e., it breaks the line but leaves the cursor where it is.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 161pt;text-indent: -44pt;line-height: 77%;text-align: justify;">Meta-T <span class="p">Transposes the characters before and after the cursor. When typed at the end of a line, transposes the previous two characters. Refuses to handle funny cases, such as tabs.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 161pt;text-indent: -44pt;line-height: 79%;text-align: justify;">Meta-G <span class="p">Grabs the contents of the previous line from the cursor position onward. Meta- nG grabs the nth previous line.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 161pt;text-indent: -44pt;line-height: 79%;text-align: justify;">Meta-L <span class="p">Lowercases current word, or n words on line. </span>Meta-ESC-L <span class="p">lowercases the rest of the line, or if given at the end of line lowercases the entire line.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 117pt;text-indent: 0pt;text-align: left;">Meta-U <span class="p">Uppercases analogously.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 161pt;text-indent: -44pt;line-height: 79%;text-align: justify;">Meta-C <span class="p">Capitalize. If you give it an argument, only the first word is capitalized; the rest are just lowercased.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 161pt;text-indent: -84pt;line-height: 79%;text-align: left;">Control-Meta-Q <span class="p">Deletes the current line. </span>Control-Meta-ESC-Q <span class="p">deletes from the current cursor position to the end of the buffer. No other arguments are handled.</span></p><p class="s15" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Control-Meta-W <span class="p">Deletes the current word, or the previous word if sitting on a space.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 161pt;text-indent: -44pt;line-height: 76%;text-align: justify;">Meta-J <span class="p">&quot;Justify&quot; this line. This will break it if it is too long, or move words up from the next line if too short. Will not join to an empty line, or one starting with a tab (both of which are interpreted as paragraph breaks). Any new line breaks it introduces are considered spaces, not carriage returns. </span>Meta-nJ <span class="p">justifies n lines.</span></p><p style="padding-top: 10pt;padding-left: 162pt;text-indent: 0pt;line-height: 79%;text-align: justify;">The linelength is defined as <span class="s11">TTYJUSTLENGTH</span>, ignoring any prompt characters at the margin. If <span class="s11">TTYJUSTLENGTH </span>is negative, it is interpreted as relative to the right margin. <span class="s11">TTYJUSTLENGTH </span>is initially -8 in Interlisp-D, 72 in Interlisp-10.</p><p style="padding-top: 10pt;padding-left: 161pt;text-indent: -66pt;line-height: 79%;text-align: justify;"><span class="s15">Meta-ESC-F </span>&quot;Finishes&quot; the input, regardless of where the cursor is. Specifically, it goes to the end of the input and enters a <span class="s15">CR, control-Z </span>or &quot;&quot;, depending on whether normal, <span class="s11">REPEAT </span>or <span class="s11">READ </span>input is happening. Note that a &quot;&quot; won’t necessarily end a <span class="s11">READ</span>, but it seems likely to in most cases where you would be inclined to use this command, and makes for more predictable behavior.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Miscellaneous Commands:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 161pt;text-indent: -44pt;line-height: 75%;text-align: justify;">Meta-P <span class="p">Interlisp-D: Prettyprint buffer. Clears the buffer and reprints it using prettyprint. If there are not enough right parentheses, it will supply more; if there are too many, any excess remains unprettyprinted at the end of the buffer. May refuse to do anything if there is an unclosed string or other error trying to read the buffer.</span></p><p style="padding-top: 9pt;padding-left: 161pt;text-indent: -44pt;line-height: 77%;text-align: justify;"><span class="s15">Meta-N </span>Refresh line. Same as <span class="s15">Control-R</span>. Meta-ESC-N refreshes the whole buffer; Meta-nN refreshes n lines. Cursor movement in <span class="s11">TTYIN </span>depends on <span class="s11">TTYIN </span>being the only source of output to the screen; if you do a <span class="s15">Control-T</span>, or a system message appears, or line noise occurs, you may need to refresh the line for best results. In Interlisp-10, if for some reason your terminal falls out of binary mode (e.g. can happen when returning to a Lisp running in a lower fork), <span class="s15">Meta-</span></p><p style="padding-left: 162pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">&lt;anything&gt; is unreadable, so you’d have to type <span class="s15">Control-R </span>instead.</p><p class="s15" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Control-Meta-Y <span class="p">Gets user exec. Thus, this is like regular </span>Control-Y<span class="p">, except when doing a </span><span class="s11">READ</span></p><p style="padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">(when control-Y is a read macro and hence does not invoke this function).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 114pt;text-indent: -84pt;line-height: 79%;text-align: justify;"><span class="s15">Control-Meta-ESC-Y </span>Gets a user exec, but first unreads the contents of the buffer from the cursor onward. Thus if you typed at <span class="s11">TTYIN </span>something destined for the Lisp executive, you can do <span class="s15">Control-Meta-L-ESC-Control-Y </span>and give it to Lisp.</p><p style="padding-top: 10pt;padding-left: 113pt;text-indent: -47pt;line-height: 79%;text-align: left;"><span class="s15">Meta-</span><span class="s19"></span><span class="s21"> </span>Adds the current word to the spelling list <span class="s11">USERWORDS</span>. With zero arg, removes word. See <span class="s11">TTYINCOMPLETEFLG </span>(see the Assorted Flags section below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Note to Datamedia, Heath users: In addition to simple cursor movement commands and insert / delete, <span class="s11">TTYIN </span>uses the display’s cursor-addressing capability to optimize cursor movements longer than a few characters, e.g. <span class="s15">Meta-TAB </span>to go to the end of the line. In order to be able to address the cursor, <span class="s11">TTYIN </span>has to know where it is to begin with. Lisp keeps track of the current print position within the line, but does not keep track of the line on the screen (in fact, it knows precious little about displays, much like Tenex). Thus, <span class="s11">TTYIN </span>establishes where it is by forcing the cursor to appear on the last line of the screen. Ordinarily this is the case anyway (except possibly on startup), but if the cursor happens to be only halfway down the screen at the time, there is a possibly unsettling leap of the cursor when <span class="s11">TTYIN </span>starts.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Using TTYIN for Lisp Input</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">When <span class="s11">TTYIN </span>is loaded, or a sysout containing <span class="s11">TTYIN </span>is started up, the function <span class="s11">SETREADFN </span>is called. If the terminal is a display, it sets <span class="s11">LISPXREADFN </span>(see Chapter 13) to be <span class="s11">TTYINREAD</span>. If the terminal is not a display terminal, <span class="s11">SETREADFN </span>will set the variable to <span class="s11">READ</span>. <span class="s11">(SETREADFN ’READ) </span>will also set it to <span class="s11">READ</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">There are two principal differences between <span class="s11">TTYINREAD </span>and <span class="s11">READ</span>: (1) parenthesis balancing.  The input does not activate on an exactly balancing right paren / bracket unless the input started with a paren / bracket, e.g., <span class="s11">USE (FOO) FOR (FIE) </span>will all be on one line, terminated by <span class="s15">CR</span>; and (2) read macros.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">In Interlisp-10, <span class="s11">TTYIN </span>does not use a read table (<span class="s11">TTYIN </span>behaves as though using the default initial Lisp terminal input readtable), so read macros and redefinition of syntax characters are not supported; however, &quot; <span class="s11">’ </span>&quot; <span class="s11">(QUOTE) </span>and &quot;Control-Y&quot; (<span class="s11">EVAL</span>) are built in, and a simple implementation of <span class="s11">? </span>and <span class="s11">?= </span>is supplied. Also, the <span class="s11">TTYINREADMACROS </span>facility described below can supply some of the functionality of immediate read macros in the editor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In Interlisp-D, read macros are (mostly) supported. Immediate read macros take effect only if typed at the end of the input (it’s not clear what their semantics should be elsewhere).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Useful Macros</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">There are two useful edit macros that allow you to use <span class="s11">TTYIN </span>as a character editor: (1) <span class="s11">ED </span>loads the current expression into the ttyin buffer to be edited (this is good for editing comments and strings). Input is terminated in the usual way (by typing a balancing right programmer’s assistant command <span class="s11">FIX </span>will load the buffer with the event’s input, rather than calling the editor. If you really wanted the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Interlisp editor for your fix, you can say <span class="s11">FIX EVENT - TTY</span>: once you got <span class="s11">TTYIN</span>’s version to force you into the editor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Programming With TTYIN</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(<b>TTYIN </b>PROMPT SPLST HELP OPTIONS ECHOTOFILE TABS UNREADBUF RDTBL)</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 11pt;text-align: left;">[Function]</p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">TTYIN <span class="p">prints </span>PROMPT<span class="p">, then waits for input. The value returned in the normal case is a list of all atoms on the line, with comma and parens returned as individual atoms; </span>OPTIONS <span class="p">may be used to get a different kind of value back.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">PROMPT <span class="p">is an atom or string (anything else is converted to a string). If </span>NIL<span class="p">, the value of </span>DEFAULTPROMPT<span class="p">, initially &quot;</span>** <span class="p">&quot;, will be used. If </span>PROMPT <span class="p">is </span>T<span class="p">, no prompt will be given. </span>PROMPT <span class="p">may also be a dotted pair </span>(PROMPT1 . PROMPT2)<span class="p">, giving the prompt for the first and subsequent (or overflow) lines, each prompt being a string / atom or </span>NIL <span class="p">to denote absence of prompt. The default prompt for overflow lines is &quot;</span>...<span class="p">&quot;. Note that rebinding </span>DEFAULTPROMPT <span class="p">gives a convenient way to affect all the &quot;ordinary&quot; prompts in some program module.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">SPLST <span class="p">is a spelling list, i.e., a list of atoms or dotted pairs </span>(SYNONYM . ROOT)<span class="p">. If supplied, it is used to check and correct user responses, and to provide completion if the user types escape. If </span>SPLST <span class="p">is one of the Lisp system spelling lists (e.g., </span>USERWORDS <span class="p">or </span>SPELLINGS3<span class="p">), words that are escape-completed get moved to the front, just as if a </span>FIXSPELL <span class="p">had found them. Autocompletion is also performed when user types a break character (cr, space, paren, etc), unless one of the &quot;nofixspell&quot; options below is selected; i.e., if the word just typed would uniquely complete by escape, </span>TTYIN <span class="p">behaves as though escape had been typed.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">HELP<span class="p">, if non-</span>NIL<span class="p">, determines what happens when the user types </span>? <span class="p">or </span>HELP<span class="p">. If </span>HELP = T<span class="p">, program prints back </span>SPLST <span class="p">in suitable form. If </span>HELP <span class="p">is any other litatom, or a string containing no spaces, it performs </span>(DISPLAYHELP HELP)<span class="p">. Anything else is printed as is. If </span>HELP <span class="p">is </span>NIL<span class="p">, </span>? <span class="p">and </span>HELP <span class="p">are treated as any other atoms the user types. [</span>DISPLAYHELP <span class="p">is a user-supplied function, initially a noop; systems with a suitable </span>HASH <span class="p">package, for example, have defined it to display a piece of text from a hashfile associated with the key </span>HELP<span class="p">.]</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">OPTIONS <span class="p">is an atom or list of atoms chosen from among the following:</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -66pt;text-align: justify;">NOFIXSPELL <span class="p">Uses </span>SPLST <span class="p">for </span>HELP <span class="p">and Escape completion, but does not attempt any </span>FIXSPELL<span class="p">ing. Mainly useful if </span>SPLST <span class="p">is incomplete and the caller wants to handle corrections in a more flexible way than a straight </span>FIXSPELL<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">MUSTAPPROVE <span class="p">Does spelling correction, but requires confirmation.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">CRCOMPLETE <span class="p">Requires confirmation on spelling correction, but also does autocompletion on</span></p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 93%;text-align: justify;">&lt;cr&gt; (i.e. if what user has typed so far uniquely identifies a member of <span class="s11">SPLST</span>, completes it). This allows you to have the benefits of autocompletion and still allow new words to be typed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 125pt;text-indent: -60pt;text-align: left;">DIRECTORY <span class="p">(only if </span>SPLST = NIL<span class="p">) Interprets Escape to mean directory name completion [Interlisp-10 only].</span></p><p class="s11" style="padding-top: 6pt;padding-left: 92pt;text-indent: 0pt;line-height: 12pt;text-align: left;">USER <span class="p">Like </span>DIRECTORY<span class="p">, but does username completion. This is identical to</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">DIRECTORY <span class="p">under Tenex [Interlisp-10 only].</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -33pt;text-align: justify;">FILE <span class="p">(only if </span>SPLST = NIL<span class="p">) Interprets Escape to mean filename completion [Sumex and Tops20 only].</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -28pt;line-height: 94%;text-align: justify;">FIX <span class="p">If response is not on, or does not correct to, </span>SPLST<span class="p">, interacts with user until an acceptable response is entered. A blank line (returning </span>NIL<span class="p">) is always accepted. Note that if you are willing to accept responses that are not on </span>SPLST<span class="p">, you probably should specify one of the options </span>NOXFISPELL<span class="p">, </span>MUSTAPPROVE <span class="p">or </span>CRCOMPLETE<span class="p">, lest the user’s new response get </span>FIXSPELL<span class="p">ed away without their approval.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 81pt;text-indent: 0pt;text-align: left;">STRING <span class="p">Line is read as a string, rather than list of atoms. Good for free text.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">NORAISE <span class="p">Does not convert lower case letters to upper case.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -49pt;text-align: justify;">NOVALUE <span class="p">For use principally with the </span>ECHOTOFILE <span class="p">arg (below). Does not compute a value, but returns </span>T <span class="p">if user typed anything, </span>NIL <span class="p">if just a blank line.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 125pt;text-indent: -44pt;text-align: justify;">REPEAT <span class="p">For multi-line input. Repeatedly prompts until user types Control-Z (as in Tenex sndmsg). Returns one long list; with </span>STRING <span class="p">option returns a single string of everything typed, with carriage returns (</span>EOL<span class="p">) included in the string.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: -33pt;text-align: justify;">TEXT <span class="p">Implies </span>REPEAT<span class="p">, </span>NORAISE<span class="p">, and </span>NOVALUE<span class="p">. Additionally, input may be terminated with Control-V, in which case the global flag </span>CTRLVFLG <span class="p">will be set true (it is set to </span>NIL <span class="p">on any other termination). This flag may be utilized in any way the caller desires.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: -49pt;text-align: justify;"><span class="s11">COMMAND </span>Only the first word on the line is treated as belonging to <span class="s11">SPLST</span>, the remainder of the line being arbitrary text; i.e., &quot;command format&quot;. If other options are supplied, <span class="s11">COMMAND </span>still applies to the first word typed. Basically, it always returns (<span class="s11">CMD . REST-OF-INPUT</span>), where <span class="s11">REST-OF-INPUT </span>is whatever the other options dictate for the remainder. E.g. <span class="s11">COMMAND NOVALUE </span>returns (<span class="s11">CMD</span>) or (<span class="s11">CMD . T</span>), depending on whether there was further input; <span class="s11">COMMAND STRING </span>returns <span class="s11">(CMD . &quot;REST-OF-INPUT&quot;</span>). When used with <span class="s11">REPEAT</span>, <span class="s11">COMMAND </span>is only in effect <span class="s5">for the first line typed; furthermore, if the first line </span>consists solely of a command, the <span class="s11">REPEAT </span>is ignored, i.e., the entire input is taken to be just the command.</p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: -33pt;line-height: 94%;text-align: justify;">READ <span class="p">Parens, brackets, and quotes are treated a la </span>READ<span class="p">, rather than being returned as individual atoms. Control characters may be input via the Control-Vx notation. Input is terminated roughly along the lines of </span>READ <span class="p">conventions: a balancing or over-balancing right paren / bracket will activate the input, or</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">&lt;cr&gt; when no parenthesis remains unbalanced. <span class="s11">READ </span>overrides all other</p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">options (except <span class="s11">NORAISE</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 173pt;text-indent: -60pt;text-align: justify;">LISPXREAD <span class="p">Like </span>READ<span class="p">, but implies that </span>TTYIN <span class="p">should behave even more like </span>READ<span class="p">, i.e., do </span>NORAISE<span class="p">, not be errorset-protected, etc.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 173pt;text-indent: -55pt;line-height: 92%;text-align: justify;">NOPROMPT <span class="p">Interlisp-D only: The prompt argument is treated as usual, except that </span>TTYIN <span class="p">assumes that the prompt for the first line has already been printed by the caller; the prompt for the first line is thus used only when redisplaying the line.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">ECHOTOFILE <span class="p">if specified, user’s input is copied to this file, i.e., </span>TTYIN <span class="p">can be used as a simple text-to- file routine if </span>NOVALUE <span class="p">is used. If </span>ECHOTOFILE <span class="p">is a list, copies to all files in the list. </span>PROMPT <span class="p">is not included on the file.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">TABS <span class="p">is a special addition for tabular input. It is a list of tabstops (numbers). When user types a tab, </span>TTYIN <span class="p">automatically spaces over to the next tabstop (thus the first tabstop is actually the second &quot;column&quot; of input). Also treats specially the characters </span>* <span class="p">and </span>&quot;<span class="p">; they echo normally, and then automatically tab over.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">UNREADBUF <span class="p">allows the caller to &quot;preload&quot; the </span>TTYIN <span class="p">buffer with a line of input. </span>UNREADBUF <span class="p">is a list, the elements of which are unread into the buffer (i.e., &quot;the outer parentheses are stripped off&quot;) to be edited further as desired; a simple carriage return (or Control-Z for </span>REPEAT <span class="p">input) will thus cause the buffer’s contents to be returned unchanged. If doing </span>READ <span class="p">input, the &quot;</span>PRIN2 <span class="p">names&quot; of the input list are used, i.e., quotes and %’s will appear as needed; otherwise the buffer will look as though </span>UNREADBUF <span class="p">had been </span>PRIN1<span class="p">’ed. </span>UNREADBUF <span class="p">is treated somewhat like </span>READBUF<span class="p">, so that if it contains a pseudo-carriage return (the value of </span>HISTSTR0<span class="p">), the input line terminates there.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Input can also be unread from a file, using the <span class="s11">HISTSTR1 </span>format: <span class="s11">UNREADBUF = (&lt;value of HISTSTR1&gt; (FILE START . END))</span>, where <span class="s11">START </span>and <span class="s11">END </span>are file byte pointers. This makes <span class="s11">TTYIN </span>a miniature text file editor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">RDTBL <span class="p">[Interlisp-D only] is the read table to use for </span>READ<span class="p">ing the input when one of the </span>READ <span class="p">options is given. A lot of character interpretations are hardwired into </span>TTYIN<span class="p">, so currently the only effect this has is in the actual </span>READ<span class="p">, and in deciding whether a character typed at the end of the input is an immediate read macro, for purposes of termination.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the global variable <span class="s11">TYPEAHEADFLG </span>is <span class="s11">T</span>, or option <span class="s11">LISPXREAD </span>is given, <span class="s11">TTYIN </span>permits type-ahead; otherwise it clears the buffer before prompting the user.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Using TTYIN as a General Editor</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The following may be useful as a way of outsiders to call <span class="s11">TTYIN </span>as an editor. These functions are currently only in Interlisp-D.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>TTYINEDIT </b><i>EXPRS WINDOW PRINTFN PROMPT</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">This is the body of the edit macro <span class="s11">EE</span>. Switches the tty to <span class="s16">WINDOW</span>, clears it, prettyprints <span class="s16">EXPRS</span>, a list of expressions, into it, and leaves you in <span class="s11">TTYIN </span>to edit it as Lisp input. Returns a new list of expressions.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">PRINTFN </span>is non-<span class="s11">NIL</span>, it is a function of two arguments, <span class="s11">EXPRS </span>and <span class="s11">FILE</span>, which is called instead of <span class="s11">PRETTYPRINT </span>to print the expressions to the window (actually to a scratch file). Note that <span class="s11">EXPRS </span>is a list, so normally the outer parentheses should not be printed.  <span class="s16">PRINTFN </span><span class="s11">= T </span>is shorthand for &quot;unpretty&quot;; use <span class="s11">PRIN2 </span>instead of <span class="s11">PRETTYPRINT</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">PROMPT </span>determines what prompt is printed, if any. If <span class="s11">T</span>, no prompt is printed. If <span class="s11">NIL</span>, it defaults to the value of <span class="s11">TTYINEDITPROMPT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">TTYINAUTOCLOSEFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s11">TTYINAUTOCLOSEFLG </span>is true, <span class="s11">TTYINEDIT </span>closes the window on exit.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">TTYINEDITWINDOW <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the <span class="s11">WINDOW </span>arg to <span class="s11">TTYINEDIT </span>is <span class="s11">NIL</span>, it uses the value of <span class="s11">TTYINEDITWINDOW</span>, creating it if it does not yet exist.</p><p class="s15" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">TTYINPRINTFN <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The default value for <span class="s11">PRINTFN </span>in <span class="s11">EE</span>’s call to <span class="s11">TTYINEDIT</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SET.TTYINEDIT.WINDOW </span><span class="s16">WINDOW</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Called under a <span class="s11">RESETLST</span>. Switches the tty to <span class="s16">WINDOW </span>(defaulted as in <span class="s11">TTYINEDIT</span>) and clears it. The window’s position is left so that <span class="s11">TTYIN </span>will be happy with it if you now call <span class="s11">TTYIN </span>yourself. Specifically, this means positioning an integral number of lines from the bottom of the window, the way the top-level tty window normally is.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">TTYIN.SCRATCHFILE</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns, possibly creating, the scratchfile that <span class="s11">TTYIN </span>uses for prettyprinting its input. The file pointer is set to zero. Since <span class="s11">TTYIN </span>does use this file, beware of multiple simultaneous use of the file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">?= Handler</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">In Interlisp, the <span class="s11">?= </span>read macro displays the arguments to the function currently &quot;in progress&quot; in the typein. Since <span class="s11">TTYIN </span>wants you to be able to continue editing the buffer after a <span class="s11">?=</span>, it processes this macro specially on its own, printing the arguments below your typein and then putting the cursor back where it was when <span class="s11">?= </span>was typed. For users who want special treatment of <span class="s11">?=</span>, the following hook exists:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TTYIN?=FN                                                      <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The value of this variable, if non-<span class="s11">NIL</span>, is a user function of one argument that is called when <span class="s11">?= </span>is typed. The argument is the function that <span class="s11">?= </span>thinks it is inside of. The user function should return one of the following:</p><p class="s11" style="padding-top: 6pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">NIL <span class="p">Normal ?= processing is performed.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 173pt;text-indent: -17pt;text-align: left;">T <span class="p">Nothing is done. Presumably the user function has done something privately, perhaps diddled some other window, or called </span>TTYIN.PRINTARGS <span class="p">(below).</span></p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: -84pt;text-align: left;">a list (<span class="s11">ARGS . STUFF</span>) Treats <span class="s11">STUFF </span>as the argument list of the function in question, and performs the normal <span class="s11">?= </span>processing using it.</p><p style="padding-top: 6pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">anything else The value is printed in lieu of what <span class="s11">?= </span>normally prints.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;">At the time that <span class="s11">?= </span>is typed, nothing has been &quot;read&quot; yet, so you don’t have the normal context you might expect inside a conventional readmacro. If the user function wants to examine the typed-in arguments being passed to the fn, however, it can call the function <span class="s11">TTYIN.READ?=ARGS</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">TTYIN.READ?=ARGS</span>)                                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">When called inside <span class="s11">TTYIN?=FN </span>user function, returns everything between the function and the typing of ?= as a list (like an arglist). Returns <span class="s11">NIL </span>if ?= was typed immediately after the function name.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>TTYIN.PRINTARGS </b><i>FN ARGS ACTUALS ARGTYPE</i>)                      <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Does the function / argument printing for <span class="s11">?=. </span><span class="s16">ARGS </span>is an argument list, <span class="s16">ACTUALS </span>is a list of actual parameters (from the typein) to match up with args. <span class="s16">ARGTYPE </span>is a value of the function <span class="s16">ARGTYPE</span>; it defaults to (<span class="s16">ARGTYPE FN</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Read Macros</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">When doing <span class="s11">READ </span>input in Interlisp-10, no Lisp-style read macros are available (but the ’ and control- Y macros are built in). Principally because of the usefulness of the editor read macros (set by <span class="s11">SETTERMCHARS</span>), and the desire for a way of changing the meanings of the display editing commands, the following exists as a hack:</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TTYINREADMACROS                                                <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Value is a set of shorthand inputs useable during <span class="s11">READ </span>input. It is an alist of entries (<span class="s11">CHARCODE . SYNONYM</span>). If the user types the indicated character (the meta bit is denoted by the 200Q bit in the char code), <span class="s11">TTYIN </span>behaves as though the synonym character had been typed.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Special cases: 0 - the character is ignored; 200Q - pure meta bit; means to read another char and turn on its meta bit; 400Q - macro quote: read another char and use its original meaning. For example, if you have macros (<span class="s11">(33Q . 200Q) (30Q . 33Q)</span>), then Escape (33Q) will behave as an edit prefix, and control-X (30Q) will behave like Escape.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note: currently, synonyms for meta commands are not well-supported, working only when the command is typed with no argument.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Slightly more powerful macros also can be supplied; they are recognized when a character is typed on an empty line, i.e., as the first thing after the prompt. In this case, the <span class="s11">TTYINREADMACROS </span>entry is of the form (<span class="s11">CHARCODE T . RESPONSE</span>) or (<span class="s11">CHARCODE</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">CONDITION . RESPONSE<span class="p">), where </span>CONDITION <span class="p">is a list that evaluates true. If </span>RESPONSE <span class="p">is a list, it is </span>EVAL<span class="p">ed; otherwise it is left unevaluated. The result of this evaluation (or </span>RESPONSE <span class="p">itself) is treated as follows:</span></p><p class="s11" style="padding-top: 6pt;padding-left: 97pt;text-indent: 0pt;line-height: 12pt;text-align: left;">NIL <span class="p">The macro is ignored and the character reads normally, i.e., as though</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">TTYINREADMACROS <span class="p">had never existed.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: -54pt;line-height: 91%;text-align: justify;">An integer A character code, treated as above. Special case: -1 is treated like 0, but says that the display may have been altered in the evaluation of the macro, so <span class="s11">TTYIN </span>should reset itself appropriately.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: -67pt;line-height: 92%;text-align: justify;">Anything else This <span class="s11">TTYIN </span>input is terminated (with a crlf) and returns the value of &quot;response&quot; (turned into a list if necessary). This is the principal use of this facility. The macro character thus stands for the (possibly computed) reponse, terminated if necessary with a crlf. The original character is not echoed.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Interrupt characters, of course, cannot be read macros, as <span class="s11">TTYIN </span>never sees them, but any other characters, even non-control chars, are allowed. The ability to return <span class="s11">NIL </span>allows you to have conditional macros that only apply in specified situations (e.g., the macro might check the prompt (<span class="s11">LISPXID</span>) or other contextual variables). To use this specifically to do immediate editor read macros, do the following for each edit command and character you want to invoke it with:</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 108%;text-align: left;">(ADDTOVAR TTYINREADMACROS (CHARCODE ’CHARMACRO? EDITCOM)))</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">For example, <span class="s11">(ADDTOVAR TTYINREADMACROS (12Q CHARMACRO? !NX)) </span>will make</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">linefeed do the <span class="s11">!NX </span>command. Note that this will only activate linefeed at the beginning of a line, not anywhere in the line. There will probably be a user function to do this in the next release.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note that putting (<span class="s11">12Q T . !NX</span>) on <span class="s11">TTYINREADMACROS </span>would also have the effect of returning <span class="s11">!NX </span>from the <span class="s11">READ </span>call so that the editor would do an <span class="s11">!NX</span>. However, <span class="s11">TTYIN </span>would also return <span class="s11">!NX </span>outside the editor (probably resulting in a u.b.a. error, or convincing <span class="s11">DWIM </span>to enter the editor), and also the clearing of the output buffer (performed by <span class="s11">CHARMACRO?</span>) would not happen.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Assorted Flags</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">These flags control aspects of <span class="s11">TTYIN</span>’s behavior. Some have already been mentioned. In Interlisp-D, the flags are all initially set to <span class="s11">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TYPEAHEADFLG                                                   <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If true, <span class="s11">TTYIN </span>always permits typeahead; otherwise it clears the buffer for any but</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">LISPXREAD <span class="p">input.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">?<span class="s15">ACTIVATEFLG                                                   </span><span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If true, enables the feature whereby <span class="s11">? </span>lists alternative completions from the current spelling list.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">SHOWPARENFLG                                                   <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If true, then whenever you are typing Lisp input and type a right parenthesis / bracket, <span class="s11">TTYIN </span>will briefly move the cursor to the matching parenthesis / bracket, assuming it is still on the screen. The cursor stays there for about 1 second, or until you type another character (i.e., if you type fast you’ll never notice it). This feature was inspired by a similar <span class="s11">EMACS </span>feature, and turned out to be pretty easy to implement.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">TTYINBSFLG                                                     <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Causes <span class="s11">TTYIN </span>to always physically backspace, even if you’re running on a non-display (not a DM or Heath), rather than print \deletedtext\ (this assumes your hardcopy terminal or glass tty is capable of backspacing). If <span class="s11">TTYINBSFLG </span>is <span class="s11">LF</span>, then in addition to backspacing, <span class="s11">TTYIN </span>x’s out the deleted characters as it backs up, and when you stop deleting, it outputs a linefeed to drop to a new, clean line before resuming. To save paper, this linefeed operation is not done when only a single character is deleted, on the grounds that you can probably figure out what you typed anyway.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TTYINRESPONSES                                                 <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">An association list of special responses that will be handled by routines designated by the programmer. See &quot;Special Responses&quot;, below.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TTYINERRORSETFLG                                               <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">[Interlisp-D only] If true, non-<span class="s11">LISPXREAD </span>inputs are errorset-protected (Control-E traps back to the prompt), otherwise errors propagate upwards. Initially <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">TTYINCOMMENTCHAR                                               <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">This variable affects the treatment of lines beginning with the comment character (usually &quot;<span class="s11">;</span>&quot;). If <span class="s11">TTYINCOMMENTCHAR </span>is a character code, and the first character on a line of typein is equal to <span class="s11">TTYINCOMMENTCHAR</span>, then the line is erased from the screen and no input function will see it. If <span class="s11">TTYINCOMMENTCHAR </span>is <span class="s11">NIL</span>, this feature is disabled. <span class="s11">TTYINCOMMENTCHAR </span>is initially <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">TTYINCOMPLETEFLG                                               <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If true, enables Escape completion from <span class="s11">USERWORDS </span>during <span class="s11">READ </span>inputs. Details below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">USERWORDS <span class="p">(see Chapter 20) contains words you mentioned recently: functions you have defined or edited, variables you have set or evaluated at the executive level, etc. This happens to be a very convenient list for context-free escape completion; if you have recently edited a function, chances are good you may want to edit it again (typing &quot;</span>EF xx$<span class="p">&quot;) or type a call to it. If there is no completion for the current word from </span>USERWORDS<span class="p">, the escape echoes as &quot;</span>$<span class="p">&quot;, i.e. nothing special happens; if there is more than one possible completion, you get beeped. If typed when not inside a word, Escape completes to the value of </span>LASTWORD<span class="p">, i.e., the last thing you typed that the p.a. &quot;noticed&quot; (setting </span>TTYINCOMPLETEFLG <span class="p">to 0 disables this latter feature), except that Escape at the beginning of the line is left alone (it is a p.a. command).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If you really wanted to enter an escape, you can, of course, just quote it with a control-V, like you can other control chars.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">You may explicitly add words to <span class="s11">USERWORDS </span>yourself that wouldn’t get there otherwise. To make this convenient online the edit command [<span class="s19"></span>] means &quot;add the current atom to <span class="s11">USERWORDS</span>&quot; (you might think of the command as &quot;pointing out this atom&quot;). For example, you might be entering a function definition and want to &quot;point to&quot; one or more of its arguments or prog variables. Giving an argument of zero to this command will instead remove the indicated atom from <span class="s11">USERWORDS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Note that this feature loses some of its value if the spelling list is too long, for then the completion takes too long computationally and, more important, there are too many alternative completions for you to get by with typing a few characters followed by escape. Lisp’s maintenance of the spelling list <span class="s11">USERWORDS </span>keeps the &quot;temporary&quot; section (which is where everything goes initially unless you say otherwise) limited to <span class="s11">#USERWORDS </span>atoms, initially 100. Words fall off the end if they haven’t been used (they are &quot;used&quot; if <span class="s11">FIXSPELL </span>corrects to one, or you use &lt;escape&gt; to complete one).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Special Responses</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">There is a facility for handling &quot;special responses&quot; during any non-<span class="s11">READ TTYIN </span>input. This action is independent of the particular call to <span class="s11">TTYIN</span>, and exists to allow you to effectively &quot;advise&quot; <span class="s11">TTYIN </span>to intercept certain commands. After the command is processed, control returns to the original <span class="s11">TTYIN </span>call.  The facility is implemented via the list <span class="s11">TTYINRESPONSES</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">TTYINRESPONSES <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">TTYINRESPONSES <span class="p">is a list of elements, each of the form:</span></p><p class="s11" style="padding-top: 7pt;padding-left: 150pt;text-indent: 0pt;text-align: left;">(COMMANDS RESPONSE-FORM OPTION)</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">COMMANDS <span class="p">is a single atom or list of commands to be recognized; </span>RESPONSE-FORM <span class="p">is </span>EVAL<span class="p">ed (if a list), or </span>APPLY<span class="p">ed (if an atom) to the command and the rest of the line. Within this form one can reference the free variables </span>COMMAND <span class="p">(the command the user typed) and </span>LINE <span class="p">(the rest of the line). If </span>OPTION <span class="p">is the atom </span>LINE<span class="p">, this means to pass the rest of line as a list; if it is </span>STRING<span class="p">, this means to pass it as a string; otherwise, the command is only valid if there is nothing else on the line. If </span>RESPONSE-FORM <span class="p">returns the atom </span>IGNORE<span class="p">, it is not treated as a special response (i.e. the input is returned normally as the result of </span>TTYIN<span class="p">).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Suggested use: global commands or options can be added to the toplevel value of <span class="s11">TTYINRESPONSES</span>. For more specialized commands, rebind <span class="s11">TTYINRESPONSES </span>to <span class="s11">(APPEND NEWENTRIES TTYINRESPONSES) </span>inside any module where you want to do this sort of special processing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Special responses are not checked for during <span class="s11">READ</span>-style input.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Display Types</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">[This is not relevant in Interlisp-D]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">TTYIN <span class="p">determines the type of display by calling </span>DISPLAYTERMP<span class="p">, which is initially defined to test the value of the </span>GTTYP <span class="p">jsys. It returns either NIL (for printing terminals) or a small number giving </span>TTYIN<span class="p">’s internal code for the terminal type.  The types </span>TTYIN <span class="p">currently knows about:</span></p><p style="padding-top: 6pt;padding-left: 114pt;text-indent: 1pt;line-height: 148%;text-align: justify;">0 = glass tty (capable of deleting chars by backspacing, but little else) 1 = Datamedia</p><p style="padding-left: 114pt;text-indent: 0pt;text-align: justify;">2 = Heath</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Only the Datamedia has full editing power. <span class="s11">DISPLAYTERMP </span>has built into it the correct terminal types for Sumex and Stanford campus 20’s: Datamedia = 11 on tenex, 5 on tops20; Heath = 18 on Tenex, 25 on tops20. You can override those values by setting the variable <span class="s11">DISPLAYTYPES </span>to be an association list associating the <span class="s11">GTTYP </span>value with one of these internal codes. For example, Sumex displays correspond to <span class="s11">DISPLAYTYPES = ((11 . 1) (18 . 2)) </span>[although this is actually compiled into <span class="s11">DISPLAYTERMP </span>for speed]. Any display terminal other than Datamedia and Heath can probably safely be assigned to &quot;0&quot; for glass tty.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">To add new terminal types, you have to choose a number for it, add new code to <span class="s11">TTYIN </span>for it and recompile. The <span class="s11">TTYIN </span>code specifies what the capabilities of the terminal are, and how to do the primitive operations: up, down, left, right, address cursor, erase screen, erase to end of line, insert character, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For terminals lacking a meta key (currently only Datamedias have it), set the variable <span class="s11">EDITPREFIXCHAR </span>to the ascii code of an edit &quot;prefix&quot; (i.e., anything typed preceded by the prefix is considered to have the meta bit on). If your <span class="s11">EDITPREFIXCHAR </span>is <span class="s11">33Q </span>(Escape), you can type a real Escape by typing 3 of them (2 won’t do, since that means &quot;Meta-Escape&quot;, a legitimate argument to another command). You could also define an Escape synonym with <span class="s11">TTYINREADMACROS </span>if you wanted (but currently it doesn’t work in filename completion). Setting <span class="s11">EDITPREFIXCHAR </span>for a terminal that is not equipped to handle the full range of editing functions (only the Heath and Datamedia are currently so equipped) is not guaranteed to work, i.e. the display will not always be up to date; but if you can keep track of what you’re doing, together with an occasional control-R to help out, go right ahead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Prettyprint                                                                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The standard way of printing out function definitions (on the terminal or into files) is to use</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PRETTYPRINT<span class="p">.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">(<b>PRETTYPRINT </b><i>FNS PRETTYDEFLG —</i>)                                <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s16">FNS </span>is a list of functions. If <span class="s16">FNS </span>is atomic, its value is used). The definitions of the functions are printed in a pretty format on the primary output file using the primary readtable.  For example, if <span class="s11">FACTORIAL </span>were defined by typing</p><p class="s11" style="padding-top: 8pt;padding-left: 126pt;text-indent: 0pt;line-height: 108%;text-align: left;">(DEFINEQ (FACTORIAL [LAMBDA (N) (COND ((ZEROP N) 1) (T (ITIMES N (FACTORIAL (SUB1 N]</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 108%;text-align: left;">(PRETTYPRINT ’(FACTORIAL))would print out (FACTORIAL</p><p class="s11" style="padding-left: 147pt;text-indent: -10pt;line-height: 108%;text-align: left;">[LAMBDA (N) (COND</p><p class="s11" style="padding-left: 169pt;text-indent: -10pt;line-height: 108%;text-align: left;">((ZEROP N) 1)</p><p class="s11" style="padding-left: 7pt;text-indent: 0pt;line-height: 10pt;text-align: center;">(T (ITIMES N (FACTORIAL (SUB1 N])</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s16">PRETTYDEFLG </span>is <span class="s11">T </span>when called from <span class="s11">PRETTYDEF </span>(and hence <span class="s11">MAKEFILE</span>). Among other actions taken when this argument is true, <span class="s11">PRETTYPRINT </span>indicates its progress in writing the current output file: whenever it starts a new function, it prints on the terminal the name of that function if more than 30 seconds (real time) have elapsed since the last time it printed the name of a function.</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">PRETTYPRINT <span class="p">operates correctly on functions that are </span>BROKEN<span class="p">, </span>BROKEN-IN<span class="p">, </span>ADVISED<span class="p">, or have been compiled with their definitions saved on their property lists: it prints the original, pristine definition, but does not change the current state of the function. If a function is not defined but is known to be on one of the files noticed by the file package, </span>PRETTYPRINT <span class="p">loads in the definition (using </span>LOADFNS<span class="p">) and prints it (except when called from </span>PRETTYDEF<span class="p">). If </span>PRETTYPRINT <span class="p">is given an atom which is not the name of a function, but has a value, it prettyprints the value. Otherwise, </span>PRETTYPRINT <span class="p">attempts spelling correction. If all fails, </span>PRETTYPRINT <span class="p">returns </span>(FN NOT PRINTABLE)<span class="p">. Note that </span>PRETTYPRINT <span class="p">will return </span>(FN NOT PRINTABLE) <span class="p">if </span>FN <span class="p">does not have an accessable expr definition, or if it doesn’t have any definition at all.</span></p><p class="s16" style="padding-top: 10pt;padding-left: 77pt;text-indent: -24pt;text-align: left;"><span class="s11">(</span><b>PP </b>FN<span class="s32">1 </span>... FN<span class="s32">N</span><span class="s11">) </span><span class="p">[NLambda NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">For prettyprinting functions to the terminal. <span class="s11">PP </span>calls <span class="s11">PRETTYPRINT </span>with the primary output file set to <span class="s11">T </span>and the primary read table set to <span class="s11">T</span>. The primary output file and primary readtable are restored after printing.</p><p class="s11" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(PP FOO) <span class="p">is equivalent to </span>(PRETTYPRINT ’(FOO))<span class="p">; </span>(PP FOO FIE) <span class="p">is equivalent to</span></p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(PRETTYPRINT ’(FOO FIE))<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">As described above, when <span class="s11">PRETTYPRINT</span>, and hence <span class="s11">PP</span>, is called with the name of a function that is not defined, but whose definition is on a file known to the file package, the definition is automatically read in and then prettyprinted. However, if the user does not intend on editing or running the definition, but simply wants to see the definition, the function <span class="s11">PF </span>described below can be used to simply copy the corresponding characters from the file to the terminal. This results in a savings in both space and time, since it is not necessary to allocate storage to actually read in the definition, and it is not necessary to re-prettyprint it (since the function is already in prettyprint format on the file).</p><p class="s16" style="padding-top: 6pt;padding-left: 125pt;text-indent: -24pt;line-height: 17pt;text-align: left;"><span class="s11">(</span><b>PF </b>FN FROMFILES TOFILE<span class="s11">) </span><span class="p">[NLambda NoSpread Function] Copies the definition of </span>FN <span class="p">found on each of the files in </span>FROMFILES <span class="p">to </span>TOFILE<span class="p">. If</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;text-align: left;"><i>TOFILE </i>= NIL<span class="p">, defaults to </span>T<span class="p">. If </span><i>FROMFILES </i>= NIL<span class="p">, defaults to </span>(WHEREIS FN NIL T) <span class="p">(see Chapter 17). The typical usage of </span>PF <span class="p">is simply to type &quot;</span>PF FN<span class="p">&quot;.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="s11">PF </span>prints a message if it can’t find a file on <span class="s16">FROMFILES</span>, or it can’t find the function <span class="s11">FN </span>on a file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">When printing to the terminal, <span class="s11">PF </span>performs several transformations on the characters in the file that comprise the definition for <span class="s11">FN</span>:</p><ol id="l68"><li><p style="padding-top: 7pt;padding-left: 114pt;text-indent: -18pt;line-height: 91%;text-align: justify;">Font information is stripped out (except in Interlisp-D, whose display supports multiple fonts)</p></li><li><p style="padding-top: 6pt;padding-left: 114pt;text-indent: -18pt;text-align: justify;">Occurrences of the <span class="s11">CHANGECHAR </span>(see the Special Prettyprint Controls section below) are not printed</p></li><li><p style="padding-top: 6pt;padding-left: 114pt;text-indent: -18pt;line-height: 91%;text-align: justify;">Since functions typically tend to be printed to a file with a larger linelength than when printing to a terminal, the number of leading spaces on each line is cut in half (unless <span class="s11">PFDEFAULT </span>is <span class="s11">T</span>; initially <span class="s11">NIL</span>)</p></li><li><p style="padding-top: 7pt;padding-left: 114pt;text-indent: -18pt;text-align: justify;">Comments are elided, if <span class="s11">**COMMENT**FLG </span>is non-<span class="s11">NIL </span>(see the Comment Feature section below).</p></li></ol><p style="padding-top: 6pt;padding-left: 125pt;text-indent: -24pt;line-height: 17pt;text-align: left;"><span class="s11">(</span><span class="s15">SEE </span><span class="s16">FROMFILE TOFILE</span><span class="s11">) </span>[NLambda NoSpread Function] Copies all of the text from <span class="s16">FROMFILE </span>to <span class="s16">TOFILE </span>(defaults to <span class="s11">T</span>), processing all text as <span class="s11">PF</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">does. Used to display the contents of files on the terminal.</p><p class="s11" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PP* </b><i>X</i>)                                        <span class="p">[NLambda NoSpread  Function]</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>PF* </b><i>FN FROMFILES TOFILE</i>)                      <span class="p">[NLambda NoSpread  Function]</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>SEE* </b><i>FROMFILE TOFILE</i>)                         <span class="p">[NLambda NoSpread  Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">These functions operate exactly like <span class="s11">PP</span>, <span class="s11">PF</span>, and <span class="s11">SEE</span>, except that they bind</p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">**COMMENT**FLG <span class="p">to </span>NIL<span class="p">, so comments are printed in full.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">While the function <span class="s11">PRETTYPRINT </span>prints entire function definitions, the function <span class="s11">PRINTDEF </span>can be used to print parts of functions, or arbitrary Interlisp structures:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>PRINTDEF </b><i>EXPR LEFT DEF TAILFLG FNSLST FILE</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Prints the expression <span class="s16">EXPR </span>in a pretty format on <span class="s16">FILE </span>using the primary readtable. <span class="s16">LEFT </span>is the left hand margin (<span class="s11">LINELENGTH </span>determines the right hand margin). <span class="s11">PRINTDEF </span>initially performs <span class="s11">(TAB LEFT T)</span>, which means to space to position <span class="s16">LEFT</span>, unless already beyond this position, in which case it does nothing.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">DEF </span><span class="s11">= T </span>means <span class="s16">EXPR </span>is a function definition, or a piece of one. If <span class="s16">DEF </span><span class="s11">= NIL</span>, no special action is taken for <span class="s11">LAMBDA</span>’s, <span class="s11">PROG</span>’s, <span class="s11">COND</span>’s, comments, <span class="s11">CLISP</span>, etc. <span class="s11">DEF </span>is <span class="s11">NIL </span>when <span class="s11">PRETTYDEF </span>calls <span class="s11">PRETTYPRINT </span>to print variables and property lists, and when <span class="s11">PRINTDEF </span>is called from the editor via the command <span class="s11">PPV</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">TAILFLG <span class="s11">= T </span><span class="p">means </span>EXPR <span class="p">is interpreted as a tail of a list, to be printed without parentheses.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">FNSLST </span>is for use for printing with multiple fonts (see Chapter 27). <span class="s11">PRINTDEF </span>prints occurrences of any function in the list <span class="s11">FNSLST </span>in a different font, for emphasis. <span class="s11">MAKEFILE </span>passes as <span class="s11">FNSLST </span>the list of all functions on the file being made.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Comment Feature</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">A facility for annotating Interlisp functions is provided in <span class="s11">PRETTYPRINT</span>. Any expression beginning with the atom <span class="s11">* </span>is interpreted as a comment and printed in the right margin. Example:</p><p class="s11" style="padding-top: 8pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(FACTORIAL</p><p class="s11" style="padding-left: 158pt;text-indent: -16pt;line-height: 108%;text-align: left;">[LAMBDA (N) (* COMPUTES N!) (COND</p><p class="s11" style="padding-left: 169pt;text-indent: 0pt;line-height: 10pt;text-align: left;">((ZEROP N) (* 0! = 1)</p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">1)</p><p class="s11" style="padding-left: 244pt;text-indent: -75pt;line-height: 108%;text-align: left;">(T (* RECURSIVE DEFINITION: N! = N*N-1!)</p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(ITIMES N (FACTORIAL (SUB1 N])</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">These comments actually form a part of the function definition. Accordingly, <span class="s11">* </span>is defined as an nlambda nospread function that returns its argument, similar to <span class="s11">QUOTE</span>.  When running an interpreted function, <span class="s11">* </span>is entered the same as any other Interlisp function. Therefore, comments should only be placed where they will not harm the computation, i.e., where a quoted expression could be placed. For example, writing</p><p class="s11" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 108%;text-align: left;">(ITIMES N (FACTORIAL (SUB1 N)) (* RECURSIVE DEFINITION))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">in the above function would cause an error when <span class="s11">ITIMES </span>attempted to multiply <span class="s11">N</span>, <span class="s11">N-1!</span>, and</p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">RECURSIVE<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For compilation purposes, <span class="s11">* </span>is defined as a macro which compiles into no instructions (unless the comment has been placed where it has been used for value, in which case the compiler prints an appropriate error message and compiles <span class="s11">* </span>as <span class="s11">QUOTE</span>). Thus, the compiled form of a function with</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">comments does not use the extra atom and list structure storage required by the comments in the source (interpreted) code.  This is the way the comment feature is intended to be used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">A comment of the form <span class="s11">(* E X) </span>causes <span class="s11">X </span>to be evaluated at prettyprint time, as well as printed as a comment in the usual way. For example, <span class="s11">(* E (RADIX 8)) </span>as a comment in a function containing octal numbers can be used to change the radix to produce more readable printout.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The comment character <span class="s11">* </span>is stored in the variable <span class="s11">COMMENTFLG</span>. The user can set it to some other value, e.g. &quot;<span class="s11">;</span>&quot;, and use this to indicate comments.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">COMMENTFLG                                                     <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">CAR </span>of an expression is <span class="s11">EQ </span>to <span class="s11">COMMENTFLG</span>, the expression is treated as a comment by <span class="s11">PRETTYPRINT</span>. <span class="s11">COMMENTFLG </span>is initialized to <span class="s11">*</span>. Note that whatever atom is chosen for <span class="s11">COMMENTFLG </span>should also have an appropriate function definition and compiler macro, for example, by copying those of <span class="s11">*</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Comments are designed mainly for documenting listings. Therefore, when prettyprinting to the terminal, comments are suppressed and printed as the string <span class="s11">**COMMENT**</span>. The value of</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">**COMMENT**FLG <span class="p">determines the action.</span></p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">**COMMENT**FLG                                                 <span class="s5">[</span><span class="p">Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If <span class="s11">**COMMENT**FLG </span>is <span class="s11">NIL</span>, comments are printed. Otherwise, the value of</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">**COMMENT**FLG <span class="p">is printed. Initially &quot; </span>**COMMENT** <span class="p">&quot;.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">COMMENT1 </span><span class="s16">L </span><span class="s11">—</span><span class="s14">)                                            </span><span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Prints the comment <span class="s16">L</span>. <span class="s11">COMMENT1 </span>is a separate function to permit the user to write prettyprint macros that use the regular comment printer. For example, to cause comments to be printed at a larger than normal linelength, one could put an entry for <span class="s11">* </span>on <span class="s11">PRETTYPRINTMACROS</span>:</p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;line-height: 108%;text-align: left;">(* LAMBDA (X) (RESETFORM (LINELENGTH 100) (COMMENT1 X)))</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">This macro resets the line length, prints the comment, and then restores the line length.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">COMMENT1 <span class="p">expects to be called from within the environment established by </span>PRINTDEF<span class="p">, so ordinarily the user should call it only from within prettyprint macros.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Comment Pointers</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For a well-commented collection of programs, the list structure, atom, and print name storage required to represent the comments in core can be significant. If the comments already appear on a file and are not needed for editing, a significant savings in storage can be achieved by simply leaving the text of the comment on the file when the file is loaded, and instead retaining in core only a pointer to the comment. When this feature is enabled, * is defined as a read macro (see Chapter 25) in</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">FILERDTBL <span class="p">which, instead of reading in the entire text of the comment, constructs an expression containing</span></p><ul id="l69"><li><p style="padding-top: 6pt;padding-left: 66pt;text-indent: -17pt;text-align: left;">The name of the file in which the text of the comment is contained</p></li><li><p style="padding-top: 5pt;padding-left: 66pt;text-indent: -17pt;text-align: left;">The address of the first character of the comment</p></li><li><p style="padding-top: 5pt;padding-left: 66pt;text-indent: -17pt;text-align: left;">The number of characters in the comment</p></li><li><p style="padding-top: 6pt;padding-left: 66pt;text-indent: -17pt;line-height: 91%;text-align: left;">A flag indicating whether the comment appeared at the right hand margin or centered on the page</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">For output purposes, <span class="s11">* </span>is defined on <span class="s11">PRETTYPRINTMACROS </span>(see the Prettyprint Control Functions section below) so that it prints the comments represented by such pointers by simply copying the corresponding characters from one file to another, or to the terminal. Normal comments are processed the same as before, and can be intermixed freely with comment pointers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">The comment pointer feature is controlled by the function <span class="s11">NORMALCOMMENTS</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">NORMALCOMMENTS </span><span class="s16">FLG</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FLG </span>is <span class="s11">NIL</span>, the comment pointer feature is enabled. If <span class="s16">FLG </span>is <span class="s11">T</span>, the comment pointer feature is disabled (the default).</p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">NORMALCOMMENTS <span class="p">can be changed as often as desired. Thus, some files can be loaded normally, and others with their comments converted to comment pointers.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">For convenience of editing selected comments, an edit macro, <span class="s11">GET*</span>, is included, which loads in the text of the corresponding comment. The editor’s <span class="s11">PP* </span>command, in contrast, prints the comment without reading it by simply copying the corresponding characters to the terminal. <span class="s11">GET* </span>is defined in terms of <span class="s11">GETCOMMENT</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETCOMMENT </span><span class="s16">X DESTFL —</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">X </span>is a comment pointer, replaces <span class="s16">X </span>with the actual text of the comment, which it reads from its file. Returns <span class="s16">X </span>in all cases. If <span class="s16">DESTFL </span>is non-<span class="s11">NIL</span>, it is the name of an open file, to which <span class="s11">GETCOMMENT </span>copies the comment; in this case, <span class="s16">X </span>remains a comment pointer, but it has been changed to point to the new file (unless <span class="s11">NORMALCOMMENTS </span>has been set to <span class="s11">DONTUPDATE</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">PRINTCOMMENT </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Defined as the prettyprint macro for <span class="s11">*</span>: copies the comment to the primary output file by using <span class="s11">GETCOMMENT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">READCOMMENT </span><span class="s16">FL RDTBL LST</span><span class="s11">) </span><span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Defined as the read macro for <span class="s11">* </span>in <span class="s11">FILERDTBL</span>: if <span class="s11">NORMALCOMMENTSFLG </span>is <span class="s11">NIL</span>, it constructs a comment pointer, unless it believes the expression beginning with * is not actually a comment, e.g., if the next atom is &quot;<span class="s11">.</span>&quot; or <span class="s11">E</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Note that a certain amount of care is required in using the comment pointer feature. Since the text of the comment resides on the file pointed to by the comment pointer, that file must remain in existence as long as the comment is needed. <span class="s11">GETCOMMENT </span>helps out by changing the comment pointer to always point at the most recent file that the comment lives on. However, if the user has been performing repeated <span class="s11">MAKEFILE</span>’s (see Chapter 17) in which differing functions have changed at each invocation of <span class="s11">MAKEFILE</span>, it is possible for the comment pointers in memory to be pointing at several versions of the same file, since a comment pointer is only updated when the function it lives in is prettyprinted, not when the function has been copied verbatim to the new file. This can be a problem for file systems that have a built-in limit on the number of versions of a given file that will be made before old versions are expunged. In such a case, the user should set the version retention count of any directories involved to be infinite. <span class="s11">GETCOMMENT </span>prints an error message if the file that the comment pointer points at has disappeared.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Similarly, one should be cognizant of comment pointers in sysouts, and be sure to retain any files thus pointed to.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">When using comment pointers, the user should also not set <span class="s11">PRETTYFLG </span>to <span class="s11">NIL </span>or call <span class="s11">MAKEFILE </span>with option <span class="s11">FAST</span>, since this will prevent functions from being prettyprinted, and hence not get the text of the comment copied into the new file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the user changes the value of <span class="s11">COMMENTFLG </span>but still wishes to use the comment pointer feature, the new <span class="s11">COMMENTFLG </span>should be given the same read-macro definition in <span class="s11">FILERDTBL </span>as <span class="s11">* </span>has, and the same entry be put on <span class="s11">PRETTYPRINTMACROS</span>. For example, if <span class="s11">COMMENTFLG </span>is reset to be &quot;<span class="s11">;</span>&quot;, then <span class="s11">(SETSYNTAX ’; ’* FILERDTBL) </span>should be performed, and (<span class="s11">; . PRINTCOMMENT) </span>added to <span class="s11">PRETTYPRINTMACROS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Converting Comments to Lower Case</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">This section is for users using terminals without lower case, who nevertheless would like their comments to be converted to lower case for more readable listings. If the second atom in a comment is <span class="s11">%%</span>, the text of the comment is converted to lower case so that it looks like English instead of Lisp. Note that comments are converted only when they are actually written to a file by <span class="s11">PRETTYPRINT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The algorithm for conversion to lower case is the following: If the first character in an atom is <span class="s11">^</span>, do not change the atom (but remove the <span class="s11">^</span>). If the first character is <span class="s11">%</span>, convert the atom to lower case. Note that the  user  must  type  <span class="s11">%% </span>as  <span class="s11">% </span>is  the  escape  character. If  the  atom  (minus  any  trailing punctuation marks) is an Interlisp word (i.e., is a bound or free variable for the function containing the comment, or has a top level value, or is a defined function, or has a non-<span class="s11">NIL </span>property list), do not change it. Otherwise, convert the atom to lower case. Conversion only affects the upper case alphabet, i.e., atoms already converted to lower case are not changed if the comment is converted again. When converting, the first character in the comment and the first character following each period are left capitalized. After conversion, the comment is physically modified to be the lower case text minus the <span class="s11">%% </span>flag, so that conversion is thus only performed once (unless the user edits the comment inserting additional upper case text and another <span class="s11">%% </span>flag).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">LCASELST <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Words on <span class="s11">LCASELST </span>will always be converted to lower case. <span class="s11">LCASELST </span>is initialized to contain words which are Interlisp functions but also appear frequently in comments as English words (<span class="s11">AND</span>, <span class="s11">EVERY</span>, <span class="s11">GET</span>, <span class="s11">GO</span>, <span class="s11">LAST</span>, <span class="s11">LENGTH</span>, <span class="s11">LIST</span>, etc.). Therefore, if one wished to type a comment including the lisp fuction <span class="s11">GO</span>, it would be necessary to type <span class="s19"></span><span class="s11">GO </span>in order that it might be left in upper case.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">UCASELST <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Words on <span class="s11">UCASELST </span>(that do not appear on <span class="s11">LCASELST</span>) will be left in upper case.</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">UCASELST <span class="p">is initialized to </span>NIL<span class="p">.</span></p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">ABBREVLST <span class="p">[Variable]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">ABBREVLST <span class="p">is used to distinguish between abbreviations and words that end in periods. Normally, words that end in periods and occur more than halfway to the right margin cause carriage-returns. Furthermore, during conversion to lowercase, words ending in periods, except for those on </span>ABBREVLST<span class="p">, cause the first character in the next word to be capitalized. </span>ABBREVLST <span class="p">is initialized to the upper and lower case forms of </span>ETC<span class="p">., </span>I<span class="p">.</span>E<span class="p">., and </span>E<span class="p">.</span>G<span class="p">..</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Special Prettyprint Controls</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">PRETTYTABFLG <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In order to save space on files, tabs are used instead of spaces for the inital spaces on each line, assuming that each tab corresponds to 8 spaces. This results in a reduction of file size by about 30%. Tabs are not used if <span class="s11">PRETTYTABFLG </span>is set to <span class="s11">NIL </span>(initially <span class="s11">T</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">#RPARS <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Controls the number of right parentheses necessary for square bracketing to occur. If</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">#RPARS = NIL<span class="p">, no brackets are used. </span>#RPARS <span class="p">is initialized to 4.</span></p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">FIRSTCOL <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The starting column for comments. Comments run between <span class="s11">FIRSTCOL </span>and the line length set by <span class="s11">LINELENGTH </span>(see Chapter 25). If a word in a comment ends with a &quot;<span class="s11">.</span>&quot; and is not on the list <span class="s11">ABBREVLST</span>, and the position is greater than halfway between <span class="s11">FIRSTCOL </span>and <span class="s11">LINELENGTH</span>, the next word in the comment begins on a new line. Also, if a list is encountered in a comment, and the position is greater than halfway, the list begins on a new line.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">PRETTYLCOM <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If a comment has more than <span class="s11">PRETTYLCOM </span>elements (using <span class="s11">COUNT</span>), it is printed starting at column 10, instead of <span class="s11">FIRSTCOL</span>. Comments are also printed starting at column 10 if their second element is also a <span class="s11">*</span>, i.e., comments of the form <span class="s11">(* * --)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">#<span class="s15">CAREFULCOLUMNS </span><span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">In the interests of efficiency, <span class="s11">PRETTYPRINT </span>approximates the number of characters in each atom, rather than calling <span class="s11">NCHARS</span>, when computing how much will fit on a line. This procedure works satisfactorily in most cases. However, users with unusually long atoms in their programs, e.g., such as produced by <span class="s11">CLISPIFY</span>, may occasionlly encounter some glitches in the output produced by <span class="s11">PRETTYPRINT</span>. The value of <span class="s11">#CAREFULCOLUMNS </span>tells <span class="s11">PRETTYPRINT </span>how many columns (counting from the right hand margin) in which to actually compute <span class="s11">NCHARS </span>instead of approximating. Setting <span class="s11">#CAREFULCOLUMNS </span>to 20 or</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">30 will eliminate the glitches, although it will slow down <span class="s11">PRETTYPRINT </span>slightly.</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">#CAREFULCOLUMNS <span class="p">is initially 0.</span></p><p class="s11" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<b>WIDEPAPER </b><i>FLG</i>) <span class="p">[Function]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">(WIDEPAPER T) <span class="p">sets </span>FILELINELENGTH <span class="p">(see Chapter 25), </span>FIRSTCOL<span class="p">, and </span>PRETTYLCOM</p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">to large values appropriate for pretty printing files to be listed on wide paper. <span class="s11">(WIDEPAPER) </span>restores these parameters to their initial values. <span class="s11">WIDEPAPER </span>returns the previous setting of <span class="s16">FLG</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 101pt;text-indent: 0pt;text-align: justify;">PRETTYFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s11">PRETTYFLG </span>is <span class="s11">NIL</span>, <span class="s11">PRINTDEF </span>uses <span class="s11">PRIN2 </span>instead of prettyprinting. This is useful for producing a fast symbolic dump (see the <span class="s11">FAST </span>option of <span class="s11">MAKEFILE </span>in Chapter 17). Note that the file loads the same as if it were prettyprinted. <span class="s11">PRETTYFLG </span>is initially set to <span class="s11">T</span>. <span class="s11">PRETTYFLG </span>should not be set to <span class="s11">NIL </span>if comment pointers are being used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">CLISPIFYPRETTYFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Used to inform <span class="s11">PRETTYPRINT </span>to call <span class="s11">CLISPIFY </span>on selected function definitions before printing them (see Chapter 21).</p><p class="s15" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">PRETTYPRINTMACROS <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">An association-list that enables the user to control the formatting of selected expressions. <span class="s11">CAR </span>of each expression being <span class="s11">PRETTYPRINT</span>ed is looked up on <span class="s11">PRETTYPRINTMACROS</span>, and if found, CDR of the corresponding entry is applied to the expression. If the result of this application is <span class="s11">NIL</span>, <span class="s11">PRETTYPRINT </span>ignores the expression; i.e., it prints nothing, assuming that the prettyprintmacro has done any desired printing. If the result of applying the prettyprint macro is non-<span class="s11">NIL</span>, the result is prettyprinted in the normal fashion. This gives the user the option of computing some other expression to be prettyprinted in its place.</p><p style="padding-top: 6pt;padding-left: 162pt;text-indent: -36pt;line-height: 93%;text-align: justify;">Note: &quot;prettyprinted in the normal fashion&quot; includes processing prettyprint macros, unless the prettyprint macro returns a structure <span class="s11">EQ </span>to the one it was handed, in which case the potential recursion is broken.</p><p class="s15" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">PRETTYPRINTYPEMACROS <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">A list of elements of the form <span class="s11">(TYPENAME . FN)</span>. For types other than lists and atoms, the type name of each datum to be prettyprinted is looked up on</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">USER I/O PACKAGES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">PRETTYPRINTYPEMACROS<span class="p">, and if found, the corresponding function is applied to the datum about to be printed, instead of simply printing it with </span>PRIN2<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">PRETTYEQUIVLST <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">An association-list that tells <span class="s11">PRETTYPRINT </span>to treat a <span class="s11">CAR</span>-of-form the same as some other <span class="s11">CAR</span>-of-form. For example, if <span class="s11">(QLAMBDA . LAMBDA) </span>appears on <span class="s11">PRETTYEQUIVLST</span>, then expressions beginning with <span class="s11">QLAMBDA </span>are prettyprinted the same as <span class="s11">LAMBDA</span>s. Currently, <span class="s11">PRETTYEQUIVLST </span>only allows (i.e., supports in an interesting way) equivalences to forms that <span class="s11">PRETTYPRINT </span>internally handles. Equivalence to forms for which the user has specified a prettyprint macro should be made by adding further entries to <span class="s11">PRETTYPRINTMACROS</span></p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">CHANGECHAR <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If non-<span class="s11">NIL</span>, and <span class="s11">PRETTYPRINT </span>is printing to a file or display terminal, <span class="s11">PRETTYPRINT </span>prints <span class="s11">CHANGECHAR </span>in the right hand margin while printing those expressions marked by the editor as having been changed (see Chapter 16).  <span class="s11">CHANGECHAR </span>is initially <span class="s11">|</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-top: 4pt;padding-left: 28pt;text-indent: -22pt;text-align: left;"><a name="bookmark30">GRAPHICS OUTPUT OPERATIONS</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="573" height="3" alt="image" src="Image_070.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Streams are used as the basis for all I / O operations. Files are implemented as streams that can support character printing and reading operations, and file pointer manipulation. An image stream is a type of stream that also provides an interface for graphical operations. All of the operations that can applied to streams can be applied to image streams. For example, an image stream can be passed as the argument to <span class="s11">PRINT</span>, to print something on an image stream. In addition, special functions are provided to draw lines and curves and perform other graphical operations. Calling these functions on a stream that is not an image stream will generate an error.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Primitive Graphics Concepts                                                                                                          </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The Interlisp-D graphics system is based on manipulating bitmaps (rectangular arrays of pixels), positions, regions, and textures. These objects are used by all of the graphics functions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Positions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;"><span class="p">A position denotes a point in an </span><span class="s12">X,Y </span><span class="p">coordinate system. A </span>POSITION <span class="p">is an instance of a record with fields </span>XCOORD <span class="p">and </span>YCOORD <span class="p">and is manipulated with the standard record package facilities. For example, </span>(create POSITION XCOORD <span class="s19"></span><span class="s21"> </span>10 YCOORD <span class="s19"></span><span class="s21"> </span>20) <span class="p">creates a position representing the point (10,20).</span></p><p class="s11" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>POSITIONP </b><span class="s33">X</span>) <span class="p">[Function]</span></p><p class="s5" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns <i>X </i>if <i>X </i>is a position; <span class="s11">NIL </span>otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 29pt;text-indent: 0pt;text-align: left;">Regions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A Region denotes a rectangular area in a coordinate system. Regions are characterized by the coordinates of their bottom left corner and their width and height. A <span class="s11">REGION </span>is a record with fields <span class="s11">LEFT</span>, <span class="s11">BOTTOM</span>, <span class="s11">WIDTH</span>, and <span class="s11">HEIGHT</span>. It can be manipulated with the standard record package facilities. There are access functions for the <span class="s11">REGION </span>record that return the <span class="s11">TOP </span>and <span class="s11">RIGHT </span>of the region.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The following functions are provided for manipulating regions:</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">CREATEREGION </span><span class="s16">LEFT BOTTOM WIDTH HEIGHT</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Returns an instance of the <span class="s12">REGION </span>record which has <span class="s16">LEFT</span>, <span class="s16">BOTTOM</span>, <span class="s16">WIDTH </span>and <span class="s16">HEIGHT</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">as respectively its <span class="s16">LEFT</span>, <span class="s16">BOTTOM</span>, <span class="s16">WIDTH</span>, and <span class="s16">HEIGHT </span>fields.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Example: (<span class="s12">CREATEREGION 10 -20 100 200</span>) will create a region that denotes a rectangle whose width is 100, whose height is 200, and whose lower left corner is at the position (10,-20).</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">REGIONP </span><span class="s16">X</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a region, <span class="s12">NIL </span>otherwise.</p><p class="s16" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s12">(</span><b>INTERSECTREGIONS </b>REGION<span class="s32">1 </span>REGION<span class="s32">2 </span>... REGION<span class="s32">n</span><span class="s12">)        </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns a region which is the intersection of a number of regions. Returns <span class="s12">NIL </span>if the intersection is empty.</p><p class="s16" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s12">(</span><b>UNIONREGIONS </b>REGION<span class="s32">1 </span>REGION<span class="s32">2 </span>... REGION<span class="s32">n</span><span class="s12">)           </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Returns a region which is the union of a number of regions, i.e. the smallest region that contains all of them.  Returns <span class="s12">NIL </span>if there are no regions given.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s12">(</span><b>REGIONSINTERSECTP </b>REGION<span class="s32">1 </span>REGION<span class="s32">2</span><span class="s12">)                         </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns <span class="s12">T </span>if <span class="s16">REGION</span><span class="s32">1 </span>intersects <span class="s16">REGION</span><span class="s32">2</span>.  Returns <span class="s12">NIL </span>if they do not intersect.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SUBREGIONP </span><span class="s16">LARGEREGION SMALLREGION</span>)                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns <span class="s12">T </span>if <span class="s16">SMALLREGION </span>is a subregion (is equal to or entirely contained in)</p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">LARGEREGION</span>; otherwise returns <span class="s12">NIL</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">EXTENDREGION </span><span class="s16">REGION INCLUDEREGION</span>)                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Changes (destructively modifies) the region <span class="s16">REGION </span>so that it includes the region</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">INCLUDEREGION<span class="p">. It returns </span>REGION<span class="p">.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MAKEWITHINREGION </span><span class="s16">REGION LIMITREGION</span>)                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Changes (destructively modifies) the left and bottom of the region <span class="s16">REGION </span>so that it is within the region <span class="s16">LIMITREGION</span>, if possible. If the dimension of <span class="s16">REGION </span>are larger than <span class="s16">LIMITREGION</span>, <span class="s16">REGION </span>is moved to the lower left of <span class="s16">LIMITREGION</span>. If <span class="s16">LIMITREGION </span>is <span class="s12">NIL</span>, the value of the variable <span class="s16">WHOLEDISPLAY </span>(the screen region) is used. <span class="s12">MAKEWITHINREGION </span>returns the modified <span class="s16">REGION</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">INSIDEP </span><span class="s16">REGION POSORX Y</span>)                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">POSORX </span>and <span class="s16">Y </span>are numbers, it returns <span class="s12">T </span>if the point (<span class="s16">POSORX,Y</span>) is inside of <span class="s16">REGION</span>. If <span class="s16">POSORX </span>is a <span class="s16">POSITION</span>, it returns <span class="s12">T </span>if <span class="s16">POSORX </span>is inside of <span class="s16">REGION</span>. If <span class="s16">REGION </span>is a <span class="s12">WINDOW</span>, the window’s interior region in window coordinates is used. Otherwise, it returns <span class="s12">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Bitmaps</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The display primitives manipulate graphical images in the form of bitmaps. A bitmap is a rectangular array of &quot;pixels,&quot; each of which is an integer representing the color of one point in the bitmap image. A bitmap is created with a specific number of bits allocated for each pixel. Most bitmaps used for the display screen use one bit per pixel, so that at most two colors can be represented. If a pixel is 0, the corresponding location on the image is white. If a pixel is 1, its location is black. This interpretation can be changed for the display screen with the function <span class="s12">VIDEOCOLOR</span>. Bitmaps with more than one bit per pixel are used to represent color or grey scale images. Bitmaps use a positive integer coordinate system with the lower left corner pixel at coordinate (0,0). Bitmaps are represented as instances  of  the  datatype  <span class="s12">BITMAP</span>.  Bitmaps  can  be  saved  on  files  with  the  <span class="s12">VARS </span>file  package command.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">BITMAPCREATE </span><span class="s16">WIDTH HEIGHT BITSPERPIXEL</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Creates and returns a new bitmap which is <span class="s16">WIDTH </span>pixels wide by <span class="s16">HEIGHT </span>pixels high, with <span class="s16">BITSPERPIXEL </span>bits per pixel. If <span class="s12">BITSPERPIXEL </span>is <span class="s12">NIL</span>, it defaults to 1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">BITMAPP </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a bitmap, <span class="s12">NIL </span>otherwise.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">BITMAPWIDTH </span><span class="s16">BITMAP</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the width of <span class="s16">BITMAP </span>in pixels.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">BITMAPHEIGHT </span><span class="s16">BITMAP</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Returns the height of <span class="s16">BITMAP </span>in pixels.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">BITSPERPIXEL </span><span class="s16">BITMAP</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the number of bits per pixel of <span class="s16">BITMAP</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">BITMAPBIT </span><span class="s16">BITMAP X Y NEWVALUE</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NEWVALUE </span>is between 0 and the maximum value for a pixel in <span class="s16">BITMAP</span>, the pixel (<span class="s16">X,Y</span>) is changed to <span class="s16">NEWVALUE </span>and the old value is returned. If <span class="s16">NEWVALUE </span>is <span class="s12">NIL</span>, <span class="s16">BITMAP </span>is not changed but the value of the pixel is returned. If <span class="s16">NEWVALUE </span>is anything else, an error is generated. If (<span class="s16">X,Y</span>) is outside the limits of <span class="s16">BITMAP</span>, 0 is returned and no pixels are changed. <span class="s16">BITMAP </span>can also be a window or display stream. Note: non-window image streams are &quot;write-only&quot;; the <span class="s16">NEWVALUE </span>argument must be non-<span class="s12">NIL</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">BITMAPCOPY </span><span class="s16">BITMAP</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns a new bitmap which is a copy of <span class="s16">BITMAP </span>(same dimensions, bits per pixel, and contents).</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">EXPANDBITMAP </span><span class="s16">BITMAP WIDTHFACTOR HEIGHTFACTOR</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns a new bitmap that is <span class="s16">WIDTHFACTOR </span>times as wide as <span class="s16">BITMAP </span>a</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">nd <span class="s16">HEIGHTFACTOR </span>times as high. Each pixel of <span class="s33">BITMAP </span>is copied into a <span class="s16">WIDTHFACTOR </span>times <span class="s16">HEIGHTFACTOR </span>block of pixels. If <span class="s12">NIL</span>, <span class="s16">WIDTHFACTOR </span>defaults to 4, <span class="s16">HEIGHTFACTOR </span>to 1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ROTATEBITMAP </span><span class="s16">BITMAP</span>)                                     <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Given an m-high by n-wide bitmap, this function returns an n-high by m-wide bitmap. The returned bitmap is the image of the original bitmap, rotated 90 degrees clockwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">(<span class="s15">SHRINKBITMAP </span><span class="s16">BITMAP WIDTHFACTOR HEIGHTFACTOR DESTINATIONBITMAP</span>)</p><p style="padding-left: 107pt;text-indent: 0pt;line-height: 11pt;text-align: left;">[Function]</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns a copy of <span class="s16">BITMAP </span>that has been shrunken by <span class="s16">WIDTHFACTOR </span>and <span class="s16">HEIGHTFACTOR </span>in the width and height, respectively. If <span class="s12">NIL</span>, <span class="s16">WIDTHFACTOR </span>defaults to 4, <span class="s16">HEIGHTFACTOR </span>to 1. If <span class="s16">DESTINATIONBITMAP </span>is not provided, a bitmap that is 1 / <span class="s16">WIDTHFACTOR </span>by 1 / <span class="s16">HEIGHTFACTOR </span>the size of <span class="s16">BITMAP </span>is created and returned. <span class="s16">WIDTHFACTOR </span>and <span class="s16">HEIGHTFACTOR </span>must be positive integers.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">PRINTBITMAP </span><span class="s16">BITMAP FILE</span>)                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Prints the bitmap <span class="s16">BITMAP </span>on the file <span class="s16">FILE </span>in a format that can be read back in by</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">READBITMAP<span class="p">.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">READBITMAP </span><span class="s16">FILE</span>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Creates a bitmap by reading an expression (written by <span class="s12">PRINTBITMAP</span>) from the file</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FILE<span class="p">.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">EDITBM </span><span class="s16">BMSPEC</span>)                                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s12">EDITBM </span>provides an easy-to-use interactive editing facility for various types of bitmaps. If <span class="s16">BMSPEC </span>is a bitmap, it is edited. If <span class="s16">BMSPEC </span>is an atom whose value is a bitmap, its value is edited. If <span class="s16">BMSPEC </span>is <span class="s12">NIL</span>, <span class="s12">EDITBM </span>asks for dimensions and creates a bitmap. If <span class="s16">BMSPEC </span>is a region, that portion of the screen bitmap is used. If <span class="s16">BMSPEC </span>is a window, it is brought to the top and its contents edited.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">EDITBM <span class="p">sets up the bitmap being edited in an editing window. The editing window has two major areas: a gridded edit area in the lower part of the window and a display area in the upper left part. In the edit area, the left button will add points, the middle button will erase points. The right button provides access to the normal window commands to reposition and reshape the window. The actual size bitmap is shown in the display area. For example, the following is a picture of the bitmap editing window editing a eight-high by eighteen-wide bitmap:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 146pt;text-indent: 0pt;text-align: left;"><span><img width="298" height="158" alt="image" src="Image_071.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If the bitmap is too large to fit in the edit area, only a portion will be editable. This portion can be changed by scrolling both up and down in the left margin and left and right in the bottom margin. Pressing the middle button while in the display area will bring up a menu that allows global placement of the portion of the bitmap being edited. To allow more of the bitmap to be editing at once, the window can be reshaped to make it larger or the <span class="s12">GridSize</span><span class="s4"></span><span class="s5"> </span>command described below can be used to reduce the size of a bit in the edit area.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The bitmap editing window can be reshaped to provide more or less room for editing. When this happens, the space allocated to the editing area will be changed to fit in the new region.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Whenever the left or middle button is down and the cursor is not in the edit area, the section of the display of the bitmap that is currently in the edit area is complemented. Pressing the left button while not in the edit region will put the lower left 16 x 16 section of the bitmap into the cursor for as long as the left button is held down.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Pressing the middle button while not in either the edit area or the display area (i.e., while in the grey area in the upper right or in the title) will bring up a command menu.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 204pt;text-indent: 0pt;text-align: left;"><span><img width="78" height="110" alt="image" src="Image_072.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are commands to stop editing, to restore the bitmap to its initial state and to clear the bitmap. Holding the middle button down over a command will result in an explanatory message being printed in the prompt window.  The commands are described below:</p><p class="s12" style="padding-top: 6pt;padding-left: 125pt;text-indent: -42pt;text-align: justify;">Paint <span class="p">Puts the current bitmap into a window and call the window </span>PAINT <span class="p">command on it. The </span>PAINT <span class="p">command implements drawing with various brush sizes and shapes but only on an actual sized bitmap. The </span>PAINT <span class="p">mode is left by pressing the </span>RIGHT <span class="p">button and selecting the </span>QUIT <span class="p">command from</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 94%;text-align: justify;">the menu. At this point, you will be given a choice of whether or not the changes you made while in <span class="s12">PAINT </span>mode should be made to the current bitmap.</p><p class="s12" style="padding-top: 6pt;padding-left: 173pt;text-indent: -72pt;line-height: 94%;text-align: justify;">ShowAsTile <span class="p">Tesselates the current bitmap in the upper part of the window. This is useful for determining how a bitmap will look if it were made the display background (using the function </span>CHANGEBACKGROUND<span class="p">). Note: The tiled display will not automatically change as the bitmap changes; to update it, use the </span>ShowAsTile <span class="p">command again.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">Grid,On/Off <span class="p">Turns the editing grid display on or off.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 174pt;text-indent: -69pt;line-height: 92%;text-align: justify;">GridSize<span class="s4"></span><span class="s5"> </span><span class="p">Allows specification of the size of the editing grid. Another menu will appear giving a choice of several sizes. If one is selected, the editing portion of the bitmap editor will be redrawn using the selected grid size, allowing more or less of the bitmap to be edited without scrolling. The original size is chosen hueristically and is typically about 8. It is particularly useful when editing large bitmaps to set the edit grid size smaller than the original.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 174pt;text-indent: -42pt;line-height: 92%;text-align: justify;">Reset <span class="p">Sets all or part of the bitmap to the contents it had when </span>EDITBM <span class="p">was called. Another menu will appear giving a choice between resetting the entire bitmap or just the portion that is in the edit area. The second menu also acts as a confirmation, since not selecting one of the choices on this menu results in no action being taken.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 173pt;text-indent: -42pt;line-height: 93%;text-align: justify;">Clear <span class="p">Sets all or part of the bitmap to 0. As with the </span>Reset <span class="p">command, another menu gives a choice between clearing the entire bitmap or just the portion that is in the edit area.</span></p><p class="s12" style="padding-top: 5pt;padding-left: 174pt;text-indent: -57pt;text-align: justify;">Cursor<span class="s4"></span><span class="s5"> </span><span class="p">Sets the cursor to the lower left part of the bitmap. This prompts the user to specify the cursor &quot;hot spot&quot;  by clicking in the lower left corner of the grid.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 174pt;text-indent: -24pt;line-height: 93%;text-align: justify;">OK <span class="p">Copies the changed image into the original bitmap, stops the bitmap editor and closes the edit windows. The changes the bitmap editor makes during the interaction occur on a copy of the original bitmap. Unless the bitmap editor is exited via </span>OK<span class="p">, no changes are made in the original.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 138pt;text-indent: 0pt;text-align: left;">Stop <span class="p">Stops the bitmap editor without making any changes to the original bitmap.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Textures</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A Texture denotes a pattern of gray which can be used to (conceptually) tessellate the plane to form an infinite sheet of gray. It is currently either a 4 by 4 pattern or a 16 by N (N &lt;= 16) pattern. Textures are created from bitmaps using the following function:</p><p class="s12" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<span class="s15">CREATETEXTUREFROMBITMAP </span><span class="s16">BITMAP</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns a texture object that will produce the texture of <span class="s16">BITMAP</span>. If <span class="s16">BITMAP </span>is too large, its lower left portion is used. If <span class="s16">BITMAP </span>is too small, it is repeated to fill out the texture.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">TEXTUREP </span><span class="s16">OBJECT</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">OBJECT </span>if it is a texture; <span class="s12">NIL </span>otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The functions which accept textures (<span class="s12">TEXTUREP, BITBLT, DSPTEXTURE</span>, <span class="s12">etc</span>.) also accept bitmaps up to 16 bits wide by 16 bits high as textures. When a region is being filled with a bitmap texture, the texture is treated as if it were 16 bits wide (if less, the rest is filled with white space).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The common textures white and black are available as system constants <span class="s12">WHITESHADE </span>and <span class="s12">BLACKSHADE</span>. The global variable <span class="s12">GRAYSHADE </span>is used by many system facilities as a background gray shade and can be set by the user.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">EDITSHADE </span><span class="s16">SHADE</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Opens a window that allows the user to edit textures.  Textures can be either small (4 by 4) patterns or large (16 by 16). In the edit area, the left button adds bits to the shade and the middle button erases bits from the shade. The top part of the window is painted with the current texture whenever all mouse keys are released. Thus it is possible to directly compare two textures that differ by more than one pixel by holding a mouse key down until all changes are made. When the &quot;quit&quot; button is selected, the texture being edited is returned.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">SHADE </span>is a texture object, <span class="s12">EDITSHADE </span>starts with it. If <span class="s16">SHADE </span>is T, it starts with a large (16 by 16) white texture. Otherwise, it starts with <span class="s12">WHITESHADE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">The following is a picture of the texture editor, editing a large (16 by 16) pattern:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 183pt;text-indent: 0pt;text-align: left;"><span><img width="201" height="201" alt="image" src="Image_073.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Opening Image Streams                                                                                                                  </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">An image stream is an output stream which &quot;knows&quot; how to process graphic commands to a graphics output device. Besides accepting the normal character-output functions (<span class="s12">PRINT</span>, etc.), an image</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">stream can also be passed as an argument to functions to draw curves, to print characters in multiple fonts, and other graphics operations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Each image stream has an &quot;image stream type,&quot; a litatom that specifies the type of graphic output device that the image stream is processing graphics commands for. Currently, the built-in image stream types are <span class="s12">DISPLAY </span>(for the display screen), <span class="s12">INTERPRESS </span>(for Interpress format printers),</p><p style="padding-top: 1pt;padding-left: 78pt;text-indent: 0pt;line-height: 107%;text-align: justify;">and <span class="s12">PRESS </span>(for Press format printers). There are also library packages <span class="s5">available that define image stream types for the IRIS display, 4045 printer, FX-80 printer, C150 printer, etc.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Image streams to the display (display streams) interpret graphics commands by immediately executing the appropriate operations to cause the desired image to appear on the display screen. Image streams for hardcopy devices such as Interpress printers interpret the graphic commands by saving information in a file, which can later be sent to the printer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Note: Not all graphics operations can be properly executed for all image stream types. For example, <span class="s12">BITBLT </span>may not be supported to all printers. This functionality is still being developed, but even in the long run some operations may be beyond the physical or logical capabilities of some devices or image file formats.  In these cases, the stream will approximate the specified image as best it can.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">OPENIMAGESTREAM </span><span class="s16">FILE IMAGETYPE OPTIONS</span>)                    <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Opens and returns an image stream of type <span class="s16">IMAGETYPE </span>on a destination specified by <span class="s16">FILE</span>. If <span class="s16">FILE </span>is a file name on a normal file storage device, the image stream will store graphics commands on the specified file, which can be transmitted to a printer by explicit calls to <span class="s12">LISTFILES </span>and <span class="s12">SEND.FILE.TO.PRINTER</span>. If <span class="s16">IMAGETYPE </span>is <span class="s12">DISPLAY</span>,</p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">then the user is prompted for a window to open. <span class="s16">FILE </span>in this case will be used as the title of the window.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">FILE </span>is a file name on the <span class="s12">LPT </span>device, this indicates that the graphics commands should be stored in a temporary file, and automatically sent to the printer when the image stream is closed by <span class="s12">CLOSEF</span>.  <span class="s16">FILE </span><span class="s12">= NIL </span>is equivalent to <span class="s16">FILE </span><span class="s12">= {LPT}</span>.  File names on the <span class="s12">LPT </span>device are of the form {<span class="s12">LPT}PRINTERNAME.TYPE</span>, where <span class="s12">PRINTERNAME</span>, <span class="s12">TYPE</span>, or both may be omitted. <span class="s12">PRINTERNAME </span>is the name of the particular printer to which the file will be transmitted on closing; it defaults to the first printer on <span class="s12">DEFAULTPRINTINGHOST </span>that can print <span class="s16">IMAGETYPE </span>files. The <span class="s12">TYPE </span>extension supplies the value of <span class="s16">IMAGETYPE </span>when it is defaulted (see below). <span class="s12">OPENIMAGESTREAM </span>will generate an error if the specified printer does not accept the kind of file specified by <span class="s16">IMAGETYPE</span>.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">IMAGETYPE </span>is <span class="s12">NIL</span>, the image type is inferred from the extension field of <span class="s16">FILE </span>and the <span class="s12">EXTENSIONS </span>properties in the list <span class="s12">PRINTFILETYPES</span>. Thus, the extensions <span class="s12">IP</span>, <span class="s12">IPR</span>, and <span class="s12">INTERPRESS </span>indicate Interpress format, and the extension <span class="s12">PRESS </span>indicates Press format. If <span class="s33">FILE </span>is a printer file with no extension (of the form <span class="s12">{LPT}PRINTERNAME)</span>, then <span class="s16">IMAGETYPE </span>will be the type that the indicated printer can print. If <span class="s16">FILE </span>has no extension but is not on the printer device <span class="s12">{LPT}</span>, then <span class="s16">IMAGETYPE </span>will default to the type accepted by the first printer on <span class="s12">DEFAULTPRINTINGHOST</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s16">OPTIONS </span>is a list in property list format, (<span class="s12">PROP1 VAL1 PROP2 VAL2 —</span>), used to specify certain attributes of the image stream; not all attributes are meaningful or interpreted by all types of image streams.  Acceptable properties are:</p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: -48pt;line-height: 94%;text-align: justify;">REGION <span class="p">Value is the region on the page (in stream scale units, 0,0 being the lower-left corner of the page) that text will fill up. It establishes the initial values for </span>DSPLEFTMARGIN<span class="p">, </span>DSPRIGHTMARGIN<span class="p">, </span>DSPBOTTOMMARGIN <span class="p">(the point at</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">which carriage returns cause page advancement) and <span class="s12">DSPTOPMARGIN</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(where the stream is positioned at the beginning of a new page).</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">If this property is not given, the value of the variable</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DEFAULTPAGEREGION<span class="p">, is used</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 126pt;text-indent: -42pt;line-height: 92%;text-align: justify;">FONTS <span class="p">Value is a list of fonts that are expected to be used in the image stream. Some image streams (e.g. Interpress) are more efficient if the expected fonts are specified in advance, but this is not necessary. The first font in this list will be the initial font of the stream, otherwise the default font for that image stream type will be used.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: -54pt;text-align: justify;">HEADING <span class="p">Value is the heading to be placed automatically on each page. </span>NIL <span class="p">means no heading.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Examples: Suppose that Tremor: is an Interpress printer, Quake is a Press printer, and <span class="s12">DEFAULTPRINTINGHOST </span>is <span class="s12">(Tremor: Quake):</span></p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(OPENIMAGESTREAM) <span class="p">returns an Interpress image stream on printer Tremor:.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(OPENIMAGESTREAM NIL ’PRESS) <span class="p">returns a Press stream on Quake.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(OPENIMAGESTREAM ’{LPT}.INTERPRESS) <span class="p">returns an Interpress stream on Tremor:.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">(OPENIMAGESTREAM ’{CORE}FOO.PRESS) <span class="p">returns a Press stream on the file </span>{CORE}FOO.PRESS.</p><p class="s12" style="padding-top: 6pt;padding-left: 78pt;text-indent: -24pt;line-height: 17pt;text-align: left;">(<span class="s15">IMAGESTREAMP </span><span class="s16">X IMAGETYPE</span>) <span class="p">[NoSpread Function] Returns </span><span class="s16">X </span><span class="p">(possibly coerced to a stream) if it is an output image stream of type</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">IMAGETYPE </span>(or of any type if <span class="s16">IMAGETYPE </span><span class="s12">= NIL</span>), otherwise <span class="s12">NIL</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">IMAGESTREAMTYPE </span><span class="s16">STREAM</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the image stream type of <span class="s16">STREAM</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">IMAGESTREAMTYPEP </span><span class="s16">STREAM TYPE</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns <span class="s12">T </span>if <span class="s16">STREAM </span>is an image stream of type <span class="s16">TYPE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Accessing Image Stream Fields                                                                                                     </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The following functions manipulate the fields of an image stream. These functions return the old value (the one being replaced). A value of <span class="s12">NIL </span>for the new value will return the current setting without changing it. These functions do not change any of the bits drawn on the image stream; they just affect future operations done on the image stream.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPCLIPPINGREGION </span><span class="s16">REGION STREAM</span>)                           <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The clipping region is a region that limits the extent of characters printed and lines drawn (in the image stream’s coordinate system). Initially set so that no clipping occurs.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Warning: For display streams, the window system maintains the clipping region during window operations.  Users should be very careful about changing this field.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPFONT </span><span class="s16">FONT STREAM</span>)                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The font field specifies the font used when printing characters to the image stream.</p><p class="s12" style="padding-top: 6pt;padding-left: 197pt;text-indent: -36pt;text-align: justify;"><span class="p">Note: </span>DSPFONT <span class="p">determines its new font descriptor from </span><span class="s16">FONT </span><span class="p">by the same coercion rules that </span>FONTPROP <span class="p">and </span>FONTCREATE <span class="p">use , with one additional possibility: If </span><span class="s16">FONT </span><span class="p">is a list of the form </span>(PROP<span class="s54">1 </span>VAL<span class="s54">1 </span>PROP<span class="s54">2 </span>VAL<span class="s54">2 </span>...) <span class="p">where </span>PROP<span class="s54">1 </span><span class="p">is acceptable as a font-property to </span>FONTCOPY<span class="p">, then the new font is obtained by </span>(FONTCOPY (DSPFONT  NIL STREAM) PROP<span class="s32">1 </span>VAL<span class="s32">1 </span>PROP<span class="s32">2 </span>VAL<span class="s32">2 </span>...)<span class="p">.</span></p><p style="padding-left: 198pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For example, <span class="s12">(DSPFONT ’(SIZE 12) STREAM) </span>would change the font to the 12 point version of the current font, leaving all other font properties the same.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPTOPMARGIN </span><span class="s16">YPOSITION STREAM</span>)                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The top margin is an integer that is the <span class="s12">Y </span>position after a new page (in the image stream’s coordinate system). This function has no effect on windows.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPBOTTOMMARGIN </span><span class="s16">YPOSITION STREAM</span>)                          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The bottom margin is an integer that is the minimum <span class="s12">Y </span>position that characters will be printed by <span class="s12">PRIN1 </span>(in the image stream’s coordinate system). This function has no effect on windows.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPLEFTMARGIN </span><span class="s16">XPOSITION STREAM</span>)                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The left margin is an integer that is the <span class="s12">X </span>position after an end-of-line (in the image stream’s coordinate system). Initially the left edge of the clipping region.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPRIGHTMARGIN </span><span class="s16">XPOSITION STREAM</span>)                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The right margin is an integer that is the maximum <span class="s12">X </span>position that characters will be printed by <span class="s12">PRIN1 </span>(in the image stream’s coordinate system). This is initially the position of the right edge of the window or page.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The line length of a window or image stream (as returned by <span class="s12">LINELENGTH</span>) is computed by dividing the distance between the left and right margins by the width of an uppercase &quot;A&quot; in the current font. The line length is changed whenever the font, left margin, or right margin are changed or whenever the window is reshaped.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DSPOPERATION </span><span class="s16">OPERATION STREAM</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The operation is the default <span class="s12">BITBLT </span>operation used when printing or drawing on the image stream. One of <span class="s12">REPLACE, PAINT, INVERT</span>, or <span class="s12">ERASE</span>. Initially <span class="s12">REPLACE</span>. This is a meaningless operation for most printers which support the model that once dots are deposited on a page they cannot be removed.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DSPLINEFEED </span><span class="s16">DELTAY STREAM</span>) <span class="p">[Function]</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The linefeed is an integer that specifies the <span class="s33">Y </span>increment for each linefeed, normally negative. Initially minus the height of the initial font.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DSPCLEOL </span><span class="s16">DSPSTREAM XPOS YPOS HEIGHT</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">&quot;Clear to end of line&quot;. Clears a region from (<span class="s16">XPOS,YPOS</span>) to the right margin of the display, with a height of <span class="s16">HEIGHT</span>. If <span class="s16">XPOS </span>and <span class="s16">YPOS </span>are <span class="s12">NIL</span>, clears the remainder of the current display line, using the height of the current font.</p><p class="s10" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DSPRUBOUTCHAR </span><span class="s16">DSPSTREAM CHAR X Y TTBL</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Backs up over character code <span class="s16">CHAR </span>in the <span class="s16">DSPSTREAM</span>, erasing it. If <span class="s16">X</span>, <span class="s16">Y </span>are supplied, the rubbing out starts from the position specified. <span class="s15">DSPRUBOUTCHAR </span>assumes <span class="s16">CHAR </span>was printed with the terminal table <span class="s16">TTBL</span>, so it knows to handle control characters, etc. <span class="s16">TTBL </span>defaults to the primary terminal table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DSPSCALE </span><span class="s16">SCALE STREAM</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Returns the scale of the image stream <span class="s16">STREAM</span>, a number indicating how many units in the streams coordinate system correspond to one printer’s point (1 / 72 of an inch). For example, <span class="s12">DSPSCALE </span>returns 1 for display streams, and 35.27778 for Interpress and Press streams (the number of micas per printer’s point).  In order to be device-independent, user graphics programs must either not specify position values absolutely, or must multiply absolute point quantities by the <span class="s12">DSPSCALE </span>of the destination stream. For example, to set the left margin of the Interpress stream <span class="s12">XX </span>to one inch, do</p><p class="s12" style="padding-top: 8pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(DSPLEFTMARGIN (TIMES 72 (DSPSCALE NIL XX)) XX)</p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The <span class="s12">SCALE </span>argument to <span class="s12">DSPSCALE </span>is currently ignored. In a future release it will enable the scale of the stream to be changed under user control, so that the necessary multiplication will be done internal to the image stream interface. In this case, it would be possible to set the left margin of the Interpress stream <span class="s12">XX </span>to one inch by doing</p><p class="s12" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(DSPSCALE 1 XX)</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(DSPLEFTMARGIN 72 XX)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPSPACEFACTOR </span><span class="s16">FACTOR STREAM</span>)                             <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The space factor is the amount by which to multiply the natural width of all following space characters on <span class="s16">STREAM</span>; this can be used for the justification of text. The default value is 1. For example, if the natural width of a space in <span class="s16">STREAM</span>’s current font is 12 units, and the space factor is set to two, spaces appear 24 units wide. The values returned by <span class="s12">STRINGWIDTH </span>and <span class="s12">CHARWIDTH </span>are also affected.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: left;">The following two functions only have meaning for image streams that can display color:</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPCOLOR </span><span class="s16">COLOR STREAM</span>)                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Sets the default foreground color of <span class="s16">STREAM</span>. Returns the previous foreground color. If <span class="s16">COLOR </span>is <span class="s12">NIL</span>, it returns the current foreground color without changing anything. The default color is white</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPBACKCOLOR </span><span class="s16">COLOR STREAM</span>)                                <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Sets the background color of <span class="s16">STREAM</span>. Returns the previous background color. If <span class="s16">COLOR </span>is <span class="s12">NIL</span>, it returns the current background color without changing anything. The default background color is black.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Current Position of an Image Stream                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Each image stream has a &quot;current position,&quot; which is a position (in the image stream’s coordinate system) where the next printing operation will start from. The functions which print characters or draw on an image stream update these values appropriately. The following functions are used to explicitly access the current position of an image stream:</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPXPOSITION </span><span class="s16">XPOSITION STREAM</span>)                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the <span class="s12">X </span>coordinate of the current position of <span class="s16">STREAM</span>. If <span class="s16">XPOSITION </span>is non-<span class="s12">NIL</span>, the <span class="s12">X </span>coordinate is set to it (without changing the <span class="s12">Y </span>coordinate).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPYPOSITION </span><span class="s16">YPOSITION STREAM</span>)                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the <span class="s12">Y </span>coordinate of the current position of <span class="s16">STREAM</span>. If <span class="s16">YPOSITION </span>is non-<span class="s12">NIL</span>, the <span class="s12">Y </span>coordinate is set to it (without changing the <span class="s12">X </span>coordinate).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MOVETO </span><span class="s16">X Y STREAM</span>)                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Changes the current position of <span class="s16">STREAM </span>to the point (<span class="s16">X,Y</span>).</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">RELMOVETO </span><span class="s16">DX DY STREAM</span>)                                   <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Changes the current position to the point (<span class="s16">DX,DY</span>) coordinates away from current position of <span class="s16">STREAM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">MOVETOUPPERLEFT </span><span class="s16">STREAM REGION</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Moves the current position to the beginning position of the top line of text. If <span class="s16">REGION </span>is non-<span class="s12">NIL</span>, it must be a <span class="s16">REGION </span>and the <span class="s12">X </span>position is changed to the left edge of <span class="s16">REGION </span>and the <span class="s12">Y </span>position changed to the top of <span class="s16">REGION </span>less the font ascent of <span class="s16">STREAM</span>. If <span class="s16">REGION </span>is <span class="s12">NIL</span>, the <span class="s12">X </span>coordinate is changed to the left margin of <span class="s16">STREAM </span>and the <span class="s12">Y </span>coordinate is changed to the top of the clipping region of <span class="s16">STREAM </span>less the font ascent of <span class="s16">STREAM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Moving Bits Between Bitmaps With BITBLT                                                                                  </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">BITBLT <span class="p">is the primitive function for moving bits from one bitmap to another, or from a bitmap to an image stream.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 60pt;text-indent: -6pt;line-height: 84%;text-align: justify;">(<span class="s15">BITBLT </span><span class="s16">SOURCE SOURCELEFT SOURCEBOTTOM DESTINATION DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Transfers a rectangular array of bits from <span class="s16">SOURCE </span>to <span class="s16">DESTINATION</span>. <span class="s16">SOURCE </span>can be a bitmap, or a display stream or window, in which case its associated bitmap is used. <span class="s16">DESTINATION </span>can be a bitmap or an arbitrary image stream.</p><p class="s16" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">WIDTH <span class="p">and </span>HEIGHT <span class="p">define a pair of rectangles, one in each of the </span>SOURCE <span class="p">and </span>DESTINATION <span class="p">whose left, bottom corners are at, respectively, (</span>SOURCELEFT, SOURCEBOTTOM<span class="p">) and (</span>DESTINATIONLEFT, DESTINATIONBOTTOM<span class="p">). If these rectangles</span></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">overlap the boundaries of either source or destination they are both reduced in size (without translation) so that they fit within their respective boundaries. If <span class="s16">CLIPPINGREGION </span>is non-<span class="s12">NIL </span>it should be a <span class="s16">REGION </span>and is interpreted as a clipping region within <span class="s16">DESTINATION</span>; clipping to this region may further reduce the defining rectangles. These (possibly reduced) rectangles define the source and destination rectangles for <span class="s12">BITBLT</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The mode of <span class="s16">transferring </span>bits is defined by <span class="s16">SOURCETYPE </span>and <span class="s16">OPERATION</span>. <span class="s16">SOURCETYPE </span>and <span class="s16">OPERATION </span>specify whether the source bits should come from <span class="s16">SOURCE </span>or <span class="s16">TEXTURE</span>, and how these bits are combined with those of <span class="s16">DESTINATION</span>. <span class="s16">SOURCETYPE </span>and <span class="s16">OPERATION </span>are described further below.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">TEXTURE </span>is a texture. <span class="s12">BITBLT </span>aligns the texture so that the upper-left pixel of the texture coincides with the upper-left pixel of the destination bitmap.</p><p class="s16" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">SOURCELEFT, SOURCEBOTTOM, DESTINATIONLEFT<span class="p">, and </span>DESTINATIONBOTTOM</p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">default to 0. <span class="s16">WIDTH </span>and <span class="s16">HEIGHT </span>default to the width and height of the <span class="s16">SOURCE</span>. <span class="s16">TEXTURE </span>defaults to white. <span class="s16">SOURCETYPE </span>defaults to <span class="s12">INPUT</span>. <span class="s16">OPERATION </span>defaults to <span class="s12">REPLACE</span>. If <span class="s16">CLIPPINGREGION </span>is not provided, no additional clipping is done. <span class="s12">BITBLT </span>returns <span class="s12">T </span>if any bits were moved; <span class="s12">NIL </span>otherwise.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note: If <span class="s16">SOURCE </span>or <span class="s16">DESTINATION </span>is a window or image stream, the remaining arguments are interpreted as values in the coordinate system of the window or image</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">stream and the operation of <span class="s12">BITBLT </span>is translated and clipped accordingly. Also, if a window or image stream is used as the destination to <span class="s12">BITBLT</span>, its clipping region further limits the region involved.</p><p class="s16" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">SOURCETYPE <span class="p">specifies whether the source bits should come from the bitmap </span>SOURCE<span class="p">, or from the texture </span>TEXTURE<span class="p">. </span>SOURCETYPE <span class="p">is interpreted as follows:</span></p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: 0pt;text-align: justify;"><span class="s12">INPUT </span>The source bits come from <span class="s16">SOURCE</span>. <span class="s16">TEXTURE </span>is ignored.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s12">INVERT </span>The source bits are the inverse of the bits from <span class="s16">SOURCE</span>. <span class="s16">TEXTURE </span>is ignored.</p><p style="padding-top: 6pt;padding-left: 120pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s12">TEXTURE </span>The source bits come from <span class="s16">TEXTURE. SOURCE, SOURCELEFT</span>, and</p><p class="s16" style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">SOURCEBOTTOM <span class="p">are ignored.</span></p><p class="s16" style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;text-align: justify;">OPERATION <span class="p">specifies how the source bits (as specified by </span>SOURCETYPE<span class="p">) are combined with the bits in </span>DESTINATION <span class="p">and stored back into </span>DESTINATION<span class="p">. </span>DESTINATION <span class="p">is one of the following:</span></p><p class="s12" style="padding-top: 6pt;padding-left: 120pt;text-indent: 0pt;text-align: justify;">REPLACE <span class="p">All source bits (on or off) replace destination bits.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 173pt;text-indent: -42pt;text-align: justify;">PAINT <span class="p">Any source bits that are on replace the corresponding destination bits. Source bits that are off have no effect. Does a logical </span>OR <span class="p">between the source bits and the destination bits.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 174pt;text-indent: -48pt;text-align: justify;">INVERT <span class="p">Any source bits that are on invert the corresponding destination bits. Does a logical </span>XOR <span class="p">between the source bits and the destination bits.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 174pt;text-indent: -42pt;text-align: justify;">ERASE <span class="p">Any source bits that are on erase the corresponding destination bits. Does a logical </span>AND <span class="p">operation between the inverse of the source bits and the destination bits.</span></p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Different combinations of <span class="s16">SOURCETYPE </span>and <span class="s16">OPERATION </span>can be specified to achieve many different effects. Given the following bitmaps as the values of <span class="s16">SOURCE</span>, <span class="s16">TEXTURE</span>, and <span class="s16">DESTINATION</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 174pt;text-indent: 0pt;text-align: left;"><span><img width="40" height="47" alt="image" src="Image_074.gif"/></span>	<span><img width="40" height="47" alt="image" src="Image_075.gif"/></span>	<span><img width="54" height="60" alt="image" src="Image_076.gif"/></span></p><p style="padding-top: 8pt;padding-left: 173pt;text-indent: 0pt;text-align: justify;"><span class="s12">BITBLT </span>would produce the results given below for the difference combinations of <span class="s16">SOURCETYPE </span>and <span class="s16">OPERATION </span>(assuming <span class="s16">CLIPPINGREGION</span>, <span class="s16">SOURCELEFT</span>, etc. are set correctly, of course):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 151pt;text-indent: 0pt;text-align: left;"><span><img width="53" height="68" alt="image" src="Image_077.gif"/></span>	<span><img width="53" height="68" alt="image" src="Image_078.gif"/></span>	<span><img width="53" height="68" alt="image" src="Image_079.gif"/></span>	<span><img width="53" height="68" alt="image" src="Image_080.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 103pt;text-indent: 0pt;text-align: left;"><span><img width="54" height="68" alt="image" src="Image_081.gif"/></span>	<span><img width="54" height="68" alt="image" src="Image_082.gif"/></span>	<span><img width="54" height="68" alt="image" src="Image_083.gif"/></span>	<span><img width="54" height="68" alt="image" src="Image_084.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 103pt;text-indent: 0pt;text-align: left;"><span><img width="54" height="68" alt="image" src="Image_085.gif"/></span>	<span><img width="54" height="68" alt="image" src="Image_086.gif"/></span>	<span><img width="54" height="68" alt="image" src="Image_087.gif"/></span>	<span><img width="54" height="68" alt="image" src="Image_088.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(<span class="s15">BLTSHADE </span><span class="s16">TEXTURE DESTINATION DESTINATIONLEFT DESTINATIONBOTTOM WIDTH</span></p><p class="s16" style="padding-left: 60pt;text-indent: 0pt;text-align: left;">HEIGHT  OPERATION  CLIPPINGREGIO<span class="s12">)</span>N                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s12">BLTSHADE </span>is the <span class="s16">SOURCETYPE = TEXTURE </span>case of <span class="s12">BITBLT</span>. It fills the specified region of the destination bitmap <span class="s16">DESTINATION </span>with the texture <span class="s16">TEXTURE</span>. <span class="s16">DESTINATION </span>can be a bitmap or image stream.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">BITMAPIMAGESIZE </span><span class="s16">BITMAP DIMENSION STREAM</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns the size that <span class="s16">BITMAP </span>will be when <span class="s12">BITBLT</span>ed to <span class="s16">STREAM</span>, in <span class="s16">STREAM</span>’s units.</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s16">DIMENSION </span>can be one of <span class="s16">WIDTH</span>, <span class="s16">HEIGHT</span>, or <span class="s12">NIL</span>, in which case the dotted pair (<span class="s16">WIDTH</span></p><p class="s16" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">. HEIGHT<span class="p">) will be returned.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Drawing Lines                                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Interlisp-D provides several functions for drawing lines and curves on image streams. The line drawing functions are intended for interactive applications where efficiency is important. They do not allow the use of &quot;brush&quot; patterns, like the curve drawing functions, but (for display streams) they support drawing a line in <span class="s12">INVERT </span>mode, so redrawing the line will erase it. <span class="s12">DRAWCURVE </span>can be used to draw lines using a brush.</p><p class="s16" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s12">(</span><b>DRAWLINE </b>X<span class="s32">1 </span>Y<span class="s32">1 </span>X<span class="s32">2 </span>Y<span class="s32">2 </span>WIDTH OPERATION STREAM COLOR DASHING<span class="s12">) </span><span class="p">[Function]</span></p><p class="s16" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="p">Draws a straight line from the point (</span>X<span class="s32">1</span><span class="s33">,</span>Y<span class="s32">1</span><span class="p">) to the point (</span>X<span class="s32">2</span><span class="s33">,</span>Y<span class="s32">2</span><span class="p">) on the image stream </span>STREAM<span class="p">. The position of </span>STREAM <span class="p">is set to (</span>X<span class="s32">2</span><span class="s33">,</span>Y<span class="s32">2</span><span class="p">). If </span>X<span class="s32">1 </span><span class="p">equals </span>X<span class="s32">2 </span><span class="p">and </span>Y<span class="s32">1 </span><span class="p">equals </span>Y<span class="s32">2</span><span class="p">, a point is drawn at (</span>X<span class="s32">1</span><span class="s33">,</span>Y<span class="s32">1</span><span class="p">).</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;"><span class="s16">WIDTH </span>is the width of the line, in the units of the device. If <span class="s16">WIDTH </span>is <span class="s12">NIL</span>, the default is 1.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: left;"><span class="s16">OPERATION </span>is the <span class="s12">BITBLT </span>operation used to draw the line. If <span class="s16">OPERATION </span>is <span class="s12">NIL</span>, the value of <span class="s12">DSPOPERATION </span>for the image stream is used.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: left;"><span class="s16">COLOR </span>is a color specification that determines the color used to draw the line for image streams that support color. If <span class="s16">COLOR </span>is <span class="s12">NIL</span>, the <span class="s16">DSPCOLOR </span>of <span class="s16">STREAM </span>is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s16">DASHING </span>is a list of positive integers that determines the dashing characteristics of the line. The line is drawn for the number of points indicated by the first element of the dashing list, is not drawn for the number of points indicated by the second element. The third element indicates how long it will be on again, and so forth. The dashing sequence is repeated from the beginning when the list is exhausted. A brush <span class="s12">LINEWITHBRUSH- </span>by<span class="s12">-LINEWITHBRUSH </span>is used.</p><p style="padding-top: 6pt;padding-left: 128pt;text-indent: 0pt;text-align: justify;">If <span class="s16">DASHING </span>is <span class="s12">NIL</span>, the line is not dashed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 102pt;text-indent: 0pt;line-height: 77%;text-align: left;"><span class="s12">(</span><b>DRAWBETWEEN </b>POSITION<span class="s32">1 </span>POSITION<span class="s32">2 </span>WIDTH OPERATION STREAM COLOR DASHING<span class="s12">)</span></p><p style="padding-left: 107pt;text-indent: 0pt;line-height: 11pt;text-align: left;">[Function]</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Draws a line from the point <span class="s16">POSITION</span><span class="s32">1 </span>to the point <span class="s16">POSITION</span><span class="s32">2 </span>onto the destination bitmap of <span class="s16">STREAM</span>.  The position of <span class="s16">STREAM </span>is set to <span class="s16">POSITION</span><span class="s32">2</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">In the Medley release, when using the color argument, Interpress <span class="s15">DRAWLINE </span>treats 16x16 bitmaps or negative numbers as shades / textures. Positive numbers continue to refer to color maps, and so cannot be used as textures. To convert an integer shade into a negative number use <span class="s12">NEGSHADE </span>(e.g. (<span class="s12">NEGSHADE 42495</span>) is <span class="s12">-23041</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">(<span class="s15">DRAWTO </span><span class="s16">X Y WIDTH OPERATION STREAM COLOR DASHING</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Draws a line from the current position to the point (<span class="s16">X,Y</span>) onto the destination bitmap of</p><p class="s16" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">STREAM<span class="p">. The position of </span>STREAM <span class="p">is set to (</span>X,Y<span class="p">).</span></p><p class="s12" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<span class="s15">RELDRAWTO </span><span class="s16">DX DY WIDTH OPERATION STREAM COLOR DASHING</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Draws a line from the current position to the point (<span class="s16">DX,DY</span>) coordinates away onto the destination bitmap of <span class="s16">STREAM</span>. The position of <span class="s16">STREAM </span>is set to the end of the line. If <span class="s16">DX </span>and <span class="s16">DY </span>are both 0, nothing is drawn.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Drawing Curves                                                                                                                                </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A curve is drawn by placing a brush pattern centered at each point along the curve’s trajectory. A brush pattern is defined by its shape, size, and color. The predefined brush shapes are <span class="s12">ROUND</span>, <span class="s12">SQUARE</span>, <span class="s12">HORIZONTAL</span>, <span class="s12">VERTICAL</span>, and <span class="s12">DIAGONAL</span>; new brush shapes can be created using the <span class="s12">INSTALLBRUSH </span>function, described below. A brush size is an integer specifying the width of the brush in the units of the device. The color is a color specification, which is only used if the curve is drawn to an image stream that supports colors.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">A brush is specified to the various drawing functions as a list of the form (<span class="s12">SHAPE WIDTH COLOR</span>), for example (<span class="s12">SQUARE 2</span>) or (<span class="s12">VERTICAL 4 RED</span>). A brush can also be specified as a positive integer, which is interpreted as a <span class="s12">ROUND </span>brush of that width. If a brush is a litatom, it is assumed to be a function which is called at each point of the curve’s trajectory (with three arguments: the <span class="s12">X</span>-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">coordinate of the point, the <span class="s12">Y</span>-coordinate, and the image stream), and should do whatever image stream operations are necessary to draw each point. Finally, if a brush is specified as <span class="s12">NIL</span>, a (<span class="s12">ROUND 1</span>) brush is used as default.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The appearance of a curve is also determined by its dashing characteristics. Dashing is specified by a list of positive integers. If a curve is dashed, the brush is placed along the trajectory for the number of units indicated by the first element of the dashing list. The brush is off, not placed in the bitmap, for a number of units indicated by the second element. The third element indicates how long it will be on again, and so forth. The dashing sequence is repeated from the beginning when the list is exhausted. The units used to measure dashing are the units of the brush. For example, specifying the dashing as (1 1) with a brush of (<span class="s12">ROUND 16</span>) would put the brush on the trajectory, skip 16 points, and put down another brush. A curve is not dashed if the dashing argument to the drawing function is <span class="s12">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">The curve functions use the image stream’s clipping region and operation. Most types of image streams only support the <span class="s12">PAINT </span>operation when drawing curves. When drawing to a display stream, the curve-drawing functions accept the operation <span class="s12">INVERT </span>if the brush argument is 1. For brushes larger than 1, these functions will use the <span class="s12">ERASE </span>operation instead of <span class="s12">INVERT</span>. For display streams, the curve-drawing functions treat the <span class="s12">REPLACE </span>operation the same as <span class="s12">PAINT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DRAWCURVE </span><span class="s16">KNOTS CLOSED BRUSH DASHING STREAM</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Draws a &quot;parametric cubic spline curve&quot; on the image stream <span class="s16">STREAM</span>. <span class="s16">KNOTS </span>is a list of positions to which the curve will be fitted. If <span class="s16">CLOSED </span>is non-<span class="s12">NIL</span>, the curve will be closed; otherwise it ends at the first and last positions in <span class="s16">KNOTS</span>. <span class="s16">BRUSH </span>and <span class="s16">DASHING </span>are interpreted as described above.</p><p style="padding-top: 5pt;padding-left: 113pt;text-indent: 0pt;text-align: justify;">For example,</p><p class="s12" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;text-align: justify;">(DRAWCURVE ’((10 . 10)(50 . 50)(100 . 10)(150 . 50))</p><p class="s12" style="padding-left: 132pt;text-indent: 0pt;text-align: left;">NIL ’(ROUND 5) ’(1 1 1 2) XX)</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">would draw a curve like the following on the display stream XX:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 216pt;text-indent: 0pt;text-align: left;"><span><img width="158" height="59" alt="image" src="Image_089.gif"/></span></p><p class="s12" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(<span class="s15">DRAWCIRCLE </span><span class="s16">CENTERX CENTERY RADIUS BRUSH DASHING</span></p><p class="s16" style="padding-left: 65pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">STREAM<span class="s5">) </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Draws a circle of radius <span class="s16">RADIUS </span>about the point (<span class="s16">CENTERX,CENTERY</span>) onto the image stream <span class="s16">STREAM</span>. <span class="s16">STREAM</span>’s position is left at (<span class="s16">CENTERX,CENTERY</span>). The other arguments are interpreted as described above.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 8pt;padding-left: 102pt;text-indent: 0pt;line-height: 79%;text-align: center;">(<span class="s15">DRAWARC    </span><span class="s16">CENTERX    CENTERY    RADIUS    STARTANGLE    NDEGREES    BRUSH DASHINGSTREAM)                                            </span><span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Draws an arc of the circle whose center point is (<span class="s16">CENTERX CENTERY</span>) and whose radius is <span class="s16">RADIUS </span>from the position at <span class="s16">STARTANGLE </span>degrees for <span class="s16">NDEGREES </span>number of degrees. If <span class="s16">STARTANGLE </span>is 0, the starting point will be (<span class="s16">CENTERX </span>(<span class="s16">CENTERY </span>+ <span class="s16">RADIUS</span>)). If <span class="s16">NDEGREES </span>is positive, the arc will be counterclockwise. If <span class="s16">NDEGREES </span>is negative, the arc will be clockwise. The other arguments are interpreted as described in <span class="s15">DRAWCIRCLE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(<span class="s15">DRAWELLIPSE  </span><span class="s16">CENTERX   CENTERY    SEMIMINORRADIUS    SEMIMAJORRADIUS</span></p><p class="s16" style="padding-top: 1pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">ORIENTATION BRUSH DASHING <span class="s12">)</span></p><p class="s16" style="padding-top: 1pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">STREAM</p><p style="padding-left: 47pt;text-indent: 0pt;text-align: center;">[Function]</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Draws an ellipse with a minor radius of <span class="s16">SEMIMINORRADIUS </span>and a major radius of <span class="s16">SEMIMAJORRADIUS </span>about the point (<span class="s16">CENTERX,CENTERY</span>) onto the image stream <span class="s16">STREAM</span>. <span class="s16">ORIENTATION </span>is the angle of the major axis in degrees, positive in the counterclockwise direction. <span class="s16">STREAM</span>’s position is left at (<span class="s16">CENTERX,CENTERY</span>). The other arguments are interpreted as described above.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">New brush shapes can be defined using the following function:</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">INSTALLBRUSH </span><span class="s16">BRUSHNAME BRUSHFN BRUSHARRAY</span>)                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Installs a new brush called <span class="s16">BRUSHNAME </span>with creation-function <span class="s16">BRUSHFN </span>and optional array <span class="s16">BRUSHARRAY</span>. <span class="s16">BRUSHFN </span>should be a function of one argument (a width), which returns a bitmap of the brush for that width. <span class="s16">BRUSHFN </span>will be called to create new instances of <span class="s16">BRUSHNAME</span>-type brushes; the sixteen smallest instances will be pre- computed and cached. &quot;Hand-crafted&quot; brushes can be supplied as the <span class="s16">BRUSHARRAY </span>argument. Changing an existing brush can be done by calling <span class="s12">INSTALLBRUSH </span>with new <span class="s16">BRUSHFN </span>and / or <span class="s16">BRUSHARRAY</span>.</p><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DRAWPOINT </span><span class="s16">X Y BRUSH STREAM OPERATION</span>)                      <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Draws <span class="s16">BRUSH </span>centered around point (<span class="s16">X, Y</span>) on <span class="s16">STREAM</span>, using the operation <span class="s16">OPERATION</span>. <span class="s16">BRUSH </span>may be a bitmap or a brush.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Miscellaneous Drawing and Printing Operations                                                                          </h4><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPFILL </span><span class="s16">REGION TEXTURE OPERATION STREAM</span>)                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Fills <span class="s16">REGION </span>of the image stream <span class="s16">STREAM </span>(within the clipping region) with the texture <span class="s16">TEXTURE</span>. If <span class="s16">REGION </span>is <span class="s12">NIL</span>, the whole clipping region of <span class="s16">STREAM </span>is used. If <span class="s16">TEXTURE </span>or <span class="s16">OPERATION </span>is <span class="s12">NIL</span>, the values for <span class="s16">STREAM </span>are used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DRAWPOLYGON </span><span class="s16">POINTS CLOSED BRUSH DASHING STREAM</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Draws a polygon on the image stream <span class="s16">STREAM</span>. <span class="s16">POINTS </span>is a list of positions to which the figure will be fitted (the vertices of the polygon). If <span class="s16">CLOSED </span>is non-<span class="s12">NIL</span>, then the starting position is specified only once in <span class="s16">POINTS</span>. If <span class="s16">CLOSED </span>is <span class="s12">NIL</span>, then the starting vertex must be specified twice in <span class="s16">POINTS</span>. <span class="s16">BRUSH </span>and <span class="s16">DASHING </span>are interpreted as described in Chapter 27 of the Interlisp-D Reference Manual.</p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">For example,</p><p class="s12" style="padding-top: 7pt;padding-left: 150pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(DRAWPOLYGON ’((100 . 100) (50 . 125)</p><p class="s12" style="padding-left: 240pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(150 . 175) (200 . 100) (150 .</p><p class="s12" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">50))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">T ’(ROUND 3) ’(4 2) XX)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">will draw a polygon like the following on the display stream <span class="s12">XX</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 197pt;text-indent: 0pt;text-align: left;"><span><img width="161" height="136" alt="image" src="Image_090.gif"/></span></p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FILLPOLYGON </span><span class="s16">POINTS TEXTURE OPERATION WINDNUMBER STREAM</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s16">OPERATION </span>is the <span class="s15">BITBLT </span>operation (see page 27.15 in the Interlisp-D Reference Manual) used to fill the polygon. If the <span class="s16">OPERATION </span>is NIL, the <span class="s16">OPERATION </span>defaults to the STREAM default <span class="s16">OPERATION</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">WINDNUMBER <span class="p">is the number for the winding rule convention . This number is either 0 or 1; 0 indicates the &quot;zero&quot; winding rule, 1 indicates the &quot;odd&quot; winding rule.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">When filling a polygon, there is more than one way of dealing with the situation where two polygon sides intersect, or one polygon is fully inside the other. Currently, <span class="s15">FILLPOLYGON </span>to a display stream uses the &quot;odd&quot; winding rule, which means that intersecting polygon sides define areas that are filled or not filled somewhat like a checkerboard. For example,</p><p class="s12" style="padding-top: 7pt;padding-left: 150pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(FILLPOLYGON</p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">’( ((110 . 110)(150 . 200)(190 . 110))</p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">((135 . 125)(160 . 125)(160 . 150)(135 .</p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">150)) )</p><p class="s12" style="padding-left: 168pt;text-indent: 0pt;line-height: 11pt;text-align: left;">GRAYSHADE WINDOW)</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">will produce a display something like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 288pt;text-indent: 0pt;text-align: left;"><span><img width="47" height="69" alt="image" src="Image_091.gif"/></span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">This fill convention also takes into account all polygons in <span class="s16">POINTS</span>, if it specifies multiple polygons.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">FILLCIRCLE </span><span class="s16">CENTERX CENTERY RADIUS TEXTURE STREAM</span>)           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Fills in a circular area of radius <span class="s16">RADIUS </span>about the point (<span class="s16">CENTERX,CENTERY</span>) in <span class="s16">STREAM</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">with <span class="s16">TEXTURE</span>. <span class="s16">STREAM</span>’s position is left at (<span class="s16">CENTERX,CENTERY</span>).</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPRESET </span><span class="s16">STREAM</span>)                                         <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Sets the <span class="s12">X </span>coordinate of <span class="s16">STREAM </span>to its left margin, sets its <span class="s11">Y </span>coordinate to the top of the clipping region minus the font ascent. For a display stream, this also fills its destination bitmap with its background texture.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPNEWPAGE </span><span class="s16">STREAM</span>)                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Starts a new page. The <span class="s12">X </span>coordinate is set to the left margin, and the <span class="s11">Y </span>coordinate is set to the top margin plus the linefeed.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CENTERPRINTINREGION </span><span class="s16">EXP REGION STREAM</span>)                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Prints <span class="s16">EXP </span>so that is it centered within <span class="s16">REGION </span>of the <span class="s16">STREAM</span>. If <span class="s16">REGION </span>is <span class="s12">NIL</span>, <span class="s16">EXP</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">will be centered in the clipping region of <span class="s16">STREAM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Drawing and Shading Grids                                                                                                            </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A grid is a partitioning of an arbitrary coordinate system (hereafter referred to as the &quot;source system&quot;) into rectangles. This section describes functions that operate on grids. It includes functions to draw the outline of a grid, to translate between positions in a source system and grid coordinates (the coordinates of the rectangle which contains a given position), and to shade grid rectangles. A grid is defined by its &quot;unit grid,&quot; a region (called a grid specification) which is the origin rectangle of the grid in terms of the source system. Its <span class="s12">LEFT </span>field is interpreted as the <span class="s12">X</span>-coordinate of the left edge of the origin rectangle, its <span class="s12">BOTTOM </span>field is the <span class="s12">Y</span>-coordinate of the bottom edge of the origin rectangle, its <span class="s12">WIDTH </span>is the width of the grid rectangles, and its <span class="s12">HEIGHT </span>is the height of the grid rectangles.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GRID </span><span class="s16">GRIDSPEC WIDTH HEIGHT BORDER STREAM GRIDSHADE</span>)          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Outlines the grid defined by <span class="s16">GRIDSPEC </span>which is <span class="s16">WIDTH </span>rectangles wide and <span class="s16">HEIGHT </span>rectangles high on <span class="s16">STREAM</span>. Each box in the grid has a border within it that is <span class="s16">BORDER </span>points on each side; so the resulting lines in the grid are 2*<span class="s16">BORDER </span>thick. If <span class="s16">BORDER </span>is the atom <span class="s16">POINT</span>, instead of a border the lower left point of each grid rectangle will be turned</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">on. If <span class="s16">GRIDSHADE </span>is non-<span class="s12">NIL</span>, it should be a texture and the border lines will be drawn using that texture.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(<span class="s15">SHADEGRIDBOX </span><span class="s16">X Y SHADE OPERATION GRIDSPEC GRIDBORDER</span></p><p class="s16" style="padding-left: 28pt;text-indent: 0pt;line-height: 11pt;text-align: right;">STREAM<span class="s12">) </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">Shades the grid rectangle (<span class="s16">X,Y</span>) of <span class="s16">GRIDSPEC </span>with texture <span class="s16">SHADE </span>using <span class="s16">OPERATION </span>on</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s16">STREAM</span>. <span class="s16">GRIDBORDER </span>is interpreted the same as for <span class="s12">GRID</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="p">The following two functions map from the </span>X<span class="s14">,</span>Y <span class="p">coordinates of the source system into the grid </span>X<span class="s14">,</span>Y</p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">coordinates:</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GRIDXCOORD </span><span class="s16">XCOORD GRIDSPEC</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the grid <span class="s12">X</span>-coordinate (in the grid specified by <span class="s16">GRIDSPEC</span>) that contains the source system <span class="s12">X</span>-coordinate <span class="s16">XCOORD</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GRIDYCOORD </span><span class="s16">YCOORD GRIDSPEC</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the grid <span class="s12">Y</span>-coordinate (in the grid specified by <span class="s16">GRIDSPEC</span>) that contains the source system <span class="s12">Y</span>-coordinate <span class="s16">YCOORD</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">The following two functions map from the grid <span class="s12">X,Y </span>coordinates into the <span class="s12">X,Y </span>coordinates of the source system:</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LEFTOFGRIDCOORD </span><span class="s16">GRIDX GRIDSPEC</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Returns the source system <span class="s12">X</span>-coordinate of the left edge of a grid rectangle at grid <span class="s12">X</span>- coordinate <span class="s16">GRIDX </span>(in the grid specified by <span class="s16">GRIDSPEC</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">BOTTOMOFGRIDCOORD </span><span class="s16">GRIDY GRIDSPEC</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the source system <span class="s12">Y</span>-coordinate of the bottom edge of a grid rectangle at grid <span class="s12">Y</span>- coordinate <span class="s16">GRIDY </span>(in the grid specified by <span class="s16">GRIDSPEC</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Display Streams                                                                                                                               </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Display streams (image streams of type <span class="s11">DISPLAY</span>) are used to control graphic output operations to a bitmap, known as the &quot;destination&quot; bitmap of the display stream. For each window on the screen, there is an associated display stream which controls graphics operations to a specific part of the screen bitmap. Any of the functions that take a display stream will also take a window, and use the associated display stream. Display streams can also have a destination bitmap that is not connected to any window or display device.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPCREATE </span><span class="s16">DESTINATION</span>)                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Creates and returns a display stream. If <span class="s16">DESTINATION </span>is specified, it is used as the destination bitmap, otherwise the screen bitmap is used.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPDESTINATION </span><span class="s16">DESTINATION DISPLAYSTREAM</span>)                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns the current destination bitmap for <span class="s16">DISPLAYSTREAM</span>, setting it to <span class="s16">DESTINATION </span>if non-<span class="s12">NIL</span>. <span class="s16">DESTINATION </span>can be either the screen bitmap, or an auxilliary bitmap in order to construct figures, possibly save them, and then display them in a single operation.</p><p style="padding-top: 6pt;padding-left: 198pt;text-indent: -36pt;line-height: 91%;text-align: left;">Warning: The window system maintains the destination of a window’s display stream. Users should be very careful about changing this field.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPXOFFSET </span><span class="s16">XOFFSET DISPLAYSTREAM</span>)                          <span class="p">[Function]</span></p><p class="s12" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPYOFFSET </span><span class="s16">YOFFSET DISPLAYSTREAM</span>)                          <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Each display stream has its own coordinate system, separate from the coordinate system of its destination bitmap. Having the coordinate system local to the display stream allows objects to be displayed at different places by translating the display stream’s coordinate system relative to its destination bitmap. This local coordinate system is defined by the <span class="s12">X </span>offset and <span class="s12">Y </span>offset.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s12">DSPXOFFSET </span>returns the current <span class="s12">X </span>offset for <span class="s16">DISPLAYSTREAM</span>, the <span class="s12">X </span>origin of the display stream’s coordinate system in the destination bitmap’s coordinate system. It is set to <span class="s16">XOFFSET </span>if non-<span class="s12">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s12">DSPYOFFSET </span>returns the current <span class="s12">Y </span>offset for <span class="s16">DISPLAYSTREAM</span>, the <span class="s12">Y </span>origin of the display stream’s coordinate system in the destination bitmap’s coordinate system. It is set to <span class="s16">YOFFSET </span>if non-<span class="s12">NIL</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The <span class="s12">X </span>offset and <span class="s12">Y </span>offset for a display stream are both initially 0 (no <span class="s12">X </span>or <span class="s12">Y</span>-coordinate translation).</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Warning: The window system maintains the <span class="s12">X </span>and <span class="s12">Y </span>offset of a window’s display stream. Users should be very careful about changing these fields.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPTEXTURE </span><span class="s16">TEXTURE DISPLAYSTREAM</span>)                          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns the current texture used as the background pattern for <span class="s16">DISPLAYSTREAM</span>. It is set to <span class="s16">TEXTURE </span>if non-<span class="s12">NIL</span>. Initially the value of <span class="s12">WHITESHADE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DSPSOURCETYPE </span><span class="s16">SOURCETYPE DISPLAYSTREAM</span>)                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns the current <span class="s12">BITBLT </span>sourcetype used when printing characters to the display stream. It is set to <span class="s16">SOURCETYPE</span>, if non-<span class="s12">NIL</span>. Must be either <span class="s12">INPUT </span>or <span class="s12">INVERT</span>. Initially <span class="s12">INPUT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DSPSCROLL </span><span class="s16">SWITCHSETTING DISPLAYSTREAM</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Returns the current value of the &quot;scroll flag,&quot; a flag that determines the scrolling behavior of the display stream; either <span class="s12">ON </span>or <span class="s12">OFF</span>. If <span class="s12">ON</span>, the bits in the display streams’s destination bitmap are moved after any linefeed that moves the current position out of the destination bitmap. Any bits moved out of the current clipping region are lost. Does not adjust the <span class="s12">X </span>offset, <span class="s12">Y </span>offset, or clipping region of the display stream. Initially <span class="s12">OFF</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Sets the scroll flag to <span class="s16">SWITCHSETTING</span>, if non-<span class="s12">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note: The word &quot;scrolling&quot; also describes the use of &quot;scroll bars&quot; on the left and bottom of a window to move an object displayed in a window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Each window has an associated display stream. To get the window of a particular display stream, use</p><p class="s12" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">WFROMDS<span class="p">:</span></p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">WFROMDS </span><span class="s16">DISPLAYSTREAM DONTCREATE</span><span class="s38">) </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the window associated with <span class="s16">DISPLAYSTREAM</span>, creating a window if one does not exist (and <span class="s16">DONTCREATE </span>is <span class="s12">NIL</span>). Returns <span class="s12">NIL </span>if the destination of <span class="s16">DISPLAYSTREAM </span>is not a screen bitmap that supports a window system.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If <span class="s16">DONTCREATE </span>is non-<span class="s12">NIL</span>, <span class="s12">WFROMDS </span>will never create a window, and returns <span class="s12">NIL </span>if</p><p class="s16" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">DISPLAYSTREAM <span class="p">does not have an associated window.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">TTYDISPLAYSTREAM <span class="p">calls </span>WFROMDS <span class="p">with </span>DONTCREATE = T<span class="p">, so it will not create a window unnecessarily. Also, if </span>WFROMDS <span class="p">does create a window, it calls </span>CREATEW <span class="p">with </span>NOOPENFLG = T<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DSPBACKUP </span><span class="s16">WIDTH DISPLAYSTREAM</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Backs up <span class="s16">DISPLAYSTREAM </span>over a character which is <span class="s16">WIDTH </span>screen points wide. <span class="s12">DSPBACKUP </span>fills the backed over area with the display stream’s background texture and decreases the <span class="s12">X </span>position by <span class="s16">WIDTH</span>. If this would put the <span class="s12">X </span>position less than <span class="s16">DISPLAYSTREAM</span>’s left margin, its operation is stopped at the left margin. It returns <span class="s12">T </span>if any bits were written, <span class="s12">NIL </span>otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Fonts                                                                                                                                                  </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A font is the collection of images that are printed or displayed when characters are output to a graphic output device. Some simple displays and printers can only print characters using one font. Bitmap displays and graphic printers can print characters using a large number of fonts.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Fonts are identified by a distinctive style or family (such as Modern or Classic), a size (such as 10 points), and a face (such as bold or italic). Fonts also have a rotation that indicates the orientation of characters on the screen or page. A normal horizontal font (also called a portrait font) has a rotation of 0; the rotation of a vertical (landscape) font is 90 degrees. While any combination can be specified, in</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">practice the user will find that only certain combinations of families, sizes, faces, and rotations are available for any graphic output device.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">To specify a font to the functions described below, a <span class="s12">FAMILY </span>is represented by a literal atom, a <span class="s12">SIZE </span>by a positive integer, and a <span class="s12">FACE </span>by a three-element list of the form (<span class="s12">WEIGHT SLOPE EXPANSION</span>). <span class="s12">WEIGHT</span>, which indicates the thickness of the characters, can be <span class="s12">BOLD</span>, <span class="s12">MEDIUM</span>, or <span class="s12">LIGHT</span>; <span class="s12">SLOPE </span>can be <span class="s12">ITALIC </span>or <span class="s12">REGULAR</span>; and <span class="s12">EXPANSION </span>can be <span class="s12">REGULAR</span>, <span class="s12">COMPRESSED</span>,</p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">or EXPANDED, indicating how spread out the characters are. For convenience, faces may also be specified by three-character atoms, where each character is the first letter of the corresponding field. Thus, <span class="s12">MRR </span>is a synonym for (<span class="s12">MEDIUM REGULAR REGULAR</span>). In addition, certain common face combinations may be indicated by special literal atoms:</p><p class="s12" style="padding-top: 7pt;padding-left: 162pt;text-indent: 0pt;line-height: 106%;text-align: left;">STANDARD = (MEDIUM REGULAR REGULAR) = MRR ITALIC = (MEDIUM ITALIC REGULAR) = MIR BOLD = (BOLD REGULAR REGULAR) = BRR BOLDITALIC = (BOLD ITALIC REGULAR) = BIR</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Interlisp represents all the information related to a font in an object called a font descriptor. Font descriptors contain the family, size, etc. properties used to represent the font. In addition, for each character in the font, the font descriptor contains width information for the character and (for display fonts) a bitmap containing the picture of the character.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The font functions can take fonts specified in a variety of different ways. <span class="s12">DSPFONT</span>, <span class="s12">FONTCREATE</span>, <span class="s12">FONTCOPY</span>, etc. can be applied to font descriptors, &quot;font lists&quot; such as ’(<span class="s12">MODERN 10</span>), image streams (coerced to its current font), or windows (coerced to the current font of its display stream). The printout command &quot;.<span class="s12">FONT</span>&quot; will also accept fonts specified in any of these forms.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">In general font files use the following format:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The family name (e.g., Modern); a two digit size (e.g., 08); a three letter Face (e.g., BIR, for Bold Italic Regular); the letter C followed by the font’s character set in base 8 (e.g., C41); and finally an extension (e.g., Displayfont).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 289pt;text-indent: 0pt;line-height: 11pt;text-align: center;">Size</p><p class="s55" style="padding-left: 289pt;text-indent: 0pt;line-height: 8pt;text-align: center;">(two digits)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">CharacterSet (base 8)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="7" height="16" alt="image" src="Image_092.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="7" height="16" alt="image" src="Image_093.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="28" height="27" alt="image" src="Image_094.png"/></span></p><p class="s12" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Modern08-BIR-C41.Displayfont</p><p class="s54" style="padding-left: 212pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span><img width="7" height="15" alt="image" src="Image_095.png"/></span>	<span><img width="7" height="15" alt="image" src="Image_096.png"/></span></p><p class="s10" style="padding-left: 28pt;text-indent: 0pt;line-height: 11pt;text-align: right;">Family</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Face</p><p class="s10" style="padding-left: 40pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Extension</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(<span class="s15">FONTCREATE </span><span class="s16">FAMILY SIZE FACE ROTATION DEVICE NOERRORFLG CHARSET</span>)</p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 11pt;text-align: left;">[Function]</p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns a font descriptor for the specified font. <span class="s16">FAMILY </span>is a litatom specifying the font family. <span class="s16">SIZE </span>is an integer indicating the size of the font in points. <span class="s16">FACE </span>specifies the face characteristics in one of the formats listed above; if <span class="s16">FACE </span>is <span class="s12">NIL</span>, <span class="s12">STANDARD </span>is used. <span class="s16">ROTATION</span>, which specifies the orientation of the font, is 0 (or <span class="s12">NIL</span>) for a portrait font and 90 for a landscape font. <span class="s16">DEVICE </span>indicates the output device for the font, and can be any image stream type , such as <span class="s12">DISPLAY</span>, <span class="s12">INTERPRESS</span>, etc. <span class="s16">DEVICE </span>may also be an image stream, in which case the type of the stream determines the font device. <span class="s16">DEVICE </span>defaults to <span class="s12">DISPLAY</span>.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The <span class="s16">FAMILY </span>argument to <span class="s12">FONTCREATE </span>may also be a list, in which case it is interpreted as a font-specification quintuple, a list of the form (<span class="s16">FAMILY SIZE FACE ROTATION DEVICE</span>). Thus, <span class="s12">(FONTCREATE ’(GACHA 10 BOLD)) </span>is equivalent to (<span class="s12">FONTCREATE ’GACHA 10 ’BOLD</span>). <span class="s16">FAMILY </span>may also be a font descriptor, in which case that descriptor is simply returned.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If a font descriptor has already been created for the specified font, <span class="s12">FONTCREATE </span>simply returns it. If it has not been created, <span class="s12">FONTCREATE </span>has to read the font information from a font file that contains the information for that font. The name of an appropriate font file, and the algorithm for searching depends on the device that the font is for, and is described in more detail below. If an appropriate font file is found, it is read into a font descriptor. If no file is found, for <span class="s12">DISPLAY </span>fonts <span class="s12">FONTCREATE </span>looks for fonts with less face information and fakes the remaining faces (such as by doubling the bit pattern of each character or slanting it). For hardcopy printer fonts, there is no acceptable faking algorithm.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If no acceptable font is found, the action of <span class="s12">FONTCREATE </span>is determined by <span class="s12">NOERRORFLG</span>. If <span class="s12">NOERRORFLG </span>is <span class="s12">NIL</span>, it generates a <span class="s12">FONT NOT FOUND </span>error with the offending font specification; otherwise, <span class="s12">FONTCREATE </span>returns <span class="s12">NIL</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">CHARSET <span class="p">is the character set which will be read to create the font. Defaults to 0. For more information on character sets, see </span>NS <span class="p">Characters.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FONTP </span><span class="s16">X</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a font descriptor; <span class="s12">NIL </span>otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FONTPROP </span><span class="s16">FONT PROP</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the value of the <span class="s16">PROP </span>property of font <span class="s16">FONT</span>. The following font properties are recognized:</p><p class="s12" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">FAMILY <span class="p">The style of the font, represented as a literal atom, such as </span>CLASSIC <span class="p">or</span></p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">MODERN<span class="p">.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: -36pt;text-align: left;">SIZE <span class="p">A positive integer giving the size of the font, in printer’s points (1 / 72 of an inch).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 132pt;text-indent: -6pt;line-height: 153%;text-align: left;">WEIGHT <span class="p">The thickness of the characters; one of </span>BOLD<span class="p">, </span>MEDIUM<span class="p">, or </span>LIGHT<span class="p">. </span>SLOPE <span class="p">The &quot;slope&quot; of the characters in the font; one of </span>ITALIC <span class="p">or </span>REGULAR<span class="p">.</span></p><p class="s12" style="padding-left: 174pt;text-indent: -66pt;text-align: justify;">EXPANSION <span class="p">The extent to which the characters in the font are spread out; one of </span>REGULAR<span class="p">, </span>COMPRESSED<span class="p">, or </span>EXPANDED<span class="p">. Most available fonts have </span>EXPANSION = REGULAR<span class="p">.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 173pt;text-indent: -36pt;text-align: justify;">FACE <span class="p">A three-element list of the form (</span>WEIGHT SLOPE EXPANSION<span class="p">), giving all of the typeface parameters.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 174pt;text-indent: -60pt;line-height: 93%;text-align: justify;">ROTATION <span class="p">An integer that gives the orientation of the font characters on the screen or page, in degrees. A normal horizontal font (also called a portrait font) has a rotation of 0; the rotation of a vertical (landscape) font is 90.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 173pt;text-indent: -48pt;text-align: justify;">DEVICE <span class="p">The device that the font can be printed on; one of </span>DISPLAY<span class="p">, </span>INTERPRESS<span class="p">, etc.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 174pt;text-indent: -48pt;line-height: 94%;text-align: justify;">ASCENT <span class="p">An integer giving the maximum height of any character in the font from its base line (the printing position). The top line will be at </span>BASELINE+ASCENT-1<span class="p">.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 174pt;text-indent: -54pt;line-height: 94%;text-align: justify;">DESCENT <span class="p">An integer giving the maximum extent of any character below the base line, such as the lower part of a &quot;p&quot;. The bottom line of a character will be at </span>BASELINE-DESCENT<span class="p">.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">HEIGHT <span class="p">Equal to </span>ASCENT + DESCENT<span class="p">.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 173pt;text-indent: -36pt;text-align: justify;">SPEC <span class="p">The (</span>FAMILY SIZE FACE ROTATION DEVICE<span class="p">) quintuple by which the font is known to Lisp.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">DEVICESPEC  <span class="p">The  (</span>FAMILY  SIZE  FACE  ROTATION   DEVICE<span class="p">)  quintuple  that</span></p><p style="padding-left: 173pt;text-indent: 0pt;line-height: 94%;text-align: justify;">identifies what will be used to represent the font on the display or printer. It will differ from the <span class="s12">SPEC </span>property only if an implicit coercion is done to approximate the specified font with one that actually exists on the device.</p><p class="s12" style="padding-top: 6pt;padding-left: 174pt;text-indent: -42pt;line-height: 93%;text-align: justify;">SCALE <span class="p">The units per printer’s point (1 / 72 of an inch) in which the font is measured. For example, this is 35.27778 (the number of micas per printer’s point) for Interpress fonts, which are measured in terms of micas.</span></p><p class="s16" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;"><span class="s12">(</span><b>FONTCOPY </b>OLDFONT PROP<span class="s32">1 </span>VAL<span class="s32">1 </span>PROP<span class="s32">2 </span>VAL<span class="s32">2 </span><span class="s33">...</span><span class="s12">)           </span><span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns a font descriptor that is a copy of the font <span class="s16">OLDFONT</span>, but which differs from <span class="s16">OLDFONT </span>in that <span class="s16">OLDFONT</span>’s properties are replaced by the specified properties and values. Thus, (<span class="s12">FONTCOPY FONT ’WEIGHT ’BOLD ’DEVICE ’INTERPRESS</span>)</p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">will return a bold Interpress font with all other properties the same as those of <span class="s12">FONT</span>. <span class="s12">FONTCOPY </span>accepts the properties <span class="s12">FAMILY</span>, <span class="s12">SIZE</span>, <span class="s12">WEIGHT</span>, <span class="s12">SLOPE</span>, <span class="s12">EXPANSION</span>, <span class="s12">FACE</span>, <span class="s12">ROTATION</span>, and <span class="s12">DEVICE</span>. If the first property is a list, it is taken to be the <span class="s16">PROP</span><span class="s32">1 </span><span class="s16">VAL</span><span class="s32">1 </span><span class="s16">PROP</span><span class="s32">2 </span><span class="s16">VAL</span><span class="s32">2 </span><span class="s16">... </span>sequence. Thus, (<span class="s12">FONTCOPY FONT ’(WEIGHT BOLD</span></p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">DEVICE INTERPRESS)<span class="p">) is equivalent to the example above.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If the property <span class="s12">NOERROR </span>is specified with value non-<span class="s12">NIL</span>, <span class="s12">FONTCOPY </span>will return <span class="s12">NIL</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">rather than causing an error if the specified font cannot be created.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(<span class="s15">FONTSAVAILABLE </span><span class="s16">FAMILY SIZE FACE ROTATION DEVICE</span></p><p class="s16" style="padding-left: 59pt;text-indent: 0pt;line-height: 11pt;text-align: left;">CHECKFILESTOO?<span class="s12">) </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns a list of available fonts that match the given specification. <span class="s16">FAMILY, SIZE, FACE, ROTATION</span>, and <span class="s16">DEVICE </span>are the same as for <span class="s12">FONTCREATE</span>. Additionally, any of them can be the atom <span class="s12">*</span>, in which case all values of that field are matched.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">CHECKFILESTOO? </span>is <span class="s12">NIL</span>, only fonts already loaded into virtual memory will be considered. If <span class="s16">CHECKFILESTOO? </span>is non-<span class="s12">NIL</span>, the font directories for the specified device will be searched. When checking font files, the <span class="s16">ROTATION </span>is ignored.</p><p style="padding-top: 7pt;padding-left: 149pt;text-indent: -36pt;line-height: 94%;text-align: left;">Note: The search is conditional on the status of the server which holds the font. Thus a file server crash may prevent <span class="s12">FONTCREATE </span>from finding a file that an earlier <span class="s12">FONTSAVAILABLE </span>returned.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Each element of the list returned will be of the form (<span class="s16">FAMILY SIZE FACE ROTATION DEVICE</span>).</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Examples:</p><p class="s12" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">(FONTSAVAILABLE ’MODERN 10 ’MRR 0 ’DISPLAY)</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">will return (<span class="s12">(MODERN 10 (MEDIUM REGULAR REGULAR) 0 DISPLAY)</span>) if the</p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">regular Modern 10 font for the display is in virtual memory; <span class="s12">NIL </span>otherwise.</p><p class="s12" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">(FONTSAVAILABLE ’* 14 ’* ’* ’INTERPRESS T)</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">will return a list of all the size 14 Interpress fonts, whether they are in virtual memory or in font files.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SETFONTDESCRIPTOR </span><span class="s16">FAMILY SIZE FACE ROTATION DEVICE FONT</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Indicates to the system that <span class="s16">FONT </span>is the font that should be associated with the <span class="s16">FAMILY SIZE FACE ROTATION DEVICE </span>characteristics. If <span class="s16">FONT </span>is <span class="s12">NIL</span>, the font associated with these characteristics is cleared and will be recreated the next time it is needed. As with <span class="s12">FONTPROP </span>and <span class="s12">FONTCOPY</span>, <span class="s16">FONT </span>is coerced to a font descriptor if it is not one already.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This functions is useful when it is desirable to simulate an unavailable font or to use a font with characteristics different from the interpretations provided by the system.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DEFAULTFONT </span><span class="s16">DEVICE FONT —</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the font that would be used as the default (if <span class="s12">NIL </span>were specified as a font argument) for image stream type <span class="s16">DEVICE</span>. If <span class="s16">FONT </span>is a font descriptor, it is set to be the default font for <span class="s16">DEVICE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CHARWIDTH </span><span class="s16">CHARCODE FONT</span>)                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s16">CHARCODE </span>is an integer that represents a valid character (as returned by <span class="s12">CHCON1</span>). Returns the amount by which an image stream’s <span class="s38">X</span>-position will be incremented when the character is printed.</p><p class="s38" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CHARWIDTHY </span><span class="s16">CHARCODE FONT</span>)                                                                                  <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Like <span class="s12">CHARWIDTH</span>, but returns the <span class="s38">Y </span>component of the character’s width, the amount by which an image stream’s <span class="s38">Y</span>-position will be incremented when the character is printed. This will be zero for most characters in normal portrait fonts, but may be non-zero for</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">landscape fonts or for vector-drawing fonts.</p><p class="s38" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">STRINGWIDTH </span><span class="s16">STR FONT FLG RDTBL</span>)                                                                     <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns the amount by which a stream’s <span class="s38">X</span>-position will be incremented if the printname for the Interlisp-D object <span class="s16">STR </span>is printed in font <span class="s16">FONT</span>. If <span class="s16">FONT </span>is <span class="s12">NIL, DEFAULTFONT </span>is used as <span class="s16">FONT</span>. <span class="s10">I</span>f <span class="s16">FONT </span>is an image stream, its font is used. If <span class="s16">FLG </span>is non-<span class="s12">NIL</span>, the <span class="s12">PRIN2</span>- pname of <span class="s16">STR </span>with respect to the readtable <span class="s16">RDTBL </span>is used.</p><p class="s38" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">STRINGREGION </span><span class="s16">STR STREAM PRIN2FLG RDTBL</span>)                                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns the region occupied by <span class="s16">STR </span>if it were printed at the current location in the image stream <span class="s16">STREAM</span>. This is useful, for example, for determining where text is in a window to allow the user to select it. The arguments <span class="s16">PRIN2FLG </span>and <span class="s16">RDTBL </span>are passed to <span class="s12">STRINGWIDTH</span>.</p><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -30pt;text-align: justify;">Note: <span class="s12">STRINGREGION </span>does not take into account any carriage returns in the string, or carriage returns that may be automatically printed if <span class="s16">STR </span>is printed to <span class="s16">STREAM</span>. Therefore, the value returned is meaningless for multi- line strings.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following functions allow the user to access and change the bitmaps for individual characters in a display font. Note: Character code 256 can be used to access the &quot;dummy&quot; character, used for characters in the font with no bitmap defined.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GETCHARBITMAP </span><span class="s16">CHARCODE FONT</span>)                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns a bitmap containing a copy of the image of the character <span class="s16">CHARCODE </span>in the font</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FONT<span class="p">.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">PUTCHARBITMAP </span><span class="s16">CHARCODE FONT NEWCHARBITMAP NEWCHARDESCENT</span>)    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Changes the bitmap image of the character <span class="s16">CHARCODE </span>in the font <span class="s16">FONT </span>to the bitmap <span class="s16">NEWCHARBITMAP</span>. If <span class="s16">NEWCHARDESCENT </span>is non-<span class="s12">NIL</span>, the descent of the character is changed to the value of <span class="s16">NEWCHARDESCENT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">EDITCHAR </span><span class="s16">CHARCODE FONT</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Calls the bitmap editor (<span class="s12">EDITBM</span>) on the bitmap image of the character <span class="s16">CHARCODE </span>in the font <span class="s16">FONT</span>. <span class="s16">CHARCODE </span>can be a character code (as returned by <span class="s12">CHCON1</span>) or an atom or string, in which case the first character of <span class="s16">CHARCODE </span>is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">WRITESTRIKEFONTFILE </span><span class="s16">FONT CHARSET FILENAME</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Takes a display font font descriptor and a character set number, and writes that character set into a file suitable for reading in again. Note that the font descriptor’s current state is used (which was perhaps modified by <span class="s12">INSPECT</span>ing the datum), so this provides a mechanism for creating / modifying new fonts.</p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">For example:</p><p class="s12" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 106%;text-align: justify;">(WRITESTRIKEFONTFILE (FONTCREATE ’GACHA 10) 0 ’{DSK}Magic10- MRR-C0.DISPLAYFONT)</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If your <span class="s12">DISPLAYFONTDIRECTORIES </span>includes <span class="s12">{DSK}</span>, then a subsequent <span class="s12">(FONTCREATE ’MAGIC 10</span>) will create a new font descriptor whose appearance is the same as the old Gacha font descriptor.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">However, the new font is identical to the old one in appearance only. The individual datatype fields and bitmap may not be the same as those in the old font descriptor, due to peculiarities of different font file formats.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Font Files and Font Directories                                                                                                      </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">If <span class="s12">FONTCREATE </span>is called to create a font that has not been loaded into Interlisp, <span class="s12">FONTCREATE </span>has to read the font information from a font file that contains the information for that font. For printer devices, the font files have to contain width information for each character in the font. For display fonts, the font files have to contain, in addition, bitmap images for each character in the fonts. The font file names, formats, and searching algorithms are different for each device. There are a set of variables for each device, that determine the directories that are searched for font files. All of these variables must be set before Interlisp can auto-load font files. These variables should be initialized in the site-specific <span class="s12">INIT </span>file.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DISPLAYFONTDIRECTORIES <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Value is a list of directories searched to find font bitmap files for display fonts.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">DISPLAYFONTEXTENSIONS <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Value is a list of file extensions used when searching <span class="s12">DISPLAYFONTDIRECTORIES </span>for display fonts. Initially set to (<span class="s12">DISPLAYFONT</span>), but when using older font files it may be necessary to add <span class="s12">STRIKE </span>and <span class="s12">AC </span>to this list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">INTERPRESSFONTDIRECTORIES                                      <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Value is a list of directories searched to find font widths files for Interpress fonts.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">PRESSFONTWIDTHSFILES                                           <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: left;">Value is a list of files (not directories) searched to find font widths files for Press fonts. Press font widths are packed into large files (usually named <span class="s12">FONTS</span>.<span class="s12">WIDTHS</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Font Profiles                                                                                                                                     </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">PRETTYPRINT <span class="p">contains a facility for printing different elements (user functions, system functions, clisp words, comments, etc.) in different fonts to emphasize (or deemphasize) their importance, and in general to provide for a more pleasing appearance. Of course, in order to be useful, this facility requires that the user is printing on a device (such as a bitmapped display or a laser printer) which supports multiple fonts.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s12">PRETTYPRINT </span>signals font changes by inserting into the file a user-defined escape sequence (the value of the variable <span class="s12">FONTESCAPECHAR</span>) followed by the character code which specifies, by number, which font to use, i.e. <span class="s19"></span>A for font number 1, etc. Thus, if <span class="s12">FONTESCAPECHAR </span>were the character <span class="s19"></span>F, <span class="s19"></span>F<span class="s19"></span>C would be output to change to font 3, <span class="s19"></span>F<span class="s19"></span>A to change to font 1, etc. If <span class="s12">FONTESCAPECHAR </span>consists of characters which are separator charactors in <span class="s12">FILERDTBL</span>, then a file with font changes in it can also be loaded back in.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Currently, <span class="s12">PRETTYPRINT </span>uses the following font classes. The user can specify separate fonts for each of these classes, or use the same font for several different classes.</p><p class="s12" style="padding-top: 6pt;padding-left: 174pt;text-indent: -72pt;text-align: left;">LAMBDAFONT <span class="p">The font for printing the name of the function being prettyprinted, before the actual definition (usually a large font).</span></p><p class="s12" style="padding-top: 6pt;padding-left: 173pt;text-indent: -66pt;text-align: left;">CLISPFONT <span class="p">If </span>CLISPFLG <span class="p">is on, the font for printing any clisp words, i.e. atoms with property </span>CLISPWORD<span class="p">.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">COMMENTFONT <span class="p">The font used for comments.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 114pt;text-indent: 0pt;line-height: 12pt;text-align: left;">USERFONT <span class="p">The font for the name of any function in the file, or any member of the list</span></p><p class="s12" style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FONTFNS<span class="p">.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">SYSTEMFONT <span class="p">The font for any other (defined) function.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">CHANGEFONT <span class="p">The font for an expression marked by the editor as having been changed.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 84pt;text-indent: 0pt;text-align: justify;">PRETTYCOMFONT <span class="p">The font for the operand of a file package command.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">DEFAULTFONT <span class="p">The font for everything else.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note that not all combinations of fonts will be aesthetically pleasing (or even readable!) and the user may have to experiment to find a compatible set.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Although in some implementations <span class="s12">LAMBDAFONT </span>et al. may be defined as variables, one should not set them directly, but should indicate what font is to be used for each class by calling the function <span class="s12">FONTPROFILE</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FONTPROFILE </span><span class="s16">PROFILE</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Sets up the font classes as determined by <span class="s16">PROFILE</span>, a list of elements which defines the correspondence between font classes and specific fonts. Each element of <span class="s16">PROFILE </span>is a list of the form:</p><p class="s12" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 106%;text-align: left;">(FONTCLASS FONT# DISPLAYFONT PRESSFONT INTERPRESSFONT)</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s12">FONTCLASS </span>is the font class name and <span class="s12">FONT# </span>is the font number for that class. For each font class name, the escape sequence will consist of <span class="s12">FONTESCAPECHAR </span>followed by the character code for the font number, e.g. <span class="s19"></span>A for font number 1, etc.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s12">FONT# </span>is <span class="s12">NIL </span>for any font class, the font class named <span class="s12">DEFAULTFONT </span>(which must always be specified) is used. Alternatively, if <span class="s12">FONT# </span>is the name of a previously defined font class, this font class will be equivalenced to the previously defined one.</p><p class="s12" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">DISPLAYFONT<span class="p">, </span>PRESSFONT<span class="p">, and </span>INTERPRESSFONT <span class="p">are font specifications (of the form accepted by </span>FONTCREATE<span class="p">) for the fonts to use when printing to the display and to Press and Interpress printers respectively.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">FONTPROFILE <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">This is the variable used to store the current font profile, in the form accepted by the function <span class="s12">FONTPROFILE</span>. Note that simply editing this value will not change the fonts used for the various font classes; it is necessary to execute (<span class="s12">FONTPROFILE FONTPROFILE</span>) to install the value of this variable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The process of printing with multiple fonts is affected by a large number of variables: <span class="s12">FONTPROFILE</span>, <span class="s12">FILELINELENGTH</span>, <span class="s12">PRETTYLCOM</span>, etc. To facilitate switching back and forth between various sets of values for the font variables, Interlisp supports the idea of named &quot;font configurations&quot; encapsulating the values of all relevant variables.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">To create a new font configuration, set all &quot;relevant&quot; variables to the values you want, and then call <span class="s12">FONTNAME </span>to save them (on the variable <span class="s12">FONTDEFS</span>) under a given name. To install a particular font configuration, call <span class="s12">FONTSET </span>giving it your name. To change the values in a saved font configuration, edit the value of the variable <span class="s12">FONTDEFS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">Note: The list of variables saved by <span class="s12">FONTNAME </span>is stored in the variable <span class="s12">FONTDEFSVARS</span>. This can be changed by the user.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">(<span class="s15">FONTSET </span><span class="s16">NAME</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Installs font configuration for <span class="s16">NAME</span>. Also evaluates (<span class="s12">FONTPROFILE FONTPROFILE</span>) to install the font classes as specified in the new value of the variable <span class="s12">FONTPROFILE</span>. Generates an error if <span class="s16">NAME </span>not previously defined.</p><p class="s15" style="padding-top: 9pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">FONTDEFSVARS <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The list of variables to be packaged by a <span class="s12">FONTNAME</span>. Initially <span class="s12">FONTCHANGEFLG</span>, <span class="s12">FILELINELENGTH</span>, <span class="s12">COMMENTLINELENGTH</span>, <span class="s12">FIRSTCOL</span>, <span class="s12">PRETTYLCOM</span>, <span class="s12">LISTFILESTR</span>, and <span class="s12">FONTPROFILE</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">FONTDEFS <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">An association list of font configurations. <span class="s12">FONTDEFS </span>is a list of elements of form (<span class="s12">NAME</span></p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">. PARAMETER-PAIRS<span class="p">). To save a configuration on a file after performing a </span>FONTNAME <span class="p">to define it, the user could either save the entire value of </span>FONTDEFS<span class="p">, or use the </span>ALISTS <span class="p">file package command to dump out just the one configuration.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">FONTESCAPECHAR <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The character or string used to signal the start of a font escape sequence.</p><p class="s15" style="padding-top: 8pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">FONTCHANGEFLG <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s12">T</span>, enables fonts when prettyprinting. If <span class="s12">NIL</span>, disables fonts. <span class="s12">ALL </span>indicates that all calls to <span class="s12">CHANGEFONT </span>are executed.</p><p class="s15" style="padding-top: 9pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">LISTFILESTR <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">In Interlisp-10, passed to the operating system by <span class="s12">LISTFILES</span>. Can be used to specify subcommands to the <span class="s12">LIST </span>command, e.g. to establish correspondance between font number and font name.</p><p class="s15" style="padding-top: 9pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">COMMENTLINELENGTH <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Since comments are usually printed in a smaller font, <span class="s12">COMMENTLINELENGTH </span>is provided to offset the fact that Interlisp does not know about font widths. When <span class="s12">FONTCHANGEFLG = T</span>, <span class="s12">CAR </span>of <span class="s12">COMMENTLINELENGTH </span>is the linelength used to print short comments, i.e. those printed in the right margin, and <span class="s12">CDR </span>is the linelength used when printing full width comments.</p><p style="padding-top: 8pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">(<span class="s15">CHANGEFONT </span><span class="s16">FONT STREAM</span>) [Function]</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Executes the operations on <span class="s16">STREAM </span>to change to the font <span class="s16">FONT</span>. For use in</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PRETTYPRINTMACROS<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Image Objects                                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">An Image Object is an object that includes information about an image, such as how to display it, how to print it, and how to manipulate it when it is included in a collection of images (such as a document). More generally, it enables you to include one kind of image, with its own semantics, layout rules, and editing paradigms, inside another kind of image. Image Objects provide a general- purpose interface between image users who want to manipulate arbitrary images, and image producers, who create images for use, say, in documents.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Images are encapsulated inside a uniform barrier—the <span class="s12">IMAGEOBJ </span>data type. From the outside, you communicate to the image by calling a standard set of functions. For example, calling one function tells you how big the image is; calling another causes the image object to be displayed where you tell it, and so on. Anyone who wants to create images for general use can implement his own brand of <span class="s12">IMAGEOBJ</span>. <span class="s12">IMAGEOBJ</span>s have been implemented (in library packages) for bitmaps, menus, annotations, graphs, and sketches.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Image Objects were originally implemented to support inserting images into TEdit text files, but the facility is available for use by any tools that manipulate images. The Image Object interface allows objects to exist in TEdit documents and be edited with their own editor. It also provides a facility in which objects can be shift-selected (or &quot;copy-selected&quot;) between TEdit and non-TEdit windows. For example, the Image Objects interface allows you to copy-select graphs from a Grapher window into a TEdit window. The source window (where the object comes from) does not have to know what sort of window the destination window (where the object is inserted) is, and the destination does not have to know where the insertion comes from.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">A new data type, <span class="s12">IMAGEOBJ</span>, contains the data and the procedures necessary to manipulate an object that is to be manipulated in this way. <span class="s12">IMAGEOBJ</span>s are created with the function <span class="s12">IMAGEOBJCREATE </span>(below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">Another new data type, <span class="s12">IMAGEFNS</span>, is a vector of the procedures necessary to define the behavior of a type of <span class="s12">IMAGEOBJ</span>. Grouping the operations in a separate data type allows multiple instances of the same type of image object to share procedure vectors. The data and procedure fields of an <span class="s12">IMAGEOBJ </span>have a uniform interface through the function <span class="s12">IMAGEOBJPROP</span>. <span class="s12">IMAGEFNS </span>are created with the function <span class="s12">IMAGEFNSCREATE</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 59pt;text-indent: -6pt;line-height: 89%;text-align: left;">(<span class="s15">IMAGEFNSCREATE </span><span class="s16">DISPLAYFN IMAGEBOXFN PUTFN GETFN COPYFN BUTTONEVENTINFN COPYBUTTONEVENTINFN WHENMOVEDFN WHENINSERTEDFN WHENDELETEDFN</span></p><p class="s16" style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">WHENCOPIEDFN WHENOPERATEDONFN PREPRI<span class="s12">)</span>NTFN — <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns an <span class="s12">IMAGEFNS </span>object that contains the functions necessary to define the behavior of an <span class="s12">IMAGEOBJ</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The arguments <span class="s16">DISPLAYFN </span>through <span class="s16">PREPRINTFN </span>should all be function names to be stored as the &quot;methods&quot; of the <span class="s12">IMAGEFNS</span>. The purpose of each <span class="s12">IMAGEFNS </span>method is described below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;">Note: Image objects must be &quot;registered&quot; before they can be read by TEdit or <span class="s12">HREAD</span>. <span class="s12">IMAGEFNSCREATE </span>implicitly registers its <span class="s12">GETFN </span>argument.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMAGEOBJCREATE </span><span class="s16">OBJECTDATUM IMAGEFNS</span><span class="s38">)                                                         </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns an <span class="s12">IMAGEOBJ </span>that contains the object datum <span class="s16">OBJECTDATUM </span>and the operations vector <span class="s16">IMAGEFNS</span>. <span class="s16">OBJECTDATUM </span>can be arbitrary data.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMAGEOBJPROP </span><span class="s16">IMAGEOBJECT PROPERTY NEWVALUE</span>)          <span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Accesses and sets the properties of an <span class="s12">IMAGEOBJ</span>. Returns the current value of the <span class="s16">PROPERTY </span>property of the image object <span class="s16">IMAGEOBJECT</span>. If <span class="s16">NEWVALUE </span>is given, the property is set to it.</p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">IMAGEOBJPROP <span class="p">can be used on the system properties </span>OBJECTDATUM<span class="p">, </span>DISPLAYFN<span class="p">, </span>IMAGEBOXFN<span class="p">, </span>PUTFN<span class="p">, </span>GETFN<span class="p">, </span>COPYFN<span class="p">, BUTTONEVENTINFN, </span>COPYBUTTONEVENTINFN<span class="p">, </span>WHENOPERATEDONFN<span class="p">, and </span>PREPRINTFN<span class="p">. Additionally,</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">it can be used to save arbitrary properties on an <span class="s12">IMAGEOBJ</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMAGEFNSP </span><span class="s16">X</span>)                                             <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">X </span>if <span class="s16">X </span>is an <span class="s12">IMAGEFNS </span>object, <span class="s12">NIL </span>otherwise.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMAGEOBJP </span><span class="s16">X</span>)                                             <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns <span class="s16">X </span>if <span class="s16">X </span>is an <span class="s12">IMAGEOBJ </span>object, <span class="s12">NIL </span>otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">IMAGEFNS Methods</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Note: Many of the <span class="s12">IMAGEFNS </span>methods below are passed &quot;host stream&quot; arguments. The TEdit text editor passes the &quot;text stream&quot; (an object contain all of the information in the document being edited) as the &quot;host stream&quot; argument. Other editing programs that want to use image objects may want to pass the data structure being edited to the <span class="s12">IMAGEFNS </span>methods as the &quot;host stream&quot; argument.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(<span class="s15">DISPLAYFN </span><span class="s16">IMAGEOBJ IMAGESTREAM IMAGESTREAMTYPE HOSTSTREAM</span>)  <span class="p">[</span>IMAGEFNS</p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Method]</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The <span class="s12">DISPLAYFN </span>method is called to display the object <span class="s16">IMAGEOBJ </span>at the current position on <span class="s16">IMAGESTREAM</span>. The type of <span class="s16">IMAGESTREAM </span>indicates whether the device is the display or some other image stream.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Note: When the <span class="s12">DISPLAYFN </span>method is called, the offset and clipping regions for the stream are set so the object’s image is at (0,0), and only that image area can be modified.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMAGEBOXFN </span><span class="s16">IMAGEOBJ IMAGESTREAM CURRENTX RIGHTMARGIN</span>) <span class="p">[</span>IMAGEFNS <span class="p">Method]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The <span class="s12">IMAGEBOXFN </span>method should return the size of the object as an <span class="s12">IMAGEBOX</span>, which is a data structure that describes the image laid down when an <span class="s16">IMAGEOBJ </span>is displayed in terms of width, height, and descender height. An <span class="s12">IMAGEBOX </span>has four fields: <span class="s12">XSIZE</span>,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">YSIZE<span class="p">, </span>YDESC<span class="p">, and </span>XKERN<span class="p">. </span>XSIZE <span class="p">and </span>YSIZE <span class="p">are the width and height of the object image. </span>YDESC <span class="p">and </span>XKERN <span class="p">give the position of the baseline and the left edge of the image relative to where you want to position it. For characters, the </span>YDESC <span class="p">is the descent (height of the descender) and the </span>XKERN <span class="p">is the amount of left kerning (note: TEdit doesn’t support left kerning).</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s12">IMAGEBOXFN </span>looks at the type of the stream to determine the output device if the object’s size changes from device to device. (For example, a bit-map object may specify a scale factor that is ignored when the bit map is displayed on the screen.) <span class="s16">CURRENTX </span>and <span class="s16">RIGHTMARGIN </span>allow an object to take account of its environment when deciding how big it is. If these fields are not available, they are <span class="s12">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 149pt;text-indent: -36pt;text-align: left;">Note: TEdit calls the <span class="s12">IMAGEBOXFN </span>only during line formatting, then caches the <span class="s12">IMAGEBOX </span>as the <span class="s12">BOUNDBOX </span>property of the <span class="s16">IMAGEOBJ</span>.  This avoids the need to call the <span class="s12">IMAGEBOXFN </span>when incomplete position and margin information is available.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">PUTFN </span><span class="s16">IMAGEOBJ FILESTREAM</span>) <span class="p">[</span>IMAGEFNS <span class="p">Method]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The <span class="s12">PUTFN </span>method is called to save the object on a file. It prints a description on <span class="s16">FILESTREAM </span>that, when read by the corresponding <span class="s12">GETFN </span>method (see below), regenerates the image object. (TEdit and <span class="s12">HPRINT </span>take care of writing out the name of the <span class="s12">GETFN</span>.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETFN </span><span class="s16">FILESTREAM</span>) <span class="p">[</span>IMAGEFNS <span class="p">Method]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The <span class="s12">GETFN </span>method is called when the object is encountered on the file during input. It reads the description that was written by the <span class="s12">PUTFN </span>method and returns an <span class="s12">IMAGEOBJ</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">COPYFN </span><span class="s16">IMAGEOBJ SOURCEHOSTSTREAM TARGETHOSTSTREAM</span>) <span class="p">[</span>IMAGEFNS <span class="p">Method]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The <span class="s12">COPYFN </span>method is called during a copy-select operation. It should return a copy of</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s16">IMAGEOBJ</span>. If it returns the litatom <span class="s12">DON’T</span>, copying is suppressed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(<span class="s15">BUTTONEVENTINFN </span><span class="s16">IMAGEOBJ WINDOWSTREAM SELECTION RELX RELY WINDOW</span></p><p class="s16" style="padding-left: 60pt;text-indent: 0pt;text-align: left;">HOSTSTREAM  BUTTO<span class="s12">)</span>N                                    <span class="p">[</span><span class="s12">IMAGEFNS </span><span class="p">Method]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The <span class="s12">BUTTONEVENTINFN </span>method is called when you press a mouse button inside the object. The <span class="s12">BUTTONEVENTINFN </span>decides whether or not to handle the button, to track the cursor in parallel with mouse movement, and to invoke selections or edits supported by the object (but see the <span class="s12">COPYBUTTONEVENTINFN </span>method below). If the <span class="s12">BUTTONEVENTINFN </span>returns <span class="s12">NIL</span>, TEdit treats the button press as a selection at its level. Note that when this function is first called, a button is down. The <span class="s12">BUTTONEVENTINFN </span>should also support the button-down protocol to descend inside of any composite objects with in it. In most cases, the <span class="s12">BUTTONEVENTINFN </span>relinquishes control (i.e., returns) when the cursor leaves its object’s region.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">When the <span class="s12">BUTTONEVENTINFN </span>is called, the window’s clipping region and offsets have been changed so that the lower-left corner of the object’s image is at (<span class="s12">0,0</span>), and only the object’s image can be changed. The selection is available for changing to fit your needs; the mouse button went down at (<span class="s12">RELX,RELY</span>) within the object’s image. You can affect how TEdit treats the selection by returning one of several values. If you return <span class="s12">NIL</span>, TEdit forgets that you selected an object; if you return the atom <span class="s12">DON’T</span>, TEdit doesn’t permit the selection; if you return the atom <span class="s12">CHANGED</span>, TEdit updates the screen.  Use <span class="s12">CHANGED </span>to signal TEdit that the object has changed size or will have side effects on other parts of the screen image.</p><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">COPYBUTTONEVENTINFN </span><span class="s16">IMAGEOBJ WINDOWSTREAM</span>)          <span class="p">[</span>IMAGEFNS <span class="p">Method]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The <span class="s12">COPYBUTTONEVENTINFN </span>method is called when you button inside an object while holding down a copy key. Many of the comments about <span class="s12">BUTTONEVENTINFN </span>apply here too. Also, see the discussion below about copying image objects between windows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 107pt;text-indent: -6pt;line-height: 80%;text-align: justify;">(<span class="s15">WHENMOVEDFN </span><span class="s16">IMAGEOBJ TARGETWINDOWSTREAM SOURCEHOSTSTREAM TARGETHOSTSTREAM</span>) <span class="p">[</span>IMAGEFNS <span class="p">Method]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The <span class="s12">WHENMOVEDFN </span>method provides hooks by which the object is notified when TEdit performs an operation (<span class="s12">MOVE</span>ing) on the whole object. It allows objects to have side effects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 108pt;text-indent: -6pt;line-height: 80%;text-align: justify;">(<span class="s15">WHENINSERTEDFN </span><span class="s16">IMAGEOBJ TARGETWINDOWSTREAM SOURCEHOSTSTREAM TARGETHOSTSTREAM</span>) <span class="p">[</span>IMAGEFNS <span class="p">Method]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The <span class="s12">WHENINSERTEDFN </span>method provides hooks by which the object is notified when TEdit performs an operation (<span class="s12">INSERT</span>ing) on the whole object. It allows objects to have side effects.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">WHENDELETEDFN </span><span class="s16">IMAGEOBJ TARGETWINDOWSTREAM</span><span class="s38">)                        </span><span class="p">[</span>IMAGEFNS <span class="p">Method]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The <span class="s12">WHENDELETEDFN </span>method provides hooks by which the object is notified when TEdit performs an operation (<span class="s12">DELETE</span>ing) on the whole object. It allows objects to have side effects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 108pt;text-indent: -6pt;line-height: 80%;text-align: justify;">(<span class="s15">WHENCOPIEDFN </span><span class="s16">IMAGEOBJ TARGETWINDOWSTREAM SOURCEHOSTSTREAM TARGETHOSTSTREAM</span>) <span class="p">[</span>IMAGEFNS <span class="p">Method]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The <span class="s12">WHENCOPIEDFN </span>method provides hooks by which the object is notified when TEdit performs an operation (<span class="s12">COPY</span>ing) on the whole object. The <span class="s12">WHENCOPIEDFN </span>method is called in addition to (and after) the <span class="s12">COPYFN </span>method above. It allows objects to have side effects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 108pt;text-indent: -6pt;line-height: 80%;text-align: justify;">(<span class="s15">WHENOPERATEDONFN </span><span class="s16">IMAGEOBJ WINDOWSTREAM HOWOPERATEDON SELECTION HOSTSTREAM</span>) <span class="p">[</span>IMAGEFNS <span class="p">Method]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The <span class="s12">WHENOPERATEDONFN </span>method provides a hook for edit operations. <span class="s12">HOWOPERATEDON </span>should be one of <span class="s12">SELECTED</span>, <span class="s12">DESELECTED</span>, <span class="s12">HIGHLIGHTED</span>, and <span class="s12">UNHILIGHTED</span>. The <span class="s12">WHENOPERATEDONFN </span>differs from the <span class="s12">BUTTONEVENTINFN</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">because it is called when you extend a selection through the object. That is, the object is</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">treated in toto as a TEdit character. <span class="s12">HIGHLIGHTED </span>refers to the selection being highlighted on the screen, and <span class="s12">UNHIGHLIGHTED </span>means that the highlighting is being turned off.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">PREPRINTFN </span><span class="s16">IMAGEOBJ</span>) <span class="p">[</span>IMAGEFNS <span class="p">Method]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s12">PREPRINTFN </span>method is called to convert the object into something that can be printed for inclusion in documents. It returns an object that the receiving window can print (using either <span class="s12">PRIN1 </span>or <span class="s12">PRIN2</span>,its choice) to obtain a character representation of the object. If the <span class="s12">PREPRINTFN </span>method is <span class="s12">NIL</span>, the <span class="s12">OBJECTDATUM </span>field of <span class="s16">IMAGEOBJ </span>itself is used. TEdit uses this function when you indicate that you want to print the characters from an object rather than the object itself (presumably using <span class="s12">PRIN1 </span>case).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Registering Image Objects</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">Each legitimate <span class="s12">GETFN </span>needs to be known to the system, to prevent various Trojan-horse problems and to allow the automatic loading of the supporting code for infrequently used <span class="s12">IMAGEOBJ</span>s. To this end, there is a global list, <span class="s12">IMAGEOBJGETFNS</span>, that contains an entry for each <span class="s12">GETFN</span>. The existence of the entry marks the <span class="s12">GETFN </span>as legitimate; the entry itself is a property list, which can hold information about the <span class="s12">GETFN</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">No action needs to be taken for <span class="s12">GETFN</span>s that are currently in use: the function <span class="s12">IMAGEFNSCREATE </span>automatically adds its <span class="s12">GETFN </span>argument to the list. However, packages that support obsolete versions of objects may need to explicitly add the obsolete <span class="s12">GETFN</span>s. For example, TEdit supports bit-map <span class="s12">IMAGEOBJ</span>s. Recently, a change was made in the format in which objects are stored; to retain compatibility with the old object format, there are now two <span class="s12">GETFN</span>s. The current <span class="s12">GETFN </span>is automatically on the list, courtesy of <span class="s12">IMAGEFNSCREATE</span>. However, the code file that supports the old bit-map objects contains the clause: <span class="s12">(ADDVARS (IMAGEOBJGETFNS (OLDGETFNNAME)))</span>, which adds the old <span class="s12">GETFN </span>to <span class="s12">IMAGEOBJGETFNS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">For a given <span class="s12">GETFN</span>, the entry on <span class="s12">IMAGEOBJGETFNS </span>may be a property list of information. Currently the only recognized property is <span class="s12">FILE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FILE <span class="p">is the name of the file that can be loaded if the </span>GETFN <span class="p">isn’t defined. This file should define the</span></p><p class="s12" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">GETFN<span class="p">, along with all the other functions needed to support that kind of </span>IMAGEOBJ<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">For example, the bit-map <span class="s12">IMAGEOBJ </span>implemented by TEdit use the <span class="s12">GETFN BMOBJ</span>.<span class="s12">GETFN2</span>. Its entry on <span class="s12">IMAGEOBJGETFNS </span>is <span class="s12">(BMOBJ.GETFN2 FILE IMAGEOBJ)</span>, indicating that the support code for bit-map image objects resides on the file <span class="s12">IMAGEOBJ</span>, and that the <span class="s12">GETFN </span>for them is <span class="s12">BMOBJ.GETFN2</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">This makes it possible to have entries for <span class="s12">GETFN</span>s whose supporting code isn’t loaded—you might, for instance, have your init file add entries to <span class="s12">IMAGEOBJGETFNS </span>for the kinds of image objects you</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">commonly use. The system’s default reading method will automatically load the code when necessary.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Reading and Writing Image Objects on Files</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: left;">Image Objects can be written out to files using <span class="s12">HPRINT </span>and read back using <span class="s12">HREAD</span>. The following functions can also be used:</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">WRITEIMAGEOBJ </span><span class="s16">IMAGEOBJ STREAM</span>)                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Prints (using <span class="s12">PRIN2</span>) a call to <span class="s12">READIMAGEOBJ</span>, then calls the <span class="s12">PUTFN </span>for <span class="s16">IMAGEOBJ </span>to write it onto <span class="s16">STREAM</span>. During input, then, the call to <span class="s12">READIMAGEOBJ </span>is read and evaluated; it in turn reads back the object’s description, using the appropriate <span class="s12">GETFN</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">READIMAGEOBJ </span><span class="s16">STREAM GETFN NOERROR</span>)                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Reads an <span class="s12">IMAGEOBJ </span>from <span class="s16">STREAM</span>, starting at the current file position. Uses the function</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">GETFN <span class="p">after validating it (and loading support code, if necessary).</span></p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If the <span class="s16">GETFN </span>can’t be validated or isn’t defined, <span class="s12">READIMAGEOBJ </span>returns an &quot;encapsulated image object&quot;, an <span class="s12">IMAGEOBJ </span>that safely encapsulates all of the information in the image object. An encapsulated image object displays as a rectangle that says, &quot;<span class="s12">Unknown IMAGEOBJ Type</span>&quot; and lists the <span class="s16">GETFN</span>’s name. Selecting an encapsulated image object with the mouse causes another attempt to read the object from the file; this is so you can load any necessary support code and then get to the object.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Warning: You cannot save an encapsulated image object on a file because there isn’t enough information to allow copying the description to the new file from the old one.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NOERROR </span>is non-<span class="s12">NIL</span>, <span class="s12">READIMAGEOBJ </span>returns <span class="s12">NIL </span>if it can’t successfully read the object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Copying Image Objects Between Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Copying between windows is implemented as follows: If a button event occurs in a window when a copy key is down, the window’s <span class="s12">COPYBUTTONEVENTFN </span>window property is called. If this window supports copy-selection, it should track the mouse, indicating the item to be copied. When the button is released, the <span class="s12">COPYBUTTONEVENTFN </span>should create an image object out of the selected information, and call <span class="s12">COPYINSERT </span>to insert it in the current <span class="s12">TTY </span>window. <span class="s12">COPYINSERT </span>calls the <span class="s12">COPYINSERTFN </span>window property of the <span class="s12">TTY </span>window to insert this image object. Therefore, both the source and destination windows can determine how they handle copying image objects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">If the <span class="s12">COPYBUTTONEVENTFN </span>of a window is <span class="s12">NIL</span>, the <span class="s12">BUTTONEVENTFN </span>is called instead when a button event occurs in the window when a copy key is down, and copying from that window is not supported. If the <span class="s12">COPYINSERTFN </span>of the <span class="s12">TTY </span>window is <span class="s12">NIL</span>, <span class="s12">COPYINSERT </span>will turn the image object into a string (by calling the <span class="s12">PREPRINTFN </span>method of the image object) and insert it by calling <span class="s12">BKSYSBUF</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">COPYBUTTONEVENTFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The <span class="s12">COPYBUTTONEVENTFN </span>of a window is called (if it exists) when a button event occurs in the window and a copy key is down. If no <span class="s12">COPYBUTTONEVENTFN </span>exists, the <span class="s12">BUTTONEVENTFN </span>is called.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">COPYINSERTFN <span class="p">[Window Property]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s12">COPYINSERTFN </span>of the &quot;destination&quot; window is called by <span class="s12">COPYINSERT </span>to insert something into the destination window. It is called with two arguments: the object to be inserted and the destination window. The object to be inserted can be a character string, an <span class="s12">IMAGEOBJ</span>, or a list of <span class="s12">IMAGEOBJ</span>s and character strings. As a convention, the <span class="s12">COPYINSERTFN </span>should call <span class="s12">BKSYSBUF </span>if the object to be inserted insert is a character string.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">(<span class="s15">COPYINSERT </span><span class="s16">IMAGEOBJ</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s12">COPYINSERT </span>inserts <span class="s16">IMAGEOBJ </span>into the window that currently has the <span class="s12">TTY</span>. If the current <span class="s12">TTY </span>window has a <span class="s12">COPYINSERTFN</span>, it is called, passing it <span class="s16">IMAGEOBJ </span>and the window as arguments.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If no <span class="s12">COPYINSERTFN </span>exists and if <span class="s16">IMAGEOBJ </span>is an image object, <span class="s12">BKSYSBUF </span>is called on the result of calling its <span class="s12">PREPRINTFN </span>on it. If <span class="s16">IMAGEOBJ </span>is not an image object, it is simply passed to <span class="s12">BKSYSBUF </span>. In this case, <span class="s12">BKSYSBUF </span>will call <span class="s12">PRIN2 </span>with a read table taken from the process associated with the <span class="s12">TTY </span>window. A window that wishes to use <span class="s12">PRIN1 </span>or a different read table must provide its own <span class="s12">COPYINSERTFN </span>to do this.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Implementation of Image Streams                                                                                                  </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Interlisp does all image creation through a set of functions and data structures for device-independent graphics, known popularly as <span class="s12">DIG</span>. <span class="s12">DIG </span>is implemented through the use of a special type of stream, known as an image stream.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">An image stream, by convention, is any stream that has its <span class="s12">IMAGEOPS </span>field (described in detail below) set to a vector of meaningful graphical operations. Using image streams, you can write programs that draw and print on an output stream without regard to the underlying device, be it a window, a disk, or a printer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">To define a new image stream type, it is necessary to put information on the variable</p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">IMAGESTREAMTYPES<span class="s5">:</span></p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">IMAGESTREAMTYPES                                               <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">This variable describes how to create a stream for a given image stream type. The value of <span class="s12">IMAGESTREAMTYPES </span>is an association list, indexed by the image stream type (e.g., <span class="s12">DISPLAY</span>, <span class="s12">INTERPRESS</span>, etc.). The format of a single association list item is:</p><p class="s12" style="padding-top: 5pt;padding-left: 198pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(IMAGETYPE</p><p class="s12" style="padding-left: 222pt;text-indent: 0pt;line-height: 88%;text-align: left;">(OPENSTREAM OPENSTREAMFN) (FONTCREATE FONTCREATEFN) (FONTSAVAILABLE FONTSAVAILABLEFN))</p><p class="s12" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">OPENSTREAMFN<span class="p">, </span>FONTCREATEFN<span class="p">, and </span>FONTSAVAILABLEFN <span class="p">are &quot;image stream</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">methods,&quot; device-dependent functions used to implement generic image stream operations.  For Interpress image streams, the association list entry is:</p><p class="s12" style="padding-top: 5pt;padding-left: 198pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(INTERPRESS</p><p class="s12" style="padding-left: 216pt;text-indent: 0pt;line-height: 88%;text-align: left;">(OPENSTREAM OPENIPSTREAM) (FONTCREATE \CREATEINTERPRESSFONT)</p><p class="s12" style="padding-left: 216pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(FONTSAVAILABLE \SEARCHINTERPRESSFONTS))</p><p class="s12" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">OPENSTREAMFN </span><span class="s16">FILE OPTIONS</span>)                       <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s16">FILE </span>is the file name as it was passed to <span class="s12">OPENIMAGESTREAM</span>, and <span class="s16">OPTIONS </span>is the <span class="s16">OPTIONS </span>property list passed to <span class="s12">OPENIMAGESTREAM</span>. The result must be a stream of the appropriate image type.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">FONTCREATEFN </span><span class="s16">FAMILY SIZE FACE ROTATION DEVICE</span>)     <span class="p">[Image Stream Method]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">FAMILY </span>is the family name for the font, e.g., <span class="s12">MODERN</span>. <span class="s16">SIZE </span>is the body size of the font, in printer’s points. <span class="s16">FACE </span>is a three-element list describing the weight, slope, and expansion of the face desired, e.g., (<span class="s12">MEDIUM ITALIC EXPANDED</span>). <span class="s16">ROTATION </span>is how much the font is to be rotated from the normal orientation, in minutes of arc. For example, to print a landscape page, fonts have the rotation 5400 (90 degrees). The function’s result must be a <span class="s12">FONTDESCRIPTOR </span>with the fields filled in appropriately.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FONTSAVAILABLEFN </span><span class="s16">FAMILY SIZE FACE ROTATION DEVICE</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">This function returns a list of all fonts agreeing with the <span class="s16">FAMILY</span>, <span class="s16">SIZE</span>, <span class="s16">FACE</span>, and <span class="s16">ROTATION </span>arguments; any of them may be wild-carded (i.e., equal to <span class="s12">*</span>, which means any value is acceptable). Each element of the list should be a quintuple of the form (<span class="s16">FAMILY SIZE FACE ROTATION DEVICE</span>).</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Where the function looks is an implementation decision: the <span class="s12">FONTSAVAILABLEFN </span>for the display device looks at <span class="s12">DISPLAYFONTDIRECTORIES</span>, the Interpress code looks on <span class="s12">INTERPRESSFONTDIRECTORIES</span>, and implementors of new devices should feel free to introduce new search path variables.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">As indicated above, image streams use a field that no other stream uses: <span class="s12">IMAGEOPS</span>. <span class="s12">IMAGEOPS </span>is an instance of the <span class="s12">IMAGEOPS </span>data type and contains a vector of the stream’s graphical methods. The methods contained in the <span class="s12">IMAGEOPS </span>object can make arbitrary use of the stream’s <span class="s12">IMAGEDATA </span>field, which is provided for their use, and may contain any data needed.</p><p style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s15">IMAGETYPE </span>[<span class="s12">IMAGEOPS </span>Field]</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Value is the name of an image type. Monochrome display streams have an <span class="s12">IMAGETYPE </span>of <span class="s12">DISPLAY</span>; color display streams are identified as (<span class="s12">COLOR DISPLAY</span>). The <span class="s12">IMAGETYPE </span>field is informational and can be set to anything you choose.</p><p style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span class="s15">IMFONTCREATE </span>[<span class="s12">IMAGEOPS </span>Field]</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Value is the device name to pass to <span class="s12">FONTCREATE </span>when fonts are created for the stream.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The remaining fields are all image stream methods, whose value should be a device- dependent function that implements the generic operation. Most methods are called by a similarly-named function, e.g. the function <span class="s12">DRAWLINE </span>calls the <span class="s12">IMDRAWLINE </span>method. All coordinates that refer to points in a display device’s space are measured in the device’s units. (The <span class="s12">IMSCALE </span>method provides access to a device’s scale.) For arguments that have defaults (such as the <span class="s12">BRUSH </span>argument of <span class="s12">DRAWCURVE</span>), the default is substituted for the <span class="s12">NIL </span>argument before it is passed to the image stream method. Therefore, image stream methods do not have to handle defaults.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">IMCLOSEFN </span><span class="s16">STREAM</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Called before a stream is closed with <span class="s12">CLOSEF</span>. This method should flush buffers, write header or trailer information, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 77%;text-align: left;"><span class="s12">(</span><b>IMDRAWLINE </b>STREAM X<span class="s32">1 </span>Y<span class="s32">1 </span>X<span class="s32">2 </span>Y<span class="s32">2 </span>WIDTH OPERATION COLOR DASHING<span class="s12">) </span><span class="p">[Image Stream</span></p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Method]</p><p class="s16" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="p">Draws a line of width </span>WIDTH <span class="p">from (</span>X<span class="s32">1</span><span class="s33">, </span>Y<span class="s32">1</span><span class="p">) to (</span>X<span class="s32">2</span><span class="s33">, </span>Y<span class="s32">2</span><span class="p">). See </span><span class="s12">DRAWLINE</span><span class="p">.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">IMDRAWCURVE </span><span class="s16">STREAM KNOTS CLOSED BRUSH DASHING</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Draws a curve through <span class="s16">KNOTS</span>. See <span class="s12">DRAWCURVE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(<span class="s15">IMDRAWCIRCLE </span><span class="s16">STREAM CENTERX CENTERY RADIUS BRUSH DASHING</span>) <span class="p">[Image Stream</span></p><p style="padding-left: 108pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Method]</p><p style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Draws a circle of radius <span class="s16">RADIUS </span>around (<span class="s16">CENTERX, CENTERY</span>). See <span class="s12">DRAWCIRCLE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(<span class="s15">IMDRAWELLIPSE </span><span class="s16">STREAM CENTERX CENTERY SEMIMINORRADIUS  SEMIMAJORRADIUS</span></p><p class="s16" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">ORIENTATION  BRUSH  DASHIN<span class="s12">)</span>G                          <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Draws an ellipse around (<span class="s16">CENTERX, CENTERY</span>). See <span class="s12">DRAWELLIPSE</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMFILLPOLYGON </span><span class="s16">STREAM POINTS TEXTURE</span>)              <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Fills in the polygon outlined by <span class="s16">POINTS </span>on the image stream <span class="s16">STREAM</span>, using the texture</p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s16">TEXTURE</span>. See <span class="s12">FILLPOLYGON</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMFILLCIRCLE </span><span class="s16">STREAM CENTERX CENTERY RADIUS TEXTURE</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Draws a circle filled with texture <span class="s16">TEXTURE </span>around (<span class="s16">CENTERX, CENTERY</span>). See</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FILLCIRCLE<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(<span class="s15">IMBLTSHADE </span><span class="s16">TEXTURE  STREAM  DESTINATIONLEFT  DESTINATIONBOTTOM  WIDTH</span></p><p class="s16" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">HEIGHT  OPERATION  CLIPPINGREGI<span class="s12">)</span>ON                   <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The texture-source case of <span class="s12">BITBLT</span>. <span class="s16">DESTINATIONLEFT</span>, <span class="s16">DESTINATIONBOTTOM, WIDTH, HEIGHT</span>, and <span class="s16">CLIPPINGREGION </span>are measured in <span class="s16">STREAM</span>’s units. This method is invoked by the functions <span class="s12">BITBLT </span>and <span class="s12">BLTSHADE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 107pt;text-indent: -6pt;line-height: 89%;text-align: left;">(<span class="s15">IMBITBLT </span><span class="s16">SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE</span></p><p class="s16" style="padding-left: 107pt;text-indent: 0pt;line-height: 9pt;text-align: left;">CLIPPINGREGION CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM</p><p style="padding-left: 107pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Stream Method]</p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">) <span class="s16">SCALE </span><span class="p">[Image</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Contains the bit-map-source cases of <span class="s12">BITBLT</span>. <span class="s16">SOURCELEFT, SOURCEBOTTOM, CLIPPEDSOURCELEFT, CLIPPEDSOURCEBOTTOM, WIDTH</span>, and <span class="s16">HEIGHT </span>are measured in pixels; <span class="s16">DESTINATIONLEFT</span>, <span class="s16">DESTINATIONBOTTOM</span>, and <span class="s16">CLIPPINGREGION </span>are in the</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">units of the destination stream.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 107pt;text-indent: -6pt;line-height: 88%;text-align: justify;">(<span class="s15">IMSCALEDBITBLT  </span><span class="s16">SOURCEBITMAP     SOURCELEFT     SOURCEBOTTOM     STREAM DESTINATIONLEFT  DESTINATIONBOTTOM  WIDTH  HEIGHT  SOURCETYPE  OPERATION TEXTURE  CLIPPINGREGION   CLIPPEDSOURCELEFT  CLIPPEDSOURCEBOTTOM  SCA</span>)<span class="s16">LE</span></p><p style="padding-left: 107pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[Image Stream Method]</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">A scaled version of <span class="s12">IMBITBLT</span>. Each pixel in <span class="s16">SOURCEBITMAP </span>is replicated <span class="s16">SCALE </span>times in the <span class="s12">X </span>and <span class="s12">Y </span>directions; currently, <span class="s16">SCALE </span>must be an integer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 126pt;text-indent: -24pt;text-align: left;">(<span class="s15">IMMOVETO </span><span class="s16">STREAM X Y</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Moves to (<span class="s16">X,Y</span>). This method is invoked by the function <span class="s12">MOVETO</span>. If <span class="s12">IMMOVETO </span>is not supplied, a default method composed of calls to the <span class="s12">IMXPOSITION </span>and <span class="s12">IMYPOSITION </span>methods is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">IMSTRINGWIDTH </span><span class="s16">STREAM STR RDTBL</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the width of string <span class="s33">S TR </span>in <span class="s16">STREAM</span>’s units, using <span class="s16">STREAM</span>’s current font. This is envoked when <span class="s12">STRINGWIDTH </span>is passed a stream as its <span class="s12">FONT </span>argument. If <span class="s12">IMSTRINGWIDTH </span>is not supplied, it defaults to calling <span class="s12">STRINGWIDTH </span>on the default font of <span class="s16">STREAM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">IMCHARWIDTH </span><span class="s16">STREAM CHARCODE</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the width of character <span class="s16">CHARCODE </span>in <span class="s16">STREAM</span>’s units, using <span class="s16">STREAM</span>’s current font. This is invoked when <span class="s12">CHARWIDTH </span>is passed a stream as its <span class="s12">FONT </span>argument. If <span class="s12">IMCHARWIDTH </span>is not supplied, it defaults to calling <span class="s12">CHARWIDTH </span>on the default font of <span class="s16">STREAM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">IMCHARWIDTHY </span><span class="s16">STREAM CHARCODE</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the <span class="s12">Y </span>componant of the width of character <span class="s16">CHARCODE </span>in <span class="s16">STREAM</span>’s units, using <span class="s16">STREAM</span>’s current font. This is envoked when <span class="s12">CHARWIDTHY </span>is passed a stream as its <span class="s12">FONT </span>argument. If <span class="s12">IMCHARWIDTHY </span>is not supplied, it defaults to calling <span class="s12">CHARWIDTHY </span>on the default font of <span class="s16">STREAM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">IMBITMAPSIZE </span><span class="s16">STREAM BITMAP DIMENSION</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the size that <span class="s16">BITMAP </span>will be when <span class="s12">BITBLT</span>ed to <span class="s16">STREAM</span>, in <span class="s16">STREAM</span>’s units. <span class="s16">DIMENSION </span>can be one of <span class="s16">WIDTH, HEIGHT</span>, or <span class="s12">NIL</span>, in which case the dotted pair (<span class="s16">WIDTH . HEIGHT</span>) will be returned.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">This is envoked by <span class="s12">BITMAPIMAGESIZE</span>. If <span class="s12">IMBITMAPSIZE </span>is not supplied, it defaults to a method that multiplies the bitmap height and width by the scale of <span class="s16">STREAM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">IMNEWPAGE </span><span class="s16">STREAM</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Causes a new page to be started. The <span class="s12">X </span>position is set to the left margin, and the <span class="s12">Y </span>position is set to the top margin plus the linefeed. If not supplied, defaults to <span class="s12">(\OUTCHAR STREAM (CHARCODE ^L))</span>. Envoked by <span class="s12">DSPNEWPAGE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">IMTERPRI </span><span class="s16">STREAM</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Causes a new line to be started. The <span class="s12">X </span>position is set to the left margin, and the <span class="s12">Y </span>position is set to the current <span class="s12">Y </span>position plus the linefeed. If not supplied, defaults to <span class="s12">(\OUTCHAR STREAM (CHARCODE EOL))</span>.  Envoked by <span class="s12">TERPRI</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">IMRESET </span><span class="s16">STREAM</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Resets the <span class="s12">X </span>and <span class="s12">Y </span>position of <span class="s16">STREAM</span>. The <span class="s12">X </span>coordinate is set to its left margin; the <span class="s12">Y </span>coordinate is set to the top of the clipping region minus the font ascent. Envoked by <span class="s12">DSPRESET</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">The following methods all have corresponding <span class="s12">DSP</span>xx functions (e.g., <span class="s12">IMYPOSITION </span>corresponds to <span class="s12">DSPYPOSITION</span>) that invoke them. They also have the property of returning their previous value; when called with <span class="s12">NIL </span>they return the old value without changing it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMCLIPPINGREGION </span><span class="s16">STREAM REGION</span>)                   <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Sets a new clipping region on <span class="s16">STREAM</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMXPOSITION </span><span class="s16">STREAM XPOSITION</span>)                     <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Sets the <span class="s12">X</span>-position on <span class="s16">STREAM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMYPOSITION </span><span class="s16">STREAM YPOSITION</span>)                     <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Sets a new <span class="s12">Y</span>-position on <span class="s16">STREAM</span>.</p><p class="s16" style="padding-top: 10pt;padding-left: 126pt;text-indent: -24pt;line-height: 136%;text-align: left;"><span class="s12">(</span><b>IMFONT </b>STREAM FONT<span class="s12">) </span><span class="p">[Image Stream Method] Sets </span>STREAM<span class="p">’s font to be </span>FONT<span class="p">.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMLEFTMARGIN </span><span class="s16">STREAM LEFTMARGIN</span>)                   <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Sets <span class="s16">STREAM</span>’s left margin to be <span class="s16">LEFTMARGIN</span>. The left margin is defined as the <span class="s12">X</span>-position set after the new line.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMRIGHTMARGIN </span><span class="s16">STREAM RIGHTMARGIN</span>)                 <span class="p">[Image Stream  Method]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Sets <span class="s16">STREAM</span>’s right margin to be <span class="s16">RIGHTMARGIN</span>. The right margin is defined as the maximum <span class="s12">X</span>-position at which characters are printed; printing beyond it causes a new line.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMTOPMARGIN </span><span class="s16">STREAM YPOSITION</span>)                     <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Sets <span class="s16">STREAM</span>’s top margin (the <span class="s12">Y</span>-position of the tops of characters that is set after a new page) to be <span class="s16">YPOSITION</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">IMBOTTOMMARGIN </span><span class="s16">STREAM YPOSITION</span>)                  <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Sets <span class="s16">STREAM</span>’s bottom margin (the <span class="s12">Y</span>-position beyond which any printing causes a new page) to be <span class="s16">YPOSITION</span>.</p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: -24pt;line-height: 17pt;text-align: left;">(<span class="s15">IMLINEFEED </span><span class="s16">STREAM DELTA</span>) <span class="p">[Image Stream Method] Sets </span><span class="s16">STREAM</span><span class="p">’s line feed distance (distance to move vertically after a new line) to be</span></p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DELTA<span class="p">.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: -24pt;line-height: 17pt;text-align: left;">(<span class="s15">IMSCALE </span><span class="s16">STREAM SCALE</span>) <span class="p">[Image Stream Method] Returns the number of device points per screen point (a screen point being ~1 / 72 inch).</span></p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">SCALE <span class="p">is ignored.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">GRAPHICS OUTPUT OPERATIONS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">IMSPACEFACTOR </span><span class="s16">STREAM FACTOR</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Sets the amount by which to multiply the natural width of all following space characters on <span class="s16">STREAM</span>; this can be used for the justification of text. The default value is 1. For example, if the natural width of a space in <span class="s16">STREAM</span>’s current font is 12 units, and the space factor is set to two, spaces appear 24 units wide. The values returned by <span class="s12">STRINGWIDTH </span>and <span class="s12">CHARWIDTH </span>are also affected.</p><p class="s12" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">IMOPERATION </span><span class="s16">STREAM OPERATION</span>) <span class="p">[Image Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Sets the default <span class="s12">BITBLT </span><span class="s16">OPERATION </span>argument.</p><p class="s12" style="padding-top: 10pt;padding-left: 78pt;text-indent: -24pt;line-height: 136%;text-align: left;">(<span class="s15">IMBACKCOLOR </span><span class="s16">STREAM COLOR</span>) <span class="p">[Image Stream Method] Sets the background color of </span><span class="s16">STREAM</span><span class="p">.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 78pt;text-indent: -24pt;line-height: 136%;text-align: left;">(<span class="s15">IMCOLOR </span><span class="s16">STREAM COLOR</span>) <span class="p">[Image Stream Method] Sets the default color of </span><span class="s16">STREAM</span><span class="p">.</span></p><p style="padding-top: 10pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">In addition to the <span class="s12">IMAGEOPS </span>methods described above, there are two other important methods, which are contained in the stream itself. These fields can be installed using a form like (replace (<span class="s12">STREAM OUTCHARFN</span>) of <span class="s12">STREAM </span>with (<span class="s12">FUNCTION MYOUTCHARFN</span>)). Note: You need to have loaded the Interlisp-D system declarations to manipulate the fields of <span class="s12">STREAM</span>s. The declarations can be loaded by loading the Lisp Library package <span class="s12">SYSEDIT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">STRMBOUTFN </span><span class="s16">STREAM CHARCODE</span>) <span class="p">[Stream Method]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The function called by <span class="s11">BOUT</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">OUTCHARFN </span><span class="s16">STREAM CHARCODE</span>) <span class="p">[Stream Method]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The function that is called to output a single byte. This is like <span class="s12">STRMBOUTFN</span>, except for being one level higher: it is intended for text output. Hence, this function should convert (<span class="s16">CHARCODE </span><span class="s12">EOL</span>) into the stream’s actual end-of-line sequence and should adjust the stream’s <span class="s12">CHARPOSITION </span>appropriately before invoking the stream’s <span class="s12">STRMBOUTFN </span>(by calling <span class="s12">BOUT</span>) to actually put the character. Defaults to <span class="s12">\FILEOUTCHARFN</span>, which is probably incorrect for an image stream.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 4pt;padding-left: 25pt;text-indent: -19pt;text-align: left;"><a name="bookmark31">WINDOWS AND MENUS</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="605" height="3" alt="image" src="Image_097.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Windows provide a means by which different programs can share a single display harmoniously. Rather than having every program directly manipulating the screen bitmap, all display input / output operations are directed towards windows, which appear as rectangular regions of the screen, with borders and titles. The Interlisp-D window system provides both interactive and programmatic constructs for creating, moving, reshaping, overlapping, and destroying windows in such a way that a program can use a window in a relatively transparent fashion (see the Windows section below). This allows existing Interlisp programs to be used without change, while providing a base for experimentation with more complex windows in new applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Menus are a special type of window provided by the window system, used for displaying a set of items to the user, and having the user select one using the mouse and cursor. The window system uses menus to provide the interactive interface for manipulating windows. The menu facility also allows users to create and use menus in interactive programs (see the Menus section below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Sometimes, a program needs to use a number of windows, displaying related information. The attached window facility (see the Attached Windows section below) makes it easy to manipulate a group of windows as a single unit, moving and reshaping them together.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This chapter documents the Interlisp-D window system. First, it describes the default windows and menus supplied by the window system. Then, the programmatic facilities for creating windows. Next, the functions for using menus. Finally, the attached window facility.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: -48pt;line-height: 91%;text-align: justify;">Warning: The window system assumes that all programs follow certain conventions concerning control of the screen. All user programs should use perform display operations using windows and menus. In particular, user programs should not perform operate directly on the screen bitmap; otherwise the window system will not work correctly. For specialized applications that require taking complete control of the display, the window system can be turned off (and back on again) with the following function:</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">(<span class="s15">WINDOWWORLD </span><span class="s16">FLAG</span>) <span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The window system is turned on if <span class="s16">FLAG </span>is <span class="s11">T </span>and off if <span class="s16">FLAG </span>is <span class="s11">NIL</span>. <span class="s11">WINDOWWORLD </span>returns the previous state of the window system (<span class="s11">T </span>or <span class="s11">NIL</span>). If <span class="s11">WINDOWWORLD </span>is given no arguments, it simply returns the current state without affecting the window system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Using the Window System                                                                                                                                </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When Medley is initially started, the display screen lights up, showing a number of windows, including the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 129pt;text-indent: 0pt;text-align: left;"><span><img width="196" height="110" alt="image" src="Image_098.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This window is the &quot;logo window,&quot; used to identify the system. The logo window is bound to the variable <span class="s11">LOGOW </span>until it is closed. The user can create other windows like this by calling the following function:</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">LOGOW </span><span class="s16">STRING WHERE TITLE ANGLEDELTA</span>)                       <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Creates a window formatted like the &quot;logo window.&quot; <span class="s16">STRING </span>is the string to be printed in big type in the window; if <span class="s11">NIL</span>, &quot;Medley&quot; is used. <span class="s16">WHERE </span>is the position of the lower-left corner of the window; if <span class="s11">NIL</span>, the user is asked to specify a position. <span class="s16">TITLE </span>is the window title to use; if <span class="s11">NIL</span>, it defaults to the Xerox copyright notice and date. <span class="s16">ANGLEDELTA </span>specifies the angle (in degrees) between the boxes in the picture; if <span class="s11">NIL</span>, it defaults to 23 degrees.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 207pt;text-indent: 0pt;text-align: left;"><span><img width="265" height="83" alt="image" src="Image_099.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="9" height="8" alt="image" src="Image_100.gif"/></span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">This window is the &quot;executive window,&quot; used for typing expressions and commands to the Interlisp-D executive, and for the executive to print any results (see Chapter 13). For example, in the above picture, the user typed in <span class="s12">(PLUS 3 4)</span>, the executive evaluated it, and printed out the result, 7. The upward-pointing arrow ( ) is the flashing caret, which indicates where the next keyboard typein will be printed (see the <span class="s11">TTY </span>Process and the Caret section in this chapter).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 211pt;text-indent: 0pt;text-align: left;"><span><img width="254" height="42" alt="image" src="Image_101.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This window is the &quot;prompt window,&quot; used for printing various system prompt messages. It is available to user programs through the following functions:</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">PROMPTWINDOW                                                   <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Global variable containing the prompt window<span class="s5">.</span></p><p class="s16" style="padding-top: 10pt;padding-left: 100pt;text-indent: 0pt;line-height: 136%;text-align: center;"><span class="s12">(</span><b>PROMPTPRINT </b>EXP<span class="s32">1 </span><span class="s33">... </span>EXP<span class="s32">N</span><span class="s12">)                          </span><span class="p">[NoSpread Function] Clears the prompt window, and prints </span>EXP<span class="s32">1 </span><span class="p">through </span>EXP<span class="s32">N </span><span class="p">in the prompt window.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: justify;">(<span class="s15">CLRPROMPT</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Clears the prompt window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The Medley window system allows the user to interactively manipulate the windows on the screen, moving them around, changing their shape, etc. by selecting various operations from a menu.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">For most windows, pressing the <span class="s11">RIGHT </span>mouse button when the cursor is inside a window during I / O wait will cause the window to come to the top and a menu of window operations to appear.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 207pt;text-indent: 0pt;text-align: left;"><span><img width="71" height="122" alt="image" src="Image_102.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If a command is selected from this menu (by releasing the right mouse key while the cursor is over a command), the selected operation will be applied to the window in which the menu was brought up. It is possible for an applications program to redefine the action of the <span class="s11">RIGHT </span>mouse button. In these cases, there is a convention that the default command menu may be brought up by depressing the <span class="s11">RIGHT </span>button when the cursor is in the header or border of a window (see the Mouse Activity in Windows section in this chapter). The operations are:</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">Close <span class="p">[Window Menu Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Closes the window, i.e, removes it from the screen. (See <span class="s11">CLOSEW </span>in the Opening and Closing Windows section in this chapter.)</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">Snap <span class="p">[Window Menu Command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Prompts for a region on the screen and makes a new window whose bits are a snapshot of the bits currently in that region. Useful for saving some particularly choice image before the window image changes.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">Paint <span class="p">[Window Menu Command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Switches to a mode in which the cursor can be used like a paint brush to draw in a window. This is useful for making notes on a window. While the <span class="s11">LEFT </span>button is down, bits are added. While the <span class="s11">MIDDLE </span>button is down, they are erased. The <span class="s11">RIGHT </span>button pops up a command menu that allows changing of the brush shape, size and shade, changing the mode of combining the brush with the existing bits, or stopping paint mode.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">Clear <span class="p">[Window Menu Command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Clears the window and repositions it to the left margin of the first line of text (below the upper left corner of the window by the amount of the font ascent).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 102pt;text-indent: 0pt;text-align: justify;">Bury <span class="p">[Window Menu Command]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Puts the window on the bottom of the occlusion stack, thereby exposing any windows that it was hiding.</p><p class="s15" style="padding-top: 9pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">Redisplay <span class="p">[Window Menu Command]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Redisplays the window. (See <span class="s11">REDISPLAYW </span>in the Redisplaying Windows section in this chapter.)</p><p class="s15" style="padding-top: 9pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">Hardcopy <span class="p">[Window Menu Command]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Prints the contents of the window to the printer. If the window has a window property <span class="s11">HARDCOPYFN</span>, it is called with two arguments, the window and an image stream to print to, and the <span class="s11">HARDCOPYFN </span>must do the printing. In this way, special windows can be set up that know how to print their contents in a particular way. If the window does not have a <span class="s11">HARDCOPYFN</span>, the bitmap image of the window (including the border and title) are printed on the file or printer.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">To save the image in a Press or Interpress-format file, or to send it to a non-default printer, use the submenu of the Hardcopy command, indicated by a gray triangle on the right edge of the Hardcopy menu item. If the mouse is moved off of the right of the menu item, another pop-up menu will apear giving the choices <span class="s11">&quot;To a file&quot; </span>or <span class="s11">&quot;To a printer.&quot; </span>If <span class="s11">&quot;To a file&quot; </span>is selected, the user is prompted to supply a file name, and the format of the file (Press, Interpress, etc.), and the specified region will be stored in the file.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s11">&quot;To a printer&quot; </span>is selected, the user is prompted to select a printer from the list of known printers, or to type the name of another printer. If the printer selected is not the first printer on <span class="s11">DEFAULTPRINTINGHOST </span>(see Chapter 29), the user will be asked whether to move or add the printer to the beginning of this list, so that future printing will go to the new printer.</p><p class="s15" style="padding-top: 9pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">Move <span class="p">[Window Menu Command]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Moves the window to a location specified by pressing and then releasing the <span class="s11">LEFT </span>button. During this time a ghost frame will indicate where the window will reappear when the key is released. (See <span class="s11">GETBOXPOSITION </span>in the Interactive Display Functions section below.)</p><p class="s15" style="padding-top: 8pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">Shape <span class="p">[Window Menu Command]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Allows the user to specify a new region for the existing window contents. If the <span class="s11">LEFT </span>button is used to specify the new region, the reshaped window can be placed anywhere. If the <span class="s11">MIDDLE </span>button is used, the cursor will start out tugging at the nearest corner of the existing window, which is useful for making small adjustments in a window that is already positioned correctly. This is done by calling the function <span class="s11">SHAPEW </span>(see the Reshaping Windows section below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Occasionally, a user will have a number of large windows on the screen, making it difficult to access those windows being used. To help with the problem of screen space management, the Interlisp-D window system allows the creation of &quot;icons.&quot; An icon is a small rectangle (containing text or a</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">bitmap) which is a &quot;shrunken-down&quot; form of a particular window. Using the Shrink and Expand commands, the user can shrink windows not currently being used into icons, and quickly restore the original windows at any time.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">Shrink <span class="p">[Window Menu Command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Removes the window from the screen and brings up its icon. (See <span class="s11">SHRINKW </span>in the Shrinking Windows into Icons section in this chapter) The window can be restored by selecting Expand from the window command menu of the icon.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If the <span class="s11">RIGHT </span>button is pressed while the cursor is in an icon, the window command menu will contain a slightly different set of commands. The Redisplay and Clear commands are removed, and the Shrink command is replaced with the Expand command:</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">Expand <span class="p">[Window Menu Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Restores the window associated with this icon and removes the icon. (See <span class="s11">EXPANDW </span>in the Shrinking Windows into Icons section in this chapter.)</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the <span class="s11">RIGHT </span>button is pressed while the cursor is not in any window, a &quot;background menu&quot; appears with the following operations:</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">Idle <span class="p">[Background Menu Command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Enters &quot;idle mode&quot; (see Chapter 12), which blacks out the display screen to save the phosphor. Idle mode can be exited by pressing any key on the keyboard or mouse. This menu command has subitems that allow the user to interactively set idle options to erase the password cache (for security), to request a password before exiting idle mode, to change the timeout before idle mode is entered automatically, etc.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">SaveVM <span class="p">[Background Menu Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Calls the function <span class="s11">SAVEVM </span>(see Chapter 12), which writes out all of the dirty pages of the virtual memory. After a <span class="s11">SAVEVM</span>, and until the pagefault handler is next forced to write out a dirty page, your virtual memory image will be continuable (as of the <span class="s11">SAVEVM</span>) should you experience a system crash or other disaster.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">Snap <span class="p">[Background Menu Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The same as the window menu command Snap described above.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Hardcopy <span class="p">[Background Menu Command]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Prompts for a region on the screen, and sends the bitmap image to the printer by calling</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">HARDCOPYW <span class="p">(see Chapter 29). Note that the region can cross window boundaries.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Like the Hardcopy window menu command (above), the user can print to a file or specify a printer by using a submenu.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">PSW <span class="p">[Background Menu Command]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Prompts the user for a position on the screen, and creates a &quot;process status window&quot; that allows the user to examine and manipulate all of the existing processes (see Chapter 23).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Various system utilities (TEdit, SEdit, <span class="s11">TTYIN</span>) allow information to be &quot;copy-inserted&quot; at the current cursor position by selecting it with the &quot;copy&quot; key held down (Normally the shift keys are the &quot;copy&quot; key; this action can be changed in the key action table.) To &quot;copy- insert&quot; the bitmap of a snap into a Tedit document. If the right mouse button is pressed in the background with the copy key held down, a menu with the single item &quot;<span class="s11">SNAP</span>&quot; appears. If this item is selected, the user is prompted to select a region, and a bitmap containing the bits in that region of the screen is inserted into the current tty process, if that process is able to accept image objects.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Some built-in facilities and Lispusers packages add commands to the background menu, to provide an easy way of calling the different facilities. The user can determine what these new commands do by holding the <span class="s11">RIGHT </span>button down for a few seconds over the item in question; an explanatory message will be printed in the prompt window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Changing the Window System                                                                                                                         </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following functions provide a functional interface to the interactive window operations so that user programs can call them directly.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DOWINDOWCOM </span><span class="s16">WINDOW</span>)                                      <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WINDOW </span>is a <span class="s16">WINDOW </span>that has a <span class="s11">DOWINDOWCOMFN </span>window property, it <span class="s11">APPLY</span>s that property to <span class="s16">WINDOW</span>. Shrunken windows have a <span class="s11">DOWINDOWCOMFN </span>property that presents a window command menu that contains &quot;expand&quot; instead of &quot;shrink&quot;.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">WINDOW </span>is a <span class="s16">WINDOW </span>that doesn’t have a <span class="s11">DOWINDOWCOMFN </span>window property, it brings up the window command menu. The initial items in these menus are described above. If the user selects one of the items from the provided menu, that item is <span class="s11">APPLY</span>ed to <span class="s16">WINDOW</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WINDOW </span>is <span class="s11">NIL</span>, <span class="s11">DOBACKGROUNDCOM </span>(below) is called.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WINDOW </span>is not a <span class="s16">WINDOW </span>or <span class="s11">NIL</span>, <span class="s11">DOWINDOWCOM </span>simply returns without doing anything.</p><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DOBACKGROUNDCOM</span>)                                         <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Brings up the background menu. The initial items in this menu are described above. If the user selects one of the items from the menu, that item is <span class="s11">EVAL</span>ed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The window command menu for unshrunken windows is cached in the variable WindowMenu. To change the entries in this menu, the user should change the change the menu &quot;command lists&quot; in the variable WindowMenuCommands, and set the appropriate menu variable to a non-<span class="s11">MENU</span>, so the menu will be recreated. This provides a way of adding commands to the menu, of changing its font or of restoring the menu if it gets clobbered. The window command menus for icons and the background have similar pairs of variables, documented below. The &quot;command lists&quot; are in the format of the <span class="s11">ITEMS </span>field of a menu (see the Menu Fields section below), except as specified below.</p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: 0pt;text-align: left;">Note: Command menus are recreated using the current value of <span class="s11">MENUFONT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">WindowMenu <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">WindowMenuCommands <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The menu that is brought up in response to a right button in an unshrunken window is stored on the variable <span class="s11">WindowMenu</span>. If <span class="s11">WindowMenu </span>is set to a non-<span class="s11">MENU</span>, the menu will be recreated from the list of commands <span class="s11">WindowMenuCommands</span>. The <span class="s11">CADR </span>of each command added to <span class="s11">WindowMenuCommands </span>should be a function name that will be <span class="s11">APPLY</span>ed to the window.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">IconWindowMenu <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">IconWindowMenuCommands <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The menu that is brought up in response to a right button in a shrunken window is stored on the variable <span class="s11">IconWindowMenu</span>. If it is <span class="s11">NIL</span>, it is recreated from the list of commands <span class="s11">IconWindowMenuCommands</span>. The <span class="s11">CADR </span>of each command added a function name that will be <span class="s11">APPLY</span>ed to the window.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">BackgroundMenu <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">BackgroundMenuCommands <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The menu that is brought up in response to a right button in the background is stored on the variable <span class="s11">BackgroundMenu</span>. If it is <span class="s11">NIL</span>, it is recreated from the list of commands BackgroundMenuCommands. The <span class="s11">CADR </span>of each command added to BackgroundMenuCommands should be a form that will be <span class="s11">EVAL</span>ed.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">BackgroundCopyMenu <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">BackgroundCopyMenuCommands <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The menu that is brought up in response to a right button in the background when the copy key is down is stored on the variable <span class="s11">BackgroundCopyMenu</span>. If it is <span class="s11">NIL</span>, it is recreated from the list of commands BackgroundCopyMenuCommands. The <span class="s11">CADR </span>of each command added to <span class="s11">BackgroundCopyMenuCommands </span>should be a form that will be <span class="s11">EVAL</span>ed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Interactive Display Functions                                                                                                                           </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">The following functions can be used by programs to allow the user to interactively specify positions or regions on the display screen.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETPOSITION </span><span class="s16">WINDOW CURSOR</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Returns a <span class="s11">POSITION </span>that is specified by the user. <span class="s11">GETPOSITION </span>waits for the user to press and release the left button of the mouse and returns the cursor position at the time of release. If <span class="s16">WINDOW </span>is a <span class="s16">WINDOW</span>, the position will be in the coordinate system of <span class="s16">WINDOW</span>’s display stream. If <span class="s16">WINDOW </span>is <span class="s11">NIL</span>, the position will be in screen coordinates. If <span class="s16">CURSOR </span>is a <span class="s16">CURSOR </span>(see Chapter 30), the cursor will be changed to it while <span class="s11">GETPOSITION </span>is running. If <span class="s16">CURSOR </span>is <span class="s11">NIL</span>, the value of the system variable</p><p style="padding-top: 2pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s11">CROSSHAIRS </span>will be used as the cursor: <span><img width="20" height="20" alt="image" src="Image_103.gif"/></span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETBOXPOSITION </span><span class="s16">BOXWIDTH BOXHEIGHT ORGX ORGY WINDOW PROMPTMSG</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Allows the user to position a &quot;ghost&quot; region of size <span class="s16">BOXWIDTH </span>by <span class="s16">BOXHEIGHT </span>on the screen, and returns the <span class="s11">POSITION </span>of the lower left corner of the region. If <span class="s16">PROMPTMSG </span>is non-<span class="s11">NIL</span>, <span class="s11">GETBOXPOSITION </span>first prints it in the <span class="s11">PROMPTWINDOW</span>. <span class="s11">GETBOXPOSITION</span></p><p style="padding-top: 3pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">then changes the cursor to a box (using the global variable <span class="s11">BOXCURSOR</span>: <span><img width="16" height="16" alt="image" src="Image_104.gif"/></span>). If <span class="s16">ORGX </span>and <span class="s16">ORGY </span>are numbers, they are taken to be the original position of the region, and the cursor is moved to the nearest corner of that region. A ghost region is locked to the cursor so that if the cursor is moved, the ghost region moves with it. If <span class="s16">ORGX </span>and <span class="s16">ORGY </span>are numbers, the corner of the region formed by (<span class="s16">ORGX ORGY BOXWIDTH BOXHEIGHT</span>) that is nearest the cursor position is locked, otherwise the lower left corner is locked. The user can change to another corner by holding down the right button. With the right button down, the cursor can be moved across the screen without effect on the ghost region frame. When the right button is released, the mouse will snap to the nearest corner, which will then become locked to the cursor. (The held corner can be changed after the left or middle button is down by holding both the original button and the right button down while the cursor is moved to the desired new corner, then letting up just the right button.) When the left or middle button is pressed and released, the lower left corner of the region at the time of release is returned. If <span class="s16">WINDOW </span>is a <span class="s16">WINDOW</span>, the returned position will be in <span class="s16">WINDOW</span>’s coordinate system; otherwise it will be in screen coordinates.</p><p style="padding-top: 7pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">Example:</p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;text-align: left;">(GETBOXPOSITION 100 200 NIL NIL NIL</p><p class="s11" style="padding-left: 201pt;text-indent: 0pt;text-align: left;">&quot;Specify the position of the command area.&quot;)</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">prompts the user for a 100 wide by 200 high region and returns its lower left corner in screen coordinates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 102pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(<span class="s15">GETREGION </span><span class="s16">MINWIDTH MINHEIGHT OLDREGION NEWREGIONFN NEWREGIONFNARG</span></p><p class="s16" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">INITCORNERS<span class="s12">)                                             </span><span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Lets the user specify a new region and returns that region in screen coordinates.</p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">GETREGION <span class="p">prompts for a region by displaying a four-pronged box next to the cursor</span></p><p style="padding-top: 3pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">arrow at one corner of a &quot;ghost&quot; region: <span><img width="21" height="19" alt="image" src="Image_105.gif"/></span>. If the user presses the left button, the corner of a &quot;ghost&quot; region opposite the cursor is locked where it is. Once one corner has been fixed, the ghost region expands as the cursor moves.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">To specify a region:</p><ol id="l70"><li><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -18pt;line-height: 91%;text-align: left;">Move the ghost box so that the corner opposite the cursor is at one corner of the intended region.</p></li><li><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -18pt;text-align: left;">Press the left button.</p></li><li><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -18pt;line-height: 91%;text-align: left;">Move the cursor to the position of the opposite corner of the intended region while holding down the left button.</p></li><li><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -18pt;text-align: left;">Release the left button.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Before one corner has been fixed, one can switch the cursor to another corner of the ghost region by holding down the right button. With the right button down, the cursor changes</p><p style="padding-top: 3pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">to a &quot;forceps&quot; (<span><img width="16" height="21" alt="image" src="Image_106.gif"/></span>) and the cursor can be moved across the screen without effect on the ghost region frame. When the right button is released, the cursor will snap to the nearest corner of the ghost region.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">After one corner has been fixed, one can still switch to another corner. To change to another corner, continue to hold down the left button and hold down the right button also. With both buttons down, the cursor can be moved across the screen without effect on the ghost region frame. When the right button is released, the cursor will snap to the nearest corner, which will become the moving corner. In this way, the region may be moved all over the screen, before its size and position is finalized.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The size of the initial ghost region is controlled by the <span class="s16">MINWIDTH</span>, <span class="s16">MINHEIGHT</span>, <span class="s16">OLDREGION</span>, and <span class="s16">INITCORNERS </span>arguments.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">INITCORNERS </span>is non-<span class="s11">NIL</span>, it should be a list specifying the initial corners of a ghost region of the form (<span class="s16">BASEX BASEY OPPX OPPY</span>), where (<span class="s16">BASEX, BASEY</span>) describes the anchored corner of the box, and (<span class="s16">OPPX, OPPY</span>) describes the trackable corner (in screen coordinates). The cursor is moved to (<span class="s16">OPPX, OPPY</span>).</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">INITCORNERS </span>is <span class="s11">NIL</span>, the ghost region will be <span class="s16">MINWIDTH </span>wide and <span class="s16">MINHEIGHT </span>high. If <span class="s16">MINWIDTH </span>or <span class="s16">MINHEIGHT </span>is <span class="s11">NIL</span>, 0 is used. Thus, for a call to <span class="s11">GETREGION </span>with no arguments specified, there will be no initial ghost region. The cursor will be in the lower right corner of the region, if there is one.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">OLDREGION </span>is a region and the user presses the middle button, the corner of <span class="s16">OLDREGION </span>farthest from the cursor position is fixed and the corner nearest the cursor is locked to the cursor.</p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">MINWIDTH <span class="p">and </span>MINHEIGHT<span class="p">, if given, are the smallest </span>WIDTH <span class="p">and </span>HEIGHT <span class="p">that the returned region will have. The ghost image will not get any smaller than </span>MINWIDTH <span class="p">by </span>MINHEIGHT<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">NEWREGIONFN </span>is non-<span class="s11">NIL</span>, it will be called to determine values for the positions of the corners. This provides a way of &quot;filtering&quot; prospective regions; for instance, by restricting the region to lie on an arbitrary grid. When the user is specifying a region, the region is determined by two of its corners, one that is fixed and one that is tracking the cursor. Each time the cursor moves or a mouse button is pressed, <span class="s16">NEWREGIONFN </span>is called with three arguments: <span class="s16">FIXEDPOINT</span>, the position of the fixed corner of the prospective region; <span class="s16">MOVINGPOINT</span>, the position of the opposite corner of the prospective region; and <span class="s16">NEWREGIONFNARG</span>. <span class="s16">NEWREGIONFNARG </span>allows the caller of <span class="s11">GETREGION </span>to pass information to the <span class="s16">NEWREGIONFN</span>.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The first time a button is pressed and when the user changes the moving corner via right buttoning, <span class="s16">MOVINGPOINT </span>is <span class="s11">NIL </span>and <span class="s16">FIXEDPOINT </span>is the position the user selected for the fixed corner of the new region. In this case, the position returned by <span class="s16">NEWREGIONFN </span>will be used for the fixed corner instead of the one proposed by the user. For all other calls, <span class="s16">FIXEDPOINT </span>is the position of the fixed corner (as returned by the previous call) and</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">MOVINGPOINT <span class="p">is the new position the user selected for the opposite corner. In these cases, the value of </span>NEWREGIONFN <span class="p">is used for the opposite corner instead of the one proposed by the user. In all cases, the ghost region is drawn with the values returned by </span>NEWREGIONFN<span class="p">. </span>NEWREGIONFN <span class="p">can be a list of functions in which case they are called in order with each being passed the result of calling the previous and the value of the last one used as the point.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETBOXREGION </span><span class="s16">WIDTH HEIGHT ORGX ORGY WINDOW PROMPTMSG</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Performs the same prompting as <span class="s11">GETBOXPOSITION </span>and returns the <span class="s11">REGION </span>specified by the user instead of the <span class="s11">POSITION </span>of its lower left corner.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 102pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(<span class="s15">MOUSECONFIRM </span><span class="s16">PROMPTSTRING HELPSTRING WINDOW DON’TCLEARWINDOWFLG</span>)</p><p style="padding-left: 107pt;text-indent: 0pt;line-height: 11pt;text-align: left;">[Function]</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s11">MOUSECONFIRM </span>provides a simple way for the user to confirm or abort some action simply by using the mouse buttons. It prints the strings <span class="s16">PROMPTSTRING </span>and</p><p style="padding-top: 3pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">HELPSTRING </span>in the window <span class="s16">WINDOW</span>, changes the cursor to a &quot;little mouse&quot; cursor: <span><img width="17" height="21" alt="image" src="Image_107.gif"/></span><span class="s21"> </span>(stored in the variable <span class="s11">MOUSECONFIRMCURSOR</span>), and waits for the user to press the left button to confirm, or any other button to abort. If the left button was the last button released, returns <span class="s11">T</span>, else <span class="s11">NIL</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">PROMPTSTRING </span>is <span class="s11">NIL</span>, it is not printed out. If <span class="s16">HELPSTRING </span>is <span class="s11">NIL</span>, the string <span class="s11">&quot;Click LEFT to confirm, RIGHT to abort.&quot; </span>is used. If <span class="s16">WINDOW </span>is <span class="s11">NIL</span>, the prompt window is used.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Normally, <span class="s11">MOUSECONFIRM </span>clears <span class="s16">WINDOW </span>before returning. If <span class="s16">DON’TCLEARWINDOWFLG</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">is non-<span class="s11">NIL</span>, the window is not cleared.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Windows                                                                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A window specifies a region of the screen, a display stream, functions that get called when the window undergoes certain actions, and various other items of information. The basic model is that a window is a passive collection of bits (on the screen). On top of this basic level, the system supports many different types of windows that are linked to the data structures displayed in them and provide selection and redisplaying routines. In addition, it is possible for the user to create new types of windows by providing selection and displaying functions for them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Windows are ordered in depth from user to background. Windows in front of others obscure the latter. Operating on a window generally brings it to the top.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Windows are located at a certain position on the screen. Each window has a clipping region that confines all bits written to it to a region that allows a border around the window, and a title above it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Each window has a display stream associated with it (see Chapter 27), and either a window or its display stream can be passed interchangeably to all system functions. There are dependencies</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">between the window and its display stream that the user should not disturb. For instance, the destination bitmap of the display stream of a window must always be the screen bitmap. The <span class="s11">X </span>offset, <span class="s11">Y </span>offset, and Clipping Region fields of the display stream should not be changed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Windows can be created by the user interactively, under program control, or may be created automatically by the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Windows are in one of two states: &quot;open&quot; or &quot;closed&quot;. In an &quot;open&quot; state, a window is visible on the screen (unless it is covered by other open windows or off the edge of the screen) and accessible to mouse operations. In a &quot;closed&quot; state, a window is not visible and not accessible to mouse operations. Any attempt to print or draw on a closed window will open it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Window Properties</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The behavior of a window is controlled by a set of &quot;window properties.&quot; Some of these are used by the system. However, any arbitrary property name may be used by a user program to associate information with a window. For many applications the user will associate the structure being displayed with its window using a property. The following functions provide for reading and setting window properties:</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">WINDOWPROP </span><span class="s16">WINDOW PROP NEWVALUE</span>) <span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the previous value of <span class="s16">WINDOW</span>’s <span class="s16">PROP </span>aspect. If <span class="s16">NEWVALUE </span>is given, (even if given as <span class="s12">NIL</span>), it is stored as the new <span class="s16">PROP </span>aspect. Some aspects cannot be set by the user and will generate errors. Any <span class="s16">PROP </span>name that is not recognized is stored on a property list associated with the window.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">WINDOWADDPROP </span><span class="s16">WINDOW PROP ITEMTOADD FIRSTFLG</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s12">WINDOWADDPROP </span>adds a new item to a window property. If <span class="s16">ITEMTOADD </span>is <span class="s12">EQ </span>to an element of the <span class="s16">PROP </span>property of the window <span class="s12">WINDOW</span>, nothing is added. If the current property is not a list, it is made a list before <span class="s16">ITEMTOADD </span>added. <span class="s12">WINDOWADDPROP </span>returns the previous property. If <span class="s16">FIRSTFLG </span>is non-<span class="s12">NIL</span>, the new item goes on the front of the list; otherwise, it goes on the end of the list. If <span class="s16">FIRSTFLG </span>is non-<span class="s12">NIL </span>and <span class="s16">ITEMTOADD </span>is already on the list, it is moved to the front.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Many window properties (<span class="s16">OPENFN, CLOSEFN</span>, etc.) can be a list of functions. <span class="s12">WINDOWADDPROP </span>is useful for adding additional functions to a window property without affecting any existing functions. Note that if the order of items in a window property is important, the list can be modified using <span class="s12">WINDOWPROP</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">WINDOWDELPROP </span><span class="s16">WINDOW PROP ITEMTODELETE</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s12">WINDOWDELPROP </span>deletes <span class="s16">ITEMTODELETE </span>from the window property <span class="s16">PROP </span>of <span class="s16">WINDOW </span>and returns the previous list if <span class="s16">ITEMTODELETE </span>was an element. If <span class="s16">ITEMTODELETE </span>was not a member of window property <span class="s16">PROP</span>, NIL is returned.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Creating Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CREATEW </span><span class="s16">REGION TITLE BORDERSIZE NOOPENFLG</span>)                  <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Creates a new window. <span class="s16">REGION </span>indicates where and how large the window should be by specifying the exterior region of the window. The usable height and width of the resulting window will be smaller than the height and width of the region by twice the border size and further less the height of the title, if any. If <span class="s16">REGION </span>is <span class="s12">NIL</span>, <span class="s12">GETREGION </span>is called to prompt the user for a region.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TITLE </span>is non-<span class="s12">NIL</span>, it is printed in the border at the top of the window. The <span class="s16">TITLE </span>is printed using the global display stream <span class="s12">WindowTitleDisplayStream</span>. Thus the height of the title will be <span class="s12">(FONTPROP WindowTitleDisplayStream ’HEIGHT)</span>.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">BORDERSIZE </span>is a number, it is used as the border size. If <span class="s16">BORDERSIZE </span>is not a number, the window will have a border <span class="s12">WBorder </span>(initially 4) bits wide.</p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 19pt;text-align: justify;">If <span class="s16">NOOPENFLG </span>is non-<span class="s12">NIL</span>, the window will not be opened, i.e. displayed on the screen. The initial <span class="s12">X </span>and <span class="s12">Y </span>positions of the window are set to the upper left corner by calling</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">MOVETOUPPERLEFT <span class="p">(see Chapter 27).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">(<span class="s15">DECODE.WINDOW.ARG </span><span class="s16">WHERESPEC WIDTH HEIGHT TITLE BORDER NOOPENFLG</span>)</p><p style="padding-left: 107pt;text-indent: 0pt;line-height: 11pt;text-align: left;">[Function]</p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">This is a useful function for creating windows. <span class="s16">WHERESPEC </span>can be a <span class="s12">WINDOW</span>, a <span class="s12">REGION</span>, a <span class="s12">POSITION </span>or <span class="s12">NIL</span>. If <span class="s16">WHERESPEC </span>is a <span class="s12">WINDOW</span>, it is returned. In all other cases, <span class="s12">CREATEW </span>is called with the arguments <span class="s16">TITLE BORDER </span>and <span class="s16">NOOPENFLG</span>. The <span class="s12">REGION </span>argument to <span class="s12">CREATEW </span>is determined from <span class="s16">WHERESPEC </span>as follows:</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WHERESPEC </span>is a <span class="s12">REGION</span>, it is adjusted to be on the screen, then passed to <span class="s12">CREATEW</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WIDTH </span>and <span class="s16">HEIGHT </span>are numbers and <span class="s16">WHERESPEC </span>is a <span class="s12">POSITION</span>, the region whose lower left corner is <span class="s16">WHERESPEC</span>, whose width is <span class="s16">WIDTH </span>and whose height is <span class="s16">HEIGHT </span>is adjusted to be on the screen, then passed to <span class="s12">CREATEW</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WIDTH </span>and <span class="s16">HEIGHT </span>are numbers and <span class="s16">WHERESPEC </span>is not a <span class="s12">POSITION</span>, then <span class="s12">GETBOXREGION </span>is called to prompt the user for the position of a region that is <span class="s12">WIDTH </span>by <span class="s16">HEIGHT</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 162%;text-align: justify;">If <span class="s16">WIDTH </span>and <span class="s16">HEIGHT </span>are not numbers, <span class="s12">CREATEW </span>is given <span class="s12">NIL </span>as a <span class="s12">REGION </span>argument. If <span class="s16">WIDTH </span>and <span class="s16">HEIGHT </span>are used, they are used as interior dimensions for the <span class="s5">window.</span></p><p class="s12" style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">WINDOWP </span><span class="s16">X</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">X </span>if <span class="s16">X </span>is a window, <span class="s12">NIL </span>otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Opening and Closing Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">OPENWP </span><span class="s16">WINDOW</span>)                                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">WINDOW</span>, if <span class="s16">WINDOW </span>is an open window (has not been closed); <span class="s12">NIL </span>otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">OPENWINDOWS</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns a list of all open windows.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">OPENW </span><span class="s16">WINDOW</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WINDOW </span>is a closed window, <span class="s12">OPENW </span>calls the function or functions on the window property <span class="s12">OPENFN </span>of <span class="s16">WINDOW</span>, if any. If one of the <span class="s12">OPENFN</span>s is the atom <span class="s12">DON’T</span>, the window will not be opened. Otherwise the window is placed on the occlusion stack of windows and its contents displayed on the screen. If <span class="s16">WINDOW </span>is an open window, it returns <span class="s12">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">CLOSEW </span><span class="s16">WINDOW</span>) <span class="s5">[Function]</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s12">CLOSEW </span><span class="s5">calls the function or functions on </span>the window property <span class="s12">CLOSEFN </span>of <span class="s16">WINDOW</span>, if any. If one of the <span class="s12">CLOSEFN</span>s is the atom <span class="s12">DON’T </span>or returns the atom <span class="s12">DON’T </span>as a value, <span class="s12">CLOSEW </span>returns without doing anything further. Otherwise, <span class="s12">CLOSEW </span>removes <span class="s16">WINDOW </span>from the window stack and restores the bits it is obscuring. If <span class="s16">WINDOW </span>was closed, <span class="s16">WINDOW </span>is returned as the value. If it was not closed, (for example because its <span class="s12">CLOSEFN </span>returned the atom <span class="s12">DON’T</span>), <span class="s12">NIL </span>is returned as the value.</p><p class="s16" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">WINDOW <span class="p">can be restored in the same place with the same contents (reopened) by calling</span></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">OPENW <span class="p">or by using it as the source of a display operation.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">OPENFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The <span class="s12">OPENFN </span>window property can be a single function or a list of functions. If one of the <span class="s12">OPENFN</span>s is the atom <span class="s12">DON’T</span>, the window will not be opened. Otherwise, the <span class="s12">OPENFN</span>s are called after a window has been opened by <span class="s12">OPENW</span>, with the window as a single argument.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">CLOSEFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The <span class="s12">CLOSEFN </span>window property can be a single function or a list of functions that are called just before a window is closed by <span class="s12">CLOSEW</span>. The function(s) will be called with the window as a single argument. If any of the <span class="s12">CLOSEFN</span>s are the atom <span class="s12">DON’T</span>, or if the value returned by any of the <span class="s12">CLOSEFN</span>s is the atom <span class="s12">DON’T</span>, the window will not be closed.</p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -30pt;text-align: left;">Note: If the <span class="s12">CAR </span>of the <span class="s12">CLOSEFN </span>list is a <span class="s12">LAMBDA </span>word, it is treated as a single function.</p><p style="padding-top: 6pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">Note: A <span class="s12">CLOSEFN </span>should not call <span class="s12">CLOSEW </span>on its argument.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Redisplaying Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">REDISPLAYW </span><span class="s16">WINDOW REGION ALWAYSFLG</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Redisplay the region <span class="s16">REGION </span>of the window <span class="s16">WINDOW</span>. If <span class="s16">REGION </span>is <span class="s12">NIL</span>, the entire window is redisplayed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WINDOW </span>doesn’t have a <span class="s12">REPAINTFN</span>, the action depends on the value of <span class="s16">ALWAYSFLG</span>. If <span class="s16">ALWAYSFLG </span>is <span class="s12">NIL</span>, <span class="s16">WINDOW </span>will not change and the message <span class="s12">&quot;Window has no REPAINTFN. Can’t redisplay.&quot; </span>will be printed in the prompt window. If <span class="s16">ALWAYSFLG </span>is non-<span class="s12">NIL</span>, <span class="s12">REDISPLAYW </span>acts as if REPAINTFN was <span class="s12">NILL</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">REPAINTFN                                               <span class="p">[Window  Property]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s12">REPAINTFN </span>window property can be a single function or a list of functions that are called to repaint parts of the window by <span class="s12">REDISPLAYW</span>. The <span class="s12">REPAINTFN</span>s are called with two arguments: the window and the region in the coordinates of the window’s display stream of the area that should be repainted. Before the <span class="s12">REPAINTFN </span>is called, the clipping region of the window is set to clip all display operations to the area of interest so that the <span class="s12">REPAINTFN </span>can display the entire window contents and the results will be appropriately clipped.</p><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -30pt;text-align: justify;">Note: <span class="s12">CLEARW </span>(see the Miscellaneous Window Functions section below) should not be used in <span class="s12">REPAINTFN</span>s because it resets the window’s coordinate system. If a <span class="s12">REPAINTFN </span>wants to clear its region first, it should use <span class="s12">DSPFILL </span>(see Chapter 27).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Reshaping Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SHAPEW </span><span class="s16">WINDOW NEWREGION</span>)                                  <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Reshapes <span class="s16">WINDOW</span>. If the window property <span class="s16">RESHAPEFN </span>is the atom <span class="s12">DON’T </span>or a list that contains the atom <span class="s12">DON’T</span>, a message is printed in the prompt window, <span class="s16">WINDOW </span>is not changed, and <span class="s12">NIL </span>is returned. Otherwise, <span class="s12">RESHAPEFN </span>window property can be a single function or a list of functions that are called when a window is reshaped, to reformat or redisplay the window contents (see below). If the <span class="s12">RESHAPEFN </span>window property is <span class="s12">NIL</span>, <span class="s12">RESHAPEBYREPAINTFN </span>is the default.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If the region <span class="s16">NEWREGION </span>is <span class="s12">NIL</span>, it prompts for a region with <span class="s12">GETREGION</span>. When calling <span class="s12">GETREGION</span>, the function <span class="s12">MINIMUMWINDOWSIZE </span>is called to determine the minimum height and width of the window, the function <span class="s12">WINDOWREGION </span>is called to get the region passed as the <span class="s12">OLDREGION </span>argument, the window property <span class="s12">NEWREGIONFN </span>is used as the <span class="s12">NEWREGIONFN </span>argument and <span class="s16">WINDOW </span>as the <span class="s12">NEWREGIONFNARG </span>argument. If the window property <span class="s12">INITCORNERSFN </span>is non-<span class="s12">NIL</span>, it is applied to the window, and the value is passed as the <span class="s12">INITCORNERS </span>argument to <span class="s12">GETREGION</span>, to determine the initial size of the &quot;ghost region.&quot; These window properties allow the window to specify the regions used for interactive calls to <span class="s12">SHAPEW</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If the region <span class="s16">NEWREGION </span>is a <span class="s12">REGION </span>and its <span class="s12">WIDTH </span>or <span class="s12">HEIGHT </span>less than the minimums returned by calling the function <span class="s12">MINIMUMWINDOWSIZE</span>, they will be increased to the minimums.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WINDOW </span>has a window property <span class="s12">DOSHAPEFN</span>, it is called, passing it <span class="s16">WINDOW </span>and <span class="s12">NEWREGION </span>(or  the  region  returned  by  <span class="s12">GETREGION</span>).  If  <span class="s16">WINDOW </span>does  not  have  a <span class="s12">DOSHAPEFN </span>window property, the function <span class="s12">SHAPEW1 </span>is called to reshape the window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">DOSHAPEFN<span class="p">s are provided to implement window groups and few users should ever write them. They are tricky to write and must call </span>SHAPEW1 <span class="p">eventually. The </span>RESHAPEFN <span class="p">window property is a simpler hook into reshape operations.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SHAPEW1 </span><span class="s16">WINDOW REGION</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Changes <span class="s16">WINDOW</span>’s size and position on the screen to be <span class="s16">REGION</span>. After clearing the region on the screen, it calls the window’s <span class="s12">RESHAPEFN</span>, if any, passing it three arguments: <span class="s16">WINDOW</span>; a bitmap that contains <span class="s16">WINDOW</span>’s previous screen image; and the region of <span class="s16">WINDOW</span>’s old image within the bitmap.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">RESHAPEFN <span class="p">[Window Property]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The <span class="s12">RESHAPEFN </span>window property can be a single function or a list of functions that are called when a window is reshaped by <span class="s12">SHAPEW</span>. If the <span class="s12">RESHAPEFN </span>is <span class="s12">DON’T </span>or a list containing <span class="s12">DON’T</span>, the window will not be reshaped. Otherwise, the function(s) are called after the window has been reshaped, its coordinate system readjusted to the new position, the title and border displayed, and the interior filled with texture. The <span class="s12">RESHAPEFN </span>should display any additional information needed to complete the window’s image in the new position and shape. The <span class="s12">RESHAPEFN </span>is called with four arguments: (1) the window in its reshaped form, (2) a bitmap with the image of the old window in its old shape, and (3) the region within the bitmap that contains the window’s old image, and (4) the region of the screen previously occupied by this window. This function  is  provided  so  that  users  can  reformat  window  contents  or  whatever. <span class="s12">RESHAPEBYREPAINTFN </span>(below) is the default and should be useful for many windows.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">NEWREGIONFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s12">SHAPEW </span>calls <span class="s12">GETREGION </span>to prompt the user for a region, the value of the <span class="s12">NEWREGIONFN </span>window property is passed as the <span class="s12">NEWREGIONFN </span>argument to <span class="s12">GETREGION</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">INITCORNERSFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If this window property is non-<span class="s12">NIL</span>, it should be a function of one argument, a window, that returns a list specifying the initial corners of a &quot;ghost region&quot; of the form (<span class="s12">BASEX BASEY OPPX OPPY)</span>, where (<span class="s12">BASEX, BASEY) </span>describes the anchored corner of the box, and <span class="s12">(OPPX, OPPY) </span>describes the trackable corner. If <span class="s12">SHAPEW </span>calls <span class="s12">GETREGION </span>to prompt the user for a region, this function is applied to the window, and the list returned is passed as the <span class="s12">INITCORNERS </span>argument to <span class="s12">GETREGION</span>, to specify the initial ghost region.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">DOSHAPEFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If this window property is non-<span class="s12">NIL</span>, it is called by <span class="s12">SHAPEW </span>to reshape the window (instead of <span class="s12">SHAPEW1</span>).  It is called with two arguments: the window and the new region.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(<span class="s15">RESHAPEBYREPAINTFN </span><span class="s16">WINDOW OLDIMAGE IMAGEREGION OLDSCREENREGION</span>)</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 11pt;text-align: left;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">This the default window <span class="s12">RESHAPEFN</span>. <span class="s16">WINDOW </span>is a window that has been reshaped from the screen region <span class="s16">OLDSCREENREGION </span>to its new region (available via <span class="s12">(WINDOWPROP WINDOW ’REGION)</span>). <span class="s16">OLDIMAGE </span>is a bitmap that contains the image of the window from its previous location. <span class="s16">IMAGEREGION </span>is the region within <span class="s16">OLDIMAGE </span>that contains the old image.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s12">RESHAPEBYREPAINTFN BITBLT</span>s the old region contents into the new region. If the new shape is larger in either or both dimensions, the newly exposed areas are redisplayed via calls <span class="s16">WINDOW</span>’s <span class="s12">REPAINTFN </span>window property. <span class="s12">RESHAPEBYREPAINTFN </span>may call the <span class="s12">REPAINTFN </span>up to four times during a single reshape.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The choice of which areas of the window to remove or extend is done as follows. If <span class="s16">WINDOW</span>’s new region shares an edge with <span class="s12">OLDSCREENREGION</span>, that edge of the window image will remain fixed and any addition or reduction in that dimension will be performed on the opposite side. If <span class="s16">WINDOW </span>has an <span class="s12">EXTENT </span>property and the newly exposed window area is outside of it, any extra will be added so as to show <span class="s12">EXTENT </span>that was previously not visible. An exception to these rules is that the current <span class="s12">X</span>,<span class="s12">Y </span>position is kept visible, if it was visible before the reshape.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Moving Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MOVEW </span><span class="s16">WINDOW POSorX Y</span>)                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Moves <span class="s16">WINDOW </span>to the position specified by <span class="s16">POSorX </span>and <span class="s16">Y </span>according to the following rules:</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">POSorX </span>is <span class="s12">NIL</span>, <span class="s12">GETBOXPOSITION </span>is called to read a position from the user. If <span class="s16">WINDOW </span>has a <span class="s12">CALCULATEREGION </span>window property, it will be called with <span class="s16">WINDOW </span>as an argument and should return a region which will be used to prompt the user with. If <span class="s16">WINDOW </span>does not have a <span class="s12">CALCULATEREGION </span>window property, the region of <span class="s16">WINDOW </span>is used to prompt with.</p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">POSorX </span>is a <span class="s12">POSITION</span>, <span class="s16">POSorX </span>is used.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">If <span class="s16">POSorX </span>and <span class="s16">Y </span>are both <span class="s12">NUMBERP</span>, a position is created using <span class="s16">POSorX </span>as the <span class="s12">XCOORD</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">and <span class="s16">Y </span>as the <span class="s12">YCOORD</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">If <span class="s16">POSorX </span>is a <span class="s12">REGION</span>, a position is created using its <span class="s12">LEFT </span>as the <span class="s12">XCOORD </span>and <span class="s12">BOTTOM</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">as the <span class="s12">YCOORD</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WINDOW </span>is not open and <span class="s16">POSorX </span>is non-<span class="s12">NIL</span>, the window will be moved without being opened. Otherwise, it will be opened.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WINDOW </span>has the atom <span class="s12">DON’T </span>as a <span class="s12">MOVEFN </span>window property, the window will not be moved. If <span class="s16">WINDOW </span>has any other non-<span class="s12">NIL </span>value as a <span class="s12">MOVEFN </span>property, it should be a function or list of functions that will be called before the window is moved with the <span class="s16">WINDOW </span>and the new positon as its arguments. If it returns the atom <span class="s12">DON’T</span>, the window will not be moved. If it returns a position, the window will be moved to that position</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">instead of the new one. If there are more than one <span class="s12">MOVEFN</span>s, the last one to return a value is the one that determines where the window is moved to.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WINDOW </span>is moved and <span class="s16">WINDOW </span>has an <span class="s12">AFTERMOVEFN </span>window property, it should be a function or a list of functions that will be called after the window is moved with <span class="s16">WINDOW </span>as an argument.</p><p class="s12" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">MOVEW <span class="p">returns the new position, or </span>NIL <span class="p">if the window could not be moved.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Note: If <span class="s12">MOVEW </span>moves any part of the window from off-screen onto the screen, that part is redisplayed (by calling <span class="s12">REDISPLAYW</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">RELMOVEW </span><span class="s16">WINDOW POSITION</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Like <span class="s12">MOVEW </span>for moving windows but the <span class="s16">POSITION </span>is interpreted relative to the current position of <span class="s16">WINDOW</span>. Example: The following code moves <span class="s16">WINDOW </span>to the right one screen point.</p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(RELMOVEW <span class="s16">WINDOW </span>(create POSITION XCOORD <span class="s4"></span><span class="s5"> </span>1 YCOORD</p><p class="s4" style="padding-left: 125pt;text-indent: 0pt;text-align: left;"><span class="s5"> </span><span class="s12">0))</span></p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">CALCULATEREGION <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s12">MOVEW </span>calls <span class="s12">GETBOXPOSITION </span>to prompt the user for a region, the <span class="s12">CALCULATEREGION </span>window property is called (passing the window as an argument. The <span class="s12">CALCULATEREGION </span>should returns a region to be used to prompt the user with. If <span class="s12">CALCULATEREGION </span>is <span class="s12">NIL</span>, the region of the window is used to prompt with.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">MOVEFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If the <span class="s12">MOVEFN </span>is <span class="s12">DON’T</span>, the window will not be moved by <span class="s12">MOVEW</span>. Otherwise, if the <span class="s12">MOVEFN </span>is non-<span class="s12">NIL</span>, it should be a function or a list of functions that will be called before a window is moved with two arguments: the window being moved and the new position of the lower left corner in screen coordinates. If the <span class="s12">MOVEFN </span>returns <span class="s12">DON’T</span>, the window will not be moved. If the <span class="s12">MOVEFN </span>returns a <span class="s12">POSITION</span>, the window will be moved to that position.  Otherwise, the window will be moved to the specified new position.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">AFTERMOVEFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If non-<span class="s12">NIL</span>, it should be a function or a list of functions that will be called after the window is moved (by <span class="s12">MOVEW</span>) with the window as an argument.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Exposing and Burying Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: justify;">(<span class="s15">TOTOPW </span><span class="s16">WINDOW NOCALLTOTOPFNFLG</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Brings <span class="s16">WINDOW </span>to the top of the stack of overlapping windows, guaranteeing that it is entirely visible. If <span class="s16">WINDOW </span>is closed, it is opened. This is done automatically whenever a printing or drawing operation occurs to the window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s12">NOCALLTOTOPFNFLG </span>is <span class="s12">NIL</span>, the <span class="s12">TOTOPFN </span>of <span class="s16">WINDOW </span>is called. If <span class="s16">NOCALLTOTOPFNFLG </span>is <span class="s12">T</span>, it is not called, which allows a <span class="s12">TOTOPFN </span>to call <span class="s12">TOTOPW </span>without causing an infinite loop.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">BURYW </span><span class="s16">WINDOW</span>)                                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Puts <span class="s16">WINDOW </span>on the bottom of the stack by moving all the windows that it covers in front of it.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TOTOPFN                                                 <span class="p">[Window  Property]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If non-<span class="s12">NIL</span>, whenever the window is brought to the top, the <span class="s12">TOTOPFN </span>is called (with the window as a single argument). This function may be used to bring a collection of windows to the top together.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If the <span class="s12">NOCALLTOPWFN </span>argument of <span class="s12">TOTOPW </span>is non-<span class="s12">NIL</span>, the <span class="s12">TOTOPFN </span>of the window is not called, which provides a way of avoiding infinite loops when using <span class="s12">TOTOPW </span>from within a <span class="s12">TOTOPFN</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Shrinking Windows Into Icons</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Occasionally, a user will have a number of large windows on the screen, making it difficult to access those windows being used. To help with the problem of screen space management, the Interlisp-D window system allows the creation of Icons. An icon is a small rectangle (containing text or a bitmap) which is a &quot;shrunken-down&quot; form of a particular window. Using the Shrink and Expand window menu commands (see the beginning of this chapter), the user can shrink windows not currently being used into icons, and quickly restore the original windows at any time. This facility is controlled by the following functions and window properties:</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SHRINKW </span><span class="s16">WINDOW TOWHAT ICONPOSITION EXPANDFN</span>)                <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s12">SHRINKW </span>makes a small icon which represents <span class="s16">WINDOW </span>and removes <span class="s16">WINDOW </span>from the screen. Icons have a different window command menu that contains &quot;<span class="s12">EXPAND</span>&quot; instead of &quot;<span class="s12">SHRINK</span>&quot;. The <span class="s12">EXPAND </span>command calls <span class="s12">EXPANDW </span>which returns the shrunken window to its original size and place. The icon can also be moved by pressing the <span class="s12">LEFT </span>button in it, or expanded by pressing the <span class="s12">MIDDLE </span>button in it.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The <span class="s12">SHRINKFN </span>property of the window <span class="s16">WINDOW </span>affects the operation of <span class="s12">SHRINKW</span>. If the <span class="s12">SHRINKFN </span>property of <span class="s16">WINDOW </span>is the atom <span class="s12">DON’T</span>, <span class="s12">SHRINKW </span>returns. Otherwise, the <span class="s12">SHRINKFN </span>property of the window is treated as a (list of) function(s) to apply to <span class="s16">WINDOW</span>; if any returns the atom <span class="s12">DON’T</span>, <span class="s12">SHRINKW </span>returns.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">TOWHAT</span>, if given, indicates the image the icon window will have. If <span class="s16">TOWHAT </span>is a string, atom or list, the icon’s image will be that string (currently implemented as a title-only window with <span class="s16">TOWHAT </span>as the title.) If <span class="s16">TOWHAT </span>is a <span class="s12">BITMAP</span>, the icon’s image will be a copy of the bitmap.  If <span class="s16">TOWHAT </span>is a <span class="s16">WINDOW</span>, that window will be used as the icon.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TOWHAT </span>is not given (as is the case when invoked from the <span class="s12">SHRINK </span>window command), then the following apply in turn:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l71"><li><p style="padding-left: 131pt;text-indent: -18pt;text-align: justify;">If the window has an <span class="s12">ICONFN </span>property, it gets called with the two arguments <span class="s16">WINDOW </span>and <span class="s12">OLDICON</span>, where <span class="s16">WINDOW </span>is the window being shrunk and <span class="s12">OLDICON </span>is the previously created icon, if any. The <span class="s12">ICONFN </span>should return one of the <span class="s16">TOWHAT </span>entities described above or return the <span class="s12">OLDICON </span>if it does not want to change it.</p></li><li><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -18pt;line-height: 12pt;text-align: left;">If the window has an <span class="s12">ICON </span>property, it is used as the value of</p><p class="s16" style="padding-left: 131pt;text-indent: 0pt;line-height: 12pt;text-align: left;">TOWHAT<span class="p">.</span></p></li><li><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -18pt;text-align: justify;">If the window has neither an <span class="s12">ICONFN </span>or <span class="s12">ICON </span>property, the icon will be <span class="s16">WINDOW</span>’s title or, if <span class="s16">WINDOW </span>doesn’t have a title, the date and time of the icon creation.</p></li></ol><p class="s12" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">ICONPOSITION <span class="p">gives the position that the new icon will be on the screen. If it is </span>NIL<span class="p">, the icon will be in the corner of the window furthest from the center of the screen.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">In all but the default case, the icon is cached on the property <span class="s12">ICONWINDOW </span>of <span class="s16">WINDOW </span>so repeating <span class="s12">SHRINKW </span>reuses the same icon (unless overridden by the <span class="s12">ICONFN </span>described above). Thus to change the icon it is necessary to remove the <span class="s12">ICONWINDOW </span>property or call <span class="s12">SHRINKW </span>explicitly giving a <span class="s16">TOWHAT </span>argument.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">EXPANDW </span><span class="s16">ICONW</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Restores the window for which <span class="s16">ICONW </span>is an icon, and removes the icon from the screen. If the <span class="s12">EXPANDFN </span>window property of the main window is the atom <span class="s12">DON’T</span>, the window won’t be expanded. Otherwise, the window will be restored to its original size and location and the <span class="s12">EXPANDFN </span>(or list of functions) will be applied to it.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">SHRINKFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The <span class="s12">SHRINKFN </span>window property can be a single function or a list of functions that are called just before a window is shrunken by <span class="s12">SHRINKW</span>, with the window as a single argument. If any of the <span class="s12">SHRINKFN</span>s are the atom <span class="s12">DON’T</span>, or if the value returned by any of the <span class="s12">SHRINKFN</span>s is the atom <span class="s12">DON’T</span>, the window will not be shrunk.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">EXPANDREGIONFN <span class="p">[Window property]</span></p><p class="s12" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">EXPANDREGIONFN<span class="p">, if non-</span>NIL<span class="p">, should be the function to be called (with the window as its argument) before the window is actually expanded.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The <span class="s12">EXPANDREGIONFN </span>must return <span class="s12">NIL </span>or a valid region, and must not do any window operations (e.g., redisplaying). If NIL is returned, the window is expanded normally, as if the <span class="s12">EXPANDREGIONFN </span>had not existed. The region returned specifies the new region for the main window only, not for the group including any of its attached windows. The window will be opened in its new shape, and any attached windows will be repositioned or rejustified appropriately. The main window must have a <span class="s12">REPAINTFN </span>which can repaint the entire window under these conditions.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">As with expanding windows normally, the <span class="s12">OPENFN </span>for the main window is not called.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Also, the window is reshaped without checking for a special shape function (e.g., a</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">DOSHAPEFN<span class="p">).</span></p><p class="s15" style="padding-top: 9pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">ICONFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s12">SHRINKW </span>is called without begin given a <span class="s12">TOWHAT </span>argument (as is the case when invoked from the <span class="s12">SHRINK </span>window command) and the window’s <span class="s12">ICONFN </span>property is non-<span class="s12">NIL</span>, then it gets called with two arguments, the window being shrunk and the previously created icon, if any. The <span class="s12">ICONFN </span>should return one of the <span class="s12">TOWHAT </span>entities described above or return the previously created icon if it does not want to change it.</p><p class="s15" style="padding-top: 9pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">ICON <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s12">SHRINKW </span>is called without being given a <span class="s12">TOWHAT </span>argument, the window’s <span class="s12">ICONFN </span>property is <span class="s12">NIL</span>, and the <span class="s12">ICON </span>property is non-<span class="s12">NIL</span>, then it is used as the value of <span class="s12">TOWHAT</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">ICONWINDOW <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Whenever an icon is created, it is cached on the property <span class="s12">ICONWINDOW </span>of the window, so calling <span class="s12">SHRINKW </span>again will reuse the same icon (unless overridden by the <span class="s12">ICONFN</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Thus, to change the icon it is necessary to remove the <span class="s12">ICONWINDOW </span>property or call</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">SHRINKW <span class="p">explicitly giving a </span>TOWHAT <span class="p">argument.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 101pt;text-indent: 0pt;text-align: justify;">DEFAULTICONFN <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Changes how an icon is created when a window having no <span class="s12">ICONFN </span>is shrunk or when <span class="s12">SHRINKW</span>, with a <span class="s12">TOWHAT </span>argument of a string, is called. The value of <span class="s12">DEFAULTICONFN </span>is a function of two arguments (window text); text is either <span class="s12">NIL </span>or a string. <span class="s12">DEFAULTICONFN </span>returns an icon window.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The initial value of <span class="s12">DEFAULTICONFN </span>is <span class="s12">MAKETITLEBARICON</span>. It creates a window that is a title bar only; the title is either the text argument, the window’s title, or &quot;Icon made &lt;date&gt;&quot; for titleless windows. <span class="s12">MAKETITLEBARICON </span>places the title bar at some corner of the main window.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">An alternative behavior is available by setting <span class="s12">DEFAULTICONFN </span>to be <span class="s12">TEXTICON</span>. <span class="s12">TEXTICON </span>creates a titled icon window from the text or window’s title.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">You can now copy-select titled icons such as those used by FileBrowser, SEdit, TEdit, Sketch. The default behavior is that the icon’s title is unread (via <span class="s12">BKSYSBUF</span>), but if the icon window has a <span class="s12">COPYFN </span>property, that gets called instead, with the icon window as its argument. For example, if the name displayed in an icon is really a symbol, and you want copy selection to cause the name to be unread correctly with respect to the package and read table of the exec you are copying into, you could put the following <span class="s12">COPYFN </span>property on the icon window:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 8pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">(LAMBDA (WINDOW)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">(IL:BKSYSBUF &lt;fetch symbolic name from window&gt; T ))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">EXPANDFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The <span class="s12">EXPANDFN </span>window property can be a single function or a list of functions. If one of the <span class="s12">EXPANDFN</span>s is the atom <span class="s12">DON’T</span>, the window will not be expanded. Otherwise, the <span class="s12">EXPANDFN</span>s are called after the window has been expanded by <span class="s12">EXPANDW</span>, with the window as a single argument.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 4pt;text-indent: 0pt;text-align: center;">Creating Icons with ICONW                                                                                                                              </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">ICONW <span class="p">is a group of functions available for building small windows of arbitrary shape. These windows are principally for use as icons for shrinking windows; i.e., these functions are likely to be invoked from within the </span>ICONFN <span class="p">of a window. An icon is specified by supplying its image (a bitmap) and a mask that specifies its shape. The mask is a bitmap of the same dimensions as the image whose bits are on (black) in those positions considered to be in the image, and off (white) in those positions where the background should show through. By using the mask and appropriate window functions, </span>ICONW <span class="p">maintains the illusion that the icon window is nonrectangular, even though the actual window itself is rectangular. The illusion is not complete, of course. For example, if you try to select what looks like the background (or an occluded window) around the icon but still within its rectangular perimeter, the icon window itself is selected. Also, if you move a window occluded by an icon, the icon never notices that the background changed behind it. Icons created with </span>ICONW <span class="p">can also have titles; some part of the image can be filled with text computed at the time the icon is created, or text may be changed after creation.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Creating Icons</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Two types of icons can be created with <span class="s12">ICONW</span>, a borderless window containing an image defined by a mask and a window with a title.</p><p style="padding-top: 8pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">(<span class="s15">ICONW </span><span class="s16">IMAGE MASK POSITION NOOPENFLG</span>)                                                                 [Function]</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Creates a window at <span class="s16">POSITION</span>, or prompts for a position if <span class="s16">POSITION </span>is <span class="s12">NIL</span>. The window is borderless, and filled with <span class="s16">IMAGE</span>, as cookie-cut by <span class="s16">MASK</span>. If <span class="s16">MASK </span>is <span class="s12">NIL</span>, the image is considered rectangular (i.e., <span class="s16">MASK </span>defaults to a black bitmap of the same dimensions as <span class="s16">IMAGE</span>). If <span class="s16">NOOPENFLG </span>is <span class="s12">T</span>, the window is returned unopened.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 59pt;text-indent: -6pt;line-height: 88%;text-align: left;">(<span class="s15">TITLEDICONW </span><span class="s16">ICON TITLE FONT POSITION NOOPENFLG JUST BREAKCHARS OPERATION</span>)</p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">Creates a titled icon at <span class="s16">POSITION</span>, or prompts for a position if <span class="s16">POSITION </span>is <span class="s12">NIL</span>. If <span class="s16">NOOPENFLG </span>is <span class="s12">T</span>, the window is returned unopened. The argument <span class="s16">ICON </span>is an instance of the record <span class="s12">TITLEDICON</span>, which specifies the icon image and mask, as with <span class="s12">ICONW</span>, and a region within the image to be used for displaying the title. Thus, the <span class="s16">ICON </span>argument is usually of the form</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">(create <span class="s12">TITLEDICON ICON </span><span class="s19"></span><span class="s21"> </span>someIconImage</p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">MASK <span class="s19"></span><span class="s21"> </span><span class="p">iconMask </span>TITLEREG <span class="s19"></span><span class="s21"> </span><span class="p">someRegionWithinICON)</span></p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The title region is specified in coordinates relative to the icon, i.e., the lower-left corner of the image bitmap is (0, 0). The mask can be <span class="s12">NIL </span>if the icon is rectangular. The image should be white where it is covered by the title region. <span class="s12">TITLEDICONW </span>clears the region before printing on it. The title is printed into the specified region in the image, using <span class="s16">FONT</span>. If <span class="s16">FONT </span>is <span class="s12">NIL </span>it defaults to the value of <span class="s12">DEFAULTICONFONT</span>, initially Helvetica</p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;">10. The title is broken into multiple lines if necessary; <span class="s12">TITLEDICONW </span>attempts to place the breaks at characters that are in the list of character codes <span class="s16">BREAKCHARS</span>. <span class="s16">BREAKCHARS </span>defaults to (CHARCODE (SPACE ÿ )). In addition, line breaks are forced by any carriage returns in <span class="s16">TITLE</span>, independent of <span class="s16">BREAKCHARS</span>. <span class="s16">BREAKCHARS </span>is ignored if a long title would not otherwise fit in the specified region. For convenience, <span class="s16">BREAKCHARS </span>= FILE means the title is a file name, so break at file name field delimiters. The argument <span class="s16">JUST </span>indicates how the text should be justified relative to the region. It is an atom or list of atoms chosen from <span class="s16">TOP, BOTTOM, LEFT</span>, or <span class="s16">RIGHT</span>, which indicate the vertical positioning (flush to top or bottom) and / or horizontal positioning (flush to left edge or right). If <span class="s16">JUST </span>= <span class="s12">NIL</span>, the text is centered. The argument <span class="s16">OPERATION </span>is a display stream operation indicating how the title should be printed. If <span class="s16">OPERATION </span>is <span class="s12">INVERT</span>, then the title is printed white-on-black. The default <span class="s16">OPERATION </span>is <span class="s12">REPLACE</span>, meaning black-on- white. <span class="s12">ERASE </span>is the same as <span class="s12">INVERT</span>; <span class="s12">PAINT </span>is the same as <span class="s12">REPLACE</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">For convenience, <span class="s12">TITLEDICONW </span>can also be used to create icons that consist solely of a title, with no special image. If the argument <span class="s16">ICON </span>is <span class="s12">NIL</span>, <span class="s12">TITLEDICONW </span>creates a rectangular icon large enough to contain <span class="s16">TITLE</span>, with a border the same width as that on a regular window. The remaining arguments are as described above, except that a <span class="s16">JUST </span>of <span class="s16">TOP </span>or <span class="s16">BOTTOM </span>is not meaningful.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">In the Medley release, <span class="s12">TITLEDICONW </span>can create icons with white text on a black background. To get this effect, your icon image must be black in the correct area, and you must specify the <span class="s16">OPERATION </span>argument as <span class="s12">INVERT</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">In Medley, you can copy- select the title of an icon.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Modifying Icons</p><p style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ICONW.TITLE </span><span class="s16">ICON TITLE</span>)                                                                                                [Function]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the current title of the window <span class="s16">ICON</span>, which must be a window returned by <span class="s12">TITLEDICONW</span>. In addition, if <span class="s16">TITLE </span>is non-<span class="s12">NIL</span>, makes <span class="s16">TITLE </span>the new title of the window and repaints it accordingly. To erase the current title, make <span class="s16">TITLE </span>a null string.</p><p style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">(<span class="s15">ICONW.SHADE </span><span class="s16">WINDOW SHADE</span>) [Function]</p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the current shading of the window <span class="s12">ICON</span>, which must be a window returned by <span class="s12">ICONW </span>or <span class="s12">TITLEDICONW</span>. In addition, if <span class="s16">SHADE </span>is non-NIL, paints the texture <span class="s16">SHADE </span>on <span class="s16">WINDOW</span>. A typical use for this function is to communicate a change of state in a window that is shrunken, without reopening the window. To remove any shading, make <span class="s16">SHADE </span>be <span class="s12">WHITESHADE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Default Icons</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">When you shrink a window that has no <span class="s12">ICONFN</span>, the system currently creates an icon that looks like the window’s title bar. You can make the system instead create titled icons by setting the global variable <span class="s12">DEFAULTICONFN </span>to the value <span class="s12">TEXTICON</span>.</p><p class="s12" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">TEXTICON </span><span class="s16">WINDOW TEXT</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Creates a titled icon window for the main window <span class="s16">WINDOW </span>containing the text <span class="s16">TEXT</span>, or the window’s title if <span class="s16">TEXT </span>is <span class="s12">NIL</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">DEFAULTTEXTICON <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The value that <span class="s12">TEXTICON </span>passes to <span class="s12">TITLEDICONW </span>as its <span class="s12">ICON </span>argument. Initially it is <span class="s12">NIL</span>, which creates an unadorned rectangular window. However, you can set it to a <span class="s12">TITLEDICON </span>record of your choosing if you would like default icons to have a different appearance.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Coordinate Systems, Extents, And Scrolling</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note: The word &quot;scrolling&quot; has two distinct meanings when applied to Interlisp-D windows.  This section documents the use of &quot;scroll bars&quot; on the left and bottom of a window to move an object displayed in the window. &quot;Scrolling&quot; also describes the feature where trying to print text off the bottom of a window will cause the contents to &quot;scroll up.&quot; This second feature is controlled by the function <span class="s12">DSPSCROLL </span>(see Chapter 27).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">One way of thinking of a window is as a &quot;view&quot; onto an object (e.g. a graph, a file, a picture, etc.) The object has its own natural coordinate system in terms of which its subparts are laid out. When the window is created, the <span class="s11">X </span>Offset and <span class="s11">Y </span>Offset of the window’s display stream are set to map the origin of the object’s coordinate system into the lower left point of the window’s interior region. At the same time, the Clipping Region of the display stream is set to correspond to the interior of the window. From then on, the display stream’s coordinate system is translated and its clipping region adjusted whenever the window is moved, scrolled or reshaped.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">There are several distinct regions associated with a window viewing an object. First, there is a region in the window’s coordinate system that contains the complete image of the object. This region (which can only be determined by application programs with knowledge of the &quot;semantics&quot; of the object) is stored as the <span class="s12">EXTENT </span>property of the window (below). Second, the clipping region of the display stream (obtainable with the function <span class="s12">DSPCLIPPINGREGION</span>, see Chapter 27) specifies the portion of the object that is actually visible in the window. This is set so that it corresponds to the interior of the window (not including the border or title). Finally, there is the region on the screen that specifies the total area that the window occupies, including the border and title. This region (in screen coordinates) is stored as the <span class="s12">REGION </span>property of the window (see the Miscellaneous Window Properties section below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The window system supports the idea of scrolling the contents of a window. Scrolling regions are on the left and the bottom edge of each window. The <span class="s12">LEFT </span>button is used to indicate upward or leftward scrolling by the amount necessary to move the selected position to the top or the left edge. The <span class="s12">RIGHT </span>button is used to indicate downward or rightward scrolling by the amount necessary to move the top or left edge to the selected position. The <span class="s12">MIDDLE </span>button is used to indicate global placement of the object within the window (similar to &quot;thumbing&quot; a book). In the scroll region, the part of the object that is being viewed by the window is marked with a gray shade. If the whole scroll bar is thought of as the entire object, the shaded portion is the portion currently being viewed. This will only occur when the window &quot;knows&quot; how big the object is (see window property <span class="s12">EXTENT</span>, below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">When the button is released in a scroll region, the function SCROLLW is called. <span class="s12">SCROLLW </span>calls the scrolling function associated with the window to do the actual scrolling and provides a programmable entry to the scrolling operation.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SCROLLW </span><span class="s16">WINDOW DELTAX DELTAY CONTINUOUSFLG</span>)                <span class="s5">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Calls the <span class="s12">SCROLLFN </span>window property of the window <span class="s16">WINDOW </span>with arguments <span class="s16">WINDOW</span>, <span class="s16">DELTAX</span>, <span class="s16">DELTAY </span>and <span class="s16">CONTINUOUSFLG</span>. See <span class="s12">SCROLLFN </span>window property below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SCROLL.HANDLER </span><span class="s16">WINDOW</span>)                                    <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This is the function that tracks the mouse while it is in the scroll region. It is called when the cursor leaves a window in either the left or downward direction. If <span class="s12">N </span><span class="s16">MWINDOW </span>does not have a scroll region for this direction (e.g. the window has moved or reshaped since it was last scrolled), a scroll region is created that is <span class="s12">SCROLLBARWIDTH </span>wide. It then waits for <span class="s11">SCROLLWAITTIME </span>milliseconds and if the cursor is still inside the scroll region, it opens a window the size of the scroll region and changes the cursor to indicate the scrolling is taking place.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">When a button is pressed, the cursor shape is changed to indicate the type of scrolling (up, down, left, right or thumb). After the button is held for <span class="s12">WAITBEFORESCROLLTIME </span>milliseconds, until the button is released <span class="s12">SCROLLW </span>is called each <span class="s12">WAITBETWEENSCROLLTIME </span>milliseconds. These calls are made with the <span class="s12">CONTINUOUSFLG </span>argument set to <span class="s12">T</span>. If the button is released before <span class="s12">WAITBEFORESCROLLTIME </span>milliseconds, <span class="s12">SCROLLW </span>is called with the <span class="s12">CONTINUOUSFLG </span>argument set to <span class="s12">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">The arguments passed to <span class="s12">SCROLLW </span>depend on the mouse button. If the <span class="s12">LEFT </span>button is used in the vertical scroll region, <span class="s12">DY </span>is distance from cursor position at the time the button was released to the top of the window and <span class="s12">DX </span>is 0. If the <span class="s12">RIGHT </span>button is used, the inverse of this quantity is used for <span class="s12">DY </span>and 0 for <span class="s12">DX</span>. If the <span class="s12">LEFT </span>button is used in the horizontal scroll region, <span class="s12">DX </span>is distance from cursor position to left of the window and <span class="s12">DY </span>is 0.  If the <span class="s12">RIGHT </span>button is used, the inverse of this quantity is used for <span class="s12">DX </span>and 0 for <span class="s11">DY</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If the <span class="s12">MIDDLE </span>button is pressed, the distance argument to <span class="s12">SCROLLW </span>will be a <span class="s12">FLOATP </span>between 0.0 and 1.0 that indicates the proportion of the distance the cursor was from the left or top edge to the right or bottom edge.</p><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -30pt;text-align: justify;">Note: The scrolling regions will not come up if the window has a <span class="s12">SCROLLFN </span>window property of NIL, has a non-<span class="s12">NIL NOSCROLLBARS </span>window property, or if its <span class="s12">SCROLLEXTENTUSE </span>property has certain values and its <span class="s12">EXTENT </span>is fully visible.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SCROLLBYREPAINTFN </span><span class="s16">WINDOW DELTAX DELTAY CONTINUOUSFLG</span>) <span class="p">[Function]</span></p><p class="s12" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">SCROLLBYREPAINTFN <span class="p">is the standard scrolling function which should be used as the</span></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">SCROLLFN <span class="p">property for most scrolling windows.</span></p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">This function, when used as a <span class="s12">SCROLLFN</span>, <span class="s12">BITBLT</span>s the bits that will remain visible after the scroll to their new location, fills the newly exposed area with texture, adjusts the window’s coordinates and then calls the window’s <span class="s12">REPAINTFN </span>on the newly exposed region. Thus this function will scroll any window that has a repaint function.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If <span class="s16">WINDOW </span>has an <span class="s12">EXTENT </span>property, <span class="s12">SCROLLBYREPAINTFN </span>will limit scrolling in the <span class="s12">X</span></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">and <span class="s12">Y </span>directions according to the value of the window property <span class="s12">SCROLLEXTENTUSE</span>.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">DELTAX </span>or <span class="s16">DELTAY </span>is a <span class="s12">FLOATP</span>, <span class="s12">SCROLLBYREPAINTFN </span>will position the window so that its top or left edge will be positioned at that proportion of its <span class="s12">EXTENT</span>. If the window does not have an <span class="s12">EXTENT</span>, <span class="s12">SCROLLBYREPAINTFN </span>will do nothing.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">CONTINUOUSFLG </span>is non-<span class="s12">NIL</span>, this indicates that the scrolling button is being held down. In this case, <span class="s12">SCROLLBYREPAINTFN </span>will scroll the distance of one linefeed height (as returned by <span class="s12">DSPLINEFEED</span>, see Chapter 27).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;">Scrolling is controlled by the following window properties:</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">EXTENT <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Used to limit scrolling operations. Accesses the extent region of the window. If non-<span class="s12">NIL</span>, the <span class="s12">EXTENT </span>is a region in the window’s display stream that contains the complete image of the object being viewed by the window. User programs are responsible for updating the <span class="s12">EXTENT</span>. The functions <span class="s12">UNIONREGIONS</span>, <span class="s12">EXTENDREGION</span>, etc. (see Chapter 27) are useful for computing a new extent region.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">In some situations, it is useful to define an <span class="s12">EXTENT </span>that only exists in one dimension. This may be done by specifying an <span class="s12">EXTENT </span>region with a width or height of -1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">SCROLLFN <span class="p">handling recognizes this situation as meaning that the negative EXTENT dimension is unknown.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">SCROLLFN <span class="p">[Window Property]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If the <span class="s12">SCROLLFN </span>property is <span class="s12">NIL</span>, the window will not scroll. Otherwise, it should be a function of four arguments: (1) the window being scrolled, (2) the distance to scroll in the horizontal direction (positive to right, negative to left), (3) the distance to scroll in the vertical direction (positive up, negative down), and (4) a flag which is T if the scrolling button is being held down. For more information, see <span class="s12">SCROLL</span>.<span class="s12">HANDLER</span>. For most scrolling windows, the <span class="s12">SCROLLFN </span>function should be <span class="s12">SCROLLBYREPAINTFN</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 101pt;text-indent: 0pt;text-align: justify;">NOSCROLLBARS <span class="p">[Window Property]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If the <span class="s12">NOSCROLLBARS </span>property is non-<span class="s12">NIL</span>, scroll bars will not be brought up for this window. This disables mouse-driven scrolling of a window. This window can still be scrolled using <span class="s12">SCROLLW</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 102pt;text-indent: 0pt;text-align: justify;">SCROLLEXTENTUSE <span class="p">[Window Property]</span></p><p class="s12" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">SCROLLBYREPAINTFN <span class="p">uses the </span>SCROLLEXTENTUSE <span class="p">window property to limit how far scrolling can go in the </span>X <span class="p">and </span>Y <span class="p">directions. The possible values for </span>SCROLLEXTENTUSE <span class="p">and their interpretations are:</span></p><p class="s12" style="padding-top: 7pt;padding-left: 173pt;text-indent: -30pt;line-height: 92%;text-align: justify;">NIL <span class="p">This will keep the extent region visible or near visible. It will not scroll the window so that the top of the extent is below the top of the window, the bottom of the extent is more than one point above the top of the window, the left of the extent is to the right of the window and the right of the extent is to the left of the window. The </span>EXTENT <span class="p">can be scrolled to just above the window to provide a way of &quot;hiding&quot; the contents of a window. In this mode the extent is either in the window or just of the top of the window.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 174pt;text-indent: -18pt;line-height: 94%;text-align: justify;">T <span class="p">The extent is not used to control scrolling. The user can scroll the window to anywhere. Having the </span>EXTENT <span class="p">window property does all thumb scrolling to be supported so that the user can get back to the </span>EXTENT <span class="p">by thumb scrolling.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 174pt;text-indent: -42pt;text-align: left;">LIMIT <span class="p">This will keep the extent region visible. The window is only allowed to view within the extent.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 173pt;text-indent: -18pt;text-align: justify;">+ <span class="p">This will keep the extent region visible or just off in the positive direction in either </span>X <span class="p">or </span>Y <span class="p">(i.e., the image will be either be visible or just off to the top and / or right.)</span></p><p class="s12" style="padding-top: 6pt;padding-left: 173pt;text-indent: -18pt;text-align: justify;">- <span class="p">This will keep the extent region visible or just off in the negative direction in either </span>X <span class="p">or </span>Y <span class="p">(i.e., the image will be either be visible or just off to the left and / or bottom).</span></p><p class="s12" style="padding-top: 7pt;padding-left: 150pt;text-indent: 0pt;text-align: left;">+-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 126pt;text-indent: -24pt;text-align: left;">-+ <span class="p">This will keep the extent region visible or just off in the window (i.e. the image will be either be visible or just off to the left, bottom, top or right).</span></p><p class="s12" style="padding-top: 6pt;padding-left: 125pt;text-indent: -120pt;text-align: justify;">(XBEHAVIOR . YBEHAVIOR) <span class="p">If the </span>SCROLLEXTENTUSE <span class="p">is a list, the </span>CAR <span class="p">is interpreted as the scrolling limit in the </span>X <span class="p">behavior and the </span>CDR <span class="p">as the scrolling limit in the </span>Y <span class="p">behavior. </span>XBEHAVIOR <span class="p">and </span>YBEHAVIOR <span class="p">should each be one of the atoms </span>(NIL T LIMIT + - +- -+)<span class="p">. The interpretations of the atoms is the same as above except that </span>NIL <span class="p">is equivalent to </span>LIMIT<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Note: The <span class="s12">NIL </span>value of <span class="s12">SCROLLEXTENTUSE </span>is equivalent to <span class="s12">(LIMIT</span></p><p class="s12" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">. +)<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Example: If the <span class="s12">SCROLLEXTENTUSE </span>window property of a window (with an extent defined) is <span class="s12">(LIMIT . T)</span>, the window will scroll uncontrolled in the <span class="s12">Y </span>dimension but be limited to the extent region in the <span class="s12">X </span>dimension.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Mouse Activity in Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The following window properties allow the user to control the response to mouse activity in a window. The value of these properties, if non-<span class="s12">NIL</span>, should be a function that will be called (with the window as argument) when the specified event occurs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">These functions should be &quot;self-contained&quot;, communicating with the outside world solely via their window argument, e.g., by setting window properties. In particular, these functions should not expect to access variables bound on the stack, as the stack context is formally undefined at the time these functions are called. Since the functions are invoked asynchronously, they perform any terminal input / output operations from their own window.</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">WINDOWENTRYFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Whenever a button goes down in the window and the process associated with the window is not the tty process, the <span class="s12">WINDOWENTRYFN </span>is called. The default is <span class="s12">GIVE.TTY.PROCESS </span>which gives the process associated with the window the tty and calls the <span class="s12">BUTTONEVENTFN</span>. <span class="s12">WINDOWENTRYFN </span>can be a list of functions and all will be called.</p><p class="s15" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">CURSORINFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Whenever the mouse moves into the window, the <span class="s12">CURSORINFN </span>is called. If</p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">CURSORINFN <span class="p">is a list of functions, all will be called.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">CURSOROUTFN <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The <span class="s12">CURSOROUTFN </span>is called when the cursor leaves the window. If <span class="s12">CURSOROUTFN </span>is a list of functions, all will be called.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">CURSORMOVEDFN <span class="p">[Window Property]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">The <span class="s12">CURSORMOVEDFN </span>is called whenever the cursor has moved and is inside the window. <span class="s12">CURSORMOVEDFN </span>can be a list of functions and all will be called. This allows a window function to implement &quot;active&quot; regions within itself by having its <span class="s12">CURSORMOVEDFN </span>determine if the cursor is in a region of interest, and if so, perform some action.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">BUTTONEVENTFN                                           <span class="p">[Window  Property]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s12">BUTTONEVENTFN </span>is called whenever there is a change in the state (up or down) of the mouse buttons inside the window. Changes to the mouse state while the <span class="s12">BUTTONEVENTFN </span>is running will not be interpreted as new button events, and the <span class="s12">BUTTONEVENTFN </span>will not be re-invoked.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">RIGHTBUTTONFN                                           <span class="p">[Window  Property]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">The <span class="s12">RIGHTBUTTONFN </span>is called in lieu of the standard window menu operation <span class="s12">(DOWINDOWCOM) </span>when the <span class="s12">RIGHT </span>button is depressed in a window. More specifically, the <span class="s12">RIGHTBUTTONFN </span>is called instead of the <span class="s12">BUTTONEVENTFN </span>when <span class="s12">(MOUSESTATE (ONLY RIGHT))</span>. If the <span class="s12">RIGHT </span>button is to be treated like any other key in a window, supply <span class="s12">RIGHTBUTTONFN </span>and <span class="s12">BUTTONEVENTFN </span>with the same function.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">When an application program defines its own <span class="s12">RIGHTBUTTONFN</span>, there is a convention that the default <span class="s12">RIGHTBUTTONFN</span>, <span class="s12">DOWINDOWCOM </span>, may be executed by pressing the <span class="s12">RIGHT </span>button when the cursor is in the header or border of a window. User <span class="s12">RIGHTBUTTONFN</span>s are encouraged to follow this convention, by calling <span class="s12">DOWINDOWCOM </span>if the cursor is not in the interior region of the window.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">BACKGROUNDBUTTONEVENTFN                                        <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">BACKGROUNDCURSORINFN                                           <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">BACKGROUNDCURSOROUTFN                                          <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">BACKGROUNDCURSORMOVEDFN                                        <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">These variables provide a way of taking action when there is cursor action and the cursor in in the background. They are interpreted like the corresponding window properties. If set to the name of a function, that function will be called, respectively, whenever the cursor is in the background and a button changes, when the cursor moves into the background from a window, when the cursor moved from the background into a window and when the cursor moves from one place in the background to another.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Terminal I/O and Page Holding</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Each process has its own terminal i / o stream (accessed as the stream T, see Chapter 25). The terminal i / o stream for the current process can be changed to point to a window by using the function <span class="s12">TTYDISPLAYSTREAM</span>, so that output and echoing of type-in is directed to a window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">TTYDISPLAYSTREAM </span><span class="s16">DISPLAYSTREAM</span>)                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Selects the display stream or window <span class="s16">DISPLAYSTREAM </span>to be the terminal output channel, and returns the previous terminal output display stream. <span class="s12">TTYDISPLAYSTREAM </span>puts</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">DISPLAYSTREAM </span>into scrolling mode and calls <span class="s12">PAGEHEIGHT </span>with the number of lines that will fit into <span class="s16">DISPLAYSTREAM </span>given its current Font and Clipping Region. The line length of <span class="s12">TTYDISPLAYSTREAM </span>is computed (like any other display stream) from its Left Margin, Right Margin, and Font. If one of these fields is changed, its line length is recalculated.  If  one  of  the  fields  used  to  compute  the  number  of  lines  (such  as  the Clipping Region or Font) changes, <span class="s12">PAGEHEIGHT </span>is not automatically recomputed. <span class="s12">(TTYDISPLAYSTREAM (TTYDISPLAYSTREAM)) </span>will cause it to be recomputed.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If the window system is active, the line buffer is saved in the old <span class="s12">TTY </span>window, and the line buffer is set to the one saved in the window of the new display stream, or to a newly created line buffer (if it does not have one). Caution: It is possible to move the <span class="s12">TTYDISPLAYSTREAM </span>to a nonvisible display stream or to a window whose current position is not in its clipping region.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">PAGEHEIGHT </span><span class="s33">N</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s33">N </span>is greater than 0, it is the number of lines of output that will be printed to <span class="s12">TTYDISPLAYSTREAM </span>before the page is held. A page is held before the <span class="s33">N </span>+1 line is printed to <span class="s12">TTYDISPLAYSTREAM </span>without intervening input if there is no terminal input waiting to be read. The output is held with the screen video reversed until a character is typed. Output holding is disabled if <span class="s33">N </span>is 0. <span class="s12">PAGEHEIGHT </span>returns the previous setting.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">PAGEFULLFN <span class="p">[Window Property]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If the <span class="s12">PAGEFULLFN </span>window property is non-<span class="s12">NIL</span>, it will be called with the window as a single argument when the window is full (i.e., when enough has been printed since the last <span class="s12">TTY </span>interaction so that the next character printed will cause information to be scrolled off the top of the window.)</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If the <span class="s12">PAGEFULLFN </span>window property is <span class="s12">NIL</span>, the system function <span class="s12">PAGEFULLFN </span>is called. <span class="s12">PAGEFULLFN </span>simply returns if there are characters in the type-in buffer for <span class="s12">WINDOW</span>, otherwise it inverts the window and waits for the user to type a character. <span class="s12">PAGEFULLFN </span>is user advisable.</p><p style="padding-top: 7pt;padding-left: 132pt;text-indent: -30pt;text-align: left;">Note: The <span class="s12">PAGEFULLFN </span>window property is only called on windows which are the <span class="s12">TTYDISPLAYSTREAM </span>of some process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">TTY Process and the Caret</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">At any time, one process is designated as the <span class="s12">TTY </span>process, which is used for accepting keyboard input. The <span class="s12">TTY </span>process can be changed to a given process by calling <span class="s12">GIVE.TTY.PROCESS </span>(see Chapter 23), or by clicking the mouse in a window associated with the process. The latter mechanism is implemented with the following window property:</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">PROCESS <span class="p">[Window Property]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If the <span class="s12">PROCESS </span>window property is non-<span class="s12">NIL</span>, it should be a <span class="s12">PROCESS </span>and will be made the <span class="s12">TTY </span>process by <span class="s12">GIVE.TTY.PROCESS </span>(see Chapter 23), the default</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">WINDOWENTRYFN <span class="p">property (see above). This implements the mechanism by which the keyboard is associated with different processes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="9" height="8" alt="image" src="Image_108.gif"/></span></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The window system uses a flashing caret ( ) to indicate the position of the next window typeout. There is only one caret visible at any one time. The caret in the current <span class="s12">TTY </span>process is always visible; if it is hidden by another window, its window is brought to the top. An exception to this rule is that the flashing caret’s window is not brought to the top if the user is buttoning or has a shift key down. This prevents the destination window (which has the tty and caret flashing) from interfering with the window one is trying to select text to copy from.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CARET </span><span class="s16">NEWCARET</span>)                                          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Sets the shape that blinks at the location of the next output to the current process.</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">NEWCARET <span class="p">should be one of the following:</span></p><p style="padding-top: 6pt;padding-left: 210pt;text-indent: -80pt;text-align: left;">a <span class="s12">CURSOR </span>object If <span class="s16">NEWCARET </span>is a <span class="s12">CURSOR </span>object (see Chapter 30), it is used to give the new caret shape</p><p class="s12" style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">OFF <span class="p">Turns the caret off</span></p><p class="s12" style="padding-top: 6pt;padding-left: 180pt;text-indent: 0pt;line-height: 12pt;text-align: left;">NIL <span class="p">The caret is not changed. </span>CARET <span class="p">returns a </span>CURSOR</p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">representing the current caret</p><p class="s12" style="padding-top: 6pt;padding-left: 210pt;text-indent: -18pt;text-align: justify;">T <span class="p">Reset the caret to the value of </span>DEFAULTCARET<span class="p">. </span>DEFAULTCARET <span class="p">can be set to change the initial caret for new processes.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The hotspot of <span class="s16">NEWCARET </span>indicates which point in the new caret bitmap should be located at the current output position. The previous caret is returned. Note: the bitmap for the caret is not limited to the dimensions <span class="s12">CURSORWIDTH </span>by <span class="s12">CURSORHEIGHT</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CARETRATE </span><span class="s16">ONRATE OFFRATE</span>)                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Sets the rate at which the caret for the current process will flash. The caret will be visible for <span class="s16">ONRATE </span>milliseconds, then not visible for <span class="s16">OFFRATE </span>milliseconds. If <span class="s16">OFFRATE </span>is <span class="s12">NIL </span>then it is set to be the same as <span class="s16">ONRATE</span>. If <span class="s16">ONRATE </span>is <span class="s12">T</span>, both the &quot;on&quot; and &quot;off&quot; times are set to the value of the variable <span class="s12">DEFAULTCARETRATE </span>(initially 333). The previous value of <span class="s12">CARETRATE </span>is returned. If the caret is off, <span class="s12">CARETRATE </span>return <span class="s12">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Miscellaneous Window Functions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CLEARW </span><span class="s16">WINDOW</span>)                                           <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Fills <span class="s16">WINDOW </span>with its background texture, changes its coordinate system so that the origin is the lower left corner of the window, sets its <span class="s12">X </span>position to the left margin and sets its <span class="s12">Y </span>position to the base line of the uppermost line of text, ie. the top of the window less the font ascent.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">INVERTW </span><span class="s16">WINDOW SHADE</span>)                                     <span class="p">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Fills the window <span class="s16">WINDOW </span>with the texture <span class="s16">SHADE </span>in <span class="s12">INVERT </span>mode. If <span class="s16">SHADE </span>is <span class="s12">NIL</span>, <span class="s12">BLACKSHADE </span>is used. <span class="s12">INVERTW </span>returns <span class="s16">WINDOW </span>so that it can be used inside <span class="s12">RESETFORM</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FLASHWINDOW </span><span class="s16">WIN? N FLASHINTERVAL SHADE</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Flashes the window <span class="s16">WIN? </span>by &quot;inverting&quot; it twice. N is the number of times to flash the window (default is 1). <span class="s16">FLASHINTERVAL </span>is the length of time in milliseconds to wait between flashes (default is 200). <span class="s16">SHADE </span>is the shade that will be used to invert the window (default is <span class="s12">BLACKSHADE</span>).</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WIN? </span>is <span class="s12">NIL</span>, the whole screen is flashed. In this case, the <span class="s16">SHADE </span>argument is ignored (can only invert the screen).</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">WHICHW </span><span class="s16">X Y</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the window which contains the position in screen coordinates of <span class="s16">X </span>if <span class="s16">X </span>is a <span class="s11">POSITION </span>, the position (<span class="s16">X,Y</span>) if <span class="s16">X </span>and <span class="s16">Y </span>are numbers, or the position of the cursor if <span class="s16">X </span>is <span class="s12">NIL</span>. Returns NIL if the coordinates are not in any window. If they are in more than one window, it returns the uppermost.</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Example: <span class="s12">(WHICHW) </span>returns the window that the cursor is in.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DECODE/WINDOW/OR/DISPLAYSTREAM </span><span class="s16">DSORW WINDOWVAR TITLE BORDER</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns a display stream as determined by the <span class="s16">DSORW </span>and <span class="s16">WINDOWVAR </span>arguments. If <span class="s16">DSORW </span>is a display stream, it is returned. If <span class="s16">DSORW </span>is a window, its display stream is returned. If <span class="s16">DSORW </span>is NIL, the litatom <span class="s16">WINDOWVAR </span>is evaluated. If its value is a window, its display stream is returned. If its value is not a window, <span class="s16">WINDOWVAR </span>is set to a newly created window (prompting user for region) whose display stream is then returned. If <span class="s16">DSORW </span>is <span class="s12">NEW</span>, the display stream of a newly created window is returned. If a <span class="s16">window </span>is involved in the decoding, it is opened and if <span class="s16">TITLE </span>or <span class="s16">BORDER </span>are given, the <span class="s16">TITLE </span>or <span class="s16">BORDER </span>property of the window are reset. The <span class="s16">DSORW = </span><span class="s12">NIL </span>case is most useful for programs that want to display their output in a window, but want to reuse the same window each time they are called. The non-<span class="s12">NIL </span>cases are good for decoding a display stream argument passed to a function.</p><p class="s12" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">WIDTHIFWINDOW </span><span class="s16">INTERIORWIDTH BORDER</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the width of the window necessary to have <span class="s12">INTERIORWIDTH </span>points in its interior if the width of the border is <span class="s16">BORDER</span>. If <span class="s16">BORDER </span>is <span class="s11">NIL</span>, the default border size WBorder is used.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">HEIGHTIFWINDOW </span><span class="s16">INTERIORHEIGHT TITLEFLG BORDER</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the height of the window necessary to have <span class="s16">INTERIORHEIGHT </span>points in its interior with a border of <span class="s16">BORDER </span>and, if <span class="s16">TITLEFLG </span>is non-<span class="s11">NIL</span>, a title. If <span class="s16">BORDER </span>is <span class="s11">NIL</span>, the default border size WBorder is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">WIDTHIFWINDOW <span class="p">and </span>HEIGHTIFWINDOW <span class="p">are useful for calculating the width and height for a call to</span></p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">GETBOXPOSITION <span class="p">for the purpose of positioning a prospective window.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MINIMUMWINDOWSIZE </span><span class="s16">WINDOW</span>)                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns a dotted pair, the <span class="s11">CAR </span>of which is the minimum width <span class="s16">WINDOW </span>needs and the <span class="s11">CDR</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">or which is the minimum height <span class="s16">WINDOW </span>needs.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The minimum size is determined by the value of the window property <span class="s11">MINSIZE </span>of <span class="s16">WINDOW</span>. If the value of the <span class="s11">MINSIZE </span>window property is <span class="s11">NIL</span>, the width is 26 and the height is the height <span class="s16">WINDOW </span>needs to have its title, border and one line of text visible. If <span class="s11">MINSIZE </span>is a dotted pair, it is returned. If it is a litatom, it should be a function which is called with <span class="s16">WINDOW </span>as its first argument, which should return a dotted pair.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Miscellaneous Window Properties</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TITLE                                                   <span class="p">[Window  Property]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Accesses the title of the window. If a title is added to a window whose title is <span class="s11">NIL </span>or the title is removed (set to <span class="s11">NIL</span>) from a window with a title, the window’s exterior (its region on the screen) is enlarged or reduced to accomodate the change without changing the window’s interior. For example, <span class="s11">(WINDOWPROP WINDOW ’TITLE &quot;Results&quot;) </span>changes the title of <span class="s11">WINDOW </span>to be &quot;<span class="s11">Results</span>&quot;. <span class="s11">(WINDOWPROP WINDOW ’TITLE NIL) </span>removes the title of <span class="s11">WINDOW</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">BORDER                                                  <span class="p">[Window  Property]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Accesses the width of the border of the window. The border will have at most 2 point of white (but never more than half) and the rest black. The default border is the value of the global variable WBorder (initially 4).</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">WINDOWTITLESHADE                                        <span class="p">[Window  Property]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Accesses the window title shade of the window. If non-<span class="s11">NIL</span>, it should be a texture which is used as the &quot;backgound texture&quot; for the title bar on the top of the window. If it is <span class="s11">NIL</span>, the value of the global variable <span class="s11">WINDOWTITLESHADE </span>(initially <span class="s11">BLACKSHADE</span>) is used. Note that black is always used as the background of the title printed in the title bar, so that the letters can be read. The remaining space is painted with the &quot;title shade&quot;.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">HARDCOPYFN                                              <span class="p">[Window  Property]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If non-<span class="s11">NIL</span>, it should be a function that is called by the window menu command Hardcopy to print the contents of a window. The <span class="s11">HARDCOPYFN </span>property is called with two arguments, the window and an image stream to print to. If the window does not have a <span class="s11">HARDCOPYFN</span>, the bitmap image of the window (including the border and title) are printed on the file or printer.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">DSP                                                     <span class="p">[Window  Property]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Value is the display stream of the window. All system functions will operate on either the window or its display stream. This window property cannot be changed using <span class="s11">WINDOWPROP</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">HEIGHT <span class="s5">[Window Property]</span></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">WIDTH <span class="p">[Window Property]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Value is the height and width of the interior of the window (the usable space not counting the border and title). These window properties cannot be changed using <span class="s11">WINDOWPROP</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">REGION <span class="p">[Window Property]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Value is a region (in screen coordinates) indicating where the window (counting the border and title) is located on the screen. This window property cannot be changed using <span class="s11">WINDOWPROP</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Example: A Scrollable Window</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The following is a simple example showing how one might create a scrollable window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">CREATE<span class="p">.</span>PPWINDOW <span class="p">creates a window that displays the pretty printed expression </span>EXPR<span class="p">. The window properties </span>PPEXPR<span class="p">, </span>PPORIGX<span class="p">, and </span>PPORIGY <span class="p">are used for saving this expression, and the initial window position. Using this information, </span>REPAINT.PPWINDOW <span class="p">simply reinitializes the window position, and prettyprints the expression again. Note that the whole expression is reformatted every time, even if only a small part actually lies within the window. If this window was going to be used to display very large structures, it would be desirable to implement a more sophisticated </span>REPAINTFN <span class="p">that only redisplays that part of the expression within the window. However, this scheme would be satisfactory if most of the items to be displayed are small.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">RESHAPE.PPWINDOW <span class="p">resets the window (and stores the initial window position), calls </span>REPAINT.PPWINDOW <span class="p">to display the window’s expression, and then sets the </span>EXTENT <span class="p">property of the window so that </span>SCROLLBYREPAINTFN <span class="p">will be able to handle scrolling and &quot;thumbing&quot; correctly.</span></p><p class="s11" style="padding-top: 2pt;padding-left: 114pt;text-indent: 0pt;line-height: 14pt;text-align: left;">(DEFINEQ (CREATE.PPWINDOW</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;">[LAMBDA (EXPR) <span class="s33">(* rrb &quot; 4-OCT-82 12:06&quot;)</span></p><p class="s33" style="padding-left: 220pt;text-indent: -6pt;line-height: 87%;text-align: left;">(* creates a window that displays a pretty printed expression.)</p><p class="s11" style="padding-top: 8pt;padding-left: 114pt;text-indent: 0pt;text-align: left;">(PROG (WINDOW)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 6pt;padding-left: 28pt;text-indent: -9pt;line-height: 87%;text-align: left;">(* ask the user for a piece of the screen and make it into a window.)</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(SETQ WINDOW (CREATEW NIL &quot;PP window&quot;))</p><p class="s33" style="padding-left: 211pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">(* put the expression on the</p><p class="s33" style="padding-left: 220pt;text-indent: 0pt;line-height: 87%;text-align: justify;">property list of the window so that the repaint and reshape functions can access it.)</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(WINDOWPROP WINDOW (QUOTE PPEXPR) EXPR)</p><p class="s33" style="padding-left: 220pt;text-indent: -9pt;line-height: 87%;text-align: left;">(* set the repaint and reshape functions.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;line-height: 88%;text-align: center;">(WINDOWPROP WINDOW (QUOTE REPAINTFN) (FUNCTION REPAINT.PPWINDOW)) (WINDOWPROP WINDOW (QUOTE RESHAPEFN) (FUNCTION RESHAPE.PPWINDOW))</p><p class="s33" style="padding-left: 259pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(* make the scroll function</p><p class="s16" style="padding-left: 268pt;text-indent: 0pt;line-height: 11pt;text-align: left;">SCROLLBYREPAINTFN<span class="s33">, a system</span></p><p class="s33" style="padding-left: 268pt;text-indent: 0pt;line-height: 87%;text-align: left;">function that uses the repaint function to do scrolling.)</p><p class="s12" style="padding-left: 203pt;text-indent: -30pt;line-height: 88%;text-align: left;">(WINDOWPROP WINDOW (QUOTE SCROLLFN) (FUNCTION SCROLLBYREPAINTFN))</p><p class="s33" style="padding-left: 261pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(* call the reshape function to</p><p class="s33" style="padding-left: 268pt;text-indent: 0pt;line-height: 87%;text-align: left;">initially print the expression and calculate its extent.)</p><p class="s12" style="padding-left: 179pt;text-indent: 0pt;line-height: 88%;text-align: left;">(RESHAPE.PPWINDOW WINDOW) (RETURN WINDOW])</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 161pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(REPAINT.PPWINDOW</p><p class="s12" style="padding-left: 167pt;text-indent: 0pt;line-height: 12pt;text-align: left;">[LAMBDA (WINDOW REGION) <span class="s33">(* rrb &quot; 4-OCT-82 11:52&quot;)</span></p><p class="s33" style="padding-top: 10pt;padding-left: 199pt;text-indent: -6pt;line-height: 87%;text-align: left;">(* the repainting function for a window with a pretty printed expression. This repainting</p><p class="s33" style="padding-left: 199pt;text-indent: 0pt;line-height: 87%;text-align: left;">function ignores the region to be repainted and repaints the entire window.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 268pt;text-indent: -5pt;line-height: 87%;text-align: justify;">(* set the window position to the beginning of the pretty printing of the expression.)</p><p class="s12" style="padding-left: 233pt;text-indent: -48pt;line-height: 88%;text-align: justify;">(MOVETO (WINDOWPROP WINDOW (QUOTE PPORIGX)) (WINDOWPROP WINDOW (QUOTE PPORIGY)) WINDOW)</p><p class="s12" style="padding-left: 185pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">(PRINTDEF (WINDOWPROP WINDOW (QUOTE PPEXPR))</p><p class="s12" style="padding-left: 245pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">0 NIL NIL NIL WINDOW])</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 161pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(RESHAPE.PPWINDOW</p><p class="s12" style="padding-left: 170pt;text-indent: 0pt;line-height: 11pt;text-align: left;">[LAMBDA (WINDOW) <span class="s33">(* rrb &quot; 4-OCT-82 12:01&quot;)</span></p><p class="s33" style="padding-left: 262pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(* the reshape function for a</p><p class="s33" style="padding-left: 268pt;text-indent: 0pt;line-height: 87%;text-align: left;">window with a pretty printed expression.)</p><p class="s12" style="padding-left: 185pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(PROG (BTM)</p><p class="s33" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(* set  the position of  the window so that the</p><p class="s33" style="padding-left: 199pt;text-indent: -2pt;line-height: 87%;text-align: center;">first character appears in the upper left corner and save the X  and  Y  for the repaint  function.)</p><p class="s12" style="padding-top: 8pt;padding-left: 173pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(DSPRESET WINDOW)</p><p class="s12" style="padding-left: 203pt;text-indent: -30pt;line-height: 88%;text-align: left;">(WINDOWPROP WINDOW (QUOTE PPORIGX) (DSPXPOSITION NIL WINDOW))</p><p class="s12" style="padding-left: 203pt;text-indent: -30pt;line-height: 88%;text-align: left;">(WINDOWPROP WINDOW (QUOTE PPORIGY) (DSPYPOSITION NIL WINDOW))</p><p class="s33" style="padding-left: 268pt;text-indent: -6pt;line-height: 87%;text-align: left;">(* call the repaint function to pretty print the expression in</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 7pt;padding-left: 220pt;text-indent: 0pt;line-height: 11pt;text-align: left;">the newly cleared window.)</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(REPAINT.PPWINDOW WINDOW)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 148pt;text-indent: -6pt;line-height: 87%;text-align: left;">(* save the region actually covered by the pretty printed expression so that the scrolling routines will know where to stop. The pretty printing of the expression does a carriage return after the</p><p class="s33" style="padding-left: 148pt;text-indent: 0pt;line-height: 87%;text-align: left;">last piece of the expression printed so that the current position is the base line of the next line of text. Hence the last visible piece of the</p><p class="s33" style="padding-left: 148pt;text-indent: 0pt;line-height: 10pt;text-align: left;">expression (BTM) is the ending position plus the</p><p class="s33" style="padding-left: 148pt;text-indent: 0pt;line-height: 11pt;text-align: left;">height of the font above the base line (its ASCENT).)</p><p class="s12" style="padding-top: 8pt;padding-left: 120pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(WINDOWPROP WINDOW (QUOTE EXTENT)</p><p class="s12" style="padding-left: 138pt;text-indent: 0pt;line-height: 10pt;text-align: left;">create REGION</p><p class="s12" style="padding-left: 174pt;text-indent: 0pt;line-height: 11pt;text-align: left;">LEFT <span class="s4"></span><span class="s5"> </span>0</p><p class="s12" style="padding-left: 216pt;text-indent: -42pt;line-height: 88%;text-align: left;">BOTTOM <span class="s4"></span><span class="s5"> </span>[SETQ BTM (IPLUS (DSPYPOSITION NIL WINDOW) (FONTPROP WINDOW (QUOTE ASCENT]</p><p class="s12" style="padding-left: 174pt;text-indent: 0pt;line-height: 11pt;text-align: left;">WIDTH <span class="s4"></span>(WINDOWPROP WINDOW (QUOTE WIDTH))</p><p class="s12" style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: left;">HEIGHT <span class="s4"></span>(IDIFFERENCE</p><p class="s12" style="padding-left: 216pt;text-indent: 0pt;line-height: 88%;text-align: left;">(WINDOWPROP WINDOW (QUOTE HEIGHT)) BTM])</p><p class="s12" style="padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 4pt;text-indent: 0pt;text-align: center;">Menus                                                                                                                                                                 </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A menu is basically a means of selecting from a list of items. The system provides common layout and interactive user selection mechanisms, then calls a user-supplied function when a selection has been confirmed. The two major constituents of a menu are a list of items and a &quot;when selected function.&quot; The label that appears for each item is the item itself for non-lists, or its <span class="s11">CAR </span>if the item is a list. In addition, there are a multitude of different formatting parameters for specifying font, size, and layout. When a menu is created, its unspecified fields are filled with defaults and its screen image is computed and saved.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Menus can be either pop up or fixed. If fixed menus are used, the menu must be included in a window.</p><p class="s12" style="padding-top: 10pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">(<span class="s15">MENU </span><span class="s16">MENU POSITION RELEASECONTROLFLG —</span>)                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">This function provides menus that pop up when they are used. It displays <span class="s16">MENU </span>at <span class="s16">POSITION </span>(in screen coordinates) and waits for the user to select an item with a mouse key. Before any mouse key is pressed, the item the mouse is over is boxed. After any key is down, the selected menu item is video reversed. When all keys are released, <span class="s16">MENU</span>’s <span class="s12">WHENSELECTEDFN </span>field is called with four arguments: (1) the item selected, (2) the menu, (3) the last mouse key released <span class="s12">(LEFT, MIDDLE, or RIGHT)</span>, and (4) the reverse list of superitems rolled through when selecting the item and <span class="s16">MENU </span>returns its</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">value. If no item is selected, <span class="s16">MENU </span>returns <span class="s12">NIL</span>. If <span class="s16">POSITION </span>is <span class="s12">NIL</span>, the menu is brought up at the value from <span class="s16">MENU</span>’s <span class="s12">MENUPOSITION </span>field, if it is a <span class="s16">POSITION</span>, or at the current cursor position. The orientation of <span class="s16">MENU </span>with respect to the specified position is determined by its <span class="s12">MENUOFFSET </span>field.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">RELEASECONTROLFLG </span>is <span class="s12">NIL</span>, this process will retain control of the mouse. In this case, if the user lets the mouse key up outside of the menu, <span class="s16">MENU </span>return <span class="s12">NIL</span>. (Note: this is the standard way of allowing the user to indicate that they do not want to make the offered choice.) If <span class="s16">RELEASECONTROLFLG </span>is non-<span class="s12">NIL</span>, this process will give up control of the mouse when it is outside of the menu so that other processes can be run. In this case, clicking outside the menu has no effect on the call to <span class="s16">MENU</span>. If the menu is closed (for example, by right buttoning in it and selecting &quot;Close&quot; from the window menu), <span class="s16">MENU </span>returns <span class="s12">NIL</span>. Programmers are encouraged to provide a menu item such as &quot;cancel&quot; or &quot;abort&quot; which gives users a positive way of indicating &quot;no choice&quot;.</p><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -30pt;line-height: 91%;text-align: left;">Note: A &quot;released&quot; menu will stay visible (on top of the window stack) until it is closed or an item is selected.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ADDMENU </span><span class="s16">MENU WINDOW POSITION DONTOPENFLG</span>)                   <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">This function provides menus that remain active in windows. <span class="s12">ADDMENU </span>displays <span class="s16">MENU </span>at <span class="s16">POSITION </span>(in window coordinates) in <span class="s16">WINDOW</span>. If the window is too small to display the entire menu, the window is made scrollable. When an item is selected, the value of the <span class="s12">WHENSELECTEDFN </span>field of <span class="s16">MENU </span>is called with three arguments: (1) the item selected, (2) the menu, and (3) the mouse button that the item was selected with (<span class="s12">LEFT</span>, <span class="s12">MIDDLE</span>, or <span class="s12">RIGHT</span>). More than one menu can be put in a window, but a menu can only be added to one window at a time. <span class="s12">ADDMENU </span>returns the window into which <span class="s16">MENU </span>is placed.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WINDOW </span>is <span class="s12">NIL</span>, a window is created at the position specified by <span class="s16">POSITION </span>(in screen coordinates) that is the size of <span class="s16">MENU</span>. If a window is created, it will be opened unless <span class="s16">DONTOPENFLG </span>is non-<span class="s12">NIL</span>. If <span class="s16">POSITION </span>is <span class="s12">NIL</span>, the menu is brought up at the value of <span class="s16">MENU</span>’s <span class="s12">MENUPOSITION </span>field (in window coordinates), if it is a position, or else in the lower left corner of <span class="s16">WINDOW</span>. If both <span class="s16">WINDOW </span>and <span class="s16">POSITION </span>are <span class="s12">NIL</span>, a window is created at the current cursor position.</p><p style="padding-top: 6pt;padding-left: 155pt;text-indent: -30pt;text-align: justify;">Warning: <span class="s12">ADDMENU </span>resets several of the window properties of <span class="s16">WINDOW</span>. The <span class="s12">CURSORINFN</span>, <span class="s12">CURSORMOVEDFN</span>, and <span class="s12">BUTTONEVENTFN </span>window properties are replaced with <span class="s12">MENUBUTTONFN</span>, so that <span class="s16">MENU </span>will be active. <span class="s12">MENUREPAINTFN </span>is added to the <span class="s12">REPAINTFN </span>window property to update the menu image if the window is redisplayed. The <span class="s12">SCROLLFN </span>window property is changed to <span class="s12">SCROLLBYREPAINTFN </span>if the window is too small for the menu, to make the window scroll.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DELETEMENU </span><span class="s16">MENU CLOSEFLG FROMWINDOW</span>)                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">This function removes <span class="s16">MENU </span>from the window <span class="s16">FROMWINDOW</span>. If <span class="s16">MENU </span>is the only menu in the window and <span class="s16">CLOSEFLG </span>is non-<span class="s12">NIL</span>, its window will be closed (by <span class="s12">CLOSEW</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FROMWINDOW </span>is <span class="s12">NIL</span>, the list of currently open windows is searched for one that contains <span class="s16">MENU</span>. If none is found, <span class="s12">DELETEMENU </span>does nothing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Menu Fields</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">A menu is a datatype with the following fields:</p><p class="s15" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">ITEMS <span class="p">[Menu Field]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The list of items to appear in the menu. If an item is a list, its CAR will appear in the menu. If the item (or its <span class="s12">CAR</span>) is a bitmap, the bitmap will be displayed in the menu. The default selection functions interpret each item as a list of three elements: a label, a form whose value is returned upon selection, and a help string that is printed in the prompt window when the user presses a mouse key with the cursor pointing to this item. The default subitem function interprets the fourth element of the list. If it is a list whose <span class="s12">CAR </span>is the litatom <span class="s12">SUBITEMS </span>, the <span class="s12">CDR </span>is taken as a list of subitems.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">SUBITEMFN <span class="p">[Menu Field]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A function to be called to determine if an item has any subitems. If an item has subitems and the user rolls the cursor out the right of that item, a submenu with that item’s subitems in it pops up. If the user selects one of the items from the submenu, the selected subitem is handled as if it were selected from the main menu. If the user rolls out of the submenu to the left, the submenu is taken down and selection resumes from the main menu.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">An item with subitems is marked in the menu by a grey, right pointing triangle following the label.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The function is called with two arguments: (1) the menu and (2) the item. It should return a list of the subitems of this item if any. (It is called twice to compute the menu image and each time the user rolls out of the item box so it should be moderately efficient. The default <span class="s12">SUBITEMFN</span>, <span class="s12">DEFAULTSUBITEMFN</span>, checks to see if the item is a list whose fourth element is a list whose <span class="s12">CAR </span>is the litatom <span class="s12">SUBITEMS </span>and if so, returns the <span class="s12">CDR </span>of it.</p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">For example:</p><p class="s12" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(create MENU</p><p class="s12" style="padding-left: 126pt;text-indent: 24pt;text-align: left;">ITEMS <span class="s4"></span><span class="s5"> </span>’(AAAA (BBBB ’BBBB &quot;help string for BBBB&quot;</p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(SUBITEMS BBBB1 BBBB2 BBBB3))))</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">will create a menu with items <span class="s12">A </span>and <span class="s12">B </span>in which <span class="s12">B </span>will have subitems <span class="s12">B1</span>, <span class="s12">B2 </span>and <span class="s12">B3</span>. The following picture below shows this menu as it first appears:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 210pt;text-indent: 0pt;text-align: left;"><span><img width="61" height="35" alt="image" src="Image_109.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-bottom: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 114%;text-align: justify;">The following picture shows the submenu, with the item BBBB3 selected by the cursor (<span><img width="11" height="21" alt="image" src="Image_110.gif"/></span>):</p><p style="padding-left: 258pt;text-indent: 0pt;text-align: left;"><span><img width="121" height="67" alt="image" src="Image_111.gif"/></span></p><p class="s15" style="padding-top: 7pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">WHENSELECTEDFN                                               <span class="p">[Menu  Field]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">A function to be called when an item is selected. The function is called with three arguments: (1) the item selected, (2) the menu, and (3) the mouse key that the item was selected with (<span class="s12">LEFT</span>, <span class="s12">MIDDLE</span>, or <span class="s12">RIGHT</span>). The default function <span class="s12">DEFAULTWHENSELECTEDFN </span>evaluates and returns the value of the second element of the item if the item is a list of at least length 2. If the item is not a list of at least length 2, <span class="s12">DEFAULTWHENSELECTEDFN </span>returns the item.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Note: If the menu is added to a window with <span class="s12">ADDMENU</span>, the default <span class="s12">WHENSELECTEDFN </span>is <span class="s12">BACKGROUNDWHENSELECTEDFN</span>, which is the same as <span class="s12">DEFAULTWHENSELECTEDFN </span>except that <span class="s12">EVAL.AS.PROCESS </span>is used to evaluate the second element of the item, instead of tying up the mouse process.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">WHENHELDFN                                                   <span class="p">[Menu  Field]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The function which is called when the user has held a mouse key on an item for <span class="s12">MENUHELDWAIT </span>milliseconds (initially 1200). The function is called with three arguments: (1) the item selected, (2) the menu, and (3) the mouse key that the item was selected with (<span class="s12">LEFT</span>, <span class="s12">MIDDLE</span>, or <span class="s12">RIGHT</span>). <span class="s12">WHENHELDFN </span>is intended for prompting users. The default is <span class="s12">DEFAULTMENUHELDFN </span>which prints (in the prompt window) the third element of the item or, if there is not a third element, the string &quot;This item will be selected when the button is released.&quot;</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">WHENUNHELDFN                                                 <span class="p">[Menu  Field]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s12">WHENHELDFN </span>was called, <span class="s12">WHENUNHELDFN </span>will be called: (1) when the cursor leaves the item, (2) when a mouse key is released, or (3) when another key is pressed. The function is called with the same three argument values used to call <span class="s12">WHENHELDFN</span>. The default <span class="s12">WHENUNHELDFN </span>is the function <span class="s12">CLRPROMPT</span>, which just clears the prompt window.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">MENUPOSITION                                                 <span class="p">[Menu  Field]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The position of the menu to be used if the call to <span class="s12">MENU </span>or <span class="s12">ADDMENU </span>does not specify a position. For popup menus, this is in screen coordinates. For fixed menus, it is in the coordinates of the window the menu is in. The point within the menu image that is placed at this position is determined by <span class="s12">MENUOFFSET</span>. If <span class="s12">MENUPOSITION </span>is <span class="s12">NIL</span>, the menu will be brought up at the cursor position.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">MENUOFFSET                                                   <span class="p">[Menu  Field]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The position in the menu image that is to be located at <span class="s12">MENUPOSITION</span>. The default offset is (0,0). For example, to bring up a menu with the cursor over a particular menu item, set its <span class="s12">MENUOFFSET </span>to a position within that item and set its <span class="s12">MENUPOSITION </span>to <span class="s12">NIL</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">MENUFONT <span class="p">[Menu Field]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The font in which the items will be appear in the menu. Default is the value of</p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">MENUFONT<span class="p">.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">TITLE <span class="p">[Menu Field]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">If non-<span class="s12">NIL</span>, the value of this field will appear as a title in a line above the menu.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">MENUTITLEFONT <span class="p">[Menu Field]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">The font in which the title of the menu will be appear. If this is <span class="s12">NIL</span>, the title will be in the same font as window titles. If it is <span class="s12">T</span>, it will be in the same font as the menu items.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">CENTERFLG <span class="p">[Menu Field]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">If non-<span class="s12">NIL</span>, the menu items are centered; otherwise they are left-justified.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;line-height: 11pt;text-align: left;">MENUROWS <span class="p">[Menu Field]</span></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;line-height: 11pt;text-align: left;">MENUCOLUMNS <span class="p">[Menu Field]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">These fields control the shape of the menu in terms of rows and columns. If <span class="s12">MENUROWS </span>is given, the menu will have that number of rows. If <span class="s12">MENUCOLUMNS </span>is given, the menu will have that number of columns. If only one is given, the other one will be calculated to generate the minimal rectangular menu. (Normally only one of <span class="s12">MENUROWS </span>or <span class="s12">MENUCOLUMNS </span>is given.) If neither is given, the items will be in one column.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">ITEMHEIGHT <span class="p">[Menu Field]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The height of each item box in the menu. If not specified, it will be the maximum of the height of the <span class="s12">MENUFONT </span>and the heights of any bitmaps appearing as labels.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">ITEMWIDTH <span class="p">[Menu Field]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The width of each item box in the menu. If not specified, it will be the width of the largest item in the menu.</p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">MENUBORDERSIZE <span class="p">[Menu Field]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The size of the border around each item box. If not specified, 0 (no border) is used.</p><p class="s15" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">MENUOUTLINESIZE <span class="p">[Menu Field]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The size of the outline around the entire menu. If not specified, a maximum of 1 and the</p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">MENUBORDERSIZE <span class="p">is used.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">CHANGEOFFSETFLG <span class="p">[Menu Field]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">(popup menus only) If <span class="s12">CHANGEOFFSETFLG </span>is non-<span class="s12">NIL</span>, the position of the menu offset is set each time a selection is confirmed so that the menu will come up next time in the same position relative to the cursor. This will cause the menu to reappear in the same place on the screen if the cursor has not moved since the last selection. This is implemented by changing the <span class="s12">MENUOFFSET </span>field on each use. If <span class="s12">CHANGEOFFSETFLG </span>is the atom <span class="s12">X </span>or the atom <span class="s12">Y</span>, only the <span class="s12">X </span>or the <span class="s11">Y </span>coordinate of the <span class="s12">MENUOFFSET </span>field will be changed. For example, by setting the <span class="s12">MENUOFFSET </span>position to (-1,0) and setting <span class="s12">CHANGEOFFSETFLG </span>to <span class="s12">Y</span>, the menu will pop up so that the cursor is just to the left of the last item selected. This is the setting of the window command menus.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: left;">The following fields are read only.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">IMAGEHEIGHT                                                  <span class="p">[Menu  Field]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the height of the entire menu.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">IMAGEWIDTH                                                   <span class="p">[Menu  Field]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the width of the entire menu.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Miscellaneous Menu Functions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MAXMENUITEMWIDTH </span><span class="s16">MENU</span>)                                    <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns the width of the largest menu item label in the menu <span class="s16">MENU</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MAXMENUITEMHEIGHT </span><span class="s16">MENU</span>)                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns the height of the largest menu item label in the menu <span class="s16">MENU</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MENUREGION </span><span class="s16">MENU</span>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns the region covered by the image of <span class="s16">MENU </span>in its window.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">WFROMMENU </span><span class="s16">MENU</span>)                                          <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns the window <span class="s16">MENU </span>is located in, if it is in one; <span class="s12">NIL </span>otherwise.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DOSELECTEDITEM </span><span class="s16">MENU ITEM BUTTON</span>)                           <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Calls <span class="s16">MENU</span>’s <span class="s12">WHENSELECTEDFN </span>on <span class="s16">ITEM </span>and <span class="s16">BUTTON</span>. It provides a programmatic way of making a selection.  It does not change the display.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MENUITEMREGION </span><span class="s16">ITEM MENU</span>)                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Returns the region occupied by <span class="s16">ITEM </span>in <span class="s16">MENU</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SHADEITEM </span><span class="s16">ITEM MENU SHADE DS/W</span>)                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Shades the region occupied by <span class="s16">ITEM </span>in <span class="s16">MENU</span>. If <span class="s16">DS/W </span>is a display stream or a window, it is assumed to be where <span class="s16">MENU </span>is displayed. Otherwise, <span class="s12">WFROMMENU </span>is called to locate the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">window <span class="s16">MENU </span>is in. Shading is persistent, and is reapplied when the window the menu is in gets redisplayed. To unshade an item, call with a <span class="s16">SHADE </span>of 0.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">PUTMENUPROP </span><span class="s16">MENU PROPERTY VALUE</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Stores the property <span class="s16">PROPERTY </span>with the value <span class="s16">VALUE </span>on a property list in the menu <span class="s16">MENU</span>. The user can use this property list for associating arbitrary data with a menu object.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETMENUPROP </span><span class="s16">MENU PROPERTY</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the value of the <span class="s16">PROPERTY </span>property of the menu <span class="s16">MENU</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Examples of Menu Use</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Example: A simple menu:</p><p class="s12" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 106%;text-align: left;">(MENU (create MENU ITEMS _ ’((YES T) (NO (QUOTE NIL))) ))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Creates a menu with items <span class="s12">YES </span>and <span class="s12">NO </span>in a single vertical column:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 210pt;text-indent: 0pt;text-align: left;"><span><img width="41" height="33" alt="image" src="Image_112.gif"/></span></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 26pt;text-align: left;">If <span class="s12">YES </span>is selected, <span class="s12">T </span>will be returned. Otherwise, <span class="s12">NIL </span>will be returned. Example: A simple menu, with centering:</p><p class="s12" style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 13pt;text-align: left;">(MENU (create MENU TITLE <span class="s4"></span><span class="s5"> </span>&quot;Foo?&quot;</p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 13pt;text-align: center;">ITEMS <span class="s4"></span><span class="s5">   </span>’((YES T &quot;Adds the Foo feature.&quot;)</p><p class="s12" style="padding-top: 1pt;padding-left: 191pt;text-indent: 24pt;line-height: 92%;text-align: left;">(NO ’NO &quot;Removes the Foo feature.&quot;)) CENTERFLG <span class="s4"></span><span class="s5"> </span>T))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Creates a menu with a title <span class="s12">Foo? </span>and items <span class="s12">YES </span>and <span class="s12">NO </span>centered in a single vertical column:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 210pt;text-indent: 0pt;text-align: left;"><span><img width="41" height="47" alt="image" src="Image_113.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The strings following the <span class="s12">YES </span>and <span class="s12">NO </span>are help strings and will be printed if the cursor remains over one of the items for a period of time. This menu differs from the one above in that it distinquishes the <span class="s12">NO </span>case from the case where the user clicked outside of the menu. If the user clicks outside of the menu, <span class="s12">NIL </span>is returned.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Example: A multi-column menu:</p><p class="s12" style="padding-top: 5pt;padding-left: 192pt;text-indent: -78pt;line-height: 77%;text-align: left;">(create MENU ITEMS <span class="s4"></span><span class="s5"> </span>’(1 2 3 4 5 6 7 8 9 * 0 #) CENTERFLG <span class="s4"></span><span class="s5"> </span>T</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 240pt;text-indent: 0pt;line-height: 12pt;text-align: left;">MENUCOLUMNS <span class="s4"></span><span class="s5"> </span>3</p><p class="s12" style="padding-left: 239pt;text-indent: 0pt;line-height: 77%;text-align: left;">MENUFONT <span class="s4"></span><span class="s5"> </span>(FONTCREATE ’MODERN 10 ’BOLD) ITEMHEIGHT <span class="s4"></span><span class="s5"> </span>15</p><p class="s12" style="padding-left: 239pt;text-indent: 0pt;line-height: 77%;text-align: left;">ITEMWIDTH <span class="s4"></span><span class="s5"> </span>15 CHANGEOFFSETFLG <span class="s4"></span><span class="s5"> </span>T)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">Creates a touch-tone-phone number pad with the items in 15 by 15 boxes printed in Modern 10 bold font:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 258pt;text-indent: 0pt;text-align: left;"><span><img width="63" height="83" alt="image" src="Image_114.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">If used in pop up mode, its first use will have the cursor in the middle. Subsequent use will have the cursor in the same relative location as the previous selection.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Example: A program using a previously-saved menu:</p><p class="s12" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(SELECTQ [MENU</p><p class="s12" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(COND ((type? MENU FOOMENU)</p><p class="s56" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">(<span class="s33">*  use previously computed menu </span>.)</p><p class="s12" style="padding-left: 204pt;text-indent: 0pt;line-height: 10pt;text-align: left;">FOOMENU)</p><p class="s56" style="padding-left: 206pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s12">(T </span>(<span class="s33">* create and save the menu </span>)</p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: center;">(SETQ FOOMENU</p><p class="s12" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(create MENU</p><p class="s12" style="padding-left: 161pt;text-indent: 0pt;line-height: 12pt;text-align: center;">ITEMS <span class="s4"></span><span class="s5">   </span>’((A ’A-SELECTED &quot;prompt string</p><p class="s12" style="padding-left: 173pt;text-indent: 0pt;text-align: left;">for A&quot;)</p><p class="s12" style="padding-left: 258pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(B ’B-SELECTED &quot;prompt string for B&quot;]</p><p class="s56" style="padding-left: 187pt;text-indent: 0pt;line-height: 91%;text-align: left;"><span class="s12">(A-SELECTED </span>(<span class="s33">* if A is selected</span>) <span class="s12">(DOATHING)) (B-SELECTED </span>(<span class="s33">* if B is selected</span>) <span class="s12">(DOBTHING)) (PROGN </span>(<span class="s33">* user selected outside the menu</span>) <span class="s12">NIL)))</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">This expression displays a pop up menu with two items, <span class="s12">A </span>and <span class="s12">B</span>, and waits for the user to select one. If <span class="s12">A </span>is selected, <span class="s12">DOATHING </span>is called. If <span class="s12">B </span>is selected, <span class="s12">DOBTHING </span>is called. If neither of these is selected, the form returns <span class="s12">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The purpose of this example is to show some good practices to follow when using menus. First, the menu is only created once, and saved in the variable <span class="s12">FOOMENU</span>. This is more efficient if the menu is used more than once.  Second, all of the information about the menu is kept in one place, which makes it easy to understand and edit. Third, the forms evaluated as a result of selecting something from the menu are part of the code and hence will be known to masterscope (as opposed to the situation if the forms were stored as part of the items). Fourth, the items in the menu have help strings for the user. Finally, the code is commented (always worth the trouble).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Free Menus                                                                                                                                                         </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Free Menus are powerful and flexible menus that are useful for applications needing menus with different types of items, including command items, state items, and items that can be edited. A Free Menu is part of a window. It can can be opened and closed as desired, or attached as a control menu to the application window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Making a Free Menu</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A Free Menu is built from a description of the contents and layout of the menu. As a Free Menu is simply a group of items, a Free Menu Description is simply a specification of a group of items. Each group has properties associated with it, as does each Free Menu Item. These properties specify the format of the items in the group, and the behavior of each item. The function <span class="s11">FREEMENU </span>takes a Free Menu Description, and returns a closed window with the Free Menu in it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The easiest way to make a Free Menu is to define a specific function which calls <span class="s11">FREEMENU </span>with the Free Menu Description in the function. This function can then also set up the Free Menu window as required by the application. The Free Menu Description is saved as part of the specific function when the application is saved. Alternately, the Free Menu Description can be saved as a variable in your file;  then just call <span class="s11">FREEMENU </span>with the name of the variable.  This may be a more difficult alternative if the backquote facility is used to build the Free Menu Description.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Free Menu Formatting</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A Free Menu can be formatted in one of four ways. The items in any group can be automatically laid out in rows, in columns, or in a table, or else the application can specify the exact location of each item in the group. Free Menu keeps track of the region that a group of items occupies, and items can be justified within that region. This way an item can be automatically positioned at one of the nine justification locations, top-left, top-center, top-right, middle-left, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Free Menu Description</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A Free Menu Description, specifying a group of items, is a list structure. The first entry in the list is an optional list of the properties for this group of items. This entry is in the form:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">(PROPS &lt;PROP&gt; &lt;VALUE&gt; &lt;PROP&gt; &lt;VALUE&gt; ...)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The keyword <span class="s11">PROPS </span>determines whether or not the optional group properties list is specified..</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">One important group property is <span class="s11">FORMAT</span>. The four types of formatting, <span class="s11">ROW, TABLE, COLUMN</span>, or <span class="s11">EXPLICIT</span>, determine the syntax of the rest of the Free Menu Description. When using <span class="s11">EXPLICIT </span>formatting, the rest of the description is any number of Item Descriptions which have <span class="s11">LEFT </span>and <span class="s11">BOTTOM </span>properties specifying the position of the item in the menu.  The syntax is:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">((PROPS FORMAT EXPLICIT ...)</p><p class="s11" style="padding-left: 83pt;text-indent: 0pt;text-align: left;">&lt;ITEM DESCRIPTION&gt;</p><p class="s11" style="padding-left: 83pt;text-indent: 0pt;text-align: left;">&lt;ITEM DESCRIPTION&gt; ...)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">When using <span class="s11">ROW </span>or <span class="s11">TABLE </span>formatting, the rest of the description is any number of item groups, each group corresponding to a row in the menu. These groups are identical in syntax to an <span class="s11">EXPLICIT </span>group description. The groups have an optional <span class="s11">PROPS </span>list and any number of Item Descriptions. The items need not have <span class="s11">LEFT </span>and <span class="s11">BOTTOM </span>properties, as the location of each item is determined by the formatter. However, the order of the rows and items is important. The menu is laid out top to bottom by row, and left to right within each row.  The syntax is:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 10pt;padding-left: 83pt;text-indent: -5pt;line-height: 108%;text-align: left;">((PROPS FORMAT ROW ...) ; props of this group (&lt;ITEM DESCRIPTION&gt; ; items in first row</p><p class="s11" style="padding-left: 88pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;ITEM DESCRIPTION&gt; ...)</p><p class="s11" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">((PROPS ...) ; props of second row</p><p class="s11" style="padding-left: 94pt;text-indent: 0pt;text-align: left;">&lt;ITEM DESCRIPTION&gt; ; items in second row</p><p class="s11" style="padding-left: 94pt;text-indent: 0pt;text-align: left;">&lt;ITEM DESCRIPTION&gt; ...))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">(The comments above only describe the syntax.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For <span class="s11">COLUMN </span>formatting, the syntax is identical to that of <span class="s11">ROW </span>formatting. However, each group of items corresponds to a column in the menu, rather than a row. The menu is laid out left to right by column, top to bottom within each column.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Finally, a Free Menu Description can have recursively nested groups. Anywhere the description can take an Item Description, it can take a group, marked by the keyword <span class="s11">GROUP</span>. A nested group inherits all of the properties of its mother group, by default. However, any of these properties can be overridden in the nested groups <span class="s11">PROPS </span>list, including the <span class="s11">FORMAT</span>. The syntax is:</p><p class="s11" style="padding-top: 1pt;padding-left: 77pt;text-indent: 0pt;line-height: 108%;text-align: left;">( ; no PROPS list, default row format (&lt;ITEM DESCRIPTION&gt; ; first in row</p><p class="s11" style="padding-left: 94pt;text-indent: -16pt;line-height: 108%;text-align: left;">(GROUP ; nested group, second in row (PROPS FORMAT COLUMN ...) ; optional props (&lt;ITEM DESCRIPTION&gt; ...) ; first column (&lt;ITEM DESCRIPTION&gt; ...))</p><p class="s11" style="padding-left: 99pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;ITEM DESCRIPTION&gt;)) ; third in row</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Here is an example of a simple Free Menu Description for a menu which might provide access to a simple data base:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 10pt;padding-left: 90pt;text-indent: -12pt;line-height: 106%;text-align: left;">(((LABEL LOOKUP SELECTEDFN MYLOOKUPFN) (LABEL EXIT SELECTEDFN MYEXITFN))</p><p class="s12" style="padding-left: 84pt;text-indent: 0pt;line-height: 106%;text-align: left;">((LABEL Name: TYPE DISPLAY) (LABEL &quot;&quot; TYPE EDIT ID NAME)) ((LABEL Address: TYPE DISPLAY) (LABEL &quot;&quot; TYPE EDIT ID ADDRESS)) ((LABEL Phone: TYPE DISPLAY)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;text-align: justify;">(LABEL &quot;&quot; TYPE EDIT LIMITCHARS MYPHONEP ID PHONE)))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">This menu has two command buttons, LOOKUP and EXIT, and three edit fields, with IDs NAME, PHONE, and ADDRESS. The Edit items are initialized to the empty string, as in this example they need no other initial value. The user could select the Name: prompt, type a person’s name, and then press the LOOKUP button. The function <span class="s11">MYLOOKUPFN </span>would be called. That function would look at the NAME Edit item, look up that name in the data base, and fill in the rest of the fields appropriately. The PHONE item has <span class="s11">MYPHONEP </span>as a <span class="s11">LIMITCHARS </span>function. This function would be called when editing the phone number, in order to restrict input to a valid phone number. After looking up Perry, the Free Menu might look like:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 160pt;text-indent: 0pt;text-align: left;"><span><img width="196" height="66" alt="image" src="Image_115.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Here is a more complicated example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 9pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">((PROPS FONT (MODERN 10))</p><p class="s12" style="padding-left: 36pt;text-indent: 0pt;line-height: 106%;text-align: justify;">((LABEL Example FONT (MODERN 10 BOLD) HJUSTIFY CENTER)) ((LABEL NORTH) (LABEL SOUTH) (LABEL EAST) (LABEL WEST)) ((PROPS ID ROW3 BOX 1)</p><p class="s12" style="padding-left: 36pt;text-indent: 6pt;line-height: 106%;text-align: justify;">(LABEL ONE) (LABEL TWO) (LABEL THREE)) ((PROPS ID ROW4)</p><p class="s12" style="padding-left: 42pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">(LABEL ONE ID ALPHA)</p><p class="s12" style="padding-left: 59pt;text-indent: -17pt;line-height: 106%;text-align: justify;">(GROUP (PROPS FORMAT COLUMN BACKGROUND 23130 BOX 2 BOXSPACE 4) ((TYPE NWAY LABEL A BOX 1 COLLECTION COL1 NWAYPROPS (DESELECT</p><p class="s12" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">T))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 10pt;text-indent: 0pt;line-height: 106%;text-align: left;">(TYPE NWAY LABEL B BOX 1 COLLECTION COL1) (TYPE NWAY LABEL C BOX 1 COLLECTION COL1))</p><p class="s12" style="padding-left: 46pt;text-indent: -22pt;line-height: 106%;text-align: left;">((TYPE STATE LABEL &quot;Choose Me&quot; BOX 1 MENUITEMS (BRAVO DELTA) INITSTATE DELTA LINKS (DISPLAY (GROUP ALPHA)))</p><p class="s12" style="padding-left: 10pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(TYPE DISPLAY ID ALPHA LABEL &quot;&quot; BOX 1 MAXWIDTH 35)))</p><p class="s12" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">(LABEL THREE)))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">which will produce the following Free Menu:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 219pt;text-indent: 0pt;text-align: left;"><span><img width="168" height="118" alt="image" src="Image_116.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">And if the Free Menu were formatted as a Table, instead of in Rows, it would look like:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 196pt;text-indent: 0pt;text-align: left;"><span><img width="228" height="118" alt="image" src="Image_117.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: left;">The following breakdown of the example explains how each part contributes to the Free Menu shown above.</p><p class="s12" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">(PROPS FONT (MODERN 10))</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This line specifies the properties of the group that is the entire Free Menu. These properties are described in Section 28.7.4, Free Menu Group Properties. In this example, all items in the Free Menu, unless otherwise specified, will be in Modern 10.</p><p class="s12" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">((LABEL Example FONT (MODERN 10 BOLD) HJUSTIFY CENTER))</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">This line of the Free Menu Description describes the first row of the menu. Since the <span class="s11">FORMAT </span>specification of a Free Menu is, by default, <span class="s11">ROW </span>formatting, this line sets the first row in the menu. If the menu were in <span class="s11">COLUMN </span>formatting, this position in the description would specify the first column in the menu.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">In this example the first row contains only one item. The item is, by default, a type <span class="s11">MOMENTARY </span>item. It has its own Font declaration <span class="s12">(FONT (MODERN 10 BOLD))</span>, that overrides the font specified for the Free Menu as a whole, so the item appears bolded.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Finally, the item is justified, in this case centered. The <span class="s11">HJUSTIFY </span>Item Property indicates that the item is to be centered horizontally within its row.</p><p class="s12" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">((LABEL NORTH) (LABEL SOUTH) (LABEL EAST) (LABEL WEST))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This line specifies the second row of the menu. The second row has four very simple items, labeled <span class="s12">NORTH</span>, <span class="s12">SOUTH</span>, <span class="s12">EAST</span>, and <span class="s12">WEST </span>next to each other within the same row.</p><p class="s12" style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">((PROPS ID ROW3 BOX 1)</p><p class="s12" style="padding-left: 36pt;text-indent: 0pt;text-align: left;">(LABEL ONE) (LABEL TWO) (LABEL THREE))</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The third row in the menu is similar to the second row, except that it has a box drawn around it. The box is specified in the <span class="s12">PROPS </span>declaration for this row. Rows (and columns) are just like Groups in that the first thing in the declaration can be a list of properties for that row. In this case the row is named by giving it an <span class="s12">ID </span>property of <span class="s12">ROW3</span>. It is useful to name your groups if you want to be able to access and modify their properties later (via the function <span class="s11">FM.GROUPPROP</span>). It is boxed by specifying the <span class="s11">BOX </span>property with a value of 1, meaning draw the box one dot wide.</p><p class="s12" style="padding-top: 7pt;padding-left: 42pt;text-indent: -6pt;line-height: 106%;text-align: left;">((PROPS ID ROW4) (LABEL ONE ID ALPHA)</p><p class="s12" style="padding-left: 48pt;text-indent: -6pt;line-height: 106%;text-align: left;">(GROUP (PROPS FORMAT COLUMN BACKGROUND 23130 BOX 2 BOXSPACE 4) ((TYPE NWAY LABEL A BOX 1 COLLECTION COL1 NWAYPROPS (DESELECT T))</p><p class="s12" style="padding-left: 84pt;text-indent: 0pt;line-height: 106%;text-align: left;">(TYPE NWAY LABEL B BOX 1 COLLECTION COL1) (TYPE NWAY LABEL C BOX 1 COLLECTION COL1))</p><p class="s12" style="padding-left: 90pt;text-indent: -12pt;line-height: 106%;text-align: left;">((TYPE STATE LABEL &quot;Choose Me&quot; BOX 1 MENUITEMS (BRAVO DELTA) INITSTATE DELTA LINKS (DISPLAY (GROUP ALPHA)))</p><p class="s12" style="padding-left: 42pt;text-indent: 42pt;line-height: 106%;text-align: left;">(TYPE DISPLAY ID ALPHA LABEL &quot;&quot; BOX 1 MAXWIDTH 35))) (LABEL THREE)))</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This part of the description specifies the fourth row in the menu. This row consists of: an item labelled <span class="s12">ONE</span>, a group of items, and an item labelled <span class="s12">THREE</span>. That is, Free Menu thinks of the group as an entry, and formats the rest of the row just as it it were a large item.</p><p class="s12" style="padding-top: 7pt;padding-left: 48pt;text-indent: -6pt;line-height: 106%;text-align: left;">(GROUP (PROPS FORMAT COLUMN BACKGROUND 23130 BOX 2 BOXSPACE 4) ((TYPE NWAY LABEL A BOX 1 COLLECTION COL1 NWAYPROPS (DESELECT T))</p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;line-height: 106%;text-align: left;">(TYPE NWAY LABEL B BOX 1 COLLECTION COL1) (TYPE NWAY LABEL C BOX 1 COLLECTION COL1))</p><p class="s12" style="padding-left: 60pt;text-indent: -12pt;line-height: 106%;text-align: left;">((TYPE STATE LABEL &quot;Choose Me&quot; BOX 1 MENUITEMS (BRAVO DELTA) INITSTATE DELTA LINKS (DISPLAY (GROUP ALPHA)))</p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(TYPE DISPLAY ID ALPHA LABEL &quot;&quot; BOX 1 MAXWIDTH 35)))</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The second part of this row is a nested group of items. It is declared as a group by placing the keyword <span class="s12">GROUP </span>as the first word in the declaration. A group can be declared anywhere a Free Menu Description can take a Free Menu Item Description (as opposed to a row or column declaration).</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The first thing in what would have been the second item declaration in this row is the keyword <span class="s12">GROUP</span>. Following this keyword comes a normal group description, starting with an optional list of properties, and followed by any number of things to go in the group (based on the format of the group).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">This group’s Props declaration is:</p><p class="s12" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">(PROPS FORMAT COLUMN BACKGROUND 23130 BOX 2 BOXSPACE 4).</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;">It specifies that the group is to be formatted as a number of columns (instead of rows, the default). The entire group will have a background shade of 23130, and a box of width 2 around it, as you can see in the sample menu. The <span class="s12">BOXSPACE </span>declaration tells Free Menu to leave an extra four dots of room between the edge of the group (ie the box around the group) and the items in the group.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">The first column of this group is a Collection of <span class="s11">NWAY </span>items:</p><p class="s12" style="padding-top: 7pt;padding-left: 84pt;text-indent: -6pt;line-height: 106%;text-align: left;">((TYPE NWAY LABEL A BOX 1 COLLECTION COL1 NWAYPROPS (DESELECT T)) (TYPE NWAY LABEL B BOX 1 COLLECTION COL1)</p><p class="s12" style="padding-left: 84pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(TYPE NWAY LABEL C BOX 1 COLLECTION COL1))</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The three items, labelled A, B, and C are all declared as <span class="s11">NWAY </span>items, and are also specified to belong to the same <span class="s11">NWAY </span>Collection, Col1. This is how a number of <span class="s11">NWAY </span>items are collected together. The property <span class="s11">NWAYPROPS </span>(DESELECT T) on the first <span class="s11">NWAY </span>item specifies that the Col1 Collection is to have the Deselect property enabled. This simply means that the <span class="s11">NWAY </span>collection can be put in the state where none of the items (A, B, or C) are selected (highlighted). Additionally, each item is declared with a box whose width is one dot (pixel) around it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: left;">The second column in this nested group is specified by:</p><p class="s12" style="padding-top: 7pt;padding-left: 108pt;text-indent: -30pt;line-height: 106%;text-align: left;">((TYPE STATE LABEL &quot;Choose Me&quot; BOX 1 MENUITEMS (BRAVO DELTA) INITSTATE DELTA LINKS (DISPLAY (GROUP ALPHA)))</p><p class="s12" style="padding-left: 84pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(TYPE DISPLAY ID ALPHA LABEL &quot;&quot; BOX 1 MAXWIDTH 35))</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Column two contains two items, a <span class="s11">STATE </span>item and a <span class="s11">DISPLAY </span>item. The <span class="s11">STATE </span>item is labelled &quot;Choose Me.&quot; A Label can be a string or a bitmap, as well as an atom. Selecting the <span class="s11">STATE </span>item will cause a pop-up menu to appear with two choices for the state of the item, <span class="s12">BRAVO </span>and <span class="s12">DELTA</span>. The items to go in the pop-up menu are designated by the <span class="s11">MENUITEMS </span>property.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The pop-up menu would look like:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 258pt;text-indent: 0pt;text-align: left;"><span><img width="57" height="35" alt="image" src="Image_118.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The initial state of the &quot;Choose Me&quot; item is designated to be <span class="s12">DELTA </span>by the <span class="s11">INITSTATE </span>Item Property. The initial state can be anything; it does not have to be one of the items in the pop-up menu.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Next, the <span class="s11">STATE </span>item is Linked to a <span class="s11">DISPLAY </span>item, so that the current state of the item will be displayed in the Free Menu. The link’s name is <span class="s12">DISPLAY </span>(a special link name for</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><span class="s11">STATE </span>items), and the item linked to is described by the Link Description, (<span class="s12">GROUP </span>ALPHA). Normally the linked item can just be described by its ID. But in this case, there is more than one item whose ID is ALPHA (for the sake of this example), specifically the first item in the fourth row and the display item in this nested group. The form (GROUP ALPHA) tells Free Menu to search for an item whose ID is ALPHA, limiting the search to the items that are within this lexical group. The lexical group is the smallest group that is declared with the <span class="s11">GROUP </span>keyword (i.e., not row and column groups) that contains this item declaration. So in this case, Free Menu will link the <span class="s11">STATE </span>item to the <span class="s11">DISPLAY </span>item, rather than the first item in the fourth row, since <i>that </i>item is outside of the nested group. For further discussion of linking items, see Section 28.7.12, Free Menu Item Links.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Now, establish the <span class="s11">DISPLAY </span>item:</p><p class="s12" style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">(TYPE DISPLAY ID ALPHA LABEL &quot;&quot; BOX 1 MAXWIDTH 35)</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">We have given it the <span class="s12">ID </span>of Alpha that the above <span class="s11">STATE </span>item uses in finding the proper <span class="s11">DISPLAY </span>item to link to. This display item is used to display the current state of the item &quot;Choose Me.&quot; Every item is required to have a Label property specified, but the label for this <span class="s11">DISPLAY </span>item will depend on the state of &quot;Choose Me.&quot; That is, when the state of the &quot;Choose Me&quot; item is changed from <span class="s12">DELTA </span>to <span class="s12">BRAVO</span>, the label of the <span class="s11">DISPLAY </span>item will also change. The null string serves to hold the place for the changeable label.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">A box is specified for this item. Since the label is the empty string, Free Menu would draw a very small box. Instead, the <span class="s11">MAXWIDTH </span>property indicates that the label, whatever it becomes, will be limited to a stringwidth of 35. The width restriction of 35 was chosen because it is big enough for each of the possible labels for this display item. So Free Menu draws the box big enough to enclose any item within this width restriction.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Finally we specify the final item in row four:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">(LABEL THREE)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Free Menu Group Properties</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Each group has properties. Most group properties are relevant and should be set in the group’s <span class="s11">PROPS </span>list in the Free Menu Description. User properties can be freely included in the <span class="s11">PROPS </span>list. A few other properties are set up by the formatter. The macros <span class="s11">FM.GROUPPROP </span>or <span class="s11">FM.MENUPROP </span>allow access to group properties after the Free Menu is created.</p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: -22pt;line-height: 93%;text-align: justify;">ID <span class="p">The identifier of this group. Setting the group </span>ID <span class="p">is desirable, for example, if the application needs to get handles on items in particular groups, or access group properties.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 81pt;text-indent: 0pt;text-align: justify;">FORMAT <span class="p">One of </span>ROW<span class="p">, </span>COLUMN<span class="p">, </span>TABLE<span class="p">, or </span>EXPLICIT<span class="p">. The default is </span>ROW<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 92pt;text-indent: 0pt;line-height: 12pt;text-align: left;">FONT <span class="p">A font description of the form </span>(FAMILY SIZE FACE)<span class="p">, or a</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">FONTDESCRIPTOR <span class="p">data type.   This will be the default font for each  item</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;line-height: 91%;text-align: left;">in this group. The default font of the top group is the value of the variable <span class="s11">DEFAULTFONT</span>.</p><p class="s11" style="padding-top: 7pt;padding-left: 173pt;text-indent: -71pt;line-height: 94%;text-align: justify;">COORDINATES <span class="p">One of </span>GROUP <span class="p">or </span>MENU<span class="p">. This property applies only to </span>EXPLICIT <span class="p">formatting. If </span>GROUP<span class="p">, the items in the </span>EXPLICIT <span class="p">group are positioned in coordinates relative to the lower left corner of the group, as determined by the mother group. If </span>MENU<span class="p">, which is the default, the items are positioned relative to the lower left corner of the menu.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 140pt;text-indent: 0pt;text-align: left;">LEFT <span class="p">Specifies a left offset for this group, pushing the group to the right.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 129pt;text-indent: 0pt;text-align: left;">BOTTOM <span class="p">Specifies a bottom offset for this group, pushing the group up.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 31pt;text-indent: 0pt;text-align: center;">ROWSPACE  <span class="p">Specifies the number of dots between rows in this group.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: center;">COLUMNSPACE  <span class="p">Specifies the number of dots between columns in this group.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">BOX <span class="p">Specifies the number of dots in the box around this group of items.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 118pt;text-indent: 0pt;text-align: left;">BOXSHADE <span class="p">Specifies the shade of the box.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 118pt;text-indent: 0pt;text-align: left;">BOXSPACE <span class="p">Specifies the number of bits between the box and the items.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 173pt;text-indent: -66pt;line-height: 92%;text-align: justify;">BACKGROUND <span class="p">The background shade of this group. Nested groups inherit this background shade, but items in this group and nested groups do not. This is because, in general, it is difficult to read text on a background, so items appear on a white background by default. This can be overridden by the </span>BACKGROUND <span class="p">Item Property.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Other Group Properties</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following group properties are set up and maintained by Free Menu. The application should probably not change any of these properties.</p><p class="s11" style="padding-top: 6pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">ITEMS <span class="p">A list of the items in the group.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: center;">REGION  <span class="p">The region that is the extent of the items in the group.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 129pt;text-indent: 0pt;text-align: left;">MOTHER <span class="p">The </span>ID <span class="p">of the group that is the mother of this group.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">DAUGHTERS <span class="p">A list of </span>ID <span class="p">of groups which are daughters to this group.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Free Menu Items</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Each Free Menu Item is stored as an instance of the data type <span class="s11">FREEMENUITEM</span>. Free Menu Items can be thought of as objects, each item having its own particular properties, such as its type, label, and mouse event functions. A number of useful item types, described in Section 28.7.11, Predefined Item Types, are predefined by Free Menu. New types of items can be defined by the application, using</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Display items as a base. Each Free Menu Item is created from a Free Menu Item Description when the Free Menu is created.</p><p class="s11" style="padding-top: 6pt;padding-left: 132pt;text-indent: -30pt;line-height: 92%;text-align: justify;">CAUTION: <span class="p">Edit (and thus Number) Freemenu Items do not perform well when boxed or when there is another item to the right in the same row. The display to the right of the edit item may be corrupted under editing and fm.changelabel operations.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Free Menu Item Descriptions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A Free Menu Item Description is a list in property list format, specifying the properties of the item. For example:</p><p class="s12" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">(LABEL Refetch SELECTEDFN MY.REFETCHFN)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">describes a <span class="s11">MOMENTARY </span>item labelled Refetch, with the function <span class="s11">MY.REFETCHFN </span>to be called when the item is selected. None of the property values in an item description are evaluated. When constructing Free Menu descriptions that incorporate evaluated expressions (for example labels that are bitmaps) it is helpful to use the backquote facility. For instance, if the value of the variable <span class="s11">MYBITMAP </span>is a bitmap, then</p><p class="s12" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">(FREEMENU ‘(((LABEL A) (LABEL ,MYBITMAP))))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">would create a Free Menu of one row, with two items in that row, the second of which has the value of <span class="s11">MYBITMAP </span>as its label.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Free Menu Item Properties</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The following Free Menu Item Properties can be set in the Item Description. Any other properties given in an Item Description will be treated as user properties, and will be saved on the <span class="s11">USERDATA </span>property of the item.</p><p class="s11" style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;line-height: 12pt;text-align: center;">TYPE   <span class="p">The type of the item.  Choose from one of the Free Menu Item type keywords</span></p><p class="s11" style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">MOMENTARY<span class="p">, </span>TOGGLE<span class="p">, </span>3STATE<span class="p">, </span>STATE<span class="p">, </span>NWAY<span class="p">, </span>EDITSTART<span class="p">, </span>EDIT<span class="p">,</span></p><p class="s11" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">NUMBER<span class="p">, or </span>DISPLAY<span class="p">. The default is </span>MOMENTARY<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -39pt;text-align: justify;">LABEL <span class="p">An atom, string, or bitmap. Bitmaps are always copied, so that the original will not be changed. This property must be specified for every item.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -33pt;text-align: justify;">FONT <span class="p">The font in which the item appears. The default is the font specified for the group containing this item. Can be a font description of the form </span>(FAMILY SIZE FACE)<span class="p">, or a </span>FONTDESCRIPTOR <span class="p">data type.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 44pt;text-indent: 0pt;text-align: center;">ID  <span class="p">May be used to specify a unique identifier for this item, but is not necessary.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 174pt;text-indent: -85pt;line-height: 94%;text-align: justify;">LEFT <span class="p">and </span>BOTTOM <span class="p">When </span>ROW<span class="p">, </span>COLUMN<span class="p">, or </span>TABLE <span class="p">formatting, these specify offsets, pushing the item right and up, respectively, from where the formatter would have put the item. In </span>EXPLICIT <span class="p">formatting, these are the actual coordinates of the item, in the coordinate system given by the group’s </span>COORDINATES <span class="p">property.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: -55pt;line-height: 92%;text-align: justify;">HJUSTIFY <span class="p">Indicates horizontal justification type: </span>LEFT<span class="p">, </span>CENTER<span class="p">, or </span>RIGHT<span class="p">. Specifies that this item is to be horizontally justified within the extent of its group. Note that the main group, as opposed to the smaller row or column group, is used.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -55pt;text-align: justify;">VJUSTIFY <span class="p">Specifies that this item is to be vertically justified</span>. <span class="p">Values are </span>TOP<span class="p">, </span>MIDDLE<span class="p">, or </span>BOTTOM<span class="p">.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: -60pt;line-height: 93%;text-align: justify;">HIGHLIGHT <span class="p">Specifies the highlighted looks of the item, that is, how the item changes when a mouse event occurs on it. See Section 28.7.12, Free Menu Item Highlighting, for more details on highlighting.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -49pt;line-height: 94%;text-align: justify;">MESSAGE <span class="p">Specifies a string that will be printed in the prompt window after a mouse cursor selects this item for </span>MENUHELDWAIT <span class="p">milliseconds. Or, if an atom, treated as a function to get the message. The function is passed three arguments, </span>ITEM<span class="p">, </span>WINDOW<span class="p">, and </span>BUTTONS<span class="p">, and should return a string. The default is a message appropriate to the type of the item.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -60pt;text-align: justify;">INITSTATE <span class="p">Specifies the initial state of the item. This is only appropriate to </span>TOGGLE<span class="p">, </span>3STATE<span class="p">, and </span>STATE <span class="p">items.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 174pt;text-indent: -55pt;text-align: justify;">MAXWIDTH <span class="p">Specifies the width allowed for this item. The formatter will leave enough space after the item for the item to grow to this width without collisions.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">MAXHEIGHT <span class="p">Similar to </span>MAXWIDTH<span class="p">, but in the vertical dimension.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -28pt;text-align: justify;">BOX <span class="p">Specifies the number of bits in the box around this item. Boxes are made around </span>MAXWIDTH <span class="p">and </span>MAXHEIGHT <span class="p">dimensions. If unspecified, no box is drawn.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 118pt;text-indent: 0pt;text-align: left;">BOXSHADE <span class="p">Specifies the shade that the box is drawn in. The default is </span>BLACKSHADE<span class="p">.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -55pt;text-align: justify;">BOXSPACE <span class="p">Specifies the number of bits between the box and the label. The default is one bit.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 108pt;text-indent: 0pt;line-height: 12pt;text-align: left;">BACKGROUND <span class="p">Specifies the background shade on which the item appears. The default is</span></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">WHITESHADE<span class="p">, regardless of the group’s background.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">LINKS  <span class="p">Can be used to link this item to other items in the Free Menu.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Mouse Properties</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">The following properties provide a way for application functions to be called under certain mouse events. These functions are called with the <span class="s11">ITEM</span>, the <span class="s11">WINDOW</span>, and the <span class="s11">BUTTONS </span>passed as arguments. These application functions do not interfere with any Free Menu system functions that take care of handling the different item types. In each case, though, the application function is called</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">after the system function. The default for all of these functions is <span class="s11">NILL</span>. The value of each of the following properties can be the name of a function, or a lambda expression.</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -68pt;text-align: justify;">SELECTEDFN <span class="p">Specifies the function to be called when this item is selected. The </span>Edit <span class="p">and </span>EditStart <span class="p">items cannot have a </span>SELECTEDFN<span class="p">. See the Edit Free Menu item description in Section 28.7.11, Predefined Item Types, for more information.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -44pt;text-align: justify;">DOWNFN <span class="p">Specifies the function to be called when the item is selected with the mouse cursor.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -44pt;text-align: justify;">HELDFN <span class="p">Specifies the function to be called repeatedly when the item is selected with the mouse cursor.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -49pt;text-align: justify;">MOVEDFN <span class="p">Specifies the function to be called when the mouse cursor moves off this item (mouse buttons are still depressed).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">System Properties</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">The following Free Menu Item properties are set and maintained by Free Menu. The application should probably not change these properties directly.</p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: -49pt;text-align: justify;">GROUPID <span class="p">Specifies the </span>ID <span class="p">of the smallest group that the item is in. For example, in a row formatted group, the item’s </span>GROUPID <span class="p">will be set to the </span>ID <span class="p">of the row that the item is in, not the </span>ID <span class="p">of the whole group.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 125pt;text-indent: -39pt;text-align: justify;">STATE <span class="p">Specifies the current state of </span>TOGGLE<span class="p">, </span>3STATE<span class="p">, or </span>STATE <span class="p">items. The state of an </span>NWAY <span class="p">item behaves like that of a toggle item.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 81pt;text-indent: 0pt;text-align: left;">BITMAP <span class="p">Specifies the bitmap from which the item is displayed.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 125pt;text-indent: -44pt;line-height: 93%;text-align: justify;">REGION <span class="p">Specifies the region of the item, in window coordinates. This is used for locating the display position, as well as determining the mouse sensitive region of the item.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: -60pt;text-align: justify;">MAXREGION <span class="p">Specifies the maximum region the item may occupy, determined by the </span>MAXWIDTH <span class="p">and </span>MAXHEIGHT <span class="p">properties (see Section 28.7.8, Free Menu item Properties). This is used by the formatter and the display routines.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 59pt;text-indent: 5pt;line-height: 182%;text-align: left;">SYSDOWNFN SYSMOVEDFN</p><p class="s11" style="padding-left: 43pt;text-indent: 0pt;line-height: 10pt;text-align: left;">SYSSELECTEDFN <span class="p">These are the system mouse event functions, set up by Free Menu according</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: left;">to the item type. These functions are called before the mouse event functions, and are used to implement highlighting, state changes, editing, etc.</p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: -55pt;text-align: left;">USERDATA <span class="p">Specifies how any other properties are stored on this list in property list format. This list should probably not need to be manipulated directly.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Predefined Item Types</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">MOMENTARY                                                 <span class="p">[Free Menu Item]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">MOMENTARY <span class="p">items are like command buttons. When the button is selected, its associated function is called.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TOGGLE                                                    <span class="p">[Free Menu Item]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Toggle items are simple two-state buttons. When pressed, the button is highlighted; it stays that way until pressed again. The states of a toggle button are <span class="s11">T </span>and <span class="s11">NIL</span>; the initial state is <span class="s11">NIL</span>.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">3STATE                                                    <span class="p">[Free Menu Item]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">3STATE <span class="p">items rotate through </span>NIL<span class="p">, </span>T<span class="p">, and </span>OFF<span class="p">, states each time they are pressed. The default looks of the </span>OFF <span class="p">state are with a diagonal line through the button, while </span>T <span class="p">is highlighted, and </span>NIL <span class="p">is normal. The default initial state is </span>NIL<span class="p">.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The following Item Property applies to <span class="s11">3STATE </span>items:</p><p class="s11" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">OFF <span class="p">Specifies the looks of a </span>3STATE <span class="p">item in its </span>OFF <span class="p">state. Similar to</span></p><p class="s11" style="padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">HIGHLIGHT<span class="p">. The default is that the label gets a diagonal slash through it.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 180pt;text-indent: 18pt;line-height: 92%;text-align: justify;">NOTE: <span class="p">If you specify special highlighting ( a different bitmap of string) for Toggle or 3State items AND use this item in a group formatted as a Column or a Table, the highlight looks of the item may not appear in the correct place.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">STATE                                                     <span class="p">[Free Menu Item]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">STATE <span class="p">items are general multiple state items. The following Item Property determines how the item changes state:</span></p><p class="s11" style="padding-top: 6pt;padding-left: 173pt;text-indent: -71pt;line-height: 93%;text-align: justify;">CHANGESTATE <span class="p">This Item Property can be changed at any time to change the effect of the item. If a </span>MENU <span class="p">data type, this menu pops up when the item is selected, and the user can select the new state. Otherwise, if this property is given, it is treated as a function name, which is passed three arguments, </span>ITEM<span class="p">, </span>WINDOW<span class="p">, and </span>BUTTONS<span class="p">. This function can do whatever it wants, and is expected to return the new state (an atom, string, or bitmap), or </span>NIL<span class="p">, indicating the state should not change. The state of the item can automatically be indicated in the Free Menu, by setting up a </span>DISPLAY <span class="p">link to a </span>DISPLAY <span class="p">item in the menu (see Section 28.7.13, Free Menu Item Links). If such a link exists, the label of the </span>DISPLAY <span class="p">item will be changed to the new state. The possible states are not restricted at all, with the exception of selections from a pop-up menu. The state can be changed to any atom, string, or bitmap, manually via </span>FM.CHANGESTATE<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The following Item Properties are relevant to <span class="s11">STATE </span>items when building a Free Menu:</p><p class="s11" style="padding-top: 6pt;padding-left: 173pt;text-indent: -60pt;text-align: justify;">MENUITEMS <span class="p">If specified, should be a list of items to go in a pop-up menu for this item. Free Menu will build the menu and save it as the </span>CHANGESTATE <span class="p">property of the item.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;text-align: left;">MENUFONT <span class="p">The font of the items in the pop-up menu.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">MENUTITLE <span class="p">The title of the pop-up menu. The default title is the label of the </span>STATE <span class="p">item.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">NWAY <span class="p">[Free Menu Item]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">NWAY <span class="p">items provide a way to collect any number of items together, in any format within the Free Menu. Only one item from each Collection can be selected at a time, and that item is highlighted to indicate this. The following Item Properties are particular to </span>NWAY <span class="p">items:</span></p><p class="s11" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: justify;">COLLECTION <span class="p">An identifier that specifies which </span>NWAY <span class="p">Collection this item belongs to.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 125pt;text-indent: -60pt;line-height: 94%;text-align: justify;">NWAYPROPS <span class="p">A property list of information to be associated with this collection. This property is only noticed in the Free Menu Description on the first item in a </span>COLLECTION<span class="p">. </span>NWAY <span class="p">Collections are formed by creating a number of </span>NWAY <span class="p">items with the same </span>COLLECTION <span class="p">property. Each </span>NWAY <span class="p">item acts individually as a Toggle item, and can have its own mouse event functions. Each </span>NWAY <span class="p">Collection itself has properties, its state for instance. After the Free Menu is created, these Collection properties can be accessed by the macro </span>FM.NWAYPROPS<span class="p">. Note that </span>NWAY <span class="p">Collections are different from Free Menu Groups. There are three </span>NWAY <span class="p">Collection properties that Free Menu looks at:</span></p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: -55pt;line-height: 92%;text-align: justify;">DESELECT <span class="p">If given, specifies that the Collection can be deselected, yielding a state in which no item in the Collection is selected. When this property is set, the Collection can be deselected by selecting any item in the Collection and pressing the right mouse button .</span></p><p class="s11" style="padding-top: 6pt;padding-left: 87pt;text-indent: 0pt;text-align: left;">STATE <span class="p">The current state of the Collection, which is the actual item selected.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 125pt;text-indent: -60pt;text-align: justify;">INITSTATE <span class="p">Specifies the initial state of the Collection. The value of this property is an Item Link Description</span></p><p class="s15" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">EDIT <span class="p">[Free Menu Item]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">EDIT <span class="p">items are textual items that can be edited. The label for an </span>EDIT <span class="p">item cannot be a bitmap. When the item is selected an edit caret appears at that cursor position within the item, allowing insertion and deletion of characters at that point. If selected with the right mouse button, the item is cleared before editing starts. While editing, the left mouse button moves the caret to a new position within the item. The right mouse button deletes from the caret to the cursor. CONTROL-W deletes the previous word. Editing is stopped when another item is selected, when the user moves the cursor into another TTY window and clicks the cursor, or when the Free Menu function </span>FM.ENDEDIT <span class="p">is called (called when the Free Menu is reset, or the window is closed). The Free Menu editor will time out after about a minute, returning automatically. Because of the many ways in which editing can terminate, </span>EDIT <span class="p">items are not allowed to have a </span>SELECTEDFN<span class="p">, as it is not clear when this function should be called. Each </span>EDIT <span class="p">item should have an ID specified, which is used when getting the state of the Free Menu, since the string being edited is defined as the state of the item, and thus cannot distinguish edit items. The following Item Properties are specific to </span>EDIT <span class="p">items.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 173pt;text-indent: -55pt;text-align: justify;">MAXWIDTH <span class="p">Specifies the maximum string width of the item, in bits, after which input will be ignored. If </span>MAXWIDTH <span class="p">is not specified, the items becomes infinitely wide and input is never restricted.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 173pt;text-indent: -82pt;line-height: 92%;text-align: justify;">INFINITEWIDTH <span class="p">This property is set automatically when </span>MAXWIDTH <span class="p">is not specified. This tells Free Menu that the item has no right end, so that the item becomes mouse sensitive from its left edge to the right edge of the window, within the vertical space of the item.</span></p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: 0pt;line-height: 91%;text-align: left;">In Medley, Changestate of an infinite width Edit item to a smaller item clears the old item properly.</p><p class="s11" style="padding-top: 6pt;padding-left: 173pt;text-indent: -66pt;line-height: 94%;text-align: justify;">LIMITCHARS <span class="p">The input characters allowed can be restricted in two ways: If this item property is a list, it is treated as a list of legal characters; any character not in the list will be ignored. If it is an atom, it is treated as the name of a test predicate, which is passed three arguments, </span>ITEM<span class="p">, </span>WINDOW<span class="p">, and </span>CHARACTER, <span class="p">when each character is typed. This predicate should return </span>T <span class="p">if the character is legal, </span>NIL <span class="p">otherwise. The </span>LIMITCHARS <span class="p">function can also call </span>FM.ENDEDIT <span class="p">to force the editor to terminate, or </span>FM.SKIPNEXT<span class="p">, to cause the editor to jump to the next edit item in the menu.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -55pt;line-height: 92%;text-align: justify;">ECHOCHAR <span class="p">This item property can be set to any character. This character will be echoed in the window, regardless of what character is typed. However the item’s label contains the actual string typed. This is useful for operations like password prompting. If </span>ECHOCHAR <span class="p">is used, the font of the item must be fixed pitch. Unrestricted </span>EDIT <span class="p">items should not have other items to their right in the menu, as they will be replaced. If the item is boxed, input is restricted to what will fit in the box. Typing off the edge of the window will cause the window to scroll appropriately. Control characters can be edited, including the carriage return and line feed, and they are echoed as a black box. While editing, the Skip / Next key ends editing the current item, and starts editing the next </span>EDIT <span class="p">item in the Free Menu.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">NUMBER                                                    <span class="p">[Free Menu Item]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">NUMBER <span class="p">items are </span>EDIT <span class="p">items that are restricted to numerals. The state of the item is coerced to the the number itself, not a string of numerals. There is one </span>NUMBER<span class="p">- specific Item Property:</span></p><p class="s11" style="padding-top: 6pt;padding-left: 174pt;text-indent: -66pt;text-align: justify;">NUMBERTYPE <span class="p">If </span>FLOATP <span class="p">(or </span>FLOAT<span class="p">), then decimals are accepted. Otherwise only whole numbers can be edited.</span></p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">EDITSTART                                                 <span class="p">[Free Menu Item]</span></p><p class="s11" style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">EDITSTART <span class="p">items serve the purpose of starting editing on another item when they are selected. The associated Edit item is linked to the EditStart item by an </span>EDIT <span class="p">link (see Free Menu Item Links below). If the </span>EDITSTART <span class="p">item is selected with the right mouse button, the Edit item is cleared before editing is started. Similar to </span>EDIT <span class="p">items, </span>EDITSTART <span class="p">items cannot have a </span>SELECTEDFN<span class="p">, as it is not clear when the associated editing will terminate.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">In Medley, <span class="s11">EDITSTART </span>items linked to a Number item properly set number state when editing has completed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">DISPLAY <span class="p">[Free Menu Item]</span></p><p class="s11" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">DISPLAY <span class="p">items serve two purposes. First, they simply provide a way of putting dummy text in a Free Menu, which does nothing when selected. The item’s label can be changed, though. Secondly, </span>DISPLAY <span class="p">items can be used as the base for new item types. The application can create new item types by specifying </span>DOWNFN<span class="p">, </span>HELDFN<span class="p">, </span>MOVEDFN<span class="p">, and </span>SELECTEDFN <span class="p">for a </span>DISPLAY <span class="p">item, making it behave as desired.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Free Menu Item Highlighting</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Each Free Menu Item can specify how it wants to be highlighted. First of all, if the item does not specify a <span class="s11">HIGHLIGHT </span>property, there are two default highlights. If the item is not boxed, the label is simply inverted, as in normal menus. If the item is boxed, it is highlighted in the shade of the box. Alternatively, the value of the <span class="s11">HIGHLIGHT </span>property can be a SHADE, which will be painted on top of the item when a mouse event occurs on it. Or the <span class="s11">HIGHLIGHT </span>property can be an alternate label, which can be an atom, string or bitmap. If the highlight label is a different size than the item label, the formatter will leave enough space for the larger of the two. In all of these cases, the looks of the highlighted item are determined when the Free Menu is built, and a bitmap of the item with these looks is created. This bitmap is stored on the item’s <span class="s11">HIGHLIGHT </span>property, and simply displayed when a mouse event occurs. The value of the highlight property in the Item Description is copied to the <span class="s11">USERDATA </span>list, in case it is needed later for a label change.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Free Menu Item Links</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Links between items are useful for grouping items in abstract ways. In particular, links are used for associating <span class="s11">EDITSTART </span>items with their item to edit, and <span class="s11">STATE </span>items with their state display. The Free Menu Item property <span class="s11">LINKS </span>is a property list, where the value of each Link Name property is a pointer to another item. In the Item Description, the value of the <span class="s11">LINK </span>property should be a property list as above. The value of each Link Name property is a Link Description. A Link Description can be one of the following forms:</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -32pt;line-height: 91%;text-align: left;">&lt;ID&gt; An ID of an item in the Free Menu. This is acceptable if items can be distinguished by ID alone.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -94pt;line-height: 91%;text-align: justify;">(&lt;GROUPID&gt; &lt;ID&gt;) A list whose first element is a GROUPID, and whose second element is the ID of an item in that group. This way items with similar purposes, and thus similar ID’s, can be distinguished across groups.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -73pt;line-height: 91%;text-align: justify;">(GROUP &lt;ID&gt;) A list whose first element is the keyword GROUP, and whose second element is an item ID. This form describes an item with ID, in the same group that this item is in. This way you do not need to know the GROUPID, just which group it is in.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Then after the entire menu is built, the links are set up, turning the Link Descriptions into actual pointers to Free Menu Items. There is no reason why circular Item Links cannot be created, although such a link would probably not be very useful. If circular links are created, the Free Menu will not be garbage collected after it is not longer being used. The application is responsible for breaking any such links that it creates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Free Menu Window Properties</p><p class="s11" style="padding-top: 6pt;padding-left: 173pt;text-indent: -93pt;text-align: left;">FM.PROMPTWINDOW <span class="p">Specifies the window that Free Menu should use for displaying the item’s messages.  If not specified, </span>PROMPTWINDOW <span class="p">is used.</span></p><p class="s11" style="padding-top: 7pt;padding-left: 173pt;text-indent: -82pt;line-height: 94%;text-align: justify;">FM.BACKGROUND <span class="p">The background shade of the entire Free Menu. This property can be set automatically by specifying a </span>BACKGROUND <span class="p">argument to the function </span>FREEMENU<span class="p">. The window border must be 4 or greater when a Free Menu background is used, due to the way the Window System handles window borders.</span></p><p class="s11" style="padding-top: 6pt;padding-left: 173pt;text-indent: -87pt;line-height: 92%;text-align: justify;">FM.DONTRESHAPE <span class="p">Normally, Free Menu will attempt to use empty space in a window by pushing items around to fill the space. When a Free Menu window is reshaped, the items are repositioned in the new shape. This can be disabled by setting the </span>FM.DONTRESHAPE <span class="p">window property.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Free Menu Interface Functions</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FREEMENU </b><i>DESCRIPTION TITLE BACKGROUND BORDER</i>)                 <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Creates a Free Menu from a Free Menu Description, returning the window. This function will return quickly unless new display fonts have to be created.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Accessing Functions</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FM.GETITEM </b><i>ID GROUP WINDOW</i>)                                   <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Gets item <span class="s16">ID </span>in <span class="s16">GROUP </span>of the Free Menu in <span class="s16">WINDOW</span>. This function will search the Free Menu for an item whose <span class="s16">ID </span>property matches, or secondly whose <span class="s11">LABEL </span>property matches <span class="s16">ID</span>. If <span class="s16">GROUP </span>is <span class="s11">NIL</span>, then the entire Free Menu is searched. If no matching item is found, <span class="s11">NIL </span>is returned.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FM.GETSTATE </b><i>WINDOW</i>)                                           <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Returns in property list format the ID and current <span class="s11">STATE </span>of every <span class="s11">NWAY </span>Collection and item in the Free Menu. If an item’s or Collection’s state is <span class="s11">NIL</span>, then it is not included in the list. This provides an easy way of getting the state of the menu all at once. If the state of only one item or Collection is needed, the application can directly access the <span class="s11">STATE </span>property of that object using the Accessing Macros described in Section 28.7.20, Free Menu Macros. This function can be called when editing is in progress, in which case it will provide the label of the item being edited at that point.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: justify;">Changing Free Menus</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Many of the following functions operate on Free Menu Items, and thus take the item as an argument. The <i>ITEM </i>argument to these functions can be the Free Menu Item itself, or just a reference to the item. In the second case, <span class="s11">FM.GETITEM </span>(see Section 28.7.16, Accessing Functions) will be used to find the item in the Free Menu. The reference can be in one of the following forms:</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: -32pt;line-height: 91%;text-align: left;">&lt;ID&gt; Specifies the first item in the Free Menu whose ID or LABEL property matches &lt;ID&gt;.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: -94pt;line-height: 91%;text-align: left;">(&lt;GROUPID&gt; &lt;ID&gt;) Specifies the item whose ID or LABEL property matches &lt;ID&gt; within the group specified by &lt;GROUPID&gt;.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FM.CHANGELABEL </b><i>ITEM NEWLABEL WINDOW UPDATEFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Changes an <i>ITEM</i>’s label after the Free Menu has been created. It works for any type of item, and <span class="s11">STATE </span>items will remain in their current state. If the window is open, the item will be redisplayed with its new appearance. <i>NEWLABEL </i>can be an atom, a string, or a bitmap (except for <span class="s11">EDIT </span>items), and will be restricted in size by the <span class="s11">MAXWIDTH </span>and <span class="s11">MAXHEIGHT </span>Item Properties. If these properties are unspecified, the <i>ITEM </i>will be able to grow to any size. <i>UPDATEFLG </i>specifies whether or not the regions of the groups in the menu are recalculated to take into account the change of size of this item. The application should not change the label of an <span class="s11">EDIT </span>item while it is being edited. The following Item Property is relevant to changing labels:</p><p class="s11" style="padding-top: 6pt;padding-left: 126pt;text-indent: -103pt;text-align: left;">CHANGELABELUPDATE <span class="p">Exactly like </span>UPDATEFLG <span class="p">except specified on the item, rather than as a function paramater.</span></p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FM.CHANGESTATE </b><i>X NEWSTATE WINDOW</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Programmatically changes the state of items and <span class="s11">NWAY </span>Collections. <i>X </i>is either an item or a Collection name. For items <i>NEWSTATE </i>is a state appropriate to the type of the item. For <span class="s11">NWAY </span>Collections, <i>NEWSTATE </i>should be the desired item in the Collection, or <span class="s11">NIL </span>to deselect. For <span class="s11">EDIT </span>and <span class="s11">NUMBER </span>items, this function just does a label change. If the window is open, the item will be redisplayed.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FM.RESETSTATE </b><i>ITEM WINDOW</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Sets an <span class="s16">ITEM </span>back to its initial state.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FM.RESETMENU </b><i>WINDOW</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Resets every item in the menu back to its initial state.</p><p class="s11" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FM.RESETSHAPE </b><i>WINDOW ALWAYSFLG</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Reshapes the <span class="s16">WINDOW </span>to its full extent, leaving the lower-left corner unmoved. Unless <span class="s16">ALWAYSFLG </span>is <span class="s11">T</span>, the window will only be increased in size as a result of resetting the shape.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FM.RESETGROUPS </b><i>WINDOW</i>) <span class="p">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Recalculates the extent of each group in the menu, updating group boxes and backgrounds appropriately.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FM.HIGHLIGHTITEM </b><i>ITEM WINDOW</i>)                                 <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Programmatically forces an <i>ITEM </i>to be highlighted. This might be useful for <i>ITEM</i>s which have a direct effect on other <i>ITEM</i>s in the menu. The <i>ITEM </i>will be highlighted according to its <span class="s11">HIGHLIGHT </span>property, as described in Section 28.7.12, Free Menu Item Highlighting. This highlight is temporary, and will be lost if the <i>ITEM </i>is redisplayed, by scrolling for example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Editor Functions</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FM.EDITITEM </b><i>ITEM WINDOW CLEARFLG</i>)                             <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Starts editing an <span class="s11">EDIT </span>or <span class="s11">NUMBER </span><i>ITEM </i>at the beginning of the <i>ITEM</i>, as long as the <i>WINDOW </i>is open. This function will most likely be useful for starting editing of an <i>ITEM </i>that is currently the null string. If <i>CLEARFLG </i>is set, the <i>ITEM </i>is cleared first.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FM.SKIPNEXT </b><i>WINDOW CLEARFLG</i>)                                  <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Causes the editor to jump to the beginning of the next <span class="s11">EDIT </span>item in the Free Menu. If <span class="s16">CLEARFLG </span>is set, then the next item will be cleared first. If there is not another <span class="s11">EDIT </span>item in the menu, this function will simply cause editing to stop. If this function is called when editing is not in progress, editing will begin on the first <span class="s11">EDIT </span>item in the menu. This function can be called from any process, and can also be called from inside the editor, in a <span class="s11">LIMITCHARS </span>function.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FM.ENDEDIT </b><i>WINDOW WAITFLG</i>)                                    <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Stops any editing going on in <span class="s16">WINDOW</span>. If <span class="s16">WAITFLG </span>is <span class="s11">T</span>, then block until the editor has completely finished. This function can be called from another process, or from a <span class="s11">LIMITCHARS </span>function.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FM.EDITP </b><i>WINDOW</i>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If an item is in the process of being edited in the Free Menu <span class="s16">WINDOW</span>, that item is returned. Otherwise, <span class="s11">NIL </span>is returned.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s51" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Miscellaneous Functions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FM.REDISPLAYMENU </b><i>WINDOW</i>)                                      <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Redisplays the entire Free Menu in its <span class="s16">WINDOW</span>, if the <span class="s16">WINDOW </span>is open.</p><p class="s11" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FM.REDISPLAYITEM </b><i>ITEM WINDOW</i>)                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Redisplays a particular Free Menu <span class="s16">ITEM </span>in its <span class="s16">WINDOW</span>, if the <span class="s16">WINDOW </span>is open.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FM.SHADE </b><i>X SHADE WINDOW</i>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">X </span>can be an item, or a group ID. <span class="s16">SHADE </span>is painted on top of the item or group. Note that this is a temporary operation, and will be undone by redisplaying. For more permanent shading, the application may be able to add a <span class="s11">REDEDISPLAYFN </span>and <span class="s11">SCROLLFN </span>for the window as necessary to update the shading.</p><p class="s11" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FM.WHICHITEM </b><i>WINDOW POSorX Y</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Locates and identifies an item from its known location within the <span class="s16">WINDOW</span>. If <span class="s16">WINDOW </span>is</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="s11">NIL</span>, <span class="s11">(WHICHW) </span>is used, and if <span class="s16">POSorX </span>is <span class="s11">NIL</span>, the current cursor location is used.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FM.TOPGROUPID </b><i>WINDOW</i>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the ID of the top group of this Free Menu.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Free Menu Macros</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">These Accessing Macros are provided to allow the application to get and set information in the Free Menu data structures. They are implemented as macros so that the operation will compile into the actual access form, rather than figuring that out at run time.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FM.ITEMPROP </b><i>ITEM PROP {VALUE}</i>) <span class="p">[Macro]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Similar to <span class="s11">WINDOWPROP</span>, this macro provides an easy access to the fields of a Free Menu Item. The function <span class="s11">FM.GETITEM </span>gets the <span class="s16">ITEM</span>, described in Section 28.7.16, Accessing Function. <span class="s16">VALUE </span>is optional, and if not given, the current value of the <span class="s16">PROP </span>property will be returned. If <span class="s16">VALUE </span>is given, it will be used as the new value for that <span class="s16">PROP</span>, and the old value will be returned. When a call to <span class="s11">FM.ITEMPROP </span>is compiled, if the <span class="s16">PROP </span>is known (quoted in the calling form), the macro figures out what field to access, and the appropriate Data Type access form is compiled. However, if the <span class="s16">PROP </span>is not known at compile time, the function <span class="s11">FM.ITEMPROP</span>, which goes through the necessary property selection at run time, is compiled. The <span class="s11">TYPE </span>and <span class="s11">USERDATA </span>properties of a Free Menu Item are Read Only, and an error will result from trying to change the value of one of these properties.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FM.GROUPPROP </b><i>WINDOW GROUP PROP {VALUE</i><span class="s9">}</span>) <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Provides access to the Group Properties set up in the <span class="s16">PROPS </span>list for each group in the Free Menu Description. <span class="s16">GROUP </span>specifies the <span class="s11">ID </span>of the desired group, and <span class="s16">PROP </span>the name of the desired property. If <span class="s16">VALUE </span>is specified, it will become the new value of the property, and the old value will be returned. Otherwise, the current value is returned.</p><p class="s11" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<b>FM.MENUPROP </b><i>WINDOW PROP {VALUE</i><span class="s9">}</span>) <span class="p">[Macro]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Provides access to the group properties of the top-most group in the Free Menu, that is to say, the entire menu. This provides an easy way for the application to attach properties to the menu as a whole, as well as access the Group Properties for the entire menu.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<b>FM.NWAYPROP </b><i>WINDOW COLLECTION PROP {VALUE</i><span class="s9">}</span>)                     <span class="p">[Macro]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">This macro works just like <span class="s11">FM.GROUPPROP</span>, except it provides access to the <span class="s11">NWay </span>Collections.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Attached Windows                                                                                                                                                     </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The attached window facility makes it easy to manipulate a group of window as a unit. Standard window operations like moving, reshaping, opening, and closing can be done so that it appears to the user as if the windows are a single entity. Each collection of attached windows has one main window and any number of other windows that are &quot;attached&quot; to it. Moving or reshaping the main window causes all of the attached windows to be moved or reshaped as well. Moving or reshaping an attached window does not affect the main window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Attached windows can have other windows attached to them. Thus, it is possible to attach window A to window B when B is already attached to window C. Similarly, if A has other windows attached to it, it can still be attached to B.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 107pt;text-indent: -6pt;line-height: 80%;text-align: left;">(<span class="s15">ATTACHWINDOW </span><span class="s16">WINDOWTOATTACH MAINWINDOW EDGE POSITIONONEDGE WINDOWCOMACTION</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Associates <span class="s16">WINDOWTOATTACH </span>with <span class="s16">MAINWINDOW </span>so that window operations done to <span class="s16">MAINWINDOW </span>are also done to <span class="s16">WINDOWTOATTACH </span>(the exact set of window operations passed between main windows and attached windows is described in the Window Operations and Attached Windows section below). <span class="s12">ATTACHWINDOW </span>moves <span class="s16">WINDOWTOATTACH </span>to the correct position relative to <span class="s16">MAINWINDOW</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Note: A window can be attached to only one other window. Attaching a window to a second window will detach it from the first. Attachments can not form loops. That is, a window cannot be attached to itself or to a window that is attached to it. <span class="s12">ATTACHWINDOW </span>will generate an error if this is attempted.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s12">EDGE </span>determines which edge of <span class="s16">MAINWINDOW </span>the attached window is positioned along: it should be one of <span class="s12">TOP</span>, <span class="s12">BOTTOM</span>, <span class="s12">LEFT</span>, or <span class="s12">RIGHT</span>.  If <span class="s16">EDGE </span>is <span class="s12">NIL</span>, it defaults to <span class="s12">TOP</span>.</p><p class="s16" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">POSITIONONEDGE <span class="p">determines where along </span>EDGE <span class="p">the attached window is positioned. It should be one of the following:</span></p><p class="s12" style="padding-top: 6pt;padding-left: 132pt;text-indent: 6pt;text-align: left;">LEFT <span class="p">The attached window is placed on the left (of a </span>TOP <span class="p">or </span>BOTTOM <span class="p">edge).</span></p><p class="s12" style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">RIGHT  <span class="p">The  attached  window  is  placed  on  the  right  (of  a  </span>TOP <span class="p">or </span>BOTTOM</p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">edge).</p><p class="s12" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">BOTTOM <span class="p">The attached window is placed on the bottom (of a </span>LEFT <span class="p">or </span>RIGHT</p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">edge).</p><p class="s12" style="padding-top: 5pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">TOP <span class="p">The attached window is placed on the top (of a </span>LEFT <span class="p">or </span>RIGHT <span class="p">edge).</span></p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">CENTER <span class="p">The attached window is placed in the center of the edge.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">JUSTIFY</p><p style="padding-top: 6pt;padding-left: 85pt;text-indent: 0pt;line-height: 12pt;text-align: left;">or <span class="s12">NIL </span>The attached window is placed to fill the entire edge. <span class="s12">ATTACHWINDOW</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">reshapes the window if necessary.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Note: The width or height used to justify an attached window includes any other windows that have already been attached to <span class="s16">MAINWINDOW</span>. Thus <span class="s12">(ATTACHWINDOW BBB AAA ’RIGHT ’JUSTIFY) </span>followed by <span class="s12">(ATTACHWINDOW CCC AAA ’TOP ’JUSTIFY) </span>will put <span class="s12">CCC</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">across the top of both <span class="s12">BBB </span>and <span class="s12">AAA</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;"><span><img width="160" height="100" alt="image" src="Image_119.gif"/></span></p><p style="padding-top: 9pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="s16">WINDOWCOMACTION </span>provides a convenient way of specifying how <span class="s16">WINDOWTOATTACH </span>responds to right button menu commands. The window property <span class="s12">PASSTOMAINCOMS </span>determines which right button menu commands are directly applied to the attached window, and which are passed to the main window (see the Window Operations and Attached Windows section below). Depending on the value of <span class="s16">WINDOWCOMACTION</span>, the <span class="s12">PASSTOMAINCOMS </span>window property of <span class="s16">WINDOWTOATTACH </span>is set as follows:</p><p class="s12" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">NIL PASSTOMAINCOMS <span class="p">is set to </span>(CLOSEW MOVEW SHAPEW SHRINKW</p><p class="s12" style="padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">BURYW)<span class="p">, so right button menu commands to close, move, shape, shrink, and bury are passed to the main window, and all others are applied to the attached window.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">LOCALCLOSE PASSTOMAINCOMS <span class="p">is set to </span>(MOVEW SHAPEW SHRINKW</p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s12">BURYW)</span>, which is the same as when <span class="s16">WINDOWCOMACTION </span>is <span class="s12">NIL</span>, except that the attached window can be closed independently.</p><p class="s12" style="padding-top: 6pt;padding-left: 125pt;text-indent: -36pt;text-align: left;">HERE PASSTOMAINCOMS <span class="p">is set to </span>NIL<span class="p">, so all right button menu commands are applied to the attached window.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: -36pt;text-align: left;">MAIN PASSTOMAINCOMS <span class="p">is set to </span>T<span class="p">, so all right button menu commands are passed to the main window.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: left;">Note: If the user wants to set the <span class="s12">PASSTOMAINCOMS </span>window property of an attached window to something else, it must be done after the window is attached, since <span class="s12">ATTACHWINDOW </span>modifies this window property.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DETACHWINDOW </span><span class="s16">WINDOWTODETACH</span>) <span class="p">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">Detaches <span class="s16">WINDOWTODETACH </span>from its main window. Returns a dotted pair (<span class="s12">EDGE . POSITIONONEDGE</span>) if <span class="s16">WINDOWTODETACH </span>was an attached window, <span class="s12">NIL </span>otherwise. This does not close <span class="s16">WINDOWTODETACH</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">DETACHALLWINDOWS </span><span class="s16">MAINWINDOW</span>)                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Detaches and closes all windows attached to <span class="s16">MAINWINDOW</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">FREEATTACHEDWINDOW </span><span class="s16">WINDOW</span>)                                <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Detaches the attached window <span class="s16">WINDOW</span>. In addition, other attached windows above (in the case of a <span class="s12">TOP </span>attached window) or below (in the case of a <span class="s12">BOTTOM </span>attached window) are moved closer to the main window to fill the gap.</p><p style="padding-top: 5pt;padding-left: 150pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Note: Attached windows that &quot;reject&quot; the move operation (see</p><p class="s11" style="padding-left: 179pt;text-indent: 0pt;line-height: 12pt;text-align: left;">REJECTMAINCOMS <span class="p">below) are not moved.</span></p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Note: <span class="s11">FREEATTACHEDWINDOW </span>currently doesn’t handle <span class="s11">LEFT </span>or <span class="s11">RIGHT</span></p><p style="padding-left: 180pt;text-indent: 0pt;line-height: 12pt;text-align: left;">attached windows.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">REMOVEWINDOW </span><span class="s16">WINDOW</span>)                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Closes <span class="s16">WINDOW</span>, and calls <span class="s11">FREEATTACHEDWINDOW </span>to move other attached windows to fill any gaps.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">REPOSITIONATTACHEDWINDOWS </span><span class="s16">WINDOW</span>)                          <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Repositions every window attached to <span class="s16">WINDOW</span>, in the order that they were attached. This is useful as a <span class="s11">RESHAPEFN </span>for main windows with attached window that don’t want to be reshaped, but do want to keep their position relative to the main window when the main window is reshaped.</p><p style="padding-top: 5pt;padding-left: 150pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Note: Attached windows that &quot;reject&quot; the move operation (see</p><p class="s11" style="padding-left: 180pt;text-indent: 0pt;line-height: 12pt;text-align: left;">REJECTMAINCOMS <span class="p">below) are not moved.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MAINWINDOW </span><span class="s16">WINDOW RECURSEFLG</span>)                             <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">WINDOW </span>is not a window, it generates an error. If <span class="s16">WINDOW </span>is closed, it returns <span class="s16">WINDOW</span>. If <span class="s16">WINDOW </span>is not attached to another window, it returns <span class="s16">WINDOW </span>itself. If <span class="s16">RECURSEFLG </span>is <span class="s11">NIL </span>and <span class="s16">WINDOW </span>is attached to a window, it returns that window. If <span class="s16">RECURSEFLG </span>is <span class="s11">T</span>, it returns the first window up the &quot;main window&quot; chain starting at <span class="s16">WINDOW </span>that is not attached to any other window.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ATTACHEDWINDOWS </span><span class="s16">WINDOW COM</span>)                               <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the list of windows attached to <span class="s16">WINDOW</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">COM </span>is non-<span class="s11">NIL</span>, only those windows attached to <span class="s16">WINDOW </span>that do not reject the window operation <span class="s16">COM </span>are returned (see <span class="s11">REJECTMAINCOMS</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ALLATTACHEDWINDOWS </span><span class="s16">WINDOW</span>)                                <span class="p">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns a list of all of the windows attached to <span class="s16">WINDOW </span>or attached to a window attached to it.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">WINDOWREGION </span><span class="s16">WINDOW COM</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the screen region occupied by <span class="s16">WINDOW </span>and its attached windows, if it has any.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">COM </span>is non-<span class="s12">NIL</span>, only those windows attached to <span class="s16">WINDOW </span>that do not reject the window operation <span class="s16">COM </span>are considered in the calculation (see <span class="s12">REJECTMAINCOMS</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">WINDOWSIZE </span><span class="s16">WINDOW</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns the size of <span class="s16">WINDOW </span>and its attached windows (if any), as a dotted pair <span class="s12">(WIDTH</span></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">. HEIGHT)<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">MINATTACHEDWINDOWEXTENT </span><span class="s16">WINDOW</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Returns the minimum size that <span class="s16">WINDOW </span>and its attached windows (if any) will accept, as a dotted pair <span class="s12">(WIDTH . HEIGHT)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Attaching Menus To Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">The following functions are provided to associate menus to windows.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">MENUWINDOW </span><span class="s16">MENU VERTFLG</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns a closed window that has the menu <span class="s16">MENU </span>in it. If <span class="s16">MENU </span>is a list, a menu is created with <span class="s16">MENU </span>as its <span class="s12">ITEMS </span>menu field. Otherwise, <span class="s16">MENU </span>should be a menu. The returned window has the appropriate <span class="s12">RESHAPEFN</span>, <span class="s12">MINSIZE </span>and <span class="s12">MAXSIZE </span>window properties to allow its use in a window group.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If both the <span class="s12">MENUROWS </span>and <span class="s12">MENUCOLUMNS </span>fields of <span class="s16">MENU </span>are <span class="s12">NIL</span>, <span class="s16">VERTFLG </span>is used to set the default menu shape. If <span class="s16">VERTFLG </span>is non-<span class="s12">NIL</span>, the <span class="s12">MENUCOLUMNS </span>field of <span class="s16">MENU </span>will be set to 1 (the menu items will be listed vertically); otherwise the <span class="s12">MENUROWS </span>field of <span class="s16">MENU </span>will be set to 1 (the menu items will be listed horizontally).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">ATTACHMENU </span><span class="s16">MENU MAINWINDOW EDGE POSITIONONEDGE NOOPENFLG</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Creates a window that contains the menu <span class="s16">MENU </span>(by calling <span class="s16">MENUWINDOW</span>) and attaches it to the window <span class="s16">MAINWINDOW </span>on edge <span class="s16">EDGE </span>at position <span class="s16">POSITIONONEDGE</span>. The menu window is opened unless <span class="s16">MAINWINDOW </span>is closed, or <span class="s16">NOOPENFLG </span>is <span class="s12">T</span>.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s12">EDGE </span>is either <span class="s12">LEFT </span>or <span class="s12">RIGHT</span>, <span class="s12">MENUWINDOW </span>will be called with <span class="s12">VERTFLG = T</span>, so the menu items will be listed vertically; otherwise the menu items will be listed horizontally. These defaults can be overridden by specifying the <span class="s12">MENUROWS </span>or <span class="s12">MENUCOLUMNS </span>fields in <span class="s16">MENU</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">CREATEMENUEDWINDOW </span><span class="s16">MENU WINDOWTITLE LOCATION WINDOWSPEC</span>) <span class="p">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: justify;">Creates a window with an attached menu and returns the main window. <span class="s16">MENU </span>is the only required argument, and may be a menu or a list of menu items. <span class="s16">WINDOWTITLE </span>is a string specifying the title of the main window. <span class="s16">LOCATION </span>specifies the edge on which to place the menu; the default is <span class="s12">TOP</span>. <span class="s16">WINDOWSPEC </span>is a region specifying a region for the aggregate window; if <span class="s12">NIL</span>, the user is prompted for a region.</p><p style="padding-top: 9pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Examples:</p><p class="s12" style="padding-top: 8pt;padding-left: 174pt;text-indent: -12pt;line-height: 88%;text-align: left;">(SETQ MENUW (MENUWINDOW</p><p class="s12" style="padding-left: 192pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(create MENU</p><p class="s12" style="padding-left: 210pt;text-indent: 0pt;line-height: 77%;text-align: left;">ITEMS <span class="s4"></span><span class="s5"> </span>’(smaller LARGER) MENUFONT <span class="s4"></span><span class="s5"> </span>’(MODERN 12)</p><p class="s12" style="padding-left: 210pt;text-indent: 0pt;line-height: 77%;text-align: left;">TITLE <span class="s4"></span><span class="s5"> </span>&quot;zoom controls&quot; CENTERFLG <span class="s4"></span><span class="s5"> </span>T</p><p class="s12" style="padding-left: 210pt;text-indent: 0pt;line-height: 10pt;text-align: left;">WHENSELECTEDFN <span class="s4"></span><span class="s5"> </span>(FUNCTION ZOOMMAINWINDOW))))</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">creates (but does not open) a menu window that contains the two items &quot;<span class="s12">smaller</span>&quot; and &quot;<span class="s12">LARGER</span>&quot; with the title &quot;zoom controls&quot; and that calls the function <span class="s12">ZOOMMAINWINDOW </span>when an item is selected. Note that the menu items will be listed horizontally, because <span class="s12">MENUWINDOW </span>is called with <span class="s12">VERTFLG = NIL</span>, and the menu does not specify either a <span class="s12">MENUROWS </span>or <span class="s12">MENUCOLUMNS </span>field.</p><p class="s12" style="padding-top: 7pt;padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(ATTACHWINDOW MENUW</p><p class="s12" style="padding-left: 180pt;text-indent: 0pt;line-height: 88%;text-align: left;">(CREATEW ’(50 50 150 50)) ’TOP</p><p class="s12" style="padding-left: 180pt;text-indent: 0pt;line-height: 10pt;text-align: left;">’JUSTIFY)</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">creates a window on the screen and attaches the above created menu window to its top:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 258pt;text-indent: 0pt;text-align: left;"><span><img width="150" height="75" alt="image" src="Image_120.gif"/></span></p><p class="s12" style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(CREATEMENUEDWINDOW</p><p class="s12" style="padding-left: 180pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(create MENU</p><p class="s12" style="padding-left: 198pt;text-indent: 0pt;line-height: 77%;text-align: left;">ITEMS <span class="s4"></span><span class="s5"> </span>’(smaller LARGER) MENUFONT <span class="s4"></span><span class="s5"> </span>’(MODERN 12)</p><p class="s12" style="padding-left: 198pt;text-indent: 0pt;line-height: 77%;text-align: left;">TITLE <span class="s4"></span><span class="s5"> </span>&quot;zoom controls&quot; CENTERFLG <span class="s4"></span><span class="s5"> </span>T</p><p class="s12" style="padding-left: 198pt;text-indent: 0pt;line-height: 10pt;text-align: left;">WHENSELECTEDFN <span class="s4"></span><span class="s5"> </span>(FUNCTION ZOOMMAINWINDOW))))</p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">creates the same sort of window in one step, prompting the user for a region.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Attached Prompt Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Many packages have a need to display status information or prompt for small amounts of user input in a place outside their standard window. A convenient way to do this is to attach a small window to the top of the program’s main window. The following functions do so in a uniform way that can be depended on among diverse applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETPROMPTWINDOW </span><span class="s16">MAINWINDOW #LINES FONT DONTCREATE</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the attached prompt window associated with <span class="s16">MAINWINDOW</span>, creating it if necessary. The window is always attached to the top of <span class="s16">MAINWINDOW</span>, has <span class="s12">DSPSCROLL </span>set to <span class="s12">T</span>, and has a <span class="s12">PAGEFULLFN </span>of <span class="s12">NILL </span>to inhibit page holding. The window is at least <span class="s16">#LINES </span>lines high (default 1); if a pre-existing window is shorter than that, it is reshaped to make it large enough. <span class="s16">FONT </span>is the font to give the prompt window (defaults to the font of <span class="s16">MAINWINDOW</span>), and applies only when the window is first created. If <span class="s16">DONTCREATE </span>is true, returns the window if it exists, otherwise NIL without creating any prompt window.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">REMOVEPROMPTWINDOW </span><span class="s16">MAINWINDOW</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Detaches the attached prompt window associated with <span class="s16">MAINWINDOW </span>(if any), and closes it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Window Operations And Attached Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">When a window operation, such as moving or clearing, is performed on a window, there is a question about whether or not that operation should also be performed on the windows attached to it or performed on the window it is attached to. The &quot;right&quot; thing to do depends on the window operation: it makes sense to independently redisplay a single window in a collection of windows, whereas moving a single window usually implies moving the whole group of windows. The interpretation of window operations also depends on the application that the window group is used for. For some applications, it may be desirable to have a window group where individual windows can be moved away from the group, but still be conceptually attached to the group for other operations. The attached window facility is flexible enough to allow all of these possibilities.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The operation of window operations can be specified by each attached window, by setting the following two window properties:</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">PASSTOMAINCOMS <span class="p">[Window Property]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Value is a list of window commands (e.g. <span class="s12">CLOSEW</span>, <span class="s12">MOVEW</span>) which, when selected from the attached window’s right-button menu, are actually applied to the central window in the group, instead of being applied to the attached window itself. The &quot;central window&quot; is the first window up the &quot;main window&quot; chain that is not attached to any other window.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s12">PASSTOMAINCOMS </span>is <span class="s12">NIL</span>, all window operations are directly applied to the attached window. If <span class="s12">PASSTOMAINCOMS </span>is <span class="s12">T</span>, all window operations are passed to the central window.</p><p style="padding-top: 6pt;padding-left: 107pt;text-indent: -30pt;line-height: 94%;text-align: justify;">Note: <span class="s12">ATTACHWINDOW </span>allows this window property to be set to commonly-used values by using its <span class="s12">WINDOWCOMACTION </span>argument. <span class="s12">ATTACHWINDOW </span>always sets this window property, so users must modify it directly only after attaching the window to another window.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">REJECTMAINCOMS <span class="p">[Window Property]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Value is a list of window commands that the attached window will not allow the main window to apply to it. This is how a window can say &quot;leave me out of this group operation.&quot;</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s12">REJECTMAINCOMS </span>is <span class="s12">NIL</span>, all window commands may be applied to this attached window. If <span class="s12">REJECTMAINCOMS </span>is <span class="s12">T</span>, no window commands may be applied to this attached window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s12">PASSTOMAINCOMS </span>and <span class="s12">REJECTMAINCOMS </span>window properties affect right-button menu operations applied to main windows or attached windows, and the action of programmatic window functions (<span class="s12">SHAPEW</span>, <span class="s12">MOVEW</span>, etc.) applied to main windows. However, these window properties do not affect the action of window functions applied to attached windows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">The following list describes the behavior of main and attached windows under the window operations, assuming that all attached windows have their <span class="s12">REJECTMAINCOMS </span>window property set to <span class="s12">NIL </span>and <span class="s12">PASSTOMAINCOMS </span>set to (<span class="s12">CLOSEW MOVEW SHAPEW SHRINKW BURYW</span>) (the default if <span class="s12">ATTACHWINDOW </span>is called with <span class="s12">WINDOWCOMACTION = NIL</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">The behavior for any particular operation can be changed for particular attached windows by setting the standard window properties (e.g., <span class="s12">MOVEFN </span>or <span class="s12">CLOSEFN</span>) of the attached window. An exception is the <span class="s12">TOTOPFN </span>property of an attached window, that is set to bring the whole window group to the top and should not be set by the user (although users can add functions to the <span class="s12">TOTOPFN </span>window property).</p><p class="s12" style="padding-top: 6pt;padding-left: 173pt;text-indent: -36pt;line-height: 93%;text-align: justify;">Move <span class="p">If the main window moves, all attached windows move with it, and the relative positioning between the main window and the attached windows is maintained. If the region is determined interactively, the prompt region for the move is the union of the extent of the main window and all attached windows (excluding those with </span>MOVEW <span class="p">in their </span>REJECTMAINCOMS <span class="p">window property).</span></p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If an attached window is moved by calling the function <span class="s12">MOVEW</span>, it is moved without affecting the main window. If the right-button window menu command Move is called on an attached window, it is passed on to the main window, so that all windows in the group move.</p><p class="s12" style="padding-top: 6pt;padding-left: 174pt;text-indent: -54pt;line-height: 93%;text-align: justify;">Reshape <span class="p">If the main window is reshaped, the minimum size of it and all of its attached windows is used as the minimum of the space for the result. Any space greater than the minimum is distributed among the main window and its attached windows. Attached windows with </span>SHAPEW <span class="p">on their </span>REJECTMAINCOMS <span class="p">window property are ignored when finding the minimum size, creating a &quot;ghost&quot; region, or distributing space after a reshape.</span></p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: 0pt;line-height: 92%;text-align: justify;">If an attached window is reshaped by calling the function <span class="s12">SHAPEW</span>, it is reshaped independently. If the right-button window menu command Shape is called on an attached window, it is passed on to the main window, so the whole group is reshaped.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Note: Reshaping the main window will restore the conditions established by the call to <span class="s12">ATTACHWINDOW</span>, whereas moving the main window does not. Thus, if A is attached to the top of B and then moved by the user, its new position relative to B will be maintained if B is moved. If B is reshaped, A will be reshaped to the top of B. Additionally, if, while A is moved away from the top of B, C is attached to the top of B, C will position itself above where A used to be.</p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: -42pt;line-height: 93%;text-align: justify;">Close <span class="p">If the main window is closed, all of the attached windows are closed also and the links from the attached windows to the mainwindow are broken. This is necessary for the windows to be garbage collected.</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If an attached window is closed by calling the function <span class="s12">CLOSEW</span>, it is closed without affecting the main window. If the right-button window menu command <span class="s12">Close </span>is called on an attached window, it is passed on to the main window. Note that closing an attached window detaches it.</p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: -36pt;text-align: justify;">Open <span class="p">If the main window is opened, it opens all attached windows and reestablishes links from them to the main window.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Attached windows can be opened independently and this does not affect the main window. Note that it is possible to reopen a closed attached window and not have it linked to its main window.</p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: -48pt;line-height: 93%;text-align: justify;">Shrink <span class="p">The collection of windows shrinks as a group. The </span>SHRINKFN<span class="p">s of the attached windows are evaluated but the only icon displayed is the one for the main window.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 60pt;text-indent: 0pt;text-align: justify;">Redisplay <span class="p">The main or attached windows can be redisplayed independently.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: -42pt;text-align: justify;">Totop <span class="p">If any main or attached window is brought to the top, all of the other windows are brought to the top also.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Expand <span class="p">Expanding any of the windows expands the whole collection.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 60pt;text-indent: 0pt;text-align: justify;">Scrolling <span class="p">All of the windows involved in the group scroll independently.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 84pt;text-indent: 0pt;text-align: left;">Clear <span class="p">All windows clear independently of each other.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Window Properties Of Attached Windows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Windows that are involved in a collection either as a main window or as an attached window have properties stored on them. The only properties that are intended to be set be set by the user are the <span class="s12">MINSIZE</span>, <span class="s12">MAXSIZE</span>, <span class="s12">PASSTOMAINCOMS</span>, and <span class="s12">REJECTMAINCOMS </span>window properties. The other properties should be considered read only.</p><p class="s15" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">MINSIZE <span class="p">[Window Property]</span></p><p class="s15" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">MAXSIZE <span class="p">[Window Property]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Each of these window properties should be a dotted pair <span class="s12">(WIDTH . HEIGHT) </span>or a function to apply to the window that returns a dotted pair. The numbers are used when the main window is reshaped. The <span class="s12">MINSIZE </span>is used to determine the size of the smallest region acceptable during reshaping. Any amount greater than the collective minimum is spread evenly among the windows until each reaches <span class="s12">MAXSIZE</span>. Any excess is given to the main window.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If you give the main window of an attached window group a <span class="s12">MINSIZE </span>or <span class="s12">MAXSIZE </span>property, its value is moved to the <span class="s12">MAINWINDOWMINSIZE </span>or <span class="s12">MAINWINDOWMAXSIZE </span>property, so that the main window can be given a size function that computes the minimum or maximum size of the entire group. Thus, if you want to change the main window’s minimum or maximum size after attaching windows to it, you should change the <span class="s12">MAINWINDOWMINSIZE </span>or <span class="s12">MAINWINDOWMAXSIZE </span>property instead.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 2pt;line-height: 94%;text-align: justify;">This doesn’t address the hard problem of overlapping attached windows side to side, for example if window A was attached as [<span class="s12">TOP</span>, <span class="s12">LEFT</span>] and B as [<span class="s12">TOP</span>, <span class="s12">RIGHT</span>]. Currently, the attached window functions do not worry about the overlap.</p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The default <span class="s12">MAXSIZE </span>is <span class="s12">NIL</span>, which will let the region grow indefinitely.</p><p class="s15" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">MAINWINDOW                                              <span class="p">[Window  Property]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Pointer from attached windows to the main window of the group. This link is not available if the main window is closed. The function <span class="s12">MAINWINDOW </span>is the preferred way to access this property.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">ATTACHEDWINDOWS                                         <span class="p">[Window  Property]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Pointer from a window to its attached windows. The function <span class="s12">ATTACHEDWINDOWS </span>is the preferred way to access this property.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">WHEREATTACHED                                           <span class="p">[Window  Property]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 93%;text-align: justify;">For attached windows, a dotted pair (<span class="s12">EDGE . POSITIONONEDGE</span>) giving the edge and position on the edge that determine how the attached window is placed relative to its main window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">The <span class="s12">TOTOPFN </span>window property on attached windows and the properties <span class="s12">TOTOPFN</span>, <span class="s12">DOSHAPEFN</span>, <span class="s12">MOVEFN</span>, <span class="s12">CLOSEFN</span>, <span class="s12">OPENFN</span>, <span class="s12">SHRINKFN</span>, <span class="s12">EXPANDFN </span>and <span class="s12">CALCULATEREGIONFN </span>on main</p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">windows contain functions that implement the attached window manipulation facilities. Care should be used in modifying or replacing these properties.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Communication of Window Menu Commands between Attached Windows is dependent on the name of function used to implement the window command, e.g., <span class="s12">CLOSEW </span>implements <span class="s12">CLOSE </span>(refer to <span class="s12">PASSTOMAINCOMS </span>documentation under Attached Windows). Consequently, if an application intercepts a window command by changing <span class="s12">WHENSELECTEDFN </span>for an item in the WindowMenu (for example, to advise the application that a window is being closed), windows may not behave correctly when attached to other windows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">WINDOWS AND MENUS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">To get around this problem, the Medley release provides the variable <span class="s12">*attached-window- command-synonyms*</span>. This variable is an alist, where each element is of the form (new- command-function-name . old-command-function-name).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">For example, if an application redefines the WindowMenu to call my-close-window when <span class="s12">CLOSE </span>is selected, that application should:</p><p class="s12" style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 106%;text-align: left;">(cl:push ’(my-close-window . il:closew) il:*attached-window- command-synonyms*)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 12pt;text-align: left;">in order to tell the attached window system that my-close-window is a synonym function for</p><p class="s12" style="padding-left: 30pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CLOSEW<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-top: 4pt;padding-left: 28pt;text-indent: -22pt;text-align: left;"><a name="bookmark32">HARDCOPY FACILITIES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="637" height="3" alt="image" src="Image_121.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Interlisp-D includes facilities for generating hardcopy in &quot;Interpress&quot; format and &quot;Press&quot; format. Interpress is a file format used for communicating documents to Xerox Network System printers such as the Xerox 8044 and Xerox 5700. Press is a file format used for communicating documents to Xerox laser Xerographic printers known by the names &quot;Dover&quot;, &quot;Spruce&quot;, &quot;Penguin&quot;, and &quot;Raven&quot;. There are also library packages available for supporting other types of printer formats (4045, FX-80, C150, etc.). The hardcopy facilities are designed to allow the user to support new types of printers with minimal changes to the user interface.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Files can be in a number of formats, including Interpress files, plain text files, and formatted Tedit files. In order to print a file on a given printer, it is necessary to identify the format of the file, convert the file to a format that the printer can accept, and transmit it. Rather than require that the user explicitly determine file types and do the conversion, the Interlisp-D hardcopy functions generate Interpress or other format output depending on the appropriate choice for the designated printer.  The hardcopy functions use the variables <span class="s12">PRINTERTYPES </span>and <span class="s12">PRINTFILETYPES </span>(described below) to determine the type of a file, how to convert it for a given printer, and how to send it. By changing these variables, the user can define other kinds of printers and print to them using the normal hardcopy functions.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SEND.FILE.TO.PRINTER </span><span class="s16">FILE HOST PRINTOPTIONS</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The function <span class="s12">SEND.FILE.TO.PRINTER </span>causes the file <span class="s16">FILE </span>to be sent to the printer <span class="s16">HOST</span>. If <span class="s16">HOST </span>is <span class="s12">NIL</span>, the first host in the list <span class="s12">DEFAULTPRINTINGHOST </span>which can print <span class="s16">FILE </span>is used.</p><p class="s12" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">PRINTOPTIONS </span><span class="p">is a property list of the form </span>(PROP<span class="s57">1 </span>VALUE<span class="s57">1 </span>PROP<span class="s57">2 </span>VALUE<span class="s57">2</span></p><p class="s12" style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">...)<span class="p">. The properties accepted depends on the type of printer. For Interpress printers, the following properties are accepted:</span></p><p class="s12" style="padding-top: 7pt;padding-left: 125pt;text-indent: -90pt;text-align: left;">DOCUMENT.NAME <span class="p">The document name to appear on the header page (a string). Default is the full name of the file.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 125pt;text-indent: -120pt;text-align: justify;">DOCUMENT.CREATION.DATE <span class="p">The creation date to appear on the header page (a Lisp integer date, such as returned by </span>IDATE<span class="p">). The default value is the creation date of the file.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 126pt;text-indent: -78pt;text-align: left;">SENDER.NAME <span class="p">The name of the sender to appear on the header page (a string). The default value is the name of the user.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 126pt;text-indent: -96pt;text-align: left;">RECIPIENT.NAME <span class="p">The name of the recipient to appear on the header page (a string). The default is none.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 126pt;text-indent: -54pt;line-height: 106%;text-align: left;">MESSAGE <span class="p">An additional message to appear on the header page (a string). The default is none</span><span class="s5">.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 71pt;text-indent: 0pt;text-align: justify;">#COPIES <span class="p">The number of copies to be printed. The default value is 1.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 7pt;padding-left: 173pt;text-indent: -96pt;line-height: 93%;text-align: justify;">PAGES.TO.PRINT <span class="p">The pages of the document that should be printed, represented as a list </span>(FIRSTPAGE# LASTPAGE#)<span class="p">. For example, if this option is (3 5), this specifies that pages 3 through 5, inclusive, should be printed. Note that the page numbering used for this purpose has no connection to any page numbers that may be printed on the document. The default is to print all of the pages in the document.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 173pt;text-indent: -48pt;text-align: justify;">MEDIUM <span class="p">The medium on which the master is to be printed. If omitted, this defaults to the value of </span>NSPRINT.DEFAULT.MEDIUM<span class="p">, as follows: </span>NIL <span class="p">means to use the printer’s default; </span>T <span class="p">means to use the first medium reported available by the printer; any other value must be a Courier value of type </span>MEDIUM<span class="p">. The format of this type is a list </span>(PAPER (KNOWN.SIZE TYPE)) or (PAPER (OTHER.SIZE (WIDTH LENGTH)))<span class="p">. The paper </span>TYPE <span class="p">is one of </span>US.LETTER<span class="p">, </span>US.LEGAL<span class="p">, </span>A0</p><p style="padding-left: 174pt;text-indent: 0pt;text-align: justify;">through <span class="s12">A10</span>, <span class="s12">ISO</span>.<span class="s12">B0 </span>through <span class="s12">ISO</span>.<span class="s12">B10</span>, and <span class="s12">JIS.B0 </span>through <span class="s12">JIS.B10</span>. For users who use A4 paper exclusively, it should be sufficient to set <span class="s12">NSPRINT.DEFAULT.MEDIUM </span>to <span class="s12">(PAPER (KNOWN.SIZE &quot;A4&quot;))</span>.</p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: 0pt;line-height: 94%;text-align: justify;">When using different paper sizes, it may be necessary to reset the variable <span class="s12">DEFAULTPAGEREGION</span>, the region on the page used for printing (measured in micas from the lower-left corner).</p><p class="s12" style="padding-top: 7pt;padding-left: 120pt;text-indent: 0pt;text-align: justify;">STAPLE? <span class="p">True if the document should be stapled.</span></p><p class="s12" style="padding-top: 8pt;padding-left: 174pt;text-indent: -48pt;text-align: justify;">#SIDES <span class="p">1 or 2 to indicate that the document should be printed on one or two sides, respectively.  The default is the value of </span>EMPRESS#SIDES<span class="p">.</span></p><p class="s12" style="padding-top: 8pt;padding-left: 173pt;text-indent: -60pt;text-align: left;">PRIORITY <span class="p">The priority of this print request, one of </span>LOW<span class="p">, </span>NORMAL<span class="p">, or </span>HIGH<span class="p">. The default is the printer’s default.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><span class="p">Note: Press printers only recognize the options </span>#COPIES<span class="s5">, </span>#SIDES<span class="s5">, </span>DOCUMENT.CREATION.DATE<span class="s5">, and </span>DOCUMENT.NAME<span class="s5">.</span></p><p style="padding-top: 5pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">For example,</p><p class="s12" style="padding-top: 7pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">(SEND.FILE.TO.PRINTER ’FOO NIL</p><p class="s12" style="padding-top: 7pt;padding-left: 180pt;text-indent: 0pt;text-align: left;">’(#COPIES 3 #SIDES 2 DOCUMENT.NAME &quot;For John&quot;))</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s12">SEND.FILE.TO.PRINTER </span>calls <span class="s12">PRINTERTYPE </span>and <span class="s12">PRINTFILETYPE </span>to determine the printer type of <span class="s16">HOST </span>and the file format of <span class="s16">FILE</span>. If <span class="s16">FILE </span>is a formatted file already in a form that the printer can print, it is transmitted directly. Otherwise, <span class="s12">CONVERT.FILE.TO.TYPE.FOR.PRINTER </span>is called to do the conversion. [Note: If the file is converted, <span class="s12">PRINTOPTIONS </span>is passed to the formatting function, so it can include properties such as <span class="s12">HEADING</span>, <span class="s12">REGION</span>, and <span class="s12">FONTS</span>.] All of these functions use the lists <span class="s12">PRINTERTYPES </span>and <span class="s12">PRINTFILETYPES </span>to actually determine how to do the conversion.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">HARDCOPY FACILITIES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">LISTFILES <span class="p">(Chapter 17) calls the function </span>LISTFILES1 <span class="p">to send a single file to a hardcopy printing device. Interlisp-D is initialized with </span>LISTFILES1 <span class="p">defined to call </span>SEND.FILE.TO.PRINTER<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 59pt;text-indent: -6pt;line-height: 80%;text-align: left;">(<span class="s15">HARDCOPYW </span><span class="s16">WINDOW/BITMAP/REGION FILE HOST SCALEFACTOR ROTATION PRINTERTYPE HARDCOPYTITLE</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Creates a hardcopy file from a bitmap and optionally sends it to a printer. Note that some printers may have limitations concerning how big or how &quot;complicated&quot; the bitmap may be printed.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s16">WINDOW/BITMAP/REGION </span>can either be a <span class="s16">WINDOW </span>(open or closed), a <span class="s16">BITMAP</span>, or a <span class="s16">REGION </span>(interpreted as a region of the screen). If <span class="s16">WINDOW/BITMAP/REGION </span>is <span class="s12">NIL</span>, the user is prompted for a screen region using <span class="s12">GETREGION</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FILE </span>is non-<span class="s12">NIL</span>, it is used as the name of the file for output. If <span class="s16">HOST </span><span class="s12">= NIL</span>, this file is not printed. If <span class="s16">FILE </span>is <span class="s12">NIL</span>, a temporary file is created, and sent to <span class="s16">HOST</span>.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">To save an image on a file without printing it, perform <span class="s12">(HARDCOPYW IMAGE FILE)</span>. To print an image to the printer PRINTER without saving the file, perform <span class="s12">(HARDCOPYW IMAGE NIL PRINTER)</span>.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If both <span class="s16">FILE </span>and <span class="s16">HOST </span>are <span class="s12">NIL</span>, the default action is to print the image, without saving the file. The printer used is determined by the argument <span class="s12">PRINTERTYPE </span>and the value of the variable <span class="s12">DEFAULTPRINTINGHOST</span>. If <span class="s12">PRINTERTYPE </span>is non-<span class="s12">NIL</span>, the first host on <span class="s12">DEFAULTPRINTINGHOST </span>of the type <span class="s12">PRINTERTYPE </span>is used. If <span class="s12">PRINTERTYPE </span>is NIL, the first printer on <span class="s12">DEFAULTPRINTINGHOST </span>that implements the <span class="s12">BITMAPSCALE </span>(as determined by <span class="s12">PRINTERTYPES</span>) operation is used, if any. Otherwise, the first printer on <span class="s12">DEFAULTPRINTINGHOST </span>is used.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The type of hardcopy file produced is determined by HOST if non-<span class="s12">NIL</span>, else by <span class="s12">PRINTERTYPE </span>if non-<span class="s12">NIL</span>, else by the value of <span class="s12">DEFAULTPRINTINGHOST</span>, as described above.</p><p class="s16" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">SCALEFACTOR <span class="p">is a reduction factor. If not given, it is computed automatically based on the size of the bitmap and the capabilities of the printer type. This may not be supported for some printers.</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s16">ROTATION </span>specifies how the bitmap image should be rotated on the printed page. Most printers (including Interpress printers) only support a <span class="s12">ROTATION </span>of multiples of 90.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s16">PRINTERTYPE </span>specifies what type of printer to use when <span class="s12">HOST </span>is <span class="s12">NIL</span>. <span class="s12">HARDCOPYW </span>uses this information to select which printer to use or what print file format to convert the output into, as described above.</p><p style="padding-top: 7pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The background menu contains a &quot;Hardcopy&quot; command (Chapter 28) that prompts the user for a region on the screen, and sends the image to the default printer.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Hardcopy output may also be obtained by writing a file on the printer device <span class="s12">LPT</span>, e.g. <span class="s12">(COPYFILE ’FOO ’{LPT})</span>. When a file on this device is closed, it is converted to Interpress or some other format (if necessary) and sent to the default printer (the first host</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">on <span class="s12">DEFAULTPRINTINGHOST</span>). One can include the printer name directly in the file name, e.g. <span class="s12">(COPYFILE ’FOO {LPT}TREMOR:) </span>will send the file to the printer <span class="s12">TREMOR:</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">HARDCOPYTITLE </span>is a string specifying a title to print on the page containing the screen image. If <span class="s12">NIL</span>, the string &quot;Window Image&quot; is used. To omit a title, specify the null string.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">PRINTERSTATUS </span><span class="s16">PRINTER</span>)                                    <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Returns a list describing the current status of the printer named <span class="s16">PRINTER</span>. The exact form of the value returned depends on the type of printer. For InterPress printers, the status describes whether the printer is available or busy or needs attention, and what type of paper is loaded in the printer.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns <span class="s12">NIL </span>if the printer does not respond in a reasonable time, which can occur if the printer is very busy, or does not implement the printer status service.</p><p class="s15" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">DEFAULTPRINTINGHOST                                            <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The variable <span class="s12">DEFAULTPRINTINGHOST </span>is used to designate the default printer to be used as the output of printing operations. It should be a list of the known printer host names, for example, <span class="s12">(QUAKE LISPPRINT:)</span>. If an element of <span class="s12">DEFAULTPRINTINGHOST </span>is a list, is interpreted as <span class="s12">(PRINTERTYPE HOST)</span>, specifying both the host type and the host name. The type of the printer, which determines the protocol used to send to it and the file format it requires, is determined by the function <span class="s12">PRINTERTYPE</span>.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s12">DEFAULTPRINTINGHOST </span>is a single printer name, it is treated as if it were a list of one element.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">PRINTFILETYPE </span><span class="s16">FILE —</span>)                                     <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Returns the format of the file <span class="s16">FILE</span>. Possible values include <span class="s12">INTERPRESS</span>, <span class="s12">TEDIT</span>, etc. If  it cannot determine the file type, it returns NIL. Uses the global variable <span class="s12">PRINTFILETYPES</span>.</p><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">PRINTERTYPE </span><span class="s16">HOST</span>)                                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the type of the printer <span class="s16">HOST</span>. Currently uses the following heuristic:</p><ol id="l72"><li><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -18pt;line-height: 12pt;text-align: left;">If <span class="s16">HOST </span>is a list, the <span class="s12">CAR </span>is assumed to be the printer type and <span class="s12">CADR</span></p><p style="padding-left: 180pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the name of the printer</p></li><li><p style="padding-top: 6pt;padding-left: 179pt;text-indent: -18pt;text-align: left;">If <span class="s16">HOST </span>is a litatom with a non-<span class="s12">NIL PRINTERTYPE </span>property, the property value is returned as the printer type</p></li><li><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -18pt;text-align: left;">If <span class="s16">HOST </span>contains a colon (e.g., <span class="s12">PRINTER:PARC:XEROX) </span>it is assumed to be an <span class="s12">INTERPRESS </span>printer</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 362pt;text-indent: 0pt;text-align: left;">HARDCOPY FACILITIES</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 132pt;text-indent: -18pt;line-height: 12pt;text-align: left;">If <span class="s16">HOST </span>is the <span class="s12">CADR </span>of a list on <span class="s12">DEFAULTPRINTINGHOST</span>, the <span class="s12">CAR</span></p><p style="padding-left: 132pt;text-indent: 0pt;line-height: 12pt;text-align: left;">is returned as the printer type</p></li><li><p style="padding-top: 6pt;padding-left: 132pt;text-indent: -18pt;text-align: left;">Otherwise, the value of <span class="s12">DEFAULTPRINTERTYPE </span>is returned as the printer type.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Low-level Hardcopy Variables                                                                                                                          </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following variables are used to define how Interlisp should generate hardcopy of different types. The user should only need to change these variables when it is necessary to access a new type of printer, or define a new hardcopy document type (not often).</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">PRINTERTYPES <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The characteristics of a given printer are determined by the value of the list</p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">PRINTERTYPES<span class="p">. Each element is a list of the form</span></p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 87%;text-align: left;">(TYPES (PROPERTY<span class="s57">1 </span>VALUE<span class="s57">1</span>) (PROPERTY<span class="s57">2 </span>VALUE<span class="s57">2</span>)</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;">...)</p><p class="s12" style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">TYPES <span class="p">is a list of the printer types that this entry addresses. The </span>(PROPERTY<span class="s45">n </span>VALUE<span class="s57">n</span>) <span class="p">pairs define properties associated with each printer type.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">The printer properties include the following:</p><p class="s12" style="padding-top: 7pt;padding-left: 25pt;text-indent: 0pt;text-align: center;">CANPRINT  <span class="p">Value is a list of the file types that the printer can print directly.</span></p><p class="s12" style="padding-top: 8pt;padding-left: 126pt;text-indent: -48pt;text-align: left;">STATUS <span class="p">Value is a function that knows how to find out the status of the printer, used by </span>PRINTERSTATUS<span class="p">.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 30pt;text-indent: 0pt;text-align: center;">PROPERTIES  <span class="p">Value is a function which returns a list of known printer properties.</span></p><p class="s12" style="padding-top: 8pt;padding-left: 126pt;text-indent: -36pt;text-align: left;">SEND <span class="p">Value is a function which invokes the appropriate protocol to send a file to the printer.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 126pt;text-indent: -78pt;text-align: left;">BITMAPSCALE <span class="p">Value is a function of arguments </span>WIDTH <span class="p">and </span>HEIGHT <span class="p">in bits which returns a scale factor for scaling a bitmap.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 126pt;text-indent: -72pt;text-align: left;">BITMAPFILE <span class="p">Value is a form which, when evaluated, converts a bitmap to a file format that the printer will accept.</span></p><p style="padding-top: 6pt;padding-left: 131pt;text-indent: -30pt;text-align: justify;">Note: The name 8044 is defined on <span class="s12">PRINTERTYPES </span>as a synonym for the <span class="s12">INTERPRESS </span>printer type. The names <span class="s12">SPRUCE</span>, <span class="s12">PENGUIN</span>, and <span class="s12">DOVER </span>are defined on <span class="s12">PRINTERTYPES </span>as synonyms for the <span class="s12">PRESS </span>printer type. The printer types <span class="s12">FULLPRESS </span>and <span class="s12">RAVEN </span>are also defined the same as <span class="s12">PRESS</span>, except that these printer types indicate that the printer is a &quot;Full Press&quot; printer that is able to scale bitmap images, in addition to the normal Press printer facilities.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">PRINTFILETYPES <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The variable <span class="s12">PRINTFILETYPES </span>contains information about various file formats, such as Tedit files and Interpress files. The format is similar to <span class="s12">PRINTERTYPES</span>. The properties that can be specified include:</p><p class="s12" style="padding-top: 7pt;padding-left: 174pt;text-indent: -36pt;text-align: left;">TEST <span class="p">Value is a function which tests a file if it is of the given type. Note that this function is passed an open stream.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 174pt;text-indent: -72pt;text-align: left;">CONVERSION <span class="p">Value is a property list of other file types and funcitons that convert from the specified type to the file format.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">EXTENSION <span class="p">Value is a list of possible file extensions for files of this type.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-top: 4pt;padding-left: 25pt;text-indent: -19pt;text-align: left;"><a name="bookmark33">TERMINALINPUT/OUTPUT</a></p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="637" height="3" alt="image" src="Image_122.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Most input / output operations in Interlisp can be simply modeled as reading or writing on a linear stream of bytes. However, the situation is much more complex when it comes to controlling the user’s &quot;terminal,&quot; which includes the keyboard, the mouse, and the display screen. For example, Interlisp coordinates the operation of these separate I / O devices so that the cursor on the screen moves as the mouse moves, and any characters typed by the user appear in the window currently containing a flashing cursor.  Most of the time, this system works correctly without need for user modification.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The purpose of this chapter is to describe how to access the low-level controls for the terminal I / O devices. It documents the use of interrupt characters, the keyboard characters that generate interrupts. Then, it describes terminal tables, used to determine the meaning of the different editing characters (character delete, line delete, etc.). Then, the &quot;dribble file&quot; facility that allows terminal I / O to be saved onto a file is presented (see the Dribble Files section below). Finally, the low-level functions that control the mouse and cursor, the keyboard, and the screen are documented.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Interrupt Characters                                                                                                                                          </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Errors and breaks can be caused by errors within functions, or by explicitly breaking a function. The user can also indicate his desire to go into a break while a program is running by typing certain control characters known as &quot;interrupt characters&quot;. The following interrupt characters are currently enabled in Interlisp-D:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Note: In Interlisp-D with multiple processes, it is not sufficient to say that &quot;the computation&quot; is broken, aborted, etc; it is necessary to specify which process is being acted upon. Usually, the user wants interrupts to occur in the <span class="s11">TTY </span>process, which is the one currently receiving keyboard input. However, sometimes the user wants to interrupt the mouse process, if it is currently busy executing a menu command or waiting for the user to specify a region on the screen. Most of the interrupt characters below take place in the mouse process if it is busy, otherwise the <span class="s11">TTY </span>process. Control-G can be used to break arbitrary processes. For more information, see Chapter 23.</p><p style="padding-top: 6pt;padding-left: 65pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s15">Control-B </span>Causes a break within the mouse process (if busy) or the <span class="s11">TTY </span>process.</p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Use Control-G to break a particular process.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: -60pt;text-align: left;"><span class="s15">Control-D </span>Aborts the mouse process (if busy) or the <span class="s11">TTY </span>process, and unwinds its stack to the top level. Calls <span class="s11">RESET </span>(see Chapter 14).</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: -60pt;text-align: left;"><span class="s15">Control-E </span>Aborts the mouse process (if busy) or the TTY process, and unwinds its stack to the last <span class="s11">ERRORSET</span>. Calls <span class="s11">ERROR! </span>(see Chapter 14).</p><p class="s15" style="padding-top: 7pt;padding-left: 125pt;text-indent: -60pt;text-align: left;">Control-G <span class="p">Pops up a menu listing all of the currently-running processes. Selecting one of the processes will cause a break to take place in that process.</span></p><p class="s15" style="padding-top: 6pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">Control-P <span class="p">This interrupt is no longer supported in Medley.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 173pt;text-indent: -60pt;line-height: 93%;text-align: justify;"><b>Control-T </b><span class="p">Flashes the </span>TTY <span class="p">process’ window and prints status information for the </span>TTY <span class="p">process. First it prints </span>&quot;<b>IO wait</b>,&quot; &quot;<b>Waiting</b>&quot;<span class="p">, or </span>&quot;<b>Running</b>,&quot; <span class="p">depending on whether the </span>TTY <span class="p">process is currently in waiting for characters to be typed, waiting for some other reason, or running. Next, it prints the names of the top three frames on the stack, to show what is running. Then, it prints a line describing the percentage of time (since the last control-T) that has been spent running a program, swapping, garbage collecting, doing local disk I / O, etc. For example:</span></p><p class="s17" style="padding-top: 5pt;padding-left: 173pt;text-indent: 0pt;text-align: justify;">Running in <span class="s15">TTWAITFORINPUT </span>in <span class="s15">TTBIN </span>in <span class="s15">TTYIN1</span></p><p class="s17" style="padding-top: 6pt;padding-left: 173pt;text-indent: 0pt;text-align: justify;">95% Util, 0% Swap, 4% GC</p><p class="s15" style="padding-top: 5pt;padding-left: 129pt;text-indent: 0pt;text-align: justify;">DELETE <span class="p">Clears typeahead in all processes.</span></p><p style="padding-top: 7pt;padding-left: 173pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The user can disable and / or redefine Interlisp interrupt characters, as well as define new interrupt characters. Interlisp-D is initialized with the following interrupt channels: <span class="s11">RESET </span>(<span class="s15">Control-D</span>), <span class="s11">ERROR </span>(<span class="s15">Control-E</span>), <span class="s11">BREAK </span>(<span class="s15">Control-B</span>), <span class="s11">HELP </span>(<span class="s15">Control-G</span>), <span class="s11">PRINTLEVEL </span>(<span class="s15">Control-P</span>), <span class="s11">RUBOUT </span>(<span class="s15">DELETE</span>), and <span class="s11">RAID</span>. Each of these channels independently can be disabled, or have a new interrupt character assigned to it via the function <span class="s11">INTERRUPTCHAR </span>described below. In addition, the user can enable new interrupt channels, and associate with each channel an interrupt character and an expression to be evaluated when that <span class="s5">character is typed.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">INTERRUPTCHAR </span><span class="s16">CHAR TYP/FORM HARDFLG —</span>)                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Defines <span class="s16">CHAR </span>as an interrupt character. If <span class="s16">CHAR </span>was previously defined as an interrupt character, that interpretation is disabled.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">CHAR </span>is either a character or a character code (see Chapter 2). Note that full sixteen-bit NS characters can be specified as interrupt characters (see Chapter 2). <span class="s16">CHAR </span>can also be a value returned from <span class="s12">INTERRUPTCHAR</span>, as described below.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TYP/FORM </span><span class="s12">= NIL</span>, <span class="s16">CHAR </span>is disabled.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TYP/FORM </span><span class="s12">= T</span>, the current state of <span class="s16">CHAR </span>is returned without changing or disabling it.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TYP/FORM </span>is one of the literal atoms <span class="s12">RESET</span>, <span class="s12">ERROR</span>, <span class="s12">BREAK</span>, <span class="s12">HELP</span>, <span class="s12">PRINTLEVEL</span>, <span class="s12">RUBOUT</span>, or <span class="s12">RAID</span>, then <span class="s12">INTERRUPTCHAR </span>assigns <span class="s16">CHAR </span>to the indicated Interlisp interrupt channel, (reenabling the channel if previously disabled).</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If the argument <span class="s16">TYP/FORM </span>is a symbol designating a predefined system interrupt (<span class="s12">RESET, ERROR, BREAK</span>, etc), and <span class="s12">HARDFLG </span>is omitted or <span class="s12">NIL</span>, then the hardness defaults to the standard hardness of the system interrupt (e.g., <span class="s12">MOUSE </span>for the <span class="s12">ERROR </span>interrupt).</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TYP/FORM </span>is any other literal atom, <span class="s16">CHAR </span>is enabled as an interrupt character that when typed causes the atom <span class="s16">TYP/FORM </span>to be immediately set to <span class="s12">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">TERMINAL INPUT/OUTPUT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">TYP/FORM </span>is a list, <span class="s16">CHAR </span>is enabled as a user interrupt character, and <span class="s16">TYP/FORM </span>is the form that is evaluated when <span class="s16">CHAR </span>is typed. The interrupt will be hard if <span class="s16">HARDFLG </span><span class="s12">= T</span>, otherwise soft.</p><p class="s12" style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">(INTERRUPTCHAR T) <span class="p">restores all Interlisp channels to their original state, and disables all user interrupts.</span></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">HARDFLG </span>determines what process the interrupt should run in. If <span class="s16">HARDFLG </span>is <span class="s12">NIL</span>, the interrupt will run in the <span class="s12">TTY </span>process, which is the process currently receiving keyboard input. If <span class="s16">HARDFLG </span>is <span class="s12">T</span>, the interrupt will occur in whichever process happens to be running. If <span class="s16">HARDFLG </span>is <span class="s12">MOUSE</span>, the interrupt will happen in the mouse process, if the mouse is busy, otherwise in the <span class="s12">TTY </span>process.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;"><span class="s12">INTERRUPTCHAR </span>returns a value which, when given as the <span class="s16">CHAR </span>argument to <span class="s12">INTERRUPTCHAR</span>, will restore things as they were before the call to <span class="s12">INTERRUPTCHAR</span>. Therefore, <span class="s12">INTERRUPTCHAR </span>can be used in conjunction with <span class="s12">RESETFORM </span>or <span class="s12">RESETLST </span>(see Chapter 14).</p><p class="s12" style="padding-top: 8pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">INTERRUPTCHAR <span class="s5">is undoable.</span></p><p class="s12" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">RESET.INTERRUPTS </span><span class="s16">PERMITTEDINTERRUPTS SAVECURRENT?</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">PERMITTEDINTERRUPTS </span>is a list of interrupt character settings to be performed, each of the form <span class="s12">(CHAR TYP/FORM HARDFLG)</span>. The effect of <span class="s12">RESET.INTERRUPTS </span>is as if <span class="s12">(INTERRUPTCHAR CHAR TYP/FORM HARDFLG) </span>were performed for each item on <span class="s12">PERMITTEDINTERRUPTS</span>, and <span class="s12">(INTERRUPTCHAR OTHERCHAR NIL) </span>were</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">performed on every other existing interrupt character.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">SAVECURRENT? </span>is non-<span class="s12">NIL</span>, then <span class="s12">RESET.INTERRUPTS </span>returns the current state of the interrupts in a form that could be passed to <span class="s12">RESET.INTERRUPTS</span>, otherwise it returns <span class="s12">NIL</span>.  This can be used with a <span class="s12">RESET.INTERRUPTS </span>that appears in a <span class="s12">RESETFORM</span>, so that the list is built at &quot;entry&quot;, but not upon &quot;exit&quot;.</p><p class="s12" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LISPINTERRUPTS</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Returns the initial default interrupt character settings for Interlisp-D, as a list that</p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">RESET.INTERRUPTS <span class="p">would accept.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">INTERRUPTABLE </span><span class="s16">FLAG</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">if <span class="s16">FLAG </span><span class="s12">= NIL</span>, turns interrupts off. If <span class="s16">FLAG </span><span class="s12">= T</span>, turns interrupts on. Value is previous setting. <span class="s12">INTERRUPTABLE </span>compiles open.</p><p style="padding-top: 7pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Any interrupt character typed while interrupts are off is treated the same as any other character, i.e., placed in the input buffer, and will not cause an interrupt when interrupts are turned back on.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Terminal Tables                                                                                                                                                 </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A read table (see Chapter 25) contains input / output information that is media-independent. For example, the action of parentheses is the same regardless of the device from which the input is being performed. A terminal table is an object that contains information that pertains to terminal input / output operations only, such as the character to type to delete the last character or to delete the last line. In addition, terminal tables contain such information as how line-buffering is to be performed, how control characters are to be echoed / printed, whether lowercase input is to be converted to upper case, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Using the functions below, the user may change, reset, or copy terminal tables, or create a new terminal table and install it as the primary terminal table via <span class="s11">SETTERMTABLE</span>. However, unlike read tables, terminal tables cannot be passed as arguments to input / output functions.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GETTERMTABLE </span><span class="s16">TTBL</span>)                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If <span class="s16">TTBL </span><span class="s11">= NIL</span>, returns the primary (i.e., current) terminal table. If <span class="s16">TTBL </span>is a terminal table, return <span class="s16">TTBL</span>. Otherwise, generates an <b>ILLEGAL TERMINAL TABLE </b>error<span class="s5">.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">COPYTERMTABLE </span><span class="s16">TTBL</span>)                                      <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns a copy of <span class="s16">TTBL</span>. <span class="s16">TTBL </span>can be a real terminal table, <span class="s11">NIL </span>(copies the primary terminal table), or <span class="s11">ORIG </span>(returns a copy of the original system terminal table). Note that <span class="s11">COPYTERMTABLE </span>is the only function that creates a terminal table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SETTERMTABLE </span><span class="s16">TTBL</span>)                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Sets the primary terminal table to be <span class="s16">TTBL</span>. Returns the previous primary terminal table. Generates an <b>ILLEGAL TERMINAL TABLE </b>error if <span class="s16">TTBL </span>is not a real terminal table.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">RESETTERMTABLE </span><span class="s16">TTBL FROM</span>)                                 <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Copies (smashes) <span class="s16">FROM </span>into <span class="s16">TTBL</span>. <span class="s16">FROM </span>and <span class="s16">TTBL </span>can be <span class="s11">NIL </span>or a real terminal table. In addition, <span class="s16">FROM </span>can be <span class="s11">ORIG</span>, meaning to use the system’s original terminal table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">TERMTABLEP </span><span class="s16">TTBL</span>)                                         <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Returns <span class="s16">TTBL</span>, if <span class="s16">TTBL </span>is a real terminal table, <span class="s11">NIL </span>otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Terminal Syntax Classes</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A terminal table associates with each character a single &quot;terminal syntax class&quot;, one of <span class="s11">CHARDELETE</span>, <span class="s11">LINEDELETE</span>, <span class="s11">WORDDELETE</span>, <span class="s11">RETYPE</span>, <span class="s11">CTRLV</span>, <span class="s11">EOL</span>, and <span class="s11">NONE</span>. Unlike read table classes, only one character in a particular terminal table can belong to each of the classes (except for the default class <span class="s11">NONE</span>). When a new character is assigned one of these syntax classes by <span class="s11">SETSYNTAX </span>(see Chapter 25), the previous character is disabled (i.e., reassigned the syntax class <span class="s11">NONE</span>), and the value of <span class="s11">SETSYNTAX </span>is the code for the previous character of that class, if any, otherwise <span class="s11">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">TERMINAL INPUT/OUTPUT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;">The terminal syntax classes are interpreted as follows:</p><p class="s11" style="padding-top: 7pt;padding-left: 179pt;text-indent: -66pt;line-height: 92%;text-align: justify;">CHARDELETE <span class="p">(Initially BackSpace and Control-A in Interlisp-D) Typing this character deletes the previous character typed. Repeated use of this character deletes successive characters back to the beginning of the line.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 180pt;text-indent: -72pt;text-align: justify;">LINEDELETE <span class="p">(Initially Control-Q in Interlisp-D) Typing this character deletes the whole line; it cannot be used repeatedly.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 180pt;text-indent: -72pt;line-height: 93%;text-align: justify;">WORDDELETE <span class="p">(Initially Control-W in Interlisp-D) Typing this character deletes the previous &quot;word&quot;, i.e., sequence of non- separator characters.</span></p><p class="s12" style="padding-top: 8pt;padding-left: 180pt;text-indent: -48pt;line-height: 93%;text-align: justify;">RETYPE <span class="p">(Initially Control-R) Causes the line to be retyped as Interlisp sees it (useful when repeated deletions make it difficult to see what remains).</span></p><p class="s12" style="padding-top: 8pt;padding-left: 138pt;text-indent: 0pt;line-height: 11pt;text-align: left;">CTRLV</p><p class="s12" style="padding-left: 180pt;text-indent: -48pt;text-align: left;">CNTRLV <span class="p">(Initially Control-V) When followed by A, B, ... Z, inputs the corresponding control character control-A, control-B,</span></p><p style="padding-left: 180pt;text-indent: 0pt;line-height: 91%;text-align: left;">... control-Z. This allows interrupt characters to be input without causing an interrupt.</p><p style="padding-top: 7pt;padding-left: 179pt;text-indent: -30pt;line-height: 93%;text-align: justify;"><span class="s12">EOL </span>On input from a terminal, the <span class="s12">EOL </span>character signals to the line buffering routine to pass the input back to the calling function. It also is used to terminate inputs to <span class="s11">READLINE </span>(see Chapter 13). In general, whenever the phrase carriage-return linefeed is used, what is meant is the character with terminal syntax class <span class="s11">EOL</span>.</p><p class="s12" style="padding-top: 7pt;padding-left: 144pt;text-indent: 0pt;text-align: left;">NONE <span class="p">The terminal syntax class of all other characters.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;"><span class="s11">GETSYNTAX</span>, <span class="s11">SETSYNTAX</span>, and <span class="s11">SYNTAXP </span>all work on terminal tables as well as read tables (see page <span class="s11">X.XX</span>). As with read tables, full sixteen-bit NS characters can be specified in terminal tables (see Chapter 2). When given <span class="s11">NIL </span>as a <span class="s11">TABLE </span>argument, <span class="s11">GETSYNTAX </span>and <span class="s11">SYNTAXP </span>use the primary read table or primary terminal table depending on which table contains the indicated <span class="s11">CLASS </span>argument. For example, <span class="s11">(SETSYNTAX CH ’BREAK) </span>refers to the primary read table, and <span class="s11">(SETSYNTAX CH ’CHARDELETE) </span>refers to the primary terminal table. In the absence of such information, all three functions default to the primary read table; e.g., <span class="s11">(SETSYNTAX ’{ ’%[) </span>refers to the primary read table. If given incompatible <span class="s11">CLASS </span>and table arguments, all three functions generate errors. For example, <span class="s11">(SETSYNTAX CH ’BREAK TTBL)</span>, where <span class="s11">TTBL </span>is a terminal table, generates an <b>ILLEGAL READTABLE </b>error, and <span class="s11">(GETSYNTAX ’CHARDELETE RDTBL) </span>generates an <b>ILLEGAL TERMINAL</b></p><p class="s17" style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">TABLE <span class="p">error</span><span class="s5">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Terminal Control Functions</p><p class="s12" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">ECHOCHAR </span><span class="s16">CHARCODE MODE TTBL</span>) <span class="p">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">ECHOCHAR <span class="p">sets the &quot;echo mode&quot; of the character </span>CHARCODE <span class="p">to </span>MODE <span class="p">in the terminal table </span>TTBL<span class="p">. The &quot;echo mode&quot; determines how the character is to be echoed or printed. Note that although the name of this function suggests echoing only, it affects all output of the character, both echoing of input and printing of output.</span></p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s16">CHARCODE </span>should be a character code. <span class="s16">CHARCODE </span>can also be a list of characters, in which case <span class="s11">ECHOCHAR </span>is applied to each of them with arguments <span class="s16">MODE </span>and <span class="s16">TTBL</span>. Note that echo modes can be specified for full sixteen-bit NS characters (see Chapter 2).</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="s16">MODE </span>should be one of the litatoms <span class="s11">IGNORE</span>, <span class="s11">REAL</span>, <span class="s11">SIMULATE</span>, or <span class="s11">INDICATE </span>which specify how the character should be echoed or printed:</p><p class="s12" style="padding-top: 7pt;padding-left: 168pt;text-indent: 0pt;text-align: left;">IGNORE <span class="s16">CHARCODE </span><span class="p">is never printed.</span></p><p class="s12" style="padding-top: 8pt;padding-left: 216pt;text-indent: -36pt;text-align: left;">REAL <span class="s16">CHARCODE </span><span class="p">itself is printed. Some terminals may respond to certain control and meta characters in interesting ways.</span></p><p style="padding-top: 7pt;padding-left: 216pt;text-indent: -60pt;line-height: 93%;text-align: justify;"><span class="s12">SIMULATE </span>Output of <span class="s16">CHARCODE </span>is simulated. For example, control-I (tab) may be simulated by printing spaces. The simulation is machine-specific and beyond the control of the user.</p><p style="padding-top: 6pt;padding-left: 216pt;text-indent: -60pt;line-height: 92%;text-align: justify;"><span class="s12">INDICATE </span>For control or meta characters, <span class="s16">CHARCODE </span>is printed as # and / or <span class="s19"></span><span class="s21"> </span>followed by the corresponding alphabetic character. For example, Control-A would echo as <span class="s19"></span>A, and meta-Control-W would echo as #<span class="s19"></span>W.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">The value of <span class="s12">ECHOCHAR </span>is the previous echo mode for <span class="s16">CHARCODE</span>. If <span class="s16">MODE </span><span class="s12">= NIL</span>, <span class="s12">ECHOCHAR </span>returns the current echo mode without changing it.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Warning: In some fonts, control and meta characters may be used for printable characters. If the echomode is set to <span class="s12">INDICATE </span>for these characters, they will not print out correctly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ECHOCONTROL </span><span class="s16">CHAR MODE TTBL</span>)                               <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s12">ECHOCONTROL </span>is an old, limited version of <span class="s12">ECHOCHAR</span>, that can only specify the echo mode of control characters. <span class="s16">CHAR </span>is a character or character code. If <span class="s16">CHAR </span>is an alphabetic character (or code), it refers to the corresponding control character, e.g., <span class="s12">(ECHOCONTROL ’Z ’INDICATE) </span>if equivalent to <span class="s12">(ECHOCHAR (CHARCODE </span><span class="s4"></span><span class="s12">Z) ’INDICATE)</span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ECHOMODE </span><span class="s16">FLG TTBL</span>)                                       <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">If <span class="s16">FLG </span><span class="s12">= T</span>, turns echoing for terminal table <span class="s16">TTBL </span>on. If <span class="s16">FLG </span><span class="s12">= NIL</span>, turns echoing off. Returns the previous setting.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Note: Unlike <span class="s12">ECHOCHAR</span>, this only affects echoing of typed-in characters, not printing of characters.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GETECHOMODE </span><span class="s16">TTBL</span>)                                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns the current echo mode for <span class="s16">TTBL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">TERMINAL INPUT/OUTPUT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following functions manipulate the &quot;raise mode,&quot; which determines whether lower case characters are converted to upper case when input from the terminal. There is no &quot;raise mode&quot; for input from files.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">RAISE </span><span class="s16">FLG TTBL</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Sets the <span class="s12">RAISE </span>mode for terminal table <span class="s16">TTBL</span>. If <span class="s16">FLG </span><span class="s12">= NIL</span>, all characters are passed as typed. If <span class="s16">FLG </span><span class="s12">= T</span>, input is echoed as typed, but lowercase letters are converted to upper case. If <span class="s16">FLG </span><span class="s12">= 0</span>, input is converted to uppercase before it is echoed. Returns the previous setting.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETRAISE </span><span class="s16">TTBL</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the current <span class="s12">RAISE </span>mode for <span class="s16">TTBL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DELETECONTROL </span><span class="s16">TYPE MESSAGE TTBL</span>) <span class="s5">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Specifies the output protocol when a <span class="s12">CHARDELETE </span>or <span class="s12">LINEDELETE </span>is typed, by specifying character strings to print when characters are deleted.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Interlisp-10 (designed for use on hardcopy terminals) echos the characters being deleted, preceding the first by a \ and following the last by a \, so that it is easy to see exactly what was deleted. Interlisp-D is initially set up to physically erase the deleted characters from the display, so the <span class="s12">DELETECONTROL </span>strings are initialized to the null string.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">The various values of <span class="s16">TYPE </span>specify different phases of the deletion, as follows:</p><p class="s12" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">1STCHDEL <span class="s16">MESSAGE </span><span class="p">is the message printed the first time </span>CHARDELETE</p><p style="padding-left: 168pt;text-indent: 0pt;line-height: 12pt;text-align: left;">is typed. Initially &quot;\&quot; in Interlisp-10.</p><p class="s12" style="padding-top: 7pt;padding-left: 167pt;text-indent: -60pt;text-align: justify;">NTHCHDEL <span class="s16">MESSAGE </span><span class="p">is the message printed when the second and subsequent </span>CHARDELETE <span class="p">characters are typed (without intervening characters). Initially &quot;&quot; in Interlisp-10.</span></p><p class="s12" style="padding-top: 7pt;padding-left: 168pt;text-indent: -66pt;text-align: justify;">POSTCHDEL <span class="s16">MESSAGE </span><span class="p">is the message printed when input is resumed following a sequence of one or more </span>CHARDELETE <span class="p">characters. Initially &quot;\&quot; in Interlisp-10.</span></p><p style="padding-top: 7pt;padding-left: 168pt;text-indent: -72pt;line-height: 94%;text-align: justify;"><span class="s12">EMPTYCHDEL </span><span class="s16">MESSAGE </span>is the message printed when a <span class="s12">CHARDELETE </span>is typed and there are no characters in the buffer. Initially &quot;## <span class="s58">cr</span>&quot; in Interlisp-10.</p><p class="s12" style="padding-top: 7pt;padding-left: 28pt;text-indent: 0pt;line-height: 12pt;text-align: right;">ECHO <span class="p">If </span><span class="s16">TYPE </span>= ECHO<span class="p">, the characters deleted by </span>CHARDELETE</p><p style="padding-left: 168pt;text-indent: 0pt;line-height: 12pt;text-align: left;">are echoed. <span class="s16">MESSAGE </span>is ignored.</p><p class="s12" style="padding-top: 7pt;padding-left: 46pt;text-indent: 0pt;line-height: 12pt;text-align: center;">NOECHO  <span class="p">If    </span><span class="s16">TYPE    </span>=  NOECHO<span class="p">,    the    characters    deleted    by</span></p><p style="padding-left: 168pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s12">CHARDELETE </span>are not echoed. <span class="s16">MESSAGE </span>is ignored.</p><p class="s12" style="padding-top: 7pt;padding-left: 96pt;text-indent: 0pt;line-height: 12pt;text-align: left;">LINEDELETE <span class="s16">MESSAGE </span><span class="p">is the message printed when the </span>LINEDELETE</p><p style="padding-left: 168pt;text-indent: 0pt;line-height: 14pt;text-align: left;">character is typed. Initially &quot;## <span class="s58">cr</span>&quot;.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Note: In Interlisp-10, the <span class="s12">LINEDELETE</span>, <span class="s12">1STCHDEL</span>, <span class="s12">NTHCHDEL</span>, <span class="s12">POSTCHDEL</span>, and</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">EMPTYCHDEL <span class="p">messages must be 4 characters or fewer in length.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">DELETECONTROL <span class="p">returns the previous message as a string. If </span><span class="s16">MESSAGE </span>= NIL<span class="p">, the value returned is the previous message without changing it. For </span><span class="s16">TYPE </span>= ECHO <span class="p">and </span>NOECHO<span class="p">, the value of </span>DELETECONTROL <span class="p">is the previous echo mode, i.e., </span>ECHO <span class="p">or </span>NOECHO<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">GETDELETECONTROL </span><span class="s16">TYPE TTBL</span>)                               <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns the current <span class="s12">DELETECONTROL </span>mode for <span class="s16">TYPE </span>in <span class="s16">TTBL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Line-Buffering</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Characters typed at the terminal are stored in two buffers before they are passed to an input function. All characters typed in are put into the low-level &quot;system buffer&quot;, which allows type-ahead. When an input function is entered, characters are transferred to the &quot;line buffer&quot; until a character with terminal syntax class <span class="s12">EOL </span>appears (or, for calls from <span class="s12">READ</span>, when the count of unbalanced open parentheses reaches 0). Note that <span class="s12">PEEKC </span>is an exception; it returns the character immediately when its second argument is <span class="s12">NIL</span>. Until this time, the user can delete characters one at a time from the line buffer by typing the current <span class="s12">CHARDELETE </span>character, or delete the entire line buffer back to the last carriage- return by typing the current <span class="s12">LINEDELETE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">This line editing is not performed by <span class="s12">READ </span>or <span class="s12">RATOM</span>, but by Interlisp, i.e., it does not matter (nor is it necessarily known) which function will ultimately process the characters, only that they are still in the Interlisp line buffer. However, the function that is requesting input at the time the buffering starts does determine whether parentheses counting is observed. For example, if a program performs <span class="s12">(PROGN (RATOM) (READ)) </span>and the user types in <span class="s12">&quot;A (B C D)&quot;</span>, the user must type in the carriage-return following the right parenthesis before any action is taken, because the line buffering is happening under <span class="s12">RATOM</span>. If the program had performed <span class="s12">(PROGN (READ) (READ))</span>, the line- buffering would be under <span class="s12">READ</span>, so that the right parenthesis would terminate line buffering, and no terminating carriage-return would be required.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Once a carriage-return has been typed, the entire line is &quot;available&quot; even if not all of it is processed by the function initiating the request for input. If any characters are &quot;left over&quot;, they are returned immediately on the next request for input. For example, <span class="s12">(LIST (RATOM) (READC) (RATOM)) </span>when the input is &quot;A Bcr&quot; returns the three-element list (A % B) and leaves the carriage-return in the buffer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If a carriage-return is typed when the input under <span class="s12">READ </span>is not &quot;complete&quot; (the parentheses are not balanced or a string is in progress), line buffering continues, but the lines completed so far are not available for editing with <span class="s12">CHARDELETE </span>or <span class="s12">LINEDELETE</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">The function <span class="s12">CONTROL </span>is available to defeat line-buffering:</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CONTROL </span><span class="s16">MODE TTBL</span>)                                       <span class="p">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">TERMINAL INPUT/OUTPUT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">MODE </span><span class="s12">= T</span>, eliminates Interlisp’s normal line-buffering for the terminal table <span class="s16">TTBL</span>. If <span class="s16">MODE </span><span class="s12">= NIL</span>, restores line-buffering (normal). When operating with a terminal table in which <span class="s12">(CONTROL T) </span>has been performed, characters are returned to the calling function without line-buffering as described below.</p><p class="s12" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">CONTROL <span class="p">returns its previous setting.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETCONTROL </span><span class="s16">TTBL</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the current control mode for <span class="s16">TTBL</span>.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The function that initiates the request for input determines how the line is treated when</p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(CONTROL T) <span class="p">is in effect:</span></p><p style="padding-top: 7pt;padding-left: 167pt;text-indent: -36pt;line-height: 94%;text-align: justify;"><span class="s12">READ </span>If the expression being typed is a list, the effect is the same as though done with <span class="s12">(CONTROL NIL)</span>, i.e., line-buffering continues until a carriage-return or matching parentheses. If the expression being typed is not a list, it is returned as soon as a break or separator character is encountered, e.g., <span class="s12">(READ) </span>when the input is &quot;ABC&lt;space&gt;&quot; immediately returns <span class="s12">ABC</span>. <span class="s12">CHARDELETE </span>and <span class="s12">LINEDELETE </span>are available on those characters still in the buffer. Thus, if a program is performing several reads under <span class="s12">(CONTROL T)</span>, and the user types <span class="s12">&quot;NOW IS THE TIME&quot; </span>followed by Control-Q, only <span class="s12">TIME </span>is deleted, since the rest of the line has already been transmitted to <span class="s11">READ </span>and processed.</p><p style="padding-top: 7pt;padding-left: 167pt;text-indent: 0pt;text-align: justify;">An exception to the above occurs when the break or separator character is an opening parenthesis, bracket or double-quote, since returning at this point would <span class="s5">leave the line </span>buffer in a &quot;funny&quot; state. Thus if the input to <span class="s11">(READ) </span>is &quot;ABC(&quot;, the ABC is not read until a carriage-return or matching parentheses is encountered. In this case the user could <span class="s11">LINEDELETE </span>the entire line, since all of the characters are still in the buffer.</p><p class="s11" style="padding-top: 7pt;padding-left: 167pt;text-indent: -39pt;line-height: 94%;text-align: justify;">RATOM <span class="p">Characters are returned as soon as a break or separator character is encountered. Until then, </span>LINEDELETE <span class="p">and </span>CHARDELETE <span class="p">may be used as with </span>READ<span class="p">. For example, </span>(RATOM) <span class="p">followed by </span>&quot;ABC&lt;control-A&gt;&lt;space&gt;&quot; <span class="p">returns </span>AB<span class="p">. </span>(RATOM) <span class="p">followed by &quot;(&lt;control-A&gt;&quot; returns ( and types ## indicating that control-A was attempted with nothing in the buffer, since the ( is a break character and would therefore already have been read.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 129pt;text-indent: 0pt;line-height: 10pt;text-align: left;">READC</p><p class="s11" style="padding-left: 168pt;text-indent: -39pt;text-align: left;">PEEKC <span class="p">The character is returned immediately; no line editing is possible. In particular, </span>(READC) <span class="p">is perfectly happy to return</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 216pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the <span class="s11">CHARDELETE </span>or <span class="s11">LINEDELETE </span>characters, or the <span class="s11">ESCAPE</span></p><p style="padding-left: 216pt;text-indent: 0pt;line-height: 12pt;text-align: left;">character (<span class="s11">%</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: left;">The system buffer and line buffer can be directly manipulated using the following functions.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CLEARBUF </span><span class="s16">FILE FLG</span>)                                       <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Clears the input buffer for <span class="s16">FILE</span>. If <span class="s16">FILE </span>is <span class="s11">T </span>and <span class="s16">FLG </span>is <span class="s11">T</span>, the contents of Interlisp’s system buffer and line buffer are saved (and can be obtained via <span class="s11">SYSBUF </span>and <span class="s11">LINBUF </span>described below).</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 92%;text-align: justify;">When you type Control-D or Control-E, or any of the interrupt characters that require terminal interaction (Control-G, or Control-P), Interlisp automatically performs <span class="s11">(CLEARBUF T T)</span>. For Control-P and, when the break is exited normally, control-H, Interlisp restores the buffer after the interaction.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The action of <span class="s11">(CLEARBUF T)</span>, i.e., clearing of typeahead, is also available as the <span class="s11">RUBOUT </span>interrupt character, initially assigned to the delete key in Interlisp-D. Note that this interrupt clears both buffers at the time it is typed, whereas the action of the <span class="s11">CHARDELETE </span>and <span class="s11">LINEDELETE </span>character occur at the time they are read.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">SYSBUF </span><span class="s16">FLG</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FLG </span><span class="s11">= T</span>, returns the contents of the system buffer (as a string) that was saved at the last <span class="s11">(CLEARBUF T T)</span>. If <span class="s16">FLG </span><span class="s11">= NIL</span>, clears this internal buffer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">LINBUF </span><span class="s16">FLG</span>)                                              <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Same as <span class="s11">SYSBUF </span>for the line buffer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">If both the system buffer and Interlisp’s line buffer are empty, the internal buffers associated with</p><p class="s11" style="padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: left;">LINBUF <span class="p">and </span>SYSBUF <span class="p">are not changed by a </span>(CLEARBUF T T).</p><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">BKSYSBUF </span><span class="s16">X FLG RDTBL</span>)                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="s11">BKSYSBUF </span>appends the <span class="s11">PRIN1</span>-name of <span class="s16">X </span>to the system buffer. The effect is the same as though the user typed <span class="s16">X</span>. Some implementations have a limit on the length of <span class="s16">X</span>, in which case characters in <span class="s16">X </span>beyond the limit are ignored. Returns <span class="s16">X</span>.</p><p style="padding-top: 7pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">FLG </span>is <span class="s11">T</span>, then the <span class="s11">PRIN2</span>-name of <span class="s16">X </span>is used, computed with respect to the readtable <span class="s16">RDTBL</span>. If <span class="s16">RDTBL </span>is <span class="s11">NIL </span>or omitted, the current readtable of the <span class="s11">TTY </span>process (which is to receive the characters) is used. Use this for copy selection functions that want their output to be a  readable expression in an Exec.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Note that if you are typing at the same time as the <span class="s11">BKSYSBUF </span>is being performed, the relative order of the typein and the characters of <span class="s16">X </span>is unpredictable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">BKLINBUF </span><span class="s16">STR</span>)                                            <span class="p">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">TERMINAL INPUT/OUTPUT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s16">STR </span>is a string. <span class="s12">BKLINBUF </span>sets Interlisp’s line buffer to <span class="s16">STR</span>. Some implementations have a limit on the length of <span class="s16">STR</span>, in which case characters in <span class="s16">STR </span>beyond the limit are ignored. Returns <span class="s16">STR</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 4pt;text-indent: 0pt;text-align: center;">(<span class="s15">BKSYSCHARCODE </span><span class="s16">CODE</span>)                                                                                     <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">This function appends the character code <span class="s16">CODE </span>to the system input buffer. The function</p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">BKSYSBUF <span class="p">is implemented by repeated calls to </span>BKSYSCHARCODE<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">BKLINBUF<span class="p">, </span>BKSYSBUF<span class="p">, </span>LINBUF<span class="p">, and </span>SYSBUF <span class="p">provide a way of &quot;undoing&quot; a </span>CLEARBUF<span class="p">. Thus to &quot;peek&quot; at various characters in the buffer, one could perform </span>(CLEARBUF T T)<span class="p">, examine the buffers via </span>LINBUF <span class="p">and </span>SYSBUF<span class="p">, and then put them back.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">The more common use of these functions is in saving and restoring typeahead when a program requires some unanticipated (from the user’s standpoint) input. The function <span class="s12">RESETBUFS </span>provides a convenient way of simply clearing the input buffer, performing an interaction with the user, and then restoring the input buffer.</p><p class="s16" style="padding-top: 8pt;padding-left: 77pt;text-indent: -24pt;text-align: left;"><span class="s12">(</span><b>RESETBUFS </b>FORM<span class="s32">1</span>, FORM<span class="s32">2</span>,... FORMN<span class="s32">) </span><span class="p">[NLambda NoSpread Function]</span></p><p class="s16" style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">Clears any typeahead (ringing the terminal’s bell if there was, indeed, typeahead), evaluates </span>FORM<span class="s32">1</span><span class="p">, </span>FORM<span class="s32">2</span>,... FORM<span class="s32">N</span><span class="p">, then restores the typeahead. Returns the value of </span>FORM<span class="s32">N</span><span class="p">.  Compiles open.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 10pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">Dribble Files                                                                                                                                                       </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: justify;">A dribble file is a &quot;transcript&quot; of all of the input and output on a terminal. In Interlisp-D, <span class="s12">DRIBBLE </span>opens a dribble file for the current process, recording the terminal input and output for that process. Multiple processes can have separate dribble files open at the same time.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DRIBBLE </span><span class="s16">FILE APPENDFLG THAWEDFLG</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Opens <span class="s16">FILE </span>and begins recording the typescript. Returns the old dribble file if any, otherwise <span class="s12">NIL</span>. If <span class="s16">APPENDFLG </span><span class="s12">= T</span>, the typescript will be appended to the end of <span class="s16">FILE</span>. If <span class="s16">THAWEDFLG </span><span class="s12">= T</span>, the file will be opened in &quot;thawed&quot; mode, for those implementations that support it. <span class="s12">(DRIBBLE) </span>closes the dribble file for the current process. Only one dribble file can be active for each process at any one time, so <span class="s12">(DRIBBLE FILE1) </span>followed by <span class="s12">(DRIBBLE FILE2) </span>will cause <span class="s12">FILE1 </span>to be closed.</p><p class="s12" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DRIBBLEFILE</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns the name of the current dribble file for the current process, if any, otherwise <span class="s12">NIL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Terminal input is echoed to the dribble file a line buffer at a time. Thus, the typescript produced is somewhat neater than that appearing on the user’s terminal, because it does not show characters that were erased via Control-A or Control-Q. Note that the typescript file is not included in the list of files returned by <span class="s12">(OPENP)</span>, nor will it be closed by a call to <span class="s12">CLOSEALL </span>or <span class="s12">CLOSEF</span>. Only <span class="s12">(DRIBBLE) </span>closes the typescript file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Cursor and Mouse                                                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">A mouse is a small box connected to the computer keyboard by a long wire. On the top of the mouse are two or three buttons. On the bottom is a rolling ball or a set of photoreceptors, to detect when the mouse is moved. As the mouse is moved on a surface, a small image on the screen, called the cursor, moves to follow the movement of the mouse. By moving the mouse, the user can cause the cursor to point to any part of the display screen.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The mouse and cursor are an important part of the Interlisp-D user interface. The Interlisp-D window system allows the user to create, move, and reshape windows, and to select items from displayed menus, all by moving the mouse and clicking the mouse buttons. This section describes the low-level functions used to control the mouse and cursor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Changing the Cursor Image</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Interlisp-D maintains the image of the cursor on the screen, moving it as the mouse is moved. The bitmap that becomes visible as the cursor can be accessed by the following function:</p><p class="s12" style="padding-top: 9pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CURSORBITMAP</span>)                                            <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Returns the cursor bitmap.</p><p class="s15" style="padding-top: 8pt;padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">CURSORWIDTH                                                    <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 47pt;text-indent: 0pt;line-height: 11pt;text-align: center;">CURSORHEIGHT                                                   <span class="p">[Variable]</span></p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">Value is the width and height of the cursor bitmap, respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 77pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><span class="p">The cursor bitmap can be changed like any other bitmap by </span>BITBLT<span class="p">ing into it or pointing a display stream at it and printing or drawing curves. The </span>CURSOR <span class="p">datatype has the following field names </span>CUBITSPERPIXEL CUIMAGE, CUMASK, CUHOTSPOTX, CUHOTSPOTY<span class="s10">, </span>CUDATA</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">CURSOR <span class="p">objects can be saved on a file using the file package command </span>CURSORS<span class="p">, or the </span>UGLYVARS</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">file package command.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">CURSORCREATE </span><span class="s16">BITMAP X Y</span>)                                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns a cursor object which has <span class="s16">BITMAP </span>as its image and the location (<span class="s16">X,Y</span>) as the hot spot. If <span class="s16">X </span>is a <span class="s12">POSITION</span>, it is used as the hot spot. If <span class="s16">BITMAP </span>has dimensions different from <span class="s12">CURSORWIDTH </span>by <span class="s12">CURSORHEIGHT</span>, the lesser of the widths and the lesser of the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">TERMINAL INPUT/OUTPUT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">heights are used to determine the bits that actually get copied into the lower left corner of the cursor. If <span class="s16">X </span>is <span class="s12">NIL</span>, 0 is used. If <span class="s16">Y </span>is <span class="s12">NIL</span>, <span class="s12">CURSORHEIGHT</span>-1 is used. The default cursor is an uparrow with its tip in the upper left corner and its hot spot at <span class="s12">(0,CURSORHEIGHT-1)</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">CURSOR </span><span class="s16">NEWCURSOR —</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns a <span class="s12">CURSOR </span>record instance that contains (a copy of) the current cursor specification. If <span class="s16">NEWCURSOR </span>is a <span class="s12">CURSOR </span>record instance, the cursor will be set to the values in <span class="s16">NEWCURSOR</span>. If <span class="s16">NEWCURSOR </span>is <span class="s12">T</span>, the cursor will be set to the default cursor</p><p style="padding-top: 2pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;"><span class="s12">DEFAULTCURSOR</span>, an upward left pointing arrow: <span><img width="11" height="21" alt="image" src="Image_123.gif"/></span>.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SETCURSOR </span><span class="s16">NEWCURSOR —</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">NEWCURSOR </span>is a <span class="s12">CURSOR </span>record instance, the cursor will be set to the values in <span class="s16">NEWCURSOR</span>. This does not return the old cursor, and therefore, provides a way of changing the cursor without using storage.</p><p class="s12" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">FLIPCURSOR</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Inverts the cursor.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The following list describes the cursors used by the Interlisp-D system. Most of them are stored as the values of various variables.</p><p style="padding-top: 9pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><span><img width="11" height="21" alt="image" src="Image_124.gif"/></span><span class="s5">     </span>In variable <span class="s12">DEFAULTCURSOR</span>. This is the default cursor.</p><p style="padding-top: 10pt;padding-left: 125pt;text-indent: -27pt;text-align: justify;"><span><img width="20" height="21" alt="image" src="Image_125.gif"/></span><span class="s5">     </span>In variable <span class="s12">WAITINGCURSOR</span>. Represents an hourglass. Used during long computations.</p><p style="padding-top: 9pt;padding-left: 125pt;text-indent: -25pt;line-height: 93%;text-align: justify;"><span><img width="17" height="21" alt="image" src="Image_126.gif"/></span><span class="s5">     </span>In variable <span class="s12">MOUSECONFIRMCURSOR</span>. Indicates that the system is waiting for the user to confirm an action by pressing the left mouse button, or aborting the action by pressing any other button. Used by the function <span class="s12">MOUSECONFIRM </span>(see Chapter 28).</p><p style="padding-top: 9pt;padding-left: 126pt;text-indent: -26pt;text-align: justify;"><span><img width="19" height="19" alt="image" src="Image_127.gif"/></span><span class="s5">     </span>In variable <span class="s12">SYSOUTCURSOR</span>. Indicates that the system is saving the virtual memory in a sysout file. See <span class="s12">SYSOUT</span>, Chapter 12.</p><p style="padding-top: 10pt;padding-left: 126pt;text-indent: -27pt;line-height: 94%;text-align: justify;"><span><img width="20" height="17" alt="image" src="Image_128.gif"/></span><span class="s5">     </span>In variable <span class="s12">SAVINGCURSOR</span>. Indicates that <span class="s12">SAVEVM </span>has been called automatically to save the virtual memory state after the system is idle for long enough. See <span class="s12">SAVEVMWAIT</span>, Chapter 12.</p><p style="padding-top: 10pt;padding-left: 125pt;text-indent: -27pt;text-align: justify;"><span><img width="20" height="20" alt="image" src="Image_129.gif"/></span><span class="s5">     </span>In variable <span class="s12">CROSSHAIRS</span>. Used by <span class="s12">GETPOSITION </span>(see Chapter 28) to indicate a position.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 173pt;text-indent: -24pt;text-align: left;"><span><img width="16" height="16" alt="image" src="Image_130.gif"/></span><span class="s5">     </span>In variable <span class="s12">BOXCURSOR</span>. Used by <span class="s12">GETBOXPOSITION </span>(see Chapter 28) to indicate where to place the corner of a box.</p><p style="padding-top: 9pt;padding-left: 173pt;text-indent: -24pt;text-align: left;"><span><img width="16" height="21" alt="image" src="Image_131.gif"/></span><span class="s5">     </span>In variable <span class="s12">FORCEPS</span>. Used by <span class="s12">GETREGION </span>(see Chapter 28) when the user switches corners.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 173pt;text-indent: -28pt;text-align: left;"><span><img width="21" height="19" alt="image" src="Image_132.gif"/></span><span class="s5">     </span>In variable <span class="s12">EXPANDINGBOX</span>. Used by <span class="s12">GETREGION </span>(see Chapter 28) when a box is first displayed.</p><p style="padding-top: 8pt;padding-left: 149pt;text-indent: 0pt;line-height: 168%;text-align: left;"><span><img width="13" height="15" alt="image" src="Image_133.gif"/></span><span class="s5">      </span>In variable <span class="s12">UpperRightCursor</span>. <span><img width="15" height="15" alt="image" src="Image_134.gif"/></span><span class="s21">     </span>In variable <span class="s12">LowerRightCursor</span>. <span><img width="13" height="15" alt="image" src="Image_135.gif"/></span><span class="s21">       </span>In variable <span class="s12">UpperLeftCursor</span>. <span><img width="15" height="15" alt="image" src="Image_136.gif"/></span><span class="s21">     </span>In variable <span class="s12">LowerLeftCursor</span>.</p><p style="padding-top: 2pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">The previous four cursors are used by <span class="s12">GETREGION </span>(see Chapter 28) to indicate the four corners of a region.</p><p style="padding-top: 9pt;padding-left: 173pt;text-indent: -25pt;text-align: left;"><span><img width="17" height="17" alt="image" src="Image_137.gif"/></span><span class="s5">     </span>In variable <span class="s12">VertThumbCursor</span>. Used during scrolling to indicate thumbing in a vertical scroll bar.</p><p style="padding-top: 8pt;padding-left: 153pt;text-indent: 2pt;line-height: 150%;text-align: left;"><span><img width="9" height="21" alt="image" src="Image_138.gif"/></span><span class="s5">     </span>In variable <span class="s12">VertScrollCursor</span>. <span><img width="12" height="21" alt="image" src="Image_139.gif"/></span><span class="s21">     </span>In variable <span class="s12">ScrollUpCursor</span>.</p><p style="padding-top: 3pt;padding-left: 153pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="21" alt="image" src="Image_140.gif"/></span><span class="s5">     </span>In variable <span class="s12">ScrollDownCursor</span>.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">The previous four cursors are used by <span class="s12">SCROLL.HANDLER </span>(see Chapter 28) during vertical scrolling.</p><p style="padding-top: 9pt;padding-left: 173pt;text-indent: -25pt;text-align: left;"><span><img width="17" height="17" alt="image" src="Image_141.gif"/></span><span class="s5">     </span>In variable <span class="s12">HorizThumbCursor</span>. Used during scrolling to indicate thumbing in a horizontal scroll bar.</p><p style="padding-top: 9pt;padding-left: 146pt;text-indent: 1pt;line-height: 159%;text-align: left;"><span><img width="20" height="17" alt="image" src="Image_142.gif"/></span><span class="s5">     </span>In variable <span class="s12">HorizScrollCursor</span>. <span><img width="21" height="17" alt="image" src="Image_143.gif"/></span><span class="s21">     </span>In variable <span class="s12">ScrollLeftCursor</span>. <span><img width="21" height="17" alt="image" src="Image_144.gif"/></span><span class="s21">     </span>In variable <span class="s12">ScrollRightCursor</span>.</p><p style="padding-top: 2pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">The previous four cursors are used by <span class="s12">SCROLL.HANDLER </span>(see Chapter 28) during horizontal scrolling.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">TERMINAL INPUT/OUTPUT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="21" height="20" alt="image" src="Image_145.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="16" height="11" alt="image" src="Image_146.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="16" height="11" alt="image" src="Image_147.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="20" height="9" alt="image" src="Image_148.gif"/></span></p><p style="padding-top: 5pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">, , ,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="21" height="9" alt="image" src="Image_149.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="21" height="9" alt="image" src="Image_150.gif"/></span></p><p style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 91%;text-align: center;">,        , <span><img width="21" height="19" alt="image" src="Image_151.gif"/></span><span class="s21">     </span>These  cursors  are  used  by  the  Teleraid  low-level  debugger.    These cursors are not accessable as standard Interlisp-D  cursors.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Flashing Bars on the Cursor</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The low-level Interlisp-D system uses the cursor to display certain system status information, such as garbage collection or swapping. This is done because changing the cursor image is very quick, and does not require interacting with the window system. Interlisp inverts horizontal bars on the cursor when the system is swapping pages, or doing certain stack operations. Normally, these bars are only inverted for a very short time, so they look like they are flashing. These cursor changes are interpreted as follows:</p><p style="padding-top: 10pt;padding-left: 126pt;text-indent: -94pt;line-height: 91%;text-align: left;">Inverted cursor: <span><img width="21" height="21" alt="image" src="Image_152.gif"/></span><span class="s21">     </span>Whatever image is being displayed as the cursor, whenever Interlisp does a garbage collection, the whole cursor is inverted.</p><p style="padding-top: 10pt;padding-left: 126pt;text-indent: -63pt;line-height: 91%;text-align: justify;">Top bar: <span><img width="21" height="21" alt="image" src="Image_153.gif"/></span><span class="s21">     </span>Swap read. On when Interlisp is swapping in a page from the virtual memory file into the real memory. It is also on when Interlisp allocates a new virtual memory page, even though that doesn’t involve a disk read. If this is flashing a lot, the system is doing a lot of swapping. This is an indication that the virtual memory working set is fragmented (see Chapter 22). Performance may be improved by reloading a clean Interlisp system.</p><p style="padding-top: 10pt;padding-left: 126pt;text-indent: -104pt;line-height: 91%;text-align: left;">Upper middle bar: <span><img width="21" height="21" alt="image" src="Image_154.gif"/></span><span class="s21">     </span>Stack operations. If this is flashing a lot, it suggests that some process is neglecting to release stack pointers in a timely fashion (see Chapter 11).</p><p style="padding-top: 9pt;padding-left: 126pt;text-indent: -119pt;line-height: 94%;text-align: justify;">Lowereler middle bar: <span><img width="21" height="21" alt="image" src="Image_155.gif"/></span><span class="s21">     </span>Stack operations. On when Interlisp is moving frames on the stack. If the system is slow, and this is flashing a lot, <span class="s12">HARDRESET </span>(see Chapter 23) sometimes helps.</p><p style="padding-top: 10pt;padding-left: 126pt;text-indent: -76pt;line-height: 91%;text-align: left;">Bottom bar: <span><img width="21" height="21" alt="image" src="Image_156.gif"/></span><span class="s21">     </span>Swap write. On when Interlisp writes a dirty virtual memory page from the real memory back into the virtual memory file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">Cursor Position</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The position at which the cursor bitmap is being displayed can be read or set using the following functions:</p><p class="s12" style="padding-top: 10pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">(<span class="s15">CURSORPOSITION </span><span class="s16">NEWPOSITION DISPLAYSTREAM OLDPOSITION</span>)        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the location of the cursor in the coordinate system of <span class="s16">DISPLAYSTREAM </span>(or the current display stream, if <span class="s16">DISPLAYSTREAM </span>is <span class="s12">NIL</span>). If <span class="s16">NEWPOSITION </span>is non-<span class="s12">NIL</span>, it</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">should be a position and the cursor will be positioned at <span class="s16">NEWPOSITION</span>. If <span class="s16">NEWPOSITION</span></p><p style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">is <span class="s12">NIL</span>, the current position is simple returned.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 3pt;line-height: 91%;text-align: left;">The current position of the cursor is the position of the &quot;hot spot&quot; of the cursor, not the position of the cursor bitmap.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">If <span class="s16">OLDPOSITION </span>is a <span class="s12">POSITION </span>object, this object will be changed to point to the location of the cursor and returned, rather of allocating a new <span class="s12">POSITION</span>. This can improve performance if <span class="s12">CURSORPOSITION </span>is called repeatedly to track the cursor.</p><p style="padding-top: 6pt;padding-left: 131pt;text-indent: 0pt;line-height: 12pt;text-align: left;">To get the location of the cursor in absolute screen coordinates, use the variables</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">LASTMOUSEX <span class="p">and </span>LASTMOUSEY<span class="p">.</span></p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">ADJUSTCURSORPOSITION </span><span class="s16">DELTAX DELTAY</span>)                        <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Moves the cursor <span class="s16">DELTAX </span>points in the <span class="s12">X </span>direction and <span class="s16">DELTAY </span>points in the <span class="s12">Y </span>direction.</p><p class="s16" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">DELTAX <span class="p">and </span>DELTAY <span class="p">default to 0.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 78pt;text-indent: 0pt;text-align: justify;">Mouse Button Testing</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 94%;text-align: justify;">There are two or three keys on the mouse. These keys (also called buttons) are referred to by their location: <span class="s12">LEFT</span>, <span class="s12">MIDDLE</span>, or <span class="s12">RIGHT</span>. The following macros are provided to test the state of the mouse buttons:</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MOUSESTATE </span><span class="s16">BUTTONFORM</span>)                                     <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Reads the state of the mouse buttons, and returns <span class="s12">T </span>if that state is described by <span class="s16">BUTTONFORM</span>. <span class="s16">BUTTONFORM </span>can be one of the key indicators <span class="s12">LEFT</span>, <span class="s12">MIDDLE</span>, or <span class="s12">RIGHT</span>; the atom <span class="s12">UP </span>(indicating all keys are up); the form <span class="s12">(ONLY KEY)</span>; or a form of <span class="s12">AND</span>, <span class="s12">OR</span>, or <span class="s12">NOT </span>applied to any valid button form.</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">For example: <span class="s12">(MOUSESTATE LEFT) </span>will be true if the left mouse button is down. <span class="s12">(MOUSESTATE (ONLY LEFT)) </span>will be true if the left mouse button is the only one down. <span class="s12">(MOUSESTATE (OR (NOT LEFT) MIDDLE)) </span>will be true if either the left mouse button is up or the middle mouse button is down.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">LASTMOUSESTATE </span><span class="s16">BUTTONFORM</span>)                                  <span class="p">[Macro]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Similar to <span class="s12">MOUSESTATE</span>, but tests the value of <span class="s12">LASTMOUSEBUTTONS </span>(below) rather than getting the current state. This is useful for determining which keys caused <span class="s12">MOUSESTATE </span>to be true.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">UNTILMOUSESTATE </span><span class="s16">BUTTONFORM INTERVAL</span>)                         <span class="p">[Macro]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="s16">BUTTONFORM </span>is as described in <span class="s12">MOUSESTATE</span>. Waits until <span class="s16">BUTTONFORM </span>is true or until <span class="s16">INTERVAL </span>milliseconds have elapsed. The value of <span class="s12">UNTILMOUSESTATE </span>is <span class="s12">T </span>if <span class="s16">BUTTONFORM </span>was satisfied before it timed out, otherwise <span class="s12">NIL</span>. If <span class="s16">INTERVAL </span>is <span class="s12">NIL</span>, it waits indefinitely. This compiles into an open loop that calls the <span class="s12">TTY </span>wait background</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">TERMINAL INPUT/OUTPUT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">function. This form should not be used inside the <span class="s12">TTY </span>wait background function.</p><p class="s12" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">UNTILMOUSESTATE <span class="p">does not use any storage during its wait loop.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">Low Level Mouse Functions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: left;">This section describes the functions and variables that provide low level access to the mouse and cursor.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LASTMOUSEX </span><span class="s16">DISPLAYSTREAM</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the value of the cursor’s <span class="s12">X </span>position in the coordinates of <span class="s16">DISPLAYSTREAM </span>(as of the last call to <span class="s12">GETMOUSESTATE</span>, below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">LASTMOUSEY </span><span class="s16">DISPLAYSTREAM</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">Returns the value of the cursor’s <span class="s12">Y </span>position in the coordinates of <span class="s16">DISPLAYSTREAM </span>(as of the last call to <span class="s12">GETMOUSESTATE</span>, below).</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">LASTMOUSEX <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Value is the <span class="s12">X </span>position of the cursor in absolute screen coordinates (as of the last call to</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">GETMOUSESTATE<span class="p">, below).</span></p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">LASTMOUSEY <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Value is the <span class="s12">Y </span>position of the cursor in absolute screen coordinates (as of the last call to</p><p class="s11" style="padding-left: 78pt;text-indent: 0pt;line-height: 12pt;text-align: left;">GETMOUSESTATE<span class="p">, below).</span></p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">LASTMOUSEBUTTONS <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 93%;text-align: justify;">Value is an integer that has bits on corresponding to the mouse buttons that are down (as of the last call to <span class="s11">GETMOUSESTATE</span>, below). Bit 4Q is the left mouse button, 2Q is the right button, 1Q is the middle button.</p><p class="s15" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">LASTKEYBOARD <span class="p">[Variable]</span></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Value is an integer encoding the state of certain keys on the keyboard (as of the last call to <span class="s11">GETMOUSESTATE</span>, below). Bit 200Q = lock, 100Q = left shift, 40Q = ctrl, 10Q = right shift, 4Q = blank Bottom, 2Q = blank Middle, 1Q = blank Top. If the key is down, the corresponding bit is on.</p><p class="s12" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">GETMOUSESTATE</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Reads the current state of the mouse and sets the variables <span class="s11">LASTMOUSEX</span>, <span class="s11">LASTMOUSEY</span>, and <span class="s11">LASTMOUSEBUTTONS</span>. In polling mode, the program must remember the previous state and look for changes, such as a key going up or down, or the cursor moving outside a region of interest.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">DECODEBUTTONS </span><span class="s16">BUTTONSTATE</span>) <span class="p">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">Returns a list of the mouse buttons that are down in the state <span class="s16">BUTTONSTATE</span>. If <span class="s16">BUTTONSTATE </span>is not a small integer, the value of <span class="s11">LASTMOUSEBUTTONS </span>(above) is used. The button names that can be returned are: <span class="s11">LEFT</span>, <span class="s11">MIDDLE</span>, <span class="s11">RIGHT </span>(the three mouse keys).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Keyboard Interpretation                                                                                                                                             </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">For each key on the keyboard and mouse there is a corresponding bit in memory that the hardware turns on and off as the key moves up and down. System-level routines decode the meaning of key transitions according to a table of &quot;key actions&quot;, which may be to put particular character codes in the sysbuffer, cause interrupts, change the internal shift / control status, or create events to be placed in the mouse buffer.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">KEYDOWNP </span><span class="s16">KEYNAME</span>)                                        <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Used to read the instantaneous state of any key, independent of any buffering or pre- assigned key action. Returns <span class="s12">T </span>if the key named <span class="s16">KEYNAME </span>is down at the moment the function is executed.</p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Most keys are named by the characters on the key-top. Therefore, <span class="s12">(KEYDOWNP ’a) </span>or</p><p class="s12" style="padding-left: 126pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">(KEYDOWNP ’A) <span class="p">returns </span>T <span class="p">if the &quot;A&quot; key is down.</span></p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 91%;text-align: justify;">There are a number of keys that do not have standard names printed on them. These can be accessed by special names as follows:</p><p style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Space     <span class="s12">SPACE</span></p><p style="padding-top: 6pt;padding-left: 186pt;text-indent: -20pt;line-height: 153%;text-align: justify;">Carriage return <span class="s12">CR </span>Line-feed <span class="s12">LF </span>Backspace <span class="s12">BS</span></p><p style="padding-left: 47pt;text-indent: 0pt;text-align: center;">Tab     <span class="s12">TAB</span></p><p style="padding-top: 7pt;padding-left: 240pt;text-indent: -87pt;line-height: 93%;text-align: justify;">Blank keys on 1132 The 1132 keyboard has three unmarked keys on the right of the normal keyboard. These can be accessed by <span class="s12">BLANK-BOTTOM</span>, <span class="s12">BLANK-MIDDLE</span>, and <span class="s12">BLANK- TOP</span>.</p><p style="padding-top: 6pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">Escape     <span class="s12">ESCAPE</span></p><p style="padding-top: 6pt;padding-left: 239pt;text-indent: -50pt;text-align: left;">Shift keys <span class="s12">LSHIFT </span>for the left shift key, <span class="s12">RSHIFT </span>for the right shift key.</p><p style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">Shift lock key <span class="s12">LOCK</span></p><p style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">Control key <span class="s12">CTRL</span></p><p style="padding-top: 6pt;padding-left: 168pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Mouse buttons The state of the mouse buttons can be accessed using</p><p class="s12" style="padding-left: 47pt;text-indent: 0pt;line-height: 12pt;text-align: center;">LEFT<span class="p">, </span>MIDDLE<span class="p">, and </span>RIGHT<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">TERMINAL INPUT/OUTPUT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">If <span class="s12">KEYNAME </span>is a small integer, it is taken to be the internal key number. Otherwise, it is taken to be the name of the key. This means, for example, that the name of the &quot;6&quot; key is not the number 6. Instead, spelled-out names for all the digit keys have been assigned. The &quot;6&quot; key is named <span class="s12">SIX</span>. It happens that the key number of the &quot;6&quot; key is 2. Therefore, the following two forms are equivalent:</p><p class="s12" style="padding-top: 7pt;padding-left: 114pt;text-indent: 0pt;line-height: 168%;text-align: left;">(KEYDOWNP ’SIX) (KEYDOWNP 2)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SHIFTDOWNP </span><span class="s16">SHIFT</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Returns <span class="s12">T </span>if the internal &quot;shift&quot; flag specified by <span class="s16">SHIFT </span>is on; <span class="s12">NIL </span>otherwise.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">SHIFT </span>= <span class="s12">1SHIFT</span>, <span class="s12">2SHIFT</span>, <span class="s12">LOCK</span>, <span class="s12">META</span>, or <span class="s12">CTRL</span>, <span class="s12">SHIFTDOWNP </span>returns the state of the left shift, right shift, shift lock, control, and meta flags, respectively.</p><p style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">If <span class="s16">SHIFT </span>= <span class="s16">SHIFT</span>, <span class="s12">SHIFTDOWNP </span>returns <span class="s12">T </span>if either the left or right shift flag is on.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">If <span class="s16">SHIFT </span>= <span class="s12">USERMODE1</span>, <span class="s12">USERMODE2</span>, or <span class="s12">USERMODE3</span>, <span class="s12">SHIFTDOWNP </span>returns the state</p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">of one of three user-settable flags that have no other effect on key interpretation. These flags can be set or cleared on character transitions by using <span class="s12">KEYACTION </span>(below).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">KEYACTION </span><span class="s16">KEYNAME ACTIONS —</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Changes the internal tables that define the action to be taken when a key transition is detected by the system keyboard handler. <span class="s16">KEYNAME </span>is specified as for <span class="s12">KEYDOWNP</span>. <span class="s16">ACTIONS </span>is a dotted pair of the form <span class="s12">(DOWN-ACTION . UP-ACTION)</span>, where the acceptable transition actions and their interpretations are:</p><p class="s12" style="padding-top: 7pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">NIL</p><p class="s12" style="padding-top: 6pt;padding-left: 126pt;text-indent: -48pt;text-align: left;">IGNORE <span class="p">Take no action on this transition (the default for up-transitions on all ordinary characters).</span></p><p class="s12" style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">(CHAR SHIFTEDCHAR LOCKFLAG)</p><p style="padding-top: 7pt;padding-left: 125pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If a transition action is a three-element list, <span class="s12">CHAR </span>and <span class="s12">SHIFTEDCHAR </span>are either character codes or (non-numeric) single-character litatoms standing for their character codes. Note that <span class="s12">CHAR </span>and <span class="s12">SHIFTEDCHAR </span>can be full sixteen-bit NS characters (see page <span class="s12">X.XX</span>). When the transition occurs, <span class="s12">CHAR </span>or <span class="s12">SHIFTEDCHAR </span>is transmitted to the system buffer, depending on whether either of the two shift keys are down.</p><p class="s12" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">LOCKFLAG <span class="p">is optional, and may be </span>LOCKSHIFT <span class="p">or </span>NOLOCKSHIFT<span class="p">. If </span>LOCKFLAG <span class="p">is </span>LOCKSHIFT<span class="p">, then </span>SHIFTEDCHAR <span class="p">will also be transmitted when the </span>LOCK <span class="p">shift is down (the alphabetic keys initially specify </span>LOCKSHIFT<span class="p">, but the digit keys specify </span>NOLOCKSHIFT<span class="p">). For</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 93%;text-align: justify;">example, <span class="s12">(a A LOCKSHIFT) </span>and <span class="s12">(61Q ! NOLOCKSHIFT) </span>are the initial settings for the down transitions of the &quot;a&quot; and &quot;1&quot; keys respectively.</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">1SHIFTUP, 1SHIFTDOWN</p><p class="s12" style="padding-top: 7pt;padding-left: 66pt;text-indent: -12pt;line-height: 168%;text-align: left;">2SHIFTUP, 2SHIFTDOWN CTRLUP, CTRLDOWN</p><p class="s12" style="padding-left: 66pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">METAUP, METADOWN <span class="p">Change the status of the internal &quot;shift&quot; flags for the left shift, right shift,</span></p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 92%;text-align: justify;">control, and meta keys, respectively. These shifts affect the interpretation of ordinary key actions. If either of the shifts is down, then <span class="s12">SHIFTEDCHAR</span>s are transmitted. If the control flag is on, then the the seventh bit of the character code is cleared as characters are transmitted. If the meta flag is on, the the eighth bit of the character code is set (normally cleared) as characters are transmitted. For example, the initial keyactions for the left shift key is <span class="s12">(1SHIFTDOWN</span></p><p class="s12" style="padding-left: 174pt;text-indent: 0pt;text-align: justify;">. 1SHIFTUP).</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">LOCKUP, LOCKDOWN, LOCKTOGGLE</p><p style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;text-align: justify;">Change the status of the internal &quot;shift&quot; flags for the shift lock key. If the lock flag is down, then <span class="s12">SHIFTEDCHAR</span>s are transmitted if the key action specified <span class="s12">LOCKSHIFT</span>. <span class="s12">LOCKUP </span>and <span class="s12">LOCKDOWN </span>clear and set the shift lock flag, respectively. <span class="s12">LOCKTOGGLE </span>complements the flag (turning it off if the flag is on; on if the flag is off).</p><p class="s12" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;line-height: 168%;text-align: justify;">USERMODE1UP, USERMODE1DOWN, USERMODE1TOGGLE USERMODE2UP, USERMODE2DOWN, USERMODE2TOGGLE USERMODE3UP, USERMODE3DOWN, USERMODE3TOGGLE</p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Change the status of the three user flags <span class="s12">USERMODE1</span>, <span class="s12">USERMODE2</span>,</p><p style="padding-left: 173pt;text-indent: 0pt;text-align: justify;">and <span class="s12">USERMODE3</span>, whose status can be determined by calling <span class="s12">SHIFTDOWNP </span>(above). These flags have no other effect on key interpretation.</p><p class="s12" style="padding-top: 6pt;padding-left: 174pt;text-indent: -42pt;text-align: left;">EVENT <span class="p">An encoding of the current state of the mouse and selected keys is placed in the mouse-event buffer when this transition is detected.</span></p><p class="s12" style="padding-top: 6pt;padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">KEYACTION <span class="p">returns the previous setting for </span>KEYNAME<span class="p">. If </span>ACTIONS</p><p style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">is <span class="s12">NIL</span>, returns the previous setting without changing the tables.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">MODIFY.KEYACTIONS </span><span class="s16">KEYACTIONS SAVECURRENT?</span>)                  <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;"><span class="s16">KEYACTIONS </span>is a list of key actions to be set, each of the form <span class="s12">(KEYNAME . ACTIONS)</span>. The effect of <span class="s12">MODIFY.KEYACTIONS </span>is as if <span class="s12">(KEYACTION KEYNAME</span></p><p style="padding-left: 125pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s12">ACTIONS) </span>were performed for each item on <span class="s16">KEYACTIONS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">TERMINAL INPUT/OUTPUT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">SAVECURRENT? </span>is non-<span class="s12">NIL</span>, then <span class="s12">MODIFY.KEYACTIONS </span>returns a list of all the results from <span class="s16">KEYACTION</span>, otherwise it returns <span class="s12">NIL</span>. This can be used with a <span class="s12">MODIFY.KEYACTIONS </span>that appears in a <span class="s12">RESETFORM</span>, so that the list is built at &quot;entry&quot;, but not upon &quot;exit&quot;.</p><p class="s12" style="padding-top: 10pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">(<span class="s15">METASHIFT </span><span class="s16">FLG</span>)                                    <span class="p">[NoSpread Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 94%;text-align: justify;">If <span class="s16">FLG </span>is <span class="s12">T</span>, changes the keyboard handler (via <span class="s12">KEYACTION</span>) so as to interpret the &quot;stop&quot; key on the 1108 as a metashift: if a key is struck while the meta is down, it is read with the 200Q bit set. For <span class="s12">CHAT </span>users this is a way of getting an &quot;Edit&quot; key on your simulated Datamedia.</p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">If <span class="s16">FLG </span>is other than <span class="s12">NIL </span>or <span class="s12">T</span>, it is passed as the <span class="s12">ACTIONS </span>argument to <span class="s12">KEYACTION</span>. The reason for this is that if someone has set the &quot;<span class="s12">STOP</span>&quot; key to some random behavior, then <span class="s12">(RESETFORM (METASHIFT T) --) </span>will correctly restore that random behavior.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 4pt;text-indent: 0pt;text-align: center;">Display Screen                                                                                                                                                   </h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Medley supports a high-resolution bitmap display screen. All printing and drawing operations to the screen are actually performed on a bitmap in memory, which is read by the computer hardware to become visible as the screen. This section describes the functions used to control the appearance of the display screen.</p><p class="s12" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SCREENBITMAP</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Returns the screen bitmap.</p><p class="s15" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;line-height: 11pt;text-align: left;">SCREENWIDTH <span class="p">[Variable]</span></p><p class="s15" style="padding-left: 53pt;text-indent: 0pt;line-height: 11pt;text-align: left;">SCREENHEIGHT <span class="p">[Variable]</span></p><p style="padding-top: 6pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Value is the width and height of the screen bitmap, respectively.</p><p class="s15" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">WHOLEDISPLAY <span class="p">[Variable]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">Value is a region that is the size of the screen bitmap.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: justify;">The background shade of the display window can be changed using the following function:</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">CHANGEBACKGROUND </span><span class="s16">SHADE —</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 77pt;text-indent: 0pt;text-align: justify;">Changes the background shade of the window system. <span class="s16">SHADE </span>determines the pattern of the background. If <span class="s16">SHADE </span>is a texture, then the background is simply painted with it. If <span class="s16">SHADE </span>is a <span class="s12">BITMAP</span>, the background is tesselated (tiled) with it to cover the screen.  If <span class="s16">SHADE </span>is <span class="s12">T</span>, it changes to the original shade, the value of <span class="s12">WINDOWBACKGROUNDSHADE</span>. It returns the previous value of the background.</p><p class="s15" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">WINDOWBACKGROUNDSHADE <span class="p">[Variable]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">INTERLISP-D REFERENCE MANUAL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: justify;">Value is the default background shade for the display.</p><p class="s12" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">VIDEOCOLOR </span><span class="s16">BLACKFLG</span>) <span class="p">[NoSpread Function]</span></p><p style="padding-top: 4pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Sets the interpretation of the bits in the screen bitmap. If <span class="s16">BLACKFLG </span>is <span class="s12">NIL</span>, a 0 bit will be displayed as white, otherwise a 0 bit will be displayed as black. <span class="s12">VIDEOCOLOR </span>returns the previous setting. If <span class="s16">BLACKFLG </span>is not given, <span class="s12">VIDEOCOLOR </span>will return the current setting without changing anything.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Note: This function only works on the Xerox 1100 and Xerox 1108.</p><p class="s12" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">VIDEORATE </span><span class="s16">TYPE</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 126pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Sets the rate at which the screen is refreshed. <span class="s16">TYPE </span>is one of <span class="s12">NORMAL </span>or <span class="s12">TAPE</span>. If <span class="s16">TYPE </span>is <span class="s12">TAPE</span>, the screen will be refreshed at the same rate as TV (60 cycles per second). This makes the picture look better when video taping the screen. Note: Changing the rate may change the dimensions of the display on the picture tube.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Maintaining the video image on the screen uses cpu cycles, so turning off the display can improve the speed of compute-bound tasks. When the display is off, the screen will be white but any printing or displaying that the program does will be visible when the display is turned back on.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;line-height: 92%;text-align: left;">Note: Breaks and <span class="s12">PAGEFULLFN </span>waiting (see Chapter 28) turn the display on, but users should be aware that it is possible to have the system waiting for a response to a question printed or a menu displayed on a non-visible part of the screen. The functions below are provided to turn the display off.</p><p style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Note: These functions have no effect on the Xerox 1108 display.</p><p class="s12" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">SETDISPLAYHEIGHT </span><span class="s16">NSCANLINES</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Sets the display to only show the top <span class="s16">NSCANLINES </span>of the screen. If <span class="s16">NSCANLINES </span>is <span class="s12">T</span>, resets the display to show the full screen. Returns the previous setting.</p><p class="s12" style="padding-top: 10pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">DISPLAYDOWN </span><span class="s16">FORM NSCANLINES</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;">Evaluates <span class="s16">FORM </span>(with the display set to only show the top <span class="s16">NSCANLINES </span>of the screen), and returns the value of <span class="s16">FORM</span>. It restores the screen to its previous setting. If <span class="s16">NSCANLINES </span>is not given, it defaults to 0.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 47pt;text-indent: 0pt;text-align: center;">Miscellaneous Terminal I/O                                                                                                                              </h4><p class="s12" style="padding-top: 9pt;padding-left: 28pt;text-indent: 0pt;text-align: right;">(<span class="s15">RINGBELLS </span><span class="s16">N</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;">Flashes (reverse-videos) the screen <span class="s16">N </span>times (default 1). On the Xerox 1108, this also beeps through the keyboard speaker.</p><p class="s12" style="padding-top: 10pt;padding-left: 47pt;text-indent: 0pt;text-align: center;">(<span class="s15">PLAYTUNE </span><span class="s16">Frequency/Duration.pairlist</span>)                      <span class="p">[Function]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 4pt;padding-left: 360pt;text-indent: 0pt;text-align: left;">TERMINAL INPUT/OUTPUT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: justify;">On the Xerox 1108, <span class="s12">PLAYTUNE </span>plays a sequence of notes through the keyboard speaker. <span class="s16">Frequency/Duration.pairlist </span>should be a list of dotted pairs (<span class="s16">FREQUENCY . DURATION</span>). <span class="s12">PLAYTUNE </span>maps down its argument, beeping the 1108 keyboard buzzer at each frequency for the specified amount of time. Specifying <span class="s12">NIL </span>for a frequency means to turn the beeper off the specified amount of time. The units of time are <span class="s12">TICKS </span>(Chapter 12), which last about 28.78 microseconds on the Xerox 1108. <span class="s12">PLAYTUNE </span>makes no sound on a Xerox 1132. The default &quot;simulate&quot; entry for Control-G <span class="s12">(ASCII BEL) </span>on the 1108 uses <span class="s12">PLAYTUNE </span>to make a short beep.</p><p class="s12" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">PLAYTUNE <span class="p">is implemented using </span>BEEPON <span class="p">and </span>BEEPOFF<span class="p">:</span></p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">BEEPON </span><span class="s16">FREQ</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 93%;text-align: justify;">On the Xerox 1108, turns on the keyboard speaker playing a note with frequency <span class="s16">FREQ</span>, measured in Hertz (see Chapter 12). The speaker will continue to play the note until <span class="s12">BEEPOFF </span>is called.</p><p class="s12" style="padding-top: 9pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">BEEPOFF</span>) <span class="p">[Function]</span></p><p style="padding-top: 4pt;padding-left: 78pt;text-indent: 0pt;text-align: justify;">Turns off the keyboard speaker on the Xerox 1108.</p><p class="s12" style="padding-top: 10pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">(<span class="s15">SETMAINTPANEL </span><span class="s16">N</span>) <span class="p">[Function]</span></p><p style="padding-top: 5pt;padding-left: 77pt;text-indent: 0pt;line-height: 91%;text-align: justify;">On the Xerox 1108, this sets the four-digit &quot;maintanance panel&quot; display on the front of the computer to display the number <span class="s16">N</span>.</p></body></html>
