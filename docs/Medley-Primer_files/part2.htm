<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>01-GLOSSARY</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part1.htm">&lt; Previous</a><span> | </span><a href="../Medley-Primer.html">Contents</a><span> | </span><a href="part3.htm">Next &gt;</a></p><h1 style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;"><a name="bookmark1">1. BRIEF GLOSSARY</a></h1><p style="padding-left: 35pt;text-indent: 0pt;line-height: 6pt;text-align: left;"><span><img width="640" height="8" alt="image" src="Image_006.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 107pt;text-indent: 0pt;text-align: left;">The following definitions will acquaint you with general terms used throughout this primer. You will probably want to read through them now, and use this chapter as a reference while you read through the rest of the primer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 227pt;text-indent: -59pt;text-align: left;">advising A Medley facility for specifying function modifications without necessarily knowing how a particular function works or even what it does. Even system functions can be changed with</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">advising.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -65pt;text-align: left;">argument A piece of information given to a Lisp function so that it can execute successfully. When a function is explained in the</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">primer, the arguments that it requires will also be given. Arguments are also called Parameters.</p><p style="padding-top: 7pt;padding-left: 183pt;text-indent: 0pt;text-align: left;">atom The smallest structure in Lisp; like a variable in other</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">programming languages, but can also have a property list and a function definition.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -103pt;text-align: left;">Background Menu The menu that appears when the mouse is not in any window and the right mouse button is pressed.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -55pt;text-align: left;">binding The value of a variable. It could be either a local or a global variable. See unbound.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -53pt;text-align: justify;">bitmap A rectangular array of &quot;pixels,&quot; each of which is on or off representing one point in the bitmap image.</p><p class="s3" style="padding-top: 7pt;padding-left: 227pt;text-indent: -50pt;line-height: 106%;text-align: justify;">BREAK <span class="p">An Lisp function that causes a function to stop executing, open a Break window, and allows you to find out what is happening while the function is halted.</span></p><p style="padding-top: 6pt;padding-left: 137pt;text-indent: 0pt;text-align: left;">Break Window A window that opens when an error is encountered while</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">running your program (i.e., when your program has broken).</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">There are tools to help you debug your program from this window. This is explained further in Chapter 14.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -53pt;text-align: left;">browse To examine a data structure by use of a display that allows you to &quot;move&quot; around within the data structure.</p><p style="padding-top: 7pt;padding-left: 178pt;text-indent: 0pt;text-align: left;">button (1) (n.) A key on a mouse.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: 0pt;text-align: left;">(2) (v.t.) To press one of the mouse keys when making a selection.</p><p class="s3" style="padding-top: 7pt;padding-left: 188pt;text-indent: 0pt;text-align: left;">CAR <span class="p">A function that returns the head or first element of a list. See</span></p><p class="s3" style="padding-left: 227pt;text-indent: 0pt;text-align: left;">CDR<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -44pt;text-align: left;">caret The small blinking arrowhead that marks where text will appear when it is typed in from the keyboard.</p><p class="s3" style="padding-top: 7pt;padding-left: 227pt;text-indent: -38pt;line-height: 107%;text-align: left;">CDR <span class="p">A function that returns the tail (that is, everything but the first element) of a list. See </span>CAR<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 227pt;text-indent: -50pt;text-align: left;">CLlSP A mechanism for augmenting the standard Lisp syntax. One such augmentation included in Interlisp is the iterative</p><p style="padding-left: 197pt;text-indent: 30pt;line-height: 165%;text-align: left;">statement. See Chapter 9. cr Press your Return key.</p><p style="padding-left: 227pt;text-indent: -58pt;text-align: left;">datatype (1) The kind of a datum. In Interlisp, there are many system- defined datatypes, e.g., Floating-Point, Integer, Atom, etc.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: 0pt;text-align: left;">(2) A datatype can also be user-defined. In this case, it is like a record made up from system types and other user-defined datatypes.</p><p class="s3" style="padding-top: 7pt;padding-left: 227pt;text-indent: -45pt;text-align: left;">DWIM <span class="p">&quot;Do-what-I-mean.&quot; Many errors made by Medley users could be corrected without any information about the purpose of the program or expression in question (e.g., misspellings, certain kinds of parenthesis errors). The </span>DWIM <span class="p">facility is called</span></p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">automatically whenever an error occurs in the evaluation of an Interlisp expression. If <span class="s3">DWIM </span>is able to make a correction, the computation continues as though no error had occurred; otherwise, the standard error mechanism is invoked.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -43pt;text-align: justify;">error Occasionally, while a program is running, an error may occur which will stop the computation. Interlisp provides extensive facilities for detecting and handling error conditions, to</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: justify;">enable the testing, debugging, and revising of imperfect programs.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -99pt;line-height: 107%;text-align: left;">evaluate or <span class="s3">EVAL </span>To find the value of a form. For example, if the variable <span class="s3">X </span>is bound to 5, we get 5 by evaluating <span class="s3">X</span>. Evaluation of a Lisp function involves evaluating the arguments and then</p><p style="padding-left: 227pt;text-indent: 0pt;line-height: 11pt;text-align: left;">applying the function.</p><p style="padding-top: 7pt;padding-left: 120pt;text-indent: 0pt;text-align: left;">Executive Window This is your main window, where you will run functions and</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">develop your programs. This is the window that the caret is in when you turn on your machine and load Medley.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -75pt;text-align: left;">file package A set of functions and conventions that facilitate the bookkeeping involved with working in a large system consisting of many source code files and their compiled counterparts. Essentially, the file package keeps track of</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">where things are and what things have changed. It also keeps track of which files have been modified and need to be</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">updated and recompiled.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -42pt;text-align: left;">form Another way of saying s-expression. A Lisp expression that can be evaluated.</p><p style="padding-top: 1pt;padding-left: 174pt;text-indent: -6pt;line-height: 19pt;text-align: left;">function A piece of Lisp code that executes and returns a value. history The programmerâ€™s assistant is built around a memory</p><p style="padding-left: 227pt;text-indent: 0pt;line-height: 10pt;text-align: left;">structure called the history list. The history functions (e.g.</p><p class="s3" style="padding-left: 227pt;text-indent: 0pt;line-height: 107%;text-align: left;">FIX<span class="p">, </span>UNDO<span class="p">, </span>REDO<span class="p">) are part of this assistant. These operations allow you to conveniently rework previously specified</span></p><p style="padding-left: 227pt;text-indent: 0pt;line-height: 11pt;text-align: left;">operations.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -76pt;text-align: justify;">History List As you type on the screen, you will notice a number followed by a slash, followed by another number. The first number is the exec number, the second is the event number. Each</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: justify;">number, and the information on that line, is stored</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: justify;">sequentially as the History List Using the History List, you</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 227pt;text-indent: 0pt;text-align: left;">can easily reexecute lines typed earlier in a work session. See Chapter 2.</p><p style="padding-top: 7pt;padding-left: 187pt;text-indent: 0pt;text-align: left;">icon A pictorial representation, usually of a shrunken window.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -63pt;text-align: justify;">inspector An interactive display program for examining and changing the parts of a data structure. Medley has inspectors for lists and other data types.</p><p style="padding-top: 7pt;padding-left: 117pt;text-indent: 0pt;text-align: left;">iterative statement (also called i.s.) A statement in Interlisp that repetitively</p><p style="padding-left: 227pt;text-indent: 0pt;line-height: 107%;text-align: left;">executes a body of code For example, <span class="s3">(for x from l to 5 do (PRlNT x)) </span>is an i.s.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -100pt;text-align: left;">iterative variable (also called i.v.) Usually, an iterative statement is controlled by the value that the i.v. takes on. In the iterative statement</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">example above, x is the iterative variable because its value is being changed by each cycle through the loop. All iterative</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">variables are local to the iterative statement where they are defined.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -40pt;text-align: left;">Lisp Family of languages invented for &quot;list processing.&quot; These languages have in common a set of basic primitives for</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">creating and manipulating symbol structures. Interlisp-D is an implementation of the Lisp language together with an</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">environment (set of tools) for programming, and a set of packages that extend the functionality of the system.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -35pt;text-align: left;">list A collection of atoms and lists; a list is denoted by surrounding its contents with a pair of parentheses.</p><p style="padding-top: 7pt;padding-left: 148pt;text-indent: 0pt;text-align: left;">Masterscope A program analysis tool. When told to analyze a program,</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">Masterscope creates a database of information about the</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">program. In particular, Masterscope knows which functions call other functions and which functions use which variables.</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">Masterscope can then answer questions about the program and display the information with a browser.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -46pt;text-align: left;">menu A way of graphically presenting you with a set of options.</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">There are two kinds of menus: pop-up menus are created</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">when needed and disappear after an item has been selected; permanent menus remain on the screen after use until</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">deliberately closed.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -50pt;text-align: left;">mouse The mouse is the box attached to your keyboard. It controls the movement of the cursor on your screen. As you become</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">familiar with the mouse, you will find it much quicker to use the mouse than the keyboard.</p><p style="padding-top: 7pt;padding-left: 141pt;text-indent: 0pt;text-align: left;">Mouse Cursor The small arrow on the screen that points to the northwest.</p><p style="padding-top: 7pt;padding-left: 117pt;text-indent: 0pt;text-align: left;">Mouse Cursor Icons Four types of mouse cursor icons are shown below.</p><p style="padding-top: 9pt;padding-left: 190pt;text-indent: 0pt;text-align: left;"><span><img width="20" height="21" alt="image" src="Image_007.gif"/></span>         Wait. The processor is busy.</p><p style="padding-top: 9pt;padding-left: 227pt;text-indent: -33pt;text-align: left;"><span><img width="17" height="21" alt="image" src="Image_008.gif"/></span>        The Mouse Confirm Cursor. It appears when you have to confirm that the choice you just made was correct. If it was, press the left button. If the choice was not correct, press the right button to abort.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="21" height="19" alt="image" src="Image_009.gif"/></span></p><p style="padding-top: 4pt;padding-left: 227pt;text-indent: 0pt;text-align: left;">This means &quot;sweep out&quot; the shape of the window. To do this, move the mouse to a position where you want a corner. Press the left mouse button, and hold it down. Move the mouse</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">diagonally to sketch a rectangle. When the rectangle is the desired size and shape, release the left button.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="16" height="16" alt="image" src="Image_010.gif"/></span></p><p style="padding-top: 4pt;padding-left: 227pt;text-indent: 0pt;text-align: left;">This is the &quot;move window&quot; prompt. Move the mouse so that the large &quot;ghost&quot; rectangle is in the position where you want the window. When you click the left mouse button, the</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">window will appear at this new location.</p><p class="s3" style="padding-top: 7pt;padding-left: 227pt;text-indent: -39pt;line-height: 107%;text-align: left;">NIL NIL <span class="p">is the Lisp symbol for the empty list. It can also be represented by a left parenthesis followed by a right</span></p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">parenthesis ( ). It is the only expression in Lisp that is both an atom and a list.</p><p style="padding-top: 6pt;padding-left: 184pt;text-indent: 0pt;text-align: justify;">pixel Pixel stands for &quot;picture element.&quot; The computer monitor</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: justify;">screen is made up of a rectangular array of pixels. Each pixel corresponds to one bit. When a bit is turned on (i.e., set to 1), the pixel on the screen represented by this bit is black.</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -89pt;text-align: left;">pretty printing Pretty printing refers to the way Lisp functions are printed with special indentation, to make them easier to read.</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">Functions are pretty printed in the structure editor, SEdit</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">(see Chapter 7). You can pretty print uncompiled functions by calling the function <span class="s3">PP </span>with the function you would like to</p><p style="padding-left: 227pt;text-indent: 0pt;line-height: 107%;text-align: left;">see as an argument, i.e. (<span class="s3">PP </span>function-name). For an example of this, see Figure 1.5.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 242pt;text-indent: 0pt;text-align: left;"><span><img width="344" height="230" alt="image" src="Image_011.gif"/></span></p><p style="padding-top: 3pt;padding-left: 252pt;text-indent: 0pt;text-align: left;">Figure 1.5. Example of Pretty Printing Function <span class="s3">PP</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 141pt;text-indent: 0pt;text-align: left;">Programmerâ€™s</p><p style="padding-left: 227pt;text-indent: -64pt;text-align: left;">Assistant The programmerâ€™s assistant accesses the History List to allow you to <span class="s3">FIX</span>, <span class="s3">UNDO</span>, and/or <span class="s3">REDO </span>your previous expressions</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">typed to the executive window (see Chapter 2).</p><p style="padding-top: 7pt;padding-left: 227pt;text-indent: -95pt;text-align: left;">Prompt Window The narrow black window at the top of the screen. It displays system prompts, or prompts you have developed (see Figure 1.6).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 270pt;text-indent: 0pt;text-align: left;"><span><img width="267" height="101" alt="image" src="Image_012.gif"/></span></p><p style="padding-top: 4pt;padding-left: 307pt;text-indent: 0pt;text-align: left;">Figure 1.6. Prompt Window</p><p style="padding-top: 7pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">property list A list of the form ( &lt;property-namel&gt; &lt;property-value1&gt;</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">&lt;property-name2&gt; &lt;property-value2&gt; ....) associated with an atom. It accessed by the functions <span class="s3">GETPROP </span>and <span class="s3">PUTPROP</span>.</p><p style="padding-top: 7pt;padding-left: 177pt;text-indent: 0pt;text-align: left;">record A record is a data structure that consists of named &quot;fields&quot;.</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">Accessing elements of a record can be separated from the details of how the data structure is actually stored. This</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">eliminates many programming details. A record definition</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">establishes a record template, describing the form of a record. A record instance is an actual record storing data according to a particular record template. (See datatype, second</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">definition.)</p><p style="padding-top: 7pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">Right Button Default</p><p style="padding-left: 139pt;text-indent: 0pt;text-align: left;">Window Menu This is the menu that appears when the mouse is in a</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">window, and the right mouse button is pressed. It looks like the menu in Figure 1.7. If this menu does not appear when you press the right button of the mouse and the mouse is in</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">the window, move the mouse so that it is pointing to the title bar of the window, and press the right button.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 344pt;text-indent: 0pt;text-align: left;"><span><img width="71" height="134" alt="image" src="Image_013.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 260pt;text-indent: 0pt;text-align: left;">Figure 1.7. Right Button Default Window Menu</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 227pt;text-indent: -77pt;text-align: justify;">s-expression Short for &quot;symbolic expression&quot;. In Lisp, this refers to any well-formed collection of left parentheses, atoms, and right parentheses.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 227pt;text-indent: -45pt;text-align: left;">stack A pushdown list. Whenever a function is entered, information about that specific function call is pushed onto (i.e., added to</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">the front of) the stack. This information includes the variable names and their values associated with the function call.</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">When the function is exitted, that data is popped off the stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 176pt;text-indent: 0pt;text-align: left;">sysout A flle containing a whole Lisp environment: namely,</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">everything you defined or loaded into the environment, the windows that appeared on the screen, the amount of memory</p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;">used, and so on. Everything is stored in the sysout file exactly as it was when the function <span class="s3">SYSOUT </span>was called.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 4pt;padding-left: 176pt;text-indent: 0pt;text-align: justify;">TRACE <span class="p">A function that creates a trace of the execution of another</span></p><p style="padding-left: 227pt;text-indent: 0pt;text-align: justify;">function. Each time the traced function is called, it prints out the values of the arguments it was called with, and prints out the value it returns upon completion.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 227pt;text-indent: -61pt;text-align: left;">unbound Without value; an atom is unbound if a value has never been assigned to it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 227pt;text-indent: -56pt;text-align: left;">window A rectangular area of the screen that acts as the main display area for some Lisp process,</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part1.htm">&lt; Previous</a><span> | </span><a href="../Medley-Primer.html">Contents</a><span> | </span><a href="part3.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
